{"version":3,"file":"main.27e8f360.js","sources":["../../../../examples/sdk-example/src/host/layout-examples.tsx","../../../../examples/sdk-example/src/host/host.tsx","../../../../examples/sdk-example/src/host-main.tsx"],"sourcesContent":["/* ---------------------------------------------------------------------------------------------\n * Copyright (c) Infiniscene, Inc. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * -------------------------------------------------------------------------------------------- */\nimport { init, Helpers } from '@api.stream/studio-kit'\n\nexport const DEFAULT_LAYOUT = 'Grid'\n\nexport const layouts = [\n  'Grid',\n  'Grid-Cover',\n  'Half',\n  'Half-Cover',\n  'Presentation-Right',\n  'Presentation-Bottom',\n  'Presentation-Cover',\n  'Column',\n  'Column-Cover',\n  'Row',\n  'Row-Cover',\n]\n\n// Custom layout configurations\n//  Note: Management of layout props can be done in any way that makes\n//  sense for your application (or not at all)\nexport const getLayout = (\n  name: string,\n): {\n  layout: Helpers.ScenelessProject.LayoutName\n  props: Helpers.ScenelessProject.LayoutProps\n} => {\n  switch (name) {\n    case 'Grid': {\n      return {\n        layout: 'Grid',\n        props: {\n          cover: false,\n        },\n      }\n    }\n    case 'Grid-Cover': {\n      return {\n        layout: 'Grid',\n        props: {\n          cover: true,\n        },\n      }\n    }\n    case 'Half': {\n      return {\n        layout: 'Presentation',\n        props: {\n          cover: false,\n          useGrid: true,\n          barPosition: 'side',\n          barWidth: 0.5,\n        },\n      }\n    }\n    case 'Half-Cover': {\n      return {\n        layout: 'Presentation',\n        props: {\n          cover: true,\n          useGrid: true,\n          barPosition: 'side',\n          barWidth: 0.5,\n        },\n      }\n    }\n    case 'Presentation-Right': {\n      return {\n        layout: 'Presentation',\n        props: {\n          cover: false,\n          justifyViewers: 'center',\n          barPosition: 'side',\n          barWidth: 0.2,\n        },\n      }\n    }\n    case 'Presentation-Bottom': {\n      return {\n        layout: 'Presentation',\n        props: {\n          cover: false,\n          justifyViewers: 'center',\n          barPosition: 'bottom',\n          barWidth: 0.2,\n        },\n      }\n    }\n    case 'Presentation-Cover': {\n      return {\n        layout: 'Presentation',\n        props: {\n          cover: true,\n          justifyViewers: 'flex-end',\n          barPosition: 'bottom',\n          barWidth: 0.2,\n        },\n      }\n    }\n    case 'Column': {\n      return {\n        layout: 'Column',\n        props: {\n          cover: false,\n        },\n      }\n    }\n    case 'Column-Cover': {\n      return {\n        layout: 'Column',\n        props: {\n          cover: true,\n        },\n      }\n    }\n    case 'Row': {\n      return {\n        layout: 'Row',\n        props: {\n          cover: false,\n        },\n      }\n    }\n    case 'Row-Cover': {\n      return {\n        layout: 'Row',\n        props: {\n          cover: true,\n        },\n      }\n    }\n  }\n}\n","/* ---------------------------------------------------------------------------------------------\n * Copyright (c) Infiniscene, Inc. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * -------------------------------------------------------------------------------------------- */\nimport React, { useContext, useEffect, useMemo, useRef, useState } from 'react'\nimport { init, Helpers } from '@api.stream/studio-kit'\nimport { Participants } from '../shared/participant'\nimport Style from '../shared/shared.module.css'\nimport { ControlPanel, DeviceSelection } from '../shared/control-panel'\nimport { DEFAULT_LAYOUT, getLayout, layouts } from './layout-examples'\nimport { Chat } from '../shared/chat'\nimport config from '../../config'\n\nconst { ScenelessProject } = Helpers\nconst { useStudio } = Helpers.React\n\nconst getUrl = () =>\n  window.location.protocol +\n  '//' +\n  window.location.host +\n  window.location.pathname\n\nconst storage = {\n  userName: localStorage.getItem('userName') || '',\n  // Use the service name in memory or generate a new (pseudo)-random\n  serviceName:\n    localStorage.getItem('serviceName') ||\n    'Example-' + Math.floor(Math.random() * 1e6),\n}\n\nconst Login = (props: {\n  onLogin: ({\n    token,\n    userName,\n    serviceName,\n  }: {\n    token: string\n    userName: string\n    serviceName: string\n  }) => void\n}) => {\n  const { studio } = useStudio()\n  const { onLogin } = props\n  const [userName, setUserName] = useState(storage.userName)\n  const [serviceName, setServiceName] = useState(storage.serviceName)\n\n  const login = async (e: any) => {\n    e.preventDefault()\n    const token = await studio.createDemoToken({\n      // Replace this with a unique identifier of your service.\n      //  It has been randomized for the purposes of this demo.\n      serviceName,\n      userId: userName,\n      name: userName,\n    })\n    onLogin({ token, userName, serviceName })\n  }\n\n  return (\n    <form\n      className={Style.column}\n      onSubmit={login}\n      style={{ width: 316, alignItems: 'flex-end' }}\n    >\n      <div className={Style.column}>\n        <label>Service identifier</label>\n        <input\n          type=\"text\"\n          autoFocus={true}\n          defaultValue={serviceName}\n          onChange={(e) => {\n            setServiceName(e.target.value)\n          }}\n        />\n      </div>\n      <div className={Style.column}>\n        <label>Username</label>\n        <input\n          type=\"text\"\n          autoFocus={true}\n          defaultValue={userName}\n          onChange={(e) => {\n            setUserName(e.target.value)\n          }}\n        />\n      </div>\n      <button onClick={login} style={{ marginTop: 8, width: 70 }}>\n        Login\n      </button>\n    </form>\n  )\n}\n\nconst Project = () => {\n  const { studio, project, room, projectCommands } = useStudio()\n  const renderContainer = useRef()\n  const destination = project.destinations[0]\n  const destinationAddress = destination?.address.rtmpPush\n  const { Command } = studio\n\n  const [rtmpUrl, setRtmpUrl] = useState(destinationAddress?.url)\n  const [streamKey, setStreamKey] = useState(destinationAddress?.key)\n  const [previewUrl, setPreviewUrl] = useState('')\n  const [guestUrl, setGuestUrl] = useState('')\n  const [isLive, setIsLive] = useState(false)\n\n  // Get custom layout name from metadata we store\n  const layout = project.props.layout\n  const background = projectCommands.getBackgroundImage()\n\n  // Listen for project events\n  useEffect(() => {\n    return project.subscribe((event, payload) => {\n      if (event === 'BroadcastStarted') {\n        setIsLive(true)\n      } else if (event === 'BroadcastStopped') {\n        setIsLive(false)\n      }\n    })\n  }, [])\n\n  // Generate project links\n  useEffect(() => {\n    studio.createPreviewLink().then(setPreviewUrl)\n    studio.createGuestLink(getUrl() + 'guest/').then(setGuestUrl)\n  }, [])\n\n  useEffect(() => {\n    studio.render({\n      containerEl: renderContainer.current,\n      projectId: project.id,\n      dragAndDrop: true,\n    })\n  }, [renderContainer.current])\n\n  return (\n    <div className={Style.column}>\n      <div style={{ fontSize: 11, marginBottom: 14 }}>\n        Logged in as {localStorage.userName}\n        <div>\n          <a\n            onClick={() => {\n              // Clear the session and reload\n              localStorage.removeItem('token')\n              window.location.reload()\n            }}\n          >\n            Log out\n          </a>\n        </div>\n      </div>\n      <div className={Style.column} style={{ width: 316 }}>\n        <label>RTMP Url</label>\n        <input\n          type=\"text\"\n          defaultValue={rtmpUrl}\n          onChange={(e) => {\n            setRtmpUrl(e.target.value)\n          }}\n        />\n        <label>Stream Key</label>\n        <input\n          type=\"text\"\n          defaultValue={streamKey}\n          onChange={(e) => {\n            setStreamKey(e.target.value)\n          }}\n        />\n        <div\n          className={Style.row}\n          style={{ width: '100%', justifyContent: 'flex-end', marginTop: 5 }}\n        >\n          {!isLive ? (\n            <button\n              onClick={async () => {\n                await Command.setDestination({\n                  projectId: project.id,\n                  rtmpKey: streamKey,\n                  rtmpUrl,\n                })\n                Command.startBroadcast({\n                  projectId: project.id,\n                })\n              }}\n            >\n              Go Live\n            </button>\n          ) : (\n            <button\n              onClick={() => {\n                Command.stopBroadcast({\n                  projectId: project.id,\n                })\n              }}\n            >\n              End broadcast\n            </button>\n          )}\n        </div>\n      </div>\n      <div\n        className={Style.row}\n        style={{\n          marginTop: 14,\n          marginBottom: 8,\n          background: '#242533',\n          padding: 10,\n        }}\n      >\n        <Participants />\n        <div\n          className={Style.column}\n          style={{ marginLeft: 14, marginBottom: 14 }}\n        >\n          <div className={Style.column}>\n            <label>Background URL</label>\n            <input\n              type=\"text\"\n              defaultValue={background}\n              onChange={(e) => {\n                projectCommands.setBackgroundImage(e.target.value)\n              }}\n            />\n          </div>\n          <div className={Style.column}>\n            <label>Layout</label>\n            <select\n              defaultValue={layout}\n              onChange={(e) => {\n                const { layout, props } = getLayout(e.target.value)\n                projectCommands.setLayout(layout, props)\n\n                // Store our custom layout configuration by name\n                studio.Command.updateProjectMeta({\n                  projectId: project.id,\n                  meta: {\n                    layout: e.target.value,\n                  },\n                })\n              }}\n            >\n              {layouts.map((x) => (\n                <option key={x} value={x}>\n                  {x}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div\n            ref={renderContainer}\n            style={{ width: 840, height: 500 }}\n          ></div>\n          <div className={Style.row}>\n            <DeviceSelection />\n            <div\n              style={{\n                marginLeft: 20,\n                marginTop: 12,\n              }}\n            >\n              <ControlPanel />\n            </div>\n          </div>\n        </div>\n        <div style={{ marginLeft: 14 }}>\n          <Chat />\n        </div>\n      </div>\n      <div className={Style.column}>\n        <label>Preview URL</label>\n        <input\n          // @ts-ignore\n          onClick={(e) => e.target.select()}\n          value={previewUrl}\n          readOnly={true}\n          style={{ width: 630 }}\n        />\n      </div>\n      <div className={Style.column}>\n        <label>Guest URL</label>\n        <input\n          // @ts-ignore\n          onClick={(e) => e.target.select()}\n          value={guestUrl}\n          readOnly={true}\n          style={{ width: 630 }}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport const HostView = () => {\n  const {\n    studio,\n    project,\n    projectCommands,\n    room,\n    setProject,\n    setRoom,\n    setStudio,\n  } = useStudio()\n  const [token, setToken] = useState<string>(localStorage['token'])\n  const [failure, setFailure] = useState<string>(null)\n\n  // Store as a global for debugging in console\n  window.SDK = useStudio()\n\n  useEffect(() => {\n    init({\n      env: config.env,\n      logLevel: config.logLevel,\n    })\n      .then(setStudio)\n      .catch((e) => {\n        console.warn('Failed to initialize', e)\n        setFailure(e.message)\n      })\n  }, [])\n\n  useEffect(() => {\n    if (!studio) return\n\n    // If the SDK detects a token in the URL, it will return the project\n    //  associated with it (e.g. guest view)\n    setProject(studio.initialProject)\n  }, [studio])\n\n  useEffect(() => {\n    if (!token || !studio || project) return\n    // Log in\n    studio\n      .load(token)\n      .then(async (user) => {\n        // If there's a project, return it - otherwise create one\n        let project = user.projects[0]\n        if (!project) {\n          const { layout, props } = getLayout(DEFAULT_LAYOUT)\n          project = await ScenelessProject.create(\n            {\n              backgroundImage: getUrl() + 'bg.png',\n              layout,\n              layoutProps: props,\n            },\n            // Store our custom layout in metadata for future reference\n            { layout: DEFAULT_LAYOUT },\n          )\n        }\n        const activeProject = await studio.Command.setActiveProject({\n          projectId: project.id,\n        })\n        const room = await activeProject.joinRoom({\n          displayName: localStorage.userName,\n        })\n\n        setRoom(room)\n        setProject(activeProject)\n      })\n      .catch((e) => {\n        console.warn(e)\n        setToken(null)\n        localStorage.removeItem('token')\n      })\n  }, [studio, token, project])\n\n  useEffect(() => {\n    if (!projectCommands || !room) return\n    // Prune non-existent participants from the project\n    projectCommands.pruneParticipants()\n  }, [projectCommands, room])\n\n  if (project && room) {\n    return <Project />\n  }\n  if (studio && !token) {\n    return (\n      <Login\n        onLogin={({ userName, serviceName, token }) => {\n          setToken(token)\n          // Update storage/session data\n          localStorage.setItem('serviceName', serviceName)\n          localStorage.setItem('userName', userName)\n          localStorage.setItem('token', token)\n        }}\n      />\n    )\n  }\n  if (failure) {\n    return <div>Failed to initialize: `{failure}`</div>\n  }\n  return <div>Loading...</div>\n}\n","/* ---------------------------------------------------------------------------------------------\n * Copyright (c) Infiniscene, Inc. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * -------------------------------------------------------------------------------------------- */\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { HostView } from './host/host'\nimport { AppProvider } from './shared/context'\nimport { Helpers } from '@api.stream/studio-kit'\nimport url from '../logo.png'\nimport './index.css'\nimport '../Font.ttf'\n\nconst StudioProvider = Helpers.React.StudioProvider\n\nconst Content = () => {\n  return (\n    <div>\n      <div id=\"header\">\n        <a href=\"https://api.stream/\" target=\"_blank\">\n          <img src={url} height={20} />\n        </a>\n        <h1>\n          Studio Kit\n          <span>Demo</span>\n        </h1>\n      </div>\n      <AppProvider isHost={true}>\n        <StudioProvider>\n          <HostView />\n        </StudioProvider>\n      </AppProvider>\n    </div>\n  )\n}\n\nReactDOM.render(<Content />, document.getElementById('root'))\n"],"names":["DEFAULT_LAYOUT","layouts","getLayout","name","layout","props","cover","useGrid","barPosition","barWidth","justifyViewers","ScenelessProject","Helpers","useStudio","React","getUrl","window","location","protocol","host","pathname","storage","userName","localStorage","getItem","serviceName","Math","floor","random","Login","studio","onLogin","setUserName","useState","setServiceName","login","e","preventDefault","token","createDemoToken","userId","className","Style","column","onSubmit","style","width","alignItems","children","_jsxs","_jsx","type","autoFocus","defaultValue","onChange","target","value","onClick","marginTop","Project","project","room","projectCommands","renderContainer","useRef","destination","destinations","destinationAddress","address","rtmpPush","Command","rtmpUrl","setRtmpUrl","url","streamKey","setStreamKey","key","previewUrl","setPreviewUrl","guestUrl","setGuestUrl","isLive","setIsLive","background","getBackgroundImage","useEffect","subscribe","event","payload","createPreviewLink","then","createGuestLink","render","containerEl","current","projectId","id","dragAndDrop","fontSize","marginBottom","removeItem","reload","row","justifyContent","setDestination","rtmpKey","startBroadcast","stopBroadcast","padding","Participants","marginLeft","setBackgroundImage","setLayout","updateProjectMeta","meta","map","x","ref","height","DeviceSelection","ControlPanel","Chat","select","readOnly","HostView","setProject","setRoom","setStudio","setToken","failure","setFailure","SDK","init","env","config","logLevel","catch","warn","message","initialProject","load","user","projects","project2","create","backgroundImage","layoutProps","activeProject","setActiveProject","joinRoom","displayName","console","pruneParticipants","setItem","StudioProvider","Content","href","src","AppProvider","isHost","ReactDOM","document","getElementById"],"mappings":"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"}