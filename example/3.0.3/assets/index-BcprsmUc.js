(function polyfill() {
  const relList = document.createElement("link").relList;
  if (relList && relList.supports && relList.supports("modulepreload")) {
    return;
  }
  for (const link of document.querySelectorAll('link[rel="modulepreload"]')) {
    processPreload(link);
  }
  new MutationObserver((mutations) => {
    for (const mutation of mutations) {
      if (mutation.type !== "childList") {
        continue;
      }
      for (const node of mutation.addedNodes) {
        if (node.tagName === "LINK" && node.rel === "modulepreload")
          processPreload(node);
      }
    }
  }).observe(document, { childList: true, subtree: true });
  function getFetchOpts(link) {
    const fetchOpts = {};
    if (link.integrity)
      fetchOpts.integrity = link.integrity;
    if (link.referrerPolicy)
      fetchOpts.referrerPolicy = link.referrerPolicy;
    if (link.crossOrigin === "use-credentials")
      fetchOpts.credentials = "include";
    else if (link.crossOrigin === "anonymous")
      fetchOpts.credentials = "omit";
    else
      fetchOpts.credentials = "same-origin";
    return fetchOpts;
  }
  function processPreload(link) {
    if (link.ep)
      return;
    link.ep = true;
    const fetchOpts = getFetchOpts(link);
    fetch(link.href, fetchOpts);
  }
})();
function getDefaultExportFromCjs$2(x2) {
  return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
}
var reactDom = { exports: {} };
var reactDom_production_min = {};
var react$1 = { exports: {} };
var react_production_min = {};
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty$g = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;
function toObject(val) {
  if (val === null || val === void 0) {
    throw new TypeError("Object.assign cannot be called with null or undefined");
  }
  return Object(val);
}
function shouldUseNative() {
  try {
    if (!Object.assign) {
      return false;
    }
    var test1 = new String("abc");
    test1[5] = "de";
    if (Object.getOwnPropertyNames(test1)[0] === "5") {
      return false;
    }
    var test2 = {};
    for (var i2 = 0; i2 < 10; i2++) {
      test2["_" + String.fromCharCode(i2)] = i2;
    }
    var order2 = Object.getOwnPropertyNames(test2).map(function(n2) {
      return test2[n2];
    });
    if (order2.join("") !== "0123456789") {
      return false;
    }
    var test3 = {};
    "abcdefghijklmnopqrst".split("").forEach(function(letter) {
      test3[letter] = letter;
    });
    if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
      return false;
    }
    return true;
  } catch (err) {
    return false;
  }
}
var objectAssign = shouldUseNative() ? Object.assign : function(target, source) {
  var from2;
  var to = toObject(target);
  var symbols;
  for (var s2 = 1; s2 < arguments.length; s2++) {
    from2 = Object(arguments[s2]);
    for (var key in from2) {
      if (hasOwnProperty$g.call(from2, key)) {
        to[key] = from2[key];
      }
    }
    if (getOwnPropertySymbols) {
      symbols = getOwnPropertySymbols(from2);
      for (var i2 = 0; i2 < symbols.length; i2++) {
        if (propIsEnumerable.call(from2, symbols[i2])) {
          to[symbols[i2]] = from2[symbols[i2]];
        }
      }
    }
  }
  return to;
};
/** @license React v17.0.2
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var l = objectAssign, n$2 = 60103, p$1 = 60106;
react_production_min.Fragment = 60107;
react_production_min.StrictMode = 60108;
react_production_min.Profiler = 60114;
var q$1 = 60109, r$3 = 60110, t$1 = 60112;
react_production_min.Suspense = 60113;
var u = 60115, v = 60116;
if ("function" === typeof Symbol && Symbol.for) {
  var w$1 = Symbol.for;
  n$2 = w$1("react.element");
  p$1 = w$1("react.portal");
  react_production_min.Fragment = w$1("react.fragment");
  react_production_min.StrictMode = w$1("react.strict_mode");
  react_production_min.Profiler = w$1("react.profiler");
  q$1 = w$1("react.provider");
  r$3 = w$1("react.context");
  t$1 = w$1("react.forward_ref");
  react_production_min.Suspense = w$1("react.suspense");
  u = w$1("react.memo");
  v = w$1("react.lazy");
}
var x = "function" === typeof Symbol && Symbol.iterator;
function y$2(a88) {
  if (null === a88 || "object" !== typeof a88)
    return null;
  a88 = x && a88[x] || a88["@@iterator"];
  return "function" === typeof a88 ? a88 : null;
}
function z(a88) {
  for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a88, c = 1; c < arguments.length; c++)
    b += "&args[]=" + encodeURIComponent(arguments[c]);
  return "Minified React error #" + a88 + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
}
var A = { isMounted: function() {
  return false;
}, enqueueForceUpdate: function() {
}, enqueueReplaceState: function() {
}, enqueueSetState: function() {
} }, B$1 = {};
function C(a88, b, c) {
  this.props = a88;
  this.context = b;
  this.refs = B$1;
  this.updater = c || A;
}
C.prototype.isReactComponent = {};
C.prototype.setState = function(a88, b) {
  if ("object" !== typeof a88 && "function" !== typeof a88 && null != a88)
    throw Error(z(85));
  this.updater.enqueueSetState(this, a88, b, "setState");
};
C.prototype.forceUpdate = function(a88) {
  this.updater.enqueueForceUpdate(this, a88, "forceUpdate");
};
function D$1() {
}
D$1.prototype = C.prototype;
function E$1(a88, b, c) {
  this.props = a88;
  this.context = b;
  this.refs = B$1;
  this.updater = c || A;
}
var F$1 = E$1.prototype = new D$1();
F$1.constructor = E$1;
l(F$1, C.prototype);
F$1.isPureReactComponent = true;
var G$1 = { current: null }, H$1 = Object.prototype.hasOwnProperty, I$1 = { key: true, ref: true, __self: true, __source: true };
function J(a88, b, c) {
  var e2, d2 = {}, k = null, h2 = null;
  if (null != b)
    for (e2 in void 0 !== b.ref && (h2 = b.ref), void 0 !== b.key && (k = "" + b.key), b)
      H$1.call(b, e2) && !I$1.hasOwnProperty(e2) && (d2[e2] = b[e2]);
  var g2 = arguments.length - 2;
  if (1 === g2)
    d2.children = c;
  else if (1 < g2) {
    for (var f2 = Array(g2), m2 = 0; m2 < g2; m2++)
      f2[m2] = arguments[m2 + 2];
    d2.children = f2;
  }
  if (a88 && a88.defaultProps)
    for (e2 in g2 = a88.defaultProps, g2)
      void 0 === d2[e2] && (d2[e2] = g2[e2]);
  return { $$typeof: n$2, type: a88, key: k, ref: h2, props: d2, _owner: G$1.current };
}
function K(a88, b) {
  return { $$typeof: n$2, type: a88.type, key: b, ref: a88.ref, props: a88.props, _owner: a88._owner };
}
function L(a88) {
  return "object" === typeof a88 && null !== a88 && a88.$$typeof === n$2;
}
function escape(a88) {
  var b = { "=": "=0", ":": "=2" };
  return "$" + a88.replace(/[=:]/g, function(a92) {
    return b[a92];
  });
}
var M$1 = /\/+/g;
function N$1(a88, b) {
  return "object" === typeof a88 && null !== a88 && null != a88.key ? escape("" + a88.key) : b.toString(36);
}
function O$1(a88, b, c, e2, d2) {
  var k = typeof a88;
  if ("undefined" === k || "boolean" === k)
    a88 = null;
  var h2 = false;
  if (null === a88)
    h2 = true;
  else
    switch (k) {
      case "string":
      case "number":
        h2 = true;
        break;
      case "object":
        switch (a88.$$typeof) {
          case n$2:
          case p$1:
            h2 = true;
        }
    }
  if (h2)
    return h2 = a88, d2 = d2(h2), a88 = "" === e2 ? "." + N$1(h2, 0) : e2, Array.isArray(d2) ? (c = "", null != a88 && (c = a88.replace(M$1, "$&/") + "/"), O$1(d2, b, c, "", function(a92) {
      return a92;
    })) : null != d2 && (L(d2) && (d2 = K(d2, c + (!d2.key || h2 && h2.key === d2.key ? "" : ("" + d2.key).replace(M$1, "$&/") + "/") + a88)), b.push(d2)), 1;
  h2 = 0;
  e2 = "" === e2 ? "." : e2 + ":";
  if (Array.isArray(a88))
    for (var g2 = 0; g2 < a88.length; g2++) {
      k = a88[g2];
      var f2 = e2 + N$1(k, g2);
      h2 += O$1(k, b, c, f2, d2);
    }
  else if (f2 = y$2(a88), "function" === typeof f2)
    for (a88 = f2.call(a88), g2 = 0; !(k = a88.next()).done; )
      k = k.value, f2 = e2 + N$1(k, g2++), h2 += O$1(k, b, c, f2, d2);
  else if ("object" === k)
    throw b = "" + a88, Error(z(31, "[object Object]" === b ? "object with keys {" + Object.keys(a88).join(", ") + "}" : b));
  return h2;
}
function P$1(a88, b, c) {
  if (null == a88)
    return a88;
  var e2 = [], d2 = 0;
  O$1(a88, e2, "", "", function(a92) {
    return b.call(c, a92, d2++);
  });
  return e2;
}
function Q(a88) {
  if (-1 === a88._status) {
    var b = a88._result;
    b = b();
    a88._status = 0;
    a88._result = b;
    b.then(function(b2) {
      0 === a88._status && (b2 = b2.default, a88._status = 1, a88._result = b2);
    }, function(b2) {
      0 === a88._status && (a88._status = 2, a88._result = b2);
    });
  }
  if (1 === a88._status)
    return a88._result;
  throw a88._result;
}
var R$2 = { current: null };
function S$1() {
  var a88 = R$2.current;
  if (null === a88)
    throw Error(z(321));
  return a88;
}
var T$1 = { ReactCurrentDispatcher: R$2, ReactCurrentBatchConfig: { transition: 0 }, ReactCurrentOwner: G$1, IsSomeRendererActing: { current: false }, assign: l };
react_production_min.Children = { map: P$1, forEach: function(a88, b, c) {
  P$1(a88, function() {
    b.apply(this, arguments);
  }, c);
}, count: function(a88) {
  var b = 0;
  P$1(a88, function() {
    b++;
  });
  return b;
}, toArray: function(a88) {
  return P$1(a88, function(a92) {
    return a92;
  }) || [];
}, only: function(a88) {
  if (!L(a88))
    throw Error(z(143));
  return a88;
} };
react_production_min.Component = C;
react_production_min.PureComponent = E$1;
react_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = T$1;
react_production_min.cloneElement = function(a88, b, c) {
  if (null === a88 || void 0 === a88)
    throw Error(z(267, a88));
  var e2 = l({}, a88.props), d2 = a88.key, k = a88.ref, h2 = a88._owner;
  if (null != b) {
    void 0 !== b.ref && (k = b.ref, h2 = G$1.current);
    void 0 !== b.key && (d2 = "" + b.key);
    if (a88.type && a88.type.defaultProps)
      var g2 = a88.type.defaultProps;
    for (f2 in b)
      H$1.call(b, f2) && !I$1.hasOwnProperty(f2) && (e2[f2] = void 0 === b[f2] && void 0 !== g2 ? g2[f2] : b[f2]);
  }
  var f2 = arguments.length - 2;
  if (1 === f2)
    e2.children = c;
  else if (1 < f2) {
    g2 = Array(f2);
    for (var m2 = 0; m2 < f2; m2++)
      g2[m2] = arguments[m2 + 2];
    e2.children = g2;
  }
  return {
    $$typeof: n$2,
    type: a88.type,
    key: d2,
    ref: k,
    props: e2,
    _owner: h2
  };
};
react_production_min.createContext = function(a88, b) {
  void 0 === b && (b = null);
  a88 = { $$typeof: r$3, _calculateChangedBits: b, _currentValue: a88, _currentValue2: a88, _threadCount: 0, Provider: null, Consumer: null };
  a88.Provider = { $$typeof: q$1, _context: a88 };
  return a88.Consumer = a88;
};
react_production_min.createElement = J;
react_production_min.createFactory = function(a88) {
  var b = J.bind(null, a88);
  b.type = a88;
  return b;
};
react_production_min.createRef = function() {
  return { current: null };
};
react_production_min.forwardRef = function(a88) {
  return { $$typeof: t$1, render: a88 };
};
react_production_min.isValidElement = L;
react_production_min.lazy = function(a88) {
  return { $$typeof: v, _payload: { _status: -1, _result: a88 }, _init: Q };
};
react_production_min.memo = function(a88, b) {
  return { $$typeof: u, type: a88, compare: void 0 === b ? null : b };
};
react_production_min.useCallback = function(a88, b) {
  return S$1().useCallback(a88, b);
};
react_production_min.useContext = function(a88, b) {
  return S$1().useContext(a88, b);
};
react_production_min.useDebugValue = function() {
};
react_production_min.useEffect = function(a88, b) {
  return S$1().useEffect(a88, b);
};
react_production_min.useImperativeHandle = function(a88, b, c) {
  return S$1().useImperativeHandle(a88, b, c);
};
react_production_min.useLayoutEffect = function(a88, b) {
  return S$1().useLayoutEffect(a88, b);
};
react_production_min.useMemo = function(a88, b) {
  return S$1().useMemo(a88, b);
};
react_production_min.useReducer = function(a88, b, c) {
  return S$1().useReducer(a88, b, c);
};
react_production_min.useRef = function(a88) {
  return S$1().useRef(a88);
};
react_production_min.useState = function(a88) {
  return S$1().useState(a88);
};
react_production_min.version = "17.0.2";
{
  react$1.exports = react_production_min;
}
var reactExports = react$1.exports;
const React = /* @__PURE__ */ getDefaultExportFromCjs$2(reactExports);
var scheduler = { exports: {} };
var scheduler_production_min = {};
/** @license React v0.20.2
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
(function(exports2) {
  var f2, g2, h2, k;
  if ("object" === typeof performance && "function" === typeof performance.now) {
    var l2 = performance;
    exports2.unstable_now = function() {
      return l2.now();
    };
  } else {
    var p2 = Date, q2 = p2.now();
    exports2.unstable_now = function() {
      return p2.now() - q2;
    };
  }
  if ("undefined" === typeof window || "function" !== typeof MessageChannel) {
    var t2 = null, u2 = null, w2 = function() {
      if (null !== t2)
        try {
          var a88 = exports2.unstable_now();
          t2(true, a88);
          t2 = null;
        } catch (b) {
          throw setTimeout(w2, 0), b;
        }
    };
    f2 = function(a88) {
      null !== t2 ? setTimeout(f2, 0, a88) : (t2 = a88, setTimeout(w2, 0));
    };
    g2 = function(a88, b) {
      u2 = setTimeout(a88, b);
    };
    h2 = function() {
      clearTimeout(u2);
    };
    exports2.unstable_shouldYield = function() {
      return false;
    };
    k = exports2.unstable_forceFrameRate = function() {
    };
  } else {
    var x2 = window.setTimeout, y2 = window.clearTimeout;
    if ("undefined" !== typeof console) {
      var z2 = window.cancelAnimationFrame;
      "function" !== typeof window.requestAnimationFrame && console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
      "function" !== typeof z2 && console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
    }
    var A2 = false, B2 = null, C2 = -1, D2 = 5, E2 = 0;
    exports2.unstable_shouldYield = function() {
      return exports2.unstable_now() >= E2;
    };
    k = function() {
    };
    exports2.unstable_forceFrameRate = function(a88) {
      0 > a88 || 125 < a88 ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : D2 = 0 < a88 ? Math.floor(1e3 / a88) : 5;
    };
    var F2 = new MessageChannel(), G2 = F2.port2;
    F2.port1.onmessage = function() {
      if (null !== B2) {
        var a88 = exports2.unstable_now();
        E2 = a88 + D2;
        try {
          B2(true, a88) ? G2.postMessage(null) : (A2 = false, B2 = null);
        } catch (b) {
          throw G2.postMessage(null), b;
        }
      } else
        A2 = false;
    };
    f2 = function(a88) {
      B2 = a88;
      A2 || (A2 = true, G2.postMessage(null));
    };
    g2 = function(a88, b) {
      C2 = x2(function() {
        a88(exports2.unstable_now());
      }, b);
    };
    h2 = function() {
      y2(C2);
      C2 = -1;
    };
  }
  function H2(a88, b) {
    var c = a88.length;
    a88.push(b);
    a:
      for (; ; ) {
        var d2 = c - 1 >>> 1, e2 = a88[d2];
        if (void 0 !== e2 && 0 < I2(e2, b))
          a88[d2] = b, a88[c] = e2, c = d2;
        else
          break a;
      }
  }
  function J2(a88) {
    a88 = a88[0];
    return void 0 === a88 ? null : a88;
  }
  function K2(a88) {
    var b = a88[0];
    if (void 0 !== b) {
      var c = a88.pop();
      if (c !== b) {
        a88[0] = c;
        a:
          for (var d2 = 0, e2 = a88.length; d2 < e2; ) {
            var m2 = 2 * (d2 + 1) - 1, n2 = a88[m2], v2 = m2 + 1, r2 = a88[v2];
            if (void 0 !== n2 && 0 > I2(n2, c))
              void 0 !== r2 && 0 > I2(r2, n2) ? (a88[d2] = r2, a88[v2] = c, d2 = v2) : (a88[d2] = n2, a88[m2] = c, d2 = m2);
            else if (void 0 !== r2 && 0 > I2(r2, c))
              a88[d2] = r2, a88[v2] = c, d2 = v2;
            else
              break a;
          }
      }
      return b;
    }
    return null;
  }
  function I2(a88, b) {
    var c = a88.sortIndex - b.sortIndex;
    return 0 !== c ? c : a88.id - b.id;
  }
  var L2 = [], M2 = [], N2 = 1, O2 = null, P2 = 3, Q2 = false, R2 = false, S2 = false;
  function T2(a88) {
    for (var b = J2(M2); null !== b; ) {
      if (null === b.callback)
        K2(M2);
      else if (b.startTime <= a88)
        K2(M2), b.sortIndex = b.expirationTime, H2(L2, b);
      else
        break;
      b = J2(M2);
    }
  }
  function U2(a88) {
    S2 = false;
    T2(a88);
    if (!R2)
      if (null !== J2(L2))
        R2 = true, f2(V2);
      else {
        var b = J2(M2);
        null !== b && g2(U2, b.startTime - a88);
      }
  }
  function V2(a88, b) {
    R2 = false;
    S2 && (S2 = false, h2());
    Q2 = true;
    var c = P2;
    try {
      T2(b);
      for (O2 = J2(L2); null !== O2 && (!(O2.expirationTime > b) || a88 && !exports2.unstable_shouldYield()); ) {
        var d2 = O2.callback;
        if ("function" === typeof d2) {
          O2.callback = null;
          P2 = O2.priorityLevel;
          var e2 = d2(O2.expirationTime <= b);
          b = exports2.unstable_now();
          "function" === typeof e2 ? O2.callback = e2 : O2 === J2(L2) && K2(L2);
          T2(b);
        } else
          K2(L2);
        O2 = J2(L2);
      }
      if (null !== O2)
        var m2 = true;
      else {
        var n2 = J2(M2);
        null !== n2 && g2(U2, n2.startTime - b);
        m2 = false;
      }
      return m2;
    } finally {
      O2 = null, P2 = c, Q2 = false;
    }
  }
  var W2 = k;
  exports2.unstable_IdlePriority = 5;
  exports2.unstable_ImmediatePriority = 1;
  exports2.unstable_LowPriority = 4;
  exports2.unstable_NormalPriority = 3;
  exports2.unstable_Profiling = null;
  exports2.unstable_UserBlockingPriority = 2;
  exports2.unstable_cancelCallback = function(a88) {
    a88.callback = null;
  };
  exports2.unstable_continueExecution = function() {
    R2 || Q2 || (R2 = true, f2(V2));
  };
  exports2.unstable_getCurrentPriorityLevel = function() {
    return P2;
  };
  exports2.unstable_getFirstCallbackNode = function() {
    return J2(L2);
  };
  exports2.unstable_next = function(a88) {
    switch (P2) {
      case 1:
      case 2:
      case 3:
        var b = 3;
        break;
      default:
        b = P2;
    }
    var c = P2;
    P2 = b;
    try {
      return a88();
    } finally {
      P2 = c;
    }
  };
  exports2.unstable_pauseExecution = function() {
  };
  exports2.unstable_requestPaint = W2;
  exports2.unstable_runWithPriority = function(a88, b) {
    switch (a88) {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
        break;
      default:
        a88 = 3;
    }
    var c = P2;
    P2 = a88;
    try {
      return b();
    } finally {
      P2 = c;
    }
  };
  exports2.unstable_scheduleCallback = function(a88, b, c) {
    var d2 = exports2.unstable_now();
    "object" === typeof c && null !== c ? (c = c.delay, c = "number" === typeof c && 0 < c ? d2 + c : d2) : c = d2;
    switch (a88) {
      case 1:
        var e2 = -1;
        break;
      case 2:
        e2 = 250;
        break;
      case 5:
        e2 = 1073741823;
        break;
      case 4:
        e2 = 1e4;
        break;
      default:
        e2 = 5e3;
    }
    e2 = c + e2;
    a88 = { id: N2++, callback: b, priorityLevel: a88, startTime: c, expirationTime: e2, sortIndex: -1 };
    c > d2 ? (a88.sortIndex = c, H2(M2, a88), null === J2(L2) && a88 === J2(M2) && (S2 ? h2() : S2 = true, g2(U2, c - d2))) : (a88.sortIndex = e2, H2(L2, a88), R2 || Q2 || (R2 = true, f2(V2)));
    return a88;
  };
  exports2.unstable_wrapCallback = function(a88) {
    var b = P2;
    return function() {
      var c = P2;
      P2 = b;
      try {
        return a88.apply(this, arguments);
      } finally {
        P2 = c;
      }
    };
  };
})(scheduler_production_min);
{
  scheduler.exports = scheduler_production_min;
}
var schedulerExports = scheduler.exports;
/** @license React v17.0.2
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var aa = reactExports, m$2 = objectAssign, r$2 = schedulerExports;
function y$1(a88) {
  for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a88, c = 1; c < arguments.length; c++)
    b += "&args[]=" + encodeURIComponent(arguments[c]);
  return "Minified React error #" + a88 + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
}
if (!aa)
  throw Error(y$1(227));
var ba = /* @__PURE__ */ new Set(), ca = {};
function da(a88, b) {
  ea(a88, b);
  ea(a88 + "Capture", b);
}
function ea(a88, b) {
  ca[a88] = b;
  for (a88 = 0; a88 < b.length; a88++)
    ba.add(b[a88]);
}
var fa = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement), ha = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/, ia = Object.prototype.hasOwnProperty, ja = {}, ka = {};
function la(a88) {
  if (ia.call(ka, a88))
    return true;
  if (ia.call(ja, a88))
    return false;
  if (ha.test(a88))
    return ka[a88] = true;
  ja[a88] = true;
  return false;
}
function ma(a88, b, c, d2) {
  if (null !== c && 0 === c.type)
    return false;
  switch (typeof b) {
    case "function":
    case "symbol":
      return true;
    case "boolean":
      if (d2)
        return false;
      if (null !== c)
        return !c.acceptsBooleans;
      a88 = a88.toLowerCase().slice(0, 5);
      return "data-" !== a88 && "aria-" !== a88;
    default:
      return false;
  }
}
function na(a88, b, c, d2) {
  if (null === b || "undefined" === typeof b || ma(a88, b, c, d2))
    return true;
  if (d2)
    return false;
  if (null !== c)
    switch (c.type) {
      case 3:
        return !b;
      case 4:
        return false === b;
      case 5:
        return isNaN(b);
      case 6:
        return isNaN(b) || 1 > b;
    }
  return false;
}
function B(a88, b, c, d2, e2, f2, g2) {
  this.acceptsBooleans = 2 === b || 3 === b || 4 === b;
  this.attributeName = d2;
  this.attributeNamespace = e2;
  this.mustUseProperty = c;
  this.propertyName = a88;
  this.type = b;
  this.sanitizeURL = f2;
  this.removeEmptyString = g2;
}
var D = {};
"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a88) {
  D[a88] = new B(a88, 0, false, a88, null, false, false);
});
[["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(a88) {
  var b = a88[0];
  D[b] = new B(b, 1, false, a88[1], null, false, false);
});
["contentEditable", "draggable", "spellCheck", "value"].forEach(function(a88) {
  D[a88] = new B(a88, 2, false, a88.toLowerCase(), null, false, false);
});
["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(a88) {
  D[a88] = new B(a88, 2, false, a88, null, false, false);
});
"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a88) {
  D[a88] = new B(a88, 3, false, a88.toLowerCase(), null, false, false);
});
["checked", "multiple", "muted", "selected"].forEach(function(a88) {
  D[a88] = new B(a88, 3, true, a88, null, false, false);
});
["capture", "download"].forEach(function(a88) {
  D[a88] = new B(a88, 4, false, a88, null, false, false);
});
["cols", "rows", "size", "span"].forEach(function(a88) {
  D[a88] = new B(a88, 6, false, a88, null, false, false);
});
["rowSpan", "start"].forEach(function(a88) {
  D[a88] = new B(a88, 5, false, a88.toLowerCase(), null, false, false);
});
var oa = /[\-:]([a-z])/g;
function pa(a88) {
  return a88[1].toUpperCase();
}
"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a88) {
  var b = a88.replace(
    oa,
    pa
  );
  D[b] = new B(b, 1, false, a88, null, false, false);
});
"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a88) {
  var b = a88.replace(oa, pa);
  D[b] = new B(b, 1, false, a88, "http://www.w3.org/1999/xlink", false, false);
});
["xml:base", "xml:lang", "xml:space"].forEach(function(a88) {
  var b = a88.replace(oa, pa);
  D[b] = new B(b, 1, false, a88, "http://www.w3.org/XML/1998/namespace", false, false);
});
["tabIndex", "crossOrigin"].forEach(function(a88) {
  D[a88] = new B(a88, 1, false, a88.toLowerCase(), null, false, false);
});
D.xlinkHref = new B("xlinkHref", 1, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
["src", "href", "action", "formAction"].forEach(function(a88) {
  D[a88] = new B(a88, 1, false, a88.toLowerCase(), null, true, true);
});
function qa(a88, b, c, d2) {
  var e2 = D.hasOwnProperty(b) ? D[b] : null;
  var f2 = null !== e2 ? 0 === e2.type : d2 ? false : !(2 < b.length) || "o" !== b[0] && "O" !== b[0] || "n" !== b[1] && "N" !== b[1] ? false : true;
  f2 || (na(b, c, e2, d2) && (c = null), d2 || null === e2 ? la(b) && (null === c ? a88.removeAttribute(b) : a88.setAttribute(b, "" + c)) : e2.mustUseProperty ? a88[e2.propertyName] = null === c ? 3 === e2.type ? false : "" : c : (b = e2.attributeName, d2 = e2.attributeNamespace, null === c ? a88.removeAttribute(b) : (e2 = e2.type, c = 3 === e2 || 4 === e2 && true === c ? "" : "" + c, d2 ? a88.setAttributeNS(d2, b, c) : a88.setAttribute(b, c))));
}
var ra = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, sa = 60103, ta = 60106, ua = 60107, wa = 60108, xa = 60114, ya = 60109, za = 60110, Aa = 60112, Ba = 60113, Ca = 60120, Da = 60115, Ea = 60116, Fa = 60121, Ga = 60128, Ha = 60129, Ia = 60130, Ja = 60131;
if ("function" === typeof Symbol && Symbol.for) {
  var E = Symbol.for;
  sa = E("react.element");
  ta = E("react.portal");
  ua = E("react.fragment");
  wa = E("react.strict_mode");
  xa = E("react.profiler");
  ya = E("react.provider");
  za = E("react.context");
  Aa = E("react.forward_ref");
  Ba = E("react.suspense");
  Ca = E("react.suspense_list");
  Da = E("react.memo");
  Ea = E("react.lazy");
  Fa = E("react.block");
  E("react.scope");
  Ga = E("react.opaque.id");
  Ha = E("react.debug_trace_mode");
  Ia = E("react.offscreen");
  Ja = E("react.legacy_hidden");
}
var Ka = "function" === typeof Symbol && Symbol.iterator;
function La(a88) {
  if (null === a88 || "object" !== typeof a88)
    return null;
  a88 = Ka && a88[Ka] || a88["@@iterator"];
  return "function" === typeof a88 ? a88 : null;
}
var Ma;
function Na(a88) {
  if (void 0 === Ma)
    try {
      throw Error();
    } catch (c) {
      var b = c.stack.trim().match(/\n( *(at )?)/);
      Ma = b && b[1] || "";
    }
  return "\n" + Ma + a88;
}
var Oa = false;
function Pa(a88, b) {
  if (!a88 || Oa)
    return "";
  Oa = true;
  var c = Error.prepareStackTrace;
  Error.prepareStackTrace = void 0;
  try {
    if (b)
      if (b = function() {
        throw Error();
      }, Object.defineProperty(b.prototype, "props", { set: function() {
        throw Error();
      } }), "object" === typeof Reflect && Reflect.construct) {
        try {
          Reflect.construct(b, []);
        } catch (k) {
          var d2 = k;
        }
        Reflect.construct(a88, [], b);
      } else {
        try {
          b.call();
        } catch (k) {
          d2 = k;
        }
        a88.call(b.prototype);
      }
    else {
      try {
        throw Error();
      } catch (k) {
        d2 = k;
      }
      a88();
    }
  } catch (k) {
    if (k && d2 && "string" === typeof k.stack) {
      for (var e2 = k.stack.split("\n"), f2 = d2.stack.split("\n"), g2 = e2.length - 1, h2 = f2.length - 1; 1 <= g2 && 0 <= h2 && e2[g2] !== f2[h2]; )
        h2--;
      for (; 1 <= g2 && 0 <= h2; g2--, h2--)
        if (e2[g2] !== f2[h2]) {
          if (1 !== g2 || 1 !== h2) {
            do
              if (g2--, h2--, 0 > h2 || e2[g2] !== f2[h2])
                return "\n" + e2[g2].replace(" at new ", " at ");
            while (1 <= g2 && 0 <= h2);
          }
          break;
        }
    }
  } finally {
    Oa = false, Error.prepareStackTrace = c;
  }
  return (a88 = a88 ? a88.displayName || a88.name : "") ? Na(a88) : "";
}
function Qa(a88) {
  switch (a88.tag) {
    case 5:
      return Na(a88.type);
    case 16:
      return Na("Lazy");
    case 13:
      return Na("Suspense");
    case 19:
      return Na("SuspenseList");
    case 0:
    case 2:
    case 15:
      return a88 = Pa(a88.type, false), a88;
    case 11:
      return a88 = Pa(a88.type.render, false), a88;
    case 22:
      return a88 = Pa(a88.type._render, false), a88;
    case 1:
      return a88 = Pa(a88.type, true), a88;
    default:
      return "";
  }
}
function Ra(a88) {
  if (null == a88)
    return null;
  if ("function" === typeof a88)
    return a88.displayName || a88.name || null;
  if ("string" === typeof a88)
    return a88;
  switch (a88) {
    case ua:
      return "Fragment";
    case ta:
      return "Portal";
    case xa:
      return "Profiler";
    case wa:
      return "StrictMode";
    case Ba:
      return "Suspense";
    case Ca:
      return "SuspenseList";
  }
  if ("object" === typeof a88)
    switch (a88.$$typeof) {
      case za:
        return (a88.displayName || "Context") + ".Consumer";
      case ya:
        return (a88._context.displayName || "Context") + ".Provider";
      case Aa:
        var b = a88.render;
        b = b.displayName || b.name || "";
        return a88.displayName || ("" !== b ? "ForwardRef(" + b + ")" : "ForwardRef");
      case Da:
        return Ra(a88.type);
      case Fa:
        return Ra(a88._render);
      case Ea:
        b = a88._payload;
        a88 = a88._init;
        try {
          return Ra(a88(b));
        } catch (c) {
        }
    }
  return null;
}
function Sa(a88) {
  switch (typeof a88) {
    case "boolean":
    case "number":
    case "object":
    case "string":
    case "undefined":
      return a88;
    default:
      return "";
  }
}
function Ta(a88) {
  var b = a88.type;
  return (a88 = a88.nodeName) && "input" === a88.toLowerCase() && ("checkbox" === b || "radio" === b);
}
function Ua(a88) {
  var b = Ta(a88) ? "checked" : "value", c = Object.getOwnPropertyDescriptor(a88.constructor.prototype, b), d2 = "" + a88[b];
  if (!a88.hasOwnProperty(b) && "undefined" !== typeof c && "function" === typeof c.get && "function" === typeof c.set) {
    var e2 = c.get, f2 = c.set;
    Object.defineProperty(a88, b, { configurable: true, get: function() {
      return e2.call(this);
    }, set: function(a92) {
      d2 = "" + a92;
      f2.call(this, a92);
    } });
    Object.defineProperty(a88, b, { enumerable: c.enumerable });
    return { getValue: function() {
      return d2;
    }, setValue: function(a92) {
      d2 = "" + a92;
    }, stopTracking: function() {
      a88._valueTracker = null;
      delete a88[b];
    } };
  }
}
function Va(a88) {
  a88._valueTracker || (a88._valueTracker = Ua(a88));
}
function Wa(a88) {
  if (!a88)
    return false;
  var b = a88._valueTracker;
  if (!b)
    return true;
  var c = b.getValue();
  var d2 = "";
  a88 && (d2 = Ta(a88) ? a88.checked ? "true" : "false" : a88.value);
  a88 = d2;
  return a88 !== c ? (b.setValue(a88), true) : false;
}
function Xa(a88) {
  a88 = a88 || ("undefined" !== typeof document ? document : void 0);
  if ("undefined" === typeof a88)
    return null;
  try {
    return a88.activeElement || a88.body;
  } catch (b) {
    return a88.body;
  }
}
function Ya(a88, b) {
  var c = b.checked;
  return m$2({}, b, { defaultChecked: void 0, defaultValue: void 0, value: void 0, checked: null != c ? c : a88._wrapperState.initialChecked });
}
function Za(a88, b) {
  var c = null == b.defaultValue ? "" : b.defaultValue, d2 = null != b.checked ? b.checked : b.defaultChecked;
  c = Sa(null != b.value ? b.value : c);
  a88._wrapperState = { initialChecked: d2, initialValue: c, controlled: "checkbox" === b.type || "radio" === b.type ? null != b.checked : null != b.value };
}
function $a(a88, b) {
  b = b.checked;
  null != b && qa(a88, "checked", b, false);
}
function ab(a88, b) {
  $a(a88, b);
  var c = Sa(b.value), d2 = b.type;
  if (null != c)
    if ("number" === d2) {
      if (0 === c && "" === a88.value || a88.value != c)
        a88.value = "" + c;
    } else
      a88.value !== "" + c && (a88.value = "" + c);
  else if ("submit" === d2 || "reset" === d2) {
    a88.removeAttribute("value");
    return;
  }
  b.hasOwnProperty("value") ? bb(a88, b.type, c) : b.hasOwnProperty("defaultValue") && bb(a88, b.type, Sa(b.defaultValue));
  null == b.checked && null != b.defaultChecked && (a88.defaultChecked = !!b.defaultChecked);
}
function cb(a88, b, c) {
  if (b.hasOwnProperty("value") || b.hasOwnProperty("defaultValue")) {
    var d2 = b.type;
    if (!("submit" !== d2 && "reset" !== d2 || void 0 !== b.value && null !== b.value))
      return;
    b = "" + a88._wrapperState.initialValue;
    c || b === a88.value || (a88.value = b);
    a88.defaultValue = b;
  }
  c = a88.name;
  "" !== c && (a88.name = "");
  a88.defaultChecked = !!a88._wrapperState.initialChecked;
  "" !== c && (a88.name = c);
}
function bb(a88, b, c) {
  if ("number" !== b || Xa(a88.ownerDocument) !== a88)
    null == c ? a88.defaultValue = "" + a88._wrapperState.initialValue : a88.defaultValue !== "" + c && (a88.defaultValue = "" + c);
}
function db(a88) {
  var b = "";
  aa.Children.forEach(a88, function(a92) {
    null != a92 && (b += a92);
  });
  return b;
}
function eb(a88, b) {
  a88 = m$2({ children: void 0 }, b);
  if (b = db(b.children))
    a88.children = b;
  return a88;
}
function fb(a88, b, c, d2) {
  a88 = a88.options;
  if (b) {
    b = {};
    for (var e2 = 0; e2 < c.length; e2++)
      b["$" + c[e2]] = true;
    for (c = 0; c < a88.length; c++)
      e2 = b.hasOwnProperty("$" + a88[c].value), a88[c].selected !== e2 && (a88[c].selected = e2), e2 && d2 && (a88[c].defaultSelected = true);
  } else {
    c = "" + Sa(c);
    b = null;
    for (e2 = 0; e2 < a88.length; e2++) {
      if (a88[e2].value === c) {
        a88[e2].selected = true;
        d2 && (a88[e2].defaultSelected = true);
        return;
      }
      null !== b || a88[e2].disabled || (b = a88[e2]);
    }
    null !== b && (b.selected = true);
  }
}
function gb(a88, b) {
  if (null != b.dangerouslySetInnerHTML)
    throw Error(y$1(91));
  return m$2({}, b, { value: void 0, defaultValue: void 0, children: "" + a88._wrapperState.initialValue });
}
function hb(a88, b) {
  var c = b.value;
  if (null == c) {
    c = b.children;
    b = b.defaultValue;
    if (null != c) {
      if (null != b)
        throw Error(y$1(92));
      if (Array.isArray(c)) {
        if (!(1 >= c.length))
          throw Error(y$1(93));
        c = c[0];
      }
      b = c;
    }
    null == b && (b = "");
    c = b;
  }
  a88._wrapperState = { initialValue: Sa(c) };
}
function ib(a88, b) {
  var c = Sa(b.value), d2 = Sa(b.defaultValue);
  null != c && (c = "" + c, c !== a88.value && (a88.value = c), null == b.defaultValue && a88.defaultValue !== c && (a88.defaultValue = c));
  null != d2 && (a88.defaultValue = "" + d2);
}
function jb(a88) {
  var b = a88.textContent;
  b === a88._wrapperState.initialValue && "" !== b && null !== b && (a88.value = b);
}
var kb = { html: "http://www.w3.org/1999/xhtml", mathml: "http://www.w3.org/1998/Math/MathML", svg: "http://www.w3.org/2000/svg" };
function lb(a88) {
  switch (a88) {
    case "svg":
      return "http://www.w3.org/2000/svg";
    case "math":
      return "http://www.w3.org/1998/Math/MathML";
    default:
      return "http://www.w3.org/1999/xhtml";
  }
}
function mb(a88, b) {
  return null == a88 || "http://www.w3.org/1999/xhtml" === a88 ? lb(b) : "http://www.w3.org/2000/svg" === a88 && "foreignObject" === b ? "http://www.w3.org/1999/xhtml" : a88;
}
var nb, ob = function(a88) {
  return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function(b, c, d2, e2) {
    MSApp.execUnsafeLocalFunction(function() {
      return a88(b, c, d2, e2);
    });
  } : a88;
}(function(a88, b) {
  if (a88.namespaceURI !== kb.svg || "innerHTML" in a88)
    a88.innerHTML = b;
  else {
    nb = nb || document.createElement("div");
    nb.innerHTML = "<svg>" + b.valueOf().toString() + "</svg>";
    for (b = nb.firstChild; a88.firstChild; )
      a88.removeChild(a88.firstChild);
    for (; b.firstChild; )
      a88.appendChild(b.firstChild);
  }
});
function pb(a88, b) {
  if (b) {
    var c = a88.firstChild;
    if (c && c === a88.lastChild && 3 === c.nodeType) {
      c.nodeValue = b;
      return;
    }
  }
  a88.textContent = b;
}
var qb = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridArea: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
}, rb = ["Webkit", "ms", "Moz", "O"];
Object.keys(qb).forEach(function(a88) {
  rb.forEach(function(b) {
    b = b + a88.charAt(0).toUpperCase() + a88.substring(1);
    qb[b] = qb[a88];
  });
});
function sb(a88, b, c) {
  return null == b || "boolean" === typeof b || "" === b ? "" : c || "number" !== typeof b || 0 === b || qb.hasOwnProperty(a88) && qb[a88] ? ("" + b).trim() : b + "px";
}
function tb(a88, b) {
  a88 = a88.style;
  for (var c in b)
    if (b.hasOwnProperty(c)) {
      var d2 = 0 === c.indexOf("--"), e2 = sb(c, b[c], d2);
      "float" === c && (c = "cssFloat");
      d2 ? a88.setProperty(c, e2) : a88[c] = e2;
    }
}
var ub = m$2({ menuitem: true }, { area: true, base: true, br: true, col: true, embed: true, hr: true, img: true, input: true, keygen: true, link: true, meta: true, param: true, source: true, track: true, wbr: true });
function vb(a88, b) {
  if (b) {
    if (ub[a88] && (null != b.children || null != b.dangerouslySetInnerHTML))
      throw Error(y$1(137, a88));
    if (null != b.dangerouslySetInnerHTML) {
      if (null != b.children)
        throw Error(y$1(60));
      if (!("object" === typeof b.dangerouslySetInnerHTML && "__html" in b.dangerouslySetInnerHTML))
        throw Error(y$1(61));
    }
    if (null != b.style && "object" !== typeof b.style)
      throw Error(y$1(62));
  }
}
function wb(a88, b) {
  if (-1 === a88.indexOf("-"))
    return "string" === typeof b.is;
  switch (a88) {
    case "annotation-xml":
    case "color-profile":
    case "font-face":
    case "font-face-src":
    case "font-face-uri":
    case "font-face-format":
    case "font-face-name":
    case "missing-glyph":
      return false;
    default:
      return true;
  }
}
function xb(a88) {
  a88 = a88.target || a88.srcElement || window;
  a88.correspondingUseElement && (a88 = a88.correspondingUseElement);
  return 3 === a88.nodeType ? a88.parentNode : a88;
}
var yb = null, zb = null, Ab = null;
function Bb(a88) {
  if (a88 = Cb(a88)) {
    if ("function" !== typeof yb)
      throw Error(y$1(280));
    var b = a88.stateNode;
    b && (b = Db(b), yb(a88.stateNode, a88.type, b));
  }
}
function Eb(a88) {
  zb ? Ab ? Ab.push(a88) : Ab = [a88] : zb = a88;
}
function Fb() {
  if (zb) {
    var a88 = zb, b = Ab;
    Ab = zb = null;
    Bb(a88);
    if (b)
      for (a88 = 0; a88 < b.length; a88++)
        Bb(b[a88]);
  }
}
function Gb(a88, b) {
  return a88(b);
}
function Hb(a88, b, c, d2, e2) {
  return a88(b, c, d2, e2);
}
function Ib() {
}
var Jb = Gb, Kb = false, Lb = false;
function Mb() {
  if (null !== zb || null !== Ab)
    Ib(), Fb();
}
function Nb(a88, b, c) {
  if (Lb)
    return a88(b, c);
  Lb = true;
  try {
    return Jb(a88, b, c);
  } finally {
    Lb = false, Mb();
  }
}
function Ob(a88, b) {
  var c = a88.stateNode;
  if (null === c)
    return null;
  var d2 = Db(c);
  if (null === d2)
    return null;
  c = d2[b];
  a:
    switch (b) {
      case "onClick":
      case "onClickCapture":
      case "onDoubleClick":
      case "onDoubleClickCapture":
      case "onMouseDown":
      case "onMouseDownCapture":
      case "onMouseMove":
      case "onMouseMoveCapture":
      case "onMouseUp":
      case "onMouseUpCapture":
      case "onMouseEnter":
        (d2 = !d2.disabled) || (a88 = a88.type, d2 = !("button" === a88 || "input" === a88 || "select" === a88 || "textarea" === a88));
        a88 = !d2;
        break a;
      default:
        a88 = false;
    }
  if (a88)
    return null;
  if (c && "function" !== typeof c)
    throw Error(y$1(231, b, typeof c));
  return c;
}
var Pb = false;
if (fa)
  try {
    var Qb = {};
    Object.defineProperty(Qb, "passive", { get: function() {
      Pb = true;
    } });
    window.addEventListener("test", Qb, Qb);
    window.removeEventListener("test", Qb, Qb);
  } catch (a88) {
    Pb = false;
  }
function Rb(a88, b, c, d2, e2, f2, g2, h2, k) {
  var l2 = Array.prototype.slice.call(arguments, 3);
  try {
    b.apply(c, l2);
  } catch (n2) {
    this.onError(n2);
  }
}
var Sb = false, Tb = null, Ub = false, Vb = null, Wb = { onError: function(a88) {
  Sb = true;
  Tb = a88;
} };
function Xb(a88, b, c, d2, e2, f2, g2, h2, k) {
  Sb = false;
  Tb = null;
  Rb.apply(Wb, arguments);
}
function Yb(a88, b, c, d2, e2, f2, g2, h2, k) {
  Xb.apply(this, arguments);
  if (Sb) {
    if (Sb) {
      var l2 = Tb;
      Sb = false;
      Tb = null;
    } else
      throw Error(y$1(198));
    Ub || (Ub = true, Vb = l2);
  }
}
function Zb(a88) {
  var b = a88, c = a88;
  if (a88.alternate)
    for (; b.return; )
      b = b.return;
  else {
    a88 = b;
    do
      b = a88, 0 !== (b.flags & 1026) && (c = b.return), a88 = b.return;
    while (a88);
  }
  return 3 === b.tag ? c : null;
}
function $b(a88) {
  if (13 === a88.tag) {
    var b = a88.memoizedState;
    null === b && (a88 = a88.alternate, null !== a88 && (b = a88.memoizedState));
    if (null !== b)
      return b.dehydrated;
  }
  return null;
}
function ac(a88) {
  if (Zb(a88) !== a88)
    throw Error(y$1(188));
}
function bc(a88) {
  var b = a88.alternate;
  if (!b) {
    b = Zb(a88);
    if (null === b)
      throw Error(y$1(188));
    return b !== a88 ? null : a88;
  }
  for (var c = a88, d2 = b; ; ) {
    var e2 = c.return;
    if (null === e2)
      break;
    var f2 = e2.alternate;
    if (null === f2) {
      d2 = e2.return;
      if (null !== d2) {
        c = d2;
        continue;
      }
      break;
    }
    if (e2.child === f2.child) {
      for (f2 = e2.child; f2; ) {
        if (f2 === c)
          return ac(e2), a88;
        if (f2 === d2)
          return ac(e2), b;
        f2 = f2.sibling;
      }
      throw Error(y$1(188));
    }
    if (c.return !== d2.return)
      c = e2, d2 = f2;
    else {
      for (var g2 = false, h2 = e2.child; h2; ) {
        if (h2 === c) {
          g2 = true;
          c = e2;
          d2 = f2;
          break;
        }
        if (h2 === d2) {
          g2 = true;
          d2 = e2;
          c = f2;
          break;
        }
        h2 = h2.sibling;
      }
      if (!g2) {
        for (h2 = f2.child; h2; ) {
          if (h2 === c) {
            g2 = true;
            c = f2;
            d2 = e2;
            break;
          }
          if (h2 === d2) {
            g2 = true;
            d2 = f2;
            c = e2;
            break;
          }
          h2 = h2.sibling;
        }
        if (!g2)
          throw Error(y$1(189));
      }
    }
    if (c.alternate !== d2)
      throw Error(y$1(190));
  }
  if (3 !== c.tag)
    throw Error(y$1(188));
  return c.stateNode.current === c ? a88 : b;
}
function cc(a88) {
  a88 = bc(a88);
  if (!a88)
    return null;
  for (var b = a88; ; ) {
    if (5 === b.tag || 6 === b.tag)
      return b;
    if (b.child)
      b.child.return = b, b = b.child;
    else {
      if (b === a88)
        break;
      for (; !b.sibling; ) {
        if (!b.return || b.return === a88)
          return null;
        b = b.return;
      }
      b.sibling.return = b.return;
      b = b.sibling;
    }
  }
  return null;
}
function dc(a88, b) {
  for (var c = a88.alternate; null !== b; ) {
    if (b === a88 || b === c)
      return true;
    b = b.return;
  }
  return false;
}
var ec, fc, gc, hc, ic = false, jc = [], kc = null, lc = null, mc = null, nc = /* @__PURE__ */ new Map(), oc = /* @__PURE__ */ new Map(), pc = [], qc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
function rc(a88, b, c, d2, e2) {
  return { blockedOn: a88, domEventName: b, eventSystemFlags: c | 16, nativeEvent: e2, targetContainers: [d2] };
}
function sc(a88, b) {
  switch (a88) {
    case "focusin":
    case "focusout":
      kc = null;
      break;
    case "dragenter":
    case "dragleave":
      lc = null;
      break;
    case "mouseover":
    case "mouseout":
      mc = null;
      break;
    case "pointerover":
    case "pointerout":
      nc.delete(b.pointerId);
      break;
    case "gotpointercapture":
    case "lostpointercapture":
      oc.delete(b.pointerId);
  }
}
function tc(a88, b, c, d2, e2, f2) {
  if (null === a88 || a88.nativeEvent !== f2)
    return a88 = rc(b, c, d2, e2, f2), null !== b && (b = Cb(b), null !== b && fc(b)), a88;
  a88.eventSystemFlags |= d2;
  b = a88.targetContainers;
  null !== e2 && -1 === b.indexOf(e2) && b.push(e2);
  return a88;
}
function uc(a88, b, c, d2, e2) {
  switch (b) {
    case "focusin":
      return kc = tc(kc, a88, b, c, d2, e2), true;
    case "dragenter":
      return lc = tc(lc, a88, b, c, d2, e2), true;
    case "mouseover":
      return mc = tc(mc, a88, b, c, d2, e2), true;
    case "pointerover":
      var f2 = e2.pointerId;
      nc.set(f2, tc(nc.get(f2) || null, a88, b, c, d2, e2));
      return true;
    case "gotpointercapture":
      return f2 = e2.pointerId, oc.set(f2, tc(oc.get(f2) || null, a88, b, c, d2, e2)), true;
  }
  return false;
}
function vc(a88) {
  var b = wc(a88.target);
  if (null !== b) {
    var c = Zb(b);
    if (null !== c) {
      if (b = c.tag, 13 === b) {
        if (b = $b(c), null !== b) {
          a88.blockedOn = b;
          hc(a88.lanePriority, function() {
            r$2.unstable_runWithPriority(a88.priority, function() {
              gc(c);
            });
          });
          return;
        }
      } else if (3 === b && c.stateNode.hydrate) {
        a88.blockedOn = 3 === c.tag ? c.stateNode.containerInfo : null;
        return;
      }
    }
  }
  a88.blockedOn = null;
}
function xc(a88) {
  if (null !== a88.blockedOn)
    return false;
  for (var b = a88.targetContainers; 0 < b.length; ) {
    var c = yc(a88.domEventName, a88.eventSystemFlags, b[0], a88.nativeEvent);
    if (null !== c)
      return b = Cb(c), null !== b && fc(b), a88.blockedOn = c, false;
    b.shift();
  }
  return true;
}
function zc(a88, b, c) {
  xc(a88) && c.delete(b);
}
function Ac() {
  for (ic = false; 0 < jc.length; ) {
    var a88 = jc[0];
    if (null !== a88.blockedOn) {
      a88 = Cb(a88.blockedOn);
      null !== a88 && ec(a88);
      break;
    }
    for (var b = a88.targetContainers; 0 < b.length; ) {
      var c = yc(a88.domEventName, a88.eventSystemFlags, b[0], a88.nativeEvent);
      if (null !== c) {
        a88.blockedOn = c;
        break;
      }
      b.shift();
    }
    null === a88.blockedOn && jc.shift();
  }
  null !== kc && xc(kc) && (kc = null);
  null !== lc && xc(lc) && (lc = null);
  null !== mc && xc(mc) && (mc = null);
  nc.forEach(zc);
  oc.forEach(zc);
}
function Bc(a88, b) {
  a88.blockedOn === b && (a88.blockedOn = null, ic || (ic = true, r$2.unstable_scheduleCallback(r$2.unstable_NormalPriority, Ac)));
}
function Cc(a88) {
  function b(b2) {
    return Bc(b2, a88);
  }
  if (0 < jc.length) {
    Bc(jc[0], a88);
    for (var c = 1; c < jc.length; c++) {
      var d2 = jc[c];
      d2.blockedOn === a88 && (d2.blockedOn = null);
    }
  }
  null !== kc && Bc(kc, a88);
  null !== lc && Bc(lc, a88);
  null !== mc && Bc(mc, a88);
  nc.forEach(b);
  oc.forEach(b);
  for (c = 0; c < pc.length; c++)
    d2 = pc[c], d2.blockedOn === a88 && (d2.blockedOn = null);
  for (; 0 < pc.length && (c = pc[0], null === c.blockedOn); )
    vc(c), null === c.blockedOn && pc.shift();
}
function Dc(a88, b) {
  var c = {};
  c[a88.toLowerCase()] = b.toLowerCase();
  c["Webkit" + a88] = "webkit" + b;
  c["Moz" + a88] = "moz" + b;
  return c;
}
var Ec = { animationend: Dc("Animation", "AnimationEnd"), animationiteration: Dc("Animation", "AnimationIteration"), animationstart: Dc("Animation", "AnimationStart"), transitionend: Dc("Transition", "TransitionEnd") }, Fc = {}, Gc = {};
fa && (Gc = document.createElement("div").style, "AnimationEvent" in window || (delete Ec.animationend.animation, delete Ec.animationiteration.animation, delete Ec.animationstart.animation), "TransitionEvent" in window || delete Ec.transitionend.transition);
function Hc(a88) {
  if (Fc[a88])
    return Fc[a88];
  if (!Ec[a88])
    return a88;
  var b = Ec[a88], c;
  for (c in b)
    if (b.hasOwnProperty(c) && c in Gc)
      return Fc[a88] = b[c];
  return a88;
}
var Ic = Hc("animationend"), Jc = Hc("animationiteration"), Kc = Hc("animationstart"), Lc = Hc("transitionend"), Mc = /* @__PURE__ */ new Map(), Nc = /* @__PURE__ */ new Map(), Oc = [
  "abort",
  "abort",
  Ic,
  "animationEnd",
  Jc,
  "animationIteration",
  Kc,
  "animationStart",
  "canplay",
  "canPlay",
  "canplaythrough",
  "canPlayThrough",
  "durationchange",
  "durationChange",
  "emptied",
  "emptied",
  "encrypted",
  "encrypted",
  "ended",
  "ended",
  "error",
  "error",
  "gotpointercapture",
  "gotPointerCapture",
  "load",
  "load",
  "loadeddata",
  "loadedData",
  "loadedmetadata",
  "loadedMetadata",
  "loadstart",
  "loadStart",
  "lostpointercapture",
  "lostPointerCapture",
  "playing",
  "playing",
  "progress",
  "progress",
  "seeking",
  "seeking",
  "stalled",
  "stalled",
  "suspend",
  "suspend",
  "timeupdate",
  "timeUpdate",
  Lc,
  "transitionEnd",
  "waiting",
  "waiting"
];
function Pc(a88, b) {
  for (var c = 0; c < a88.length; c += 2) {
    var d2 = a88[c], e2 = a88[c + 1];
    e2 = "on" + (e2[0].toUpperCase() + e2.slice(1));
    Nc.set(d2, b);
    Mc.set(d2, e2);
    da(e2, [d2]);
  }
}
var Qc = r$2.unstable_now;
Qc();
var F = 8;
function Rc(a88) {
  if (0 !== (1 & a88))
    return F = 15, 1;
  if (0 !== (2 & a88))
    return F = 14, 2;
  if (0 !== (4 & a88))
    return F = 13, 4;
  var b = 24 & a88;
  if (0 !== b)
    return F = 12, b;
  if (0 !== (a88 & 32))
    return F = 11, 32;
  b = 192 & a88;
  if (0 !== b)
    return F = 10, b;
  if (0 !== (a88 & 256))
    return F = 9, 256;
  b = 3584 & a88;
  if (0 !== b)
    return F = 8, b;
  if (0 !== (a88 & 4096))
    return F = 7, 4096;
  b = 4186112 & a88;
  if (0 !== b)
    return F = 6, b;
  b = 62914560 & a88;
  if (0 !== b)
    return F = 5, b;
  if (a88 & 67108864)
    return F = 4, 67108864;
  if (0 !== (a88 & 134217728))
    return F = 3, 134217728;
  b = 805306368 & a88;
  if (0 !== b)
    return F = 2, b;
  if (0 !== (1073741824 & a88))
    return F = 1, 1073741824;
  F = 8;
  return a88;
}
function Sc(a88) {
  switch (a88) {
    case 99:
      return 15;
    case 98:
      return 10;
    case 97:
    case 96:
      return 8;
    case 95:
      return 2;
    default:
      return 0;
  }
}
function Tc(a88) {
  switch (a88) {
    case 15:
    case 14:
      return 99;
    case 13:
    case 12:
    case 11:
    case 10:
      return 98;
    case 9:
    case 8:
    case 7:
    case 6:
    case 4:
    case 5:
      return 97;
    case 3:
    case 2:
    case 1:
      return 95;
    case 0:
      return 90;
    default:
      throw Error(y$1(358, a88));
  }
}
function Uc(a88, b) {
  var c = a88.pendingLanes;
  if (0 === c)
    return F = 0;
  var d2 = 0, e2 = 0, f2 = a88.expiredLanes, g2 = a88.suspendedLanes, h2 = a88.pingedLanes;
  if (0 !== f2)
    d2 = f2, e2 = F = 15;
  else if (f2 = c & 134217727, 0 !== f2) {
    var k = f2 & ~g2;
    0 !== k ? (d2 = Rc(k), e2 = F) : (h2 &= f2, 0 !== h2 && (d2 = Rc(h2), e2 = F));
  } else
    f2 = c & ~g2, 0 !== f2 ? (d2 = Rc(f2), e2 = F) : 0 !== h2 && (d2 = Rc(h2), e2 = F);
  if (0 === d2)
    return 0;
  d2 = 31 - Vc(d2);
  d2 = c & ((0 > d2 ? 0 : 1 << d2) << 1) - 1;
  if (0 !== b && b !== d2 && 0 === (b & g2)) {
    Rc(b);
    if (e2 <= F)
      return b;
    F = e2;
  }
  b = a88.entangledLanes;
  if (0 !== b)
    for (a88 = a88.entanglements, b &= d2; 0 < b; )
      c = 31 - Vc(b), e2 = 1 << c, d2 |= a88[c], b &= ~e2;
  return d2;
}
function Wc(a88) {
  a88 = a88.pendingLanes & -1073741825;
  return 0 !== a88 ? a88 : a88 & 1073741824 ? 1073741824 : 0;
}
function Xc(a88, b) {
  switch (a88) {
    case 15:
      return 1;
    case 14:
      return 2;
    case 12:
      return a88 = Yc(24 & ~b), 0 === a88 ? Xc(10, b) : a88;
    case 10:
      return a88 = Yc(192 & ~b), 0 === a88 ? Xc(8, b) : a88;
    case 8:
      return a88 = Yc(3584 & ~b), 0 === a88 && (a88 = Yc(4186112 & ~b), 0 === a88 && (a88 = 512)), a88;
    case 2:
      return b = Yc(805306368 & ~b), 0 === b && (b = 268435456), b;
  }
  throw Error(y$1(358, a88));
}
function Yc(a88) {
  return a88 & -a88;
}
function Zc(a88) {
  for (var b = [], c = 0; 31 > c; c++)
    b.push(a88);
  return b;
}
function $c(a88, b, c) {
  a88.pendingLanes |= b;
  var d2 = b - 1;
  a88.suspendedLanes &= d2;
  a88.pingedLanes &= d2;
  a88 = a88.eventTimes;
  b = 31 - Vc(b);
  a88[b] = c;
}
var Vc = Math.clz32 ? Math.clz32 : ad, bd = Math.log, cd = Math.LN2;
function ad(a88) {
  return 0 === a88 ? 32 : 31 - (bd(a88) / cd | 0) | 0;
}
var dd = r$2.unstable_UserBlockingPriority, ed = r$2.unstable_runWithPriority, fd = true;
function gd(a88, b, c, d2) {
  Kb || Ib();
  var e2 = hd, f2 = Kb;
  Kb = true;
  try {
    Hb(e2, a88, b, c, d2);
  } finally {
    (Kb = f2) || Mb();
  }
}
function id(a88, b, c, d2) {
  ed(dd, hd.bind(null, a88, b, c, d2));
}
function hd(a88, b, c, d2) {
  if (fd) {
    var e2;
    if ((e2 = 0 === (b & 4)) && 0 < jc.length && -1 < qc.indexOf(a88))
      a88 = rc(null, a88, b, c, d2), jc.push(a88);
    else {
      var f2 = yc(a88, b, c, d2);
      if (null === f2)
        e2 && sc(a88, d2);
      else {
        if (e2) {
          if (-1 < qc.indexOf(a88)) {
            a88 = rc(f2, a88, b, c, d2);
            jc.push(a88);
            return;
          }
          if (uc(f2, a88, b, c, d2))
            return;
          sc(a88, d2);
        }
        jd(a88, b, d2, null, c);
      }
    }
  }
}
function yc(a88, b, c, d2) {
  var e2 = xb(d2);
  e2 = wc(e2);
  if (null !== e2) {
    var f2 = Zb(e2);
    if (null === f2)
      e2 = null;
    else {
      var g2 = f2.tag;
      if (13 === g2) {
        e2 = $b(f2);
        if (null !== e2)
          return e2;
        e2 = null;
      } else if (3 === g2) {
        if (f2.stateNode.hydrate)
          return 3 === f2.tag ? f2.stateNode.containerInfo : null;
        e2 = null;
      } else
        f2 !== e2 && (e2 = null);
    }
  }
  jd(a88, b, d2, e2, c);
  return null;
}
var kd = null, ld = null, md = null;
function nd() {
  if (md)
    return md;
  var a88, b = ld, c = b.length, d2, e2 = "value" in kd ? kd.value : kd.textContent, f2 = e2.length;
  for (a88 = 0; a88 < c && b[a88] === e2[a88]; a88++)
    ;
  var g2 = c - a88;
  for (d2 = 1; d2 <= g2 && b[c - d2] === e2[f2 - d2]; d2++)
    ;
  return md = e2.slice(a88, 1 < d2 ? 1 - d2 : void 0);
}
function od(a88) {
  var b = a88.keyCode;
  "charCode" in a88 ? (a88 = a88.charCode, 0 === a88 && 13 === b && (a88 = 13)) : a88 = b;
  10 === a88 && (a88 = 13);
  return 32 <= a88 || 13 === a88 ? a88 : 0;
}
function pd() {
  return true;
}
function qd() {
  return false;
}
function rd(a88) {
  function b(b2, d2, e2, f2, g2) {
    this._reactName = b2;
    this._targetInst = e2;
    this.type = d2;
    this.nativeEvent = f2;
    this.target = g2;
    this.currentTarget = null;
    for (var c in a88)
      a88.hasOwnProperty(c) && (b2 = a88[c], this[c] = b2 ? b2(f2) : f2[c]);
    this.isDefaultPrevented = (null != f2.defaultPrevented ? f2.defaultPrevented : false === f2.returnValue) ? pd : qd;
    this.isPropagationStopped = qd;
    return this;
  }
  m$2(b.prototype, { preventDefault: function() {
    this.defaultPrevented = true;
    var a92 = this.nativeEvent;
    a92 && (a92.preventDefault ? a92.preventDefault() : "unknown" !== typeof a92.returnValue && (a92.returnValue = false), this.isDefaultPrevented = pd);
  }, stopPropagation: function() {
    var a92 = this.nativeEvent;
    a92 && (a92.stopPropagation ? a92.stopPropagation() : "unknown" !== typeof a92.cancelBubble && (a92.cancelBubble = true), this.isPropagationStopped = pd);
  }, persist: function() {
  }, isPersistent: pd });
  return b;
}
var sd = { eventPhase: 0, bubbles: 0, cancelable: 0, timeStamp: function(a88) {
  return a88.timeStamp || Date.now();
}, defaultPrevented: 0, isTrusted: 0 }, td = rd(sd), ud = m$2({}, sd, { view: 0, detail: 0 }), vd = rd(ud), wd, xd, yd, Ad = m$2({}, ud, { screenX: 0, screenY: 0, clientX: 0, clientY: 0, pageX: 0, pageY: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, getModifierState: zd, button: 0, buttons: 0, relatedTarget: function(a88) {
  return void 0 === a88.relatedTarget ? a88.fromElement === a88.srcElement ? a88.toElement : a88.fromElement : a88.relatedTarget;
}, movementX: function(a88) {
  if ("movementX" in a88)
    return a88.movementX;
  a88 !== yd && (yd && "mousemove" === a88.type ? (wd = a88.screenX - yd.screenX, xd = a88.screenY - yd.screenY) : xd = wd = 0, yd = a88);
  return wd;
}, movementY: function(a88) {
  return "movementY" in a88 ? a88.movementY : xd;
} }), Bd = rd(Ad), Cd = m$2({}, Ad, { dataTransfer: 0 }), Dd = rd(Cd), Ed = m$2({}, ud, { relatedTarget: 0 }), Fd = rd(Ed), Gd = m$2({}, sd, { animationName: 0, elapsedTime: 0, pseudoElement: 0 }), Hd = rd(Gd), Id = m$2({}, sd, { clipboardData: function(a88) {
  return "clipboardData" in a88 ? a88.clipboardData : window.clipboardData;
} }), Jd = rd(Id), Kd = m$2({}, sd, { data: 0 }), Ld = rd(Kd), Md = {
  Esc: "Escape",
  Spacebar: " ",
  Left: "ArrowLeft",
  Up: "ArrowUp",
  Right: "ArrowRight",
  Down: "ArrowDown",
  Del: "Delete",
  Win: "OS",
  Menu: "ContextMenu",
  Apps: "ContextMenu",
  Scroll: "ScrollLock",
  MozPrintableKey: "Unidentified"
}, Nd = {
  8: "Backspace",
  9: "Tab",
  12: "Clear",
  13: "Enter",
  16: "Shift",
  17: "Control",
  18: "Alt",
  19: "Pause",
  20: "CapsLock",
  27: "Escape",
  32: " ",
  33: "PageUp",
  34: "PageDown",
  35: "End",
  36: "Home",
  37: "ArrowLeft",
  38: "ArrowUp",
  39: "ArrowRight",
  40: "ArrowDown",
  45: "Insert",
  46: "Delete",
  112: "F1",
  113: "F2",
  114: "F3",
  115: "F4",
  116: "F5",
  117: "F6",
  118: "F7",
  119: "F8",
  120: "F9",
  121: "F10",
  122: "F11",
  123: "F12",
  144: "NumLock",
  145: "ScrollLock",
  224: "Meta"
}, Od = { Alt: "altKey", Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey" };
function Pd(a88) {
  var b = this.nativeEvent;
  return b.getModifierState ? b.getModifierState(a88) : (a88 = Od[a88]) ? !!b[a88] : false;
}
function zd() {
  return Pd;
}
var Qd = m$2({}, ud, { key: function(a88) {
  if (a88.key) {
    var b = Md[a88.key] || a88.key;
    if ("Unidentified" !== b)
      return b;
  }
  return "keypress" === a88.type ? (a88 = od(a88), 13 === a88 ? "Enter" : String.fromCharCode(a88)) : "keydown" === a88.type || "keyup" === a88.type ? Nd[a88.keyCode] || "Unidentified" : "";
}, code: 0, location: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, repeat: 0, locale: 0, getModifierState: zd, charCode: function(a88) {
  return "keypress" === a88.type ? od(a88) : 0;
}, keyCode: function(a88) {
  return "keydown" === a88.type || "keyup" === a88.type ? a88.keyCode : 0;
}, which: function(a88) {
  return "keypress" === a88.type ? od(a88) : "keydown" === a88.type || "keyup" === a88.type ? a88.keyCode : 0;
} }), Rd = rd(Qd), Sd = m$2({}, Ad, { pointerId: 0, width: 0, height: 0, pressure: 0, tangentialPressure: 0, tiltX: 0, tiltY: 0, twist: 0, pointerType: 0, isPrimary: 0 }), Td = rd(Sd), Ud = m$2({}, ud, { touches: 0, targetTouches: 0, changedTouches: 0, altKey: 0, metaKey: 0, ctrlKey: 0, shiftKey: 0, getModifierState: zd }), Vd = rd(Ud), Wd = m$2({}, sd, { propertyName: 0, elapsedTime: 0, pseudoElement: 0 }), Xd = rd(Wd), Yd = m$2({}, Ad, {
  deltaX: function(a88) {
    return "deltaX" in a88 ? a88.deltaX : "wheelDeltaX" in a88 ? -a88.wheelDeltaX : 0;
  },
  deltaY: function(a88) {
    return "deltaY" in a88 ? a88.deltaY : "wheelDeltaY" in a88 ? -a88.wheelDeltaY : "wheelDelta" in a88 ? -a88.wheelDelta : 0;
  },
  deltaZ: 0,
  deltaMode: 0
}), Zd = rd(Yd), $d = [9, 13, 27, 32], ae = fa && "CompositionEvent" in window, be = null;
fa && "documentMode" in document && (be = document.documentMode);
var ce = fa && "TextEvent" in window && !be, de = fa && (!ae || be && 8 < be && 11 >= be), ee = String.fromCharCode(32), fe = false;
function ge(a88, b) {
  switch (a88) {
    case "keyup":
      return -1 !== $d.indexOf(b.keyCode);
    case "keydown":
      return 229 !== b.keyCode;
    case "keypress":
    case "mousedown":
    case "focusout":
      return true;
    default:
      return false;
  }
}
function he(a88) {
  a88 = a88.detail;
  return "object" === typeof a88 && "data" in a88 ? a88.data : null;
}
var ie = false;
function je(a88, b) {
  switch (a88) {
    case "compositionend":
      return he(b);
    case "keypress":
      if (32 !== b.which)
        return null;
      fe = true;
      return ee;
    case "textInput":
      return a88 = b.data, a88 === ee && fe ? null : a88;
    default:
      return null;
  }
}
function ke(a88, b) {
  if (ie)
    return "compositionend" === a88 || !ae && ge(a88, b) ? (a88 = nd(), md = ld = kd = null, ie = false, a88) : null;
  switch (a88) {
    case "paste":
      return null;
    case "keypress":
      if (!(b.ctrlKey || b.altKey || b.metaKey) || b.ctrlKey && b.altKey) {
        if (b.char && 1 < b.char.length)
          return b.char;
        if (b.which)
          return String.fromCharCode(b.which);
      }
      return null;
    case "compositionend":
      return de && "ko" !== b.locale ? null : b.data;
    default:
      return null;
  }
}
var le = { color: true, date: true, datetime: true, "datetime-local": true, email: true, month: true, number: true, password: true, range: true, search: true, tel: true, text: true, time: true, url: true, week: true };
function me(a88) {
  var b = a88 && a88.nodeName && a88.nodeName.toLowerCase();
  return "input" === b ? !!le[a88.type] : "textarea" === b ? true : false;
}
function ne(a88, b, c, d2) {
  Eb(d2);
  b = oe(b, "onChange");
  0 < b.length && (c = new td("onChange", "change", null, c, d2), a88.push({ event: c, listeners: b }));
}
var pe = null, qe = null;
function re(a88) {
  se(a88, 0);
}
function te(a88) {
  var b = ue(a88);
  if (Wa(b))
    return a88;
}
function ve(a88, b) {
  if ("change" === a88)
    return b;
}
var we = false;
if (fa) {
  var xe;
  if (fa) {
    var ye = "oninput" in document;
    if (!ye) {
      var ze = document.createElement("div");
      ze.setAttribute("oninput", "return;");
      ye = "function" === typeof ze.oninput;
    }
    xe = ye;
  } else
    xe = false;
  we = xe && (!document.documentMode || 9 < document.documentMode);
}
function Ae() {
  pe && (pe.detachEvent("onpropertychange", Be), qe = pe = null);
}
function Be(a88) {
  if ("value" === a88.propertyName && te(qe)) {
    var b = [];
    ne(b, qe, a88, xb(a88));
    a88 = re;
    if (Kb)
      a88(b);
    else {
      Kb = true;
      try {
        Gb(a88, b);
      } finally {
        Kb = false, Mb();
      }
    }
  }
}
function Ce(a88, b, c) {
  "focusin" === a88 ? (Ae(), pe = b, qe = c, pe.attachEvent("onpropertychange", Be)) : "focusout" === a88 && Ae();
}
function De(a88) {
  if ("selectionchange" === a88 || "keyup" === a88 || "keydown" === a88)
    return te(qe);
}
function Ee(a88, b) {
  if ("click" === a88)
    return te(b);
}
function Fe(a88, b) {
  if ("input" === a88 || "change" === a88)
    return te(b);
}
function Ge(a88, b) {
  return a88 === b && (0 !== a88 || 1 / a88 === 1 / b) || a88 !== a88 && b !== b;
}
var He = "function" === typeof Object.is ? Object.is : Ge, Ie = Object.prototype.hasOwnProperty;
function Je(a88, b) {
  if (He(a88, b))
    return true;
  if ("object" !== typeof a88 || null === a88 || "object" !== typeof b || null === b)
    return false;
  var c = Object.keys(a88), d2 = Object.keys(b);
  if (c.length !== d2.length)
    return false;
  for (d2 = 0; d2 < c.length; d2++)
    if (!Ie.call(b, c[d2]) || !He(a88[c[d2]], b[c[d2]]))
      return false;
  return true;
}
function Ke(a88) {
  for (; a88 && a88.firstChild; )
    a88 = a88.firstChild;
  return a88;
}
function Le(a88, b) {
  var c = Ke(a88);
  a88 = 0;
  for (var d2; c; ) {
    if (3 === c.nodeType) {
      d2 = a88 + c.textContent.length;
      if (a88 <= b && d2 >= b)
        return { node: c, offset: b - a88 };
      a88 = d2;
    }
    a: {
      for (; c; ) {
        if (c.nextSibling) {
          c = c.nextSibling;
          break a;
        }
        c = c.parentNode;
      }
      c = void 0;
    }
    c = Ke(c);
  }
}
function Me(a88, b) {
  return a88 && b ? a88 === b ? true : a88 && 3 === a88.nodeType ? false : b && 3 === b.nodeType ? Me(a88, b.parentNode) : "contains" in a88 ? a88.contains(b) : a88.compareDocumentPosition ? !!(a88.compareDocumentPosition(b) & 16) : false : false;
}
function Ne() {
  for (var a88 = window, b = Xa(); b instanceof a88.HTMLIFrameElement; ) {
    try {
      var c = "string" === typeof b.contentWindow.location.href;
    } catch (d2) {
      c = false;
    }
    if (c)
      a88 = b.contentWindow;
    else
      break;
    b = Xa(a88.document);
  }
  return b;
}
function Oe(a88) {
  var b = a88 && a88.nodeName && a88.nodeName.toLowerCase();
  return b && ("input" === b && ("text" === a88.type || "search" === a88.type || "tel" === a88.type || "url" === a88.type || "password" === a88.type) || "textarea" === b || "true" === a88.contentEditable);
}
var Pe = fa && "documentMode" in document && 11 >= document.documentMode, Qe = null, Re = null, Se = null, Te = false;
function Ue(a88, b, c) {
  var d2 = c.window === c ? c.document : 9 === c.nodeType ? c : c.ownerDocument;
  Te || null == Qe || Qe !== Xa(d2) || (d2 = Qe, "selectionStart" in d2 && Oe(d2) ? d2 = { start: d2.selectionStart, end: d2.selectionEnd } : (d2 = (d2.ownerDocument && d2.ownerDocument.defaultView || window).getSelection(), d2 = { anchorNode: d2.anchorNode, anchorOffset: d2.anchorOffset, focusNode: d2.focusNode, focusOffset: d2.focusOffset }), Se && Je(Se, d2) || (Se = d2, d2 = oe(Re, "onSelect"), 0 < d2.length && (b = new td("onSelect", "select", null, b, c), a88.push({ event: b, listeners: d2 }), b.target = Qe)));
}
Pc(
  "cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),
  0
);
Pc("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "), 1);
Pc(Oc, 2);
for (var Ve = "change selectionchange textInput compositionstart compositionend compositionupdate".split(" "), We = 0; We < Ve.length; We++)
  Nc.set(Ve[We], 0);
ea("onMouseEnter", ["mouseout", "mouseover"]);
ea("onMouseLeave", ["mouseout", "mouseover"]);
ea("onPointerEnter", ["pointerout", "pointerover"]);
ea("onPointerLeave", ["pointerout", "pointerover"]);
da("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
da("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
da("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
da("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
da("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
da("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
var Xe = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "), Ye = new Set("cancel close invalid load scroll toggle".split(" ").concat(Xe));
function Ze(a88, b, c) {
  var d2 = a88.type || "unknown-event";
  a88.currentTarget = c;
  Yb(d2, b, void 0, a88);
  a88.currentTarget = null;
}
function se(a88, b) {
  b = 0 !== (b & 4);
  for (var c = 0; c < a88.length; c++) {
    var d2 = a88[c], e2 = d2.event;
    d2 = d2.listeners;
    a: {
      var f2 = void 0;
      if (b)
        for (var g2 = d2.length - 1; 0 <= g2; g2--) {
          var h2 = d2[g2], k = h2.instance, l2 = h2.currentTarget;
          h2 = h2.listener;
          if (k !== f2 && e2.isPropagationStopped())
            break a;
          Ze(e2, h2, l2);
          f2 = k;
        }
      else
        for (g2 = 0; g2 < d2.length; g2++) {
          h2 = d2[g2];
          k = h2.instance;
          l2 = h2.currentTarget;
          h2 = h2.listener;
          if (k !== f2 && e2.isPropagationStopped())
            break a;
          Ze(e2, h2, l2);
          f2 = k;
        }
    }
  }
  if (Ub)
    throw a88 = Vb, Ub = false, Vb = null, a88;
}
function G(a88, b) {
  var c = $e(b), d2 = a88 + "__bubble";
  c.has(d2) || (af(b, a88, 2, false), c.add(d2));
}
var bf = "_reactListening" + Math.random().toString(36).slice(2);
function cf(a88) {
  a88[bf] || (a88[bf] = true, ba.forEach(function(b) {
    Ye.has(b) || df(b, false, a88, null);
    df(b, true, a88, null);
  }));
}
function df(a88, b, c, d2) {
  var e2 = 4 < arguments.length && void 0 !== arguments[4] ? arguments[4] : 0, f2 = c;
  "selectionchange" === a88 && 9 !== c.nodeType && (f2 = c.ownerDocument);
  if (null !== d2 && !b && Ye.has(a88)) {
    if ("scroll" !== a88)
      return;
    e2 |= 2;
    f2 = d2;
  }
  var g2 = $e(f2), h2 = a88 + "__" + (b ? "capture" : "bubble");
  g2.has(h2) || (b && (e2 |= 4), af(f2, a88, e2, b), g2.add(h2));
}
function af(a88, b, c, d2) {
  var e2 = Nc.get(b);
  switch (void 0 === e2 ? 2 : e2) {
    case 0:
      e2 = gd;
      break;
    case 1:
      e2 = id;
      break;
    default:
      e2 = hd;
  }
  c = e2.bind(null, b, c, a88);
  e2 = void 0;
  !Pb || "touchstart" !== b && "touchmove" !== b && "wheel" !== b || (e2 = true);
  d2 ? void 0 !== e2 ? a88.addEventListener(b, c, { capture: true, passive: e2 }) : a88.addEventListener(b, c, true) : void 0 !== e2 ? a88.addEventListener(b, c, { passive: e2 }) : a88.addEventListener(b, c, false);
}
function jd(a88, b, c, d2, e2) {
  var f2 = d2;
  if (0 === (b & 1) && 0 === (b & 2) && null !== d2)
    a:
      for (; ; ) {
        if (null === d2)
          return;
        var g2 = d2.tag;
        if (3 === g2 || 4 === g2) {
          var h2 = d2.stateNode.containerInfo;
          if (h2 === e2 || 8 === h2.nodeType && h2.parentNode === e2)
            break;
          if (4 === g2)
            for (g2 = d2.return; null !== g2; ) {
              var k = g2.tag;
              if (3 === k || 4 === k) {
                if (k = g2.stateNode.containerInfo, k === e2 || 8 === k.nodeType && k.parentNode === e2)
                  return;
              }
              g2 = g2.return;
            }
          for (; null !== h2; ) {
            g2 = wc(h2);
            if (null === g2)
              return;
            k = g2.tag;
            if (5 === k || 6 === k) {
              d2 = f2 = g2;
              continue a;
            }
            h2 = h2.parentNode;
          }
        }
        d2 = d2.return;
      }
  Nb(function() {
    var d3 = f2, e3 = xb(c), g3 = [];
    a: {
      var h3 = Mc.get(a88);
      if (void 0 !== h3) {
        var k2 = td, x2 = a88;
        switch (a88) {
          case "keypress":
            if (0 === od(c))
              break a;
          case "keydown":
          case "keyup":
            k2 = Rd;
            break;
          case "focusin":
            x2 = "focus";
            k2 = Fd;
            break;
          case "focusout":
            x2 = "blur";
            k2 = Fd;
            break;
          case "beforeblur":
          case "afterblur":
            k2 = Fd;
            break;
          case "click":
            if (2 === c.button)
              break a;
          case "auxclick":
          case "dblclick":
          case "mousedown":
          case "mousemove":
          case "mouseup":
          case "mouseout":
          case "mouseover":
          case "contextmenu":
            k2 = Bd;
            break;
          case "drag":
          case "dragend":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "dragstart":
          case "drop":
            k2 = Dd;
            break;
          case "touchcancel":
          case "touchend":
          case "touchmove":
          case "touchstart":
            k2 = Vd;
            break;
          case Ic:
          case Jc:
          case Kc:
            k2 = Hd;
            break;
          case Lc:
            k2 = Xd;
            break;
          case "scroll":
            k2 = vd;
            break;
          case "wheel":
            k2 = Zd;
            break;
          case "copy":
          case "cut":
          case "paste":
            k2 = Jd;
            break;
          case "gotpointercapture":
          case "lostpointercapture":
          case "pointercancel":
          case "pointerdown":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "pointerup":
            k2 = Td;
        }
        var w2 = 0 !== (b & 4), z2 = !w2 && "scroll" === a88, u2 = w2 ? null !== h3 ? h3 + "Capture" : null : h3;
        w2 = [];
        for (var t2 = d3, q2; null !== t2; ) {
          q2 = t2;
          var v2 = q2.stateNode;
          5 === q2.tag && null !== v2 && (q2 = v2, null !== u2 && (v2 = Ob(t2, u2), null != v2 && w2.push(ef(t2, v2, q2))));
          if (z2)
            break;
          t2 = t2.return;
        }
        0 < w2.length && (h3 = new k2(h3, x2, null, c, e3), g3.push({ event: h3, listeners: w2 }));
      }
    }
    if (0 === (b & 7)) {
      a: {
        h3 = "mouseover" === a88 || "pointerover" === a88;
        k2 = "mouseout" === a88 || "pointerout" === a88;
        if (h3 && 0 === (b & 16) && (x2 = c.relatedTarget || c.fromElement) && (wc(x2) || x2[ff]))
          break a;
        if (k2 || h3) {
          h3 = e3.window === e3 ? e3 : (h3 = e3.ownerDocument) ? h3.defaultView || h3.parentWindow : window;
          if (k2) {
            if (x2 = c.relatedTarget || c.toElement, k2 = d3, x2 = x2 ? wc(x2) : null, null !== x2 && (z2 = Zb(x2), x2 !== z2 || 5 !== x2.tag && 6 !== x2.tag))
              x2 = null;
          } else
            k2 = null, x2 = d3;
          if (k2 !== x2) {
            w2 = Bd;
            v2 = "onMouseLeave";
            u2 = "onMouseEnter";
            t2 = "mouse";
            if ("pointerout" === a88 || "pointerover" === a88)
              w2 = Td, v2 = "onPointerLeave", u2 = "onPointerEnter", t2 = "pointer";
            z2 = null == k2 ? h3 : ue(k2);
            q2 = null == x2 ? h3 : ue(x2);
            h3 = new w2(v2, t2 + "leave", k2, c, e3);
            h3.target = z2;
            h3.relatedTarget = q2;
            v2 = null;
            wc(e3) === d3 && (w2 = new w2(u2, t2 + "enter", x2, c, e3), w2.target = q2, w2.relatedTarget = z2, v2 = w2);
            z2 = v2;
            if (k2 && x2)
              b: {
                w2 = k2;
                u2 = x2;
                t2 = 0;
                for (q2 = w2; q2; q2 = gf(q2))
                  t2++;
                q2 = 0;
                for (v2 = u2; v2; v2 = gf(v2))
                  q2++;
                for (; 0 < t2 - q2; )
                  w2 = gf(w2), t2--;
                for (; 0 < q2 - t2; )
                  u2 = gf(u2), q2--;
                for (; t2--; ) {
                  if (w2 === u2 || null !== u2 && w2 === u2.alternate)
                    break b;
                  w2 = gf(w2);
                  u2 = gf(u2);
                }
                w2 = null;
              }
            else
              w2 = null;
            null !== k2 && hf(g3, h3, k2, w2, false);
            null !== x2 && null !== z2 && hf(g3, z2, x2, w2, true);
          }
        }
      }
      a: {
        h3 = d3 ? ue(d3) : window;
        k2 = h3.nodeName && h3.nodeName.toLowerCase();
        if ("select" === k2 || "input" === k2 && "file" === h3.type)
          var J2 = ve;
        else if (me(h3))
          if (we)
            J2 = Fe;
          else {
            J2 = De;
            var K2 = Ce;
          }
        else
          (k2 = h3.nodeName) && "input" === k2.toLowerCase() && ("checkbox" === h3.type || "radio" === h3.type) && (J2 = Ee);
        if (J2 && (J2 = J2(a88, d3))) {
          ne(g3, J2, c, e3);
          break a;
        }
        K2 && K2(a88, h3, d3);
        "focusout" === a88 && (K2 = h3._wrapperState) && K2.controlled && "number" === h3.type && bb(h3, "number", h3.value);
      }
      K2 = d3 ? ue(d3) : window;
      switch (a88) {
        case "focusin":
          if (me(K2) || "true" === K2.contentEditable)
            Qe = K2, Re = d3, Se = null;
          break;
        case "focusout":
          Se = Re = Qe = null;
          break;
        case "mousedown":
          Te = true;
          break;
        case "contextmenu":
        case "mouseup":
        case "dragend":
          Te = false;
          Ue(g3, c, e3);
          break;
        case "selectionchange":
          if (Pe)
            break;
        case "keydown":
        case "keyup":
          Ue(g3, c, e3);
      }
      var Q2;
      if (ae)
        b: {
          switch (a88) {
            case "compositionstart":
              var L2 = "onCompositionStart";
              break b;
            case "compositionend":
              L2 = "onCompositionEnd";
              break b;
            case "compositionupdate":
              L2 = "onCompositionUpdate";
              break b;
          }
          L2 = void 0;
        }
      else
        ie ? ge(a88, c) && (L2 = "onCompositionEnd") : "keydown" === a88 && 229 === c.keyCode && (L2 = "onCompositionStart");
      L2 && (de && "ko" !== c.locale && (ie || "onCompositionStart" !== L2 ? "onCompositionEnd" === L2 && ie && (Q2 = nd()) : (kd = e3, ld = "value" in kd ? kd.value : kd.textContent, ie = true)), K2 = oe(d3, L2), 0 < K2.length && (L2 = new Ld(L2, a88, null, c, e3), g3.push({ event: L2, listeners: K2 }), Q2 ? L2.data = Q2 : (Q2 = he(c), null !== Q2 && (L2.data = Q2))));
      if (Q2 = ce ? je(a88, c) : ke(a88, c))
        d3 = oe(d3, "onBeforeInput"), 0 < d3.length && (e3 = new Ld(
          "onBeforeInput",
          "beforeinput",
          null,
          c,
          e3
        ), g3.push({ event: e3, listeners: d3 }), e3.data = Q2);
    }
    se(g3, b);
  });
}
function ef(a88, b, c) {
  return { instance: a88, listener: b, currentTarget: c };
}
function oe(a88, b) {
  for (var c = b + "Capture", d2 = []; null !== a88; ) {
    var e2 = a88, f2 = e2.stateNode;
    5 === e2.tag && null !== f2 && (e2 = f2, f2 = Ob(a88, c), null != f2 && d2.unshift(ef(a88, f2, e2)), f2 = Ob(a88, b), null != f2 && d2.push(ef(a88, f2, e2)));
    a88 = a88.return;
  }
  return d2;
}
function gf(a88) {
  if (null === a88)
    return null;
  do
    a88 = a88.return;
  while (a88 && 5 !== a88.tag);
  return a88 ? a88 : null;
}
function hf(a88, b, c, d2, e2) {
  for (var f2 = b._reactName, g2 = []; null !== c && c !== d2; ) {
    var h2 = c, k = h2.alternate, l2 = h2.stateNode;
    if (null !== k && k === d2)
      break;
    5 === h2.tag && null !== l2 && (h2 = l2, e2 ? (k = Ob(c, f2), null != k && g2.unshift(ef(c, k, h2))) : e2 || (k = Ob(c, f2), null != k && g2.push(ef(c, k, h2))));
    c = c.return;
  }
  0 !== g2.length && a88.push({ event: b, listeners: g2 });
}
function jf() {
}
var kf = null, lf = null;
function mf(a88, b) {
  switch (a88) {
    case "button":
    case "input":
    case "select":
    case "textarea":
      return !!b.autoFocus;
  }
  return false;
}
function nf(a88, b) {
  return "textarea" === a88 || "option" === a88 || "noscript" === a88 || "string" === typeof b.children || "number" === typeof b.children || "object" === typeof b.dangerouslySetInnerHTML && null !== b.dangerouslySetInnerHTML && null != b.dangerouslySetInnerHTML.__html;
}
var of$2 = "function" === typeof setTimeout ? setTimeout : void 0, pf = "function" === typeof clearTimeout ? clearTimeout : void 0;
function qf(a88) {
  1 === a88.nodeType ? a88.textContent = "" : 9 === a88.nodeType && (a88 = a88.body, null != a88 && (a88.textContent = ""));
}
function rf(a88) {
  for (; null != a88; a88 = a88.nextSibling) {
    var b = a88.nodeType;
    if (1 === b || 3 === b)
      break;
  }
  return a88;
}
function sf(a88) {
  a88 = a88.previousSibling;
  for (var b = 0; a88; ) {
    if (8 === a88.nodeType) {
      var c = a88.data;
      if ("$" === c || "$!" === c || "$?" === c) {
        if (0 === b)
          return a88;
        b--;
      } else
        "/$" === c && b++;
    }
    a88 = a88.previousSibling;
  }
  return null;
}
var tf = 0;
function uf(a88) {
  return { $$typeof: Ga, toString: a88, valueOf: a88 };
}
var vf = Math.random().toString(36).slice(2), wf = "__reactFiber$" + vf, xf = "__reactProps$" + vf, ff = "__reactContainer$" + vf, yf = "__reactEvents$" + vf;
function wc(a88) {
  var b = a88[wf];
  if (b)
    return b;
  for (var c = a88.parentNode; c; ) {
    if (b = c[ff] || c[wf]) {
      c = b.alternate;
      if (null !== b.child || null !== c && null !== c.child)
        for (a88 = sf(a88); null !== a88; ) {
          if (c = a88[wf])
            return c;
          a88 = sf(a88);
        }
      return b;
    }
    a88 = c;
    c = a88.parentNode;
  }
  return null;
}
function Cb(a88) {
  a88 = a88[wf] || a88[ff];
  return !a88 || 5 !== a88.tag && 6 !== a88.tag && 13 !== a88.tag && 3 !== a88.tag ? null : a88;
}
function ue(a88) {
  if (5 === a88.tag || 6 === a88.tag)
    return a88.stateNode;
  throw Error(y$1(33));
}
function Db(a88) {
  return a88[xf] || null;
}
function $e(a88) {
  var b = a88[yf];
  void 0 === b && (b = a88[yf] = /* @__PURE__ */ new Set());
  return b;
}
var zf = [], Af = -1;
function Bf(a88) {
  return { current: a88 };
}
function H(a88) {
  0 > Af || (a88.current = zf[Af], zf[Af] = null, Af--);
}
function I(a88, b) {
  Af++;
  zf[Af] = a88.current;
  a88.current = b;
}
var Cf = {}, M = Bf(Cf), N = Bf(false), Df = Cf;
function Ef(a88, b) {
  var c = a88.type.contextTypes;
  if (!c)
    return Cf;
  var d2 = a88.stateNode;
  if (d2 && d2.__reactInternalMemoizedUnmaskedChildContext === b)
    return d2.__reactInternalMemoizedMaskedChildContext;
  var e2 = {}, f2;
  for (f2 in c)
    e2[f2] = b[f2];
  d2 && (a88 = a88.stateNode, a88.__reactInternalMemoizedUnmaskedChildContext = b, a88.__reactInternalMemoizedMaskedChildContext = e2);
  return e2;
}
function Ff(a88) {
  a88 = a88.childContextTypes;
  return null !== a88 && void 0 !== a88;
}
function Gf() {
  H(N);
  H(M);
}
function Hf(a88, b, c) {
  if (M.current !== Cf)
    throw Error(y$1(168));
  I(M, b);
  I(N, c);
}
function If(a88, b, c) {
  var d2 = a88.stateNode;
  a88 = b.childContextTypes;
  if ("function" !== typeof d2.getChildContext)
    return c;
  d2 = d2.getChildContext();
  for (var e2 in d2)
    if (!(e2 in a88))
      throw Error(y$1(108, Ra(b) || "Unknown", e2));
  return m$2({}, c, d2);
}
function Jf(a88) {
  a88 = (a88 = a88.stateNode) && a88.__reactInternalMemoizedMergedChildContext || Cf;
  Df = M.current;
  I(M, a88);
  I(N, N.current);
  return true;
}
function Kf(a88, b, c) {
  var d2 = a88.stateNode;
  if (!d2)
    throw Error(y$1(169));
  c ? (a88 = If(a88, b, Df), d2.__reactInternalMemoizedMergedChildContext = a88, H(N), H(M), I(M, a88)) : H(N);
  I(N, c);
}
var Lf = null, Mf = null, Nf = r$2.unstable_runWithPriority, Of = r$2.unstable_scheduleCallback, Pf = r$2.unstable_cancelCallback, Qf = r$2.unstable_shouldYield, Rf = r$2.unstable_requestPaint, Sf = r$2.unstable_now, Tf = r$2.unstable_getCurrentPriorityLevel, Uf = r$2.unstable_ImmediatePriority, Vf = r$2.unstable_UserBlockingPriority, Wf = r$2.unstable_NormalPriority, Xf = r$2.unstable_LowPriority, Yf = r$2.unstable_IdlePriority, Zf = {}, $f = void 0 !== Rf ? Rf : function() {
}, ag = null, bg = null, cg = false, dg = Sf(), O = 1e4 > dg ? Sf : function() {
  return Sf() - dg;
};
function eg() {
  switch (Tf()) {
    case Uf:
      return 99;
    case Vf:
      return 98;
    case Wf:
      return 97;
    case Xf:
      return 96;
    case Yf:
      return 95;
    default:
      throw Error(y$1(332));
  }
}
function fg(a88) {
  switch (a88) {
    case 99:
      return Uf;
    case 98:
      return Vf;
    case 97:
      return Wf;
    case 96:
      return Xf;
    case 95:
      return Yf;
    default:
      throw Error(y$1(332));
  }
}
function gg(a88, b) {
  a88 = fg(a88);
  return Nf(a88, b);
}
function hg(a88, b, c) {
  a88 = fg(a88);
  return Of(a88, b, c);
}
function ig() {
  if (null !== bg) {
    var a88 = bg;
    bg = null;
    Pf(a88);
  }
  jg();
}
function jg() {
  if (!cg && null !== ag) {
    cg = true;
    var a88 = 0;
    try {
      var b = ag;
      gg(99, function() {
        for (; a88 < b.length; a88++) {
          var c = b[a88];
          do
            c = c(true);
          while (null !== c);
        }
      });
      ag = null;
    } catch (c) {
      throw null !== ag && (ag = ag.slice(a88 + 1)), Of(Uf, ig), c;
    } finally {
      cg = false;
    }
  }
}
var kg = ra.ReactCurrentBatchConfig;
function lg(a88, b) {
  if (a88 && a88.defaultProps) {
    b = m$2({}, b);
    a88 = a88.defaultProps;
    for (var c in a88)
      void 0 === b[c] && (b[c] = a88[c]);
    return b;
  }
  return b;
}
var mg = Bf(null), ng = null, og = null, pg = null;
function qg() {
  pg = og = ng = null;
}
function rg(a88) {
  var b = mg.current;
  H(mg);
  a88.type._context._currentValue = b;
}
function sg(a88, b) {
  for (; null !== a88; ) {
    var c = a88.alternate;
    if ((a88.childLanes & b) === b)
      if (null === c || (c.childLanes & b) === b)
        break;
      else
        c.childLanes |= b;
    else
      a88.childLanes |= b, null !== c && (c.childLanes |= b);
    a88 = a88.return;
  }
}
function tg(a88, b) {
  ng = a88;
  pg = og = null;
  a88 = a88.dependencies;
  null !== a88 && null !== a88.firstContext && (0 !== (a88.lanes & b) && (ug = true), a88.firstContext = null);
}
function vg(a88, b) {
  if (pg !== a88 && false !== b && 0 !== b) {
    if ("number" !== typeof b || 1073741823 === b)
      pg = a88, b = 1073741823;
    b = { context: a88, observedBits: b, next: null };
    if (null === og) {
      if (null === ng)
        throw Error(y$1(308));
      og = b;
      ng.dependencies = { lanes: 0, firstContext: b, responders: null };
    } else
      og = og.next = b;
  }
  return a88._currentValue;
}
var wg = false;
function xg(a88) {
  a88.updateQueue = { baseState: a88.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null }, effects: null };
}
function yg(a88, b) {
  a88 = a88.updateQueue;
  b.updateQueue === a88 && (b.updateQueue = { baseState: a88.baseState, firstBaseUpdate: a88.firstBaseUpdate, lastBaseUpdate: a88.lastBaseUpdate, shared: a88.shared, effects: a88.effects });
}
function zg(a88, b) {
  return { eventTime: a88, lane: b, tag: 0, payload: null, callback: null, next: null };
}
function Ag(a88, b) {
  a88 = a88.updateQueue;
  if (null !== a88) {
    a88 = a88.shared;
    var c = a88.pending;
    null === c ? b.next = b : (b.next = c.next, c.next = b);
    a88.pending = b;
  }
}
function Bg(a88, b) {
  var c = a88.updateQueue, d2 = a88.alternate;
  if (null !== d2 && (d2 = d2.updateQueue, c === d2)) {
    var e2 = null, f2 = null;
    c = c.firstBaseUpdate;
    if (null !== c) {
      do {
        var g2 = { eventTime: c.eventTime, lane: c.lane, tag: c.tag, payload: c.payload, callback: c.callback, next: null };
        null === f2 ? e2 = f2 = g2 : f2 = f2.next = g2;
        c = c.next;
      } while (null !== c);
      null === f2 ? e2 = f2 = b : f2 = f2.next = b;
    } else
      e2 = f2 = b;
    c = { baseState: d2.baseState, firstBaseUpdate: e2, lastBaseUpdate: f2, shared: d2.shared, effects: d2.effects };
    a88.updateQueue = c;
    return;
  }
  a88 = c.lastBaseUpdate;
  null === a88 ? c.firstBaseUpdate = b : a88.next = b;
  c.lastBaseUpdate = b;
}
function Cg(a88, b, c, d2) {
  var e2 = a88.updateQueue;
  wg = false;
  var f2 = e2.firstBaseUpdate, g2 = e2.lastBaseUpdate, h2 = e2.shared.pending;
  if (null !== h2) {
    e2.shared.pending = null;
    var k = h2, l2 = k.next;
    k.next = null;
    null === g2 ? f2 = l2 : g2.next = l2;
    g2 = k;
    var n2 = a88.alternate;
    if (null !== n2) {
      n2 = n2.updateQueue;
      var A2 = n2.lastBaseUpdate;
      A2 !== g2 && (null === A2 ? n2.firstBaseUpdate = l2 : A2.next = l2, n2.lastBaseUpdate = k);
    }
  }
  if (null !== f2) {
    A2 = e2.baseState;
    g2 = 0;
    n2 = l2 = k = null;
    do {
      h2 = f2.lane;
      var p2 = f2.eventTime;
      if ((d2 & h2) === h2) {
        null !== n2 && (n2 = n2.next = {
          eventTime: p2,
          lane: 0,
          tag: f2.tag,
          payload: f2.payload,
          callback: f2.callback,
          next: null
        });
        a: {
          var C2 = a88, x2 = f2;
          h2 = b;
          p2 = c;
          switch (x2.tag) {
            case 1:
              C2 = x2.payload;
              if ("function" === typeof C2) {
                A2 = C2.call(p2, A2, h2);
                break a;
              }
              A2 = C2;
              break a;
            case 3:
              C2.flags = C2.flags & -4097 | 64;
            case 0:
              C2 = x2.payload;
              h2 = "function" === typeof C2 ? C2.call(p2, A2, h2) : C2;
              if (null === h2 || void 0 === h2)
                break a;
              A2 = m$2({}, A2, h2);
              break a;
            case 2:
              wg = true;
          }
        }
        null !== f2.callback && (a88.flags |= 32, h2 = e2.effects, null === h2 ? e2.effects = [f2] : h2.push(f2));
      } else
        p2 = { eventTime: p2, lane: h2, tag: f2.tag, payload: f2.payload, callback: f2.callback, next: null }, null === n2 ? (l2 = n2 = p2, k = A2) : n2 = n2.next = p2, g2 |= h2;
      f2 = f2.next;
      if (null === f2)
        if (h2 = e2.shared.pending, null === h2)
          break;
        else
          f2 = h2.next, h2.next = null, e2.lastBaseUpdate = h2, e2.shared.pending = null;
    } while (1);
    null === n2 && (k = A2);
    e2.baseState = k;
    e2.firstBaseUpdate = l2;
    e2.lastBaseUpdate = n2;
    Dg |= g2;
    a88.lanes = g2;
    a88.memoizedState = A2;
  }
}
function Eg(a88, b, c) {
  a88 = b.effects;
  b.effects = null;
  if (null !== a88)
    for (b = 0; b < a88.length; b++) {
      var d2 = a88[b], e2 = d2.callback;
      if (null !== e2) {
        d2.callback = null;
        d2 = c;
        if ("function" !== typeof e2)
          throw Error(y$1(191, e2));
        e2.call(d2);
      }
    }
}
var Fg = new aa.Component().refs;
function Gg(a88, b, c, d2) {
  b = a88.memoizedState;
  c = c(d2, b);
  c = null === c || void 0 === c ? b : m$2({}, b, c);
  a88.memoizedState = c;
  0 === a88.lanes && (a88.updateQueue.baseState = c);
}
var Kg = { isMounted: function(a88) {
  return (a88 = a88._reactInternals) ? Zb(a88) === a88 : false;
}, enqueueSetState: function(a88, b, c) {
  a88 = a88._reactInternals;
  var d2 = Hg(), e2 = Ig(a88), f2 = zg(d2, e2);
  f2.payload = b;
  void 0 !== c && null !== c && (f2.callback = c);
  Ag(a88, f2);
  Jg(a88, e2, d2);
}, enqueueReplaceState: function(a88, b, c) {
  a88 = a88._reactInternals;
  var d2 = Hg(), e2 = Ig(a88), f2 = zg(d2, e2);
  f2.tag = 1;
  f2.payload = b;
  void 0 !== c && null !== c && (f2.callback = c);
  Ag(a88, f2);
  Jg(a88, e2, d2);
}, enqueueForceUpdate: function(a88, b) {
  a88 = a88._reactInternals;
  var c = Hg(), d2 = Ig(a88), e2 = zg(c, d2);
  e2.tag = 2;
  void 0 !== b && null !== b && (e2.callback = b);
  Ag(a88, e2);
  Jg(a88, d2, c);
} };
function Lg(a88, b, c, d2, e2, f2, g2) {
  a88 = a88.stateNode;
  return "function" === typeof a88.shouldComponentUpdate ? a88.shouldComponentUpdate(d2, f2, g2) : b.prototype && b.prototype.isPureReactComponent ? !Je(c, d2) || !Je(e2, f2) : true;
}
function Mg(a88, b, c) {
  var d2 = false, e2 = Cf;
  var f2 = b.contextType;
  "object" === typeof f2 && null !== f2 ? f2 = vg(f2) : (e2 = Ff(b) ? Df : M.current, d2 = b.contextTypes, f2 = (d2 = null !== d2 && void 0 !== d2) ? Ef(a88, e2) : Cf);
  b = new b(c, f2);
  a88.memoizedState = null !== b.state && void 0 !== b.state ? b.state : null;
  b.updater = Kg;
  a88.stateNode = b;
  b._reactInternals = a88;
  d2 && (a88 = a88.stateNode, a88.__reactInternalMemoizedUnmaskedChildContext = e2, a88.__reactInternalMemoizedMaskedChildContext = f2);
  return b;
}
function Ng(a88, b, c, d2) {
  a88 = b.state;
  "function" === typeof b.componentWillReceiveProps && b.componentWillReceiveProps(c, d2);
  "function" === typeof b.UNSAFE_componentWillReceiveProps && b.UNSAFE_componentWillReceiveProps(c, d2);
  b.state !== a88 && Kg.enqueueReplaceState(b, b.state, null);
}
function Og(a88, b, c, d2) {
  var e2 = a88.stateNode;
  e2.props = c;
  e2.state = a88.memoizedState;
  e2.refs = Fg;
  xg(a88);
  var f2 = b.contextType;
  "object" === typeof f2 && null !== f2 ? e2.context = vg(f2) : (f2 = Ff(b) ? Df : M.current, e2.context = Ef(a88, f2));
  Cg(a88, c, e2, d2);
  e2.state = a88.memoizedState;
  f2 = b.getDerivedStateFromProps;
  "function" === typeof f2 && (Gg(a88, b, f2, c), e2.state = a88.memoizedState);
  "function" === typeof b.getDerivedStateFromProps || "function" === typeof e2.getSnapshotBeforeUpdate || "function" !== typeof e2.UNSAFE_componentWillMount && "function" !== typeof e2.componentWillMount || (b = e2.state, "function" === typeof e2.componentWillMount && e2.componentWillMount(), "function" === typeof e2.UNSAFE_componentWillMount && e2.UNSAFE_componentWillMount(), b !== e2.state && Kg.enqueueReplaceState(e2, e2.state, null), Cg(a88, c, e2, d2), e2.state = a88.memoizedState);
  "function" === typeof e2.componentDidMount && (a88.flags |= 4);
}
var Pg = Array.isArray;
function Qg(a88, b, c) {
  a88 = c.ref;
  if (null !== a88 && "function" !== typeof a88 && "object" !== typeof a88) {
    if (c._owner) {
      c = c._owner;
      if (c) {
        if (1 !== c.tag)
          throw Error(y$1(309));
        var d2 = c.stateNode;
      }
      if (!d2)
        throw Error(y$1(147, a88));
      var e2 = "" + a88;
      if (null !== b && null !== b.ref && "function" === typeof b.ref && b.ref._stringRef === e2)
        return b.ref;
      b = function(a92) {
        var b2 = d2.refs;
        b2 === Fg && (b2 = d2.refs = {});
        null === a92 ? delete b2[e2] : b2[e2] = a92;
      };
      b._stringRef = e2;
      return b;
    }
    if ("string" !== typeof a88)
      throw Error(y$1(284));
    if (!c._owner)
      throw Error(y$1(290, a88));
  }
  return a88;
}
function Rg(a88, b) {
  if ("textarea" !== a88.type)
    throw Error(y$1(31, "[object Object]" === Object.prototype.toString.call(b) ? "object with keys {" + Object.keys(b).join(", ") + "}" : b));
}
function Sg(a88) {
  function b(b2, c2) {
    if (a88) {
      var d3 = b2.lastEffect;
      null !== d3 ? (d3.nextEffect = c2, b2.lastEffect = c2) : b2.firstEffect = b2.lastEffect = c2;
      c2.nextEffect = null;
      c2.flags = 8;
    }
  }
  function c(c2, d3) {
    if (!a88)
      return null;
    for (; null !== d3; )
      b(c2, d3), d3 = d3.sibling;
    return null;
  }
  function d2(a92, b2) {
    for (a92 = /* @__PURE__ */ new Map(); null !== b2; )
      null !== b2.key ? a92.set(b2.key, b2) : a92.set(b2.index, b2), b2 = b2.sibling;
    return a92;
  }
  function e2(a92, b2) {
    a92 = Tg(a92, b2);
    a92.index = 0;
    a92.sibling = null;
    return a92;
  }
  function f2(b2, c2, d3) {
    b2.index = d3;
    if (!a88)
      return c2;
    d3 = b2.alternate;
    if (null !== d3)
      return d3 = d3.index, d3 < c2 ? (b2.flags = 2, c2) : d3;
    b2.flags = 2;
    return c2;
  }
  function g2(b2) {
    a88 && null === b2.alternate && (b2.flags = 2);
    return b2;
  }
  function h2(a92, b2, c2, d3) {
    if (null === b2 || 6 !== b2.tag)
      return b2 = Ug(c2, a92.mode, d3), b2.return = a92, b2;
    b2 = e2(b2, c2);
    b2.return = a92;
    return b2;
  }
  function k(a92, b2, c2, d3) {
    if (null !== b2 && b2.elementType === c2.type)
      return d3 = e2(b2, c2.props), d3.ref = Qg(a92, b2, c2), d3.return = a92, d3;
    d3 = Vg(c2.type, c2.key, c2.props, null, a92.mode, d3);
    d3.ref = Qg(a92, b2, c2);
    d3.return = a92;
    return d3;
  }
  function l2(a92, b2, c2, d3) {
    if (null === b2 || 4 !== b2.tag || b2.stateNode.containerInfo !== c2.containerInfo || b2.stateNode.implementation !== c2.implementation)
      return b2 = Wg(c2, a92.mode, d3), b2.return = a92, b2;
    b2 = e2(b2, c2.children || []);
    b2.return = a92;
    return b2;
  }
  function n2(a92, b2, c2, d3, f3) {
    if (null === b2 || 7 !== b2.tag)
      return b2 = Xg(c2, a92.mode, d3, f3), b2.return = a92, b2;
    b2 = e2(b2, c2);
    b2.return = a92;
    return b2;
  }
  function A2(a92, b2, c2) {
    if ("string" === typeof b2 || "number" === typeof b2)
      return b2 = Ug("" + b2, a92.mode, c2), b2.return = a92, b2;
    if ("object" === typeof b2 && null !== b2) {
      switch (b2.$$typeof) {
        case sa:
          return c2 = Vg(b2.type, b2.key, b2.props, null, a92.mode, c2), c2.ref = Qg(a92, null, b2), c2.return = a92, c2;
        case ta:
          return b2 = Wg(b2, a92.mode, c2), b2.return = a92, b2;
      }
      if (Pg(b2) || La(b2))
        return b2 = Xg(
          b2,
          a92.mode,
          c2,
          null
        ), b2.return = a92, b2;
      Rg(a92, b2);
    }
    return null;
  }
  function p2(a92, b2, c2, d3) {
    var e3 = null !== b2 ? b2.key : null;
    if ("string" === typeof c2 || "number" === typeof c2)
      return null !== e3 ? null : h2(a92, b2, "" + c2, d3);
    if ("object" === typeof c2 && null !== c2) {
      switch (c2.$$typeof) {
        case sa:
          return c2.key === e3 ? c2.type === ua ? n2(a92, b2, c2.props.children, d3, e3) : k(a92, b2, c2, d3) : null;
        case ta:
          return c2.key === e3 ? l2(a92, b2, c2, d3) : null;
      }
      if (Pg(c2) || La(c2))
        return null !== e3 ? null : n2(a92, b2, c2, d3, null);
      Rg(a92, c2);
    }
    return null;
  }
  function C2(a92, b2, c2, d3, e3) {
    if ("string" === typeof d3 || "number" === typeof d3)
      return a92 = a92.get(c2) || null, h2(b2, a92, "" + d3, e3);
    if ("object" === typeof d3 && null !== d3) {
      switch (d3.$$typeof) {
        case sa:
          return a92 = a92.get(null === d3.key ? c2 : d3.key) || null, d3.type === ua ? n2(b2, a92, d3.props.children, e3, d3.key) : k(b2, a92, d3, e3);
        case ta:
          return a92 = a92.get(null === d3.key ? c2 : d3.key) || null, l2(b2, a92, d3, e3);
      }
      if (Pg(d3) || La(d3))
        return a92 = a92.get(c2) || null, n2(b2, a92, d3, e3, null);
      Rg(b2, d3);
    }
    return null;
  }
  function x2(e3, g3, h3, k2) {
    for (var l3 = null, t2 = null, u2 = g3, z2 = g3 = 0, q2 = null; null !== u2 && z2 < h3.length; z2++) {
      u2.index > z2 ? (q2 = u2, u2 = null) : q2 = u2.sibling;
      var n3 = p2(e3, u2, h3[z2], k2);
      if (null === n3) {
        null === u2 && (u2 = q2);
        break;
      }
      a88 && u2 && null === n3.alternate && b(e3, u2);
      g3 = f2(n3, g3, z2);
      null === t2 ? l3 = n3 : t2.sibling = n3;
      t2 = n3;
      u2 = q2;
    }
    if (z2 === h3.length)
      return c(e3, u2), l3;
    if (null === u2) {
      for (; z2 < h3.length; z2++)
        u2 = A2(e3, h3[z2], k2), null !== u2 && (g3 = f2(u2, g3, z2), null === t2 ? l3 = u2 : t2.sibling = u2, t2 = u2);
      return l3;
    }
    for (u2 = d2(e3, u2); z2 < h3.length; z2++)
      q2 = C2(u2, e3, z2, h3[z2], k2), null !== q2 && (a88 && null !== q2.alternate && u2.delete(null === q2.key ? z2 : q2.key), g3 = f2(q2, g3, z2), null === t2 ? l3 = q2 : t2.sibling = q2, t2 = q2);
    a88 && u2.forEach(function(a92) {
      return b(e3, a92);
    });
    return l3;
  }
  function w2(e3, g3, h3, k2) {
    var l3 = La(h3);
    if ("function" !== typeof l3)
      throw Error(y$1(150));
    h3 = l3.call(h3);
    if (null == h3)
      throw Error(y$1(151));
    for (var t2 = l3 = null, u2 = g3, z2 = g3 = 0, q2 = null, n3 = h3.next(); null !== u2 && !n3.done; z2++, n3 = h3.next()) {
      u2.index > z2 ? (q2 = u2, u2 = null) : q2 = u2.sibling;
      var w3 = p2(e3, u2, n3.value, k2);
      if (null === w3) {
        null === u2 && (u2 = q2);
        break;
      }
      a88 && u2 && null === w3.alternate && b(e3, u2);
      g3 = f2(w3, g3, z2);
      null === t2 ? l3 = w3 : t2.sibling = w3;
      t2 = w3;
      u2 = q2;
    }
    if (n3.done)
      return c(e3, u2), l3;
    if (null === u2) {
      for (; !n3.done; z2++, n3 = h3.next())
        n3 = A2(e3, n3.value, k2), null !== n3 && (g3 = f2(n3, g3, z2), null === t2 ? l3 = n3 : t2.sibling = n3, t2 = n3);
      return l3;
    }
    for (u2 = d2(e3, u2); !n3.done; z2++, n3 = h3.next())
      n3 = C2(u2, e3, z2, n3.value, k2), null !== n3 && (a88 && null !== n3.alternate && u2.delete(null === n3.key ? z2 : n3.key), g3 = f2(n3, g3, z2), null === t2 ? l3 = n3 : t2.sibling = n3, t2 = n3);
    a88 && u2.forEach(function(a92) {
      return b(e3, a92);
    });
    return l3;
  }
  return function(a92, d3, f3, h3) {
    var k2 = "object" === typeof f3 && null !== f3 && f3.type === ua && null === f3.key;
    k2 && (f3 = f3.props.children);
    var l3 = "object" === typeof f3 && null !== f3;
    if (l3)
      switch (f3.$$typeof) {
        case sa:
          a: {
            l3 = f3.key;
            for (k2 = d3; null !== k2; ) {
              if (k2.key === l3) {
                switch (k2.tag) {
                  case 7:
                    if (f3.type === ua) {
                      c(a92, k2.sibling);
                      d3 = e2(k2, f3.props.children);
                      d3.return = a92;
                      a92 = d3;
                      break a;
                    }
                    break;
                  default:
                    if (k2.elementType === f3.type) {
                      c(a92, k2.sibling);
                      d3 = e2(k2, f3.props);
                      d3.ref = Qg(a92, k2, f3);
                      d3.return = a92;
                      a92 = d3;
                      break a;
                    }
                }
                c(a92, k2);
                break;
              } else
                b(a92, k2);
              k2 = k2.sibling;
            }
            f3.type === ua ? (d3 = Xg(f3.props.children, a92.mode, h3, f3.key), d3.return = a92, a92 = d3) : (h3 = Vg(f3.type, f3.key, f3.props, null, a92.mode, h3), h3.ref = Qg(a92, d3, f3), h3.return = a92, a92 = h3);
          }
          return g2(a92);
        case ta:
          a: {
            for (k2 = f3.key; null !== d3; ) {
              if (d3.key === k2)
                if (4 === d3.tag && d3.stateNode.containerInfo === f3.containerInfo && d3.stateNode.implementation === f3.implementation) {
                  c(a92, d3.sibling);
                  d3 = e2(d3, f3.children || []);
                  d3.return = a92;
                  a92 = d3;
                  break a;
                } else {
                  c(a92, d3);
                  break;
                }
              else
                b(a92, d3);
              d3 = d3.sibling;
            }
            d3 = Wg(f3, a92.mode, h3);
            d3.return = a92;
            a92 = d3;
          }
          return g2(a92);
      }
    if ("string" === typeof f3 || "number" === typeof f3)
      return f3 = "" + f3, null !== d3 && 6 === d3.tag ? (c(a92, d3.sibling), d3 = e2(d3, f3), d3.return = a92, a92 = d3) : (c(a92, d3), d3 = Ug(f3, a92.mode, h3), d3.return = a92, a92 = d3), g2(a92);
    if (Pg(f3))
      return x2(a92, d3, f3, h3);
    if (La(f3))
      return w2(a92, d3, f3, h3);
    l3 && Rg(a92, f3);
    if ("undefined" === typeof f3 && !k2)
      switch (a92.tag) {
        case 1:
        case 22:
        case 0:
        case 11:
        case 15:
          throw Error(y$1(152, Ra(a92.type) || "Component"));
      }
    return c(a92, d3);
  };
}
var Yg = Sg(true), Zg = Sg(false), $g = {}, ah = Bf($g), bh = Bf($g), ch = Bf($g);
function dh(a88) {
  if (a88 === $g)
    throw Error(y$1(174));
  return a88;
}
function eh(a88, b) {
  I(ch, b);
  I(bh, a88);
  I(ah, $g);
  a88 = b.nodeType;
  switch (a88) {
    case 9:
    case 11:
      b = (b = b.documentElement) ? b.namespaceURI : mb(null, "");
      break;
    default:
      a88 = 8 === a88 ? b.parentNode : b, b = a88.namespaceURI || null, a88 = a88.tagName, b = mb(b, a88);
  }
  H(ah);
  I(ah, b);
}
function fh() {
  H(ah);
  H(bh);
  H(ch);
}
function gh(a88) {
  dh(ch.current);
  var b = dh(ah.current);
  var c = mb(b, a88.type);
  b !== c && (I(bh, a88), I(ah, c));
}
function hh(a88) {
  bh.current === a88 && (H(ah), H(bh));
}
var P = Bf(0);
function ih(a88) {
  for (var b = a88; null !== b; ) {
    if (13 === b.tag) {
      var c = b.memoizedState;
      if (null !== c && (c = c.dehydrated, null === c || "$?" === c.data || "$!" === c.data))
        return b;
    } else if (19 === b.tag && void 0 !== b.memoizedProps.revealOrder) {
      if (0 !== (b.flags & 64))
        return b;
    } else if (null !== b.child) {
      b.child.return = b;
      b = b.child;
      continue;
    }
    if (b === a88)
      break;
    for (; null === b.sibling; ) {
      if (null === b.return || b.return === a88)
        return null;
      b = b.return;
    }
    b.sibling.return = b.return;
    b = b.sibling;
  }
  return null;
}
var jh = null, kh = null, lh = false;
function mh(a88, b) {
  var c = nh(5, null, null, 0);
  c.elementType = "DELETED";
  c.type = "DELETED";
  c.stateNode = b;
  c.return = a88;
  c.flags = 8;
  null !== a88.lastEffect ? (a88.lastEffect.nextEffect = c, a88.lastEffect = c) : a88.firstEffect = a88.lastEffect = c;
}
function oh(a88, b) {
  switch (a88.tag) {
    case 5:
      var c = a88.type;
      b = 1 !== b.nodeType || c.toLowerCase() !== b.nodeName.toLowerCase() ? null : b;
      return null !== b ? (a88.stateNode = b, true) : false;
    case 6:
      return b = "" === a88.pendingProps || 3 !== b.nodeType ? null : b, null !== b ? (a88.stateNode = b, true) : false;
    case 13:
      return false;
    default:
      return false;
  }
}
function ph(a88) {
  if (lh) {
    var b = kh;
    if (b) {
      var c = b;
      if (!oh(a88, b)) {
        b = rf(c.nextSibling);
        if (!b || !oh(a88, b)) {
          a88.flags = a88.flags & -1025 | 2;
          lh = false;
          jh = a88;
          return;
        }
        mh(jh, c);
      }
      jh = a88;
      kh = rf(b.firstChild);
    } else
      a88.flags = a88.flags & -1025 | 2, lh = false, jh = a88;
  }
}
function qh(a88) {
  for (a88 = a88.return; null !== a88 && 5 !== a88.tag && 3 !== a88.tag && 13 !== a88.tag; )
    a88 = a88.return;
  jh = a88;
}
function rh(a88) {
  if (a88 !== jh)
    return false;
  if (!lh)
    return qh(a88), lh = true, false;
  var b = a88.type;
  if (5 !== a88.tag || "head" !== b && "body" !== b && !nf(b, a88.memoizedProps))
    for (b = kh; b; )
      mh(a88, b), b = rf(b.nextSibling);
  qh(a88);
  if (13 === a88.tag) {
    a88 = a88.memoizedState;
    a88 = null !== a88 ? a88.dehydrated : null;
    if (!a88)
      throw Error(y$1(317));
    a: {
      a88 = a88.nextSibling;
      for (b = 0; a88; ) {
        if (8 === a88.nodeType) {
          var c = a88.data;
          if ("/$" === c) {
            if (0 === b) {
              kh = rf(a88.nextSibling);
              break a;
            }
            b--;
          } else
            "$" !== c && "$!" !== c && "$?" !== c || b++;
        }
        a88 = a88.nextSibling;
      }
      kh = null;
    }
  } else
    kh = jh ? rf(a88.stateNode.nextSibling) : null;
  return true;
}
function sh() {
  kh = jh = null;
  lh = false;
}
var th = [];
function uh() {
  for (var a88 = 0; a88 < th.length; a88++)
    th[a88]._workInProgressVersionPrimary = null;
  th.length = 0;
}
var vh = ra.ReactCurrentDispatcher, wh = ra.ReactCurrentBatchConfig, xh = 0, R$1 = null, S = null, T = null, yh = false, zh = false;
function Ah() {
  throw Error(y$1(321));
}
function Bh(a88, b) {
  if (null === b)
    return false;
  for (var c = 0; c < b.length && c < a88.length; c++)
    if (!He(a88[c], b[c]))
      return false;
  return true;
}
function Ch(a88, b, c, d2, e2, f2) {
  xh = f2;
  R$1 = b;
  b.memoizedState = null;
  b.updateQueue = null;
  b.lanes = 0;
  vh.current = null === a88 || null === a88.memoizedState ? Dh : Eh;
  a88 = c(d2, e2);
  if (zh) {
    f2 = 0;
    do {
      zh = false;
      if (!(25 > f2))
        throw Error(y$1(301));
      f2 += 1;
      T = S = null;
      b.updateQueue = null;
      vh.current = Fh;
      a88 = c(d2, e2);
    } while (zh);
  }
  vh.current = Gh;
  b = null !== S && null !== S.next;
  xh = 0;
  T = S = R$1 = null;
  yh = false;
  if (b)
    throw Error(y$1(300));
  return a88;
}
function Hh() {
  var a88 = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
  null === T ? R$1.memoizedState = T = a88 : T = T.next = a88;
  return T;
}
function Ih() {
  if (null === S) {
    var a88 = R$1.alternate;
    a88 = null !== a88 ? a88.memoizedState : null;
  } else
    a88 = S.next;
  var b = null === T ? R$1.memoizedState : T.next;
  if (null !== b)
    T = b, S = a88;
  else {
    if (null === a88)
      throw Error(y$1(310));
    S = a88;
    a88 = { memoizedState: S.memoizedState, baseState: S.baseState, baseQueue: S.baseQueue, queue: S.queue, next: null };
    null === T ? R$1.memoizedState = T = a88 : T = T.next = a88;
  }
  return T;
}
function Jh(a88, b) {
  return "function" === typeof b ? b(a88) : b;
}
function Kh(a88) {
  var b = Ih(), c = b.queue;
  if (null === c)
    throw Error(y$1(311));
  c.lastRenderedReducer = a88;
  var d2 = S, e2 = d2.baseQueue, f2 = c.pending;
  if (null !== f2) {
    if (null !== e2) {
      var g2 = e2.next;
      e2.next = f2.next;
      f2.next = g2;
    }
    d2.baseQueue = e2 = f2;
    c.pending = null;
  }
  if (null !== e2) {
    e2 = e2.next;
    d2 = d2.baseState;
    var h2 = g2 = f2 = null, k = e2;
    do {
      var l2 = k.lane;
      if ((xh & l2) === l2)
        null !== h2 && (h2 = h2.next = { lane: 0, action: k.action, eagerReducer: k.eagerReducer, eagerState: k.eagerState, next: null }), d2 = k.eagerReducer === a88 ? k.eagerState : a88(d2, k.action);
      else {
        var n2 = {
          lane: l2,
          action: k.action,
          eagerReducer: k.eagerReducer,
          eagerState: k.eagerState,
          next: null
        };
        null === h2 ? (g2 = h2 = n2, f2 = d2) : h2 = h2.next = n2;
        R$1.lanes |= l2;
        Dg |= l2;
      }
      k = k.next;
    } while (null !== k && k !== e2);
    null === h2 ? f2 = d2 : h2.next = g2;
    He(d2, b.memoizedState) || (ug = true);
    b.memoizedState = d2;
    b.baseState = f2;
    b.baseQueue = h2;
    c.lastRenderedState = d2;
  }
  return [b.memoizedState, c.dispatch];
}
function Lh(a88) {
  var b = Ih(), c = b.queue;
  if (null === c)
    throw Error(y$1(311));
  c.lastRenderedReducer = a88;
  var d2 = c.dispatch, e2 = c.pending, f2 = b.memoizedState;
  if (null !== e2) {
    c.pending = null;
    var g2 = e2 = e2.next;
    do
      f2 = a88(f2, g2.action), g2 = g2.next;
    while (g2 !== e2);
    He(f2, b.memoizedState) || (ug = true);
    b.memoizedState = f2;
    null === b.baseQueue && (b.baseState = f2);
    c.lastRenderedState = f2;
  }
  return [f2, d2];
}
function Mh(a88, b, c) {
  var d2 = b._getVersion;
  d2 = d2(b._source);
  var e2 = b._workInProgressVersionPrimary;
  if (null !== e2)
    a88 = e2 === d2;
  else if (a88 = a88.mutableReadLanes, a88 = (xh & a88) === a88)
    b._workInProgressVersionPrimary = d2, th.push(b);
  if (a88)
    return c(b._source);
  th.push(b);
  throw Error(y$1(350));
}
function Nh(a88, b, c, d2) {
  var e2 = U;
  if (null === e2)
    throw Error(y$1(349));
  var f2 = b._getVersion, g2 = f2(b._source), h2 = vh.current, k = h2.useState(function() {
    return Mh(e2, b, c);
  }), l2 = k[1], n2 = k[0];
  k = T;
  var A2 = a88.memoizedState, p2 = A2.refs, C2 = p2.getSnapshot, x2 = A2.source;
  A2 = A2.subscribe;
  var w2 = R$1;
  a88.memoizedState = { refs: p2, source: b, subscribe: d2 };
  h2.useEffect(function() {
    p2.getSnapshot = c;
    p2.setSnapshot = l2;
    var a92 = f2(b._source);
    if (!He(g2, a92)) {
      a92 = c(b._source);
      He(n2, a92) || (l2(a92), a92 = Ig(w2), e2.mutableReadLanes |= a92 & e2.pendingLanes);
      a92 = e2.mutableReadLanes;
      e2.entangledLanes |= a92;
      for (var d3 = e2.entanglements, h3 = a92; 0 < h3; ) {
        var k2 = 31 - Vc(h3), v2 = 1 << k2;
        d3[k2] |= a92;
        h3 &= ~v2;
      }
    }
  }, [c, b, d2]);
  h2.useEffect(function() {
    return d2(b._source, function() {
      var a92 = p2.getSnapshot, c2 = p2.setSnapshot;
      try {
        c2(a92(b._source));
        var d3 = Ig(w2);
        e2.mutableReadLanes |= d3 & e2.pendingLanes;
      } catch (q2) {
        c2(function() {
          throw q2;
        });
      }
    });
  }, [b, d2]);
  He(C2, c) && He(x2, b) && He(A2, d2) || (a88 = { pending: null, dispatch: null, lastRenderedReducer: Jh, lastRenderedState: n2 }, a88.dispatch = l2 = Oh.bind(null, R$1, a88), k.queue = a88, k.baseQueue = null, n2 = Mh(e2, b, c), k.memoizedState = k.baseState = n2);
  return n2;
}
function Ph(a88, b, c) {
  var d2 = Ih();
  return Nh(d2, a88, b, c);
}
function Qh(a88) {
  var b = Hh();
  "function" === typeof a88 && (a88 = a88());
  b.memoizedState = b.baseState = a88;
  a88 = b.queue = { pending: null, dispatch: null, lastRenderedReducer: Jh, lastRenderedState: a88 };
  a88 = a88.dispatch = Oh.bind(null, R$1, a88);
  return [b.memoizedState, a88];
}
function Rh(a88, b, c, d2) {
  a88 = { tag: a88, create: b, destroy: c, deps: d2, next: null };
  b = R$1.updateQueue;
  null === b ? (b = { lastEffect: null }, R$1.updateQueue = b, b.lastEffect = a88.next = a88) : (c = b.lastEffect, null === c ? b.lastEffect = a88.next = a88 : (d2 = c.next, c.next = a88, a88.next = d2, b.lastEffect = a88));
  return a88;
}
function Sh(a88) {
  var b = Hh();
  a88 = { current: a88 };
  return b.memoizedState = a88;
}
function Th() {
  return Ih().memoizedState;
}
function Uh(a88, b, c, d2) {
  var e2 = Hh();
  R$1.flags |= a88;
  e2.memoizedState = Rh(1 | b, c, void 0, void 0 === d2 ? null : d2);
}
function Vh(a88, b, c, d2) {
  var e2 = Ih();
  d2 = void 0 === d2 ? null : d2;
  var f2 = void 0;
  if (null !== S) {
    var g2 = S.memoizedState;
    f2 = g2.destroy;
    if (null !== d2 && Bh(d2, g2.deps)) {
      Rh(b, c, f2, d2);
      return;
    }
  }
  R$1.flags |= a88;
  e2.memoizedState = Rh(1 | b, c, f2, d2);
}
function Wh(a88, b) {
  return Uh(516, 4, a88, b);
}
function Xh(a88, b) {
  return Vh(516, 4, a88, b);
}
function Yh(a88, b) {
  return Vh(4, 2, a88, b);
}
function Zh(a88, b) {
  if ("function" === typeof b)
    return a88 = a88(), b(a88), function() {
      b(null);
    };
  if (null !== b && void 0 !== b)
    return a88 = a88(), b.current = a88, function() {
      b.current = null;
    };
}
function $h(a88, b, c) {
  c = null !== c && void 0 !== c ? c.concat([a88]) : null;
  return Vh(4, 2, Zh.bind(null, b, a88), c);
}
function ai() {
}
function bi(a88, b) {
  var c = Ih();
  b = void 0 === b ? null : b;
  var d2 = c.memoizedState;
  if (null !== d2 && null !== b && Bh(b, d2[1]))
    return d2[0];
  c.memoizedState = [a88, b];
  return a88;
}
function ci(a88, b) {
  var c = Ih();
  b = void 0 === b ? null : b;
  var d2 = c.memoizedState;
  if (null !== d2 && null !== b && Bh(b, d2[1]))
    return d2[0];
  a88 = a88();
  c.memoizedState = [a88, b];
  return a88;
}
function di(a88, b) {
  var c = eg();
  gg(98 > c ? 98 : c, function() {
    a88(true);
  });
  gg(97 < c ? 97 : c, function() {
    var c2 = wh.transition;
    wh.transition = 1;
    try {
      a88(false), b();
    } finally {
      wh.transition = c2;
    }
  });
}
function Oh(a88, b, c) {
  var d2 = Hg(), e2 = Ig(a88), f2 = { lane: e2, action: c, eagerReducer: null, eagerState: null, next: null }, g2 = b.pending;
  null === g2 ? f2.next = f2 : (f2.next = g2.next, g2.next = f2);
  b.pending = f2;
  g2 = a88.alternate;
  if (a88 === R$1 || null !== g2 && g2 === R$1)
    zh = yh = true;
  else {
    if (0 === a88.lanes && (null === g2 || 0 === g2.lanes) && (g2 = b.lastRenderedReducer, null !== g2))
      try {
        var h2 = b.lastRenderedState, k = g2(h2, c);
        f2.eagerReducer = g2;
        f2.eagerState = k;
        if (He(k, h2))
          return;
      } catch (l2) {
      } finally {
      }
    Jg(a88, e2, d2);
  }
}
var Gh = { readContext: vg, useCallback: Ah, useContext: Ah, useEffect: Ah, useImperativeHandle: Ah, useLayoutEffect: Ah, useMemo: Ah, useReducer: Ah, useRef: Ah, useState: Ah, useDebugValue: Ah, useDeferredValue: Ah, useTransition: Ah, useMutableSource: Ah, useOpaqueIdentifier: Ah, unstable_isNewReconciler: false }, Dh = { readContext: vg, useCallback: function(a88, b) {
  Hh().memoizedState = [a88, void 0 === b ? null : b];
  return a88;
}, useContext: vg, useEffect: Wh, useImperativeHandle: function(a88, b, c) {
  c = null !== c && void 0 !== c ? c.concat([a88]) : null;
  return Uh(4, 2, Zh.bind(
    null,
    b,
    a88
  ), c);
}, useLayoutEffect: function(a88, b) {
  return Uh(4, 2, a88, b);
}, useMemo: function(a88, b) {
  var c = Hh();
  b = void 0 === b ? null : b;
  a88 = a88();
  c.memoizedState = [a88, b];
  return a88;
}, useReducer: function(a88, b, c) {
  var d2 = Hh();
  b = void 0 !== c ? c(b) : b;
  d2.memoizedState = d2.baseState = b;
  a88 = d2.queue = { pending: null, dispatch: null, lastRenderedReducer: a88, lastRenderedState: b };
  a88 = a88.dispatch = Oh.bind(null, R$1, a88);
  return [d2.memoizedState, a88];
}, useRef: Sh, useState: Qh, useDebugValue: ai, useDeferredValue: function(a88) {
  var b = Qh(a88), c = b[0], d2 = b[1];
  Wh(function() {
    var b2 = wh.transition;
    wh.transition = 1;
    try {
      d2(a88);
    } finally {
      wh.transition = b2;
    }
  }, [a88]);
  return c;
}, useTransition: function() {
  var a88 = Qh(false), b = a88[0];
  a88 = di.bind(null, a88[1]);
  Sh(a88);
  return [a88, b];
}, useMutableSource: function(a88, b, c) {
  var d2 = Hh();
  d2.memoizedState = { refs: { getSnapshot: b, setSnapshot: null }, source: a88, subscribe: c };
  return Nh(d2, a88, b, c);
}, useOpaqueIdentifier: function() {
  if (lh) {
    var a88 = false, b = uf(function() {
      a88 || (a88 = true, c("r:" + (tf++).toString(36)));
      throw Error(y$1(355));
    }), c = Qh(b)[1];
    0 === (R$1.mode & 2) && (R$1.flags |= 516, Rh(
      5,
      function() {
        c("r:" + (tf++).toString(36));
      },
      void 0,
      null
    ));
    return b;
  }
  b = "r:" + (tf++).toString(36);
  Qh(b);
  return b;
}, unstable_isNewReconciler: false }, Eh = { readContext: vg, useCallback: bi, useContext: vg, useEffect: Xh, useImperativeHandle: $h, useLayoutEffect: Yh, useMemo: ci, useReducer: Kh, useRef: Th, useState: function() {
  return Kh(Jh);
}, useDebugValue: ai, useDeferredValue: function(a88) {
  var b = Kh(Jh), c = b[0], d2 = b[1];
  Xh(function() {
    var b2 = wh.transition;
    wh.transition = 1;
    try {
      d2(a88);
    } finally {
      wh.transition = b2;
    }
  }, [a88]);
  return c;
}, useTransition: function() {
  var a88 = Kh(Jh)[0];
  return [
    Th().current,
    a88
  ];
}, useMutableSource: Ph, useOpaqueIdentifier: function() {
  return Kh(Jh)[0];
}, unstable_isNewReconciler: false }, Fh = { readContext: vg, useCallback: bi, useContext: vg, useEffect: Xh, useImperativeHandle: $h, useLayoutEffect: Yh, useMemo: ci, useReducer: Lh, useRef: Th, useState: function() {
  return Lh(Jh);
}, useDebugValue: ai, useDeferredValue: function(a88) {
  var b = Lh(Jh), c = b[0], d2 = b[1];
  Xh(function() {
    var b2 = wh.transition;
    wh.transition = 1;
    try {
      d2(a88);
    } finally {
      wh.transition = b2;
    }
  }, [a88]);
  return c;
}, useTransition: function() {
  var a88 = Lh(Jh)[0];
  return [
    Th().current,
    a88
  ];
}, useMutableSource: Ph, useOpaqueIdentifier: function() {
  return Lh(Jh)[0];
}, unstable_isNewReconciler: false }, ei = ra.ReactCurrentOwner, ug = false;
function fi(a88, b, c, d2) {
  b.child = null === a88 ? Zg(b, null, c, d2) : Yg(b, a88.child, c, d2);
}
function gi(a88, b, c, d2, e2) {
  c = c.render;
  var f2 = b.ref;
  tg(b, e2);
  d2 = Ch(a88, b, c, d2, f2, e2);
  if (null !== a88 && !ug)
    return b.updateQueue = a88.updateQueue, b.flags &= -517, a88.lanes &= ~e2, hi(a88, b, e2);
  b.flags |= 1;
  fi(a88, b, d2, e2);
  return b.child;
}
function ii(a88, b, c, d2, e2, f2) {
  if (null === a88) {
    var g2 = c.type;
    if ("function" === typeof g2 && !ji(g2) && void 0 === g2.defaultProps && null === c.compare && void 0 === c.defaultProps)
      return b.tag = 15, b.type = g2, ki(a88, b, g2, d2, e2, f2);
    a88 = Vg(c.type, null, d2, b, b.mode, f2);
    a88.ref = b.ref;
    a88.return = b;
    return b.child = a88;
  }
  g2 = a88.child;
  if (0 === (e2 & f2) && (e2 = g2.memoizedProps, c = c.compare, c = null !== c ? c : Je, c(e2, d2) && a88.ref === b.ref))
    return hi(a88, b, f2);
  b.flags |= 1;
  a88 = Tg(g2, d2);
  a88.ref = b.ref;
  a88.return = b;
  return b.child = a88;
}
function ki(a88, b, c, d2, e2, f2) {
  if (null !== a88 && Je(a88.memoizedProps, d2) && a88.ref === b.ref)
    if (ug = false, 0 !== (f2 & e2))
      0 !== (a88.flags & 16384) && (ug = true);
    else
      return b.lanes = a88.lanes, hi(a88, b, f2);
  return li(a88, b, c, d2, f2);
}
function mi(a88, b, c) {
  var d2 = b.pendingProps, e2 = d2.children, f2 = null !== a88 ? a88.memoizedState : null;
  if ("hidden" === d2.mode || "unstable-defer-without-hiding" === d2.mode)
    if (0 === (b.mode & 4))
      b.memoizedState = { baseLanes: 0 }, ni(b, c);
    else if (0 !== (c & 1073741824))
      b.memoizedState = { baseLanes: 0 }, ni(b, null !== f2 ? f2.baseLanes : c);
    else
      return a88 = null !== f2 ? f2.baseLanes | c : c, b.lanes = b.childLanes = 1073741824, b.memoizedState = { baseLanes: a88 }, ni(b, a88), null;
  else
    null !== f2 ? (d2 = f2.baseLanes | c, b.memoizedState = null) : d2 = c, ni(b, d2);
  fi(a88, b, e2, c);
  return b.child;
}
function oi(a88, b) {
  var c = b.ref;
  if (null === a88 && null !== c || null !== a88 && a88.ref !== c)
    b.flags |= 128;
}
function li(a88, b, c, d2, e2) {
  var f2 = Ff(c) ? Df : M.current;
  f2 = Ef(b, f2);
  tg(b, e2);
  c = Ch(a88, b, c, d2, f2, e2);
  if (null !== a88 && !ug)
    return b.updateQueue = a88.updateQueue, b.flags &= -517, a88.lanes &= ~e2, hi(a88, b, e2);
  b.flags |= 1;
  fi(a88, b, c, e2);
  return b.child;
}
function pi(a88, b, c, d2, e2) {
  if (Ff(c)) {
    var f2 = true;
    Jf(b);
  } else
    f2 = false;
  tg(b, e2);
  if (null === b.stateNode)
    null !== a88 && (a88.alternate = null, b.alternate = null, b.flags |= 2), Mg(b, c, d2), Og(b, c, d2, e2), d2 = true;
  else if (null === a88) {
    var g2 = b.stateNode, h2 = b.memoizedProps;
    g2.props = h2;
    var k = g2.context, l2 = c.contextType;
    "object" === typeof l2 && null !== l2 ? l2 = vg(l2) : (l2 = Ff(c) ? Df : M.current, l2 = Ef(b, l2));
    var n2 = c.getDerivedStateFromProps, A2 = "function" === typeof n2 || "function" === typeof g2.getSnapshotBeforeUpdate;
    A2 || "function" !== typeof g2.UNSAFE_componentWillReceiveProps && "function" !== typeof g2.componentWillReceiveProps || (h2 !== d2 || k !== l2) && Ng(b, g2, d2, l2);
    wg = false;
    var p2 = b.memoizedState;
    g2.state = p2;
    Cg(b, d2, g2, e2);
    k = b.memoizedState;
    h2 !== d2 || p2 !== k || N.current || wg ? ("function" === typeof n2 && (Gg(b, c, n2, d2), k = b.memoizedState), (h2 = wg || Lg(b, c, h2, d2, p2, k, l2)) ? (A2 || "function" !== typeof g2.UNSAFE_componentWillMount && "function" !== typeof g2.componentWillMount || ("function" === typeof g2.componentWillMount && g2.componentWillMount(), "function" === typeof g2.UNSAFE_componentWillMount && g2.UNSAFE_componentWillMount()), "function" === typeof g2.componentDidMount && (b.flags |= 4)) : ("function" === typeof g2.componentDidMount && (b.flags |= 4), b.memoizedProps = d2, b.memoizedState = k), g2.props = d2, g2.state = k, g2.context = l2, d2 = h2) : ("function" === typeof g2.componentDidMount && (b.flags |= 4), d2 = false);
  } else {
    g2 = b.stateNode;
    yg(a88, b);
    h2 = b.memoizedProps;
    l2 = b.type === b.elementType ? h2 : lg(b.type, h2);
    g2.props = l2;
    A2 = b.pendingProps;
    p2 = g2.context;
    k = c.contextType;
    "object" === typeof k && null !== k ? k = vg(k) : (k = Ff(c) ? Df : M.current, k = Ef(b, k));
    var C2 = c.getDerivedStateFromProps;
    (n2 = "function" === typeof C2 || "function" === typeof g2.getSnapshotBeforeUpdate) || "function" !== typeof g2.UNSAFE_componentWillReceiveProps && "function" !== typeof g2.componentWillReceiveProps || (h2 !== A2 || p2 !== k) && Ng(b, g2, d2, k);
    wg = false;
    p2 = b.memoizedState;
    g2.state = p2;
    Cg(b, d2, g2, e2);
    var x2 = b.memoizedState;
    h2 !== A2 || p2 !== x2 || N.current || wg ? ("function" === typeof C2 && (Gg(b, c, C2, d2), x2 = b.memoizedState), (l2 = wg || Lg(b, c, l2, d2, p2, x2, k)) ? (n2 || "function" !== typeof g2.UNSAFE_componentWillUpdate && "function" !== typeof g2.componentWillUpdate || ("function" === typeof g2.componentWillUpdate && g2.componentWillUpdate(
      d2,
      x2,
      k
    ), "function" === typeof g2.UNSAFE_componentWillUpdate && g2.UNSAFE_componentWillUpdate(d2, x2, k)), "function" === typeof g2.componentDidUpdate && (b.flags |= 4), "function" === typeof g2.getSnapshotBeforeUpdate && (b.flags |= 256)) : ("function" !== typeof g2.componentDidUpdate || h2 === a88.memoizedProps && p2 === a88.memoizedState || (b.flags |= 4), "function" !== typeof g2.getSnapshotBeforeUpdate || h2 === a88.memoizedProps && p2 === a88.memoizedState || (b.flags |= 256), b.memoizedProps = d2, b.memoizedState = x2), g2.props = d2, g2.state = x2, g2.context = k, d2 = l2) : ("function" !== typeof g2.componentDidUpdate || h2 === a88.memoizedProps && p2 === a88.memoizedState || (b.flags |= 4), "function" !== typeof g2.getSnapshotBeforeUpdate || h2 === a88.memoizedProps && p2 === a88.memoizedState || (b.flags |= 256), d2 = false);
  }
  return qi(a88, b, c, d2, f2, e2);
}
function qi(a88, b, c, d2, e2, f2) {
  oi(a88, b);
  var g2 = 0 !== (b.flags & 64);
  if (!d2 && !g2)
    return e2 && Kf(b, c, false), hi(a88, b, f2);
  d2 = b.stateNode;
  ei.current = b;
  var h2 = g2 && "function" !== typeof c.getDerivedStateFromError ? null : d2.render();
  b.flags |= 1;
  null !== a88 && g2 ? (b.child = Yg(b, a88.child, null, f2), b.child = Yg(b, null, h2, f2)) : fi(a88, b, h2, f2);
  b.memoizedState = d2.state;
  e2 && Kf(b, c, true);
  return b.child;
}
function ri(a88) {
  var b = a88.stateNode;
  b.pendingContext ? Hf(a88, b.pendingContext, b.pendingContext !== b.context) : b.context && Hf(a88, b.context, false);
  eh(a88, b.containerInfo);
}
var si = { dehydrated: null, retryLane: 0 };
function ti(a88, b, c) {
  var d2 = b.pendingProps, e2 = P.current, f2 = false, g2;
  (g2 = 0 !== (b.flags & 64)) || (g2 = null !== a88 && null === a88.memoizedState ? false : 0 !== (e2 & 2));
  g2 ? (f2 = true, b.flags &= -65) : null !== a88 && null === a88.memoizedState || void 0 === d2.fallback || true === d2.unstable_avoidThisFallback || (e2 |= 1);
  I(P, e2 & 1);
  if (null === a88) {
    void 0 !== d2.fallback && ph(b);
    a88 = d2.children;
    e2 = d2.fallback;
    if (f2)
      return a88 = ui(b, a88, e2, c), b.child.memoizedState = { baseLanes: c }, b.memoizedState = si, a88;
    if ("number" === typeof d2.unstable_expectedLoadTime)
      return a88 = ui(b, a88, e2, c), b.child.memoizedState = { baseLanes: c }, b.memoizedState = si, b.lanes = 33554432, a88;
    c = vi({ mode: "visible", children: a88 }, b.mode, c, null);
    c.return = b;
    return b.child = c;
  }
  if (null !== a88.memoizedState) {
    if (f2)
      return d2 = wi(a88, b, d2.children, d2.fallback, c), f2 = b.child, e2 = a88.child.memoizedState, f2.memoizedState = null === e2 ? { baseLanes: c } : { baseLanes: e2.baseLanes | c }, f2.childLanes = a88.childLanes & ~c, b.memoizedState = si, d2;
    c = xi(a88, b, d2.children, c);
    b.memoizedState = null;
    return c;
  }
  if (f2)
    return d2 = wi(a88, b, d2.children, d2.fallback, c), f2 = b.child, e2 = a88.child.memoizedState, f2.memoizedState = null === e2 ? { baseLanes: c } : { baseLanes: e2.baseLanes | c }, f2.childLanes = a88.childLanes & ~c, b.memoizedState = si, d2;
  c = xi(a88, b, d2.children, c);
  b.memoizedState = null;
  return c;
}
function ui(a88, b, c, d2) {
  var e2 = a88.mode, f2 = a88.child;
  b = { mode: "hidden", children: b };
  0 === (e2 & 2) && null !== f2 ? (f2.childLanes = 0, f2.pendingProps = b) : f2 = vi(b, e2, 0, null);
  c = Xg(c, e2, d2, null);
  f2.return = a88;
  c.return = a88;
  f2.sibling = c;
  a88.child = f2;
  return c;
}
function xi(a88, b, c, d2) {
  var e2 = a88.child;
  a88 = e2.sibling;
  c = Tg(e2, { mode: "visible", children: c });
  0 === (b.mode & 2) && (c.lanes = d2);
  c.return = b;
  c.sibling = null;
  null !== a88 && (a88.nextEffect = null, a88.flags = 8, b.firstEffect = b.lastEffect = a88);
  return b.child = c;
}
function wi(a88, b, c, d2, e2) {
  var f2 = b.mode, g2 = a88.child;
  a88 = g2.sibling;
  var h2 = { mode: "hidden", children: c };
  0 === (f2 & 2) && b.child !== g2 ? (c = b.child, c.childLanes = 0, c.pendingProps = h2, g2 = c.lastEffect, null !== g2 ? (b.firstEffect = c.firstEffect, b.lastEffect = g2, g2.nextEffect = null) : b.firstEffect = b.lastEffect = null) : c = Tg(g2, h2);
  null !== a88 ? d2 = Tg(a88, d2) : (d2 = Xg(d2, f2, e2, null), d2.flags |= 2);
  d2.return = b;
  c.return = b;
  c.sibling = d2;
  b.child = c;
  return d2;
}
function yi(a88, b) {
  a88.lanes |= b;
  var c = a88.alternate;
  null !== c && (c.lanes |= b);
  sg(a88.return, b);
}
function zi(a88, b, c, d2, e2, f2) {
  var g2 = a88.memoizedState;
  null === g2 ? a88.memoizedState = { isBackwards: b, rendering: null, renderingStartTime: 0, last: d2, tail: c, tailMode: e2, lastEffect: f2 } : (g2.isBackwards = b, g2.rendering = null, g2.renderingStartTime = 0, g2.last = d2, g2.tail = c, g2.tailMode = e2, g2.lastEffect = f2);
}
function Ai(a88, b, c) {
  var d2 = b.pendingProps, e2 = d2.revealOrder, f2 = d2.tail;
  fi(a88, b, d2.children, c);
  d2 = P.current;
  if (0 !== (d2 & 2))
    d2 = d2 & 1 | 2, b.flags |= 64;
  else {
    if (null !== a88 && 0 !== (a88.flags & 64))
      a:
        for (a88 = b.child; null !== a88; ) {
          if (13 === a88.tag)
            null !== a88.memoizedState && yi(a88, c);
          else if (19 === a88.tag)
            yi(a88, c);
          else if (null !== a88.child) {
            a88.child.return = a88;
            a88 = a88.child;
            continue;
          }
          if (a88 === b)
            break a;
          for (; null === a88.sibling; ) {
            if (null === a88.return || a88.return === b)
              break a;
            a88 = a88.return;
          }
          a88.sibling.return = a88.return;
          a88 = a88.sibling;
        }
    d2 &= 1;
  }
  I(P, d2);
  if (0 === (b.mode & 2))
    b.memoizedState = null;
  else
    switch (e2) {
      case "forwards":
        c = b.child;
        for (e2 = null; null !== c; )
          a88 = c.alternate, null !== a88 && null === ih(a88) && (e2 = c), c = c.sibling;
        c = e2;
        null === c ? (e2 = b.child, b.child = null) : (e2 = c.sibling, c.sibling = null);
        zi(b, false, e2, c, f2, b.lastEffect);
        break;
      case "backwards":
        c = null;
        e2 = b.child;
        for (b.child = null; null !== e2; ) {
          a88 = e2.alternate;
          if (null !== a88 && null === ih(a88)) {
            b.child = e2;
            break;
          }
          a88 = e2.sibling;
          e2.sibling = c;
          c = e2;
          e2 = a88;
        }
        zi(b, true, c, null, f2, b.lastEffect);
        break;
      case "together":
        zi(b, false, null, null, void 0, b.lastEffect);
        break;
      default:
        b.memoizedState = null;
    }
  return b.child;
}
function hi(a88, b, c) {
  null !== a88 && (b.dependencies = a88.dependencies);
  Dg |= b.lanes;
  if (0 !== (c & b.childLanes)) {
    if (null !== a88 && b.child !== a88.child)
      throw Error(y$1(153));
    if (null !== b.child) {
      a88 = b.child;
      c = Tg(a88, a88.pendingProps);
      b.child = c;
      for (c.return = b; null !== a88.sibling; )
        a88 = a88.sibling, c = c.sibling = Tg(a88, a88.pendingProps), c.return = b;
      c.sibling = null;
    }
    return b.child;
  }
  return null;
}
var Bi, Ci, Di, Ei;
Bi = function(a88, b) {
  for (var c = b.child; null !== c; ) {
    if (5 === c.tag || 6 === c.tag)
      a88.appendChild(c.stateNode);
    else if (4 !== c.tag && null !== c.child) {
      c.child.return = c;
      c = c.child;
      continue;
    }
    if (c === b)
      break;
    for (; null === c.sibling; ) {
      if (null === c.return || c.return === b)
        return;
      c = c.return;
    }
    c.sibling.return = c.return;
    c = c.sibling;
  }
};
Ci = function() {
};
Di = function(a88, b, c, d2) {
  var e2 = a88.memoizedProps;
  if (e2 !== d2) {
    a88 = b.stateNode;
    dh(ah.current);
    var f2 = null;
    switch (c) {
      case "input":
        e2 = Ya(a88, e2);
        d2 = Ya(a88, d2);
        f2 = [];
        break;
      case "option":
        e2 = eb(a88, e2);
        d2 = eb(a88, d2);
        f2 = [];
        break;
      case "select":
        e2 = m$2({}, e2, { value: void 0 });
        d2 = m$2({}, d2, { value: void 0 });
        f2 = [];
        break;
      case "textarea":
        e2 = gb(a88, e2);
        d2 = gb(a88, d2);
        f2 = [];
        break;
      default:
        "function" !== typeof e2.onClick && "function" === typeof d2.onClick && (a88.onclick = jf);
    }
    vb(c, d2);
    var g2;
    c = null;
    for (l2 in e2)
      if (!d2.hasOwnProperty(l2) && e2.hasOwnProperty(l2) && null != e2[l2])
        if ("style" === l2) {
          var h2 = e2[l2];
          for (g2 in h2)
            h2.hasOwnProperty(g2) && (c || (c = {}), c[g2] = "");
        } else
          "dangerouslySetInnerHTML" !== l2 && "children" !== l2 && "suppressContentEditableWarning" !== l2 && "suppressHydrationWarning" !== l2 && "autoFocus" !== l2 && (ca.hasOwnProperty(l2) ? f2 || (f2 = []) : (f2 = f2 || []).push(l2, null));
    for (l2 in d2) {
      var k = d2[l2];
      h2 = null != e2 ? e2[l2] : void 0;
      if (d2.hasOwnProperty(l2) && k !== h2 && (null != k || null != h2))
        if ("style" === l2)
          if (h2) {
            for (g2 in h2)
              !h2.hasOwnProperty(g2) || k && k.hasOwnProperty(g2) || (c || (c = {}), c[g2] = "");
            for (g2 in k)
              k.hasOwnProperty(g2) && h2[g2] !== k[g2] && (c || (c = {}), c[g2] = k[g2]);
          } else
            c || (f2 || (f2 = []), f2.push(l2, c)), c = k;
        else
          "dangerouslySetInnerHTML" === l2 ? (k = k ? k.__html : void 0, h2 = h2 ? h2.__html : void 0, null != k && h2 !== k && (f2 = f2 || []).push(l2, k)) : "children" === l2 ? "string" !== typeof k && "number" !== typeof k || (f2 = f2 || []).push(l2, "" + k) : "suppressContentEditableWarning" !== l2 && "suppressHydrationWarning" !== l2 && (ca.hasOwnProperty(l2) ? (null != k && "onScroll" === l2 && G("scroll", a88), f2 || h2 === k || (f2 = [])) : "object" === typeof k && null !== k && k.$$typeof === Ga ? k.toString() : (f2 = f2 || []).push(l2, k));
    }
    c && (f2 = f2 || []).push(
      "style",
      c
    );
    var l2 = f2;
    if (b.updateQueue = l2)
      b.flags |= 4;
  }
};
Ei = function(a88, b, c, d2) {
  c !== d2 && (b.flags |= 4);
};
function Fi(a88, b) {
  if (!lh)
    switch (a88.tailMode) {
      case "hidden":
        b = a88.tail;
        for (var c = null; null !== b; )
          null !== b.alternate && (c = b), b = b.sibling;
        null === c ? a88.tail = null : c.sibling = null;
        break;
      case "collapsed":
        c = a88.tail;
        for (var d2 = null; null !== c; )
          null !== c.alternate && (d2 = c), c = c.sibling;
        null === d2 ? b || null === a88.tail ? a88.tail = null : a88.tail.sibling = null : d2.sibling = null;
    }
}
function Gi(a88, b, c) {
  var d2 = b.pendingProps;
  switch (b.tag) {
    case 2:
    case 16:
    case 15:
    case 0:
    case 11:
    case 7:
    case 8:
    case 12:
    case 9:
    case 14:
      return null;
    case 1:
      return Ff(b.type) && Gf(), null;
    case 3:
      fh();
      H(N);
      H(M);
      uh();
      d2 = b.stateNode;
      d2.pendingContext && (d2.context = d2.pendingContext, d2.pendingContext = null);
      if (null === a88 || null === a88.child)
        rh(b) ? b.flags |= 4 : d2.hydrate || (b.flags |= 256);
      Ci(b);
      return null;
    case 5:
      hh(b);
      var e2 = dh(ch.current);
      c = b.type;
      if (null !== a88 && null != b.stateNode)
        Di(a88, b, c, d2, e2), a88.ref !== b.ref && (b.flags |= 128);
      else {
        if (!d2) {
          if (null === b.stateNode)
            throw Error(y$1(166));
          return null;
        }
        a88 = dh(ah.current);
        if (rh(b)) {
          d2 = b.stateNode;
          c = b.type;
          var f2 = b.memoizedProps;
          d2[wf] = b;
          d2[xf] = f2;
          switch (c) {
            case "dialog":
              G("cancel", d2);
              G("close", d2);
              break;
            case "iframe":
            case "object":
            case "embed":
              G("load", d2);
              break;
            case "video":
            case "audio":
              for (a88 = 0; a88 < Xe.length; a88++)
                G(Xe[a88], d2);
              break;
            case "source":
              G("error", d2);
              break;
            case "img":
            case "image":
            case "link":
              G("error", d2);
              G("load", d2);
              break;
            case "details":
              G("toggle", d2);
              break;
            case "input":
              Za(d2, f2);
              G("invalid", d2);
              break;
            case "select":
              d2._wrapperState = { wasMultiple: !!f2.multiple };
              G("invalid", d2);
              break;
            case "textarea":
              hb(d2, f2), G("invalid", d2);
          }
          vb(c, f2);
          a88 = null;
          for (var g2 in f2)
            f2.hasOwnProperty(g2) && (e2 = f2[g2], "children" === g2 ? "string" === typeof e2 ? d2.textContent !== e2 && (a88 = ["children", e2]) : "number" === typeof e2 && d2.textContent !== "" + e2 && (a88 = ["children", "" + e2]) : ca.hasOwnProperty(g2) && null != e2 && "onScroll" === g2 && G("scroll", d2));
          switch (c) {
            case "input":
              Va(d2);
              cb(d2, f2, true);
              break;
            case "textarea":
              Va(d2);
              jb(d2);
              break;
            case "select":
            case "option":
              break;
            default:
              "function" === typeof f2.onClick && (d2.onclick = jf);
          }
          d2 = a88;
          b.updateQueue = d2;
          null !== d2 && (b.flags |= 4);
        } else {
          g2 = 9 === e2.nodeType ? e2 : e2.ownerDocument;
          a88 === kb.html && (a88 = lb(c));
          a88 === kb.html ? "script" === c ? (a88 = g2.createElement("div"), a88.innerHTML = "<script><\/script>", a88 = a88.removeChild(a88.firstChild)) : "string" === typeof d2.is ? a88 = g2.createElement(c, { is: d2.is }) : (a88 = g2.createElement(c), "select" === c && (g2 = a88, d2.multiple ? g2.multiple = true : d2.size && (g2.size = d2.size))) : a88 = g2.createElementNS(a88, c);
          a88[wf] = b;
          a88[xf] = d2;
          Bi(a88, b, false, false);
          b.stateNode = a88;
          g2 = wb(c, d2);
          switch (c) {
            case "dialog":
              G("cancel", a88);
              G("close", a88);
              e2 = d2;
              break;
            case "iframe":
            case "object":
            case "embed":
              G("load", a88);
              e2 = d2;
              break;
            case "video":
            case "audio":
              for (e2 = 0; e2 < Xe.length; e2++)
                G(Xe[e2], a88);
              e2 = d2;
              break;
            case "source":
              G("error", a88);
              e2 = d2;
              break;
            case "img":
            case "image":
            case "link":
              G("error", a88);
              G("load", a88);
              e2 = d2;
              break;
            case "details":
              G("toggle", a88);
              e2 = d2;
              break;
            case "input":
              Za(a88, d2);
              e2 = Ya(a88, d2);
              G("invalid", a88);
              break;
            case "option":
              e2 = eb(a88, d2);
              break;
            case "select":
              a88._wrapperState = { wasMultiple: !!d2.multiple };
              e2 = m$2({}, d2, { value: void 0 });
              G("invalid", a88);
              break;
            case "textarea":
              hb(a88, d2);
              e2 = gb(a88, d2);
              G("invalid", a88);
              break;
            default:
              e2 = d2;
          }
          vb(c, e2);
          var h2 = e2;
          for (f2 in h2)
            if (h2.hasOwnProperty(f2)) {
              var k = h2[f2];
              "style" === f2 ? tb(a88, k) : "dangerouslySetInnerHTML" === f2 ? (k = k ? k.__html : void 0, null != k && ob(a88, k)) : "children" === f2 ? "string" === typeof k ? ("textarea" !== c || "" !== k) && pb(a88, k) : "number" === typeof k && pb(a88, "" + k) : "suppressContentEditableWarning" !== f2 && "suppressHydrationWarning" !== f2 && "autoFocus" !== f2 && (ca.hasOwnProperty(f2) ? null != k && "onScroll" === f2 && G("scroll", a88) : null != k && qa(a88, f2, k, g2));
            }
          switch (c) {
            case "input":
              Va(a88);
              cb(a88, d2, false);
              break;
            case "textarea":
              Va(a88);
              jb(a88);
              break;
            case "option":
              null != d2.value && a88.setAttribute("value", "" + Sa(d2.value));
              break;
            case "select":
              a88.multiple = !!d2.multiple;
              f2 = d2.value;
              null != f2 ? fb(a88, !!d2.multiple, f2, false) : null != d2.defaultValue && fb(a88, !!d2.multiple, d2.defaultValue, true);
              break;
            default:
              "function" === typeof e2.onClick && (a88.onclick = jf);
          }
          mf(c, d2) && (b.flags |= 4);
        }
        null !== b.ref && (b.flags |= 128);
      }
      return null;
    case 6:
      if (a88 && null != b.stateNode)
        Ei(a88, b, a88.memoizedProps, d2);
      else {
        if ("string" !== typeof d2 && null === b.stateNode)
          throw Error(y$1(166));
        c = dh(ch.current);
        dh(ah.current);
        rh(b) ? (d2 = b.stateNode, c = b.memoizedProps, d2[wf] = b, d2.nodeValue !== c && (b.flags |= 4)) : (d2 = (9 === c.nodeType ? c : c.ownerDocument).createTextNode(d2), d2[wf] = b, b.stateNode = d2);
      }
      return null;
    case 13:
      H(P);
      d2 = b.memoizedState;
      if (0 !== (b.flags & 64))
        return b.lanes = c, b;
      d2 = null !== d2;
      c = false;
      null === a88 ? void 0 !== b.memoizedProps.fallback && rh(b) : c = null !== a88.memoizedState;
      if (d2 && !c && 0 !== (b.mode & 2))
        if (null === a88 && true !== b.memoizedProps.unstable_avoidThisFallback || 0 !== (P.current & 1))
          0 === V && (V = 3);
        else {
          if (0 === V || 3 === V)
            V = 4;
          null === U || 0 === (Dg & 134217727) && 0 === (Hi & 134217727) || Ii(U, W);
        }
      if (d2 || c)
        b.flags |= 4;
      return null;
    case 4:
      return fh(), Ci(b), null === a88 && cf(b.stateNode.containerInfo), null;
    case 10:
      return rg(b), null;
    case 17:
      return Ff(b.type) && Gf(), null;
    case 19:
      H(P);
      d2 = b.memoizedState;
      if (null === d2)
        return null;
      f2 = 0 !== (b.flags & 64);
      g2 = d2.rendering;
      if (null === g2)
        if (f2)
          Fi(d2, false);
        else {
          if (0 !== V || null !== a88 && 0 !== (a88.flags & 64))
            for (a88 = b.child; null !== a88; ) {
              g2 = ih(a88);
              if (null !== g2) {
                b.flags |= 64;
                Fi(d2, false);
                f2 = g2.updateQueue;
                null !== f2 && (b.updateQueue = f2, b.flags |= 4);
                null === d2.lastEffect && (b.firstEffect = null);
                b.lastEffect = d2.lastEffect;
                d2 = c;
                for (c = b.child; null !== c; )
                  f2 = c, a88 = d2, f2.flags &= 2, f2.nextEffect = null, f2.firstEffect = null, f2.lastEffect = null, g2 = f2.alternate, null === g2 ? (f2.childLanes = 0, f2.lanes = a88, f2.child = null, f2.memoizedProps = null, f2.memoizedState = null, f2.updateQueue = null, f2.dependencies = null, f2.stateNode = null) : (f2.childLanes = g2.childLanes, f2.lanes = g2.lanes, f2.child = g2.child, f2.memoizedProps = g2.memoizedProps, f2.memoizedState = g2.memoizedState, f2.updateQueue = g2.updateQueue, f2.type = g2.type, a88 = g2.dependencies, f2.dependencies = null === a88 ? null : { lanes: a88.lanes, firstContext: a88.firstContext }), c = c.sibling;
                I(P, P.current & 1 | 2);
                return b.child;
              }
              a88 = a88.sibling;
            }
          null !== d2.tail && O() > Ji && (b.flags |= 64, f2 = true, Fi(d2, false), b.lanes = 33554432);
        }
      else {
        if (!f2)
          if (a88 = ih(g2), null !== a88) {
            if (b.flags |= 64, f2 = true, c = a88.updateQueue, null !== c && (b.updateQueue = c, b.flags |= 4), Fi(d2, true), null === d2.tail && "hidden" === d2.tailMode && !g2.alternate && !lh)
              return b = b.lastEffect = d2.lastEffect, null !== b && (b.nextEffect = null), null;
          } else
            2 * O() - d2.renderingStartTime > Ji && 1073741824 !== c && (b.flags |= 64, f2 = true, Fi(d2, false), b.lanes = 33554432);
        d2.isBackwards ? (g2.sibling = b.child, b.child = g2) : (c = d2.last, null !== c ? c.sibling = g2 : b.child = g2, d2.last = g2);
      }
      return null !== d2.tail ? (c = d2.tail, d2.rendering = c, d2.tail = c.sibling, d2.lastEffect = b.lastEffect, d2.renderingStartTime = O(), c.sibling = null, b = P.current, I(P, f2 ? b & 1 | 2 : b & 1), c) : null;
    case 23:
    case 24:
      return Ki(), null !== a88 && null !== a88.memoizedState !== (null !== b.memoizedState) && "unstable-defer-without-hiding" !== d2.mode && (b.flags |= 4), null;
  }
  throw Error(y$1(156, b.tag));
}
function Li(a88) {
  switch (a88.tag) {
    case 1:
      Ff(a88.type) && Gf();
      var b = a88.flags;
      return b & 4096 ? (a88.flags = b & -4097 | 64, a88) : null;
    case 3:
      fh();
      H(N);
      H(M);
      uh();
      b = a88.flags;
      if (0 !== (b & 64))
        throw Error(y$1(285));
      a88.flags = b & -4097 | 64;
      return a88;
    case 5:
      return hh(a88), null;
    case 13:
      return H(P), b = a88.flags, b & 4096 ? (a88.flags = b & -4097 | 64, a88) : null;
    case 19:
      return H(P), null;
    case 4:
      return fh(), null;
    case 10:
      return rg(a88), null;
    case 23:
    case 24:
      return Ki(), null;
    default:
      return null;
  }
}
function Mi(a88, b) {
  try {
    var c = "", d2 = b;
    do
      c += Qa(d2), d2 = d2.return;
    while (d2);
    var e2 = c;
  } catch (f2) {
    e2 = "\nError generating stack: " + f2.message + "\n" + f2.stack;
  }
  return { value: a88, source: b, stack: e2 };
}
function Ni(a88, b) {
  try {
    console.error(b.value);
  } catch (c) {
    setTimeout(function() {
      throw c;
    });
  }
}
var Oi = "function" === typeof WeakMap ? WeakMap : Map;
function Pi(a88, b, c) {
  c = zg(-1, c);
  c.tag = 3;
  c.payload = { element: null };
  var d2 = b.value;
  c.callback = function() {
    Qi || (Qi = true, Ri = d2);
    Ni(a88, b);
  };
  return c;
}
function Si(a88, b, c) {
  c = zg(-1, c);
  c.tag = 3;
  var d2 = a88.type.getDerivedStateFromError;
  if ("function" === typeof d2) {
    var e2 = b.value;
    c.payload = function() {
      Ni(a88, b);
      return d2(e2);
    };
  }
  var f2 = a88.stateNode;
  null !== f2 && "function" === typeof f2.componentDidCatch && (c.callback = function() {
    "function" !== typeof d2 && (null === Ti ? Ti = /* @__PURE__ */ new Set([this]) : Ti.add(this), Ni(a88, b));
    var c2 = b.stack;
    this.componentDidCatch(b.value, { componentStack: null !== c2 ? c2 : "" });
  });
  return c;
}
var Ui = "function" === typeof WeakSet ? WeakSet : Set;
function Vi(a88) {
  var b = a88.ref;
  if (null !== b)
    if ("function" === typeof b)
      try {
        b(null);
      } catch (c) {
        Wi(a88, c);
      }
    else
      b.current = null;
}
function Xi(a88, b) {
  switch (b.tag) {
    case 0:
    case 11:
    case 15:
    case 22:
      return;
    case 1:
      if (b.flags & 256 && null !== a88) {
        var c = a88.memoizedProps, d2 = a88.memoizedState;
        a88 = b.stateNode;
        b = a88.getSnapshotBeforeUpdate(b.elementType === b.type ? c : lg(b.type, c), d2);
        a88.__reactInternalSnapshotBeforeUpdate = b;
      }
      return;
    case 3:
      b.flags & 256 && qf(b.stateNode.containerInfo);
      return;
    case 5:
    case 6:
    case 4:
    case 17:
      return;
  }
  throw Error(y$1(163));
}
function Yi(a88, b, c) {
  switch (c.tag) {
    case 0:
    case 11:
    case 15:
    case 22:
      b = c.updateQueue;
      b = null !== b ? b.lastEffect : null;
      if (null !== b) {
        a88 = b = b.next;
        do {
          if (3 === (a88.tag & 3)) {
            var d2 = a88.create;
            a88.destroy = d2();
          }
          a88 = a88.next;
        } while (a88 !== b);
      }
      b = c.updateQueue;
      b = null !== b ? b.lastEffect : null;
      if (null !== b) {
        a88 = b = b.next;
        do {
          var e2 = a88;
          d2 = e2.next;
          e2 = e2.tag;
          0 !== (e2 & 4) && 0 !== (e2 & 1) && (Zi(c, a88), $i(c, a88));
          a88 = d2;
        } while (a88 !== b);
      }
      return;
    case 1:
      a88 = c.stateNode;
      c.flags & 4 && (null === b ? a88.componentDidMount() : (d2 = c.elementType === c.type ? b.memoizedProps : lg(c.type, b.memoizedProps), a88.componentDidUpdate(
        d2,
        b.memoizedState,
        a88.__reactInternalSnapshotBeforeUpdate
      )));
      b = c.updateQueue;
      null !== b && Eg(c, b, a88);
      return;
    case 3:
      b = c.updateQueue;
      if (null !== b) {
        a88 = null;
        if (null !== c.child)
          switch (c.child.tag) {
            case 5:
              a88 = c.child.stateNode;
              break;
            case 1:
              a88 = c.child.stateNode;
          }
        Eg(c, b, a88);
      }
      return;
    case 5:
      a88 = c.stateNode;
      null === b && c.flags & 4 && mf(c.type, c.memoizedProps) && a88.focus();
      return;
    case 6:
      return;
    case 4:
      return;
    case 12:
      return;
    case 13:
      null === c.memoizedState && (c = c.alternate, null !== c && (c = c.memoizedState, null !== c && (c = c.dehydrated, null !== c && Cc(c))));
      return;
    case 19:
    case 17:
    case 20:
    case 21:
    case 23:
    case 24:
      return;
  }
  throw Error(y$1(163));
}
function aj(a88, b) {
  for (var c = a88; ; ) {
    if (5 === c.tag) {
      var d2 = c.stateNode;
      if (b)
        d2 = d2.style, "function" === typeof d2.setProperty ? d2.setProperty("display", "none", "important") : d2.display = "none";
      else {
        d2 = c.stateNode;
        var e2 = c.memoizedProps.style;
        e2 = void 0 !== e2 && null !== e2 && e2.hasOwnProperty("display") ? e2.display : null;
        d2.style.display = sb("display", e2);
      }
    } else if (6 === c.tag)
      c.stateNode.nodeValue = b ? "" : c.memoizedProps;
    else if ((23 !== c.tag && 24 !== c.tag || null === c.memoizedState || c === a88) && null !== c.child) {
      c.child.return = c;
      c = c.child;
      continue;
    }
    if (c === a88)
      break;
    for (; null === c.sibling; ) {
      if (null === c.return || c.return === a88)
        return;
      c = c.return;
    }
    c.sibling.return = c.return;
    c = c.sibling;
  }
}
function bj(a88, b) {
  if (Mf && "function" === typeof Mf.onCommitFiberUnmount)
    try {
      Mf.onCommitFiberUnmount(Lf, b);
    } catch (f2) {
    }
  switch (b.tag) {
    case 0:
    case 11:
    case 14:
    case 15:
    case 22:
      a88 = b.updateQueue;
      if (null !== a88 && (a88 = a88.lastEffect, null !== a88)) {
        var c = a88 = a88.next;
        do {
          var d2 = c, e2 = d2.destroy;
          d2 = d2.tag;
          if (void 0 !== e2)
            if (0 !== (d2 & 4))
              Zi(b, c);
            else {
              d2 = b;
              try {
                e2();
              } catch (f2) {
                Wi(d2, f2);
              }
            }
          c = c.next;
        } while (c !== a88);
      }
      break;
    case 1:
      Vi(b);
      a88 = b.stateNode;
      if ("function" === typeof a88.componentWillUnmount)
        try {
          a88.props = b.memoizedProps, a88.state = b.memoizedState, a88.componentWillUnmount();
        } catch (f2) {
          Wi(
            b,
            f2
          );
        }
      break;
    case 5:
      Vi(b);
      break;
    case 4:
      cj(a88, b);
  }
}
function dj(a88) {
  a88.alternate = null;
  a88.child = null;
  a88.dependencies = null;
  a88.firstEffect = null;
  a88.lastEffect = null;
  a88.memoizedProps = null;
  a88.memoizedState = null;
  a88.pendingProps = null;
  a88.return = null;
  a88.updateQueue = null;
}
function ej(a88) {
  return 5 === a88.tag || 3 === a88.tag || 4 === a88.tag;
}
function fj(a88) {
  a: {
    for (var b = a88.return; null !== b; ) {
      if (ej(b))
        break a;
      b = b.return;
    }
    throw Error(y$1(160));
  }
  var c = b;
  b = c.stateNode;
  switch (c.tag) {
    case 5:
      var d2 = false;
      break;
    case 3:
      b = b.containerInfo;
      d2 = true;
      break;
    case 4:
      b = b.containerInfo;
      d2 = true;
      break;
    default:
      throw Error(y$1(161));
  }
  c.flags & 16 && (pb(b, ""), c.flags &= -17);
  a:
    b:
      for (c = a88; ; ) {
        for (; null === c.sibling; ) {
          if (null === c.return || ej(c.return)) {
            c = null;
            break a;
          }
          c = c.return;
        }
        c.sibling.return = c.return;
        for (c = c.sibling; 5 !== c.tag && 6 !== c.tag && 18 !== c.tag; ) {
          if (c.flags & 2)
            continue b;
          if (null === c.child || 4 === c.tag)
            continue b;
          else
            c.child.return = c, c = c.child;
        }
        if (!(c.flags & 2)) {
          c = c.stateNode;
          break a;
        }
      }
  d2 ? gj(a88, c, b) : hj(a88, c, b);
}
function gj(a88, b, c) {
  var d2 = a88.tag, e2 = 5 === d2 || 6 === d2;
  if (e2)
    a88 = e2 ? a88.stateNode : a88.stateNode.instance, b ? 8 === c.nodeType ? c.parentNode.insertBefore(a88, b) : c.insertBefore(a88, b) : (8 === c.nodeType ? (b = c.parentNode, b.insertBefore(a88, c)) : (b = c, b.appendChild(a88)), c = c._reactRootContainer, null !== c && void 0 !== c || null !== b.onclick || (b.onclick = jf));
  else if (4 !== d2 && (a88 = a88.child, null !== a88))
    for (gj(a88, b, c), a88 = a88.sibling; null !== a88; )
      gj(a88, b, c), a88 = a88.sibling;
}
function hj(a88, b, c) {
  var d2 = a88.tag, e2 = 5 === d2 || 6 === d2;
  if (e2)
    a88 = e2 ? a88.stateNode : a88.stateNode.instance, b ? c.insertBefore(a88, b) : c.appendChild(a88);
  else if (4 !== d2 && (a88 = a88.child, null !== a88))
    for (hj(a88, b, c), a88 = a88.sibling; null !== a88; )
      hj(a88, b, c), a88 = a88.sibling;
}
function cj(a88, b) {
  for (var c = b, d2 = false, e2, f2; ; ) {
    if (!d2) {
      d2 = c.return;
      a:
        for (; ; ) {
          if (null === d2)
            throw Error(y$1(160));
          e2 = d2.stateNode;
          switch (d2.tag) {
            case 5:
              f2 = false;
              break a;
            case 3:
              e2 = e2.containerInfo;
              f2 = true;
              break a;
            case 4:
              e2 = e2.containerInfo;
              f2 = true;
              break a;
          }
          d2 = d2.return;
        }
      d2 = true;
    }
    if (5 === c.tag || 6 === c.tag) {
      a:
        for (var g2 = a88, h2 = c, k = h2; ; )
          if (bj(g2, k), null !== k.child && 4 !== k.tag)
            k.child.return = k, k = k.child;
          else {
            if (k === h2)
              break a;
            for (; null === k.sibling; ) {
              if (null === k.return || k.return === h2)
                break a;
              k = k.return;
            }
            k.sibling.return = k.return;
            k = k.sibling;
          }
      f2 ? (g2 = e2, h2 = c.stateNode, 8 === g2.nodeType ? g2.parentNode.removeChild(h2) : g2.removeChild(h2)) : e2.removeChild(c.stateNode);
    } else if (4 === c.tag) {
      if (null !== c.child) {
        e2 = c.stateNode.containerInfo;
        f2 = true;
        c.child.return = c;
        c = c.child;
        continue;
      }
    } else if (bj(a88, c), null !== c.child) {
      c.child.return = c;
      c = c.child;
      continue;
    }
    if (c === b)
      break;
    for (; null === c.sibling; ) {
      if (null === c.return || c.return === b)
        return;
      c = c.return;
      4 === c.tag && (d2 = false);
    }
    c.sibling.return = c.return;
    c = c.sibling;
  }
}
function ij(a88, b) {
  switch (b.tag) {
    case 0:
    case 11:
    case 14:
    case 15:
    case 22:
      var c = b.updateQueue;
      c = null !== c ? c.lastEffect : null;
      if (null !== c) {
        var d2 = c = c.next;
        do
          3 === (d2.tag & 3) && (a88 = d2.destroy, d2.destroy = void 0, void 0 !== a88 && a88()), d2 = d2.next;
        while (d2 !== c);
      }
      return;
    case 1:
      return;
    case 5:
      c = b.stateNode;
      if (null != c) {
        d2 = b.memoizedProps;
        var e2 = null !== a88 ? a88.memoizedProps : d2;
        a88 = b.type;
        var f2 = b.updateQueue;
        b.updateQueue = null;
        if (null !== f2) {
          c[xf] = d2;
          "input" === a88 && "radio" === d2.type && null != d2.name && $a(c, d2);
          wb(a88, e2);
          b = wb(a88, d2);
          for (e2 = 0; e2 < f2.length; e2 += 2) {
            var g2 = f2[e2], h2 = f2[e2 + 1];
            "style" === g2 ? tb(c, h2) : "dangerouslySetInnerHTML" === g2 ? ob(c, h2) : "children" === g2 ? pb(c, h2) : qa(c, g2, h2, b);
          }
          switch (a88) {
            case "input":
              ab(c, d2);
              break;
            case "textarea":
              ib(c, d2);
              break;
            case "select":
              a88 = c._wrapperState.wasMultiple, c._wrapperState.wasMultiple = !!d2.multiple, f2 = d2.value, null != f2 ? fb(c, !!d2.multiple, f2, false) : a88 !== !!d2.multiple && (null != d2.defaultValue ? fb(c, !!d2.multiple, d2.defaultValue, true) : fb(c, !!d2.multiple, d2.multiple ? [] : "", false));
          }
        }
      }
      return;
    case 6:
      if (null === b.stateNode)
        throw Error(y$1(162));
      b.stateNode.nodeValue = b.memoizedProps;
      return;
    case 3:
      c = b.stateNode;
      c.hydrate && (c.hydrate = false, Cc(c.containerInfo));
      return;
    case 12:
      return;
    case 13:
      null !== b.memoizedState && (jj = O(), aj(b.child, true));
      kj(b);
      return;
    case 19:
      kj(b);
      return;
    case 17:
      return;
    case 23:
    case 24:
      aj(b, null !== b.memoizedState);
      return;
  }
  throw Error(y$1(163));
}
function kj(a88) {
  var b = a88.updateQueue;
  if (null !== b) {
    a88.updateQueue = null;
    var c = a88.stateNode;
    null === c && (c = a88.stateNode = new Ui());
    b.forEach(function(b2) {
      var d2 = lj.bind(null, a88, b2);
      c.has(b2) || (c.add(b2), b2.then(d2, d2));
    });
  }
}
function mj(a88, b) {
  return null !== a88 && (a88 = a88.memoizedState, null === a88 || null !== a88.dehydrated) ? (b = b.memoizedState, null !== b && null === b.dehydrated) : false;
}
var nj = Math.ceil, oj = ra.ReactCurrentDispatcher, pj = ra.ReactCurrentOwner, X = 0, U = null, Y = null, W = 0, qj = 0, rj = Bf(0), V = 0, sj = null, tj = 0, Dg = 0, Hi = 0, uj = 0, vj = null, jj = 0, Ji = Infinity;
function wj() {
  Ji = O() + 500;
}
var Z = null, Qi = false, Ri = null, Ti = null, xj = false, yj = null, zj = 90, Aj = [], Bj = [], Cj = null, Dj = 0, Ej = null, Fj = -1, Gj = 0, Hj = 0, Ij = null, Jj = false;
function Hg() {
  return 0 !== (X & 48) ? O() : -1 !== Fj ? Fj : Fj = O();
}
function Ig(a88) {
  a88 = a88.mode;
  if (0 === (a88 & 2))
    return 1;
  if (0 === (a88 & 4))
    return 99 === eg() ? 1 : 2;
  0 === Gj && (Gj = tj);
  if (0 !== kg.transition) {
    0 !== Hj && (Hj = null !== vj ? vj.pendingLanes : 0);
    a88 = Gj;
    var b = 4186112 & ~Hj;
    b &= -b;
    0 === b && (a88 = 4186112 & ~a88, b = a88 & -a88, 0 === b && (b = 8192));
    return b;
  }
  a88 = eg();
  0 !== (X & 4) && 98 === a88 ? a88 = Xc(12, Gj) : (a88 = Sc(a88), a88 = Xc(a88, Gj));
  return a88;
}
function Jg(a88, b, c) {
  if (50 < Dj)
    throw Dj = 0, Ej = null, Error(y$1(185));
  a88 = Kj(a88, b);
  if (null === a88)
    return null;
  $c(a88, b, c);
  a88 === U && (Hi |= b, 4 === V && Ii(a88, W));
  var d2 = eg();
  1 === b ? 0 !== (X & 8) && 0 === (X & 48) ? Lj(a88) : (Mj(a88, c), 0 === X && (wj(), ig())) : (0 === (X & 4) || 98 !== d2 && 99 !== d2 || (null === Cj ? Cj = /* @__PURE__ */ new Set([a88]) : Cj.add(a88)), Mj(a88, c));
  vj = a88;
}
function Kj(a88, b) {
  a88.lanes |= b;
  var c = a88.alternate;
  null !== c && (c.lanes |= b);
  c = a88;
  for (a88 = a88.return; null !== a88; )
    a88.childLanes |= b, c = a88.alternate, null !== c && (c.childLanes |= b), c = a88, a88 = a88.return;
  return 3 === c.tag ? c.stateNode : null;
}
function Mj(a88, b) {
  for (var c = a88.callbackNode, d2 = a88.suspendedLanes, e2 = a88.pingedLanes, f2 = a88.expirationTimes, g2 = a88.pendingLanes; 0 < g2; ) {
    var h2 = 31 - Vc(g2), k = 1 << h2, l2 = f2[h2];
    if (-1 === l2) {
      if (0 === (k & d2) || 0 !== (k & e2)) {
        l2 = b;
        Rc(k);
        var n2 = F;
        f2[h2] = 10 <= n2 ? l2 + 250 : 6 <= n2 ? l2 + 5e3 : -1;
      }
    } else
      l2 <= b && (a88.expiredLanes |= k);
    g2 &= ~k;
  }
  d2 = Uc(a88, a88 === U ? W : 0);
  b = F;
  if (0 === d2)
    null !== c && (c !== Zf && Pf(c), a88.callbackNode = null, a88.callbackPriority = 0);
  else {
    if (null !== c) {
      if (a88.callbackPriority === b)
        return;
      c !== Zf && Pf(c);
    }
    15 === b ? (c = Lj.bind(null, a88), null === ag ? (ag = [c], bg = Of(Uf, jg)) : ag.push(c), c = Zf) : 14 === b ? c = hg(99, Lj.bind(null, a88)) : (c = Tc(b), c = hg(c, Nj.bind(null, a88)));
    a88.callbackPriority = b;
    a88.callbackNode = c;
  }
}
function Nj(a88) {
  Fj = -1;
  Hj = Gj = 0;
  if (0 !== (X & 48))
    throw Error(y$1(327));
  var b = a88.callbackNode;
  if (Oj() && a88.callbackNode !== b)
    return null;
  var c = Uc(a88, a88 === U ? W : 0);
  if (0 === c)
    return null;
  var d2 = c;
  var e2 = X;
  X |= 16;
  var f2 = Pj();
  if (U !== a88 || W !== d2)
    wj(), Qj(a88, d2);
  do
    try {
      Rj();
      break;
    } catch (h2) {
      Sj(a88, h2);
    }
  while (1);
  qg();
  oj.current = f2;
  X = e2;
  null !== Y ? d2 = 0 : (U = null, W = 0, d2 = V);
  if (0 !== (tj & Hi))
    Qj(a88, 0);
  else if (0 !== d2) {
    2 === d2 && (X |= 64, a88.hydrate && (a88.hydrate = false, qf(a88.containerInfo)), c = Wc(a88), 0 !== c && (d2 = Tj(a88, c)));
    if (1 === d2)
      throw b = sj, Qj(a88, 0), Ii(a88, c), Mj(a88, O()), b;
    a88.finishedWork = a88.current.alternate;
    a88.finishedLanes = c;
    switch (d2) {
      case 0:
      case 1:
        throw Error(y$1(345));
      case 2:
        Uj(a88);
        break;
      case 3:
        Ii(a88, c);
        if ((c & 62914560) === c && (d2 = jj + 500 - O(), 10 < d2)) {
          if (0 !== Uc(a88, 0))
            break;
          e2 = a88.suspendedLanes;
          if ((e2 & c) !== c) {
            Hg();
            a88.pingedLanes |= a88.suspendedLanes & e2;
            break;
          }
          a88.timeoutHandle = of$2(Uj.bind(null, a88), d2);
          break;
        }
        Uj(a88);
        break;
      case 4:
        Ii(a88, c);
        if ((c & 4186112) === c)
          break;
        d2 = a88.eventTimes;
        for (e2 = -1; 0 < c; ) {
          var g2 = 31 - Vc(c);
          f2 = 1 << g2;
          g2 = d2[g2];
          g2 > e2 && (e2 = g2);
          c &= ~f2;
        }
        c = e2;
        c = O() - c;
        c = (120 > c ? 120 : 480 > c ? 480 : 1080 > c ? 1080 : 1920 > c ? 1920 : 3e3 > c ? 3e3 : 4320 > c ? 4320 : 1960 * nj(c / 1960)) - c;
        if (10 < c) {
          a88.timeoutHandle = of$2(Uj.bind(null, a88), c);
          break;
        }
        Uj(a88);
        break;
      case 5:
        Uj(a88);
        break;
      default:
        throw Error(y$1(329));
    }
  }
  Mj(a88, O());
  return a88.callbackNode === b ? Nj.bind(null, a88) : null;
}
function Ii(a88, b) {
  b &= ~uj;
  b &= ~Hi;
  a88.suspendedLanes |= b;
  a88.pingedLanes &= ~b;
  for (a88 = a88.expirationTimes; 0 < b; ) {
    var c = 31 - Vc(b), d2 = 1 << c;
    a88[c] = -1;
    b &= ~d2;
  }
}
function Lj(a88) {
  if (0 !== (X & 48))
    throw Error(y$1(327));
  Oj();
  if (a88 === U && 0 !== (a88.expiredLanes & W)) {
    var b = W;
    var c = Tj(a88, b);
    0 !== (tj & Hi) && (b = Uc(a88, b), c = Tj(a88, b));
  } else
    b = Uc(a88, 0), c = Tj(a88, b);
  0 !== a88.tag && 2 === c && (X |= 64, a88.hydrate && (a88.hydrate = false, qf(a88.containerInfo)), b = Wc(a88), 0 !== b && (c = Tj(a88, b)));
  if (1 === c)
    throw c = sj, Qj(a88, 0), Ii(a88, b), Mj(a88, O()), c;
  a88.finishedWork = a88.current.alternate;
  a88.finishedLanes = b;
  Uj(a88);
  Mj(a88, O());
  return null;
}
function Vj() {
  if (null !== Cj) {
    var a88 = Cj;
    Cj = null;
    a88.forEach(function(a92) {
      a92.expiredLanes |= 24 & a92.pendingLanes;
      Mj(a92, O());
    });
  }
  ig();
}
function Wj(a88, b) {
  var c = X;
  X |= 1;
  try {
    return a88(b);
  } finally {
    X = c, 0 === X && (wj(), ig());
  }
}
function Xj(a88, b) {
  var c = X;
  X &= -2;
  X |= 8;
  try {
    return a88(b);
  } finally {
    X = c, 0 === X && (wj(), ig());
  }
}
function ni(a88, b) {
  I(rj, qj);
  qj |= b;
  tj |= b;
}
function Ki() {
  qj = rj.current;
  H(rj);
}
function Qj(a88, b) {
  a88.finishedWork = null;
  a88.finishedLanes = 0;
  var c = a88.timeoutHandle;
  -1 !== c && (a88.timeoutHandle = -1, pf(c));
  if (null !== Y)
    for (c = Y.return; null !== c; ) {
      var d2 = c;
      switch (d2.tag) {
        case 1:
          d2 = d2.type.childContextTypes;
          null !== d2 && void 0 !== d2 && Gf();
          break;
        case 3:
          fh();
          H(N);
          H(M);
          uh();
          break;
        case 5:
          hh(d2);
          break;
        case 4:
          fh();
          break;
        case 13:
          H(P);
          break;
        case 19:
          H(P);
          break;
        case 10:
          rg(d2);
          break;
        case 23:
        case 24:
          Ki();
      }
      c = c.return;
    }
  U = a88;
  Y = Tg(a88.current, null);
  W = qj = tj = b;
  V = 0;
  sj = null;
  uj = Hi = Dg = 0;
}
function Sj(a88, b) {
  do {
    var c = Y;
    try {
      qg();
      vh.current = Gh;
      if (yh) {
        for (var d2 = R$1.memoizedState; null !== d2; ) {
          var e2 = d2.queue;
          null !== e2 && (e2.pending = null);
          d2 = d2.next;
        }
        yh = false;
      }
      xh = 0;
      T = S = R$1 = null;
      zh = false;
      pj.current = null;
      if (null === c || null === c.return) {
        V = 1;
        sj = b;
        Y = null;
        break;
      }
      a: {
        var f2 = a88, g2 = c.return, h2 = c, k = b;
        b = W;
        h2.flags |= 2048;
        h2.firstEffect = h2.lastEffect = null;
        if (null !== k && "object" === typeof k && "function" === typeof k.then) {
          var l2 = k;
          if (0 === (h2.mode & 2)) {
            var n2 = h2.alternate;
            n2 ? (h2.updateQueue = n2.updateQueue, h2.memoizedState = n2.memoizedState, h2.lanes = n2.lanes) : (h2.updateQueue = null, h2.memoizedState = null);
          }
          var A2 = 0 !== (P.current & 1), p2 = g2;
          do {
            var C2;
            if (C2 = 13 === p2.tag) {
              var x2 = p2.memoizedState;
              if (null !== x2)
                C2 = null !== x2.dehydrated ? true : false;
              else {
                var w2 = p2.memoizedProps;
                C2 = void 0 === w2.fallback ? false : true !== w2.unstable_avoidThisFallback ? true : A2 ? false : true;
              }
            }
            if (C2) {
              var z2 = p2.updateQueue;
              if (null === z2) {
                var u2 = /* @__PURE__ */ new Set();
                u2.add(l2);
                p2.updateQueue = u2;
              } else
                z2.add(l2);
              if (0 === (p2.mode & 2)) {
                p2.flags |= 64;
                h2.flags |= 16384;
                h2.flags &= -2981;
                if (1 === h2.tag)
                  if (null === h2.alternate)
                    h2.tag = 17;
                  else {
                    var t2 = zg(-1, 1);
                    t2.tag = 2;
                    Ag(h2, t2);
                  }
                h2.lanes |= 1;
                break a;
              }
              k = void 0;
              h2 = b;
              var q2 = f2.pingCache;
              null === q2 ? (q2 = f2.pingCache = new Oi(), k = /* @__PURE__ */ new Set(), q2.set(l2, k)) : (k = q2.get(l2), void 0 === k && (k = /* @__PURE__ */ new Set(), q2.set(l2, k)));
              if (!k.has(h2)) {
                k.add(h2);
                var v2 = Yj.bind(null, f2, l2, h2);
                l2.then(v2, v2);
              }
              p2.flags |= 4096;
              p2.lanes = b;
              break a;
            }
            p2 = p2.return;
          } while (null !== p2);
          k = Error((Ra(h2.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.");
        }
        5 !== V && (V = 2);
        k = Mi(k, h2);
        p2 = g2;
        do {
          switch (p2.tag) {
            case 3:
              f2 = k;
              p2.flags |= 4096;
              b &= -b;
              p2.lanes |= b;
              var J2 = Pi(p2, f2, b);
              Bg(p2, J2);
              break a;
            case 1:
              f2 = k;
              var K2 = p2.type, Q2 = p2.stateNode;
              if (0 === (p2.flags & 64) && ("function" === typeof K2.getDerivedStateFromError || null !== Q2 && "function" === typeof Q2.componentDidCatch && (null === Ti || !Ti.has(Q2)))) {
                p2.flags |= 4096;
                b &= -b;
                p2.lanes |= b;
                var L2 = Si(p2, f2, b);
                Bg(p2, L2);
                break a;
              }
          }
          p2 = p2.return;
        } while (null !== p2);
      }
      Zj(c);
    } catch (va) {
      b = va;
      Y === c && null !== c && (Y = c = c.return);
      continue;
    }
    break;
  } while (1);
}
function Pj() {
  var a88 = oj.current;
  oj.current = Gh;
  return null === a88 ? Gh : a88;
}
function Tj(a88, b) {
  var c = X;
  X |= 16;
  var d2 = Pj();
  U === a88 && W === b || Qj(a88, b);
  do
    try {
      ak();
      break;
    } catch (e2) {
      Sj(a88, e2);
    }
  while (1);
  qg();
  X = c;
  oj.current = d2;
  if (null !== Y)
    throw Error(y$1(261));
  U = null;
  W = 0;
  return V;
}
function ak() {
  for (; null !== Y; )
    bk(Y);
}
function Rj() {
  for (; null !== Y && !Qf(); )
    bk(Y);
}
function bk(a88) {
  var b = ck(a88.alternate, a88, qj);
  a88.memoizedProps = a88.pendingProps;
  null === b ? Zj(a88) : Y = b;
  pj.current = null;
}
function Zj(a88) {
  var b = a88;
  do {
    var c = b.alternate;
    a88 = b.return;
    if (0 === (b.flags & 2048)) {
      c = Gi(c, b, qj);
      if (null !== c) {
        Y = c;
        return;
      }
      c = b;
      if (24 !== c.tag && 23 !== c.tag || null === c.memoizedState || 0 !== (qj & 1073741824) || 0 === (c.mode & 4)) {
        for (var d2 = 0, e2 = c.child; null !== e2; )
          d2 |= e2.lanes | e2.childLanes, e2 = e2.sibling;
        c.childLanes = d2;
      }
      null !== a88 && 0 === (a88.flags & 2048) && (null === a88.firstEffect && (a88.firstEffect = b.firstEffect), null !== b.lastEffect && (null !== a88.lastEffect && (a88.lastEffect.nextEffect = b.firstEffect), a88.lastEffect = b.lastEffect), 1 < b.flags && (null !== a88.lastEffect ? a88.lastEffect.nextEffect = b : a88.firstEffect = b, a88.lastEffect = b));
    } else {
      c = Li(b);
      if (null !== c) {
        c.flags &= 2047;
        Y = c;
        return;
      }
      null !== a88 && (a88.firstEffect = a88.lastEffect = null, a88.flags |= 2048);
    }
    b = b.sibling;
    if (null !== b) {
      Y = b;
      return;
    }
    Y = b = a88;
  } while (null !== b);
  0 === V && (V = 5);
}
function Uj(a88) {
  var b = eg();
  gg(99, dk.bind(null, a88, b));
  return null;
}
function dk(a88, b) {
  do
    Oj();
  while (null !== yj);
  if (0 !== (X & 48))
    throw Error(y$1(327));
  var c = a88.finishedWork;
  if (null === c)
    return null;
  a88.finishedWork = null;
  a88.finishedLanes = 0;
  if (c === a88.current)
    throw Error(y$1(177));
  a88.callbackNode = null;
  var d2 = c.lanes | c.childLanes, e2 = d2, f2 = a88.pendingLanes & ~e2;
  a88.pendingLanes = e2;
  a88.suspendedLanes = 0;
  a88.pingedLanes = 0;
  a88.expiredLanes &= e2;
  a88.mutableReadLanes &= e2;
  a88.entangledLanes &= e2;
  e2 = a88.entanglements;
  for (var g2 = a88.eventTimes, h2 = a88.expirationTimes; 0 < f2; ) {
    var k = 31 - Vc(f2), l2 = 1 << k;
    e2[k] = 0;
    g2[k] = -1;
    h2[k] = -1;
    f2 &= ~l2;
  }
  null !== Cj && 0 === (d2 & 24) && Cj.has(a88) && Cj.delete(a88);
  a88 === U && (Y = U = null, W = 0);
  1 < c.flags ? null !== c.lastEffect ? (c.lastEffect.nextEffect = c, d2 = c.firstEffect) : d2 = c : d2 = c.firstEffect;
  if (null !== d2) {
    e2 = X;
    X |= 32;
    pj.current = null;
    kf = fd;
    g2 = Ne();
    if (Oe(g2)) {
      if ("selectionStart" in g2)
        h2 = { start: g2.selectionStart, end: g2.selectionEnd };
      else
        a:
          if (h2 = (h2 = g2.ownerDocument) && h2.defaultView || window, (l2 = h2.getSelection && h2.getSelection()) && 0 !== l2.rangeCount) {
            h2 = l2.anchorNode;
            f2 = l2.anchorOffset;
            k = l2.focusNode;
            l2 = l2.focusOffset;
            try {
              h2.nodeType, k.nodeType;
            } catch (va) {
              h2 = null;
              break a;
            }
            var n2 = 0, A2 = -1, p2 = -1, C2 = 0, x2 = 0, w2 = g2, z2 = null;
            b:
              for (; ; ) {
                for (var u2; ; ) {
                  w2 !== h2 || 0 !== f2 && 3 !== w2.nodeType || (A2 = n2 + f2);
                  w2 !== k || 0 !== l2 && 3 !== w2.nodeType || (p2 = n2 + l2);
                  3 === w2.nodeType && (n2 += w2.nodeValue.length);
                  if (null === (u2 = w2.firstChild))
                    break;
                  z2 = w2;
                  w2 = u2;
                }
                for (; ; ) {
                  if (w2 === g2)
                    break b;
                  z2 === h2 && ++C2 === f2 && (A2 = n2);
                  z2 === k && ++x2 === l2 && (p2 = n2);
                  if (null !== (u2 = w2.nextSibling))
                    break;
                  w2 = z2;
                  z2 = w2.parentNode;
                }
                w2 = u2;
              }
            h2 = -1 === A2 || -1 === p2 ? null : { start: A2, end: p2 };
          } else
            h2 = null;
      h2 = h2 || { start: 0, end: 0 };
    } else
      h2 = null;
    lf = { focusedElem: g2, selectionRange: h2 };
    fd = false;
    Ij = null;
    Jj = false;
    Z = d2;
    do
      try {
        ek();
      } catch (va) {
        if (null === Z)
          throw Error(y$1(330));
        Wi(Z, va);
        Z = Z.nextEffect;
      }
    while (null !== Z);
    Ij = null;
    Z = d2;
    do
      try {
        for (g2 = a88; null !== Z; ) {
          var t2 = Z.flags;
          t2 & 16 && pb(Z.stateNode, "");
          if (t2 & 128) {
            var q2 = Z.alternate;
            if (null !== q2) {
              var v2 = q2.ref;
              null !== v2 && ("function" === typeof v2 ? v2(null) : v2.current = null);
            }
          }
          switch (t2 & 1038) {
            case 2:
              fj(Z);
              Z.flags &= -3;
              break;
            case 6:
              fj(Z);
              Z.flags &= -3;
              ij(Z.alternate, Z);
              break;
            case 1024:
              Z.flags &= -1025;
              break;
            case 1028:
              Z.flags &= -1025;
              ij(Z.alternate, Z);
              break;
            case 4:
              ij(Z.alternate, Z);
              break;
            case 8:
              h2 = Z;
              cj(g2, h2);
              var J2 = h2.alternate;
              dj(h2);
              null !== J2 && dj(J2);
          }
          Z = Z.nextEffect;
        }
      } catch (va) {
        if (null === Z)
          throw Error(y$1(330));
        Wi(Z, va);
        Z = Z.nextEffect;
      }
    while (null !== Z);
    v2 = lf;
    q2 = Ne();
    t2 = v2.focusedElem;
    g2 = v2.selectionRange;
    if (q2 !== t2 && t2 && t2.ownerDocument && Me(t2.ownerDocument.documentElement, t2)) {
      null !== g2 && Oe(t2) && (q2 = g2.start, v2 = g2.end, void 0 === v2 && (v2 = q2), "selectionStart" in t2 ? (t2.selectionStart = q2, t2.selectionEnd = Math.min(v2, t2.value.length)) : (v2 = (q2 = t2.ownerDocument || document) && q2.defaultView || window, v2.getSelection && (v2 = v2.getSelection(), h2 = t2.textContent.length, J2 = Math.min(g2.start, h2), g2 = void 0 === g2.end ? J2 : Math.min(g2.end, h2), !v2.extend && J2 > g2 && (h2 = g2, g2 = J2, J2 = h2), h2 = Le(t2, J2), f2 = Le(t2, g2), h2 && f2 && (1 !== v2.rangeCount || v2.anchorNode !== h2.node || v2.anchorOffset !== h2.offset || v2.focusNode !== f2.node || v2.focusOffset !== f2.offset) && (q2 = q2.createRange(), q2.setStart(h2.node, h2.offset), v2.removeAllRanges(), J2 > g2 ? (v2.addRange(q2), v2.extend(f2.node, f2.offset)) : (q2.setEnd(f2.node, f2.offset), v2.addRange(q2))))));
      q2 = [];
      for (v2 = t2; v2 = v2.parentNode; )
        1 === v2.nodeType && q2.push({ element: v2, left: v2.scrollLeft, top: v2.scrollTop });
      "function" === typeof t2.focus && t2.focus();
      for (t2 = 0; t2 < q2.length; t2++)
        v2 = q2[t2], v2.element.scrollLeft = v2.left, v2.element.scrollTop = v2.top;
    }
    fd = !!kf;
    lf = kf = null;
    a88.current = c;
    Z = d2;
    do
      try {
        for (t2 = a88; null !== Z; ) {
          var K2 = Z.flags;
          K2 & 36 && Yi(t2, Z.alternate, Z);
          if (K2 & 128) {
            q2 = void 0;
            var Q2 = Z.ref;
            if (null !== Q2) {
              var L2 = Z.stateNode;
              switch (Z.tag) {
                case 5:
                  q2 = L2;
                  break;
                default:
                  q2 = L2;
              }
              "function" === typeof Q2 ? Q2(q2) : Q2.current = q2;
            }
          }
          Z = Z.nextEffect;
        }
      } catch (va) {
        if (null === Z)
          throw Error(y$1(330));
        Wi(Z, va);
        Z = Z.nextEffect;
      }
    while (null !== Z);
    Z = null;
    $f();
    X = e2;
  } else
    a88.current = c;
  if (xj)
    xj = false, yj = a88, zj = b;
  else
    for (Z = d2; null !== Z; )
      b = Z.nextEffect, Z.nextEffect = null, Z.flags & 8 && (K2 = Z, K2.sibling = null, K2.stateNode = null), Z = b;
  d2 = a88.pendingLanes;
  0 === d2 && (Ti = null);
  1 === d2 ? a88 === Ej ? Dj++ : (Dj = 0, Ej = a88) : Dj = 0;
  c = c.stateNode;
  if (Mf && "function" === typeof Mf.onCommitFiberRoot)
    try {
      Mf.onCommitFiberRoot(Lf, c, void 0, 64 === (c.current.flags & 64));
    } catch (va) {
    }
  Mj(a88, O());
  if (Qi)
    throw Qi = false, a88 = Ri, Ri = null, a88;
  if (0 !== (X & 8))
    return null;
  ig();
  return null;
}
function ek() {
  for (; null !== Z; ) {
    var a88 = Z.alternate;
    Jj || null === Ij || (0 !== (Z.flags & 8) ? dc(Z, Ij) && (Jj = true) : 13 === Z.tag && mj(a88, Z) && dc(Z, Ij) && (Jj = true));
    var b = Z.flags;
    0 !== (b & 256) && Xi(a88, Z);
    0 === (b & 512) || xj || (xj = true, hg(97, function() {
      Oj();
      return null;
    }));
    Z = Z.nextEffect;
  }
}
function Oj() {
  if (90 !== zj) {
    var a88 = 97 < zj ? 97 : zj;
    zj = 90;
    return gg(a88, fk);
  }
  return false;
}
function $i(a88, b) {
  Aj.push(b, a88);
  xj || (xj = true, hg(97, function() {
    Oj();
    return null;
  }));
}
function Zi(a88, b) {
  Bj.push(b, a88);
  xj || (xj = true, hg(97, function() {
    Oj();
    return null;
  }));
}
function fk() {
  if (null === yj)
    return false;
  var a88 = yj;
  yj = null;
  if (0 !== (X & 48))
    throw Error(y$1(331));
  var b = X;
  X |= 32;
  var c = Bj;
  Bj = [];
  for (var d2 = 0; d2 < c.length; d2 += 2) {
    var e2 = c[d2], f2 = c[d2 + 1], g2 = e2.destroy;
    e2.destroy = void 0;
    if ("function" === typeof g2)
      try {
        g2();
      } catch (k) {
        if (null === f2)
          throw Error(y$1(330));
        Wi(f2, k);
      }
  }
  c = Aj;
  Aj = [];
  for (d2 = 0; d2 < c.length; d2 += 2) {
    e2 = c[d2];
    f2 = c[d2 + 1];
    try {
      var h2 = e2.create;
      e2.destroy = h2();
    } catch (k) {
      if (null === f2)
        throw Error(y$1(330));
      Wi(f2, k);
    }
  }
  for (h2 = a88.current.firstEffect; null !== h2; )
    a88 = h2.nextEffect, h2.nextEffect = null, h2.flags & 8 && (h2.sibling = null, h2.stateNode = null), h2 = a88;
  X = b;
  ig();
  return true;
}
function gk(a88, b, c) {
  b = Mi(c, b);
  b = Pi(a88, b, 1);
  Ag(a88, b);
  b = Hg();
  a88 = Kj(a88, 1);
  null !== a88 && ($c(a88, 1, b), Mj(a88, b));
}
function Wi(a88, b) {
  if (3 === a88.tag)
    gk(a88, a88, b);
  else
    for (var c = a88.return; null !== c; ) {
      if (3 === c.tag) {
        gk(c, a88, b);
        break;
      } else if (1 === c.tag) {
        var d2 = c.stateNode;
        if ("function" === typeof c.type.getDerivedStateFromError || "function" === typeof d2.componentDidCatch && (null === Ti || !Ti.has(d2))) {
          a88 = Mi(b, a88);
          var e2 = Si(c, a88, 1);
          Ag(c, e2);
          e2 = Hg();
          c = Kj(c, 1);
          if (null !== c)
            $c(c, 1, e2), Mj(c, e2);
          else if ("function" === typeof d2.componentDidCatch && (null === Ti || !Ti.has(d2)))
            try {
              d2.componentDidCatch(b, a88);
            } catch (f2) {
            }
          break;
        }
      }
      c = c.return;
    }
}
function Yj(a88, b, c) {
  var d2 = a88.pingCache;
  null !== d2 && d2.delete(b);
  b = Hg();
  a88.pingedLanes |= a88.suspendedLanes & c;
  U === a88 && (W & c) === c && (4 === V || 3 === V && (W & 62914560) === W && 500 > O() - jj ? Qj(a88, 0) : uj |= c);
  Mj(a88, b);
}
function lj(a88, b) {
  var c = a88.stateNode;
  null !== c && c.delete(b);
  b = 0;
  0 === b && (b = a88.mode, 0 === (b & 2) ? b = 1 : 0 === (b & 4) ? b = 99 === eg() ? 1 : 2 : (0 === Gj && (Gj = tj), b = Yc(62914560 & ~Gj), 0 === b && (b = 4194304)));
  c = Hg();
  a88 = Kj(a88, b);
  null !== a88 && ($c(a88, b, c), Mj(a88, c));
}
var ck;
ck = function(a88, b, c) {
  var d2 = b.lanes;
  if (null !== a88)
    if (a88.memoizedProps !== b.pendingProps || N.current)
      ug = true;
    else if (0 !== (c & d2))
      ug = 0 !== (a88.flags & 16384) ? true : false;
    else {
      ug = false;
      switch (b.tag) {
        case 3:
          ri(b);
          sh();
          break;
        case 5:
          gh(b);
          break;
        case 1:
          Ff(b.type) && Jf(b);
          break;
        case 4:
          eh(b, b.stateNode.containerInfo);
          break;
        case 10:
          d2 = b.memoizedProps.value;
          var e2 = b.type._context;
          I(mg, e2._currentValue);
          e2._currentValue = d2;
          break;
        case 13:
          if (null !== b.memoizedState) {
            if (0 !== (c & b.child.childLanes))
              return ti(a88, b, c);
            I(P, P.current & 1);
            b = hi(a88, b, c);
            return null !== b ? b.sibling : null;
          }
          I(P, P.current & 1);
          break;
        case 19:
          d2 = 0 !== (c & b.childLanes);
          if (0 !== (a88.flags & 64)) {
            if (d2)
              return Ai(a88, b, c);
            b.flags |= 64;
          }
          e2 = b.memoizedState;
          null !== e2 && (e2.rendering = null, e2.tail = null, e2.lastEffect = null);
          I(P, P.current);
          if (d2)
            break;
          else
            return null;
        case 23:
        case 24:
          return b.lanes = 0, mi(a88, b, c);
      }
      return hi(a88, b, c);
    }
  else
    ug = false;
  b.lanes = 0;
  switch (b.tag) {
    case 2:
      d2 = b.type;
      null !== a88 && (a88.alternate = null, b.alternate = null, b.flags |= 2);
      a88 = b.pendingProps;
      e2 = Ef(b, M.current);
      tg(b, c);
      e2 = Ch(null, b, d2, a88, e2, c);
      b.flags |= 1;
      if ("object" === typeof e2 && null !== e2 && "function" === typeof e2.render && void 0 === e2.$$typeof) {
        b.tag = 1;
        b.memoizedState = null;
        b.updateQueue = null;
        if (Ff(d2)) {
          var f2 = true;
          Jf(b);
        } else
          f2 = false;
        b.memoizedState = null !== e2.state && void 0 !== e2.state ? e2.state : null;
        xg(b);
        var g2 = d2.getDerivedStateFromProps;
        "function" === typeof g2 && Gg(b, d2, g2, a88);
        e2.updater = Kg;
        b.stateNode = e2;
        e2._reactInternals = b;
        Og(b, d2, a88, c);
        b = qi(null, b, d2, true, f2, c);
      } else
        b.tag = 0, fi(null, b, e2, c), b = b.child;
      return b;
    case 16:
      e2 = b.elementType;
      a: {
        null !== a88 && (a88.alternate = null, b.alternate = null, b.flags |= 2);
        a88 = b.pendingProps;
        f2 = e2._init;
        e2 = f2(e2._payload);
        b.type = e2;
        f2 = b.tag = hk(e2);
        a88 = lg(e2, a88);
        switch (f2) {
          case 0:
            b = li(null, b, e2, a88, c);
            break a;
          case 1:
            b = pi(null, b, e2, a88, c);
            break a;
          case 11:
            b = gi(null, b, e2, a88, c);
            break a;
          case 14:
            b = ii(null, b, e2, lg(e2.type, a88), d2, c);
            break a;
        }
        throw Error(y$1(306, e2, ""));
      }
      return b;
    case 0:
      return d2 = b.type, e2 = b.pendingProps, e2 = b.elementType === d2 ? e2 : lg(d2, e2), li(a88, b, d2, e2, c);
    case 1:
      return d2 = b.type, e2 = b.pendingProps, e2 = b.elementType === d2 ? e2 : lg(d2, e2), pi(a88, b, d2, e2, c);
    case 3:
      ri(b);
      d2 = b.updateQueue;
      if (null === a88 || null === d2)
        throw Error(y$1(282));
      d2 = b.pendingProps;
      e2 = b.memoizedState;
      e2 = null !== e2 ? e2.element : null;
      yg(a88, b);
      Cg(b, d2, null, c);
      d2 = b.memoizedState.element;
      if (d2 === e2)
        sh(), b = hi(a88, b, c);
      else {
        e2 = b.stateNode;
        if (f2 = e2.hydrate)
          kh = rf(b.stateNode.containerInfo.firstChild), jh = b, f2 = lh = true;
        if (f2) {
          a88 = e2.mutableSourceEagerHydrationData;
          if (null != a88)
            for (e2 = 0; e2 < a88.length; e2 += 2)
              f2 = a88[e2], f2._workInProgressVersionPrimary = a88[e2 + 1], th.push(f2);
          c = Zg(b, null, d2, c);
          for (b.child = c; c; )
            c.flags = c.flags & -3 | 1024, c = c.sibling;
        } else
          fi(a88, b, d2, c), sh();
        b = b.child;
      }
      return b;
    case 5:
      return gh(b), null === a88 && ph(b), d2 = b.type, e2 = b.pendingProps, f2 = null !== a88 ? a88.memoizedProps : null, g2 = e2.children, nf(d2, e2) ? g2 = null : null !== f2 && nf(d2, f2) && (b.flags |= 16), oi(a88, b), fi(a88, b, g2, c), b.child;
    case 6:
      return null === a88 && ph(b), null;
    case 13:
      return ti(a88, b, c);
    case 4:
      return eh(b, b.stateNode.containerInfo), d2 = b.pendingProps, null === a88 ? b.child = Yg(b, null, d2, c) : fi(a88, b, d2, c), b.child;
    case 11:
      return d2 = b.type, e2 = b.pendingProps, e2 = b.elementType === d2 ? e2 : lg(d2, e2), gi(a88, b, d2, e2, c);
    case 7:
      return fi(a88, b, b.pendingProps, c), b.child;
    case 8:
      return fi(
        a88,
        b,
        b.pendingProps.children,
        c
      ), b.child;
    case 12:
      return fi(a88, b, b.pendingProps.children, c), b.child;
    case 10:
      a: {
        d2 = b.type._context;
        e2 = b.pendingProps;
        g2 = b.memoizedProps;
        f2 = e2.value;
        var h2 = b.type._context;
        I(mg, h2._currentValue);
        h2._currentValue = f2;
        if (null !== g2)
          if (h2 = g2.value, f2 = He(h2, f2) ? 0 : ("function" === typeof d2._calculateChangedBits ? d2._calculateChangedBits(h2, f2) : 1073741823) | 0, 0 === f2) {
            if (g2.children === e2.children && !N.current) {
              b = hi(a88, b, c);
              break a;
            }
          } else
            for (h2 = b.child, null !== h2 && (h2.return = b); null !== h2; ) {
              var k = h2.dependencies;
              if (null !== k) {
                g2 = h2.child;
                for (var l2 = k.firstContext; null !== l2; ) {
                  if (l2.context === d2 && 0 !== (l2.observedBits & f2)) {
                    1 === h2.tag && (l2 = zg(-1, c & -c), l2.tag = 2, Ag(h2, l2));
                    h2.lanes |= c;
                    l2 = h2.alternate;
                    null !== l2 && (l2.lanes |= c);
                    sg(h2.return, c);
                    k.lanes |= c;
                    break;
                  }
                  l2 = l2.next;
                }
              } else
                g2 = 10 === h2.tag ? h2.type === b.type ? null : h2.child : h2.child;
              if (null !== g2)
                g2.return = h2;
              else
                for (g2 = h2; null !== g2; ) {
                  if (g2 === b) {
                    g2 = null;
                    break;
                  }
                  h2 = g2.sibling;
                  if (null !== h2) {
                    h2.return = g2.return;
                    g2 = h2;
                    break;
                  }
                  g2 = g2.return;
                }
              h2 = g2;
            }
        fi(a88, b, e2.children, c);
        b = b.child;
      }
      return b;
    case 9:
      return e2 = b.type, f2 = b.pendingProps, d2 = f2.children, tg(b, c), e2 = vg(
        e2,
        f2.unstable_observedBits
      ), d2 = d2(e2), b.flags |= 1, fi(a88, b, d2, c), b.child;
    case 14:
      return e2 = b.type, f2 = lg(e2, b.pendingProps), f2 = lg(e2.type, f2), ii(a88, b, e2, f2, d2, c);
    case 15:
      return ki(a88, b, b.type, b.pendingProps, d2, c);
    case 17:
      return d2 = b.type, e2 = b.pendingProps, e2 = b.elementType === d2 ? e2 : lg(d2, e2), null !== a88 && (a88.alternate = null, b.alternate = null, b.flags |= 2), b.tag = 1, Ff(d2) ? (a88 = true, Jf(b)) : a88 = false, tg(b, c), Mg(b, d2, e2), Og(b, d2, e2, c), qi(null, b, d2, true, a88, c);
    case 19:
      return Ai(a88, b, c);
    case 23:
      return mi(a88, b, c);
    case 24:
      return mi(a88, b, c);
  }
  throw Error(y$1(156, b.tag));
};
function ik(a88, b, c, d2) {
  this.tag = a88;
  this.key = c;
  this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
  this.index = 0;
  this.ref = null;
  this.pendingProps = b;
  this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
  this.mode = d2;
  this.flags = 0;
  this.lastEffect = this.firstEffect = this.nextEffect = null;
  this.childLanes = this.lanes = 0;
  this.alternate = null;
}
function nh(a88, b, c, d2) {
  return new ik(a88, b, c, d2);
}
function ji(a88) {
  a88 = a88.prototype;
  return !(!a88 || !a88.isReactComponent);
}
function hk(a88) {
  if ("function" === typeof a88)
    return ji(a88) ? 1 : 0;
  if (void 0 !== a88 && null !== a88) {
    a88 = a88.$$typeof;
    if (a88 === Aa)
      return 11;
    if (a88 === Da)
      return 14;
  }
  return 2;
}
function Tg(a88, b) {
  var c = a88.alternate;
  null === c ? (c = nh(a88.tag, b, a88.key, a88.mode), c.elementType = a88.elementType, c.type = a88.type, c.stateNode = a88.stateNode, c.alternate = a88, a88.alternate = c) : (c.pendingProps = b, c.type = a88.type, c.flags = 0, c.nextEffect = null, c.firstEffect = null, c.lastEffect = null);
  c.childLanes = a88.childLanes;
  c.lanes = a88.lanes;
  c.child = a88.child;
  c.memoizedProps = a88.memoizedProps;
  c.memoizedState = a88.memoizedState;
  c.updateQueue = a88.updateQueue;
  b = a88.dependencies;
  c.dependencies = null === b ? null : { lanes: b.lanes, firstContext: b.firstContext };
  c.sibling = a88.sibling;
  c.index = a88.index;
  c.ref = a88.ref;
  return c;
}
function Vg(a88, b, c, d2, e2, f2) {
  var g2 = 2;
  d2 = a88;
  if ("function" === typeof a88)
    ji(a88) && (g2 = 1);
  else if ("string" === typeof a88)
    g2 = 5;
  else
    a:
      switch (a88) {
        case ua:
          return Xg(c.children, e2, f2, b);
        case Ha:
          g2 = 8;
          e2 |= 16;
          break;
        case wa:
          g2 = 8;
          e2 |= 1;
          break;
        case xa:
          return a88 = nh(12, c, b, e2 | 8), a88.elementType = xa, a88.type = xa, a88.lanes = f2, a88;
        case Ba:
          return a88 = nh(13, c, b, e2), a88.type = Ba, a88.elementType = Ba, a88.lanes = f2, a88;
        case Ca:
          return a88 = nh(19, c, b, e2), a88.elementType = Ca, a88.lanes = f2, a88;
        case Ia:
          return vi(c, e2, f2, b);
        case Ja:
          return a88 = nh(24, c, b, e2), a88.elementType = Ja, a88.lanes = f2, a88;
        default:
          if ("object" === typeof a88 && null !== a88)
            switch (a88.$$typeof) {
              case ya:
                g2 = 10;
                break a;
              case za:
                g2 = 9;
                break a;
              case Aa:
                g2 = 11;
                break a;
              case Da:
                g2 = 14;
                break a;
              case Ea:
                g2 = 16;
                d2 = null;
                break a;
              case Fa:
                g2 = 22;
                break a;
            }
          throw Error(y$1(130, null == a88 ? a88 : typeof a88, ""));
      }
  b = nh(g2, c, b, e2);
  b.elementType = a88;
  b.type = d2;
  b.lanes = f2;
  return b;
}
function Xg(a88, b, c, d2) {
  a88 = nh(7, a88, d2, b);
  a88.lanes = c;
  return a88;
}
function vi(a88, b, c, d2) {
  a88 = nh(23, a88, d2, b);
  a88.elementType = Ia;
  a88.lanes = c;
  return a88;
}
function Ug(a88, b, c) {
  a88 = nh(6, a88, null, b);
  a88.lanes = c;
  return a88;
}
function Wg(a88, b, c) {
  b = nh(4, null !== a88.children ? a88.children : [], a88.key, b);
  b.lanes = c;
  b.stateNode = { containerInfo: a88.containerInfo, pendingChildren: null, implementation: a88.implementation };
  return b;
}
function jk(a88, b, c) {
  this.tag = b;
  this.containerInfo = a88;
  this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
  this.timeoutHandle = -1;
  this.pendingContext = this.context = null;
  this.hydrate = c;
  this.callbackNode = null;
  this.callbackPriority = 0;
  this.eventTimes = Zc(0);
  this.expirationTimes = Zc(-1);
  this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
  this.entanglements = Zc(0);
  this.mutableSourceEagerHydrationData = null;
}
function kk(a88, b, c) {
  var d2 = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
  return { $$typeof: ta, key: null == d2 ? null : "" + d2, children: a88, containerInfo: b, implementation: c };
}
function lk(a88, b, c, d2) {
  var e2 = b.current, f2 = Hg(), g2 = Ig(e2);
  a:
    if (c) {
      c = c._reactInternals;
      b: {
        if (Zb(c) !== c || 1 !== c.tag)
          throw Error(y$1(170));
        var h2 = c;
        do {
          switch (h2.tag) {
            case 3:
              h2 = h2.stateNode.context;
              break b;
            case 1:
              if (Ff(h2.type)) {
                h2 = h2.stateNode.__reactInternalMemoizedMergedChildContext;
                break b;
              }
          }
          h2 = h2.return;
        } while (null !== h2);
        throw Error(y$1(171));
      }
      if (1 === c.tag) {
        var k = c.type;
        if (Ff(k)) {
          c = If(c, k, h2);
          break a;
        }
      }
      c = h2;
    } else
      c = Cf;
  null === b.context ? b.context = c : b.pendingContext = c;
  b = zg(f2, g2);
  b.payload = { element: a88 };
  d2 = void 0 === d2 ? null : d2;
  null !== d2 && (b.callback = d2);
  Ag(e2, b);
  Jg(e2, g2, f2);
  return g2;
}
function mk(a88) {
  a88 = a88.current;
  if (!a88.child)
    return null;
  switch (a88.child.tag) {
    case 5:
      return a88.child.stateNode;
    default:
      return a88.child.stateNode;
  }
}
function nk(a88, b) {
  a88 = a88.memoizedState;
  if (null !== a88 && null !== a88.dehydrated) {
    var c = a88.retryLane;
    a88.retryLane = 0 !== c && c < b ? c : b;
  }
}
function ok$1(a88, b) {
  nk(a88, b);
  (a88 = a88.alternate) && nk(a88, b);
}
function pk() {
  return null;
}
function qk(a88, b, c) {
  var d2 = null != c && null != c.hydrationOptions && c.hydrationOptions.mutableSources || null;
  c = new jk(a88, b, null != c && true === c.hydrate);
  b = nh(3, null, null, 2 === b ? 7 : 1 === b ? 3 : 0);
  c.current = b;
  b.stateNode = c;
  xg(b);
  a88[ff] = c.current;
  cf(8 === a88.nodeType ? a88.parentNode : a88);
  if (d2)
    for (a88 = 0; a88 < d2.length; a88++) {
      b = d2[a88];
      var e2 = b._getVersion;
      e2 = e2(b._source);
      null == c.mutableSourceEagerHydrationData ? c.mutableSourceEagerHydrationData = [b, e2] : c.mutableSourceEagerHydrationData.push(b, e2);
    }
  this._internalRoot = c;
}
qk.prototype.render = function(a88) {
  lk(a88, this._internalRoot, null, null);
};
qk.prototype.unmount = function() {
  var a88 = this._internalRoot, b = a88.containerInfo;
  lk(null, a88, null, function() {
    b[ff] = null;
  });
};
function rk(a88) {
  return !(!a88 || 1 !== a88.nodeType && 9 !== a88.nodeType && 11 !== a88.nodeType && (8 !== a88.nodeType || " react-mount-point-unstable " !== a88.nodeValue));
}
function sk(a88, b) {
  b || (b = a88 ? 9 === a88.nodeType ? a88.documentElement : a88.firstChild : null, b = !(!b || 1 !== b.nodeType || !b.hasAttribute("data-reactroot")));
  if (!b)
    for (var c; c = a88.lastChild; )
      a88.removeChild(c);
  return new qk(a88, 0, b ? { hydrate: true } : void 0);
}
function tk(a88, b, c, d2, e2) {
  var f2 = c._reactRootContainer;
  if (f2) {
    var g2 = f2._internalRoot;
    if ("function" === typeof e2) {
      var h2 = e2;
      e2 = function() {
        var a92 = mk(g2);
        h2.call(a92);
      };
    }
    lk(b, g2, a88, e2);
  } else {
    f2 = c._reactRootContainer = sk(c, d2);
    g2 = f2._internalRoot;
    if ("function" === typeof e2) {
      var k = e2;
      e2 = function() {
        var a92 = mk(g2);
        k.call(a92);
      };
    }
    Xj(function() {
      lk(b, g2, a88, e2);
    });
  }
  return mk(g2);
}
ec = function(a88) {
  if (13 === a88.tag) {
    var b = Hg();
    Jg(a88, 4, b);
    ok$1(a88, 4);
  }
};
fc = function(a88) {
  if (13 === a88.tag) {
    var b = Hg();
    Jg(a88, 67108864, b);
    ok$1(a88, 67108864);
  }
};
gc = function(a88) {
  if (13 === a88.tag) {
    var b = Hg(), c = Ig(a88);
    Jg(a88, c, b);
    ok$1(a88, c);
  }
};
hc = function(a88, b) {
  return b();
};
yb = function(a88, b, c) {
  switch (b) {
    case "input":
      ab(a88, c);
      b = c.name;
      if ("radio" === c.type && null != b) {
        for (c = a88; c.parentNode; )
          c = c.parentNode;
        c = c.querySelectorAll("input[name=" + JSON.stringify("" + b) + '][type="radio"]');
        for (b = 0; b < c.length; b++) {
          var d2 = c[b];
          if (d2 !== a88 && d2.form === a88.form) {
            var e2 = Db(d2);
            if (!e2)
              throw Error(y$1(90));
            Wa(d2);
            ab(d2, e2);
          }
        }
      }
      break;
    case "textarea":
      ib(a88, c);
      break;
    case "select":
      b = c.value, null != b && fb(a88, !!c.multiple, b, false);
  }
};
Gb = Wj;
Hb = function(a88, b, c, d2, e2) {
  var f2 = X;
  X |= 4;
  try {
    return gg(98, a88.bind(null, b, c, d2, e2));
  } finally {
    X = f2, 0 === X && (wj(), ig());
  }
};
Ib = function() {
  0 === (X & 49) && (Vj(), Oj());
};
Jb = function(a88, b) {
  var c = X;
  X |= 2;
  try {
    return a88(b);
  } finally {
    X = c, 0 === X && (wj(), ig());
  }
};
function uk(a88, b) {
  var c = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
  if (!rk(b))
    throw Error(y$1(200));
  return kk(a88, b, null, c);
}
var vk = { Events: [Cb, ue, Db, Eb, Fb, Oj, { current: false }] }, wk = { findFiberByHostInstance: wc, bundleType: 0, version: "17.0.2", rendererPackageName: "react-dom" };
var xk = { bundleType: wk.bundleType, version: wk.version, rendererPackageName: wk.rendererPackageName, rendererConfig: wk.rendererConfig, overrideHookState: null, overrideHookStateDeletePath: null, overrideHookStateRenamePath: null, overrideProps: null, overridePropsDeletePath: null, overridePropsRenamePath: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: ra.ReactCurrentDispatcher, findHostInstanceByFiber: function(a88) {
  a88 = cc(a88);
  return null === a88 ? null : a88.stateNode;
}, findFiberByHostInstance: wk.findFiberByHostInstance || pk, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null };
if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
  var yk = __REACT_DEVTOOLS_GLOBAL_HOOK__;
  if (!yk.isDisabled && yk.supportsFiber)
    try {
      Lf = yk.inject(xk), Mf = yk;
    } catch (a88) {
    }
}
reactDom_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = vk;
reactDom_production_min.createPortal = uk;
reactDom_production_min.findDOMNode = function(a88) {
  if (null == a88)
    return null;
  if (1 === a88.nodeType)
    return a88;
  var b = a88._reactInternals;
  if (void 0 === b) {
    if ("function" === typeof a88.render)
      throw Error(y$1(188));
    throw Error(y$1(268, Object.keys(a88)));
  }
  a88 = cc(b);
  a88 = null === a88 ? null : a88.stateNode;
  return a88;
};
reactDom_production_min.flushSync = function(a88, b) {
  var c = X;
  if (0 !== (c & 48))
    return a88(b);
  X |= 1;
  try {
    if (a88)
      return gg(99, a88.bind(null, b));
  } finally {
    X = c, ig();
  }
};
reactDom_production_min.hydrate = function(a88, b, c) {
  if (!rk(b))
    throw Error(y$1(200));
  return tk(null, a88, b, true, c);
};
reactDom_production_min.render = function(a88, b, c) {
  if (!rk(b))
    throw Error(y$1(200));
  return tk(null, a88, b, false, c);
};
reactDom_production_min.unmountComponentAtNode = function(a88) {
  if (!rk(a88))
    throw Error(y$1(40));
  return a88._reactRootContainer ? (Xj(function() {
    tk(null, null, a88, false, function() {
      a88._reactRootContainer = null;
      a88[ff] = null;
    });
  }), true) : false;
};
reactDom_production_min.unstable_batchedUpdates = Wj;
reactDom_production_min.unstable_createPortal = function(a88, b) {
  return uk(a88, b, 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null);
};
reactDom_production_min.unstable_renderSubtreeIntoContainer = function(a88, b, c, d2) {
  if (!rk(c))
    throw Error(y$1(200));
  if (null == a88 || void 0 === a88._reactInternals)
    throw Error(y$1(38));
  return tk(a88, b, c, false, d2);
};
reactDom_production_min.version = "17.0.2";
function checkDCE() {
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
    return;
  }
  try {
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    console.error(err);
  }
}
{
  checkDCE();
  reactDom.exports = reactDom_production_min;
}
var reactDomExports = reactDom.exports;
const ReactDOM = /* @__PURE__ */ getDefaultExportFromCjs$2(reactDomExports);
var jsxRuntime = { exports: {} };
var reactJsxRuntime_production_min = {};
/** @license React v17.0.2
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var f$1 = reactExports, g = 60103;
reactJsxRuntime_production_min.Fragment = 60107;
if ("function" === typeof Symbol && Symbol.for) {
  var h$1 = Symbol.for;
  g = h$1("react.element");
  reactJsxRuntime_production_min.Fragment = h$1("react.fragment");
}
var m$1 = f$1.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, n$1 = Object.prototype.hasOwnProperty, p = { key: true, ref: true, __self: true, __source: true };
function q(c, a88, k) {
  var b, d2 = {}, e2 = null, l2 = null;
  void 0 !== k && (e2 = "" + k);
  void 0 !== a88.key && (e2 = "" + a88.key);
  void 0 !== a88.ref && (l2 = a88.ref);
  for (b in a88)
    n$1.call(a88, b) && !p.hasOwnProperty(b) && (d2[b] = a88[b]);
  if (c && c.defaultProps)
    for (b in a88 = c.defaultProps, a88)
      void 0 === d2[b] && (d2[b] = a88[b]);
  return { $$typeof: g, type: c, key: e2, ref: l2, props: d2, _owner: m$1.current };
}
reactJsxRuntime_production_min.jsx = q;
reactJsxRuntime_production_min.jsxs = q;
{
  jsxRuntime.exports = reactJsxRuntime_production_min;
}
var jsxRuntimeExports = jsxRuntime.exports;
const jsx = jsxRuntimeExports.jsx;
const jsxs = jsxRuntimeExports.jsxs;
const Fragment = jsxRuntimeExports.Fragment;
var define_process_env_default = {};
var qr = Object.defineProperty;
var Gr = (a92, u2, c) => u2 in a92 ? qr(a92, u2, { enumerable: true, configurable: true, writable: true, value: c }) : a92[u2] = c;
var ht = (a92, u2, c) => (Gr(a92, typeof u2 != "symbol" ? u2 + "" : u2, c), c);
let currentSubId = 0;
const subscribers = /* @__PURE__ */ new Map(), subscribersInternal = /* @__PURE__ */ new Map();
function createSubscribe(a92 = {}) {
  return function(u2) {
    if (typeof u2 != "function")
      return;
    const c = a92.internal ? subscribersInternal : subscribers, l2 = ++currentSubId;
    return c.set(l2, u2), () => {
      c.delete(l2);
    };
  };
}
function createOn(a92 = {}) {
  return function(u2, c) {
    return (a92.internal ? subscribeInternal : subscribe)((v2, S2) => {
      if (u2 === v2)
        return c(S2);
    });
  };
}
function createTrigger(a92 = {}) {
  const u2 = a92.internal ? subscribersInternal : subscribers;
  return async function(c, ...l2) {
    let v2 = { type: c, payload: l2[0] };
    const S2 = a92.internal ? "Internal" : "External";
    log$1.info(`${S2} Event:`, v2), await Promise.all(Array.from(u2.values()).map((g2) => g2(v2.type, v2.payload)));
  };
}
const trigger$1 = createTrigger(), subscribe = createSubscribe(), on = createOn(), triggerInternal$1 = createTrigger({ internal: true }), subscribeInternal = createSubscribe({ internal: true }), onInternal = createOn({ internal: true });
var commonjsGlobal$1 = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
function getDefaultExportFromCjs$1(a92) {
  return a92 && a92.__esModule && Object.prototype.hasOwnProperty.call(a92, "default") ? a92.default : a92;
}
function getAugmentedNamespace(a92) {
  if (a92.__esModule)
    return a92;
  var u2 = a92.default;
  if (typeof u2 == "function") {
    var c = function l2() {
      return this instanceof l2 ? Reflect.construct(u2, arguments, this.constructor) : u2.apply(this, arguments);
    };
    c.prototype = u2.prototype;
  } else
    c = {};
  return Object.defineProperty(c, "__esModule", { value: true }), Object.keys(a92).forEach(function(l2) {
    var v2 = Object.getOwnPropertyDescriptor(a92, l2);
    Object.defineProperty(c, l2, v2.get ? v2 : { enumerable: true, get: function() {
      return a92[l2];
    } });
  }), c;
}
var loglevel$1 = { exports: {} };
(function(a92) {
  (function(u2, c) {
    a92.exports ? a92.exports = c() : u2.log = c();
  })(commonjsGlobal$1, function() {
    var u2 = function() {
    }, c = "undefined", l2 = typeof window !== c && typeof window.navigator !== c && /Trident\/|MSIE /.test(window.navigator.userAgent), v2 = ["trace", "debug", "info", "warn", "error"], S2 = {}, g2 = null;
    function E2(q2, G2) {
      var H2 = q2[G2];
      if (typeof H2.bind == "function")
        return H2.bind(q2);
      try {
        return Function.prototype.bind.call(H2, q2);
      } catch {
        return function() {
          return Function.prototype.apply.apply(H2, [q2, arguments]);
        };
      }
    }
    function _() {
      console.log && (console.log.apply ? console.log.apply(console, arguments) : Function.prototype.apply.apply(console.log, [console, arguments])), console.trace && console.trace();
    }
    function k(q2) {
      return q2 === "debug" && (q2 = "log"), typeof console === c ? false : q2 === "trace" && l2 ? _ : console[q2] !== void 0 ? E2(console, q2) : console.log !== void 0 ? E2(console, "log") : u2;
    }
    function L2() {
      for (var q2 = this.getLevel(), G2 = 0; G2 < v2.length; G2++) {
        var H2 = v2[G2];
        this[H2] = G2 < q2 ? u2 : this.methodFactory(H2, q2, this.name);
      }
      if (this.log = this.debug, typeof console === c && q2 < this.levels.SILENT)
        return "No console available for logging";
    }
    function M2(q2) {
      return function() {
        typeof console !== c && (L2.call(this), this[q2].apply(this, arguments));
      };
    }
    function $(q2, G2, H2) {
      return k(q2) || M2.apply(this, arguments);
    }
    function J2(q2, G2) {
      var H2 = this, B2, Y2, ne2, Z2 = "loglevel";
      typeof q2 == "string" ? Z2 += ":" + q2 : typeof q2 == "symbol" && (Z2 = void 0);
      function re2(D2) {
        var W2 = (v2[D2] || "silent").toUpperCase();
        if (!(typeof window === c || !Z2)) {
          try {
            window.localStorage[Z2] = W2;
            return;
          } catch {
          }
          try {
            window.document.cookie = encodeURIComponent(Z2) + "=" + W2 + ";";
          } catch {
          }
        }
      }
      function oe2() {
        var D2;
        if (!(typeof window === c || !Z2)) {
          try {
            D2 = window.localStorage[Z2];
          } catch {
          }
          if (typeof D2 === c)
            try {
              var W2 = window.document.cookie, ee2 = encodeURIComponent(Z2), ae2 = W2.indexOf(ee2 + "=");
              ae2 !== -1 && (D2 = /^([^;]+)/.exec(W2.slice(ae2 + ee2.length + 1))[1]);
            } catch {
            }
          return H2.levels[D2] === void 0 && (D2 = void 0), D2;
        }
      }
      function de2() {
        if (!(typeof window === c || !Z2)) {
          try {
            window.localStorage.removeItem(Z2);
          } catch {
          }
          try {
            window.document.cookie = encodeURIComponent(Z2) + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC";
          } catch {
          }
        }
      }
      function A2(D2) {
        var W2 = D2;
        if (typeof W2 == "string" && H2.levels[W2.toUpperCase()] !== void 0 && (W2 = H2.levels[W2.toUpperCase()]), typeof W2 == "number" && W2 >= 0 && W2 <= H2.levels.SILENT)
          return W2;
        throw new TypeError("log.setLevel() called with invalid level: " + D2);
      }
      H2.name = q2, H2.levels = { TRACE: 0, DEBUG: 1, INFO: 2, WARN: 3, ERROR: 4, SILENT: 5 }, H2.methodFactory = G2 || $, H2.getLevel = function() {
        return ne2 ?? Y2 ?? B2;
      }, H2.setLevel = function(D2, W2) {
        return ne2 = A2(D2), W2 !== false && re2(ne2), L2.call(H2);
      }, H2.setDefaultLevel = function(D2) {
        Y2 = A2(D2), oe2() || H2.setLevel(D2, false);
      }, H2.resetLevel = function() {
        ne2 = null, de2(), L2.call(H2);
      }, H2.enableAll = function(D2) {
        H2.setLevel(H2.levels.TRACE, D2);
      }, H2.disableAll = function(D2) {
        H2.setLevel(H2.levels.SILENT, D2);
      }, H2.rebuild = function() {
        if (g2 !== H2 && (B2 = A2(g2.getLevel())), L2.call(H2), g2 === H2)
          for (var D2 in S2)
            S2[D2].rebuild();
      }, B2 = A2(g2 ? g2.getLevel() : "WARN");
      var N2 = oe2();
      N2 != null && (ne2 = A2(N2)), L2.call(H2);
    }
    g2 = new J2(), g2.getLogger = function(G2) {
      if (typeof G2 != "symbol" && typeof G2 != "string" || G2 === "")
        throw new TypeError("You must supply a name when creating a logger.");
      var H2 = S2[G2];
      return H2 || (H2 = S2[G2] = new J2(G2, g2.methodFactory)), H2;
    };
    var V2 = typeof window !== c ? window.log : void 0;
    return g2.noConflict = function() {
      return typeof window !== c && window.log === g2 && (window.log = V2), g2;
    }, g2.getLoggers = function() {
      return S2;
    }, g2.default = g2, g2;
  });
})(loglevel$1);
var loglevelExports$1 = loglevel$1.exports;
const log$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(loglevelExports$1), connectionId$1 = (Math.random() * 1e20).toString(36), version$5 = "3.0.3", CoreContext = {
  config: null,
  // TODO: Rename to client
  clients: null,
  Request: {},
  Command: {},
  on,
  subscribe,
  /** @private @internal */
  onInternal,
  /** @private @internal */
  subscribeInternal,
  /** @private @internal */
  trigger: trigger$1,
  /** @private @internal */
  triggerInternal: triggerInternal$1,
  /** @private @internal */
  state: {},
  compositor: {},
  connectionId: connectionId$1,
  version: version$5,
  /** @private @internal */
  rendererVersion: version$5,
  log: log$1,
  logLevel: null
}, setAppState = (a92) => {
  Object.keys(a92).forEach((u2) => {
    CoreContext.state[u2] = a92[u2];
  });
};
var freeGlobal = typeof global == "object" && global && global.Object === Object && global, freeSelf = typeof self == "object" && self && self.Object === Object && self, root = freeGlobal || freeSelf || Function("return this")(), Symbol$1 = root.Symbol, objectProto$m = Object.prototype, hasOwnProperty$f = objectProto$m.hasOwnProperty, nativeObjectToString$1 = objectProto$m.toString, symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : void 0;
function getRawTag(a92) {
  var u2 = hasOwnProperty$f.call(a92, symToStringTag$1), c = a92[symToStringTag$1];
  try {
    a92[symToStringTag$1] = void 0;
    var l2 = true;
  } catch {
  }
  var v2 = nativeObjectToString$1.call(a92);
  return l2 && (u2 ? a92[symToStringTag$1] = c : delete a92[symToStringTag$1]), v2;
}
var objectProto$l = Object.prototype, nativeObjectToString = objectProto$l.toString;
function objectToString$7(a92) {
  return nativeObjectToString.call(a92);
}
var nullTag = "[object Null]", undefinedTag = "[object Undefined]", symToStringTag = Symbol$1 ? Symbol$1.toStringTag : void 0;
function baseGetTag(a92) {
  return a92 == null ? a92 === void 0 ? undefinedTag : nullTag : symToStringTag && symToStringTag in Object(a92) ? getRawTag(a92) : objectToString$7(a92);
}
function isObjectLike$7(a92) {
  return a92 != null && typeof a92 == "object";
}
var symbolTag$6 = "[object Symbol]";
function isSymbol$3(a92) {
  return typeof a92 == "symbol" || isObjectLike$7(a92) && baseGetTag(a92) == symbolTag$6;
}
function arrayMap$1(a92, u2) {
  for (var c = -1, l2 = a92 == null ? 0 : a92.length, v2 = Array(l2); ++c < l2; )
    v2[c] = u2(a92[c], c, a92);
  return v2;
}
var isArray$5 = Array.isArray, INFINITY$4 = 1 / 0, symbolProto$2 = Symbol$1 ? Symbol$1.prototype : void 0, symbolToString = symbolProto$2 ? symbolProto$2.toString : void 0;
function baseToString(a92) {
  if (typeof a92 == "string")
    return a92;
  if (isArray$5(a92))
    return arrayMap$1(a92, baseToString) + "";
  if (isSymbol$3(a92))
    return symbolToString ? symbolToString.call(a92) : "";
  var u2 = a92 + "";
  return u2 == "0" && 1 / a92 == -INFINITY$4 ? "-0" : u2;
}
var reWhitespace = /\s/;
function trimmedEndIndex(a92) {
  for (var u2 = a92.length; u2-- && reWhitespace.test(a92.charAt(u2)); )
    ;
  return u2;
}
var reTrimStart = /^\s+/;
function baseTrim(a92) {
  return a92 && a92.slice(0, trimmedEndIndex(a92) + 1).replace(reTrimStart, "");
}
function isObject$9(a92) {
  var u2 = typeof a92;
  return a92 != null && (u2 == "object" || u2 == "function");
}
var NAN$3 = NaN, reIsBadHex$3 = /^[-+]0x[0-9a-f]+$/i, reIsBinary$3 = /^0b[01]+$/i, reIsOctal$3 = /^0o[0-7]+$/i, freeParseInt$3 = parseInt;
function toNumber$3(a92) {
  if (typeof a92 == "number")
    return a92;
  if (isSymbol$3(a92))
    return NAN$3;
  if (isObject$9(a92)) {
    var u2 = typeof a92.valueOf == "function" ? a92.valueOf() : a92;
    a92 = isObject$9(u2) ? u2 + "" : u2;
  }
  if (typeof a92 != "string")
    return a92 === 0 ? a92 : +a92;
  a92 = baseTrim(a92);
  var c = reIsBinary$3.test(a92);
  return c || reIsOctal$3.test(a92) ? freeParseInt$3(a92.slice(2), c ? 2 : 8) : reIsBadHex$3.test(a92) ? NAN$3 : +a92;
}
function identity$1(a92) {
  return a92;
}
var asyncTag = "[object AsyncFunction]", funcTag$3 = "[object Function]", genTag$2 = "[object GeneratorFunction]", proxyTag = "[object Proxy]";
function isFunction$4(a92) {
  if (!isObject$9(a92))
    return false;
  var u2 = baseGetTag(a92);
  return u2 == funcTag$3 || u2 == genTag$2 || u2 == asyncTag || u2 == proxyTag;
}
var coreJsData = root["__core-js_shared__"], maskSrcKey = function() {
  var a92 = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
  return a92 ? "Symbol(src)_1." + a92 : "";
}();
function isMasked(a92) {
  return !!maskSrcKey && maskSrcKey in a92;
}
var funcProto$3 = Function.prototype, funcToString$3 = funcProto$3.toString;
function toSource(a92) {
  if (a92 != null) {
    try {
      return funcToString$3.call(a92);
    } catch {
    }
    try {
      return a92 + "";
    } catch {
    }
  }
  return "";
}
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reIsHostCtor = /^\[object .+?Constructor\]$/, funcProto$2 = Function.prototype, objectProto$k = Object.prototype, funcToString$2 = funcProto$2.toString, hasOwnProperty$e = objectProto$k.hasOwnProperty, reIsNative = RegExp("^" + funcToString$2.call(hasOwnProperty$e).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
function baseIsNative(a92) {
  if (!isObject$9(a92) || isMasked(a92))
    return false;
  var u2 = isFunction$4(a92) ? reIsNative : reIsHostCtor;
  return u2.test(toSource(a92));
}
function getValue(a92, u2) {
  return a92 == null ? void 0 : a92[u2];
}
function getNative(a92, u2) {
  var c = getValue(a92, u2);
  return baseIsNative(c) ? c : void 0;
}
var WeakMap$2 = getNative(root, "WeakMap"), objectCreate$1 = Object.create, baseCreate = /* @__PURE__ */ function() {
  function a92() {
  }
  return function(u2) {
    if (!isObject$9(u2))
      return {};
    if (objectCreate$1)
      return objectCreate$1(u2);
    a92.prototype = u2;
    var c = new a92();
    return a92.prototype = void 0, c;
  };
}();
function apply(a92, u2, c) {
  switch (c.length) {
    case 0:
      return a92.call(u2);
    case 1:
      return a92.call(u2, c[0]);
    case 2:
      return a92.call(u2, c[0], c[1]);
    case 3:
      return a92.call(u2, c[0], c[1], c[2]);
  }
  return a92.apply(u2, c);
}
function copyArray(a92, u2) {
  var c = -1, l2 = a92.length;
  for (u2 || (u2 = Array(l2)); ++c < l2; )
    u2[c] = a92[c];
  return u2;
}
var HOT_COUNT = 800, HOT_SPAN = 16, nativeNow = Date.now;
function shortOut(a92) {
  var u2 = 0, c = 0;
  return function() {
    var l2 = nativeNow(), v2 = HOT_SPAN - (l2 - c);
    if (c = l2, v2 > 0) {
      if (++u2 >= HOT_COUNT)
        return arguments[0];
    } else
      u2 = 0;
    return a92.apply(void 0, arguments);
  };
}
function constant(a92) {
  return function() {
    return a92;
  };
}
var defineProperty$1 = function() {
  try {
    var a92 = getNative(Object, "defineProperty");
    return a92({}, "", {}), a92;
  } catch {
  }
}(), baseSetToString = defineProperty$1 ? function(a92, u2) {
  return defineProperty$1(a92, "toString", { configurable: true, enumerable: false, value: constant(u2), writable: true });
} : identity$1;
const baseSetToString$1 = baseSetToString;
var setToString = shortOut(baseSetToString$1);
function arrayEach(a92, u2) {
  for (var c = -1, l2 = a92 == null ? 0 : a92.length; ++c < l2 && u2(a92[c], c, a92) !== false; )
    ;
  return a92;
}
function baseFindIndex$1(a92, u2, c, l2) {
  for (var v2 = a92.length, S2 = c + (l2 ? 1 : -1); l2 ? S2-- : ++S2 < v2; )
    if (u2(a92[S2], S2, a92))
      return S2;
  return -1;
}
function baseIsNaN$1(a92) {
  return a92 !== a92;
}
function strictIndexOf(a92, u2, c) {
  for (var l2 = c - 1, v2 = a92.length; ++l2 < v2; )
    if (a92[l2] === u2)
      return l2;
  return -1;
}
function baseIndexOf$1(a92, u2, c) {
  return u2 === u2 ? strictIndexOf(a92, u2, c) : baseFindIndex$1(a92, baseIsNaN$1, c);
}
var MAX_SAFE_INTEGER$2 = 9007199254740991, reIsUint$1 = /^(?:0|[1-9]\d*)$/;
function isIndex$1(a92, u2) {
  var c = typeof a92;
  return u2 = u2 ?? MAX_SAFE_INTEGER$2, !!u2 && (c == "number" || c != "symbol" && reIsUint$1.test(a92)) && a92 > -1 && a92 % 1 == 0 && a92 < u2;
}
function baseAssignValue(a92, u2, c) {
  u2 == "__proto__" && defineProperty$1 ? defineProperty$1(a92, u2, { configurable: true, enumerable: true, value: c, writable: true }) : a92[u2] = c;
}
function eq(a92, u2) {
  return a92 === u2 || a92 !== a92 && u2 !== u2;
}
var objectProto$j = Object.prototype, hasOwnProperty$d = objectProto$j.hasOwnProperty;
function assignValue(a92, u2, c) {
  var l2 = a92[u2];
  (!(hasOwnProperty$d.call(a92, u2) && eq(l2, c)) || c === void 0 && !(u2 in a92)) && baseAssignValue(a92, u2, c);
}
function copyObject(a92, u2, c, l2) {
  var v2 = !c;
  c || (c = {});
  for (var S2 = -1, g2 = u2.length; ++S2 < g2; ) {
    var E2 = u2[S2], _ = l2 ? l2(c[E2], a92[E2], E2, c, a92) : void 0;
    _ === void 0 && (_ = a92[E2]), v2 ? baseAssignValue(c, E2, _) : assignValue(c, E2, _);
  }
  return c;
}
var nativeMax$2 = Math.max;
function overRest(a92, u2, c) {
  return u2 = nativeMax$2(u2 === void 0 ? a92.length - 1 : u2, 0), function() {
    for (var l2 = arguments, v2 = -1, S2 = nativeMax$2(l2.length - u2, 0), g2 = Array(S2); ++v2 < S2; )
      g2[v2] = l2[u2 + v2];
    v2 = -1;
    for (var E2 = Array(u2 + 1); ++v2 < u2; )
      E2[v2] = l2[v2];
    return E2[u2] = c(g2), apply(a92, this, E2);
  };
}
function baseRest(a92, u2) {
  return setToString(overRest(a92, u2, identity$1), a92 + "");
}
var MAX_SAFE_INTEGER$1 = 9007199254740991;
function isLength$1(a92) {
  return typeof a92 == "number" && a92 > -1 && a92 % 1 == 0 && a92 <= MAX_SAFE_INTEGER$1;
}
function isArrayLike$2(a92) {
  return a92 != null && isLength$1(a92.length) && !isFunction$4(a92);
}
function isIterateeCall(a92, u2, c) {
  if (!isObject$9(c))
    return false;
  var l2 = typeof u2;
  return (l2 == "number" ? isArrayLike$2(c) && isIndex$1(u2, c.length) : l2 == "string" && u2 in c) ? eq(c[u2], a92) : false;
}
var objectProto$i = Object.prototype;
function isPrototype$1(a92) {
  var u2 = a92 && a92.constructor, c = typeof u2 == "function" && u2.prototype || objectProto$i;
  return a92 === c;
}
function baseTimes$1(a92, u2) {
  for (var c = -1, l2 = Array(a92); ++c < a92; )
    l2[c] = u2(c);
  return l2;
}
var argsTag$4 = "[object Arguments]";
function baseIsArguments(a92) {
  return isObjectLike$7(a92) && baseGetTag(a92) == argsTag$4;
}
var objectProto$h = Object.prototype, hasOwnProperty$c = objectProto$h.hasOwnProperty, propertyIsEnumerable$2 = objectProto$h.propertyIsEnumerable, isArguments$1 = baseIsArguments(/* @__PURE__ */ function() {
  return arguments;
}()) ? baseIsArguments : function(a92) {
  return isObjectLike$7(a92) && hasOwnProperty$c.call(a92, "callee") && !propertyIsEnumerable$2.call(a92, "callee");
};
function stubFalse() {
  return false;
}
var freeExports$2 = typeof exports == "object" && exports && !exports.nodeType && exports, freeModule$2 = freeExports$2 && typeof module == "object" && module && !module.nodeType && module, moduleExports$2 = freeModule$2 && freeModule$2.exports === freeExports$2, Buffer$9 = moduleExports$2 ? root.Buffer : void 0, nativeIsBuffer = Buffer$9 ? Buffer$9.isBuffer : void 0, isBuffer$1 = nativeIsBuffer || stubFalse, argsTag$3 = "[object Arguments]", arrayTag$2 = "[object Array]", boolTag$4 = "[object Boolean]", dateTag$3 = "[object Date]", errorTag$2 = "[object Error]", funcTag$2 = "[object Function]", mapTag$5 = "[object Map]", numberTag$4 = "[object Number]", objectTag$5 = "[object Object]", regexpTag$3 = "[object RegExp]", setTag$5 = "[object Set]", stringTag$5 = "[object String]", weakMapTag$2 = "[object WeakMap]", arrayBufferTag$3 = "[object ArrayBuffer]", dataViewTag$4 = "[object DataView]", float32Tag$2 = "[object Float32Array]", float64Tag$2 = "[object Float64Array]", int8Tag$2 = "[object Int8Array]", int16Tag$2 = "[object Int16Array]", int32Tag$2 = "[object Int32Array]", uint8Tag$2 = "[object Uint8Array]", uint8ClampedTag$2 = "[object Uint8ClampedArray]", uint16Tag$2 = "[object Uint16Array]", uint32Tag$2 = "[object Uint32Array]", typedArrayTags = {};
typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] = typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] = typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] = typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] = typedArrayTags[uint32Tag$2] = true;
typedArrayTags[argsTag$3] = typedArrayTags[arrayTag$2] = typedArrayTags[arrayBufferTag$3] = typedArrayTags[boolTag$4] = typedArrayTags[dataViewTag$4] = typedArrayTags[dateTag$3] = typedArrayTags[errorTag$2] = typedArrayTags[funcTag$2] = typedArrayTags[mapTag$5] = typedArrayTags[numberTag$4] = typedArrayTags[objectTag$5] = typedArrayTags[regexpTag$3] = typedArrayTags[setTag$5] = typedArrayTags[stringTag$5] = typedArrayTags[weakMapTag$2] = false;
function baseIsTypedArray(a92) {
  return isObjectLike$7(a92) && isLength$1(a92.length) && !!typedArrayTags[baseGetTag(a92)];
}
function baseUnary(a92) {
  return function(u2) {
    return a92(u2);
  };
}
var freeExports$1 = typeof exports == "object" && exports && !exports.nodeType && exports, freeModule$1 = freeExports$1 && typeof module == "object" && module && !module.nodeType && module, moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1, freeProcess = moduleExports$1 && freeGlobal.process, nodeUtil = function() {
  try {
    var a92 = freeModule$1 && freeModule$1.require && freeModule$1.require("util").types;
    return a92 || freeProcess && freeProcess.binding && freeProcess.binding("util");
  } catch {
  }
}(), nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray, isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray, objectProto$g = Object.prototype, hasOwnProperty$b = objectProto$g.hasOwnProperty;
function arrayLikeKeys$1(a92, u2) {
  var c = isArray$5(a92), l2 = !c && isArguments$1(a92), v2 = !c && !l2 && isBuffer$1(a92), S2 = !c && !l2 && !v2 && isTypedArray(a92), g2 = c || l2 || v2 || S2, E2 = g2 ? baseTimes$1(a92.length, String) : [], _ = E2.length;
  for (var k in a92)
    (u2 || hasOwnProperty$b.call(a92, k)) && !(g2 && // Safari 9 has enumerable `arguments.length` in strict mode.
    (k == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
    v2 && (k == "offset" || k == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
    S2 && (k == "buffer" || k == "byteLength" || k == "byteOffset") || // Skip index properties.
    isIndex$1(k, _))) && E2.push(k);
  return E2;
}
function overArg$2(a92, u2) {
  return function(c) {
    return a92(u2(c));
  };
}
var nativeKeys$1 = overArg$2(Object.keys, Object), objectProto$f = Object.prototype, hasOwnProperty$a = objectProto$f.hasOwnProperty;
function baseKeys$1(a92) {
  if (!isPrototype$1(a92))
    return nativeKeys$1(a92);
  var u2 = [];
  for (var c in Object(a92))
    hasOwnProperty$a.call(a92, c) && c != "constructor" && u2.push(c);
  return u2;
}
function keys$2(a92) {
  return isArrayLike$2(a92) ? arrayLikeKeys$1(a92) : baseKeys$1(a92);
}
function nativeKeysIn(a92) {
  var u2 = [];
  if (a92 != null)
    for (var c in Object(a92))
      u2.push(c);
  return u2;
}
var objectProto$e = Object.prototype, hasOwnProperty$9 = objectProto$e.hasOwnProperty;
function baseKeysIn(a92) {
  if (!isObject$9(a92))
    return nativeKeysIn(a92);
  var u2 = isPrototype$1(a92), c = [];
  for (var l2 in a92)
    l2 == "constructor" && (u2 || !hasOwnProperty$9.call(a92, l2)) || c.push(l2);
  return c;
}
function keysIn(a92) {
  return isArrayLike$2(a92) ? arrayLikeKeys$1(a92, true) : baseKeysIn(a92);
}
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/;
function isKey(a92, u2) {
  if (isArray$5(a92))
    return false;
  var c = typeof a92;
  return c == "number" || c == "symbol" || c == "boolean" || a92 == null || isSymbol$3(a92) ? true : reIsPlainProp.test(a92) || !reIsDeepProp.test(a92) || u2 != null && a92 in Object(u2);
}
var nativeCreate = getNative(Object, "create");
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {}, this.size = 0;
}
function hashDelete(a92) {
  var u2 = this.has(a92) && delete this.__data__[a92];
  return this.size -= u2 ? 1 : 0, u2;
}
var HASH_UNDEFINED$2 = "__lodash_hash_undefined__", objectProto$d = Object.prototype, hasOwnProperty$8 = objectProto$d.hasOwnProperty;
function hashGet(a92) {
  var u2 = this.__data__;
  if (nativeCreate) {
    var c = u2[a92];
    return c === HASH_UNDEFINED$2 ? void 0 : c;
  }
  return hasOwnProperty$8.call(u2, a92) ? u2[a92] : void 0;
}
var objectProto$c = Object.prototype, hasOwnProperty$7 = objectProto$c.hasOwnProperty;
function hashHas(a92) {
  var u2 = this.__data__;
  return nativeCreate ? u2[a92] !== void 0 : hasOwnProperty$7.call(u2, a92);
}
var HASH_UNDEFINED$1 = "__lodash_hash_undefined__";
function hashSet(a92, u2) {
  var c = this.__data__;
  return this.size += this.has(a92) ? 0 : 1, c[a92] = nativeCreate && u2 === void 0 ? HASH_UNDEFINED$1 : u2, this;
}
function Hash(a92) {
  var u2 = -1, c = a92 == null ? 0 : a92.length;
  for (this.clear(); ++u2 < c; ) {
    var l2 = a92[u2];
    this.set(l2[0], l2[1]);
  }
}
Hash.prototype.clear = hashClear;
Hash.prototype.delete = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;
function listCacheClear() {
  this.__data__ = [], this.size = 0;
}
function assocIndexOf(a92, u2) {
  for (var c = a92.length; c--; )
    if (eq(a92[c][0], u2))
      return c;
  return -1;
}
var arrayProto$1 = Array.prototype, splice$1 = arrayProto$1.splice;
function listCacheDelete(a92) {
  var u2 = this.__data__, c = assocIndexOf(u2, a92);
  if (c < 0)
    return false;
  var l2 = u2.length - 1;
  return c == l2 ? u2.pop() : splice$1.call(u2, c, 1), --this.size, true;
}
function listCacheGet(a92) {
  var u2 = this.__data__, c = assocIndexOf(u2, a92);
  return c < 0 ? void 0 : u2[c][1];
}
function listCacheHas(a92) {
  return assocIndexOf(this.__data__, a92) > -1;
}
function listCacheSet(a92, u2) {
  var c = this.__data__, l2 = assocIndexOf(c, a92);
  return l2 < 0 ? (++this.size, c.push([a92, u2])) : c[l2][1] = u2, this;
}
function ListCache(a92) {
  var u2 = -1, c = a92 == null ? 0 : a92.length;
  for (this.clear(); ++u2 < c; ) {
    var l2 = a92[u2];
    this.set(l2[0], l2[1]);
  }
}
ListCache.prototype.clear = listCacheClear;
ListCache.prototype.delete = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;
var Map$1 = getNative(root, "Map");
function mapCacheClear() {
  this.size = 0, this.__data__ = { hash: new Hash(), map: new (Map$1 || ListCache)(), string: new Hash() };
}
function isKeyable(a92) {
  var u2 = typeof a92;
  return u2 == "string" || u2 == "number" || u2 == "symbol" || u2 == "boolean" ? a92 !== "__proto__" : a92 === null;
}
function getMapData(a92, u2) {
  var c = a92.__data__;
  return isKeyable(u2) ? c[typeof u2 == "string" ? "string" : "hash"] : c.map;
}
function mapCacheDelete(a92) {
  var u2 = getMapData(this, a92).delete(a92);
  return this.size -= u2 ? 1 : 0, u2;
}
function mapCacheGet(a92) {
  return getMapData(this, a92).get(a92);
}
function mapCacheHas(a92) {
  return getMapData(this, a92).has(a92);
}
function mapCacheSet(a92, u2) {
  var c = getMapData(this, a92), l2 = c.size;
  return c.set(a92, u2), this.size += c.size == l2 ? 0 : 1, this;
}
function MapCache(a92) {
  var u2 = -1, c = a92 == null ? 0 : a92.length;
  for (this.clear(); ++u2 < c; ) {
    var l2 = a92[u2];
    this.set(l2[0], l2[1]);
  }
}
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype.delete = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;
var FUNC_ERROR_TEXT$2 = "Expected a function";
function memoize(a92, u2) {
  if (typeof a92 != "function" || u2 != null && typeof u2 != "function")
    throw new TypeError(FUNC_ERROR_TEXT$2);
  var c = function() {
    var l2 = arguments, v2 = u2 ? u2.apply(this, l2) : l2[0], S2 = c.cache;
    if (S2.has(v2))
      return S2.get(v2);
    var g2 = a92.apply(this, l2);
    return c.cache = S2.set(v2, g2) || S2, g2;
  };
  return c.cache = new (memoize.Cache || MapCache)(), c;
}
memoize.Cache = MapCache;
var MAX_MEMOIZE_SIZE = 500;
function memoizeCapped(a92) {
  var u2 = memoize(a92, function(l2) {
    return c.size === MAX_MEMOIZE_SIZE && c.clear(), l2;
  }), c = u2.cache;
  return u2;
}
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g, reEscapeChar = /\\(\\)?/g, stringToPath = memoizeCapped(function(a92) {
  var u2 = [];
  return a92.charCodeAt(0) === 46 && u2.push(""), a92.replace(rePropName, function(c, l2, v2, S2) {
    u2.push(v2 ? S2.replace(reEscapeChar, "$1") : l2 || c);
  }), u2;
});
function toString$3(a92) {
  return a92 == null ? "" : baseToString(a92);
}
function castPath(a92, u2) {
  return isArray$5(a92) ? a92 : isKey(a92, u2) ? [a92] : stringToPath(toString$3(a92));
}
var INFINITY$3 = 1 / 0;
function toKey(a92) {
  if (typeof a92 == "string" || isSymbol$3(a92))
    return a92;
  var u2 = a92 + "";
  return u2 == "0" && 1 / a92 == -INFINITY$3 ? "-0" : u2;
}
function baseGet(a92, u2) {
  u2 = castPath(u2, a92);
  for (var c = 0, l2 = u2.length; a92 != null && c < l2; )
    a92 = a92[toKey(u2[c++])];
  return c && c == l2 ? a92 : void 0;
}
function get(a92, u2, c) {
  var l2 = a92 == null ? void 0 : baseGet(a92, u2);
  return l2 === void 0 ? c : l2;
}
function arrayPush(a92, u2) {
  for (var c = -1, l2 = u2.length, v2 = a92.length; ++c < l2; )
    a92[v2 + c] = u2[c];
  return a92;
}
var spreadableSymbol = Symbol$1 ? Symbol$1.isConcatSpreadable : void 0;
function isFlattenable(a92) {
  return isArray$5(a92) || isArguments$1(a92) || !!(spreadableSymbol && a92 && a92[spreadableSymbol]);
}
function baseFlatten(a92, u2, c, l2, v2) {
  var S2 = -1, g2 = a92.length;
  for (c || (c = isFlattenable), v2 || (v2 = []); ++S2 < g2; ) {
    var E2 = a92[S2];
    u2 > 0 && c(E2) ? u2 > 1 ? baseFlatten(E2, u2 - 1, c, l2, v2) : arrayPush(v2, E2) : l2 || (v2[v2.length] = E2);
  }
  return v2;
}
function flatten(a92) {
  var u2 = a92 == null ? 0 : a92.length;
  return u2 ? baseFlatten(a92, 1) : [];
}
function flatRest(a92) {
  return setToString(overRest(a92, void 0, flatten), a92 + "");
}
var getPrototype$1 = overArg$2(Object.getPrototypeOf, Object);
const getPrototype$2 = getPrototype$1;
var objectTag$4 = "[object Object]", funcProto$1 = Function.prototype, objectProto$b = Object.prototype, funcToString$1 = funcProto$1.toString, hasOwnProperty$6 = objectProto$b.hasOwnProperty, objectCtorString$1 = funcToString$1.call(Object);
function isPlainObject$3(a92) {
  if (!isObjectLike$7(a92) || baseGetTag(a92) != objectTag$4)
    return false;
  var u2 = getPrototype$2(a92);
  if (u2 === null)
    return true;
  var c = hasOwnProperty$6.call(u2, "constructor") && u2.constructor;
  return typeof c == "function" && c instanceof c && funcToString$1.call(c) == objectCtorString$1;
}
function baseSlice(a92, u2, c) {
  var l2 = -1, v2 = a92.length;
  u2 < 0 && (u2 = -u2 > v2 ? 0 : v2 + u2), c = c > v2 ? v2 : c, c < 0 && (c += v2), v2 = u2 > c ? 0 : c - u2 >>> 0, u2 >>>= 0;
  for (var S2 = Array(v2); ++l2 < v2; )
    S2[l2] = a92[l2 + u2];
  return S2;
}
function castSlice(a92, u2, c) {
  var l2 = a92.length;
  return c = c === void 0 ? l2 : c, !u2 && c >= l2 ? a92 : baseSlice(a92, u2, c);
}
var rsAstralRange$2 = "\\ud800-\\udfff", rsComboMarksRange$3 = "\\u0300-\\u036f", reComboHalfMarksRange$3 = "\\ufe20-\\ufe2f", rsComboSymbolsRange$3 = "\\u20d0-\\u20ff", rsComboRange$3 = rsComboMarksRange$3 + reComboHalfMarksRange$3 + rsComboSymbolsRange$3, rsVarRange$2 = "\\ufe0e\\ufe0f", rsZWJ$2 = "\\u200d", reHasUnicode = RegExp("[" + rsZWJ$2 + rsAstralRange$2 + rsComboRange$3 + rsVarRange$2 + "]");
function hasUnicode(a92) {
  return reHasUnicode.test(a92);
}
function asciiToArray(a92) {
  return a92.split("");
}
var rsAstralRange$1 = "\\ud800-\\udfff", rsComboMarksRange$2 = "\\u0300-\\u036f", reComboHalfMarksRange$2 = "\\ufe20-\\ufe2f", rsComboSymbolsRange$2 = "\\u20d0-\\u20ff", rsComboRange$2 = rsComboMarksRange$2 + reComboHalfMarksRange$2 + rsComboSymbolsRange$2, rsVarRange$1 = "\\ufe0e\\ufe0f", rsAstral = "[" + rsAstralRange$1 + "]", rsCombo$2 = "[" + rsComboRange$2 + "]", rsFitz$1 = "\\ud83c[\\udffb-\\udfff]", rsModifier$1 = "(?:" + rsCombo$2 + "|" + rsFitz$1 + ")", rsNonAstral$1 = "[^" + rsAstralRange$1 + "]", rsRegional$1 = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair$1 = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsZWJ$1 = "\\u200d", reOptMod$1 = rsModifier$1 + "?", rsOptVar$1 = "[" + rsVarRange$1 + "]?", rsOptJoin$1 = "(?:" + rsZWJ$1 + "(?:" + [rsNonAstral$1, rsRegional$1, rsSurrPair$1].join("|") + ")" + rsOptVar$1 + reOptMod$1 + ")*", rsSeq$1 = rsOptVar$1 + reOptMod$1 + rsOptJoin$1, rsSymbol = "(?:" + [rsNonAstral$1 + rsCombo$2 + "?", rsCombo$2, rsRegional$1, rsSurrPair$1, rsAstral].join("|") + ")", reUnicode = RegExp(rsFitz$1 + "(?=" + rsFitz$1 + ")|" + rsSymbol + rsSeq$1, "g");
function unicodeToArray(a92) {
  return a92.match(reUnicode) || [];
}
function stringToArray(a92) {
  return hasUnicode(a92) ? unicodeToArray(a92) : asciiToArray(a92);
}
function createCaseFirst(a92) {
  return function(u2) {
    u2 = toString$3(u2);
    var c = hasUnicode(u2) ? stringToArray(u2) : void 0, l2 = c ? c[0] : u2.charAt(0), v2 = c ? castSlice(c, 1).join("") : u2.slice(1);
    return l2[a92]() + v2;
  };
}
var upperFirst = createCaseFirst("toUpperCase");
function capitalize(a92) {
  return upperFirst(toString$3(a92).toLowerCase());
}
function arrayReduce(a92, u2, c, l2) {
  var v2 = -1, S2 = a92 == null ? 0 : a92.length;
  for (l2 && S2 && (c = a92[++v2]); ++v2 < S2; )
    c = u2(c, a92[v2], v2, a92);
  return c;
}
function basePropertyOf(a92) {
  return function(u2) {
    return a92 == null ? void 0 : a92[u2];
  };
}
var deburredLetters = {
  // Latin-1 Supplement block.
  À: "A",
  Á: "A",
  Â: "A",
  Ã: "A",
  Ä: "A",
  Å: "A",
  à: "a",
  á: "a",
  â: "a",
  ã: "a",
  ä: "a",
  å: "a",
  Ç: "C",
  ç: "c",
  Ð: "D",
  ð: "d",
  È: "E",
  É: "E",
  Ê: "E",
  Ë: "E",
  è: "e",
  é: "e",
  ê: "e",
  ë: "e",
  Ì: "I",
  Í: "I",
  Î: "I",
  Ï: "I",
  ì: "i",
  í: "i",
  î: "i",
  ï: "i",
  Ñ: "N",
  ñ: "n",
  Ò: "O",
  Ó: "O",
  Ô: "O",
  Õ: "O",
  Ö: "O",
  Ø: "O",
  ò: "o",
  ó: "o",
  ô: "o",
  õ: "o",
  ö: "o",
  ø: "o",
  Ù: "U",
  Ú: "U",
  Û: "U",
  Ü: "U",
  ù: "u",
  ú: "u",
  û: "u",
  ü: "u",
  Ý: "Y",
  ý: "y",
  ÿ: "y",
  Æ: "Ae",
  æ: "ae",
  Þ: "Th",
  þ: "th",
  ß: "ss",
  // Latin Extended-A block.
  Ā: "A",
  Ă: "A",
  Ą: "A",
  ā: "a",
  ă: "a",
  ą: "a",
  Ć: "C",
  Ĉ: "C",
  Ċ: "C",
  Č: "C",
  ć: "c",
  ĉ: "c",
  ċ: "c",
  č: "c",
  Ď: "D",
  Đ: "D",
  ď: "d",
  đ: "d",
  Ē: "E",
  Ĕ: "E",
  Ė: "E",
  Ę: "E",
  Ě: "E",
  ē: "e",
  ĕ: "e",
  ė: "e",
  ę: "e",
  ě: "e",
  Ĝ: "G",
  Ğ: "G",
  Ġ: "G",
  Ģ: "G",
  ĝ: "g",
  ğ: "g",
  ġ: "g",
  ģ: "g",
  Ĥ: "H",
  Ħ: "H",
  ĥ: "h",
  ħ: "h",
  Ĩ: "I",
  Ī: "I",
  Ĭ: "I",
  Į: "I",
  İ: "I",
  ĩ: "i",
  ī: "i",
  ĭ: "i",
  į: "i",
  ı: "i",
  Ĵ: "J",
  ĵ: "j",
  Ķ: "K",
  ķ: "k",
  ĸ: "k",
  Ĺ: "L",
  Ļ: "L",
  Ľ: "L",
  Ŀ: "L",
  Ł: "L",
  ĺ: "l",
  ļ: "l",
  ľ: "l",
  ŀ: "l",
  ł: "l",
  Ń: "N",
  Ņ: "N",
  Ň: "N",
  Ŋ: "N",
  ń: "n",
  ņ: "n",
  ň: "n",
  ŋ: "n",
  Ō: "O",
  Ŏ: "O",
  Ő: "O",
  ō: "o",
  ŏ: "o",
  ő: "o",
  Ŕ: "R",
  Ŗ: "R",
  Ř: "R",
  ŕ: "r",
  ŗ: "r",
  ř: "r",
  Ś: "S",
  Ŝ: "S",
  Ş: "S",
  Š: "S",
  ś: "s",
  ŝ: "s",
  ş: "s",
  š: "s",
  Ţ: "T",
  Ť: "T",
  Ŧ: "T",
  ţ: "t",
  ť: "t",
  ŧ: "t",
  Ũ: "U",
  Ū: "U",
  Ŭ: "U",
  Ů: "U",
  Ű: "U",
  Ų: "U",
  ũ: "u",
  ū: "u",
  ŭ: "u",
  ů: "u",
  ű: "u",
  ų: "u",
  Ŵ: "W",
  ŵ: "w",
  Ŷ: "Y",
  ŷ: "y",
  Ÿ: "Y",
  Ź: "Z",
  Ż: "Z",
  Ž: "Z",
  ź: "z",
  ż: "z",
  ž: "z",
  Ĳ: "IJ",
  ĳ: "ij",
  Œ: "Oe",
  œ: "oe",
  ŉ: "'n",
  ſ: "s"
}, deburrLetter = basePropertyOf(deburredLetters);
const deburrLetter$1 = deburrLetter;
var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g, rsComboMarksRange$1 = "\\u0300-\\u036f", reComboHalfMarksRange$1 = "\\ufe20-\\ufe2f", rsComboSymbolsRange$1 = "\\u20d0-\\u20ff", rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1, rsCombo$1 = "[" + rsComboRange$1 + "]", reComboMark = RegExp(rsCombo$1, "g");
function deburr(a92) {
  return a92 = toString$3(a92), a92 && a92.replace(reLatin, deburrLetter$1).replace(reComboMark, "");
}
var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
function asciiWords(a92) {
  return a92.match(reAsciiWord) || [];
}
var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
function hasUnicodeWord(a92) {
  return reHasUnicodeWord.test(a92);
}
var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange, rsApos$1 = "['’]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d", rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos$1 + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos$1 + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq, reUnicodeWord = RegExp([rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")", rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")", rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower, rsUpper + "+" + rsOptContrUpper, rsOrdUpper, rsOrdLower, rsDigits, rsEmoji].join("|"), "g");
function unicodeWords(a92) {
  return a92.match(reUnicodeWord) || [];
}
function words(a92, u2, c) {
  return a92 = toString$3(a92), u2 = c ? void 0 : u2, u2 === void 0 ? hasUnicodeWord(a92) ? unicodeWords(a92) : asciiWords(a92) : a92.match(u2) || [];
}
var rsApos = "['’]", reApos = RegExp(rsApos, "g");
function createCompounder(a92) {
  return function(u2) {
    return arrayReduce(words(deburr(u2).replace(reApos, "")), a92, "");
  };
}
var camelCase$2 = createCompounder(function(a92, u2, c) {
  return u2 = u2.toLowerCase(), a92 + (c ? capitalize(u2) : u2);
});
const camelCase$3 = camelCase$2;
function stackClear() {
  this.__data__ = new ListCache(), this.size = 0;
}
function stackDelete(a92) {
  var u2 = this.__data__, c = u2.delete(a92);
  return this.size = u2.size, c;
}
function stackGet(a92) {
  return this.__data__.get(a92);
}
function stackHas(a92) {
  return this.__data__.has(a92);
}
var LARGE_ARRAY_SIZE = 200;
function stackSet(a92, u2) {
  var c = this.__data__;
  if (c instanceof ListCache) {
    var l2 = c.__data__;
    if (!Map$1 || l2.length < LARGE_ARRAY_SIZE - 1)
      return l2.push([a92, u2]), this.size = ++c.size, this;
    c = this.__data__ = new MapCache(l2);
  }
  return c.set(a92, u2), this.size = c.size, this;
}
function Stack(a92) {
  var u2 = this.__data__ = new ListCache(a92);
  this.size = u2.size;
}
Stack.prototype.clear = stackClear;
Stack.prototype.delete = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;
function baseAssign(a92, u2) {
  return a92 && copyObject(u2, keys$2(u2), a92);
}
function baseAssignIn(a92, u2) {
  return a92 && copyObject(u2, keysIn(u2), a92);
}
var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports, freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module, moduleExports = freeModule && freeModule.exports === freeExports, Buffer$8 = moduleExports ? root.Buffer : void 0, allocUnsafe = Buffer$8 ? Buffer$8.allocUnsafe : void 0;
function cloneBuffer(a92, u2) {
  if (u2)
    return a92.slice();
  var c = a92.length, l2 = allocUnsafe ? allocUnsafe(c) : new a92.constructor(c);
  return a92.copy(l2), l2;
}
function arrayFilter(a92, u2) {
  for (var c = -1, l2 = a92 == null ? 0 : a92.length, v2 = 0, S2 = []; ++c < l2; ) {
    var g2 = a92[c];
    u2(g2, c, a92) && (S2[v2++] = g2);
  }
  return S2;
}
function stubArray() {
  return [];
}
var objectProto$a = Object.prototype, propertyIsEnumerable$1 = objectProto$a.propertyIsEnumerable, nativeGetSymbols$1 = Object.getOwnPropertySymbols, getSymbols = nativeGetSymbols$1 ? function(a92) {
  return a92 == null ? [] : (a92 = Object(a92), arrayFilter(nativeGetSymbols$1(a92), function(u2) {
    return propertyIsEnumerable$1.call(a92, u2);
  }));
} : stubArray;
function copySymbols(a92, u2) {
  return copyObject(a92, getSymbols(a92), u2);
}
var nativeGetSymbols = Object.getOwnPropertySymbols, getSymbolsIn = nativeGetSymbols ? function(a92) {
  for (var u2 = []; a92; )
    arrayPush(u2, getSymbols(a92)), a92 = getPrototype$2(a92);
  return u2;
} : stubArray;
function copySymbolsIn(a92, u2) {
  return copyObject(a92, getSymbolsIn(a92), u2);
}
function baseGetAllKeys(a92, u2, c) {
  var l2 = u2(a92);
  return isArray$5(a92) ? l2 : arrayPush(l2, c(a92));
}
function getAllKeys(a92) {
  return baseGetAllKeys(a92, keys$2, getSymbols);
}
function getAllKeysIn(a92) {
  return baseGetAllKeys(a92, keysIn, getSymbolsIn);
}
var DataView$1 = getNative(root, "DataView"), Promise$1 = getNative(root, "Promise"), Set$1 = getNative(root, "Set"), mapTag$4 = "[object Map]", objectTag$3 = "[object Object]", promiseTag = "[object Promise]", setTag$4 = "[object Set]", weakMapTag$1 = "[object WeakMap]", dataViewTag$3 = "[object DataView]", dataViewCtorString = toSource(DataView$1), mapCtorString = toSource(Map$1), promiseCtorString = toSource(Promise$1), setCtorString = toSource(Set$1), weakMapCtorString = toSource(WeakMap$2), getTag = baseGetTag;
(DataView$1 && getTag(new DataView$1(new ArrayBuffer(1))) != dataViewTag$3 || Map$1 && getTag(new Map$1()) != mapTag$4 || Promise$1 && getTag(Promise$1.resolve()) != promiseTag || Set$1 && getTag(new Set$1()) != setTag$4 || WeakMap$2 && getTag(new WeakMap$2()) != weakMapTag$1) && (getTag = function(a92) {
  var u2 = baseGetTag(a92), c = u2 == objectTag$3 ? a92.constructor : void 0, l2 = c ? toSource(c) : "";
  if (l2)
    switch (l2) {
      case dataViewCtorString:
        return dataViewTag$3;
      case mapCtorString:
        return mapTag$4;
      case promiseCtorString:
        return promiseTag;
      case setCtorString:
        return setTag$4;
      case weakMapCtorString:
        return weakMapTag$1;
    }
  return u2;
});
const getTag$1 = getTag;
var objectProto$9 = Object.prototype, hasOwnProperty$5 = objectProto$9.hasOwnProperty;
function initCloneArray(a92) {
  var u2 = a92.length, c = new a92.constructor(u2);
  return u2 && typeof a92[0] == "string" && hasOwnProperty$5.call(a92, "index") && (c.index = a92.index, c.input = a92.input), c;
}
var Uint8Array$1 = root.Uint8Array;
function cloneArrayBuffer(a92) {
  var u2 = new a92.constructor(a92.byteLength);
  return new Uint8Array$1(u2).set(new Uint8Array$1(a92)), u2;
}
function cloneDataView(a92, u2) {
  var c = u2 ? cloneArrayBuffer(a92.buffer) : a92.buffer;
  return new a92.constructor(c, a92.byteOffset, a92.byteLength);
}
var reFlags = /\w*$/;
function cloneRegExp(a92) {
  var u2 = new a92.constructor(a92.source, reFlags.exec(a92));
  return u2.lastIndex = a92.lastIndex, u2;
}
var symbolProto$1 = Symbol$1 ? Symbol$1.prototype : void 0, symbolValueOf$1 = symbolProto$1 ? symbolProto$1.valueOf : void 0;
function cloneSymbol(a92) {
  return symbolValueOf$1 ? Object(symbolValueOf$1.call(a92)) : {};
}
function cloneTypedArray(a92, u2) {
  var c = u2 ? cloneArrayBuffer(a92.buffer) : a92.buffer;
  return new a92.constructor(c, a92.byteOffset, a92.length);
}
var boolTag$3 = "[object Boolean]", dateTag$2 = "[object Date]", mapTag$3 = "[object Map]", numberTag$3 = "[object Number]", regexpTag$2 = "[object RegExp]", setTag$3 = "[object Set]", stringTag$4 = "[object String]", symbolTag$5 = "[object Symbol]", arrayBufferTag$2 = "[object ArrayBuffer]", dataViewTag$2 = "[object DataView]", float32Tag$1 = "[object Float32Array]", float64Tag$1 = "[object Float64Array]", int8Tag$1 = "[object Int8Array]", int16Tag$1 = "[object Int16Array]", int32Tag$1 = "[object Int32Array]", uint8Tag$1 = "[object Uint8Array]", uint8ClampedTag$1 = "[object Uint8ClampedArray]", uint16Tag$1 = "[object Uint16Array]", uint32Tag$1 = "[object Uint32Array]";
function initCloneByTag(a92, u2, c) {
  var l2 = a92.constructor;
  switch (u2) {
    case arrayBufferTag$2:
      return cloneArrayBuffer(a92);
    case boolTag$3:
    case dateTag$2:
      return new l2(+a92);
    case dataViewTag$2:
      return cloneDataView(a92, c);
    case float32Tag$1:
    case float64Tag$1:
    case int8Tag$1:
    case int16Tag$1:
    case int32Tag$1:
    case uint8Tag$1:
    case uint8ClampedTag$1:
    case uint16Tag$1:
    case uint32Tag$1:
      return cloneTypedArray(a92, c);
    case mapTag$3:
      return new l2();
    case numberTag$3:
    case stringTag$4:
      return new l2(a92);
    case regexpTag$2:
      return cloneRegExp(a92);
    case setTag$3:
      return new l2();
    case symbolTag$5:
      return cloneSymbol(a92);
  }
}
function initCloneObject(a92) {
  return typeof a92.constructor == "function" && !isPrototype$1(a92) ? baseCreate(getPrototype$2(a92)) : {};
}
var mapTag$2 = "[object Map]";
function baseIsMap(a92) {
  return isObjectLike$7(a92) && getTag$1(a92) == mapTag$2;
}
var nodeIsMap = nodeUtil && nodeUtil.isMap, isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap, setTag$2 = "[object Set]";
function baseIsSet(a92) {
  return isObjectLike$7(a92) && getTag$1(a92) == setTag$2;
}
var nodeIsSet = nodeUtil && nodeUtil.isSet, isSet$5 = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet, CLONE_DEEP_FLAG$3 = 1, CLONE_FLAT_FLAG$1 = 2, CLONE_SYMBOLS_FLAG$2 = 4, argsTag$2 = "[object Arguments]", arrayTag$1 = "[object Array]", boolTag$2 = "[object Boolean]", dateTag$1 = "[object Date]", errorTag$1 = "[object Error]", funcTag$1 = "[object Function]", genTag$1 = "[object GeneratorFunction]", mapTag$1 = "[object Map]", numberTag$2 = "[object Number]", objectTag$2 = "[object Object]", regexpTag$1 = "[object RegExp]", setTag$1 = "[object Set]", stringTag$3 = "[object String]", symbolTag$4 = "[object Symbol]", weakMapTag = "[object WeakMap]", arrayBufferTag$1 = "[object ArrayBuffer]", dataViewTag$1 = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]", cloneableTags = {};
cloneableTags[argsTag$2] = cloneableTags[arrayTag$1] = cloneableTags[arrayBufferTag$1] = cloneableTags[dataViewTag$1] = cloneableTags[boolTag$2] = cloneableTags[dateTag$1] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag$1] = cloneableTags[numberTag$2] = cloneableTags[objectTag$2] = cloneableTags[regexpTag$1] = cloneableTags[setTag$1] = cloneableTags[stringTag$3] = cloneableTags[symbolTag$4] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag$1] = cloneableTags[funcTag$1] = cloneableTags[weakMapTag] = false;
function baseClone(a92, u2, c, l2, v2, S2) {
  var g2, E2 = u2 & CLONE_DEEP_FLAG$3, _ = u2 & CLONE_FLAT_FLAG$1, k = u2 & CLONE_SYMBOLS_FLAG$2;
  if (c && (g2 = v2 ? c(a92, l2, v2, S2) : c(a92)), g2 !== void 0)
    return g2;
  if (!isObject$9(a92))
    return a92;
  var L2 = isArray$5(a92);
  if (L2) {
    if (g2 = initCloneArray(a92), !E2)
      return copyArray(a92, g2);
  } else {
    var M2 = getTag$1(a92), $ = M2 == funcTag$1 || M2 == genTag$1;
    if (isBuffer$1(a92))
      return cloneBuffer(a92, E2);
    if (M2 == objectTag$2 || M2 == argsTag$2 || $ && !v2) {
      if (g2 = _ || $ ? {} : initCloneObject(a92), !E2)
        return _ ? copySymbolsIn(a92, baseAssignIn(g2, a92)) : copySymbols(a92, baseAssign(g2, a92));
    } else {
      if (!cloneableTags[M2])
        return v2 ? a92 : {};
      g2 = initCloneByTag(a92, M2, E2);
    }
  }
  S2 || (S2 = new Stack());
  var J2 = S2.get(a92);
  if (J2)
    return J2;
  S2.set(a92, g2), isSet$5(a92) ? a92.forEach(function(G2) {
    g2.add(baseClone(G2, u2, c, G2, a92, S2));
  }) : isMap(a92) && a92.forEach(function(G2, H2) {
    g2.set(H2, baseClone(G2, u2, c, H2, a92, S2));
  });
  var V2 = k ? _ ? getAllKeysIn : getAllKeys : _ ? keysIn : keys$2, q2 = L2 ? void 0 : V2(a92);
  return arrayEach(q2 || a92, function(G2, H2) {
    q2 && (H2 = G2, G2 = a92[H2]), assignValue(g2, H2, baseClone(G2, u2, c, H2, a92, S2));
  }), g2;
}
var CLONE_DEEP_FLAG$2 = 1, CLONE_SYMBOLS_FLAG$1 = 4;
function cloneDeep$1(a92) {
  return baseClone(a92, CLONE_DEEP_FLAG$2 | CLONE_SYMBOLS_FLAG$1);
}
var HASH_UNDEFINED = "__lodash_hash_undefined__";
function setCacheAdd(a92) {
  return this.__data__.set(a92, HASH_UNDEFINED), this;
}
function setCacheHas(a92) {
  return this.__data__.has(a92);
}
function SetCache(a92) {
  var u2 = -1, c = a92 == null ? 0 : a92.length;
  for (this.__data__ = new MapCache(); ++u2 < c; )
    this.add(a92[u2]);
}
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;
function arraySome(a92, u2) {
  for (var c = -1, l2 = a92 == null ? 0 : a92.length; ++c < l2; )
    if (u2(a92[c], c, a92))
      return true;
  return false;
}
function cacheHas(a92, u2) {
  return a92.has(u2);
}
var COMPARE_PARTIAL_FLAG$5 = 1, COMPARE_UNORDERED_FLAG$3 = 2;
function equalArrays(a92, u2, c, l2, v2, S2) {
  var g2 = c & COMPARE_PARTIAL_FLAG$5, E2 = a92.length, _ = u2.length;
  if (E2 != _ && !(g2 && _ > E2))
    return false;
  var k = S2.get(a92), L2 = S2.get(u2);
  if (k && L2)
    return k == u2 && L2 == a92;
  var M2 = -1, $ = true, J2 = c & COMPARE_UNORDERED_FLAG$3 ? new SetCache() : void 0;
  for (S2.set(a92, u2), S2.set(u2, a92); ++M2 < E2; ) {
    var V2 = a92[M2], q2 = u2[M2];
    if (l2)
      var G2 = g2 ? l2(q2, V2, M2, u2, a92, S2) : l2(V2, q2, M2, a92, u2, S2);
    if (G2 !== void 0) {
      if (G2)
        continue;
      $ = false;
      break;
    }
    if (J2) {
      if (!arraySome(u2, function(H2, B2) {
        if (!cacheHas(J2, B2) && (V2 === H2 || v2(V2, H2, c, l2, S2)))
          return J2.push(B2);
      })) {
        $ = false;
        break;
      }
    } else if (!(V2 === q2 || v2(V2, q2, c, l2, S2))) {
      $ = false;
      break;
    }
  }
  return S2.delete(a92), S2.delete(u2), $;
}
function mapToArray(a92) {
  var u2 = -1, c = Array(a92.size);
  return a92.forEach(function(l2, v2) {
    c[++u2] = [v2, l2];
  }), c;
}
function setToArray(a92) {
  var u2 = -1, c = Array(a92.size);
  return a92.forEach(function(l2) {
    c[++u2] = l2;
  }), c;
}
var COMPARE_PARTIAL_FLAG$4 = 1, COMPARE_UNORDERED_FLAG$2 = 2, boolTag$1 = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", mapTag = "[object Map]", numberTag$1 = "[object Number]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag$2 = "[object String]", symbolTag$3 = "[object Symbol]", arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", symbolProto = Symbol$1 ? Symbol$1.prototype : void 0, symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
function equalByTag(a92, u2, c, l2, v2, S2, g2) {
  switch (c) {
    case dataViewTag:
      if (a92.byteLength != u2.byteLength || a92.byteOffset != u2.byteOffset)
        return false;
      a92 = a92.buffer, u2 = u2.buffer;
    case arrayBufferTag:
      return !(a92.byteLength != u2.byteLength || !S2(new Uint8Array$1(a92), new Uint8Array$1(u2)));
    case boolTag$1:
    case dateTag:
    case numberTag$1:
      return eq(+a92, +u2);
    case errorTag:
      return a92.name == u2.name && a92.message == u2.message;
    case regexpTag:
    case stringTag$2:
      return a92 == u2 + "";
    case mapTag:
      var E2 = mapToArray;
    case setTag:
      var _ = l2 & COMPARE_PARTIAL_FLAG$4;
      if (E2 || (E2 = setToArray), a92.size != u2.size && !_)
        return false;
      var k = g2.get(a92);
      if (k)
        return k == u2;
      l2 |= COMPARE_UNORDERED_FLAG$2, g2.set(a92, u2);
      var L2 = equalArrays(E2(a92), E2(u2), l2, v2, S2, g2);
      return g2.delete(a92), L2;
    case symbolTag$3:
      if (symbolValueOf)
        return symbolValueOf.call(a92) == symbolValueOf.call(u2);
  }
  return false;
}
var COMPARE_PARTIAL_FLAG$3 = 1, objectProto$8 = Object.prototype, hasOwnProperty$4 = objectProto$8.hasOwnProperty;
function equalObjects(a92, u2, c, l2, v2, S2) {
  var g2 = c & COMPARE_PARTIAL_FLAG$3, E2 = getAllKeys(a92), _ = E2.length, k = getAllKeys(u2), L2 = k.length;
  if (_ != L2 && !g2)
    return false;
  for (var M2 = _; M2--; ) {
    var $ = E2[M2];
    if (!(g2 ? $ in u2 : hasOwnProperty$4.call(u2, $)))
      return false;
  }
  var J2 = S2.get(a92), V2 = S2.get(u2);
  if (J2 && V2)
    return J2 == u2 && V2 == a92;
  var q2 = true;
  S2.set(a92, u2), S2.set(u2, a92);
  for (var G2 = g2; ++M2 < _; ) {
    $ = E2[M2];
    var H2 = a92[$], B2 = u2[$];
    if (l2)
      var Y2 = g2 ? l2(B2, H2, $, u2, a92, S2) : l2(H2, B2, $, a92, u2, S2);
    if (!(Y2 === void 0 ? H2 === B2 || v2(H2, B2, c, l2, S2) : Y2)) {
      q2 = false;
      break;
    }
    G2 || (G2 = $ == "constructor");
  }
  if (q2 && !G2) {
    var ne2 = a92.constructor, Z2 = u2.constructor;
    ne2 != Z2 && "constructor" in a92 && "constructor" in u2 && !(typeof ne2 == "function" && ne2 instanceof ne2 && typeof Z2 == "function" && Z2 instanceof Z2) && (q2 = false);
  }
  return S2.delete(a92), S2.delete(u2), q2;
}
var COMPARE_PARTIAL_FLAG$2 = 1, argsTag$1 = "[object Arguments]", arrayTag = "[object Array]", objectTag$1 = "[object Object]", objectProto$7 = Object.prototype, hasOwnProperty$3 = objectProto$7.hasOwnProperty;
function baseIsEqualDeep(a92, u2, c, l2, v2, S2) {
  var g2 = isArray$5(a92), E2 = isArray$5(u2), _ = g2 ? arrayTag : getTag$1(a92), k = E2 ? arrayTag : getTag$1(u2);
  _ = _ == argsTag$1 ? objectTag$1 : _, k = k == argsTag$1 ? objectTag$1 : k;
  var L2 = _ == objectTag$1, M2 = k == objectTag$1, $ = _ == k;
  if ($ && isBuffer$1(a92)) {
    if (!isBuffer$1(u2))
      return false;
    g2 = true, L2 = false;
  }
  if ($ && !L2)
    return S2 || (S2 = new Stack()), g2 || isTypedArray(a92) ? equalArrays(a92, u2, c, l2, v2, S2) : equalByTag(a92, u2, _, c, l2, v2, S2);
  if (!(c & COMPARE_PARTIAL_FLAG$2)) {
    var J2 = L2 && hasOwnProperty$3.call(a92, "__wrapped__"), V2 = M2 && hasOwnProperty$3.call(u2, "__wrapped__");
    if (J2 || V2) {
      var q2 = J2 ? a92.value() : a92, G2 = V2 ? u2.value() : u2;
      return S2 || (S2 = new Stack()), v2(q2, G2, c, l2, S2);
    }
  }
  return $ ? (S2 || (S2 = new Stack()), equalObjects(a92, u2, c, l2, v2, S2)) : false;
}
function baseIsEqual(a92, u2, c, l2, v2) {
  return a92 === u2 ? true : a92 == null || u2 == null || !isObjectLike$7(a92) && !isObjectLike$7(u2) ? a92 !== a92 && u2 !== u2 : baseIsEqualDeep(a92, u2, c, l2, baseIsEqual, v2);
}
var COMPARE_PARTIAL_FLAG$1 = 1, COMPARE_UNORDERED_FLAG$1 = 2;
function baseIsMatch(a92, u2, c, l2) {
  var v2 = c.length, S2 = v2, g2 = !l2;
  if (a92 == null)
    return !S2;
  for (a92 = Object(a92); v2--; ) {
    var E2 = c[v2];
    if (g2 && E2[2] ? E2[1] !== a92[E2[0]] : !(E2[0] in a92))
      return false;
  }
  for (; ++v2 < S2; ) {
    E2 = c[v2];
    var _ = E2[0], k = a92[_], L2 = E2[1];
    if (g2 && E2[2]) {
      if (k === void 0 && !(_ in a92))
        return false;
    } else {
      var M2 = new Stack();
      if (l2)
        var $ = l2(k, L2, _, a92, u2, M2);
      if (!($ === void 0 ? baseIsEqual(L2, k, COMPARE_PARTIAL_FLAG$1 | COMPARE_UNORDERED_FLAG$1, l2, M2) : $))
        return false;
    }
  }
  return true;
}
function isStrictComparable(a92) {
  return a92 === a92 && !isObject$9(a92);
}
function getMatchData(a92) {
  for (var u2 = keys$2(a92), c = u2.length; c--; ) {
    var l2 = u2[c], v2 = a92[l2];
    u2[c] = [l2, v2, isStrictComparable(v2)];
  }
  return u2;
}
function matchesStrictComparable(a92, u2) {
  return function(c) {
    return c == null ? false : c[a92] === u2 && (u2 !== void 0 || a92 in Object(c));
  };
}
function baseMatches(a92) {
  var u2 = getMatchData(a92);
  return u2.length == 1 && u2[0][2] ? matchesStrictComparable(u2[0][0], u2[0][1]) : function(c) {
    return c === a92 || baseIsMatch(c, a92, u2);
  };
}
function baseHasIn(a92, u2) {
  return a92 != null && u2 in Object(a92);
}
function hasPath(a92, u2, c) {
  u2 = castPath(u2, a92);
  for (var l2 = -1, v2 = u2.length, S2 = false; ++l2 < v2; ) {
    var g2 = toKey(u2[l2]);
    if (!(S2 = a92 != null && c(a92, g2)))
      break;
    a92 = a92[g2];
  }
  return S2 || ++l2 != v2 ? S2 : (v2 = a92 == null ? 0 : a92.length, !!v2 && isLength$1(v2) && isIndex$1(g2, v2) && (isArray$5(a92) || isArguments$1(a92)));
}
function hasIn(a92, u2) {
  return a92 != null && hasPath(a92, u2, baseHasIn);
}
var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
function baseMatchesProperty(a92, u2) {
  return isKey(a92) && isStrictComparable(u2) ? matchesStrictComparable(toKey(a92), u2) : function(c) {
    var l2 = get(c, a92);
    return l2 === void 0 && l2 === u2 ? hasIn(c, a92) : baseIsEqual(u2, l2, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
  };
}
function baseProperty(a92) {
  return function(u2) {
    return u2 == null ? void 0 : u2[a92];
  };
}
function basePropertyDeep(a92) {
  return function(u2) {
    return baseGet(u2, a92);
  };
}
function property(a92) {
  return isKey(a92) ? baseProperty(toKey(a92)) : basePropertyDeep(a92);
}
function baseIteratee(a92) {
  return typeof a92 == "function" ? a92 : a92 == null ? identity$1 : typeof a92 == "object" ? isArray$5(a92) ? baseMatchesProperty(a92[0], a92[1]) : baseMatches(a92) : property(a92);
}
function createBaseFor(a92) {
  return function(u2, c, l2) {
    for (var v2 = -1, S2 = Object(u2), g2 = l2(u2), E2 = g2.length; E2--; ) {
      var _ = g2[a92 ? E2 : ++v2];
      if (c(S2[_], _, S2) === false)
        break;
    }
    return u2;
  };
}
var baseFor = createBaseFor();
const baseFor$1 = baseFor;
function baseForOwn(a92, u2) {
  return a92 && baseFor$1(a92, u2, keys$2);
}
function createBaseEach(a92, u2) {
  return function(c, l2) {
    if (c == null)
      return c;
    if (!isArrayLike$2(c))
      return a92(c, l2);
    for (var v2 = c.length, S2 = u2 ? v2 : -1, g2 = Object(c); (u2 ? S2-- : ++S2 < v2) && l2(g2[S2], S2, g2) !== false; )
      ;
    return c;
  };
}
var baseEach = createBaseEach(baseForOwn), now = function() {
  return root.Date.now();
}, FUNC_ERROR_TEXT$1 = "Expected a function", nativeMax$1 = Math.max, nativeMin = Math.min;
function debounce$1(a92, u2, c) {
  var l2, v2, S2, g2, E2, _, k = 0, L2 = false, M2 = false, $ = true;
  if (typeof a92 != "function")
    throw new TypeError(FUNC_ERROR_TEXT$1);
  u2 = toNumber$3(u2) || 0, isObject$9(c) && (L2 = !!c.leading, M2 = "maxWait" in c, S2 = M2 ? nativeMax$1(toNumber$3(c.maxWait) || 0, u2) : S2, $ = "trailing" in c ? !!c.trailing : $);
  function J2(re2) {
    var oe2 = l2, de2 = v2;
    return l2 = v2 = void 0, k = re2, g2 = a92.apply(de2, oe2), g2;
  }
  function V2(re2) {
    return k = re2, E2 = setTimeout(H2, u2), L2 ? J2(re2) : g2;
  }
  function q2(re2) {
    var oe2 = re2 - _, de2 = re2 - k, A2 = u2 - oe2;
    return M2 ? nativeMin(A2, S2 - de2) : A2;
  }
  function G2(re2) {
    var oe2 = re2 - _, de2 = re2 - k;
    return _ === void 0 || oe2 >= u2 || oe2 < 0 || M2 && de2 >= S2;
  }
  function H2() {
    var re2 = now();
    if (G2(re2))
      return B2(re2);
    E2 = setTimeout(H2, q2(re2));
  }
  function B2(re2) {
    return E2 = void 0, $ && l2 ? J2(re2) : (l2 = v2 = void 0, g2);
  }
  function Y2() {
    E2 !== void 0 && clearTimeout(E2), k = 0, l2 = _ = v2 = E2 = void 0;
  }
  function ne2() {
    return E2 === void 0 ? g2 : B2(now());
  }
  function Z2() {
    var re2 = now(), oe2 = G2(re2);
    if (l2 = arguments, v2 = this, _ = re2, oe2) {
      if (E2 === void 0)
        return V2(_);
      if (M2)
        return clearTimeout(E2), E2 = setTimeout(H2, u2), J2(_);
    }
    return E2 === void 0 && (E2 = setTimeout(H2, u2)), g2;
  }
  return Z2.cancel = Y2, Z2.flush = ne2, Z2;
}
function last$1(a92) {
  var u2 = a92 == null ? 0 : a92.length;
  return u2 ? a92[u2 - 1] : void 0;
}
function arrayEvery(a92, u2) {
  for (var c = -1, l2 = a92 == null ? 0 : a92.length; ++c < l2; )
    if (!u2(a92[c], c, a92))
      return false;
  return true;
}
function baseEvery(a92, u2) {
  var c = true;
  return baseEach(a92, function(l2, v2, S2) {
    return c = !!u2(l2, v2, S2), c;
  }), c;
}
function every$1(a92, u2, c) {
  var l2 = isArray$5(a92) ? arrayEvery : baseEvery;
  return c && isIterateeCall(a92, u2, c) && (u2 = void 0), l2(a92, baseIteratee(u2));
}
function baseMap(a92, u2) {
  var c = -1, l2 = isArrayLike$2(a92) ? Array(a92.length) : [];
  return baseEach(a92, function(v2, S2, g2) {
    l2[++c] = u2(v2, S2, g2);
  }), l2;
}
function parent(a92, u2) {
  return u2.length < 2 ? a92 : baseGet(a92, baseSlice(u2, 0, -1));
}
function isEqual(a92, u2) {
  return baseIsEqual(a92, u2);
}
function isMatch(a92, u2) {
  return a92 === u2 || baseIsMatch(a92, u2, getMatchData(u2));
}
var CLONE_DEEP_FLAG$1 = 1;
function iteratee(a92) {
  return baseIteratee(typeof a92 == "function" ? a92 : baseClone(a92, CLONE_DEEP_FLAG$1));
}
var kebabCase = createCompounder(function(a92, u2, c) {
  return a92 + (c ? "-" : "") + u2.toLowerCase();
});
const kebabCase$1 = kebabCase;
function baseUnset(a92, u2) {
  return u2 = castPath(u2, a92), a92 = parent(a92, u2), a92 == null || delete a92[toKey(last$1(u2))];
}
function customOmitClone(a92) {
  return isPlainObject$3(a92) ? void 0 : a92;
}
var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4, omit = flatRest(function(a92, u2) {
  var c = {};
  if (a92 == null)
    return c;
  var l2 = false;
  u2 = arrayMap$1(u2, function(S2) {
    return S2 = castPath(S2, a92), l2 || (l2 = S2.length > 1), S2;
  }), copyObject(a92, getAllKeysIn(a92), c), l2 && (c = baseClone(c, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone));
  for (var v2 = u2.length; v2--; )
    baseUnset(c, u2[v2]);
  return c;
});
function baseSet(a92, u2, c, l2) {
  if (!isObject$9(a92))
    return a92;
  u2 = castPath(u2, a92);
  for (var v2 = -1, S2 = u2.length, g2 = S2 - 1, E2 = a92; E2 != null && ++v2 < S2; ) {
    var _ = toKey(u2[v2]), k = c;
    if (_ === "__proto__" || _ === "constructor" || _ === "prototype")
      return a92;
    if (v2 != g2) {
      var L2 = E2[_];
      k = l2 ? l2(L2, _, E2) : void 0, k === void 0 && (k = isObject$9(L2) ? L2 : isIndex$1(u2[v2 + 1]) ? [] : {});
    }
    assignValue(E2, _, k), E2 = E2[_];
  }
  return a92;
}
function basePickBy(a92, u2, c) {
  for (var l2 = -1, v2 = u2.length, S2 = {}; ++l2 < v2; ) {
    var g2 = u2[l2], E2 = baseGet(a92, g2);
    c(E2, g2) && baseSet(S2, castPath(g2, a92), E2);
  }
  return S2;
}
function baseSortBy(a92, u2) {
  var c = a92.length;
  for (a92.sort(u2); c--; )
    a92[c] = a92[c].value;
  return a92;
}
function compareAscending(a92, u2) {
  if (a92 !== u2) {
    var c = a92 !== void 0, l2 = a92 === null, v2 = a92 === a92, S2 = isSymbol$3(a92), g2 = u2 !== void 0, E2 = u2 === null, _ = u2 === u2, k = isSymbol$3(u2);
    if (!E2 && !k && !S2 && a92 > u2 || S2 && g2 && _ && !E2 && !k || l2 && g2 && _ || !c && _ || !v2)
      return 1;
    if (!l2 && !S2 && !k && a92 < u2 || k && c && v2 && !l2 && !S2 || E2 && c && v2 || !g2 && v2 || !_)
      return -1;
  }
  return 0;
}
function compareMultiple(a92, u2, c) {
  for (var l2 = -1, v2 = a92.criteria, S2 = u2.criteria, g2 = v2.length, E2 = c.length; ++l2 < g2; ) {
    var _ = compareAscending(v2[l2], S2[l2]);
    if (_) {
      if (l2 >= E2)
        return _;
      var k = c[l2];
      return _ * (k == "desc" ? -1 : 1);
    }
  }
  return a92.index - u2.index;
}
function baseOrderBy(a92, u2, c) {
  u2.length ? u2 = arrayMap$1(u2, function(S2) {
    return isArray$5(S2) ? function(g2) {
      return baseGet(g2, S2.length === 1 ? S2[0] : S2);
    } : S2;
  }) : u2 = [identity$1];
  var l2 = -1;
  u2 = arrayMap$1(u2, baseUnary(baseIteratee));
  var v2 = baseMap(a92, function(S2, g2, E2) {
    var _ = arrayMap$1(u2, function(k) {
      return k(S2);
    });
    return { criteria: _, index: ++l2, value: S2 };
  });
  return baseSortBy(v2, function(S2, g2) {
    return compareMultiple(S2, g2, c);
  });
}
function basePick(a92, u2) {
  return basePickBy(a92, u2, function(c, l2) {
    return hasIn(a92, l2);
  });
}
var pick = flatRest(function(a92, u2) {
  return a92 == null ? {} : basePick(a92, u2);
});
const pick$1 = pick;
function baseIndexOfWith(a92, u2, c, l2) {
  for (var v2 = c - 1, S2 = a92.length; ++v2 < S2; )
    if (l2(a92[v2], u2))
      return v2;
  return -1;
}
var arrayProto = Array.prototype, splice = arrayProto.splice;
function basePullAll(a92, u2, c, l2) {
  var v2 = l2 ? baseIndexOfWith : baseIndexOf$1, S2 = -1, g2 = u2.length, E2 = a92;
  for (a92 === u2 && (u2 = copyArray(u2)), c && (E2 = arrayMap$1(a92, baseUnary(c))); ++S2 < g2; )
    for (var _ = 0, k = u2[S2], L2 = c ? c(k) : k; (_ = v2(E2, L2, _, l2)) > -1; )
      E2 !== a92 && splice.call(E2, _, 1), splice.call(a92, _, 1);
  return a92;
}
function pullAll(a92, u2) {
  return a92 && a92.length && u2 && u2.length ? basePullAll(a92, u2) : a92;
}
var pull$1 = baseRest(pullAll), sortBy = baseRest(function(a92, u2) {
  if (a92 == null)
    return [];
  var c = u2.length;
  return c > 1 && isIterateeCall(a92, u2[0], u2[1]) ? u2 = [] : c > 2 && isIterateeCall(u2[0], u2[1], u2[2]) && (u2 = [u2[0]]), baseOrderBy(a92, baseFlatten(u2, 1), []);
});
const sortBy$1 = sortBy, convert = (
  // Note: overloads in JSDoc can’t yet use different `@template`s.
  /**
     * @type {(
     *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &
     *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &
     *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &
     *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &
     *   ((test?: Test) => Check)
     * )}
     */
  /**
  * @param {Test} [test]
  * @returns {Check}
  */
  function(a92) {
    if (a92 == null)
      return ok;
    if (typeof a92 == "function")
      return castFactory(a92);
    if (typeof a92 == "object")
      return Array.isArray(a92) ? anyFactory(a92) : propsFactory(a92);
    if (typeof a92 == "string")
      return typeFactory(a92);
    throw new Error("Expected function, string, or object as test");
  }
);
function anyFactory(a92) {
  const u2 = [];
  let c = -1;
  for (; ++c < a92.length; )
    u2[c] = convert(a92[c]);
  return castFactory(l2);
  function l2(...v2) {
    let S2 = -1;
    for (; ++S2 < u2.length; )
      if (u2[S2].apply(this, v2))
        return true;
    return false;
  }
}
function propsFactory(a92) {
  const u2 = (
    /** @type {Record<string, unknown>} */
    a92
  );
  return castFactory(c);
  function c(l2) {
    const v2 = (
      /** @type {Record<string, unknown>} */
      /** @type {unknown} */
      l2
    );
    let S2;
    for (S2 in a92)
      if (v2[S2] !== u2[S2])
        return false;
    return true;
  }
}
function typeFactory(a92) {
  return castFactory(u2);
  function u2(c) {
    return c && c.type === a92;
  }
}
function castFactory(a92) {
  return u2;
  function u2(c, l2, v2) {
    return !!(looksLikeANode(c) && a92.call(this, c, typeof l2 == "number" ? l2 : void 0, v2 || void 0));
  }
}
function ok() {
  return true;
}
function looksLikeANode(a92) {
  return a92 !== null && typeof a92 == "object" && "type" in a92;
}
const empty$3 = [], CONTINUE = true, EXIT = false, SKIP = "skip";
function visitParents(a92, u2, c, l2) {
  let v2;
  typeof u2 == "function" && typeof c != "function" ? (l2 = c, c = u2) : v2 = u2;
  const S2 = convert(v2), g2 = l2 ? -1 : 1;
  E2(a92, void 0, [])();
  function E2(_, k, L2) {
    const M2 = (
      /** @type {Record<string, unknown>} */
      _ && typeof _ == "object" ? _ : {}
    );
    if (typeof M2.type == "string") {
      const J2 = (
        // `hast`
        typeof M2.tagName == "string" ? M2.tagName : (
          // `xast`
          typeof M2.name == "string" ? M2.name : void 0
        )
      );
      Object.defineProperty($, "name", { value: "node (" + (_.type + (J2 ? "<" + J2 + ">" : "")) + ")" });
    }
    return $;
    function $() {
      let J2 = empty$3, V2, q2, G2;
      if ((!u2 || S2(_, k, L2[L2.length - 1] || void 0)) && (J2 = toResult(c(_, L2)), J2[0] === EXIT))
        return J2;
      if ("children" in _ && _.children) {
        const H2 = (
          /** @type {UnistParent} */
          _
        );
        if (H2.children && J2[0] !== SKIP)
          for (q2 = (l2 ? H2.children.length : -1) + g2, G2 = L2.concat(H2); q2 > -1 && q2 < H2.children.length; ) {
            const B2 = H2.children[q2];
            if (V2 = E2(B2, q2, G2)(), V2[0] === EXIT)
              return V2;
            q2 = typeof V2[1] == "number" ? V2[1] : q2 + g2;
          }
      }
      return J2;
    }
  }
}
function toResult(a92) {
  return Array.isArray(a92) ? a92 : typeof a92 == "number" ? [CONTINUE, a92] : a92 == null ? empty$3 : [a92];
}
function visit(a92, u2, c, l2) {
  let v2, S2, g2;
  typeof u2 == "function" && typeof c != "function" ? (S2 = void 0, g2 = u2, v2 = c) : (S2 = u2, g2 = c, v2 = l2), visitParents(a92, S2, E2, v2);
  function E2(_, k) {
    const L2 = k[k.length - 1], M2 = L2 ? L2.children.indexOf(_) : void 0;
    return g2(_, M2, L2);
  }
}
var fastDeepEqual = function a(u2, c) {
  if (u2 === c)
    return true;
  if (u2 && c && typeof u2 == "object" && typeof c == "object") {
    if (u2.constructor !== c.constructor)
      return false;
    var l2, v2, S2;
    if (Array.isArray(u2)) {
      if (l2 = u2.length, l2 != c.length)
        return false;
      for (v2 = l2; v2-- !== 0; )
        if (!a(u2[v2], c[v2]))
          return false;
      return true;
    }
    if (u2.constructor === RegExp)
      return u2.source === c.source && u2.flags === c.flags;
    if (u2.valueOf !== Object.prototype.valueOf)
      return u2.valueOf() === c.valueOf();
    if (u2.toString !== Object.prototype.toString)
      return u2.toString() === c.toString();
    if (S2 = Object.keys(u2), l2 = S2.length, l2 !== Object.keys(c).length)
      return false;
    for (v2 = l2; v2-- !== 0; )
      if (!Object.prototype.hasOwnProperty.call(c, S2[v2]))
        return false;
    for (v2 = l2; v2-- !== 0; ) {
      var g2 = S2[v2];
      if (!a(u2[g2], c[g2]))
        return false;
    }
    return true;
  }
  return u2 !== u2 && c !== c;
};
const deepEqual = /* @__PURE__ */ getDefaultExportFromCjs$1(fastDeepEqual), generateId = () => (Math.random() * 1e20).toString(36), insertAt$1 = (a92 = 0, u2, c, l2 = false) => [...c.slice(0, a92), ...[u2].flat(), ...c.slice(l2 ? a92 + 1 : a92)], replaceItem$1 = (a92, u2, c) => {
  a92 = typeof a92 == "function" ? a92 : (v2) => v2 === a92;
  const l2 = c.findIndex(a92);
  return l2 < 0 ? c : insertAt$1(l2, u2, c, true);
}, swapIndex = (a92, u2, c) => {
  if (!c[a92] || !c[u2])
    return c;
  c = [...c];
  const l2 = c[a92];
  return c[a92] = c[u2], c[u2] = l2, c;
}, swapItems = (a92, u2, c) => {
  const l2 = c.findIndex((S2) => S2 === a92), v2 = c.findIndex((S2) => S2 === u2);
  return l2 < 0 || v2 < 0 ? c : swapIndex(l2, v2, c);
}, toDataNode$1 = (a92) => a92 ? { id: a92.id, props: a92.props, childIds: (a92.children || []).map((u2) => u2.id) } : null, toSceneNode = (a92) => ({ id: a92.id, props: a92.props, children: [] }), toSceneTree = (a92, u2) => {
  const c = a92.find((v2) => v2.id === u2);
  if (!c)
    return null;
  const l2 = c.childIds;
  return { id: c.id, props: c.props, children: l2.map((v2) => toSceneTree(a92, v2)).filter(Boolean) };
}, forEachDown$1 = (a92, u2) => {
  u2(a92), (a92.children || []).forEach((l2) => forEachDown$1(l2, (v2, S2) => {
    u2(v2, S2 || a92);
  }));
}, mapDown = (a92, u2) => {
  const c = u2(a92);
  return { ...c, children: ((c == null ? void 0 : c.children) || (a92 == null ? void 0 : a92.children) || []).map((l2) => mapDown(l2, u2)) };
}, mapDownAsync = async (a92, u2) => {
  const c = (a92 == null ? void 0 : a92.children) ?? [];
  return { ...await u2(a92), children: await Promise.all(c.map((l2) => mapDownAsync(l2, u2))) };
}, getElementAttributes = (a92) => Object.values(a92.attributes).reduce((u2, c) => ({ ...u2, [c.name]: c.value }), {}), asArray = (a92) => isArray$5(a92) ? a92 : [a92], sizeToNum = (a92, u2) => typeof a92 == "number" ? a92 : typeof a92 == "string" ? a92.indexOf("%") > -1 ? parseFloat(a92) / 100 * u2 : parseFloat(a92) : 0, asSize = (a92) => typeof a92 == "number" ? a92 + "px" : typeof a92 == "string" ? a92.indexOf("%") > -1 ? parseFloat(a92) + "%" : a92 : "0px", asDuration = (a92) => typeof a92 == "string" ? a92 : typeof a92 == "number" ? a92 + "ms" : "0ms", find$2 = (a92, u2) => {
  if (!a92)
    throw new Error("requires a tree to search");
  if (!u2)
    throw new Error("requires a condition");
  const c = iteratee(u2);
  let l2;
  return visit(a92, function(v2) {
    if (c(v2))
      return l2 = v2, false;
  }), l2;
}, findAll = (a92, u2) => {
  if (!a92)
    throw new Error("requires a tree to search");
  if (!u2)
    throw new Error("requires a condition");
  const c = iteratee(u2);
  let l2 = [];
  return visit(a92, function(v2) {
    c(v2) && l2.push(v2);
  }), l2;
}, values$1 = (a92) => Array.from(a92.values()), Logic = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({ __proto__: null, asArray, asDuration, asSize, camelCase: camelCase$3, cloneDeep: cloneDeep$1, debounce: debounce$1, deepEqual, every: every$1, find: find$2, findAll, forEachDown: forEachDown$1, generateId, getElementAttributes, insertAt: insertAt$1, isArray: isArray$5, isEqual, kebabCase: kebabCase$1, mapDown, mapDownAsync, omit, pick: pick$1, pull: pull$1, replaceItem: replaceItem$1, sizeToNum, sortBy: sortBy$1, swapIndex, swapItems, toDataNode: toDataNode$1, toSceneNode, toSceneTree, values: values$1 }, Symbol.toStringTag, { value: "Module" }));
var lib$2 = {};
function e(a92) {
  this.message = a92;
}
e.prototype = new Error(), e.prototype.name = "InvalidCharacterError";
var r$1 = typeof window < "u" && window.atob && window.atob.bind(window) || function(a92) {
  var u2 = String(a92).replace(/=+$/, "");
  if (u2.length % 4 == 1)
    throw new e("'atob' failed: The string to be decoded is not correctly encoded.");
  for (var c, l2, v2 = 0, S2 = 0, g2 = ""; l2 = u2.charAt(S2++); ~l2 && (c = v2 % 4 ? 64 * c + l2 : l2, v2++ % 4) ? g2 += String.fromCharCode(255 & c >> (-2 * v2 & 6)) : 0)
    l2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(l2);
  return g2;
};
function t(a92) {
  var u2 = a92.replace(/-/g, "+").replace(/_/g, "/");
  switch (u2.length % 4) {
    case 0:
      break;
    case 2:
      u2 += "==";
      break;
    case 3:
      u2 += "=";
      break;
    default:
      throw "Illegal base64url string!";
  }
  try {
    return function(c) {
      return decodeURIComponent(r$1(c).replace(/(.)/g, function(l2, v2) {
        var S2 = v2.charCodeAt(0).toString(16).toUpperCase();
        return S2.length < 2 && (S2 = "0" + S2), "%" + S2;
      }));
    }(u2);
  } catch {
    return r$1(u2);
  }
}
function n(a92) {
  this.message = a92;
}
function o(a92, u2) {
  if (typeof a92 != "string")
    throw new n("Invalid token specified");
  var c = (u2 = u2 || {}).header === true ? 0 : 1;
  try {
    return JSON.parse(t(a92.split(".")[c]));
  } catch (l2) {
    throw new n("Invalid token specified: " + l2.message);
  }
}
n.prototype = new Error(), n.prototype.name = "InvalidTokenError";
const jwtDecode_esm = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({ __proto__: null, InvalidTokenError: n, default: o }, Symbol.toStringTag, { value: "Module" })), require$$0$2 = /* @__PURE__ */ getAugmentedNamespace(jwtDecode_esm);
var getRandomValues, rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues && (getRandomValues = typeof crypto < "u" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto < "u" && typeof msCrypto.getRandomValues == "function" && msCrypto.getRandomValues.bind(msCrypto), !getRandomValues))
    throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
  return getRandomValues(rnds8);
}
const REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
function validate$2(a92) {
  return typeof a92 == "string" && REGEX.test(a92);
}
var byteToHex = [];
for (var i = 0; i < 256; ++i)
  byteToHex.push((i + 256).toString(16).substr(1));
function stringify(a92) {
  var u2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, c = (byteToHex[a92[u2 + 0]] + byteToHex[a92[u2 + 1]] + byteToHex[a92[u2 + 2]] + byteToHex[a92[u2 + 3]] + "-" + byteToHex[a92[u2 + 4]] + byteToHex[a92[u2 + 5]] + "-" + byteToHex[a92[u2 + 6]] + byteToHex[a92[u2 + 7]] + "-" + byteToHex[a92[u2 + 8]] + byteToHex[a92[u2 + 9]] + "-" + byteToHex[a92[u2 + 10]] + byteToHex[a92[u2 + 11]] + byteToHex[a92[u2 + 12]] + byteToHex[a92[u2 + 13]] + byteToHex[a92[u2 + 14]] + byteToHex[a92[u2 + 15]]).toLowerCase();
  if (!validate$2(c))
    throw TypeError("Stringified UUID is invalid");
  return c;
}
var _nodeId, _clockseq, _lastMSecs = 0, _lastNSecs = 0;
function v1(a92, u2, c) {
  var l2 = u2 && c || 0, v2 = u2 || new Array(16);
  a92 = a92 || {};
  var S2 = a92.node || _nodeId, g2 = a92.clockseq !== void 0 ? a92.clockseq : _clockseq;
  if (S2 == null || g2 == null) {
    var E2 = a92.random || (a92.rng || rng)();
    S2 == null && (S2 = _nodeId = [E2[0] | 1, E2[1], E2[2], E2[3], E2[4], E2[5]]), g2 == null && (g2 = _clockseq = (E2[6] << 8 | E2[7]) & 16383);
  }
  var _ = a92.msecs !== void 0 ? a92.msecs : Date.now(), k = a92.nsecs !== void 0 ? a92.nsecs : _lastNSecs + 1, L2 = _ - _lastMSecs + (k - _lastNSecs) / 1e4;
  if (L2 < 0 && a92.clockseq === void 0 && (g2 = g2 + 1 & 16383), (L2 < 0 || _ > _lastMSecs) && a92.nsecs === void 0 && (k = 0), k >= 1e4)
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  _lastMSecs = _, _lastNSecs = k, _clockseq = g2, _ += 122192928e5;
  var M2 = ((_ & 268435455) * 1e4 + k) % 4294967296;
  v2[l2++] = M2 >>> 24 & 255, v2[l2++] = M2 >>> 16 & 255, v2[l2++] = M2 >>> 8 & 255, v2[l2++] = M2 & 255;
  var $ = _ / 4294967296 * 1e4 & 268435455;
  v2[l2++] = $ >>> 8 & 255, v2[l2++] = $ & 255, v2[l2++] = $ >>> 24 & 15 | 16, v2[l2++] = $ >>> 16 & 255, v2[l2++] = g2 >>> 8 | 128, v2[l2++] = g2 & 255;
  for (var J2 = 0; J2 < 6; ++J2)
    v2[l2 + J2] = S2[J2];
  return u2 || stringify(v2);
}
function parse$3(a92) {
  if (!validate$2(a92))
    throw TypeError("Invalid UUID");
  var u2, c = new Uint8Array(16);
  return c[0] = (u2 = parseInt(a92.slice(0, 8), 16)) >>> 24, c[1] = u2 >>> 16 & 255, c[2] = u2 >>> 8 & 255, c[3] = u2 & 255, c[4] = (u2 = parseInt(a92.slice(9, 13), 16)) >>> 8, c[5] = u2 & 255, c[6] = (u2 = parseInt(a92.slice(14, 18), 16)) >>> 8, c[7] = u2 & 255, c[8] = (u2 = parseInt(a92.slice(19, 23), 16)) >>> 8, c[9] = u2 & 255, c[10] = (u2 = parseInt(a92.slice(24, 36), 16)) / 1099511627776 & 255, c[11] = u2 / 4294967296 & 255, c[12] = u2 >>> 24 & 255, c[13] = u2 >>> 16 & 255, c[14] = u2 >>> 8 & 255, c[15] = u2 & 255, c;
}
function stringToBytes(a92) {
  a92 = unescape(encodeURIComponent(a92));
  for (var u2 = [], c = 0; c < a92.length; ++c)
    u2.push(a92.charCodeAt(c));
  return u2;
}
var DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8", URL$1 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
function v35(a92, u2, c) {
  function l2(v2, S2, g2, E2) {
    if (typeof v2 == "string" && (v2 = stringToBytes(v2)), typeof S2 == "string" && (S2 = parse$3(S2)), S2.length !== 16)
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    var _ = new Uint8Array(16 + v2.length);
    if (_.set(S2), _.set(v2, S2.length), _ = c(_), _[6] = _[6] & 15 | u2, _[8] = _[8] & 63 | 128, g2) {
      E2 = E2 || 0;
      for (var k = 0; k < 16; ++k)
        g2[E2 + k] = _[k];
      return g2;
    }
    return stringify(_);
  }
  try {
    l2.name = a92;
  } catch {
  }
  return l2.DNS = DNS, l2.URL = URL$1, l2;
}
function md5(a92) {
  if (typeof a92 == "string") {
    var u2 = unescape(encodeURIComponent(a92));
    a92 = new Uint8Array(u2.length);
    for (var c = 0; c < u2.length; ++c)
      a92[c] = u2.charCodeAt(c);
  }
  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(a92), a92.length * 8));
}
function md5ToHexEncodedArray(a92) {
  for (var u2 = [], c = a92.length * 32, l2 = "0123456789abcdef", v2 = 0; v2 < c; v2 += 8) {
    var S2 = a92[v2 >> 5] >>> v2 % 32 & 255, g2 = parseInt(l2.charAt(S2 >>> 4 & 15) + l2.charAt(S2 & 15), 16);
    u2.push(g2);
  }
  return u2;
}
function getOutputLength(a92) {
  return (a92 + 64 >>> 9 << 4) + 14 + 1;
}
function wordsToMd5(a92, u2) {
  a92[u2 >> 5] |= 128 << u2 % 32, a92[getOutputLength(u2) - 1] = u2;
  for (var c = 1732584193, l2 = -271733879, v2 = -1732584194, S2 = 271733878, g2 = 0; g2 < a92.length; g2 += 16) {
    var E2 = c, _ = l2, k = v2, L2 = S2;
    c = md5ff(c, l2, v2, S2, a92[g2], 7, -680876936), S2 = md5ff(S2, c, l2, v2, a92[g2 + 1], 12, -389564586), v2 = md5ff(v2, S2, c, l2, a92[g2 + 2], 17, 606105819), l2 = md5ff(l2, v2, S2, c, a92[g2 + 3], 22, -1044525330), c = md5ff(c, l2, v2, S2, a92[g2 + 4], 7, -176418897), S2 = md5ff(S2, c, l2, v2, a92[g2 + 5], 12, 1200080426), v2 = md5ff(v2, S2, c, l2, a92[g2 + 6], 17, -1473231341), l2 = md5ff(l2, v2, S2, c, a92[g2 + 7], 22, -45705983), c = md5ff(c, l2, v2, S2, a92[g2 + 8], 7, 1770035416), S2 = md5ff(S2, c, l2, v2, a92[g2 + 9], 12, -1958414417), v2 = md5ff(v2, S2, c, l2, a92[g2 + 10], 17, -42063), l2 = md5ff(l2, v2, S2, c, a92[g2 + 11], 22, -1990404162), c = md5ff(c, l2, v2, S2, a92[g2 + 12], 7, 1804603682), S2 = md5ff(S2, c, l2, v2, a92[g2 + 13], 12, -40341101), v2 = md5ff(v2, S2, c, l2, a92[g2 + 14], 17, -1502002290), l2 = md5ff(l2, v2, S2, c, a92[g2 + 15], 22, 1236535329), c = md5gg(c, l2, v2, S2, a92[g2 + 1], 5, -165796510), S2 = md5gg(S2, c, l2, v2, a92[g2 + 6], 9, -1069501632), v2 = md5gg(v2, S2, c, l2, a92[g2 + 11], 14, 643717713), l2 = md5gg(l2, v2, S2, c, a92[g2], 20, -373897302), c = md5gg(c, l2, v2, S2, a92[g2 + 5], 5, -701558691), S2 = md5gg(S2, c, l2, v2, a92[g2 + 10], 9, 38016083), v2 = md5gg(v2, S2, c, l2, a92[g2 + 15], 14, -660478335), l2 = md5gg(l2, v2, S2, c, a92[g2 + 4], 20, -405537848), c = md5gg(c, l2, v2, S2, a92[g2 + 9], 5, 568446438), S2 = md5gg(S2, c, l2, v2, a92[g2 + 14], 9, -1019803690), v2 = md5gg(v2, S2, c, l2, a92[g2 + 3], 14, -187363961), l2 = md5gg(l2, v2, S2, c, a92[g2 + 8], 20, 1163531501), c = md5gg(c, l2, v2, S2, a92[g2 + 13], 5, -1444681467), S2 = md5gg(S2, c, l2, v2, a92[g2 + 2], 9, -51403784), v2 = md5gg(v2, S2, c, l2, a92[g2 + 7], 14, 1735328473), l2 = md5gg(l2, v2, S2, c, a92[g2 + 12], 20, -1926607734), c = md5hh(c, l2, v2, S2, a92[g2 + 5], 4, -378558), S2 = md5hh(S2, c, l2, v2, a92[g2 + 8], 11, -2022574463), v2 = md5hh(v2, S2, c, l2, a92[g2 + 11], 16, 1839030562), l2 = md5hh(l2, v2, S2, c, a92[g2 + 14], 23, -35309556), c = md5hh(c, l2, v2, S2, a92[g2 + 1], 4, -1530992060), S2 = md5hh(S2, c, l2, v2, a92[g2 + 4], 11, 1272893353), v2 = md5hh(v2, S2, c, l2, a92[g2 + 7], 16, -155497632), l2 = md5hh(l2, v2, S2, c, a92[g2 + 10], 23, -1094730640), c = md5hh(c, l2, v2, S2, a92[g2 + 13], 4, 681279174), S2 = md5hh(S2, c, l2, v2, a92[g2], 11, -358537222), v2 = md5hh(v2, S2, c, l2, a92[g2 + 3], 16, -722521979), l2 = md5hh(l2, v2, S2, c, a92[g2 + 6], 23, 76029189), c = md5hh(c, l2, v2, S2, a92[g2 + 9], 4, -640364487), S2 = md5hh(S2, c, l2, v2, a92[g2 + 12], 11, -421815835), v2 = md5hh(v2, S2, c, l2, a92[g2 + 15], 16, 530742520), l2 = md5hh(l2, v2, S2, c, a92[g2 + 2], 23, -995338651), c = md5ii(c, l2, v2, S2, a92[g2], 6, -198630844), S2 = md5ii(S2, c, l2, v2, a92[g2 + 7], 10, 1126891415), v2 = md5ii(v2, S2, c, l2, a92[g2 + 14], 15, -1416354905), l2 = md5ii(l2, v2, S2, c, a92[g2 + 5], 21, -57434055), c = md5ii(c, l2, v2, S2, a92[g2 + 12], 6, 1700485571), S2 = md5ii(S2, c, l2, v2, a92[g2 + 3], 10, -1894986606), v2 = md5ii(v2, S2, c, l2, a92[g2 + 10], 15, -1051523), l2 = md5ii(l2, v2, S2, c, a92[g2 + 1], 21, -2054922799), c = md5ii(c, l2, v2, S2, a92[g2 + 8], 6, 1873313359), S2 = md5ii(S2, c, l2, v2, a92[g2 + 15], 10, -30611744), v2 = md5ii(v2, S2, c, l2, a92[g2 + 6], 15, -1560198380), l2 = md5ii(l2, v2, S2, c, a92[g2 + 13], 21, 1309151649), c = md5ii(c, l2, v2, S2, a92[g2 + 4], 6, -145523070), S2 = md5ii(S2, c, l2, v2, a92[g2 + 11], 10, -1120210379), v2 = md5ii(v2, S2, c, l2, a92[g2 + 2], 15, 718787259), l2 = md5ii(l2, v2, S2, c, a92[g2 + 9], 21, -343485551), c = safeAdd(c, E2), l2 = safeAdd(l2, _), v2 = safeAdd(v2, k), S2 = safeAdd(S2, L2);
  }
  return [c, l2, v2, S2];
}
function bytesToWords(a92) {
  if (a92.length === 0)
    return [];
  for (var u2 = a92.length * 8, c = new Uint32Array(getOutputLength(u2)), l2 = 0; l2 < u2; l2 += 8)
    c[l2 >> 5] |= (a92[l2 / 8] & 255) << l2 % 32;
  return c;
}
function safeAdd(a92, u2) {
  var c = (a92 & 65535) + (u2 & 65535), l2 = (a92 >> 16) + (u2 >> 16) + (c >> 16);
  return l2 << 16 | c & 65535;
}
function bitRotateLeft(a92, u2) {
  return a92 << u2 | a92 >>> 32 - u2;
}
function md5cmn(a92, u2, c, l2, v2, S2) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(u2, a92), safeAdd(l2, S2)), v2), c);
}
function md5ff(a92, u2, c, l2, v2, S2, g2) {
  return md5cmn(u2 & c | ~u2 & l2, a92, u2, v2, S2, g2);
}
function md5gg(a92, u2, c, l2, v2, S2, g2) {
  return md5cmn(u2 & l2 | c & ~l2, a92, u2, v2, S2, g2);
}
function md5hh(a92, u2, c, l2, v2, S2, g2) {
  return md5cmn(u2 ^ c ^ l2, a92, u2, v2, S2, g2);
}
function md5ii(a92, u2, c, l2, v2, S2, g2) {
  return md5cmn(c ^ (u2 | ~l2), a92, u2, v2, S2, g2);
}
var v3 = v35("v3", 48, md5);
const v3$1 = v3;
function v4(a92, u2, c) {
  a92 = a92 || {};
  var l2 = a92.random || (a92.rng || rng)();
  if (l2[6] = l2[6] & 15 | 64, l2[8] = l2[8] & 63 | 128, u2) {
    c = c || 0;
    for (var v2 = 0; v2 < 16; ++v2)
      u2[c + v2] = l2[v2];
    return u2;
  }
  return stringify(l2);
}
function f(a92, u2, c, l2) {
  switch (a92) {
    case 0:
      return u2 & c ^ ~u2 & l2;
    case 1:
      return u2 ^ c ^ l2;
    case 2:
      return u2 & c ^ u2 & l2 ^ c & l2;
    case 3:
      return u2 ^ c ^ l2;
  }
}
function ROTL(a92, u2) {
  return a92 << u2 | a92 >>> 32 - u2;
}
function sha1(a92) {
  var u2 = [1518500249, 1859775393, 2400959708, 3395469782], c = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
  if (typeof a92 == "string") {
    var l2 = unescape(encodeURIComponent(a92));
    a92 = [];
    for (var v2 = 0; v2 < l2.length; ++v2)
      a92.push(l2.charCodeAt(v2));
  } else
    Array.isArray(a92) || (a92 = Array.prototype.slice.call(a92));
  a92.push(128);
  for (var S2 = a92.length / 4 + 2, g2 = Math.ceil(S2 / 16), E2 = new Array(g2), _ = 0; _ < g2; ++_) {
    for (var k = new Uint32Array(16), L2 = 0; L2 < 16; ++L2)
      k[L2] = a92[_ * 64 + L2 * 4] << 24 | a92[_ * 64 + L2 * 4 + 1] << 16 | a92[_ * 64 + L2 * 4 + 2] << 8 | a92[_ * 64 + L2 * 4 + 3];
    E2[_] = k;
  }
  E2[g2 - 1][14] = (a92.length - 1) * 8 / Math.pow(2, 32), E2[g2 - 1][14] = Math.floor(E2[g2 - 1][14]), E2[g2 - 1][15] = (a92.length - 1) * 8 & 4294967295;
  for (var M2 = 0; M2 < g2; ++M2) {
    for (var $ = new Uint32Array(80), J2 = 0; J2 < 16; ++J2)
      $[J2] = E2[M2][J2];
    for (var V2 = 16; V2 < 80; ++V2)
      $[V2] = ROTL($[V2 - 3] ^ $[V2 - 8] ^ $[V2 - 14] ^ $[V2 - 16], 1);
    for (var q2 = c[0], G2 = c[1], H2 = c[2], B2 = c[3], Y2 = c[4], ne2 = 0; ne2 < 80; ++ne2) {
      var Z2 = Math.floor(ne2 / 20), re2 = ROTL(q2, 5) + f(Z2, G2, H2, B2) + Y2 + u2[Z2] + $[ne2] >>> 0;
      Y2 = B2, B2 = H2, H2 = ROTL(G2, 30) >>> 0, G2 = q2, q2 = re2;
    }
    c[0] = c[0] + q2 >>> 0, c[1] = c[1] + G2 >>> 0, c[2] = c[2] + H2 >>> 0, c[3] = c[3] + B2 >>> 0, c[4] = c[4] + Y2 >>> 0;
  }
  return [c[0] >> 24 & 255, c[0] >> 16 & 255, c[0] >> 8 & 255, c[0] & 255, c[1] >> 24 & 255, c[1] >> 16 & 255, c[1] >> 8 & 255, c[1] & 255, c[2] >> 24 & 255, c[2] >> 16 & 255, c[2] >> 8 & 255, c[2] & 255, c[3] >> 24 & 255, c[3] >> 16 & 255, c[3] >> 8 & 255, c[3] & 255, c[4] >> 24 & 255, c[4] >> 16 & 255, c[4] >> 8 & 255, c[4] & 255];
}
var v5 = v35("v5", 80, sha1);
const v5$1 = v5, nil = "00000000-0000-0000-0000-000000000000";
function version$4(a92) {
  if (!validate$2(a92))
    throw TypeError("Invalid UUID");
  return parseInt(a92.substr(14, 1), 16);
}
const esmBrowser = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({ __proto__: null, NIL: nil, parse: parse$3, stringify, v1, v3: v3$1, v4, v5: v5$1, validate: validate$2, version: version$4 }, Symbol.toStringTag, { value: "Module" })), require$$1$2 = /* @__PURE__ */ getAugmentedNamespace(esmBrowser);
let EnhancedMap$1 = class extends Map {
  /**
  * If key has a mapping already returns the currently associated value. If
  * there is no mapping, calls the computer which must return a value V.
  * The value is then stored for given key and returned.
  * @param key Key
  * @param computer Computer which is called only if key has no mapping yet.
  * @return Existing value if the key already existed, or the newly computed value.
  */
  computeIfAbsent(u2, c) {
    if (this.has(u2))
      return this.get(u2);
    const l2 = c(u2);
    return this.set(u2, l2), l2;
  }
  /**
  * If the key exists already calls given computer, if the key does not exist
  * this method does nothing.
  *
  * The computer is called with current key and current value associated. The
  * computer can return a (new) value V or undefined. When undefined is returned
  * the key is removed from this map, when a V is returned the key is updated
  * with the new value V.
  * @param key Key
  * @param computer Computer which is called only if the key has a mapping already
  * @return Undefined if the key has no mapping, otherwise the value returned from computer
  */
  computeIfPresent(u2, c) {
    const l2 = this.get(u2);
    if (l2 === void 0)
      return;
    const v2 = c(u2, l2);
    return v2 !== void 0 ? this.set(u2, v2) : this.delete(u2), v2;
  }
  /**
  * Computes a value for given key, the computer can return a value V (in which case the map
  * will set the value for given key), if it returns undefined the mapping for key K will be
  * removed.
  * @param key Key to compute
  * @param computer Computer which is called, note that the currentValue argument contains the existing
  *                 value or is undefined when no mapping exists for the key.
  * @return The newly computed value
  */
  compute(u2, c) {
    const l2 = this.get(u2), v2 = c(u2, l2);
    return v2 ? this.set(u2, v2) : this.delete(u2), v2;
  }
};
var InternalLogLevel$1;
(function(a92) {
  a92[a92.Trace = 0] = "Trace", a92[a92.Debug = 1] = "Debug", a92[a92.Info = 2] = "Info", a92[a92.Warn = 3] = "Warn", a92[a92.Error = 4] = "Error";
})(InternalLogLevel$1 || (InternalLogLevel$1 = {}));
function getInternalLogger$1(a92) {
  return provider$1.getLogger(a92);
}
const INTERNAL_LOGGING_SETTINGS$1 = {
  /**
  * Changes the log level for the internal logging (for all new and existing loggers)
  * @param level New log level
  */
  setInternalLogLevel: (a92) => provider$1.changeLogLevel(a92),
  /**
  * Changes where messages are written to for all new and existing loggers),
  * by default they are written to the console.
  * @param fnOutput Function to write messages to
  */
  setOutput: (a92) => provider$1.changeOutput(a92),
  /**
  * Resets the log level and output back to defaults (level to error and writing to console)
  * for all new and existing loggers.
  */
  reset: () => provider$1.reset()
};
let InternalLoggerImpl$1 = class {
  constructor(u2, c, l2) {
    this._name = u2, this._level = c, this._fnOutput = l2;
  }
  trace(u2) {
    this.log(InternalLogLevel$1.Trace, u2);
  }
  debug(u2) {
    this.log(InternalLogLevel$1.Debug, u2);
  }
  error(u2, c) {
    this.log(InternalLogLevel$1.Error, u2, c);
  }
  info(u2) {
    this.log(InternalLogLevel$1.Info, u2);
  }
  warn(u2, c) {
    this.log(InternalLogLevel$1.Warn, u2, c);
  }
  setLevel(u2) {
    this._level = u2;
  }
  setOutput(u2) {
    this._fnOutput = u2;
  }
  log(u2, c, l2) {
    this._level > u2 || this._fnOutput(`${InternalLogLevel$1[this._level].toString()} <INTERNAL LOGGER> ${this._name} ${c()}${l2 ? `
` + l2.stack : ""}`);
  }
}, InternalProviderImpl$1 = class Bt {
  constructor() {
    this._loggers = new EnhancedMap$1(), this._logLevel = InternalLogLevel$1.Error, this._fnOutput = Bt.logConsole;
  }
  getLogger(u2) {
    return this._loggers.computeIfAbsent(u2, (c) => new InternalLoggerImpl$1(c, this._logLevel, this._fnOutput));
  }
  changeLogLevel(u2) {
    this._logLevel = u2, this._loggers.forEach((c) => c.setLevel(u2));
  }
  changeOutput(u2) {
    this._fnOutput = u2, this._loggers.forEach((c) => c.setOutput(this._fnOutput));
  }
  reset() {
    this.changeLogLevel(InternalLogLevel$1.Error), this._fnOutput = Bt.logConsole, this._loggers.forEach((u2) => u2.setOutput(this._fnOutput));
  }
  static logConsole(u2) {
    console && console.log && console.log(u2);
  }
};
const provider$1 = new InternalProviderImpl$1();
var InternalLogger$1 = /* @__PURE__ */ Object.freeze({ __proto__: null, get InternalLogLevel() {
  return InternalLogLevel$1;
}, getInternalLogger: getInternalLogger$1, INTERNAL_LOGGING_SETTINGS: INTERNAL_LOGGING_SETTINGS$1 }), LogLevel$2;
(function(a92) {
  a92[a92.Trace = 0] = "Trace", a92[a92.Debug = 1] = "Debug", a92[a92.Info = 2] = "Info", a92[a92.Warn = 3] = "Warn", a92[a92.Error = 4] = "Error", a92[a92.Fatal = 5] = "Fatal";
})(LogLevel$2 || (LogLevel$2 = {}));
(function(a92) {
  function u2(c) {
    switch (c.toLowerCase()) {
      case "trace":
        return a92.Trace;
      case "debug":
        return a92.Debug;
      case "info":
        return a92.Info;
      case "warn":
        return a92.Warn;
      case "error":
        return a92.Error;
      case "fatal":
        return a92.Fatal;
      default:
        return;
    }
  }
  a92.toLogLevel = u2;
})(LogLevel$2 || (LogLevel$2 = {}));
let CoreLoggerImpl$1 = class Ar {
  constructor(u2) {
    this._runtime = u2;
  }
  get id() {
    return this._runtime.id;
  }
  get logLevel() {
    return this._runtime.level;
  }
  get runtimeSettings() {
    return Object.assign({}, this._runtime);
  }
  set runtimeSettings(u2) {
    this._runtime = u2;
  }
  trace(u2, ...c) {
    this.logMessage(LogLevel$2.Trace, u2, c);
  }
  debug(u2, ...c) {
    this.logMessage(LogLevel$2.Debug, u2, c);
  }
  info(u2, ...c) {
    this.logMessage(LogLevel$2.Info, u2, c);
  }
  warn(u2, ...c) {
    this.logMessage(LogLevel$2.Warn, u2, c);
  }
  error(u2, ...c) {
    this.logMessage(LogLevel$2.Error, u2, c);
  }
  fatal(u2, ...c) {
    this.logMessage(LogLevel$2.Fatal, u2, c);
  }
  logMessage(u2, c, l2) {
    if (this._runtime.level > u2)
      return;
    const v2 = Date.now(), S2 = typeof c == "string" ? c : c(), g2 = Ar.getErrorAndArgs(l2);
    switch (this._runtime.channel.type) {
      case "RawLogChannel":
        this._runtime.channel.write({ message: S2, exception: g2.error, args: g2.args, timeInMillis: v2, level: u2, logNames: this._runtime.name }, this._runtime.argumentFormatter);
        return;
      case "LogChannel":
        this._runtime.channel.write(this.createLogMessage(S2, u2, g2, v2));
        break;
    }
  }
  formatArgValue(u2) {
    try {
      return this._runtime.argumentFormatter(u2);
    } catch {
      return `>>ARG CONVERT FAILED: '${u2 !== void 0 ? u2.toString() : "undefined"}'<<`;
    }
  }
  createLogMessage(u2, c, l2, v2) {
    let S2;
    const g2 = l2.error, E2 = l2.args;
    g2 && (S2 = `${g2.name}: ${g2.message}`, g2.stack && (S2 += `@
${g2.stack}`));
    const _ = this._runtime.dateFormatter(v2);
    let k = LogLevel$2[c].toUpperCase();
    k.length < 5 && (k += " ");
    const L2 = typeof this._runtime.name == "string" ? this._runtime.name : this._runtime.name.join(", "), M2 = typeof E2 < "u" && E2.length > 0 ? " [" + E2.map((J2) => this.formatArgValue(J2)).join(", ") + "]" : "";
    return { message: _ + " " + k + " [" + L2 + "] " + u2 + M2, error: S2 };
  }
  static getErrorAndArgs(u2) {
    if (u2.length === 0)
      return {};
    let c, l2;
    const v2 = u2[0];
    if (v2 instanceof Error)
      return c = v2, l2 = u2.length > 1 ? u2.slice(1) : void 0, { error: c, args: l2 };
    if (typeof v2 == "function") {
      const S2 = v2();
      return S2 instanceof Error ? (c = S2, l2 = u2.length > 1 ? u2.slice(1) : void 0, { error: c, args: l2 }) : u2.length === 1 ? Array.isArray(S2) ? { args: S2.length > 0 ? S2 : void 0 } : { args: S2 } : Array.isArray(S2) ? { args: [...S2, ...u2.slice(1)] } : { args: [S2, ...u2.slice(1)] };
    }
    return { args: u2 };
  }
};
function padStart$1(a92, u2, c = " ") {
  return padInternal$1(a92, u2, "start", c);
}
function padEnd$1(a92, u2, c = " ") {
  return padInternal$1(a92, u2, "end", c);
}
function maxLengthStringValueInArray$1(a92) {
  return a92.map((u2) => u2.length).reduce((u2, c) => c > u2 ? c : u2, 0);
}
function padInternal$1(a92, u2, c, l2 = " ") {
  if (u2 <= a92.length)
    return a92;
  if (l2.length > 1)
    throw new Error(`Fill char must be one char exactly, it is: ${l2.length}`);
  const v2 = u2 - a92.length;
  let S2 = "";
  for (let g2 = 0; g2 < v2; g2++)
    S2 += l2;
  return c === "start" ? S2 + a92 : a92 + S2;
}
function formatArgument$1(a92) {
  return a92 === void 0 ? "undefined" : JSON.stringify(a92);
}
function formatDate$1(a92) {
  const u2 = new Date(a92), c = u2.getFullYear(), l2 = padStart$1((u2.getMonth() + 1).toString(), 2, "0"), v2 = padStart$1(u2.getDate().toString(), 2, "0"), S2 = padStart$1(u2.getHours().toString(), 2, "0"), g2 = padStart$1(u2.getMinutes().toString(), 2, "0"), E2 = padStart$1(u2.getSeconds().toString(), 2, "0"), _ = padStart$1(u2.getMilliseconds().toString(), 2, "0");
  return `${c}-${l2}-${v2} ${S2}:${g2}:${E2},${_}`;
}
let ConsoleLogChannel$1 = class {
  constructor() {
    this.type = "LogChannel";
  }
  write(u2) {
    console && console.log && console.log(u2.message + (u2.error ? `
${u2.error}` : ""));
  }
};
var DefaultChannels$1;
(function(a92) {
  function u2() {
    return new ConsoleLogChannel$1();
  }
  a92.createConsoleChannel = u2;
})(DefaultChannels$1 || (DefaultChannels$1 = {}));
let LogProviderImpl$1 = class Mt {
  constructor(u2, c) {
    this._log = getInternalLogger$1("core.impl.LogProviderImpl"), this._name = u2, this._settings = c, this._loggers = new EnhancedMap$1(), this._idToKeyMap = new EnhancedMap$1(), this._globalRuntimeSettings = { level: c.level, channel: c.channel }, this._nextLoggerId = 1, this._log.trace(() => `Created LogProviderImpl with settings: ${JSON.stringify(this._settings)}`);
  }
  get runtimeSettings() {
    return Object.assign(Object.assign({}, this._settings), { level: this._globalRuntimeSettings.level, channel: this._globalRuntimeSettings.channel });
  }
  getLogger(u2) {
    return this.getOrCreateLogger(u2);
  }
  updateLoggerRuntime(u2, c) {
    this._log.debug(() => `Updating logger ${u2.id} runtime settings using: '${JSON.stringify(c)}'`);
    const l2 = this._idToKeyMap.get(u2.id);
    return l2 === void 0 ? (this._log.warn(() => `Cannot update logger with id: ${u2.id}, it was not found.`), false) : (this._loggers.computeIfPresent(l2, (v2, S2) => (S2.runtimeSettings = Mt.mergeRuntimeSettingsIntoLogRuntime(S2.runtimeSettings, c), S2)), true);
  }
  updateRuntimeSettings(u2) {
    this._log.debug(() => `Updating global runtime settings and updating existing loggers runtime settings using: '${JSON.stringify(u2)}'`), this._globalRuntimeSettings = {
      /* It's unclear, but not checking explicitly on undefined here makes the test fail, it makes no sense as level is a number | undefined essentially. */
      level: u2.level !== void 0 ? u2.level : this._globalRuntimeSettings.level,
      channel: u2.channel !== void 0 ? u2.channel : this._globalRuntimeSettings.channel
    }, this._loggers.forEach((c) => c.runtimeSettings = Mt.mergeRuntimeSettingsIntoLogRuntime(c.runtimeSettings, u2));
  }
  /**
  * Removes all state and loggers, it reverts back to as it was after initial construction.
  */
  clear() {
    this._loggers.clear(), this._idToKeyMap.clear(), this._globalRuntimeSettings = Object.assign({}, this._settings), this._nextLoggerId = 1;
  }
  getOrCreateLogger(u2) {
    const c = Mt.createKey(u2), l2 = this._loggers.computeIfAbsent(c, () => {
      const v2 = { level: this._globalRuntimeSettings.level, channel: this._globalRuntimeSettings.channel, id: this.nextLoggerId(), name: u2, argumentFormatter: this._settings.argumentFormatter, dateFormatter: this._settings.dateFormatter };
      return new CoreLoggerImpl$1(v2);
    });
    return this._idToKeyMap.computeIfAbsent(l2.id, () => c), l2;
  }
  nextLoggerId() {
    const u2 = this._name + "_" + this._nextLoggerId;
    return this._nextLoggerId++, u2;
  }
  static mergeRuntimeSettingsIntoLogRuntime(u2, c) {
    return Object.assign(Object.assign({}, u2), {
      /* It's unclear, but not checking explicitly on undefined here makes the test fail, it makes no sense as level is a number | undefined essentially. */
      level: c.level !== void 0 ? c.level : u2.level,
      channel: c.channel !== void 0 ? c.channel : u2.channel
    });
  }
  static createKey(u2) {
    return typeof u2 == "string" ? u2 : u2.join(",");
  }
};
function createLogProvider$1(a92, u2) {
  return new LogProviderImpl$1(a92, u2);
}
var index$4 = /* @__PURE__ */ Object.freeze({ __proto__: null, EnhancedMap: EnhancedMap$1, padStart: padStart$1, padEnd: padEnd$1, maxLengthStringValueInArray: maxLengthStringValueInArray$1 });
class ArrayLogChannel {
  constructor() {
    this._buffer = [], this.type = "LogChannel";
  }
  write(u2) {
    this._buffer.push(u2);
  }
  get logMessages() {
    return this._buffer;
  }
  get messages() {
    return this._buffer.map((u2) => u2.message);
  }
}
class ArrayRawLogChannel {
  constructor() {
    this._buffer = [], this.type = "RawLogChannel";
  }
  write(u2, c) {
    this._buffer.push(u2);
  }
  get messages() {
    return this._buffer.map((u2) => u2.message);
  }
  get errors() {
    return this._buffer.map((u2) => u2.exception);
  }
  get size() {
    return this._buffer.length;
  }
  get rawMessages() {
    return this._buffer;
  }
  clear() {
    this._buffer = [];
  }
}
class TestControlMessage {
  constructor() {
    this._messages = [], this.write = this.write.bind(this);
  }
  get messages() {
    return this._messages;
  }
  write(u2) {
    this._messages.push(u2);
  }
  clear() {
    this._messages = [];
  }
}
var TestClasses = /* @__PURE__ */ Object.freeze({ __proto__: null, ArrayLogChannel, ArrayRawLogChannel, TestControlMessage });
const typescriptLogging_esm = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({ __proto__: null, $internal: InternalLogger$1, $test: TestClasses, get DefaultChannels() {
  return DefaultChannels$1;
}, get LogLevel() {
  return LogLevel$2;
}, createLogProvider: createLogProvider$1, formatArgument: formatArgument$1, formatDate: formatDate$1, util: index$4 }, Symbol.toStringTag, { value: "Module" })), require$$2$1 = /* @__PURE__ */ getAugmentedNamespace(typescriptLogging_esm);
var layoutapi = {}, lib$1 = {}, lib = {}, Metadata = {};
Object.defineProperty(Metadata, "__esModule", { value: true });
Metadata.Metadata = void 0;
Metadata.Metadata = function(u2) {
  const c = /* @__PURE__ */ new Map(), l2 = { set(v2, S2) {
    if (v2 = normalizeKey(v2), Array.isArray(S2)) {
      if (S2.length === 0)
        c.delete(v2);
      else {
        for (const g2 of S2)
          validate$1(v2, g2);
        c.set(v2, v2.endsWith("-bin") ? S2 : [S2.join(", ")]);
      }
    } else
      validate$1(v2, S2), c.set(v2, [S2]);
    return l2;
  }, append(v2, S2) {
    v2 = normalizeKey(v2), validate$1(v2, S2);
    let g2 = c.get(v2);
    return g2 == null && (g2 = [], c.set(v2, g2)), g2.push(S2), v2.endsWith("-bin") || c.set(v2, [g2.join(", ")]), l2;
  }, delete(v2) {
    v2 = normalizeKey(v2), c.delete(v2);
  }, get(v2) {
    var S2;
    return v2 = normalizeKey(v2), (S2 = c.get(v2)) === null || S2 === void 0 ? void 0 : S2[0];
  }, getAll(v2) {
    var S2;
    return v2 = normalizeKey(v2), (S2 = c.get(v2)) !== null && S2 !== void 0 ? S2 : [];
  }, has(v2) {
    return v2 = normalizeKey(v2), c.has(v2);
  }, [Symbol.iterator]() {
    return c[Symbol.iterator]();
  } };
  if (u2 != null) {
    const v2 = isIterable$1(u2) ? u2 : Object.entries(u2);
    for (const [S2, g2] of v2)
      l2.set(S2, g2);
  }
  return l2;
};
function normalizeKey(a92) {
  return a92.toLowerCase();
}
function validate$1(a92, u2) {
  if (!/^[0-9a-z_.-]+$/.test(a92))
    throw new Error(`Metadata key '${a92}' contains illegal characters`);
  if (a92.endsWith("-bin")) {
    if (!(u2 instanceof Uint8Array))
      throw new Error(`Metadata key '${a92}' ends with '-bin', thus it must have binary value`);
  } else {
    if (typeof u2 != "string")
      throw new Error(`Metadata key '${a92}' doesn't end with '-bin', thus it must have string value`);
    if (!/^[ -~]*$/.test(u2))
      throw new Error(`Metadata value '${u2}' of key '${a92}' contains illegal characters`);
  }
}
function isIterable$1(a92) {
  return Symbol.iterator in a92;
}
var Status = {};
(function(a92) {
  Object.defineProperty(a92, "__esModule", { value: true }), a92.Status = void 0, function(u2) {
    u2[u2.OK = 0] = "OK", u2[u2.CANCELLED = 1] = "CANCELLED", u2[u2.UNKNOWN = 2] = "UNKNOWN", u2[u2.INVALID_ARGUMENT = 3] = "INVALID_ARGUMENT", u2[u2.DEADLINE_EXCEEDED = 4] = "DEADLINE_EXCEEDED", u2[u2.NOT_FOUND = 5] = "NOT_FOUND", u2[u2.ALREADY_EXISTS = 6] = "ALREADY_EXISTS", u2[u2.PERMISSION_DENIED = 7] = "PERMISSION_DENIED", u2[u2.RESOURCE_EXHAUSTED = 8] = "RESOURCE_EXHAUSTED", u2[u2.FAILED_PRECONDITION = 9] = "FAILED_PRECONDITION", u2[u2.ABORTED = 10] = "ABORTED", u2[u2.OUT_OF_RANGE = 11] = "OUT_OF_RANGE", u2[u2.UNIMPLEMENTED = 12] = "UNIMPLEMENTED", u2[u2.INTERNAL = 13] = "INTERNAL", u2[u2.UNAVAILABLE = 14] = "UNAVAILABLE", u2[u2.DATA_LOSS = 15] = "DATA_LOSS", u2[u2.UNAUTHENTICATED = 16] = "UNAUTHENTICATED";
  }(a92.Status || (a92.Status = {}));
})(Status);
var MethodDescriptor = {};
Object.defineProperty(MethodDescriptor, "__esModule", { value: true });
var CallOptions = {};
Object.defineProperty(CallOptions, "__esModule", { value: true });
var ClientMiddleware = {};
Object.defineProperty(ClientMiddleware, "__esModule", { value: true });
var composeClientMiddleware$1 = {};
Object.defineProperty(composeClientMiddleware$1, "__esModule", { value: true });
composeClientMiddleware$1.composeClientMiddleware = void 0;
function composeClientMiddleware(a92, u2) {
  return (c, l2) => u2({ ...c, next: (v2, S2) => a92({ ...c, request: v2 }, S2) }, l2);
}
composeClientMiddleware$1.composeClientMiddleware = composeClientMiddleware;
var ClientError$1 = {}, cjs = {}, helpers = {};
helpers.__esModule = void 0;
helpers.__esModule = true;
var objectSetPrototypeOfIsDefined = typeof Object.setPrototypeOf == "function", objectGetPrototypeOfIsDefined = typeof Object.getPrototypeOf == "function", objectDefinePropertyIsDefined = typeof Object.defineProperty == "function", objectCreateIsDefined = typeof Object.create == "function", objectHasOwnPropertyIsDefined = typeof Object.prototype.hasOwnProperty == "function", setPrototypeOf = function(u2, c) {
  objectSetPrototypeOfIsDefined ? Object.setPrototypeOf(u2, c) : u2.__proto__ = c;
};
helpers.setPrototypeOf = setPrototypeOf;
var getPrototypeOf = function(u2) {
  return objectGetPrototypeOfIsDefined ? Object.getPrototypeOf(u2) : u2.__proto__ || u2.prototype;
};
helpers.getPrototypeOf = getPrototypeOf;
var ie8ObjectDefinePropertyBug = false, defineProperty = function a2(u2, c, l2) {
  if (objectDefinePropertyIsDefined && !ie8ObjectDefinePropertyBug)
    try {
      Object.defineProperty(u2, c, l2);
    } catch {
      ie8ObjectDefinePropertyBug = true, a2(u2, c, l2);
    }
  else
    u2[c] = l2.value;
};
helpers.defineProperty = defineProperty;
var hasOwnProperty$2 = function(u2, c) {
  return objectHasOwnPropertyIsDefined ? u2.hasOwnProperty(u2, c) : u2[c] === void 0;
};
helpers.hasOwnProperty = hasOwnProperty$2;
var objectCreate = function(u2, c) {
  if (objectCreateIsDefined)
    return Object.create(u2, c);
  var l2 = function() {
  };
  l2.prototype = u2;
  var v2 = new l2();
  if (typeof c > "u")
    return v2;
  if (typeof c == "null")
    throw new Error("PropertyDescriptors must not be null.");
  if (typeof c == "object")
    for (var S2 in c)
      hasOwnProperty$2(c, S2) && (v2[S2] = c[S2].value);
  return v2;
};
helpers.objectCreate = objectCreate;
(function(a92) {
  a92.__esModule = void 0, a92.__esModule = true;
  var u2 = helpers, c = u2.setPrototypeOf, l2 = u2.getPrototypeOf, v2 = u2.defineProperty, S2 = u2.objectCreate, g2 = new Error().toString() === "[object Error]", E2 = "";
  function _(k) {
    var L2 = this.constructor, M2 = L2.name || function() {
      var G2 = L2.toString().match(/^function\s*([^\s(]+)/);
      return G2 === null ? E2 || "Error" : G2[1];
    }(), $ = M2 === "Error", J2 = $ ? E2 : M2, V2 = Error.apply(this, arguments);
    if (c(V2, l2(this)), !(V2 instanceof L2) || !(V2 instanceof _)) {
      var V2 = this;
      Error.apply(this, arguments), v2(V2, "message", { configurable: true, enumerable: false, value: k, writable: true });
    }
    if (v2(V2, "name", { configurable: true, enumerable: false, value: J2, writable: true }), Error.captureStackTrace && Error.captureStackTrace(V2, $ ? _ : L2), V2.stack === void 0) {
      var q2 = new Error(k);
      q2.name = V2.name, V2.stack = q2.stack;
    }
    return g2 && v2(V2, "toString", { configurable: true, enumerable: false, value: function() {
      return (this.name || "Error") + (typeof this.message > "u" ? "" : ": " + this.message);
    }, writable: true }), V2;
  }
  E2 = _.name || "ExtendableError", _.prototype = S2(Error.prototype, { constructor: { value: Error, enumerable: false, writable: true, configurable: true } }), a92.ExtendableError = _, a92.default = a92.ExtendableError;
})(cjs);
Object.defineProperty(ClientError$1, "__esModule", { value: true });
ClientError$1.ClientError = void 0;
const ts_error_1$1 = cjs, Status_1$1 = Status;
class ClientError extends ts_error_1$1.ExtendableError {
  constructor(u2, c, l2) {
    super(`${u2} ${Status_1$1.Status[c]}: ${l2}`), this.path = u2, this.code = c, this.details = l2, this.name = "ClientError", Object.defineProperty(this, "@@nice-grpc", { value: true }), Object.defineProperty(this, "@@nice-grpc:ClientError", { value: true });
  }
  static [Symbol.hasInstance](u2) {
    return this !== ClientError ? this.prototype.isPrototypeOf(u2) : typeof u2 == "object" && u2 !== null && (u2.constructor === ClientError || u2["@@nice-grpc:ClientError"] === true || u2.name === "ClientError" && u2["@@nice-grpc"] === true);
  }
}
ClientError$1.ClientError = ClientError;
var CallContext = {};
Object.defineProperty(CallContext, "__esModule", { value: true });
var ServerMiddleware = {};
Object.defineProperty(ServerMiddleware, "__esModule", { value: true });
var composeServerMiddleware$1 = {};
Object.defineProperty(composeServerMiddleware$1, "__esModule", { value: true });
composeServerMiddleware$1.composeServerMiddleware = void 0;
function composeServerMiddleware(a92, u2) {
  return (c, l2) => a92({ ...c, next: (v2, S2) => u2({ ...c, request: v2 }, S2) }, l2);
}
composeServerMiddleware$1.composeServerMiddleware = composeServerMiddleware;
var ServerError$1 = {};
Object.defineProperty(ServerError$1, "__esModule", { value: true });
ServerError$1.ServerError = void 0;
const ts_error_1 = cjs, Status_1 = Status;
class ServerError extends ts_error_1.ExtendableError {
  constructor(u2, c) {
    super(`${Status_1.Status[u2]}: ${c}`), this.code = u2, this.details = c, this.name = "ServerError", Object.defineProperty(this, "@@nice-grpc", { value: true }), Object.defineProperty(this, "@@nice-grpc:ServerError", { value: true });
  }
  static [Symbol.hasInstance](u2) {
    return this !== ServerError ? this.prototype.isPrototypeOf(u2) : typeof u2 == "object" && u2 !== null && (u2.constructor === ServerError || u2["@@nice-grpc:ServerError"] === true || u2.name === "ServerError" && u2["@@nice-grpc"] === true);
  }
}
ServerError$1.ServerError = ServerError;
(function(a92) {
  var u2 = commonjsGlobal$1 && commonjsGlobal$1.__createBinding || (Object.create ? function(l2, v2, S2, g2) {
    g2 === void 0 && (g2 = S2);
    var E2 = Object.getOwnPropertyDescriptor(v2, S2);
    (!E2 || ("get" in E2 ? !v2.__esModule : E2.writable || E2.configurable)) && (E2 = { enumerable: true, get: function() {
      return v2[S2];
    } }), Object.defineProperty(l2, g2, E2);
  } : function(l2, v2, S2, g2) {
    g2 === void 0 && (g2 = S2), l2[g2] = v2[S2];
  }), c = commonjsGlobal$1 && commonjsGlobal$1.__exportStar || function(l2, v2) {
    for (var S2 in l2)
      S2 !== "default" && !Object.prototype.hasOwnProperty.call(v2, S2) && u2(v2, l2, S2);
  };
  Object.defineProperty(a92, "__esModule", { value: true }), c(Metadata, a92), c(Status, a92), c(MethodDescriptor, a92), c(CallOptions, a92), c(ClientMiddleware, a92), c(composeClientMiddleware$1, a92), c(ClientError$1, a92), c(CallContext, a92), c(ServerMiddleware, a92), c(composeServerMiddleware$1, a92), c(ServerError$1, a92);
})(lib);
var serviceDefinitions = {}, grpcWeb = {};
Object.defineProperty(grpcWeb, "__esModule", { value: true });
grpcWeb.isGrpcWebServiceDefinition = grpcWeb.fromGrpcWebServiceDefinition = void 0;
function fromGrpcWebServiceDefinition(a92) {
  const u2 = {};
  for (const [c, l2] of Object.entries(a92)) {
    if (c === "serviceName")
      continue;
    const v2 = l2;
    u2[uncapitalize(c)] = { path: `/${a92.serviceName}/${c}`, requestStream: v2.requestStream, responseStream: v2.responseStream, requestDeserialize: v2.requestType.deserializeBinary, requestSerialize: (S2) => S2.serializeBinary(), responseDeserialize: v2.responseType.deserializeBinary, responseSerialize: (S2) => S2.serializeBinary(), options: {} };
  }
  return u2;
}
grpcWeb.fromGrpcWebServiceDefinition = fromGrpcWebServiceDefinition;
function isGrpcWebServiceDefinition(a92) {
  return "prototype" in a92;
}
grpcWeb.isGrpcWebServiceDefinition = isGrpcWebServiceDefinition;
function uncapitalize(a92) {
  return a92.length === 0 ? a92 : a92[0].toLowerCase() + a92.slice(1);
}
var tsProto = {};
Object.defineProperty(tsProto, "__esModule", { value: true });
tsProto.isTsProtoServiceDefinition = tsProto.fromTsProtoServiceDefinition = void 0;
function fromTsProtoServiceDefinition(a92) {
  const u2 = {};
  for (const [c, l2] of Object.entries(a92.methods)) {
    const v2 = l2.requestType.encode, S2 = l2.requestType.fromPartial, g2 = l2.responseType.encode, E2 = l2.responseType.fromPartial;
    u2[c] = { path: `/${a92.fullName}/${l2.name}`, requestStream: l2.requestStream, responseStream: l2.responseStream, requestDeserialize: l2.requestType.decode, requestSerialize: S2 != null ? (_) => v2(S2(_)).finish() : (_) => v2(_).finish(), responseDeserialize: l2.responseType.decode, responseSerialize: E2 != null ? (_) => g2(E2(_)).finish() : (_) => g2(_).finish(), options: l2.options };
  }
  return u2;
}
tsProto.fromTsProtoServiceDefinition = fromTsProtoServiceDefinition;
function isTsProtoServiceDefinition(a92) {
  return "name" in a92 && "fullName" in a92 && "methods" in a92;
}
tsProto.isTsProtoServiceDefinition = isTsProtoServiceDefinition;
Object.defineProperty(serviceDefinitions, "__esModule", { value: true });
serviceDefinitions.toGrpcWebMethodDefinition = serviceDefinitions.normalizeServiceDefinition = void 0;
const grpc_web_1$5 = grpcWeb, ts_proto_1 = tsProto;
function normalizeServiceDefinition(a92) {
  return (0, grpc_web_1$5.isGrpcWebServiceDefinition)(a92) ? (0, grpc_web_1$5.fromGrpcWebServiceDefinition)(a92) : (0, ts_proto_1.isTsProtoServiceDefinition)(a92) ? (0, ts_proto_1.fromTsProtoServiceDefinition)(a92) : a92;
}
serviceDefinitions.normalizeServiceDefinition = normalizeServiceDefinition;
function toGrpcWebMethodDefinition(a92) {
  const [, u2, c] = a92.path.split("/");
  return { service: { serviceName: u2 }, methodName: c, requestStream: a92.requestStream, responseStream: a92.responseStream, requestType: class {
    constructor() {
      throw new Error("Unexpected instantiation");
    }
    static deserializeBinary(l2) {
      return a92.requestDeserialize(l2);
    }
  }, responseType: class {
    constructor() {
      throw new Error("Unexpected instantiation");
    }
    static deserializeBinary(l2) {
      return a92.responseDeserialize(l2);
    }
  } };
}
serviceDefinitions.toGrpcWebMethodDefinition = toGrpcWebMethodDefinition;
var channel = {};
Object.defineProperty(channel, "__esModule", { value: true });
channel.createChannel = void 0;
function createChannel(a92, u2) {
  return { address: a92, transport: u2 };
}
channel.createChannel = createChannel;
var ClientFactory = {}, createBidiStreamingMethod$1 = {}, grpcWebClient_umd = { exports: {} };
(function(a92, u2) {
  (function(c, l2) {
    a92.exports = l2();
  })(commonjsGlobal$1, function() {
    return c = { 418: function(v2, S2) {
      (function(g2, E2) {
        for (var _ in E2)
          g2[_] = E2[_];
      })(S2, function(g2) {
        var E2 = {};
        function _(k) {
          if (E2[k])
            return E2[k].exports;
          var L2 = E2[k] = { i: k, l: false, exports: {} };
          return g2[k].call(L2.exports, L2, L2.exports, _), L2.l = true, L2.exports;
        }
        return _.m = g2, _.c = E2, _.i = function(k) {
          return k;
        }, _.d = function(k, L2, M2) {
          _.o(k, L2) || Object.defineProperty(k, L2, { configurable: false, enumerable: true, get: M2 });
        }, _.n = function(k) {
          var L2 = k && k.__esModule ? function() {
            return k.default;
          } : function() {
            return k;
          };
          return _.d(L2, "a", L2), L2;
        }, _.o = function(k, L2) {
          return Object.prototype.hasOwnProperty.call(k, L2);
        }, _.p = "", _(_.s = 1);
      }([function(g2, E2, _) {
        Object.defineProperty(E2, "__esModule", { value: true });
        var k = _(3), L2 = function() {
          function M2($, J2) {
            $ === void 0 && ($ = {}), J2 === void 0 && (J2 = { splitValues: false });
            var V2, q2 = this;
            this.headersMap = {}, $ && (typeof Headers < "u" && $ instanceof Headers ? k.getHeaderKeys($).forEach(function(G2) {
              k.getHeaderValues($, G2).forEach(function(H2) {
                J2.splitValues ? q2.append(G2, k.splitHeaderValue(H2)) : q2.append(G2, H2);
              });
            }) : typeof (V2 = $) == "object" && typeof V2.headersMap == "object" && typeof V2.forEach == "function" ? $.forEach(function(G2, H2) {
              q2.append(G2, H2);
            }) : typeof Map < "u" && $ instanceof Map ? $.forEach(function(G2, H2) {
              q2.append(H2, G2);
            }) : typeof $ == "string" ? this.appendFromString($) : typeof $ == "object" && Object.getOwnPropertyNames($).forEach(function(G2) {
              var H2 = $[G2];
              Array.isArray(H2) ? H2.forEach(function(B2) {
                q2.append(G2, B2);
              }) : q2.append(G2, H2);
            }));
          }
          return M2.prototype.appendFromString = function($) {
            for (var J2 = $.split(`\r
`), V2 = 0; V2 < J2.length; V2++) {
              var q2 = J2[V2], G2 = q2.indexOf(":");
              if (G2 > 0) {
                var H2 = q2.substring(0, G2).trim(), B2 = q2.substring(G2 + 1).trim();
                this.append(H2, B2);
              }
            }
          }, M2.prototype.delete = function($, J2) {
            var V2 = k.normalizeName($);
            if (J2 === void 0)
              delete this.headersMap[V2];
            else {
              var q2 = this.headersMap[V2];
              if (q2) {
                var G2 = q2.indexOf(J2);
                G2 >= 0 && q2.splice(G2, 1), q2.length === 0 && delete this.headersMap[V2];
              }
            }
          }, M2.prototype.append = function($, J2) {
            var V2 = this, q2 = k.normalizeName($);
            Array.isArray(this.headersMap[q2]) || (this.headersMap[q2] = []), Array.isArray(J2) ? J2.forEach(function(G2) {
              V2.headersMap[q2].push(k.normalizeValue(G2));
            }) : this.headersMap[q2].push(k.normalizeValue(J2));
          }, M2.prototype.set = function($, J2) {
            var V2 = k.normalizeName($);
            if (Array.isArray(J2)) {
              var q2 = [];
              J2.forEach(function(G2) {
                q2.push(k.normalizeValue(G2));
              }), this.headersMap[V2] = q2;
            } else
              this.headersMap[V2] = [k.normalizeValue(J2)];
          }, M2.prototype.has = function($, J2) {
            var V2 = this.headersMap[k.normalizeName($)];
            if (!Array.isArray(V2))
              return false;
            if (J2 !== void 0) {
              var q2 = k.normalizeValue(J2);
              return V2.indexOf(q2) >= 0;
            }
            return true;
          }, M2.prototype.get = function($) {
            var J2 = this.headersMap[k.normalizeName($)];
            return J2 !== void 0 ? J2.concat() : [];
          }, M2.prototype.forEach = function($) {
            var J2 = this;
            Object.getOwnPropertyNames(this.headersMap).forEach(function(V2) {
              $(V2, J2.headersMap[V2]);
            }, this);
          }, M2.prototype.toHeaders = function() {
            if (typeof Headers < "u") {
              var $ = new Headers();
              return this.forEach(function(J2, V2) {
                V2.forEach(function(q2) {
                  $.append(J2, q2);
                });
              }), $;
            }
            throw new Error("Headers class is not defined");
          }, M2;
        }();
        E2.BrowserHeaders = L2;
      }, function(g2, E2, _) {
        Object.defineProperty(E2, "__esModule", { value: true });
        var k = _(0);
        E2.BrowserHeaders = k.BrowserHeaders;
      }, function(g2, E2, _) {
        Object.defineProperty(E2, "__esModule", { value: true }), E2.iterateHeaders = function(k, L2) {
          for (var M2 = k[Symbol.iterator](), $ = M2.next(); !$.done; )
            L2($.value[0]), $ = M2.next();
        }, E2.iterateHeadersKeys = function(k, L2) {
          for (var M2 = k.keys(), $ = M2.next(); !$.done; )
            L2($.value), $ = M2.next();
        };
      }, function(g2, E2, _) {
        Object.defineProperty(E2, "__esModule", { value: true });
        var k = _(2);
        E2.normalizeName = function(L2) {
          if (typeof L2 != "string" && (L2 = String(L2)), /[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(L2))
            throw new TypeError("Invalid character in header field name");
          return L2.toLowerCase();
        }, E2.normalizeValue = function(L2) {
          return typeof L2 != "string" && (L2 = String(L2)), L2;
        }, E2.getHeaderValues = function(L2, M2) {
          var $ = L2;
          if ($ instanceof Headers && $.getAll)
            return $.getAll(M2);
          var J2 = $.get(M2);
          return J2 && typeof J2 == "string" ? [J2] : J2;
        }, E2.getHeaderKeys = function(L2) {
          var M2 = L2, $ = {}, J2 = [];
          return M2.keys ? k.iterateHeadersKeys(M2, function(V2) {
            $[V2] || ($[V2] = true, J2.push(V2));
          }) : M2.forEach ? M2.forEach(function(V2, q2) {
            $[q2] || ($[q2] = true, J2.push(q2));
          }) : k.iterateHeaders(M2, function(V2) {
            var q2 = V2[0];
            $[q2] || ($[q2] = true, J2.push(q2));
          }), J2;
        }, E2.splitHeaderValue = function(L2) {
          var M2 = [];
          return L2.split(", ").forEach(function($) {
            $.split(",").forEach(function(J2) {
              M2.push(J2);
            });
          }), M2;
        };
      }]));
    }, 617: function(v2, S2, g2) {
      Object.defineProperty(S2, "__esModule", { value: true }), S2.ChunkParser = S2.ChunkType = S2.encodeASCII = S2.decodeASCII = void 0;
      var E2, _ = g2(65);
      function k(G2) {
        return (H2 = G2) === 9 || H2 === 10 || H2 === 13 || G2 >= 32 && G2 <= 126;
        var H2;
      }
      function L2(G2) {
        for (var H2 = 0; H2 !== G2.length; ++H2)
          if (!k(G2[H2]))
            throw new Error("Metadata is not valid (printable) ASCII");
        return String.fromCharCode.apply(String, Array.prototype.slice.call(G2));
      }
      function M2(G2) {
        return (128 & G2.getUint8(0)) == 128;
      }
      function $(G2) {
        return G2.getUint32(1, false);
      }
      function J2(G2, H2, B2) {
        return G2.byteLength - H2 >= B2;
      }
      function V2(G2, H2, B2) {
        if (G2.slice)
          return G2.slice(H2, B2);
        var Y2 = G2.length;
        B2 !== void 0 && (Y2 = B2);
        for (var ne2 = new Uint8Array(Y2 - H2), Z2 = 0, re2 = H2; re2 < Y2; re2++)
          ne2[Z2++] = G2[re2];
        return ne2;
      }
      S2.decodeASCII = L2, S2.encodeASCII = function(G2) {
        for (var H2 = new Uint8Array(G2.length), B2 = 0; B2 !== G2.length; ++B2) {
          var Y2 = G2.charCodeAt(B2);
          if (!k(Y2))
            throw new Error("Metadata contains invalid ASCII");
          H2[B2] = Y2;
        }
        return H2;
      }, function(G2) {
        G2[G2.MESSAGE = 1] = "MESSAGE", G2[G2.TRAILERS = 2] = "TRAILERS";
      }(E2 = S2.ChunkType || (S2.ChunkType = {}));
      var q2 = function() {
        function G2() {
          this.buffer = null, this.position = 0;
        }
        return G2.prototype.parse = function(H2, B2) {
          if (H2.length === 0 && B2)
            return [];
          var Y2, ne2 = [];
          if (this.buffer == null)
            this.buffer = H2, this.position = 0;
          else if (this.position === this.buffer.byteLength)
            this.buffer = H2, this.position = 0;
          else {
            var Z2 = this.buffer.byteLength - this.position, re2 = new Uint8Array(Z2 + H2.byteLength), oe2 = V2(this.buffer, this.position);
            re2.set(oe2, 0);
            var de2 = new Uint8Array(H2);
            re2.set(de2, Z2), this.buffer = re2, this.position = 0;
          }
          for (; ; ) {
            if (!J2(this.buffer, this.position, 5))
              return ne2;
            var A2 = V2(this.buffer, this.position, this.position + 5), N2 = new DataView(A2.buffer, A2.byteOffset, A2.byteLength), D2 = $(N2);
            if (!J2(this.buffer, this.position, 5 + D2))
              return ne2;
            var W2 = V2(this.buffer, this.position + 5, this.position + 5 + D2);
            if (this.position += 5 + D2, M2(N2))
              return ne2.push({ chunkType: E2.TRAILERS, trailers: (Y2 = W2, new _.Metadata(L2(Y2))) }), ne2;
            ne2.push({ chunkType: E2.MESSAGE, data: W2 });
          }
        }, G2;
      }();
      S2.ChunkParser = q2;
    }, 8: function(v2, S2) {
      var g2;
      Object.defineProperty(S2, "__esModule", { value: true }), S2.httpStatusToCode = S2.Code = void 0, function(E2) {
        E2[E2.OK = 0] = "OK", E2[E2.Canceled = 1] = "Canceled", E2[E2.Unknown = 2] = "Unknown", E2[E2.InvalidArgument = 3] = "InvalidArgument", E2[E2.DeadlineExceeded = 4] = "DeadlineExceeded", E2[E2.NotFound = 5] = "NotFound", E2[E2.AlreadyExists = 6] = "AlreadyExists", E2[E2.PermissionDenied = 7] = "PermissionDenied", E2[E2.ResourceExhausted = 8] = "ResourceExhausted", E2[E2.FailedPrecondition = 9] = "FailedPrecondition", E2[E2.Aborted = 10] = "Aborted", E2[E2.OutOfRange = 11] = "OutOfRange", E2[E2.Unimplemented = 12] = "Unimplemented", E2[E2.Internal = 13] = "Internal", E2[E2.Unavailable = 14] = "Unavailable", E2[E2.DataLoss = 15] = "DataLoss", E2[E2.Unauthenticated = 16] = "Unauthenticated";
      }(g2 = S2.Code || (S2.Code = {})), S2.httpStatusToCode = function(E2) {
        switch (E2) {
          case 0:
            return g2.Internal;
          case 200:
            return g2.OK;
          case 400:
            return g2.InvalidArgument;
          case 401:
            return g2.Unauthenticated;
          case 403:
            return g2.PermissionDenied;
          case 404:
            return g2.NotFound;
          case 409:
            return g2.Aborted;
          case 412:
            return g2.FailedPrecondition;
          case 429:
            return g2.ResourceExhausted;
          case 499:
            return g2.Canceled;
          case 500:
            return g2.Unknown;
          case 501:
            return g2.Unimplemented;
          case 503:
            return g2.Unavailable;
          case 504:
            return g2.DeadlineExceeded;
          default:
            return g2.Unknown;
        }
      };
    }, 934: function(v2, S2, g2) {
      Object.defineProperty(S2, "__esModule", { value: true }), S2.client = void 0;
      var E2 = g2(65), _ = g2(617), k = g2(8), L2 = g2(346), M2 = g2(57), $ = g2(882);
      S2.client = function(q2, G2) {
        return new J2(q2, G2);
      };
      var J2 = function() {
        function q2(G2, H2) {
          this.started = false, this.sentFirstMessage = false, this.completed = false, this.closed = false, this.finishedSending = false, this.onHeadersCallbacks = [], this.onMessageCallbacks = [], this.onEndCallbacks = [], this.parser = new _.ChunkParser(), this.methodDefinition = G2, this.props = H2, this.createTransport();
        }
        return q2.prototype.createTransport = function() {
          var G2 = this.props.host + "/" + this.methodDefinition.service.serviceName + "/" + this.methodDefinition.methodName, H2 = { methodDefinition: this.methodDefinition, debug: this.props.debug || false, url: G2, onHeaders: this.onTransportHeaders.bind(this), onChunk: this.onTransportChunk.bind(this), onEnd: this.onTransportEnd.bind(this) };
          this.props.transport ? this.transport = this.props.transport(H2) : this.transport = M2.makeDefaultTransport(H2);
        }, q2.prototype.onTransportHeaders = function(G2, H2) {
          if (this.props.debug && L2.debug("onHeaders", G2, H2), this.closed)
            this.props.debug && L2.debug("grpc.onHeaders received after request was closed - ignoring");
          else if (H2 !== 0) {
            this.responseHeaders = G2, this.props.debug && L2.debug("onHeaders.responseHeaders", JSON.stringify(this.responseHeaders, null, 2));
            var B2 = V2(G2);
            this.props.debug && L2.debug("onHeaders.gRPCStatus", B2);
            var Y2 = B2 && B2 >= 0 ? B2 : k.httpStatusToCode(H2);
            this.props.debug && L2.debug("onHeaders.code", Y2);
            var ne2 = G2.get("grpc-message") || [];
            if (this.props.debug && L2.debug("onHeaders.gRPCMessage", ne2), this.rawOnHeaders(G2), Y2 !== k.Code.OK) {
              var Z2 = this.decodeGRPCStatus(ne2[0]);
              this.rawOnError(Y2, Z2, G2);
            }
          }
        }, q2.prototype.onTransportChunk = function(G2) {
          var H2 = this;
          if (this.closed)
            this.props.debug && L2.debug("grpc.onChunk received after request was closed - ignoring");
          else {
            var B2 = [];
            try {
              B2 = this.parser.parse(G2);
            } catch (Y2) {
              return this.props.debug && L2.debug("onChunk.parsing error", Y2, Y2.message), void this.rawOnError(k.Code.Internal, "parsing error: " + Y2.message);
            }
            B2.forEach(function(Y2) {
              if (Y2.chunkType === _.ChunkType.MESSAGE) {
                var ne2 = H2.methodDefinition.responseType.deserializeBinary(Y2.data);
                H2.rawOnMessage(ne2);
              } else
                Y2.chunkType === _.ChunkType.TRAILERS && (H2.responseHeaders ? (H2.responseTrailers = new E2.Metadata(Y2.trailers), H2.props.debug && L2.debug("onChunk.trailers", H2.responseTrailers)) : (H2.responseHeaders = new E2.Metadata(Y2.trailers), H2.rawOnHeaders(H2.responseHeaders)));
            });
          }
        }, q2.prototype.onTransportEnd = function() {
          if (this.props.debug && L2.debug("grpc.onEnd"), this.closed)
            this.props.debug && L2.debug("grpc.onEnd received after request was closed - ignoring");
          else if (this.responseTrailers !== void 0) {
            var G2 = V2(this.responseTrailers);
            if (G2 !== null) {
              var H2 = this.responseTrailers.get("grpc-message"), B2 = this.decodeGRPCStatus(H2[0]);
              this.rawOnEnd(G2, B2, this.responseTrailers);
            } else
              this.rawOnError(k.Code.Internal, "Response closed without grpc-status (Trailers provided)");
          } else {
            if (this.responseHeaders === void 0)
              return void this.rawOnError(k.Code.Unknown, "Response closed without headers");
            var Y2 = V2(this.responseHeaders), ne2 = this.responseHeaders.get("grpc-message");
            if (this.props.debug && L2.debug("grpc.headers only response ", Y2, ne2), Y2 === null)
              return void this.rawOnEnd(k.Code.Unknown, "Response closed without grpc-status (Headers only)", this.responseHeaders);
            var Z2 = this.decodeGRPCStatus(ne2[0]);
            this.rawOnEnd(Y2, Z2, this.responseHeaders);
          }
        }, q2.prototype.decodeGRPCStatus = function(G2) {
          if (!G2)
            return "";
          try {
            return decodeURIComponent(G2);
          } catch {
            return G2;
          }
        }, q2.prototype.rawOnEnd = function(G2, H2, B2) {
          var Y2 = this;
          this.props.debug && L2.debug("rawOnEnd", G2, H2, B2), this.completed || (this.completed = true, this.onEndCallbacks.forEach(function(ne2) {
            if (!Y2.closed)
              try {
                ne2(G2, H2, B2);
              } catch (Z2) {
                setTimeout(function() {
                  throw Z2;
                }, 0);
              }
          }));
        }, q2.prototype.rawOnHeaders = function(G2) {
          this.props.debug && L2.debug("rawOnHeaders", G2), this.completed || this.onHeadersCallbacks.forEach(function(H2) {
            try {
              H2(G2);
            } catch (B2) {
              setTimeout(function() {
                throw B2;
              }, 0);
            }
          });
        }, q2.prototype.rawOnError = function(G2, H2, B2) {
          var Y2 = this;
          B2 === void 0 && (B2 = new E2.Metadata()), this.props.debug && L2.debug("rawOnError", G2, H2), this.completed || (this.completed = true, this.onEndCallbacks.forEach(function(ne2) {
            if (!Y2.closed)
              try {
                ne2(G2, H2, B2);
              } catch (Z2) {
                setTimeout(function() {
                  throw Z2;
                }, 0);
              }
          }));
        }, q2.prototype.rawOnMessage = function(G2) {
          var H2 = this;
          this.props.debug && L2.debug("rawOnMessage", G2.toObject()), this.completed || this.closed || this.onMessageCallbacks.forEach(function(B2) {
            if (!H2.closed)
              try {
                B2(G2);
              } catch (Y2) {
                setTimeout(function() {
                  throw Y2;
                }, 0);
              }
          });
        }, q2.prototype.onHeaders = function(G2) {
          this.onHeadersCallbacks.push(G2);
        }, q2.prototype.onMessage = function(G2) {
          this.onMessageCallbacks.push(G2);
        }, q2.prototype.onEnd = function(G2) {
          this.onEndCallbacks.push(G2);
        }, q2.prototype.start = function(G2) {
          if (this.started)
            throw new Error("Client already started - cannot .start()");
          this.started = true;
          var H2 = new E2.Metadata(G2 || {});
          H2.set("content-type", "application/grpc-web+proto"), H2.set("x-grpc-web", "1"), this.transport.start(H2);
        }, q2.prototype.send = function(G2) {
          if (!this.started)
            throw new Error("Client not started - .start() must be called before .send()");
          if (this.closed)
            throw new Error("Client already closed - cannot .send()");
          if (this.finishedSending)
            throw new Error("Client already finished sending - cannot .send()");
          if (!this.methodDefinition.requestStream && this.sentFirstMessage)
            throw new Error("Message already sent for non-client-streaming method - cannot .send()");
          this.sentFirstMessage = true;
          var H2 = $.frameRequest(G2);
          this.transport.sendMessage(H2);
        }, q2.prototype.finishSend = function() {
          if (!this.started)
            throw new Error("Client not started - .finishSend() must be called before .close()");
          if (this.closed)
            throw new Error("Client already closed - cannot .send()");
          if (this.finishedSending)
            throw new Error("Client already finished sending - cannot .finishSend()");
          this.finishedSending = true, this.transport.finishSend();
        }, q2.prototype.close = function() {
          if (!this.started)
            throw new Error("Client not started - .start() must be called before .close()");
          if (this.closed)
            throw new Error("Client already closed - cannot .close()");
          this.closed = true, this.props.debug && L2.debug("request.abort aborting request"), this.transport.cancel();
        }, q2;
      }();
      function V2(q2) {
        var G2 = q2.get("grpc-status") || [];
        if (G2.length > 0)
          try {
            var H2 = G2[0];
            return parseInt(H2, 10);
          } catch {
            return null;
          }
        return null;
      }
    }, 346: function(v2, S2) {
      Object.defineProperty(S2, "__esModule", { value: true }), S2.debug = void 0, S2.debug = function() {
        for (var g2 = [], E2 = 0; E2 < arguments.length; E2++)
          g2[E2] = arguments[E2];
        console.debug ? console.debug.apply(null, g2) : console.log.apply(null, g2);
      };
    }, 607: function(v2, S2, g2) {
      Object.defineProperty(S2, "__esModule", { value: true }), S2.grpc = void 0;
      var E2, _ = g2(418), k = g2(57), L2 = g2(229), M2 = g2(540), $ = g2(210), J2 = g2(859), V2 = g2(8), q2 = g2(938), G2 = g2(35), H2 = g2(934);
      (E2 = S2.grpc || (S2.grpc = {})).setDefaultTransport = k.setDefaultTransportFactory, E2.CrossBrowserHttpTransport = J2.CrossBrowserHttpTransport, E2.FetchReadableStreamTransport = L2.FetchReadableStreamTransport, E2.XhrTransport = $.XhrTransport, E2.WebsocketTransport = M2.WebsocketTransport, E2.Code = V2.Code, E2.Metadata = _.BrowserHeaders, E2.client = function(B2, Y2) {
        return H2.client(B2, Y2);
      }, E2.invoke = q2.invoke, E2.unary = G2.unary;
    }, 938: function(v2, S2, g2) {
      Object.defineProperty(S2, "__esModule", { value: true }), S2.invoke = void 0;
      var E2 = g2(934);
      S2.invoke = function(_, k) {
        if (_.requestStream)
          throw new Error(".invoke cannot be used with client-streaming methods. Use .client instead.");
        var L2 = E2.client(_, { host: k.host, transport: k.transport, debug: k.debug });
        return k.onHeaders && L2.onHeaders(k.onHeaders), k.onMessage && L2.onMessage(k.onMessage), k.onEnd && L2.onEnd(k.onEnd), L2.start(k.metadata), L2.send(k.request), L2.finishSend(), { close: function() {
          L2.close();
        } };
      };
    }, 65: function(v2, S2, g2) {
      Object.defineProperty(S2, "__esModule", { value: true }), S2.Metadata = void 0;
      var E2 = g2(418);
      Object.defineProperty(S2, "Metadata", { enumerable: true, get: function() {
        return E2.BrowserHeaders;
      } });
    }, 57: function(v2, S2, g2) {
      Object.defineProperty(S2, "__esModule", { value: true }), S2.makeDefaultTransport = S2.setDefaultTransportFactory = void 0;
      var E2 = g2(859), _ = function(k) {
        return E2.CrossBrowserHttpTransport({ withCredentials: false })(k);
      };
      S2.setDefaultTransportFactory = function(k) {
        _ = k;
      }, S2.makeDefaultTransport = function(k) {
        return _(k);
      };
    }, 229: function(v2, S2, g2) {
      var E2 = this && this.__assign || function() {
        return (E2 = Object.assign || function(M2) {
          for (var $, J2 = 1, V2 = arguments.length; J2 < V2; J2++)
            for (var q2 in $ = arguments[J2])
              Object.prototype.hasOwnProperty.call($, q2) && (M2[q2] = $[q2]);
          return M2;
        }).apply(this, arguments);
      };
      Object.defineProperty(S2, "__esModule", { value: true }), S2.detectFetchSupport = S2.FetchReadableStreamTransport = void 0;
      var _ = g2(65), k = g2(346);
      S2.FetchReadableStreamTransport = function(M2) {
        return function($) {
          return function(J2, V2) {
            return J2.debug && k.debug("fetchRequest", J2), new L2(J2, V2);
          }($, M2);
        };
      };
      var L2 = function() {
        function M2($, J2) {
          this.cancelled = false, this.controller = self.AbortController && new AbortController(), this.options = $, this.init = J2;
        }
        return M2.prototype.pump = function($, J2) {
          var V2 = this;
          if (this.reader = $, this.cancelled)
            return this.options.debug && k.debug("Fetch.pump.cancel at first pump"), void this.reader.cancel().catch(function(q2) {
              V2.options.debug && k.debug("Fetch.pump.reader.cancel exception", q2);
            });
          this.reader.read().then(function(q2) {
            if (q2.done)
              return V2.options.onEnd(), J2;
            V2.options.onChunk(q2.value), V2.pump(V2.reader, J2);
          }).catch(function(q2) {
            V2.cancelled ? V2.options.debug && k.debug("Fetch.catch - request cancelled") : (V2.cancelled = true, V2.options.debug && k.debug("Fetch.catch", q2.message), V2.options.onEnd(q2));
          });
        }, M2.prototype.send = function($) {
          var J2 = this;
          fetch(this.options.url, E2(E2({}, this.init), { headers: this.metadata.toHeaders(), method: "POST", body: $, signal: this.controller && this.controller.signal })).then(function(V2) {
            if (J2.options.debug && k.debug("Fetch.response", V2), J2.options.onHeaders(new _.Metadata(V2.headers), V2.status), !V2.body)
              return V2;
            J2.pump(V2.body.getReader(), V2);
          }).catch(function(V2) {
            J2.cancelled ? J2.options.debug && k.debug("Fetch.catch - request cancelled") : (J2.cancelled = true, J2.options.debug && k.debug("Fetch.catch", V2.message), J2.options.onEnd(V2));
          });
        }, M2.prototype.sendMessage = function($) {
          this.send($);
        }, M2.prototype.finishSend = function() {
        }, M2.prototype.start = function($) {
          this.metadata = $;
        }, M2.prototype.cancel = function() {
          var $ = this;
          this.cancelled ? this.options.debug && k.debug("Fetch.cancel already cancelled") : (this.cancelled = true, this.controller ? (this.options.debug && k.debug("Fetch.cancel.controller.abort"), this.controller.abort()) : this.options.debug && k.debug("Fetch.cancel.missing abort controller"), this.reader ? (this.options.debug && k.debug("Fetch.cancel.reader.cancel"), this.reader.cancel().catch(function(J2) {
            $.options.debug && k.debug("Fetch.cancel.reader.cancel exception", J2);
          })) : this.options.debug && k.debug("Fetch.cancel before reader"));
        }, M2;
      }();
      S2.detectFetchSupport = function() {
        return typeof Response < "u" && Response.prototype.hasOwnProperty("body") && typeof Headers == "function";
      };
    }, 859: function(v2, S2, g2) {
      Object.defineProperty(S2, "__esModule", { value: true }), S2.CrossBrowserHttpTransport = void 0;
      var E2 = g2(229), _ = g2(210);
      S2.CrossBrowserHttpTransport = function(k) {
        if (E2.detectFetchSupport()) {
          var L2 = { credentials: k.withCredentials ? "include" : "same-origin" };
          return E2.FetchReadableStreamTransport(L2);
        }
        return _.XhrTransport({ withCredentials: k.withCredentials });
      };
    }, 210: function(v2, S2, g2) {
      var E2, _ = this && this.__extends || (E2 = function(G2, H2) {
        return (E2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(B2, Y2) {
          B2.__proto__ = Y2;
        } || function(B2, Y2) {
          for (var ne2 in Y2)
            Object.prototype.hasOwnProperty.call(Y2, ne2) && (B2[ne2] = Y2[ne2]);
        })(G2, H2);
      }, function(G2, H2) {
        function B2() {
          this.constructor = G2;
        }
        E2(G2, H2), G2.prototype = H2 === null ? Object.create(H2) : (B2.prototype = H2.prototype, new B2());
      });
      Object.defineProperty(S2, "__esModule", { value: true }), S2.stringToArrayBuffer = S2.MozChunkedArrayBufferXHR = S2.XHR = S2.XhrTransport = void 0;
      var k = g2(65), L2 = g2(346), M2 = g2(849);
      S2.XhrTransport = function(G2) {
        return function(H2) {
          if (M2.detectMozXHRSupport())
            return new J2(H2, G2);
          if (M2.detectXHROverrideMimeTypeSupport())
            return new $(H2, G2);
          throw new Error("This environment's XHR implementation cannot support binary transfer.");
        };
      };
      var $ = function() {
        function G2(H2, B2) {
          this.options = H2, this.init = B2;
        }
        return G2.prototype.onProgressEvent = function() {
          this.options.debug && L2.debug("XHR.onProgressEvent.length: ", this.xhr.response.length);
          var H2 = this.xhr.response.substr(this.index);
          this.index = this.xhr.response.length;
          var B2 = q2(H2);
          this.options.onChunk(B2);
        }, G2.prototype.onLoadEvent = function() {
          this.options.debug && L2.debug("XHR.onLoadEvent"), this.options.onEnd();
        }, G2.prototype.onStateChange = function() {
          this.options.debug && L2.debug("XHR.onStateChange", this.xhr.readyState), this.xhr.readyState === XMLHttpRequest.HEADERS_RECEIVED && this.options.onHeaders(new k.Metadata(this.xhr.getAllResponseHeaders()), this.xhr.status);
        }, G2.prototype.sendMessage = function(H2) {
          this.xhr.send(H2);
        }, G2.prototype.finishSend = function() {
        }, G2.prototype.start = function(H2) {
          var B2 = this;
          this.metadata = H2;
          var Y2 = new XMLHttpRequest();
          this.xhr = Y2, Y2.open("POST", this.options.url), this.configureXhr(), this.metadata.forEach(function(ne2, Z2) {
            Y2.setRequestHeader(ne2, Z2.join(", "));
          }), Y2.withCredentials = !!this.init.withCredentials, Y2.addEventListener("readystatechange", this.onStateChange.bind(this)), Y2.addEventListener("progress", this.onProgressEvent.bind(this)), Y2.addEventListener("loadend", this.onLoadEvent.bind(this)), Y2.addEventListener("error", function(ne2) {
            B2.options.debug && L2.debug("XHR.error", ne2), B2.options.onEnd(ne2.error);
          });
        }, G2.prototype.configureXhr = function() {
          this.xhr.responseType = "text", this.xhr.overrideMimeType("text/plain; charset=x-user-defined");
        }, G2.prototype.cancel = function() {
          this.options.debug && L2.debug("XHR.abort"), this.xhr.abort();
        }, G2;
      }();
      S2.XHR = $;
      var J2 = function(G2) {
        function H2() {
          return G2 !== null && G2.apply(this, arguments) || this;
        }
        return _(H2, G2), H2.prototype.configureXhr = function() {
          this.options.debug && L2.debug("MozXHR.configureXhr: setting responseType to 'moz-chunked-arraybuffer'"), this.xhr.responseType = "moz-chunked-arraybuffer";
        }, H2.prototype.onProgressEvent = function() {
          var B2 = this.xhr.response;
          this.options.debug && L2.debug("MozXHR.onProgressEvent: ", new Uint8Array(B2)), this.options.onChunk(new Uint8Array(B2));
        }, H2;
      }($);
      function V2(G2, H2) {
        var B2 = G2.charCodeAt(H2);
        if (B2 >= 55296 && B2 <= 56319) {
          var Y2 = G2.charCodeAt(H2 + 1);
          Y2 >= 56320 && Y2 <= 57343 && (B2 = 65536 + (B2 - 55296 << 10) + (Y2 - 56320));
        }
        return B2;
      }
      function q2(G2) {
        for (var H2 = new Uint8Array(G2.length), B2 = 0, Y2 = 0; Y2 < G2.length; Y2++) {
          var ne2 = String.prototype.codePointAt ? G2.codePointAt(Y2) : V2(G2, Y2);
          H2[B2++] = 255 & ne2;
        }
        return H2;
      }
      S2.MozChunkedArrayBufferXHR = J2, S2.stringToArrayBuffer = q2;
    }, 849: function(v2, S2) {
      var g2;
      function E2() {
        if (g2 !== void 0)
          return g2;
        if (XMLHttpRequest) {
          g2 = new XMLHttpRequest();
          try {
            g2.open("GET", "https://localhost");
          } catch {
          }
        }
        return g2;
      }
      function _(k) {
        var L2 = E2();
        if (!L2)
          return false;
        try {
          return L2.responseType = k, L2.responseType === k;
        } catch {
        }
        return false;
      }
      Object.defineProperty(S2, "__esModule", { value: true }), S2.detectXHROverrideMimeTypeSupport = S2.detectMozXHRSupport = S2.xhrSupportsResponseType = void 0, S2.xhrSupportsResponseType = _, S2.detectMozXHRSupport = function() {
        return typeof XMLHttpRequest < "u" && _("moz-chunked-arraybuffer");
      }, S2.detectXHROverrideMimeTypeSupport = function() {
        return typeof XMLHttpRequest < "u" && XMLHttpRequest.prototype.hasOwnProperty("overrideMimeType");
      };
    }, 540: function(v2, S2, g2) {
      Object.defineProperty(S2, "__esModule", { value: true }), S2.WebsocketTransport = void 0;
      var E2, _ = g2(346), k = g2(617);
      (function(M2) {
        M2[M2.FINISH_SEND = 1] = "FINISH_SEND";
      })(E2 || (E2 = {}));
      var L2 = new Uint8Array([1]);
      S2.WebsocketTransport = function() {
        return function(M2) {
          return function($) {
            $.debug && _.debug("websocketRequest", $);
            var J2, V2 = function(H2) {
              if (H2.substr(0, 8) === "https://")
                return "wss://" + H2.substr(8);
              if (H2.substr(0, 7) === "http://")
                return "ws://" + H2.substr(7);
              throw new Error("Websocket transport constructed with non-https:// or http:// host.");
            }($.url), q2 = [];
            function G2(H2) {
              if (H2 === E2.FINISH_SEND)
                J2.send(L2);
              else {
                var B2 = H2, Y2 = new Int8Array(B2.byteLength + 1);
                Y2.set(new Uint8Array([0])), Y2.set(B2, 1), J2.send(Y2);
              }
            }
            return { sendMessage: function(H2) {
              J2 && J2.readyState !== J2.CONNECTING ? G2(H2) : q2.push(H2);
            }, finishSend: function() {
              J2 && J2.readyState !== J2.CONNECTING ? G2(E2.FINISH_SEND) : q2.push(E2.FINISH_SEND);
            }, start: function(H2) {
              (J2 = new WebSocket(V2, ["grpc-websockets"])).binaryType = "arraybuffer", J2.onopen = function() {
                var B2;
                $.debug && _.debug("websocketRequest.onopen"), J2.send((B2 = "", H2.forEach(function(Y2, ne2) {
                  B2 += Y2 + ": " + ne2.join(", ") + `\r
`;
                }), k.encodeASCII(B2))), q2.forEach(function(Y2) {
                  G2(Y2);
                });
              }, J2.onclose = function(B2) {
                $.debug && _.debug("websocketRequest.onclose", B2), $.onEnd();
              }, J2.onerror = function(B2) {
                $.debug && _.debug("websocketRequest.onerror", B2);
              }, J2.onmessage = function(B2) {
                $.onChunk(new Uint8Array(B2.data));
              };
            }, cancel: function() {
              $.debug && _.debug("websocket.abort"), J2.close();
            } };
          }(M2);
        };
      };
    }, 35: function(v2, S2, g2) {
      Object.defineProperty(S2, "__esModule", { value: true }), S2.unary = void 0;
      var E2 = g2(65), _ = g2(934);
      S2.unary = function(k, L2) {
        if (k.responseStream)
          throw new Error(".unary cannot be used with server-streaming methods. Use .invoke or .client instead.");
        if (k.requestStream)
          throw new Error(".unary cannot be used with client-streaming methods. Use .client instead.");
        var M2 = null, $ = null, J2 = _.client(k, { host: L2.host, transport: L2.transport, debug: L2.debug });
        return J2.onHeaders(function(V2) {
          M2 = V2;
        }), J2.onMessage(function(V2) {
          $ = V2;
        }), J2.onEnd(function(V2, q2, G2) {
          L2.onEnd({ status: V2, statusMessage: q2, headers: M2 || new E2.Metadata(), message: $, trailers: G2 });
        }), J2.start(L2.metadata), J2.send(L2.request), J2.finishSend(), { close: function() {
          J2.close();
        } };
      };
    }, 882: function(v2, S2) {
      Object.defineProperty(S2, "__esModule", { value: true }), S2.frameRequest = void 0, S2.frameRequest = function(g2) {
        var E2 = g2.serializeBinary(), _ = new ArrayBuffer(E2.byteLength + 5);
        return new DataView(_, 1, 4).setUint32(0, E2.length, false), new Uint8Array(_, 5).set(E2), new Uint8Array(_);
      };
    } }, l2 = {}, function v2(S2) {
      if (l2[S2])
        return l2[S2].exports;
      var g2 = l2[S2] = { exports: {} };
      return c[S2].call(g2.exports, g2, g2.exports, v2), g2.exports;
    }(607);
    var c, l2;
  });
})(grpcWebClient_umd);
var grpcWebClient_umdExports = grpcWebClient_umd.exports;
class AbortError extends Error {
  constructor() {
    super("The operation has been aborted"), this.message = "The operation has been aborted", this.name = "AbortError", typeof Error.captureStackTrace == "function" && Error.captureStackTrace(this, this.constructor);
  }
}
function isAbortError(a92) {
  return typeof a92 == "object" && a92 !== null && a92.name === "AbortError";
}
function throwIfAborted(a92) {
  if (a92.aborted)
    throw new AbortError();
}
function rethrowAbortError(a92) {
  if (isAbortError(a92))
    throw a92;
}
function catchAbortError(a92) {
  if (!isAbortError(a92))
    throw a92;
}
function execute(a92, u2) {
  return new Promise((c, l2) => {
    if (a92.aborted) {
      l2(new AbortError());
      return;
    }
    let v2, S2 = false;
    function g2() {
      S2 || (S2 = true, v2 != null && v2());
    }
    const E2 = u2((_) => {
      c(_), g2();
    }, (_) => {
      l2(_), g2();
    });
    if (!S2) {
      const _ = () => {
        const k = E2();
        k == null ? l2(new AbortError()) : k.then(() => {
          l2(new AbortError());
        }, (L2) => {
          l2(L2);
        }), g2();
      };
      a92.addEventListener("abort", _), v2 = () => {
        a92.removeEventListener("abort", _);
      };
    }
  });
}
function abortable(a92, u2) {
  if (a92.aborted) {
    const c = () => {
    };
    u2.then(c, c);
  }
  return execute(a92, (c, l2) => (u2.then(c, l2), () => {
  }));
}
function delay$1(a92, u2) {
  return execute(a92, (c) => {
    const l2 = typeof u2 == "number" ? u2 : u2.getTime() - Date.now(), v2 = setTimeout(c, l2);
    return () => {
      clearTimeout(v2);
    };
  });
}
function forever(a92) {
  return execute(a92, () => () => {
  });
}
function waitForEvent(a92, u2, c, l2) {
  return execute(a92, (v2) => {
    let S2, g2 = false;
    return S2 = listen(u2, c, (..._) => {
      v2(_.length > 1 ? _ : _[0]), g2 = true, S2 != null && S2();
    }, l2), g2 && S2(), () => {
      g2 = true, S2 != null && S2();
    };
  });
}
function listen(a92, u2, c, l2) {
  if (isEventTarget(a92))
    return a92.addEventListener(u2, c, l2), () => a92.removeEventListener(u2, c, l2);
  if (isJQueryStyleEventEmitter(a92))
    return a92.on(u2, c), () => a92.off(u2, c);
  if (isNodeStyleEventEmitter(a92))
    return a92.addListener(u2, c), () => a92.removeListener(u2, c);
  throw new Error("Invalid event target");
}
function isNodeStyleEventEmitter(a92) {
  return isFunction$3(a92.addListener) && isFunction$3(a92.removeListener);
}
function isJQueryStyleEventEmitter(a92) {
  return isFunction$3(a92.on) && isFunction$3(a92.off);
}
function isEventTarget(a92) {
  return isFunction$3(a92.addEventListener) && isFunction$3(a92.removeEventListener);
}
const isFunction$3 = (a92) => typeof a92 == "function";
var browser$3 = { exports: {} };
const _global = typeof self < "u" ? self : typeof window < "u" ? window : (
  /* otherwise */
  void 0
);
if (!_global)
  throw new Error("Unable to find global scope. Are you sure this is running in the browser?");
if (!_global.AbortController)
  throw new Error('Could not find "AbortController" in the global scope. You need to polyfill it first');
browser$3.exports = _global.AbortController;
browser$3.exports.default = _global.AbortController;
var browserExports = browser$3.exports;
const AbortController$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(browserExports);
function all(a92, u2) {
  return new Promise((c, l2) => {
    if (a92.aborted) {
      l2(new AbortError());
      return;
    }
    const v2 = new AbortController$1(), S2 = u2(v2.signal);
    if (S2.length === 0) {
      c([]);
      return;
    }
    const g2 = () => {
      v2.abort();
    };
    a92.addEventListener("abort", g2);
    let E2;
    const _ = new Array(S2.length);
    let k = 0;
    function L2() {
      k += 1, k === S2.length && (a92.removeEventListener("abort", g2), E2 != null ? l2(E2.reason) : c(_));
    }
    for (const [M2, $] of S2.entries())
      $.then((J2) => {
        _[M2] = J2, L2();
      }, (J2) => {
        v2.abort(), (E2 == null || !isAbortError(J2) && isAbortError(E2.reason)) && (E2 = { reason: J2 }), L2();
      });
  });
}
function race$2(a92, u2) {
  return new Promise((c, l2) => {
    if (a92.aborted) {
      l2(new AbortError());
      return;
    }
    const v2 = new AbortController$1(), S2 = u2(v2.signal), g2 = () => {
      v2.abort();
    };
    a92.addEventListener("abort", g2);
    let E2 = 0;
    function _(L2) {
      v2.abort(), E2 += 1, E2 === S2.length && (a92.removeEventListener("abort", g2), L2.status === "fulfilled" ? c(L2.value) : l2(L2.reason));
    }
    let k;
    for (const L2 of S2)
      L2.then((M2) => {
        k == null && (k = { status: "fulfilled", value: M2 }), _(k);
      }, (M2) => {
        (k == null || !isAbortError(M2) && (k.status === "fulfilled" || isAbortError(k.reason))) && (k = { status: "rejected", reason: M2 }), _(k);
      });
  });
}
async function retry$1(a92, u2, c = {}) {
  const { baseMs: l2 = 1e3, maxDelayMs: v2 = 15e3, onError: S2, maxAttempts: g2 = 1 / 0 } = c;
  let E2 = 0;
  const _ = () => {
    E2 = -1;
  };
  for (; ; )
    try {
      return await u2(a92, E2, _);
    } catch (k) {
      if (rethrowAbortError(k), E2 >= g2)
        throw k;
      let L2;
      if (E2 === -1)
        L2 = 0;
      else {
        const M2 = Math.min(v2, Math.pow(2, E2) * l2);
        L2 = Math.round(M2 * (1 + Math.random()) / 2);
      }
      S2 && S2(k, E2, L2), L2 !== 0 && await delay$1(a92, L2), E2 += 1;
    }
}
function spawn(a92, u2) {
  if (a92.aborted)
    return Promise.reject(new AbortError());
  const c = [], l2 = new AbortController$1(), v2 = l2.signal, S2 = () => {
    l2.abort();
  };
  a92.addEventListener("abort", S2);
  const g2 = () => {
    a92.removeEventListener("abort", S2);
  }, E2 = /* @__PURE__ */ new Set(), _ = () => {
    for (const M2 of E2)
      M2.abort();
  };
  v2.addEventListener("abort", _);
  const k = () => {
    v2.removeEventListener("abort", _);
  };
  let L2 = new Promise((M2, $) => {
    let J2, V2;
    q2((G2) => u2(G2, { defer(H2) {
      c.push(H2);
    }, fork: q2 })).join().then((G2) => {
      l2.abort(), J2 = { value: G2 };
    }, (G2) => {
      l2.abort(), (!isAbortError(G2) || V2 == null) && (V2 = { error: G2 });
    });
    function q2(G2) {
      if (v2.aborted)
        return { abort() {
        }, async join() {
          throw new AbortError();
        } };
      const H2 = new AbortController$1(), B2 = H2.signal, Y2 = G2(B2), ne2 = { abort() {
        H2.abort();
      }, join: () => Y2 };
      return E2.add(ne2), Y2.catch(catchAbortError).catch((Z2) => {
        V2 = { error: Z2 }, l2.abort();
      }).finally(() => {
        E2.delete(ne2), E2.size === 0 && (V2 != null ? $(V2.error) : M2(J2.value));
      }), ne2;
    }
  });
  return L2 = L2.finally(() => {
    g2(), k();
    let M2 = Promise.resolve();
    for (let $ = c.length - 1; $ >= 0; $--)
      M2 = M2.finally(c[$]);
    return M2;
  }), L2;
}
function run(a92) {
  const u2 = new AbortController$1(), c = a92(u2.signal).catch(catchAbortError);
  return () => (u2.abort(), c);
}
const es = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({ __proto__: null, AbortError, abortable, all, catchAbortError, delay: delay$1, execute, forever, isAbortError, race: race$2, rethrowAbortError, retry: retry$1, run, spawn, throwIfAborted, waitForEvent }, Symbol.toStringTag, { value: "Module" })), require$$1$1 = /* @__PURE__ */ getAugmentedNamespace(es);
var AsyncSink$1 = {};
Object.defineProperty(AsyncSink$1, "__esModule", { value: true });
AsyncSink$1.AsyncSink = void 0;
const ARRAY_VALUE = "value", ARRAY_ERROR = "error";
class AsyncSink {
  constructor() {
    this._ended = false, this._values = [], this._resolvers = [];
  }
  [Symbol.asyncIterator]() {
    return this;
  }
  write(u2) {
    this._push({ type: ARRAY_VALUE, value: u2 });
  }
  error(u2) {
    this._push({ type: ARRAY_ERROR, error: u2 });
  }
  _push(u2) {
    if (this._ended)
      throw new Error("AsyncSink already ended");
    if (this._resolvers.length > 0) {
      const { resolve: c, reject: l2 } = this._resolvers.shift();
      u2.type === ARRAY_ERROR ? l2(u2.error) : c({ done: false, value: u2.value });
    } else
      this._values.push(u2);
  }
  next() {
    if (this._values.length > 0) {
      const { type: u2, value: c, error: l2 } = this._values.shift();
      return u2 === ARRAY_ERROR ? Promise.reject(l2) : Promise.resolve({ done: false, value: c });
    }
    return this._ended ? Promise.resolve({ done: true }) : new Promise((u2, c) => {
      this._resolvers.push({ resolve: u2, reject: c });
    });
  }
  end() {
    for (; this._resolvers.length > 0; )
      this._resolvers.shift().resolve({ done: true });
    this._ended = true;
  }
}
AsyncSink$1.AsyncSink = AsyncSink;
var isAsyncIterable$1 = {};
Object.defineProperty(isAsyncIterable$1, "__esModule", { value: true });
isAsyncIterable$1.isAsyncIterable = void 0;
function isAsyncIterable(a92) {
  return a92 != null && Symbol.asyncIterator in a92;
}
isAsyncIterable$1.isAsyncIterable = isAsyncIterable;
var convertMetadata = {}, base64$2 = { exports: {} };
(function(a92, u2) {
  (function(c, l2) {
    a92.exports = l2();
  })(typeof self < "u" ? self : typeof window < "u" ? window : commonjsGlobal$1, function() {
    var c = "3.7.2", l2 = c, v2 = typeof atob == "function", S2 = typeof btoa == "function", g2 = typeof Buffer == "function", E2 = typeof TextDecoder == "function" ? new TextDecoder() : void 0, _ = typeof TextEncoder == "function" ? new TextEncoder() : void 0, k = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", L2 = Array.prototype.slice.call(k), M2 = function(be2) {
      var Ae2 = {};
      return be2.forEach(function(qe2, xe2) {
        return Ae2[qe2] = xe2;
      }), Ae2;
    }(L2), $ = /^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/, J2 = String.fromCharCode.bind(String), V2 = typeof Uint8Array.from == "function" ? Uint8Array.from.bind(Uint8Array) : function(be2, Ae2) {
      return Ae2 === void 0 && (Ae2 = function(qe2) {
        return qe2;
      }), new Uint8Array(Array.prototype.slice.call(be2, 0).map(Ae2));
    }, q2 = function(be2) {
      return be2.replace(/=/g, "").replace(/[+\/]/g, function(Ae2) {
        return Ae2 == "+" ? "-" : "_";
      });
    }, G2 = function(be2) {
      return be2.replace(/[^A-Za-z0-9\+\/]/g, "");
    }, H2 = function(be2) {
      for (var Ae2, qe2, xe2, Pe2, C2 = "", x2 = be2.length % 3, Q2 = 0; Q2 < be2.length; ) {
        if ((qe2 = be2.charCodeAt(Q2++)) > 255 || (xe2 = be2.charCodeAt(Q2++)) > 255 || (Pe2 = be2.charCodeAt(Q2++)) > 255)
          throw new TypeError("invalid character found");
        Ae2 = qe2 << 16 | xe2 << 8 | Pe2, C2 += L2[Ae2 >> 18 & 63] + L2[Ae2 >> 12 & 63] + L2[Ae2 >> 6 & 63] + L2[Ae2 & 63];
      }
      return x2 ? C2.slice(0, x2 - 3) + "===".substring(x2) : C2;
    }, B2 = S2 ? function(be2) {
      return btoa(be2);
    } : g2 ? function(be2) {
      return Buffer.from(be2, "binary").toString("base64");
    } : H2, Y2 = g2 ? function(be2) {
      return Buffer.from(be2).toString("base64");
    } : function(be2) {
      for (var Ae2 = 4096, qe2 = [], xe2 = 0, Pe2 = be2.length; xe2 < Pe2; xe2 += Ae2)
        qe2.push(J2.apply(null, be2.subarray(xe2, xe2 + Ae2)));
      return B2(qe2.join(""));
    }, ne2 = function(be2, Ae2) {
      return Ae2 === void 0 && (Ae2 = false), Ae2 ? q2(Y2(be2)) : Y2(be2);
    }, Z2 = function(be2) {
      if (be2.length < 2) {
        var Ae2 = be2.charCodeAt(0);
        return Ae2 < 128 ? be2 : Ae2 < 2048 ? J2(192 | Ae2 >>> 6) + J2(128 | Ae2 & 63) : J2(224 | Ae2 >>> 12 & 15) + J2(128 | Ae2 >>> 6 & 63) + J2(128 | Ae2 & 63);
      } else {
        var Ae2 = 65536 + (be2.charCodeAt(0) - 55296) * 1024 + (be2.charCodeAt(1) - 56320);
        return J2(240 | Ae2 >>> 18 & 7) + J2(128 | Ae2 >>> 12 & 63) + J2(128 | Ae2 >>> 6 & 63) + J2(128 | Ae2 & 63);
      }
    }, re2 = /[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g, oe2 = function(be2) {
      return be2.replace(re2, Z2);
    }, de2 = g2 ? function(be2) {
      return Buffer.from(be2, "utf8").toString("base64");
    } : _ ? function(be2) {
      return Y2(_.encode(be2));
    } : function(be2) {
      return B2(oe2(be2));
    }, A2 = function(be2, Ae2) {
      return Ae2 === void 0 && (Ae2 = false), Ae2 ? q2(de2(be2)) : de2(be2);
    }, N2 = function(be2) {
      return A2(be2, true);
    }, D2 = /[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g, W2 = function(be2) {
      switch (be2.length) {
        case 4:
          var Ae2 = (7 & be2.charCodeAt(0)) << 18 | (63 & be2.charCodeAt(1)) << 12 | (63 & be2.charCodeAt(2)) << 6 | 63 & be2.charCodeAt(3), qe2 = Ae2 - 65536;
          return J2((qe2 >>> 10) + 55296) + J2((qe2 & 1023) + 56320);
        case 3:
          return J2((15 & be2.charCodeAt(0)) << 12 | (63 & be2.charCodeAt(1)) << 6 | 63 & be2.charCodeAt(2));
        default:
          return J2((31 & be2.charCodeAt(0)) << 6 | 63 & be2.charCodeAt(1));
      }
    }, ee2 = function(be2) {
      return be2.replace(D2, W2);
    }, ae2 = function(be2) {
      if (be2 = be2.replace(/\s+/g, ""), !$.test(be2))
        throw new TypeError("malformed base64.");
      be2 += "==".slice(2 - (be2.length & 3));
      for (var Ae2, qe2 = "", xe2, Pe2, C2 = 0; C2 < be2.length; )
        Ae2 = M2[be2.charAt(C2++)] << 18 | M2[be2.charAt(C2++)] << 12 | (xe2 = M2[be2.charAt(C2++)]) << 6 | (Pe2 = M2[be2.charAt(C2++)]), qe2 += xe2 === 64 ? J2(Ae2 >> 16 & 255) : Pe2 === 64 ? J2(Ae2 >> 16 & 255, Ae2 >> 8 & 255) : J2(Ae2 >> 16 & 255, Ae2 >> 8 & 255, Ae2 & 255);
      return qe2;
    }, ye2 = v2 ? function(be2) {
      return atob(G2(be2));
    } : g2 ? function(be2) {
      return Buffer.from(be2, "base64").toString("binary");
    } : ae2, he2 = g2 ? function(be2) {
      return V2(Buffer.from(be2, "base64"));
    } : function(be2) {
      return V2(ye2(be2), function(Ae2) {
        return Ae2.charCodeAt(0);
      });
    }, le2 = function(be2) {
      return he2(Be2(be2));
    }, we2 = g2 ? function(be2) {
      return Buffer.from(be2, "base64").toString("utf8");
    } : E2 ? function(be2) {
      return E2.decode(he2(be2));
    } : function(be2) {
      return ee2(ye2(be2));
    }, Be2 = function(be2) {
      return G2(be2.replace(/[-_]/g, function(Ae2) {
        return Ae2 == "-" ? "+" : "/";
      }));
    }, Ne2 = function(be2) {
      return we2(Be2(be2));
    }, Le2 = function(be2) {
      if (typeof be2 != "string")
        return false;
      var Ae2 = be2.replace(/\s+/g, "").replace(/={0,2}$/, "");
      return !/[^\s0-9a-zA-Z\+/]/.test(Ae2) || !/[^\s0-9a-zA-Z\-_]/.test(Ae2);
    }, $e2 = function(be2) {
      return { value: be2, enumerable: false, writable: true, configurable: true };
    }, Ue2 = function() {
      var be2 = function(Ae2, qe2) {
        return Object.defineProperty(String.prototype, Ae2, $e2(qe2));
      };
      be2("fromBase64", function() {
        return Ne2(this);
      }), be2("toBase64", function(Ae2) {
        return A2(this, Ae2);
      }), be2("toBase64URI", function() {
        return A2(this, true);
      }), be2("toBase64URL", function() {
        return A2(this, true);
      }), be2("toUint8Array", function() {
        return le2(this);
      });
    }, Ge2 = function() {
      var be2 = function(Ae2, qe2) {
        return Object.defineProperty(Uint8Array.prototype, Ae2, $e2(qe2));
      };
      be2("toBase64", function(Ae2) {
        return ne2(this, Ae2);
      }), be2("toBase64URI", function() {
        return ne2(this, true);
      }), be2("toBase64URL", function() {
        return ne2(this, true);
      });
    }, He2 = function() {
      Ue2(), Ge2();
    }, Ve2 = { version: c, VERSION: l2, atob: ye2, atobPolyfill: ae2, btoa: B2, btoaPolyfill: H2, fromBase64: Ne2, toBase64: A2, encode: A2, encodeURI: N2, encodeURL: N2, utob: oe2, btou: ee2, decode: Ne2, isValid: Le2, fromUint8Array: ne2, toUint8Array: le2, extendString: Ue2, extendUint8Array: Ge2, extendBuiltins: He2 };
    return Ve2.Base64 = {}, Object.keys(Ve2).forEach(function(be2) {
      return Ve2.Base64[be2] = Ve2[be2];
    }), Ve2;
  });
})(base64$2);
var base64Exports = base64$2.exports;
Object.defineProperty(convertMetadata, "__esModule", { value: true });
convertMetadata.convertMetadataFromGrpcWeb = convertMetadata.convertMetadataToGrpcWeb = void 0;
const grpc_web_1$4 = grpcWebClient_umdExports, nice_grpc_common_1$5 = lib, js_base64_1 = base64Exports;
function convertMetadataToGrpcWeb(a92) {
  const u2 = new grpc_web_1$4.grpc.Metadata();
  for (const [c, l2] of a92)
    for (const v2 of l2)
      u2.append(c, typeof v2 == "string" ? v2 : js_base64_1.Base64.fromUint8Array(v2));
  return u2;
}
convertMetadata.convertMetadataToGrpcWeb = convertMetadataToGrpcWeb;
function convertMetadataFromGrpcWeb(a92) {
  const u2 = (0, nice_grpc_common_1$5.Metadata)();
  for (const [c, l2] of Object.entries(a92.headersMap))
    u2.set(c, c.endsWith("-bin") ? l2.map((v2) => js_base64_1.Base64.toUint8Array(v2)) : l2);
  return u2;
}
convertMetadata.convertMetadataFromGrpcWeb = convertMetadataFromGrpcWeb;
var __importDefault$h = commonjsGlobal$1 && commonjsGlobal$1.__importDefault || function(a92) {
  return a92 && a92.__esModule ? a92 : { default: a92 };
};
Object.defineProperty(createBidiStreamingMethod$1, "__esModule", { value: true });
createBidiStreamingMethod$1.createBidiStreamingMethod = void 0;
const nice_grpc_common_1$4 = lib, grpc_web_1$3 = grpcWebClient_umdExports, abort_controller_x_1$4 = require$$1$1, node_abort_controller_1$3 = __importDefault$h(browserExports), AsyncSink_1$1 = AsyncSink$1, service_definitions_1$4 = serviceDefinitions, isAsyncIterable_1$3 = isAsyncIterable$1, convertMetadata_1$3 = convertMetadata;
function createBidiStreamingMethod(a92, u2, c, l2) {
  const v2 = (0, service_definitions_1$4.toGrpcWebMethodDefinition)(a92), S2 = { path: a92.path, requestStream: a92.requestStream, responseStream: a92.responseStream, options: a92.options };
  async function* g2(_, k) {
    if (!(0, isAsyncIterable_1$3.isAsyncIterable)(_))
      throw new Error("A middleware passed invalid request to next(): expected a single message for bidirectional streaming method");
    const { metadata: L2 = (0, nice_grpc_common_1$4.Metadata)(), signal: M2 = new node_abort_controller_1$3.default().signal, onHeader: $, onTrailer: J2 } = k, V2 = new node_abort_controller_1$3.default(), q2 = new AsyncSink_1$1.AsyncSink(), G2 = grpc_web_1$3.grpc.client(v2, { host: u2.address, transport: u2.transport });
    G2.onHeaders((Y2) => {
      $ == null || $((0, convertMetadata_1$3.convertMetadataFromGrpcWeb)(Y2));
    }), G2.onMessage((Y2) => {
      q2.write(Y2);
    }), G2.onEnd((Y2, ne2, Z2) => {
      J2 == null || J2((0, convertMetadata_1$3.convertMetadataFromGrpcWeb)(Z2)), Y2 === grpc_web_1$3.grpc.Code.OK ? q2.end() : q2.error(new nice_grpc_common_1$4.ClientError(a92.path, +Y2, ne2));
    }), G2.start((0, convertMetadata_1$3.convertMetadataToGrpcWeb)(L2));
    let H2;
    pipeRequest$1(V2.signal, _, G2, a92).then(() => {
      G2.finishSend();
    }, (Y2) => {
      (0, abort_controller_x_1$4.isAbortError)(Y2) || (H2 = Y2, G2.close(), q2.end());
    });
    const B2 = () => {
      q2.error(new abort_controller_x_1$4.AbortError()), V2.abort(), G2.close();
    };
    M2.addEventListener("abort", B2);
    try {
      yield* q2;
    } finally {
      if (V2.abort(), M2.removeEventListener("abort", B2), (0, abort_controller_x_1$4.throwIfAborted)(M2), H2)
        throw H2;
    }
  }
  const E2 = c == null ? g2 : (_, k) => c({ method: S2, requestStream: true, request: _, responseStream: true, next: g2 }, k);
  return (_, k) => {
    const M2 = E2(_, { ...l2, ...k })[Symbol.asyncIterator]();
    return { [Symbol.asyncIterator]() {
      return { async next() {
        const $ = await M2.next();
        return $.done && $.value != null ? await M2.throw(new Error("A middleware returned a message, but expected to return void for bidirectional streaming method")) : $;
      }, return() {
        return M2.return();
      }, throw($) {
        return M2.throw($);
      } };
    } };
  };
}
createBidiStreamingMethod$1.createBidiStreamingMethod = createBidiStreamingMethod;
async function pipeRequest$1(a92, u2, c, l2) {
  for await (const v2 of u2)
    (0, abort_controller_x_1$4.throwIfAborted)(a92), c.send({ serializeBinary: () => l2.requestSerialize(v2) });
}
var createClientStreamingMethod$1 = {}, __importDefault$g = commonjsGlobal$1 && commonjsGlobal$1.__importDefault || function(a92) {
  return a92 && a92.__esModule ? a92 : { default: a92 };
};
Object.defineProperty(createClientStreamingMethod$1, "__esModule", { value: true });
createClientStreamingMethod$1.createClientStreamingMethod = void 0;
const nice_grpc_common_1$3 = lib, grpc_web_1$2 = grpcWebClient_umdExports, abort_controller_x_1$3 = require$$1$1, node_abort_controller_1$2 = __importDefault$g(browserExports), service_definitions_1$3 = serviceDefinitions, isAsyncIterable_1$2 = isAsyncIterable$1, convertMetadata_1$2 = convertMetadata;
function createClientStreamingMethod(a92, u2, c, l2) {
  const v2 = (0, service_definitions_1$3.toGrpcWebMethodDefinition)(a92), S2 = { path: a92.path, requestStream: a92.requestStream, responseStream: a92.responseStream, options: a92.options };
  async function* g2(_, k) {
    if (!(0, isAsyncIterable_1$2.isAsyncIterable)(_))
      throw new Error("A middleware passed invalid request to next(): expected a single message for client streaming method");
    const { metadata: L2 = (0, nice_grpc_common_1$3.Metadata)(), signal: M2 = new node_abort_controller_1$2.default().signal, onHeader: $, onTrailer: J2 } = k;
    return await (0, abort_controller_x_1$3.execute)(M2, (V2, q2) => {
      const G2 = new node_abort_controller_1$2.default();
      let H2;
      const B2 = grpc_web_1$2.grpc.client(v2, { host: u2.address, transport: u2.transport });
      return B2.onHeaders((Y2) => {
        $ == null || $((0, convertMetadata_1$2.convertMetadataFromGrpcWeb)(Y2));
      }), B2.onMessage((Y2) => {
        H2 = Y2;
      }), B2.onEnd((Y2, ne2, Z2) => {
        J2 == null || J2((0, convertMetadata_1$2.convertMetadataFromGrpcWeb)(Z2)), G2.abort(), Y2 === grpc_web_1$2.grpc.Code.OK ? V2(H2) : q2(new nice_grpc_common_1$3.ClientError(a92.path, +Y2, ne2));
      }), B2.start((0, convertMetadata_1$2.convertMetadataToGrpcWeb)(L2)), pipeRequest(G2.signal, _, B2, a92).then(() => {
        B2.finishSend();
      }, (Y2) => {
        (0, abort_controller_x_1$3.isAbortError)(Y2) || (q2(Y2), B2.close());
      }), () => {
        G2.abort(), B2.close();
      };
    });
  }
  const E2 = c == null ? g2 : (_, k) => c({ method: S2, requestStream: true, request: _, responseStream: false, next: g2 }, k);
  return async (_, k) => {
    const M2 = E2(_, { ...l2, ...k })[Symbol.asyncIterator]();
    let $ = await M2.next();
    for (; ; ) {
      if (!$.done) {
        $ = await M2.throw(new Error("A middleware yielded a message, but expected to only return a message for client streaming method"));
        continue;
      }
      if ($.value == null) {
        $ = await M2.throw(new Error("A middleware returned void, but expected to return a message for client streaming method"));
        continue;
      }
      return $.value;
    }
  };
}
createClientStreamingMethod$1.createClientStreamingMethod = createClientStreamingMethod;
async function pipeRequest(a92, u2, c, l2) {
  for await (const v2 of u2)
    (0, abort_controller_x_1$3.throwIfAborted)(a92), c.send({ serializeBinary: () => l2.requestSerialize(v2) });
}
var createServerStreamingMethod$1 = {}, __importDefault$f = commonjsGlobal$1 && commonjsGlobal$1.__importDefault || function(a92) {
  return a92 && a92.__esModule ? a92 : { default: a92 };
};
Object.defineProperty(createServerStreamingMethod$1, "__esModule", { value: true });
createServerStreamingMethod$1.createServerStreamingMethod = void 0;
const grpc_web_1$1 = grpcWebClient_umdExports, abort_controller_x_1$2 = require$$1$1, AsyncSink_1 = AsyncSink$1, nice_grpc_common_1$2 = lib, node_abort_controller_1$1 = __importDefault$f(browserExports), service_definitions_1$2 = serviceDefinitions, convertMetadata_1$1 = convertMetadata, isAsyncIterable_1$1 = isAsyncIterable$1;
function createServerStreamingMethod(a92, u2, c, l2) {
  const v2 = (0, service_definitions_1$2.toGrpcWebMethodDefinition)(a92), S2 = { path: a92.path, requestStream: a92.requestStream, responseStream: a92.responseStream, options: a92.options };
  async function* g2(_, k) {
    if ((0, isAsyncIterable_1$1.isAsyncIterable)(_))
      throw new Error("A middleware passed invalid request to next(): expected a single message for server streaming method");
    const { metadata: L2 = (0, nice_grpc_common_1$2.Metadata)(), signal: M2 = new node_abort_controller_1$1.default().signal, onHeader: $, onTrailer: J2 } = k, V2 = new AsyncSink_1.AsyncSink(), q2 = grpc_web_1$1.grpc.client(v2, { host: u2.address, transport: u2.transport });
    q2.onHeaders((H2) => {
      $ == null || $((0, convertMetadata_1$1.convertMetadataFromGrpcWeb)(H2));
    }), q2.onMessage((H2) => {
      V2.write(H2);
    }), q2.onEnd((H2, B2, Y2) => {
      J2 == null || J2((0, convertMetadata_1$1.convertMetadataFromGrpcWeb)(Y2)), H2 === grpc_web_1$1.grpc.Code.OK ? V2.end() : V2.error(new nice_grpc_common_1$2.ClientError(a92.path, +H2, B2));
    }), q2.start((0, convertMetadata_1$1.convertMetadataToGrpcWeb)(L2)), q2.send({ serializeBinary: () => a92.requestSerialize(_) }), q2.finishSend();
    const G2 = () => {
      V2.error(new abort_controller_x_1$2.AbortError()), q2.close();
    };
    M2.addEventListener("abort", G2);
    try {
      yield* V2;
    } finally {
      M2.removeEventListener("abort", G2), (0, abort_controller_x_1$2.throwIfAborted)(M2);
    }
  }
  const E2 = c == null ? g2 : (_, k) => c({ method: S2, requestStream: false, request: _, responseStream: true, next: g2 }, k);
  return (_, k) => {
    const M2 = E2(_, { ...l2, ...k })[Symbol.asyncIterator]();
    return { [Symbol.asyncIterator]() {
      return { async next() {
        const $ = await M2.next();
        return $.done && $.value != null ? await M2.throw(new Error("A middleware returned a message, but expected to return void for server streaming method")) : $;
      }, return() {
        return M2.return();
      }, throw($) {
        return M2.throw($);
      } };
    } };
  };
}
createServerStreamingMethod$1.createServerStreamingMethod = createServerStreamingMethod;
var createUnaryMethod$1 = {}, __importDefault$e = commonjsGlobal$1 && commonjsGlobal$1.__importDefault || function(a92) {
  return a92 && a92.__esModule ? a92 : { default: a92 };
};
Object.defineProperty(createUnaryMethod$1, "__esModule", { value: true });
createUnaryMethod$1.createUnaryMethod = void 0;
const nice_grpc_common_1$1 = lib, grpc_web_1 = grpcWebClient_umdExports, abort_controller_x_1$1 = require$$1$1, node_abort_controller_1 = __importDefault$e(browserExports), service_definitions_1$1 = serviceDefinitions, isAsyncIterable_1 = isAsyncIterable$1, convertMetadata_1 = convertMetadata;
function createUnaryMethod(a92, u2, c, l2) {
  const v2 = (0, service_definitions_1$1.toGrpcWebMethodDefinition)(a92), S2 = { path: a92.path, requestStream: a92.requestStream, responseStream: a92.responseStream, options: a92.options };
  async function* g2(_, k) {
    if ((0, isAsyncIterable_1.isAsyncIterable)(_))
      throw new Error("A middleware passed invalid request to next(): expected a single message for unary method");
    const { metadata: L2 = (0, nice_grpc_common_1$1.Metadata)(), signal: M2 = new node_abort_controller_1.default().signal, onHeader: $, onTrailer: J2 } = k;
    return await (0, abort_controller_x_1$1.execute)(M2, (V2, q2) => {
      let G2;
      const H2 = grpc_web_1.grpc.client(v2, { host: u2.address, transport: u2.transport });
      return H2.onHeaders((B2) => {
        $ == null || $((0, convertMetadata_1.convertMetadataFromGrpcWeb)(B2));
      }), H2.onMessage((B2) => {
        G2 = B2;
      }), H2.onEnd((B2, Y2, ne2) => {
        J2 == null || J2((0, convertMetadata_1.convertMetadataFromGrpcWeb)(ne2)), B2 === grpc_web_1.grpc.Code.OK ? V2(G2) : q2(new nice_grpc_common_1$1.ClientError(a92.path, +B2, Y2));
      }), H2.start((0, convertMetadata_1.convertMetadataToGrpcWeb)(L2)), H2.send({ serializeBinary: () => a92.requestSerialize(_) }), H2.finishSend(), () => {
        H2.close();
      };
    });
  }
  const E2 = c == null ? g2 : (_, k) => c({ method: S2, requestStream: false, request: _, responseStream: false, next: g2 }, k);
  return async (_, k) => {
    const M2 = E2(_, { ...l2, ...k })[Symbol.asyncIterator]();
    let $ = await M2.next();
    for (; ; ) {
      if (!$.done) {
        $ = await M2.throw(new Error("A middleware yielded a message, but expected to only return a message for unary method"));
        continue;
      }
      if ($.value == null) {
        $ = await M2.throw(new Error("A middleware returned void, but expected to return a message for unary method"));
        continue;
      }
      return $.value;
    }
  };
}
createUnaryMethod$1.createUnaryMethod = createUnaryMethod;
Object.defineProperty(ClientFactory, "__esModule", { value: true });
ClientFactory.createClient = ClientFactory.createClientFactory = void 0;
const nice_grpc_common_1 = lib, service_definitions_1 = serviceDefinitions, createBidiStreamingMethod_1 = createBidiStreamingMethod$1, createClientStreamingMethod_1 = createClientStreamingMethod$1, createServerStreamingMethod_1 = createServerStreamingMethod$1, createUnaryMethod_1 = createUnaryMethod$1;
function createClientFactory() {
  return createClientFactoryWithMiddleware();
}
ClientFactory.createClientFactory = createClientFactory;
function createClient(a92, u2, c) {
  return createClientFactory().create(a92, u2, c);
}
ClientFactory.createClient = createClient;
function createClientFactoryWithMiddleware(a92) {
  return { use(u2) {
    return createClientFactoryWithMiddleware(a92 == null ? u2 : (0, nice_grpc_common_1.composeClientMiddleware)(a92, u2));
  }, create(u2, c, l2 = {}) {
    const v2 = {}, S2 = Object.entries((0, service_definitions_1.normalizeServiceDefinition)(u2));
    for (const [g2, E2] of S2) {
      const _ = { ...l2["*"], ...l2[g2] };
      E2.requestStream ? E2.responseStream ? v2[g2] = (0, createBidiStreamingMethod_1.createBidiStreamingMethod)(E2, c, a92, _) : v2[g2] = (0, createClientStreamingMethod_1.createClientStreamingMethod)(E2, c, a92, _) : E2.responseStream ? v2[g2] = (0, createServerStreamingMethod_1.createServerStreamingMethod)(E2, c, a92, _) : v2[g2] = (0, createUnaryMethod_1.createUnaryMethod)(E2, c, a92, _);
    }
    return v2;
  } };
}
var Client = {};
Object.defineProperty(Client, "__esModule", { value: true });
(function(a92) {
  var u2 = commonjsGlobal$1 && commonjsGlobal$1.__createBinding || (Object.create ? function(v2, S2, g2, E2) {
    E2 === void 0 && (E2 = g2);
    var _ = Object.getOwnPropertyDescriptor(S2, g2);
    (!_ || ("get" in _ ? !S2.__esModule : _.writable || _.configurable)) && (_ = { enumerable: true, get: function() {
      return S2[g2];
    } }), Object.defineProperty(v2, E2, _);
  } : function(v2, S2, g2, E2) {
    E2 === void 0 && (E2 = g2), v2[E2] = S2[g2];
  }), c = commonjsGlobal$1 && commonjsGlobal$1.__exportStar || function(v2, S2) {
    for (var g2 in v2)
      g2 !== "default" && !Object.prototype.hasOwnProperty.call(S2, g2) && u2(S2, v2, g2);
  };
  Object.defineProperty(a92, "__esModule", { value: true }), a92.Status = a92.Metadata = a92.composeClientMiddleware = a92.ClientError = void 0;
  var l2 = lib;
  Object.defineProperty(a92, "ClientError", { enumerable: true, get: function() {
    return l2.ClientError;
  } }), Object.defineProperty(a92, "composeClientMiddleware", { enumerable: true, get: function() {
    return l2.composeClientMiddleware;
  } }), Object.defineProperty(a92, "Metadata", { enumerable: true, get: function() {
    return l2.Metadata;
  } }), Object.defineProperty(a92, "Status", { enumerable: true, get: function() {
    return l2.Status;
  } }), c(serviceDefinitions, a92), c(channel, a92), c(ClientFactory, a92), c(Client, a92);
})(lib$1);
var dist$2 = {}, api$3 = {}, umd = { exports: {} };
(function(a92, u2) {
  var c = function(l2) {
    Object.defineProperty(l2, "__esModule", { value: true }), l2.default = void 0;
    /**
    * @license
    * Copyright 2009 The Closure Library Authors
    * Copyright 2020 Daniel Wirtz / The long.js Authors.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    *
    * SPDX-License-Identifier: Apache-2.0
    */
    var v2 = null;
    try {
      v2 = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;
    } catch {
    }
    function S2(he2, le2, we2) {
      this.low = he2 | 0, this.high = le2 | 0, this.unsigned = !!we2;
    }
    S2.prototype.__isLong__, Object.defineProperty(S2.prototype, "__isLong__", { value: true });
    function g2(he2) {
      return (he2 && he2.__isLong__) === true;
    }
    function E2(he2) {
      var le2 = Math.clz32(he2 & -he2);
      return he2 ? 31 - le2 : le2;
    }
    S2.isLong = g2;
    var _ = {}, k = {};
    function L2(he2, le2) {
      var we2, Be2, Ne2;
      return le2 ? (he2 >>>= 0, (Ne2 = 0 <= he2 && he2 < 256) && (Be2 = k[he2], Be2) ? Be2 : (we2 = $(he2, 0, true), Ne2 && (k[he2] = we2), we2)) : (he2 |= 0, (Ne2 = -128 <= he2 && he2 < 128) && (Be2 = _[he2], Be2) ? Be2 : (we2 = $(he2, he2 < 0 ? -1 : 0, false), Ne2 && (_[he2] = we2), we2));
    }
    S2.fromInt = L2;
    function M2(he2, le2) {
      if (isNaN(he2))
        return le2 ? oe2 : re2;
      if (le2) {
        if (he2 < 0)
          return oe2;
        if (he2 >= Y2)
          return W2;
      } else {
        if (he2 <= -ne2)
          return ee2;
        if (he2 + 1 >= ne2)
          return D2;
      }
      return he2 < 0 ? M2(-he2, le2).neg() : $(he2 % B2 | 0, he2 / B2 | 0, le2);
    }
    S2.fromNumber = M2;
    function $(he2, le2, we2) {
      return new S2(he2, le2, we2);
    }
    S2.fromBits = $;
    var J2 = Math.pow;
    function V2(he2, le2, we2) {
      if (he2.length === 0)
        throw Error("empty string");
      if (typeof le2 == "number" ? (we2 = le2, le2 = false) : le2 = !!le2, he2 === "NaN" || he2 === "Infinity" || he2 === "+Infinity" || he2 === "-Infinity")
        return le2 ? oe2 : re2;
      if (we2 = we2 || 10, we2 < 2 || 36 < we2)
        throw RangeError("radix");
      var Be2;
      if ((Be2 = he2.indexOf("-")) > 0)
        throw Error("interior hyphen");
      if (Be2 === 0)
        return V2(he2.substring(1), le2, we2).neg();
      for (var Ne2 = M2(J2(we2, 8)), Le2 = re2, $e2 = 0; $e2 < he2.length; $e2 += 8) {
        var Ue2 = Math.min(8, he2.length - $e2), Ge2 = parseInt(he2.substring($e2, $e2 + Ue2), we2);
        if (Ue2 < 8) {
          var He2 = M2(J2(we2, Ue2));
          Le2 = Le2.mul(He2).add(M2(Ge2));
        } else
          Le2 = Le2.mul(Ne2), Le2 = Le2.add(M2(Ge2));
      }
      return Le2.unsigned = le2, Le2;
    }
    S2.fromString = V2;
    function q2(he2, le2) {
      return typeof he2 == "number" ? M2(he2, le2) : typeof he2 == "string" ? V2(he2, le2) : $(he2.low, he2.high, typeof le2 == "boolean" ? le2 : he2.unsigned);
    }
    S2.fromValue = q2;
    var G2 = 65536, H2 = 1 << 24, B2 = G2 * G2, Y2 = B2 * B2, ne2 = Y2 / 2, Z2 = L2(H2), re2 = L2(0);
    S2.ZERO = re2;
    var oe2 = L2(0, true);
    S2.UZERO = oe2;
    var de2 = L2(1);
    S2.ONE = de2;
    var A2 = L2(1, true);
    S2.UONE = A2;
    var N2 = L2(-1);
    S2.NEG_ONE = N2;
    var D2 = $(-1, 2147483647, false);
    S2.MAX_VALUE = D2;
    var W2 = $(-1, -1, true);
    S2.MAX_UNSIGNED_VALUE = W2;
    var ee2 = $(0, -2147483648, false);
    S2.MIN_VALUE = ee2;
    var ae2 = S2.prototype;
    ae2.toInt = function() {
      return this.unsigned ? this.low >>> 0 : this.low;
    }, ae2.toNumber = function() {
      return this.unsigned ? (this.high >>> 0) * B2 + (this.low >>> 0) : this.high * B2 + (this.low >>> 0);
    }, ae2.toString = function(le2) {
      if (le2 = le2 || 10, le2 < 2 || 36 < le2)
        throw RangeError("radix");
      if (this.isZero())
        return "0";
      if (this.isNegative())
        if (this.eq(ee2)) {
          var we2 = M2(le2), Be2 = this.div(we2), Ne2 = Be2.mul(we2).sub(this);
          return Be2.toString(le2) + Ne2.toInt().toString(le2);
        } else
          return "-" + this.neg().toString(le2);
      for (var Le2 = M2(J2(le2, 6), this.unsigned), $e2 = this, Ue2 = ""; ; ) {
        var Ge2 = $e2.div(Le2), He2 = $e2.sub(Ge2.mul(Le2)).toInt() >>> 0, Ve2 = He2.toString(le2);
        if ($e2 = Ge2, $e2.isZero())
          return Ve2 + Ue2;
        for (; Ve2.length < 6; )
          Ve2 = "0" + Ve2;
        Ue2 = "" + Ve2 + Ue2;
      }
    }, ae2.getHighBits = function() {
      return this.high;
    }, ae2.getHighBitsUnsigned = function() {
      return this.high >>> 0;
    }, ae2.getLowBits = function() {
      return this.low;
    }, ae2.getLowBitsUnsigned = function() {
      return this.low >>> 0;
    }, ae2.getNumBitsAbs = function() {
      if (this.isNegative())
        return this.eq(ee2) ? 64 : this.neg().getNumBitsAbs();
      for (var le2 = this.high != 0 ? this.high : this.low, we2 = 31; we2 > 0 && !(le2 & 1 << we2); we2--)
        ;
      return this.high != 0 ? we2 + 33 : we2 + 1;
    }, ae2.isZero = function() {
      return this.high === 0 && this.low === 0;
    }, ae2.eqz = ae2.isZero, ae2.isNegative = function() {
      return !this.unsigned && this.high < 0;
    }, ae2.isPositive = function() {
      return this.unsigned || this.high >= 0;
    }, ae2.isOdd = function() {
      return (this.low & 1) === 1;
    }, ae2.isEven = function() {
      return (this.low & 1) === 0;
    }, ae2.equals = function(le2) {
      return g2(le2) || (le2 = q2(le2)), this.unsigned !== le2.unsigned && this.high >>> 31 === 1 && le2.high >>> 31 === 1 ? false : this.high === le2.high && this.low === le2.low;
    }, ae2.eq = ae2.equals, ae2.notEquals = function(le2) {
      return !this.eq(
        /* validates */
        le2
      );
    }, ae2.neq = ae2.notEquals, ae2.ne = ae2.notEquals, ae2.lessThan = function(le2) {
      return this.comp(
        /* validates */
        le2
      ) < 0;
    }, ae2.lt = ae2.lessThan, ae2.lessThanOrEqual = function(le2) {
      return this.comp(
        /* validates */
        le2
      ) <= 0;
    }, ae2.lte = ae2.lessThanOrEqual, ae2.le = ae2.lessThanOrEqual, ae2.greaterThan = function(le2) {
      return this.comp(
        /* validates */
        le2
      ) > 0;
    }, ae2.gt = ae2.greaterThan, ae2.greaterThanOrEqual = function(le2) {
      return this.comp(
        /* validates */
        le2
      ) >= 0;
    }, ae2.gte = ae2.greaterThanOrEqual, ae2.ge = ae2.greaterThanOrEqual, ae2.compare = function(le2) {
      if (g2(le2) || (le2 = q2(le2)), this.eq(le2))
        return 0;
      var we2 = this.isNegative(), Be2 = le2.isNegative();
      return we2 && !Be2 ? -1 : !we2 && Be2 ? 1 : this.unsigned ? le2.high >>> 0 > this.high >>> 0 || le2.high === this.high && le2.low >>> 0 > this.low >>> 0 ? -1 : 1 : this.sub(le2).isNegative() ? -1 : 1;
    }, ae2.comp = ae2.compare, ae2.negate = function() {
      return !this.unsigned && this.eq(ee2) ? ee2 : this.not().add(de2);
    }, ae2.neg = ae2.negate, ae2.add = function(le2) {
      g2(le2) || (le2 = q2(le2));
      var we2 = this.high >>> 16, Be2 = this.high & 65535, Ne2 = this.low >>> 16, Le2 = this.low & 65535, $e2 = le2.high >>> 16, Ue2 = le2.high & 65535, Ge2 = le2.low >>> 16, He2 = le2.low & 65535, Ve2 = 0, be2 = 0, Ae2 = 0, qe2 = 0;
      return qe2 += Le2 + He2, Ae2 += qe2 >>> 16, qe2 &= 65535, Ae2 += Ne2 + Ge2, be2 += Ae2 >>> 16, Ae2 &= 65535, be2 += Be2 + Ue2, Ve2 += be2 >>> 16, be2 &= 65535, Ve2 += we2 + $e2, Ve2 &= 65535, $(Ae2 << 16 | qe2, Ve2 << 16 | be2, this.unsigned);
    }, ae2.subtract = function(le2) {
      return g2(le2) || (le2 = q2(le2)), this.add(le2.neg());
    }, ae2.sub = ae2.subtract, ae2.multiply = function(le2) {
      if (this.isZero())
        return this;
      if (g2(le2) || (le2 = q2(le2)), v2) {
        var we2 = v2.mul(this.low, this.high, le2.low, le2.high);
        return $(we2, v2.get_high(), this.unsigned);
      }
      if (le2.isZero())
        return this.unsigned ? oe2 : re2;
      if (this.eq(ee2))
        return le2.isOdd() ? ee2 : re2;
      if (le2.eq(ee2))
        return this.isOdd() ? ee2 : re2;
      if (this.isNegative())
        return le2.isNegative() ? this.neg().mul(le2.neg()) : this.neg().mul(le2).neg();
      if (le2.isNegative())
        return this.mul(le2.neg()).neg();
      if (this.lt(Z2) && le2.lt(Z2))
        return M2(this.toNumber() * le2.toNumber(), this.unsigned);
      var Be2 = this.high >>> 16, Ne2 = this.high & 65535, Le2 = this.low >>> 16, $e2 = this.low & 65535, Ue2 = le2.high >>> 16, Ge2 = le2.high & 65535, He2 = le2.low >>> 16, Ve2 = le2.low & 65535, be2 = 0, Ae2 = 0, qe2 = 0, xe2 = 0;
      return xe2 += $e2 * Ve2, qe2 += xe2 >>> 16, xe2 &= 65535, qe2 += Le2 * Ve2, Ae2 += qe2 >>> 16, qe2 &= 65535, qe2 += $e2 * He2, Ae2 += qe2 >>> 16, qe2 &= 65535, Ae2 += Ne2 * Ve2, be2 += Ae2 >>> 16, Ae2 &= 65535, Ae2 += Le2 * He2, be2 += Ae2 >>> 16, Ae2 &= 65535, Ae2 += $e2 * Ge2, be2 += Ae2 >>> 16, Ae2 &= 65535, be2 += Be2 * Ve2 + Ne2 * He2 + Le2 * Ge2 + $e2 * Ue2, be2 &= 65535, $(qe2 << 16 | xe2, be2 << 16 | Ae2, this.unsigned);
    }, ae2.mul = ae2.multiply, ae2.divide = function(le2) {
      if (g2(le2) || (le2 = q2(le2)), le2.isZero())
        throw Error("division by zero");
      if (v2) {
        if (!this.unsigned && this.high === -2147483648 && le2.low === -1 && le2.high === -1)
          return this;
        var we2 = (this.unsigned ? v2.div_u : v2.div_s)(this.low, this.high, le2.low, le2.high);
        return $(we2, v2.get_high(), this.unsigned);
      }
      if (this.isZero())
        return this.unsigned ? oe2 : re2;
      var Be2, Ne2, Le2;
      if (this.unsigned) {
        if (le2.unsigned || (le2 = le2.toUnsigned()), le2.gt(this))
          return oe2;
        if (le2.gt(this.shru(1)))
          return A2;
        Le2 = oe2;
      } else {
        if (this.eq(ee2)) {
          if (le2.eq(de2) || le2.eq(N2))
            return ee2;
          if (le2.eq(ee2))
            return de2;
          var $e2 = this.shr(1);
          return Be2 = $e2.div(le2).shl(1), Be2.eq(re2) ? le2.isNegative() ? de2 : N2 : (Ne2 = this.sub(le2.mul(Be2)), Le2 = Be2.add(Ne2.div(le2)), Le2);
        } else if (le2.eq(ee2))
          return this.unsigned ? oe2 : re2;
        if (this.isNegative())
          return le2.isNegative() ? this.neg().div(le2.neg()) : this.neg().div(le2).neg();
        if (le2.isNegative())
          return this.div(le2.neg()).neg();
        Le2 = re2;
      }
      for (Ne2 = this; Ne2.gte(le2); ) {
        Be2 = Math.max(1, Math.floor(Ne2.toNumber() / le2.toNumber()));
        for (var Ue2 = Math.ceil(Math.log(Be2) / Math.LN2), Ge2 = Ue2 <= 48 ? 1 : J2(2, Ue2 - 48), He2 = M2(Be2), Ve2 = He2.mul(le2); Ve2.isNegative() || Ve2.gt(Ne2); )
          Be2 -= Ge2, He2 = M2(Be2, this.unsigned), Ve2 = He2.mul(le2);
        He2.isZero() && (He2 = de2), Le2 = Le2.add(He2), Ne2 = Ne2.sub(Ve2);
      }
      return Le2;
    }, ae2.div = ae2.divide, ae2.modulo = function(le2) {
      if (g2(le2) || (le2 = q2(le2)), v2) {
        var we2 = (this.unsigned ? v2.rem_u : v2.rem_s)(this.low, this.high, le2.low, le2.high);
        return $(we2, v2.get_high(), this.unsigned);
      }
      return this.sub(this.div(le2).mul(le2));
    }, ae2.mod = ae2.modulo, ae2.rem = ae2.modulo, ae2.not = function() {
      return $(~this.low, ~this.high, this.unsigned);
    }, ae2.countLeadingZeros = function() {
      return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;
    }, ae2.clz = ae2.countLeadingZeros, ae2.countTrailingZeros = function() {
      return this.low ? E2(this.low) : E2(this.high) + 32;
    }, ae2.ctz = ae2.countTrailingZeros, ae2.and = function(le2) {
      return g2(le2) || (le2 = q2(le2)), $(this.low & le2.low, this.high & le2.high, this.unsigned);
    }, ae2.or = function(le2) {
      return g2(le2) || (le2 = q2(le2)), $(this.low | le2.low, this.high | le2.high, this.unsigned);
    }, ae2.xor = function(le2) {
      return g2(le2) || (le2 = q2(le2)), $(this.low ^ le2.low, this.high ^ le2.high, this.unsigned);
    }, ae2.shiftLeft = function(le2) {
      return g2(le2) && (le2 = le2.toInt()), (le2 &= 63) === 0 ? this : le2 < 32 ? $(this.low << le2, this.high << le2 | this.low >>> 32 - le2, this.unsigned) : $(0, this.low << le2 - 32, this.unsigned);
    }, ae2.shl = ae2.shiftLeft, ae2.shiftRight = function(le2) {
      return g2(le2) && (le2 = le2.toInt()), (le2 &= 63) === 0 ? this : le2 < 32 ? $(this.low >>> le2 | this.high << 32 - le2, this.high >> le2, this.unsigned) : $(this.high >> le2 - 32, this.high >= 0 ? 0 : -1, this.unsigned);
    }, ae2.shr = ae2.shiftRight, ae2.shiftRightUnsigned = function(le2) {
      return g2(le2) && (le2 = le2.toInt()), (le2 &= 63) === 0 ? this : le2 < 32 ? $(this.low >>> le2 | this.high << 32 - le2, this.high >>> le2, this.unsigned) : le2 === 32 ? $(this.high, 0, this.unsigned) : $(this.high >>> le2 - 32, 0, this.unsigned);
    }, ae2.shru = ae2.shiftRightUnsigned, ae2.shr_u = ae2.shiftRightUnsigned, ae2.rotateLeft = function(le2) {
      var we2;
      return g2(le2) && (le2 = le2.toInt()), (le2 &= 63) === 0 ? this : le2 === 32 ? $(this.high, this.low, this.unsigned) : le2 < 32 ? (we2 = 32 - le2, $(this.low << le2 | this.high >>> we2, this.high << le2 | this.low >>> we2, this.unsigned)) : (le2 -= 32, we2 = 32 - le2, $(this.high << le2 | this.low >>> we2, this.low << le2 | this.high >>> we2, this.unsigned));
    }, ae2.rotl = ae2.rotateLeft, ae2.rotateRight = function(le2) {
      var we2;
      return g2(le2) && (le2 = le2.toInt()), (le2 &= 63) === 0 ? this : le2 === 32 ? $(this.high, this.low, this.unsigned) : le2 < 32 ? (we2 = 32 - le2, $(this.high << we2 | this.low >>> le2, this.low << we2 | this.high >>> le2, this.unsigned)) : (le2 -= 32, we2 = 32 - le2, $(this.low << we2 | this.high >>> le2, this.high << we2 | this.low >>> le2, this.unsigned));
    }, ae2.rotr = ae2.rotateRight, ae2.toSigned = function() {
      return this.unsigned ? $(this.low, this.high, false) : this;
    }, ae2.toUnsigned = function() {
      return this.unsigned ? this : $(this.low, this.high, true);
    }, ae2.toBytes = function(le2) {
      return le2 ? this.toBytesLE() : this.toBytesBE();
    }, ae2.toBytesLE = function() {
      var le2 = this.high, we2 = this.low;
      return [we2 & 255, we2 >>> 8 & 255, we2 >>> 16 & 255, we2 >>> 24, le2 & 255, le2 >>> 8 & 255, le2 >>> 16 & 255, le2 >>> 24];
    }, ae2.toBytesBE = function() {
      var le2 = this.high, we2 = this.low;
      return [le2 >>> 24, le2 >>> 16 & 255, le2 >>> 8 & 255, le2 & 255, we2 >>> 24, we2 >>> 16 & 255, we2 >>> 8 & 255, we2 & 255];
    }, S2.fromBytes = function(le2, we2, Be2) {
      return Be2 ? S2.fromBytesLE(le2, we2) : S2.fromBytesBE(le2, we2);
    }, S2.fromBytesLE = function(le2, we2) {
      return new S2(le2[0] | le2[1] << 8 | le2[2] << 16 | le2[3] << 24, le2[4] | le2[5] << 8 | le2[6] << 16 | le2[7] << 24, we2);
    }, S2.fromBytesBE = function(le2, we2) {
      return new S2(le2[4] << 24 | le2[5] << 16 | le2[6] << 8 | le2[7], le2[0] << 24 | le2[1] << 16 | le2[2] << 8 | le2[3], we2);
    };
    var ye2 = S2;
    return l2.default = ye2, "default" in l2 ? l2.default : l2;
  }({});
  a92.exports = c;
})(umd);
var umdExports = umd.exports, indexMinimal = {}, minimal$1 = {}, aspromise = asPromise;
function asPromise(a92, u2) {
  for (var c = new Array(arguments.length - 1), l2 = 0, v2 = 2, S2 = true; v2 < arguments.length; )
    c[l2++] = arguments[v2++];
  return new Promise(function(E2, _) {
    c[l2] = function(L2) {
      if (S2)
        if (S2 = false, L2)
          _(L2);
        else {
          for (var M2 = new Array(arguments.length - 1), $ = 0; $ < M2.length; )
            M2[$++] = arguments[$];
          E2.apply(null, M2);
        }
    };
    try {
      a92.apply(u2 || null, c);
    } catch (k) {
      S2 && (S2 = false, _(k));
    }
  });
}
var base64$1 = {};
(function(a92) {
  var u2 = a92;
  u2.length = function(E2) {
    var _ = E2.length;
    if (!_)
      return 0;
    for (var k = 0; --_ % 4 > 1 && E2.charAt(_) === "="; )
      ++k;
    return Math.ceil(E2.length * 3) / 4 - k;
  };
  for (var c = new Array(64), l2 = new Array(123), v2 = 0; v2 < 64; )
    l2[c[v2] = v2 < 26 ? v2 + 65 : v2 < 52 ? v2 + 71 : v2 < 62 ? v2 - 4 : v2 - 59 | 43] = v2++;
  u2.encode = function(E2, _, k) {
    for (var L2 = null, M2 = [], $ = 0, J2 = 0, V2; _ < k; ) {
      var q2 = E2[_++];
      switch (J2) {
        case 0:
          M2[$++] = c[q2 >> 2], V2 = (q2 & 3) << 4, J2 = 1;
          break;
        case 1:
          M2[$++] = c[V2 | q2 >> 4], V2 = (q2 & 15) << 2, J2 = 2;
          break;
        case 2:
          M2[$++] = c[V2 | q2 >> 6], M2[$++] = c[q2 & 63], J2 = 0;
          break;
      }
      $ > 8191 && ((L2 || (L2 = [])).push(String.fromCharCode.apply(String, M2)), $ = 0);
    }
    return J2 && (M2[$++] = c[V2], M2[$++] = 61, J2 === 1 && (M2[$++] = 61)), L2 ? ($ && L2.push(String.fromCharCode.apply(String, M2.slice(0, $))), L2.join("")) : String.fromCharCode.apply(String, M2.slice(0, $));
  };
  var S2 = "invalid encoding";
  u2.decode = function(E2, _, k) {
    for (var L2 = k, M2 = 0, $, J2 = 0; J2 < E2.length; ) {
      var V2 = E2.charCodeAt(J2++);
      if (V2 === 61 && M2 > 1)
        break;
      if ((V2 = l2[V2]) === void 0)
        throw Error(S2);
      switch (M2) {
        case 0:
          $ = V2, M2 = 1;
          break;
        case 1:
          _[k++] = $ << 2 | (V2 & 48) >> 4, $ = V2, M2 = 2;
          break;
        case 2:
          _[k++] = ($ & 15) << 4 | (V2 & 60) >> 2, $ = V2, M2 = 3;
          break;
        case 3:
          _[k++] = ($ & 3) << 6 | V2, M2 = 0;
          break;
      }
    }
    if (M2 === 1)
      throw Error(S2);
    return k - L2;
  }, u2.test = function(E2) {
    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(E2);
  };
})(base64$1);
var eventemitter = EventEmitter$1;
function EventEmitter$1() {
  this._listeners = {};
}
EventEmitter$1.prototype.on = function(u2, c, l2) {
  return (this._listeners[u2] || (this._listeners[u2] = [])).push({ fn: c, ctx: l2 || this }), this;
};
EventEmitter$1.prototype.off = function(u2, c) {
  if (u2 === void 0)
    this._listeners = {};
  else if (c === void 0)
    this._listeners[u2] = [];
  else
    for (var l2 = this._listeners[u2], v2 = 0; v2 < l2.length; )
      l2[v2].fn === c ? l2.splice(v2, 1) : ++v2;
  return this;
};
EventEmitter$1.prototype.emit = function(u2) {
  var c = this._listeners[u2];
  if (c) {
    for (var l2 = [], v2 = 1; v2 < arguments.length; )
      l2.push(arguments[v2++]);
    for (v2 = 0; v2 < c.length; )
      c[v2].fn.apply(c[v2++].ctx, l2);
  }
  return this;
};
var float = factory(factory);
function factory(a92) {
  return typeof Float32Array < "u" ? function() {
    var u2 = new Float32Array([-0]), c = new Uint8Array(u2.buffer), l2 = c[3] === 128;
    function v2(_, k, L2) {
      u2[0] = _, k[L2] = c[0], k[L2 + 1] = c[1], k[L2 + 2] = c[2], k[L2 + 3] = c[3];
    }
    function S2(_, k, L2) {
      u2[0] = _, k[L2] = c[3], k[L2 + 1] = c[2], k[L2 + 2] = c[1], k[L2 + 3] = c[0];
    }
    a92.writeFloatLE = l2 ? v2 : S2, a92.writeFloatBE = l2 ? S2 : v2;
    function g2(_, k) {
      return c[0] = _[k], c[1] = _[k + 1], c[2] = _[k + 2], c[3] = _[k + 3], u2[0];
    }
    function E2(_, k) {
      return c[3] = _[k], c[2] = _[k + 1], c[1] = _[k + 2], c[0] = _[k + 3], u2[0];
    }
    a92.readFloatLE = l2 ? g2 : E2, a92.readFloatBE = l2 ? E2 : g2;
  }() : function() {
    function u2(l2, v2, S2, g2) {
      var E2 = v2 < 0 ? 1 : 0;
      if (E2 && (v2 = -v2), v2 === 0)
        l2(1 / v2 > 0 ? (
          /* positive */
          0
        ) : (
          /* negative 0 */
          2147483648
        ), S2, g2);
      else if (isNaN(v2))
        l2(2143289344, S2, g2);
      else if (v2 > 34028234663852886e22)
        l2((E2 << 31 | 2139095040) >>> 0, S2, g2);
      else if (v2 < 11754943508222875e-54)
        l2((E2 << 31 | Math.round(v2 / 1401298464324817e-60)) >>> 0, S2, g2);
      else {
        var _ = Math.floor(Math.log(v2) / Math.LN2), k = Math.round(v2 * Math.pow(2, -_) * 8388608) & 8388607;
        l2((E2 << 31 | _ + 127 << 23 | k) >>> 0, S2, g2);
      }
    }
    a92.writeFloatLE = u2.bind(null, writeUintLE), a92.writeFloatBE = u2.bind(null, writeUintBE);
    function c(l2, v2, S2) {
      var g2 = l2(v2, S2), E2 = (g2 >> 31) * 2 + 1, _ = g2 >>> 23 & 255, k = g2 & 8388607;
      return _ === 255 ? k ? NaN : E2 * (1 / 0) : _ === 0 ? E2 * 1401298464324817e-60 * k : E2 * Math.pow(2, _ - 150) * (k + 8388608);
    }
    a92.readFloatLE = c.bind(null, readUintLE), a92.readFloatBE = c.bind(null, readUintBE);
  }(), typeof Float64Array < "u" ? function() {
    var u2 = new Float64Array([-0]), c = new Uint8Array(u2.buffer), l2 = c[7] === 128;
    function v2(_, k, L2) {
      u2[0] = _, k[L2] = c[0], k[L2 + 1] = c[1], k[L2 + 2] = c[2], k[L2 + 3] = c[3], k[L2 + 4] = c[4], k[L2 + 5] = c[5], k[L2 + 6] = c[6], k[L2 + 7] = c[7];
    }
    function S2(_, k, L2) {
      u2[0] = _, k[L2] = c[7], k[L2 + 1] = c[6], k[L2 + 2] = c[5], k[L2 + 3] = c[4], k[L2 + 4] = c[3], k[L2 + 5] = c[2], k[L2 + 6] = c[1], k[L2 + 7] = c[0];
    }
    a92.writeDoubleLE = l2 ? v2 : S2, a92.writeDoubleBE = l2 ? S2 : v2;
    function g2(_, k) {
      return c[0] = _[k], c[1] = _[k + 1], c[2] = _[k + 2], c[3] = _[k + 3], c[4] = _[k + 4], c[5] = _[k + 5], c[6] = _[k + 6], c[7] = _[k + 7], u2[0];
    }
    function E2(_, k) {
      return c[7] = _[k], c[6] = _[k + 1], c[5] = _[k + 2], c[4] = _[k + 3], c[3] = _[k + 4], c[2] = _[k + 5], c[1] = _[k + 6], c[0] = _[k + 7], u2[0];
    }
    a92.readDoubleLE = l2 ? g2 : E2, a92.readDoubleBE = l2 ? E2 : g2;
  }() : function() {
    function u2(l2, v2, S2, g2, E2, _) {
      var k = g2 < 0 ? 1 : 0;
      if (k && (g2 = -g2), g2 === 0)
        l2(0, E2, _ + v2), l2(1 / g2 > 0 ? (
          /* positive */
          0
        ) : (
          /* negative 0 */
          2147483648
        ), E2, _ + S2);
      else if (isNaN(g2))
        l2(0, E2, _ + v2), l2(2146959360, E2, _ + S2);
      else if (g2 > 17976931348623157e292)
        l2(0, E2, _ + v2), l2((k << 31 | 2146435072) >>> 0, E2, _ + S2);
      else {
        var L2;
        if (g2 < 22250738585072014e-324)
          L2 = g2 / 5e-324, l2(L2 >>> 0, E2, _ + v2), l2((k << 31 | L2 / 4294967296) >>> 0, E2, _ + S2);
        else {
          var M2 = Math.floor(Math.log(g2) / Math.LN2);
          M2 === 1024 && (M2 = 1023), L2 = g2 * Math.pow(2, -M2), l2(L2 * 4503599627370496 >>> 0, E2, _ + v2), l2((k << 31 | M2 + 1023 << 20 | L2 * 1048576 & 1048575) >>> 0, E2, _ + S2);
        }
      }
    }
    a92.writeDoubleLE = u2.bind(null, writeUintLE, 0, 4), a92.writeDoubleBE = u2.bind(null, writeUintBE, 4, 0);
    function c(l2, v2, S2, g2, E2) {
      var _ = l2(g2, E2 + v2), k = l2(g2, E2 + S2), L2 = (k >> 31) * 2 + 1, M2 = k >>> 20 & 2047, $ = 4294967296 * (k & 1048575) + _;
      return M2 === 2047 ? $ ? NaN : L2 * (1 / 0) : M2 === 0 ? L2 * 5e-324 * $ : L2 * Math.pow(2, M2 - 1075) * ($ + 4503599627370496);
    }
    a92.readDoubleLE = c.bind(null, readUintLE, 0, 4), a92.readDoubleBE = c.bind(null, readUintBE, 4, 0);
  }(), a92;
}
function writeUintLE(a92, u2, c) {
  u2[c] = a92 & 255, u2[c + 1] = a92 >>> 8 & 255, u2[c + 2] = a92 >>> 16 & 255, u2[c + 3] = a92 >>> 24;
}
function writeUintBE(a92, u2, c) {
  u2[c] = a92 >>> 24, u2[c + 1] = a92 >>> 16 & 255, u2[c + 2] = a92 >>> 8 & 255, u2[c + 3] = a92 & 255;
}
function readUintLE(a92, u2) {
  return (a92[u2] | a92[u2 + 1] << 8 | a92[u2 + 2] << 16 | a92[u2 + 3] << 24) >>> 0;
}
function readUintBE(a92, u2) {
  return (a92[u2] << 24 | a92[u2 + 1] << 16 | a92[u2 + 2] << 8 | a92[u2 + 3]) >>> 0;
}
var inquire_1 = inquire;
function inquire(moduleName) {
  try {
    var mod = eval("quire".replace(/^/, "re"))(moduleName);
    if (mod && (mod.length || Object.keys(mod).length))
      return mod;
  } catch (a92) {
  }
  return null;
}
var utf8$2 = {};
(function(a92) {
  var u2 = a92;
  u2.length = function(l2) {
    for (var v2 = 0, S2 = 0, g2 = 0; g2 < l2.length; ++g2)
      S2 = l2.charCodeAt(g2), S2 < 128 ? v2 += 1 : S2 < 2048 ? v2 += 2 : (S2 & 64512) === 55296 && (l2.charCodeAt(g2 + 1) & 64512) === 56320 ? (++g2, v2 += 4) : v2 += 3;
    return v2;
  }, u2.read = function(l2, v2, S2) {
    var g2 = S2 - v2;
    if (g2 < 1)
      return "";
    for (var E2 = null, _ = [], k = 0, L2; v2 < S2; )
      L2 = l2[v2++], L2 < 128 ? _[k++] = L2 : L2 > 191 && L2 < 224 ? _[k++] = (L2 & 31) << 6 | l2[v2++] & 63 : L2 > 239 && L2 < 365 ? (L2 = ((L2 & 7) << 18 | (l2[v2++] & 63) << 12 | (l2[v2++] & 63) << 6 | l2[v2++] & 63) - 65536, _[k++] = 55296 + (L2 >> 10), _[k++] = 56320 + (L2 & 1023)) : _[k++] = (L2 & 15) << 12 | (l2[v2++] & 63) << 6 | l2[v2++] & 63, k > 8191 && ((E2 || (E2 = [])).push(String.fromCharCode.apply(String, _)), k = 0);
    return E2 ? (k && E2.push(String.fromCharCode.apply(String, _.slice(0, k))), E2.join("")) : String.fromCharCode.apply(String, _.slice(0, k));
  }, u2.write = function(l2, v2, S2) {
    for (var g2 = S2, E2, _, k = 0; k < l2.length; ++k)
      E2 = l2.charCodeAt(k), E2 < 128 ? v2[S2++] = E2 : E2 < 2048 ? (v2[S2++] = E2 >> 6 | 192, v2[S2++] = E2 & 63 | 128) : (E2 & 64512) === 55296 && ((_ = l2.charCodeAt(k + 1)) & 64512) === 56320 ? (E2 = 65536 + ((E2 & 1023) << 10) + (_ & 1023), ++k, v2[S2++] = E2 >> 18 | 240, v2[S2++] = E2 >> 12 & 63 | 128, v2[S2++] = E2 >> 6 & 63 | 128, v2[S2++] = E2 & 63 | 128) : (v2[S2++] = E2 >> 12 | 224, v2[S2++] = E2 >> 6 & 63 | 128, v2[S2++] = E2 & 63 | 128);
    return S2 - g2;
  };
})(utf8$2);
var pool_1 = pool;
function pool(a92, u2, c) {
  var l2 = c || 8192, v2 = l2 >>> 1, S2 = null, g2 = l2;
  return function(_) {
    if (_ < 1 || _ > v2)
      return a92(_);
    g2 + _ > l2 && (S2 = a92(l2), g2 = 0);
    var k = u2.call(S2, g2, g2 += _);
    return g2 & 7 && (g2 = (g2 | 7) + 1), k;
  };
}
var longbits, hasRequiredLongbits;
function requireLongbits() {
  if (hasRequiredLongbits)
    return longbits;
  hasRequiredLongbits = 1, longbits = u2;
  var a92 = requireMinimal();
  function u2(S2, g2) {
    this.lo = S2 >>> 0, this.hi = g2 >>> 0;
  }
  var c = u2.zero = new u2(0, 0);
  c.toNumber = function() {
    return 0;
  }, c.zzEncode = c.zzDecode = function() {
    return this;
  }, c.length = function() {
    return 1;
  };
  var l2 = u2.zeroHash = "\0\0\0\0\0\0\0\0";
  u2.fromNumber = function(g2) {
    if (g2 === 0)
      return c;
    var E2 = g2 < 0;
    E2 && (g2 = -g2);
    var _ = g2 >>> 0, k = (g2 - _) / 4294967296 >>> 0;
    return E2 && (k = ~k >>> 0, _ = ~_ >>> 0, ++_ > 4294967295 && (_ = 0, ++k > 4294967295 && (k = 0))), new u2(_, k);
  }, u2.from = function(g2) {
    if (typeof g2 == "number")
      return u2.fromNumber(g2);
    if (a92.isString(g2))
      if (a92.Long)
        g2 = a92.Long.fromString(g2);
      else
        return u2.fromNumber(parseInt(g2, 10));
    return g2.low || g2.high ? new u2(g2.low >>> 0, g2.high >>> 0) : c;
  }, u2.prototype.toNumber = function(g2) {
    if (!g2 && this.hi >>> 31) {
      var E2 = ~this.lo + 1 >>> 0, _ = ~this.hi >>> 0;
      return E2 || (_ = _ + 1 >>> 0), -(E2 + _ * 4294967296);
    }
    return this.lo + this.hi * 4294967296;
  }, u2.prototype.toLong = function(g2) {
    return a92.Long ? new a92.Long(this.lo | 0, this.hi | 0, !!g2) : { low: this.lo | 0, high: this.hi | 0, unsigned: !!g2 };
  };
  var v2 = String.prototype.charCodeAt;
  return u2.fromHash = function(g2) {
    return g2 === l2 ? c : new u2((v2.call(g2, 0) | v2.call(g2, 1) << 8 | v2.call(g2, 2) << 16 | v2.call(g2, 3) << 24) >>> 0, (v2.call(g2, 4) | v2.call(g2, 5) << 8 | v2.call(g2, 6) << 16 | v2.call(g2, 7) << 24) >>> 0);
  }, u2.prototype.toHash = function() {
    return String.fromCharCode(this.lo & 255, this.lo >>> 8 & 255, this.lo >>> 16 & 255, this.lo >>> 24, this.hi & 255, this.hi >>> 8 & 255, this.hi >>> 16 & 255, this.hi >>> 24);
  }, u2.prototype.zzEncode = function() {
    var g2 = this.hi >> 31;
    return this.hi = ((this.hi << 1 | this.lo >>> 31) ^ g2) >>> 0, this.lo = (this.lo << 1 ^ g2) >>> 0, this;
  }, u2.prototype.zzDecode = function() {
    var g2 = -(this.lo & 1);
    return this.lo = ((this.lo >>> 1 | this.hi << 31) ^ g2) >>> 0, this.hi = (this.hi >>> 1 ^ g2) >>> 0, this;
  }, u2.prototype.length = function() {
    var g2 = this.lo, E2 = (this.lo >>> 28 | this.hi << 4) >>> 0, _ = this.hi >>> 24;
    return _ === 0 ? E2 === 0 ? g2 < 16384 ? g2 < 128 ? 1 : 2 : g2 < 2097152 ? 3 : 4 : E2 < 16384 ? E2 < 128 ? 5 : 6 : E2 < 2097152 ? 7 : 8 : _ < 128 ? 9 : 10;
  }, longbits;
}
var hasRequiredMinimal;
function requireMinimal() {
  return hasRequiredMinimal || (hasRequiredMinimal = 1, function(a92) {
    var u2 = a92;
    u2.asPromise = aspromise, u2.base64 = base64$1, u2.EventEmitter = eventemitter, u2.float = float, u2.inquire = inquire_1, u2.utf8 = utf8$2, u2.pool = pool_1, u2.LongBits = requireLongbits(), u2.isNode = !!(typeof commonjsGlobal$1 < "u" && commonjsGlobal$1 && commonjsGlobal$1.process && commonjsGlobal$1.process.versions && commonjsGlobal$1.process.versions.node), u2.global = u2.isNode && commonjsGlobal$1 || typeof window < "u" && window || typeof self < "u" && self || commonjsGlobal$1, u2.emptyArray = Object.freeze ? Object.freeze([]) : (
      /* istanbul ignore next */
      []
    ), u2.emptyObject = Object.freeze ? Object.freeze({}) : (
      /* istanbul ignore next */
      {}
    ), u2.isInteger = Number.isInteger || /* istanbul ignore next */
    function(S2) {
      return typeof S2 == "number" && isFinite(S2) && Math.floor(S2) === S2;
    }, u2.isString = function(S2) {
      return typeof S2 == "string" || S2 instanceof String;
    }, u2.isObject = function(S2) {
      return S2 && typeof S2 == "object";
    }, u2.isset = /**
    * Checks if a property on a message is considered to be present.
    * @param {Object} obj Plain object or message instance
    * @param {string} prop Property name
    * @returns {boolean} `true` if considered to be present, otherwise `false`
    */
    u2.isSet = function(S2, g2) {
      var E2 = S2[g2];
      return E2 != null && S2.hasOwnProperty(g2) ? typeof E2 != "object" || (Array.isArray(E2) ? E2.length : Object.keys(E2).length) > 0 : false;
    }, u2.Buffer = function() {
      try {
        var v2 = u2.inquire("buffer").Buffer;
        return v2.prototype.utf8Write ? v2 : (
          /* istanbul ignore next */
          null
        );
      } catch {
        return null;
      }
    }(), u2._Buffer_from = null, u2._Buffer_allocUnsafe = null, u2.newBuffer = function(S2) {
      return typeof S2 == "number" ? u2.Buffer ? u2._Buffer_allocUnsafe(S2) : new u2.Array(S2) : u2.Buffer ? u2._Buffer_from(S2) : typeof Uint8Array > "u" ? S2 : new Uint8Array(S2);
    }, u2.Array = typeof Uint8Array < "u" ? Uint8Array : Array, u2.Long = /* istanbul ignore next */
    u2.global.dcodeIO && /* istanbul ignore next */
    u2.global.dcodeIO.Long || /* istanbul ignore next */
    u2.global.Long || u2.inquire("long"), u2.key2Re = /^true|false|0|1$/, u2.key32Re = /^-?(?:0|[1-9][0-9]*)$/, u2.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/, u2.longToHash = function(S2) {
      return S2 ? u2.LongBits.from(S2).toHash() : u2.LongBits.zeroHash;
    }, u2.longFromHash = function(S2, g2) {
      var E2 = u2.LongBits.fromHash(S2);
      return u2.Long ? u2.Long.fromBits(E2.lo, E2.hi, g2) : E2.toNumber(!!g2);
    };
    function c(v2, S2, g2) {
      for (var E2 = Object.keys(S2), _ = 0; _ < E2.length; ++_)
        (v2[E2[_]] === void 0 || !g2) && (v2[E2[_]] = S2[E2[_]]);
      return v2;
    }
    u2.merge = c, u2.lcFirst = function(S2) {
      return S2.charAt(0).toLowerCase() + S2.substring(1);
    };
    function l2(v2) {
      function S2(g2, E2) {
        if (!(this instanceof S2))
          return new S2(g2, E2);
        Object.defineProperty(this, "message", { get: function() {
          return g2;
        } }), Error.captureStackTrace ? Error.captureStackTrace(this, S2) : Object.defineProperty(this, "stack", { value: new Error().stack || "" }), E2 && c(this, E2);
      }
      return (S2.prototype = Object.create(Error.prototype)).constructor = S2, Object.defineProperty(S2.prototype, "name", { get: function() {
        return v2;
      } }), S2.prototype.toString = function() {
        return this.name + ": " + this.message;
      }, S2;
    }
    u2.newError = l2, u2.ProtocolError = l2("ProtocolError"), u2.oneOfGetter = function(S2) {
      for (var g2 = {}, E2 = 0; E2 < S2.length; ++E2)
        g2[S2[E2]] = 1;
      return function() {
        for (var _ = Object.keys(this), k = _.length - 1; k > -1; --k)
          if (g2[_[k]] === 1 && this[_[k]] !== void 0 && this[_[k]] !== null)
            return _[k];
      };
    }, u2.oneOfSetter = function(S2) {
      return function(g2) {
        for (var E2 = 0; E2 < S2.length; ++E2)
          S2[E2] !== g2 && delete this[S2[E2]];
      };
    }, u2.toJSONOptions = { longs: String, enums: String, bytes: String, json: true }, u2._configure = function() {
      var v2 = u2.Buffer;
      if (!v2) {
        u2._Buffer_from = u2._Buffer_allocUnsafe = null;
        return;
      }
      u2._Buffer_from = v2.from !== Uint8Array.from && v2.from || /* istanbul ignore next */
      function(g2, E2) {
        return new v2(g2, E2);
      }, u2._Buffer_allocUnsafe = v2.allocUnsafe || /* istanbul ignore next */
      function(g2) {
        return new v2(g2);
      };
    };
  }(minimal$1)), minimal$1;
}
var writer$2 = Writer$1, util$8 = requireMinimal(), BufferWriter$1, LongBits$1 = util$8.LongBits, base64 = util$8.base64, utf8$1 = util$8.utf8;
function Op(a92, u2, c) {
  this.fn = a92, this.len = u2, this.next = void 0, this.val = c;
}
function noop$2() {
}
function State(a92) {
  this.head = a92.head, this.tail = a92.tail, this.len = a92.len, this.next = a92.states;
}
function Writer$1() {
  this.len = 0, this.head = new Op(noop$2, 0, 0), this.tail = this.head, this.states = null;
}
var create$3 = function a3() {
  return util$8.Buffer ? function() {
    return (Writer$1.create = function() {
      return new BufferWriter$1();
    })();
  } : function() {
    return new Writer$1();
  };
};
Writer$1.create = create$3();
Writer$1.alloc = function a4(u2) {
  return new util$8.Array(u2);
};
util$8.Array !== Array && (Writer$1.alloc = util$8.pool(Writer$1.alloc, util$8.Array.prototype.subarray));
Writer$1.prototype._push = function a5(u2, c, l2) {
  return this.tail = this.tail.next = new Op(u2, c, l2), this.len += c, this;
};
function writeByte(a92, u2, c) {
  u2[c] = a92 & 255;
}
function writeVarint32(a92, u2, c) {
  for (; a92 > 127; )
    u2[c++] = a92 & 127 | 128, a92 >>>= 7;
  u2[c] = a92;
}
function VarintOp(a92, u2) {
  this.len = a92, this.next = void 0, this.val = u2;
}
VarintOp.prototype = Object.create(Op.prototype);
VarintOp.prototype.fn = writeVarint32;
Writer$1.prototype.uint32 = function a6(u2) {
  return this.len += (this.tail = this.tail.next = new VarintOp((u2 = u2 >>> 0) < 128 ? 1 : u2 < 16384 ? 2 : u2 < 2097152 ? 3 : u2 < 268435456 ? 4 : 5, u2)).len, this;
};
Writer$1.prototype.int32 = function a7(u2) {
  return u2 < 0 ? this._push(writeVarint64, 10, LongBits$1.fromNumber(u2)) : this.uint32(u2);
};
Writer$1.prototype.sint32 = function a8(u2) {
  return this.uint32((u2 << 1 ^ u2 >> 31) >>> 0);
};
function writeVarint64(a92, u2, c) {
  for (; a92.hi; )
    u2[c++] = a92.lo & 127 | 128, a92.lo = (a92.lo >>> 7 | a92.hi << 25) >>> 0, a92.hi >>>= 7;
  for (; a92.lo > 127; )
    u2[c++] = a92.lo & 127 | 128, a92.lo = a92.lo >>> 7;
  u2[c++] = a92.lo;
}
Writer$1.prototype.uint64 = function a9(u2) {
  var c = LongBits$1.from(u2);
  return this._push(writeVarint64, c.length(), c);
};
Writer$1.prototype.int64 = Writer$1.prototype.uint64;
Writer$1.prototype.sint64 = function a10(u2) {
  var c = LongBits$1.from(u2).zzEncode();
  return this._push(writeVarint64, c.length(), c);
};
Writer$1.prototype.bool = function a11(u2) {
  return this._push(writeByte, 1, u2 ? 1 : 0);
};
function writeFixed32(a92, u2, c) {
  u2[c] = a92 & 255, u2[c + 1] = a92 >>> 8 & 255, u2[c + 2] = a92 >>> 16 & 255, u2[c + 3] = a92 >>> 24;
}
Writer$1.prototype.fixed32 = function a12(u2) {
  return this._push(writeFixed32, 4, u2 >>> 0);
};
Writer$1.prototype.sfixed32 = Writer$1.prototype.fixed32;
Writer$1.prototype.fixed64 = function a13(u2) {
  var c = LongBits$1.from(u2);
  return this._push(writeFixed32, 4, c.lo)._push(writeFixed32, 4, c.hi);
};
Writer$1.prototype.sfixed64 = Writer$1.prototype.fixed64;
Writer$1.prototype.float = function a14(u2) {
  return this._push(util$8.float.writeFloatLE, 4, u2);
};
Writer$1.prototype.double = function a15(u2) {
  return this._push(util$8.float.writeDoubleLE, 8, u2);
};
var writeBytes = util$8.Array.prototype.set ? function a16(u2, c, l2) {
  c.set(u2, l2);
} : function a17(u2, c, l2) {
  for (var v2 = 0; v2 < u2.length; ++v2)
    c[l2 + v2] = u2[v2];
};
Writer$1.prototype.bytes = function a18(u2) {
  var c = u2.length >>> 0;
  if (!c)
    return this._push(writeByte, 1, 0);
  if (util$8.isString(u2)) {
    var l2 = Writer$1.alloc(c = base64.length(u2));
    base64.decode(u2, l2, 0), u2 = l2;
  }
  return this.uint32(c)._push(writeBytes, c, u2);
};
Writer$1.prototype.string = function a19(u2) {
  var c = utf8$1.length(u2);
  return c ? this.uint32(c)._push(utf8$1.write, c, u2) : this._push(writeByte, 1, 0);
};
Writer$1.prototype.fork = function a20() {
  return this.states = new State(this), this.head = this.tail = new Op(noop$2, 0, 0), this.len = 0, this;
};
Writer$1.prototype.reset = function a21() {
  return this.states ? (this.head = this.states.head, this.tail = this.states.tail, this.len = this.states.len, this.states = this.states.next) : (this.head = this.tail = new Op(noop$2, 0, 0), this.len = 0), this;
};
Writer$1.prototype.ldelim = function a22() {
  var u2 = this.head, c = this.tail, l2 = this.len;
  return this.reset().uint32(l2), l2 && (this.tail.next = u2.next, this.tail = c, this.len += l2), this;
};
Writer$1.prototype.finish = function a23() {
  for (var u2 = this.head.next, c = this.constructor.alloc(this.len), l2 = 0; u2; )
    u2.fn(u2.val, c, l2), l2 += u2.len, u2 = u2.next;
  return c;
};
Writer$1._configure = function(a92) {
  BufferWriter$1 = a92, Writer$1.create = create$3(), BufferWriter$1._configure();
};
var writer_buffer = BufferWriter, Writer = writer$2;
(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;
var util$7 = requireMinimal();
function BufferWriter() {
  Writer.call(this);
}
BufferWriter._configure = function() {
  BufferWriter.alloc = util$7._Buffer_allocUnsafe, BufferWriter.writeBytesBuffer = util$7.Buffer && util$7.Buffer.prototype instanceof Uint8Array && util$7.Buffer.prototype.set.name === "set" ? function(u2, c, l2) {
    c.set(u2, l2);
  } : function(u2, c, l2) {
    if (u2.copy)
      u2.copy(c, l2, 0, u2.length);
    else
      for (var v2 = 0; v2 < u2.length; )
        c[l2++] = u2[v2++];
  };
};
BufferWriter.prototype.bytes = function a24(u2) {
  util$7.isString(u2) && (u2 = util$7._Buffer_from(u2, "base64"));
  var c = u2.length >>> 0;
  return this.uint32(c), c && this._push(BufferWriter.writeBytesBuffer, c, u2), this;
};
function writeStringBuffer(a92, u2, c) {
  a92.length < 40 ? util$7.utf8.write(a92, u2, c) : u2.utf8Write ? u2.utf8Write(a92, c) : u2.write(a92, c);
}
BufferWriter.prototype.string = function a25(u2) {
  var c = util$7.Buffer.byteLength(u2);
  return this.uint32(c), c && this._push(writeStringBuffer, c, u2), this;
};
BufferWriter._configure();
var reader = Reader$1, util$6 = requireMinimal(), BufferReader$1, LongBits = util$6.LongBits, utf8 = util$6.utf8;
function indexOutOfRange(a92, u2) {
  return RangeError("index out of range: " + a92.pos + " + " + (u2 || 1) + " > " + a92.len);
}
function Reader$1(a92) {
  this.buf = a92, this.pos = 0, this.len = a92.length;
}
var create_array = typeof Uint8Array < "u" ? function a26(u2) {
  if (u2 instanceof Uint8Array || Array.isArray(u2))
    return new Reader$1(u2);
  throw Error("illegal buffer");
} : function a27(u2) {
  if (Array.isArray(u2))
    return new Reader$1(u2);
  throw Error("illegal buffer");
}, create$2 = function a28() {
  return util$6.Buffer ? function(c) {
    return (Reader$1.create = function(v2) {
      return util$6.Buffer.isBuffer(v2) ? new BufferReader$1(v2) : create_array(v2);
    })(c);
  } : create_array;
};
Reader$1.create = create$2();
Reader$1.prototype._slice = util$6.Array.prototype.subarray || /* istanbul ignore next */
util$6.Array.prototype.slice;
Reader$1.prototype.uint32 = /* @__PURE__ */ function a29() {
  var u2 = 4294967295;
  return function() {
    if (u2 = (this.buf[this.pos] & 127) >>> 0, this.buf[this.pos++] < 128 || (u2 = (u2 | (this.buf[this.pos] & 127) << 7) >>> 0, this.buf[this.pos++] < 128) || (u2 = (u2 | (this.buf[this.pos] & 127) << 14) >>> 0, this.buf[this.pos++] < 128) || (u2 = (u2 | (this.buf[this.pos] & 127) << 21) >>> 0, this.buf[this.pos++] < 128) || (u2 = (u2 | (this.buf[this.pos] & 15) << 28) >>> 0, this.buf[this.pos++] < 128))
      return u2;
    if ((this.pos += 5) > this.len)
      throw this.pos = this.len, indexOutOfRange(this, 10);
    return u2;
  };
}();
Reader$1.prototype.int32 = function a30() {
  return this.uint32() | 0;
};
Reader$1.prototype.sint32 = function a31() {
  var u2 = this.uint32();
  return u2 >>> 1 ^ -(u2 & 1) | 0;
};
function readLongVarint() {
  var a92 = new LongBits(0, 0), u2 = 0;
  if (this.len - this.pos > 4) {
    for (; u2 < 4; ++u2)
      if (a92.lo = (a92.lo | (this.buf[this.pos] & 127) << u2 * 7) >>> 0, this.buf[this.pos++] < 128)
        return a92;
    if (a92.lo = (a92.lo | (this.buf[this.pos] & 127) << 28) >>> 0, a92.hi = (a92.hi | (this.buf[this.pos] & 127) >> 4) >>> 0, this.buf[this.pos++] < 128)
      return a92;
    u2 = 0;
  } else {
    for (; u2 < 3; ++u2) {
      if (this.pos >= this.len)
        throw indexOutOfRange(this);
      if (a92.lo = (a92.lo | (this.buf[this.pos] & 127) << u2 * 7) >>> 0, this.buf[this.pos++] < 128)
        return a92;
    }
    return a92.lo = (a92.lo | (this.buf[this.pos++] & 127) << u2 * 7) >>> 0, a92;
  }
  if (this.len - this.pos > 4) {
    for (; u2 < 5; ++u2)
      if (a92.hi = (a92.hi | (this.buf[this.pos] & 127) << u2 * 7 + 3) >>> 0, this.buf[this.pos++] < 128)
        return a92;
  } else
    for (; u2 < 5; ++u2) {
      if (this.pos >= this.len)
        throw indexOutOfRange(this);
      if (a92.hi = (a92.hi | (this.buf[this.pos] & 127) << u2 * 7 + 3) >>> 0, this.buf[this.pos++] < 128)
        return a92;
    }
  throw Error("invalid varint encoding");
}
Reader$1.prototype.bool = function a32() {
  return this.uint32() !== 0;
};
function readFixed32_end(a92, u2) {
  return (a92[u2 - 4] | a92[u2 - 3] << 8 | a92[u2 - 2] << 16 | a92[u2 - 1] << 24) >>> 0;
}
Reader$1.prototype.fixed32 = function a33() {
  if (this.pos + 4 > this.len)
    throw indexOutOfRange(this, 4);
  return readFixed32_end(this.buf, this.pos += 4);
};
Reader$1.prototype.sfixed32 = function a34() {
  if (this.pos + 4 > this.len)
    throw indexOutOfRange(this, 4);
  return readFixed32_end(this.buf, this.pos += 4) | 0;
};
function readFixed64() {
  if (this.pos + 8 > this.len)
    throw indexOutOfRange(this, 8);
  return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
}
Reader$1.prototype.float = function a35() {
  if (this.pos + 4 > this.len)
    throw indexOutOfRange(this, 4);
  var u2 = util$6.float.readFloatLE(this.buf, this.pos);
  return this.pos += 4, u2;
};
Reader$1.prototype.double = function a36() {
  if (this.pos + 8 > this.len)
    throw indexOutOfRange(this, 4);
  var u2 = util$6.float.readDoubleLE(this.buf, this.pos);
  return this.pos += 8, u2;
};
Reader$1.prototype.bytes = function a37() {
  var u2 = this.uint32(), c = this.pos, l2 = this.pos + u2;
  if (l2 > this.len)
    throw indexOutOfRange(this, u2);
  return this.pos += u2, Array.isArray(this.buf) ? this.buf.slice(c, l2) : c === l2 ? new this.buf.constructor(0) : this._slice.call(this.buf, c, l2);
};
Reader$1.prototype.string = function a38() {
  var u2 = this.bytes();
  return utf8.read(u2, 0, u2.length);
};
Reader$1.prototype.skip = function a39(u2) {
  if (typeof u2 == "number") {
    if (this.pos + u2 > this.len)
      throw indexOutOfRange(this, u2);
    this.pos += u2;
  } else
    do
      if (this.pos >= this.len)
        throw indexOutOfRange(this);
    while (this.buf[this.pos++] & 128);
  return this;
};
Reader$1.prototype.skipType = function(a92) {
  switch (a92) {
    case 0:
      this.skip();
      break;
    case 1:
      this.skip(8);
      break;
    case 2:
      this.skip(this.uint32());
      break;
    case 3:
      for (; (a92 = this.uint32() & 7) !== 4; )
        this.skipType(a92);
      break;
    case 5:
      this.skip(4);
      break;
    default:
      throw Error("invalid wire type " + a92 + " at offset " + this.pos);
  }
  return this;
};
Reader$1._configure = function(a92) {
  BufferReader$1 = a92, Reader$1.create = create$2(), BufferReader$1._configure();
  var u2 = util$6.Long ? "toLong" : (
    /* istanbul ignore next */
    "toNumber"
  );
  util$6.merge(Reader$1.prototype, { int64: function() {
    return readLongVarint.call(this)[u2](false);
  }, uint64: function() {
    return readLongVarint.call(this)[u2](true);
  }, sint64: function() {
    return readLongVarint.call(this).zzDecode()[u2](false);
  }, fixed64: function() {
    return readFixed64.call(this)[u2](true);
  }, sfixed64: function() {
    return readFixed64.call(this)[u2](false);
  } });
};
var reader_buffer = BufferReader, Reader = reader;
(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;
var util$5 = requireMinimal();
function BufferReader(a92) {
  Reader.call(this, a92);
}
BufferReader._configure = function() {
  util$5.Buffer && (BufferReader.prototype._slice = util$5.Buffer.prototype.slice);
};
BufferReader.prototype.string = function a40() {
  var u2 = this.uint32();
  return this.buf.utf8Slice ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + u2, this.len)) : this.buf.toString("utf-8", this.pos, this.pos = Math.min(this.pos + u2, this.len));
};
BufferReader._configure();
var rpc = {}, service = Service, util$4 = requireMinimal();
(Service.prototype = Object.create(util$4.EventEmitter.prototype)).constructor = Service;
function Service(a92, u2, c) {
  if (typeof a92 != "function")
    throw TypeError("rpcImpl must be a function");
  util$4.EventEmitter.call(this), this.rpcImpl = a92, this.requestDelimited = !!u2, this.responseDelimited = !!c;
}
Service.prototype.rpcCall = function a41(u2, c, l2, v2, S2) {
  if (!v2)
    throw TypeError("request must be specified");
  var g2 = this;
  if (!S2)
    return util$4.asPromise(a41, g2, u2, c, l2, v2);
  if (!g2.rpcImpl) {
    setTimeout(function() {
      S2(Error("already ended"));
    }, 0);
    return;
  }
  try {
    return g2.rpcImpl(u2, c[g2.requestDelimited ? "encodeDelimited" : "encode"](v2).finish(), function(_, k) {
      if (_)
        return g2.emit("error", _, u2), S2(_);
      if (k === null) {
        g2.end(
          /* endedByRPC */
          true
        );
        return;
      }
      if (!(k instanceof l2))
        try {
          k = l2[g2.responseDelimited ? "decodeDelimited" : "decode"](k);
        } catch (L2) {
          return g2.emit("error", L2, u2), S2(L2);
        }
      return g2.emit("data", k, u2), S2(null, k);
    });
  } catch (E2) {
    g2.emit("error", E2, u2), setTimeout(function() {
      S2(E2);
    }, 0);
    return;
  }
};
Service.prototype.end = function a42(u2) {
  return this.rpcImpl && (u2 || this.rpcImpl(null, null, null), this.rpcImpl = null, this.emit("end").off()), this;
};
(function(a92) {
  var u2 = a92;
  u2.Service = service;
})(rpc);
var roots = {};
(function(a92) {
  var u2 = a92;
  u2.build = "minimal", u2.Writer = writer$2, u2.BufferWriter = writer_buffer, u2.Reader = reader, u2.BufferReader = reader_buffer, u2.util = requireMinimal(), u2.rpc = rpc, u2.roots = roots, u2.configure = c;
  function c() {
    u2.util._configure(), u2.Writer._configure(u2.BufferWriter), u2.Reader._configure(u2.BufferReader);
  }
  c();
})(indexMinimal);
var minimal = indexMinimal, struct$2 = {};
(function(a92) {
  var u2 = commonjsGlobal$1 && commonjsGlobal$1.__createBinding || (Object.create ? function(B2, Y2, ne2, Z2) {
    Z2 === void 0 && (Z2 = ne2), Object.defineProperty(B2, Z2, { enumerable: true, get: function() {
      return Y2[ne2];
    } });
  } : function(B2, Y2, ne2, Z2) {
    Z2 === void 0 && (Z2 = ne2), B2[Z2] = Y2[ne2];
  }), c = commonjsGlobal$1 && commonjsGlobal$1.__setModuleDefault || (Object.create ? function(B2, Y2) {
    Object.defineProperty(B2, "default", { enumerable: true, value: Y2 });
  } : function(B2, Y2) {
    B2.default = Y2;
  }), l2 = commonjsGlobal$1 && commonjsGlobal$1.__importStar || function(B2) {
    if (B2 && B2.__esModule)
      return B2;
    var Y2 = {};
    if (B2 != null)
      for (var ne2 in B2)
        ne2 !== "default" && Object.hasOwnProperty.call(B2, ne2) && u2(Y2, B2, ne2);
    return c(Y2, B2), Y2;
  }, v2 = commonjsGlobal$1 && commonjsGlobal$1.__importDefault || function(B2) {
    return B2 && B2.__esModule ? B2 : { default: B2 };
  };
  Object.defineProperty(a92, "__esModule", { value: true }), a92.ListValue = a92.Value = a92.Struct_FieldsEntry = a92.Struct = a92.nullValueToNumber = a92.nullValueToJSON = a92.nullValueFromJSON = a92.NullValue = a92.protobufPackage = void 0;
  const S2 = v2(umdExports), g2 = l2(minimal);
  a92.protobufPackage = "google.protobuf";
  var E2;
  (function(B2) {
    B2.NULL_VALUE = "NULL_VALUE";
  })(E2 = a92.NullValue || (a92.NullValue = {}));
  function _(B2) {
    switch (B2) {
      case 0:
      case "NULL_VALUE":
        return E2.NULL_VALUE;
      default:
        throw new q2.Error("Unrecognized enum value " + B2 + " for enum NullValue");
    }
  }
  a92.nullValueFromJSON = _;
  function k(B2) {
    switch (B2) {
      case E2.NULL_VALUE:
        return "NULL_VALUE";
      default:
        return "UNKNOWN";
    }
  }
  a92.nullValueToJSON = k;
  function L2(B2) {
    switch (B2) {
      case E2.NULL_VALUE:
        return 0;
      default:
        return 0;
    }
  }
  a92.nullValueToNumber = L2;
  function M2() {
    return { fields: {} };
  }
  a92.Struct = { encode(B2, Y2 = g2.Writer.create()) {
    return Object.entries(B2.fields).forEach(([ne2, Z2]) => {
      Z2 !== void 0 && a92.Struct_FieldsEntry.encode({ key: ne2, value: Z2 }, Y2.uint32(10).fork()).ldelim();
    }), Y2;
  }, decode(B2, Y2) {
    const ne2 = B2 instanceof g2.Reader ? B2 : new g2.Reader(B2);
    let Z2 = Y2 === void 0 ? ne2.len : ne2.pos + Y2;
    const re2 = M2();
    for (; ne2.pos < Z2; ) {
      const oe2 = ne2.uint32();
      switch (oe2 >>> 3) {
        case 1:
          const de2 = a92.Struct_FieldsEntry.decode(ne2, ne2.uint32());
          de2.value !== void 0 && (re2.fields[de2.key] = de2.value);
          break;
        default:
          ne2.skipType(oe2 & 7);
          break;
      }
    }
    return re2;
  }, fromJSON(B2) {
    return { fields: G2(B2.fields) ? Object.entries(B2.fields).reduce((Y2, [ne2, Z2]) => (Y2[ne2] = Z2, Y2), {}) : {} };
  }, toJSON(B2) {
    const Y2 = {};
    return Y2.fields = {}, B2.fields && Object.entries(B2.fields).forEach(([ne2, Z2]) => {
      Y2.fields[ne2] = Z2;
    }), Y2;
  }, fromPartial(B2) {
    var Y2;
    const ne2 = M2();
    return ne2.fields = Object.entries((Y2 = B2.fields) !== null && Y2 !== void 0 ? Y2 : {}).reduce((Z2, [re2, oe2]) => (oe2 !== void 0 && (Z2[re2] = oe2), Z2), {}), ne2;
  }, wrap(B2) {
    const Y2 = M2();
    return B2 !== void 0 && Object.keys(B2).forEach((ne2) => {
      Y2.fields[ne2] = B2[ne2];
    }), Y2;
  }, unwrap(B2) {
    const Y2 = {};
    return Object.keys(B2.fields).forEach((ne2) => {
      Y2[ne2] = B2.fields[ne2];
    }), Y2;
  } };
  function $() {
    return { key: "", value: void 0 };
  }
  a92.Struct_FieldsEntry = { encode(B2, Y2 = g2.Writer.create()) {
    return B2.key !== "" && Y2.uint32(10).string(B2.key), B2.value !== void 0 && a92.Value.encode(a92.Value.wrap(B2.value), Y2.uint32(18).fork()).ldelim(), Y2;
  }, decode(B2, Y2) {
    const ne2 = B2 instanceof g2.Reader ? B2 : new g2.Reader(B2);
    let Z2 = Y2 === void 0 ? ne2.len : ne2.pos + Y2;
    const re2 = $();
    for (; ne2.pos < Z2; ) {
      const oe2 = ne2.uint32();
      switch (oe2 >>> 3) {
        case 1:
          re2.key = ne2.string();
          break;
        case 2:
          re2.value = a92.Value.unwrap(a92.Value.decode(ne2, ne2.uint32()));
          break;
        default:
          ne2.skipType(oe2 & 7);
          break;
      }
    }
    return re2;
  }, fromJSON(B2) {
    return { key: H2(B2.key) ? String(B2.key) : "", value: H2(B2 == null ? void 0 : B2.value) ? B2.value : void 0 };
  }, toJSON(B2) {
    const Y2 = {};
    return B2.key !== void 0 && (Y2.key = B2.key), B2.value !== void 0 && (Y2.value = B2.value), Y2;
  }, fromPartial(B2) {
    var Y2, ne2;
    const Z2 = $();
    return Z2.key = (Y2 = B2.key) !== null && Y2 !== void 0 ? Y2 : "", Z2.value = (ne2 = B2.value) !== null && ne2 !== void 0 ? ne2 : void 0, Z2;
  } };
  function J2() {
    return { nullValue: void 0, numberValue: void 0, stringValue: void 0, boolValue: void 0, structValue: void 0, listValue: void 0 };
  }
  a92.Value = { encode(B2, Y2 = g2.Writer.create()) {
    return B2.nullValue !== void 0 && Y2.uint32(8).int32(L2(B2.nullValue)), B2.numberValue !== void 0 && Y2.uint32(17).double(B2.numberValue), B2.stringValue !== void 0 && Y2.uint32(26).string(B2.stringValue), B2.boolValue !== void 0 && Y2.uint32(32).bool(B2.boolValue), B2.structValue !== void 0 && a92.Struct.encode(a92.Struct.wrap(B2.structValue), Y2.uint32(42).fork()).ldelim(), B2.listValue !== void 0 && a92.ListValue.encode(a92.ListValue.wrap(B2.listValue), Y2.uint32(50).fork()).ldelim(), Y2;
  }, decode(B2, Y2) {
    const ne2 = B2 instanceof g2.Reader ? B2 : new g2.Reader(B2);
    let Z2 = Y2 === void 0 ? ne2.len : ne2.pos + Y2;
    const re2 = J2();
    for (; ne2.pos < Z2; ) {
      const oe2 = ne2.uint32();
      switch (oe2 >>> 3) {
        case 1:
          re2.nullValue = _(ne2.int32());
          break;
        case 2:
          re2.numberValue = ne2.double();
          break;
        case 3:
          re2.stringValue = ne2.string();
          break;
        case 4:
          re2.boolValue = ne2.bool();
          break;
        case 5:
          re2.structValue = a92.Struct.unwrap(a92.Struct.decode(ne2, ne2.uint32()));
          break;
        case 6:
          re2.listValue = a92.ListValue.unwrap(a92.ListValue.decode(ne2, ne2.uint32()));
          break;
        default:
          ne2.skipType(oe2 & 7);
          break;
      }
    }
    return re2;
  }, fromJSON(B2) {
    return { nullValue: H2(B2.nullValue) ? _(B2.nullValue) : void 0, numberValue: H2(B2.numberValue) ? Number(B2.numberValue) : void 0, stringValue: H2(B2.stringValue) ? String(B2.stringValue) : void 0, boolValue: H2(B2.boolValue) ? !!B2.boolValue : void 0, structValue: G2(B2.structValue) ? B2.structValue : void 0, listValue: Array.isArray(B2.listValue) ? [...B2.listValue] : void 0 };
  }, toJSON(B2) {
    const Y2 = {};
    return B2.nullValue !== void 0 && (Y2.nullValue = B2.nullValue !== void 0 ? k(B2.nullValue) : void 0), B2.numberValue !== void 0 && (Y2.numberValue = B2.numberValue), B2.stringValue !== void 0 && (Y2.stringValue = B2.stringValue), B2.boolValue !== void 0 && (Y2.boolValue = B2.boolValue), B2.structValue !== void 0 && (Y2.structValue = B2.structValue), B2.listValue !== void 0 && (Y2.listValue = B2.listValue), Y2;
  }, fromPartial(B2) {
    var Y2, ne2, Z2, re2, oe2, de2;
    const A2 = J2();
    return A2.nullValue = (Y2 = B2.nullValue) !== null && Y2 !== void 0 ? Y2 : void 0, A2.numberValue = (ne2 = B2.numberValue) !== null && ne2 !== void 0 ? ne2 : void 0, A2.stringValue = (Z2 = B2.stringValue) !== null && Z2 !== void 0 ? Z2 : void 0, A2.boolValue = (re2 = B2.boolValue) !== null && re2 !== void 0 ? re2 : void 0, A2.structValue = (oe2 = B2.structValue) !== null && oe2 !== void 0 ? oe2 : void 0, A2.listValue = (de2 = B2.listValue) !== null && de2 !== void 0 ? de2 : void 0, A2;
  }, wrap(B2) {
    const Y2 = J2();
    if (B2 === null)
      Y2.nullValue = E2.NULL_VALUE;
    else if (typeof B2 == "boolean")
      Y2.boolValue = B2;
    else if (typeof B2 == "number")
      Y2.numberValue = B2;
    else if (typeof B2 == "string")
      Y2.stringValue = B2;
    else if (Array.isArray(B2))
      Y2.listValue = B2;
    else if (typeof B2 == "object")
      Y2.structValue = B2;
    else if (typeof B2 < "u")
      throw new Error("Unsupported any value type: " + typeof B2);
    return Y2;
  }, unwrap(B2) {
    if ((B2 == null ? void 0 : B2.stringValue) !== void 0)
      return B2.stringValue;
    if ((B2 == null ? void 0 : B2.numberValue) !== void 0)
      return B2.numberValue;
    if ((B2 == null ? void 0 : B2.boolValue) !== void 0)
      return B2.boolValue;
    if ((B2 == null ? void 0 : B2.structValue) !== void 0)
      return B2.structValue;
    if ((B2 == null ? void 0 : B2.listValue) !== void 0)
      return B2.listValue;
    if ((B2 == null ? void 0 : B2.nullValue) !== void 0)
      return null;
  } };
  function V2() {
    return { values: [] };
  }
  a92.ListValue = { encode(B2, Y2 = g2.Writer.create()) {
    for (const ne2 of B2.values)
      a92.Value.encode(a92.Value.wrap(ne2), Y2.uint32(10).fork()).ldelim();
    return Y2;
  }, decode(B2, Y2) {
    const ne2 = B2 instanceof g2.Reader ? B2 : new g2.Reader(B2);
    let Z2 = Y2 === void 0 ? ne2.len : ne2.pos + Y2;
    const re2 = V2();
    for (; ne2.pos < Z2; ) {
      const oe2 = ne2.uint32();
      switch (oe2 >>> 3) {
        case 1:
          re2.values.push(a92.Value.unwrap(a92.Value.decode(ne2, ne2.uint32())));
          break;
        default:
          ne2.skipType(oe2 & 7);
          break;
      }
    }
    return re2;
  }, fromJSON(B2) {
    return { values: Array.isArray(B2 == null ? void 0 : B2.values) ? [...B2.values] : [] };
  }, toJSON(B2) {
    const Y2 = {};
    return B2.values ? Y2.values = B2.values.map((ne2) => ne2) : Y2.values = [], Y2;
  }, fromPartial(B2) {
    var Y2;
    const ne2 = V2();
    return ne2.values = ((Y2 = B2.values) === null || Y2 === void 0 ? void 0 : Y2.map((Z2) => Z2)) || [], ne2;
  }, wrap(B2) {
    const Y2 = V2();
    return Y2.values = B2 ?? [], Y2;
  }, unwrap(B2) {
    return B2.values;
  } };
  var q2 = (() => {
    if (typeof q2 < "u")
      return q2;
    if (typeof self < "u")
      return self;
    if (typeof window < "u")
      return window;
    if (typeof commonjsGlobal$1 < "u")
      return commonjsGlobal$1;
    throw "Unable to locate global object";
  })();
  g2.util.Long !== S2.default && (g2.util.Long = S2.default, g2.configure());
  function G2(B2) {
    return typeof B2 == "object" && B2 !== null;
  }
  function H2(B2) {
    return B2 != null;
  }
})(struct$2);
(function(a92) {
  var u2 = commonjsGlobal$1 && commonjsGlobal$1.__createBinding || (Object.create ? function(I2, F2, z2, Te2) {
    Te2 === void 0 && (Te2 = z2), Object.defineProperty(I2, Te2, { enumerable: true, get: function() {
      return F2[z2];
    } });
  } : function(I2, F2, z2, Te2) {
    Te2 === void 0 && (Te2 = z2), I2[Te2] = F2[z2];
  }), c = commonjsGlobal$1 && commonjsGlobal$1.__setModuleDefault || (Object.create ? function(I2, F2) {
    Object.defineProperty(I2, "default", { enumerable: true, value: F2 });
  } : function(I2, F2) {
    I2.default = F2;
  }), l2 = commonjsGlobal$1 && commonjsGlobal$1.__importStar || function(I2) {
    if (I2 && I2.__esModule)
      return I2;
    var F2 = {};
    if (I2 != null)
      for (var z2 in I2)
        z2 !== "default" && Object.hasOwnProperty.call(I2, z2) && u2(F2, I2, z2);
    return c(F2, I2), F2;
  }, v2 = commonjsGlobal$1 && commonjsGlobal$1.__importDefault || function(I2) {
    return I2 && I2.__esModule ? I2 : { default: I2 };
  };
  Object.defineProperty(a92, "__esModule", { value: true }), a92.LayoutServiceDefinition = a92.LayoutServiceClientImpl = a92.LayerServiceDefinition = a92.LayerServiceClientImpl = a92.Event = a92.LayerEvent = a92.LayoutEvent = a92.BatchLayerRequest_BatchItem = a92.BatchLayerRequest = a92.BatchDeleteLayerRequest = a92.DeleteLayerPayload = a92.UpdateLayerRequest = a92.GetLayerRequest = a92.CreateLayerRequest = a92.ListLayersResponse = a92.ListLayersRequest = a92.PartialLayerWithID = a92.PartialLayer = a92.LayerAnimation = a92.DeleteLayoutResponse = a92.DeleteLayoutRequest = a92.DeleteLayoutPayload = a92.UpdateLayoutRequest = a92.GetLayoutRequest = a92.CreateLayoutRequest = a92.ListLayoutsResponse = a92.ListLayoutsRequest = a92.PartialLayout = a92.BatchLayerResponse_BatchLayerItem = a92.BatchLayerResponse = a92.DeleteLayerResponse = a92.DeleteLayerRequest = a92.Layer = a92.Layout = a92.Transition_TransitionStinger = a92.Transition_TransitionStingerCut = a92.Transition_TransitionSwipe = a92.Transition_TransitionCrossfade = a92.Transition_TransitionFadeToColor = a92.Transition_TransitionCut = a92.Transition_TransitionMediaType = a92.Transition = a92.transition_TransitionSwipeTypeToNumber = a92.transition_TransitionSwipeTypeToJSON = a92.transition_TransitionSwipeTypeFromJSON = a92.Transition_TransitionSwipeType = a92.transition_TransitionDirectionToNumber = a92.transition_TransitionDirectionToJSON = a92.transition_TransitionDirectionFromJSON = a92.Transition_TransitionDirection = a92.eventTypeToNumber = a92.eventTypeToJSON = a92.eventTypeFromJSON = a92.EventType = a92.eventSubTypeToNumber = a92.eventSubTypeToJSON = a92.eventSubTypeFromJSON = a92.EventSubType = a92.requestAnimationModeToNumber = a92.requestAnimationModeToJSON = a92.requestAnimationModeFromJSON = a92.RequestAnimationMode = a92.layoutTypeToNumber = a92.layoutTypeToJSON = a92.layoutTypeFromJSON = a92.LayoutType = a92.protobufPackage = void 0;
  const S2 = v2(umdExports), g2 = l2(minimal), E2 = struct$2;
  a92.protobufPackage = "apis.layout.v2";
  var _;
  (function(I2) {
    I2.LAYOUT_TYPE_UNSPECIFIED = "LAYOUT_TYPE_UNSPECIFIED", I2.LAYOUT_TYPE_SCENELESS = "LAYOUT_TYPE_SCENELESS", I2.LAYOUT_TYPE_SCENE = "LAYOUT_TYPE_SCENE";
  })(_ = a92.LayoutType || (a92.LayoutType = {}));
  function k(I2) {
    switch (I2) {
      case 0:
      case "LAYOUT_TYPE_UNSPECIFIED":
        return _.LAYOUT_TYPE_UNSPECIFIED;
      case 1:
      case "LAYOUT_TYPE_SCENELESS":
        return _.LAYOUT_TYPE_SCENELESS;
      case 2:
      case "LAYOUT_TYPE_SCENE":
        return _.LAYOUT_TYPE_SCENE;
      default:
        throw new ot.Error("Unrecognized enum value " + I2 + " for enum LayoutType");
    }
  }
  a92.layoutTypeFromJSON = k;
  function L2(I2) {
    switch (I2) {
      case _.LAYOUT_TYPE_UNSPECIFIED:
        return "LAYOUT_TYPE_UNSPECIFIED";
      case _.LAYOUT_TYPE_SCENELESS:
        return "LAYOUT_TYPE_SCENELESS";
      case _.LAYOUT_TYPE_SCENE:
        return "LAYOUT_TYPE_SCENE";
      default:
        return "UNKNOWN";
    }
  }
  a92.layoutTypeToJSON = L2;
  function M2(I2) {
    switch (I2) {
      case _.LAYOUT_TYPE_UNSPECIFIED:
        return 0;
      case _.LAYOUT_TYPE_SCENELESS:
        return 1;
      case _.LAYOUT_TYPE_SCENE:
        return 2;
      default:
        return 0;
    }
  }
  a92.layoutTypeToNumber = M2;
  var $;
  (function(I2) {
    I2.REQUEST_ANIMATION_MODE_UNSPECIFIED = "REQUEST_ANIMATION_MODE_UNSPECIFIED", I2.REQUEST_ANIMATION_MODE_PARALLEL = "REQUEST_ANIMATION_MODE_PARALLEL", I2.REQUEST_ANIMATION_MODE_SERIES = "REQUEST_ANIMATION_MODE_SERIES";
  })($ = a92.RequestAnimationMode || (a92.RequestAnimationMode = {}));
  function J2(I2) {
    switch (I2) {
      case 0:
      case "REQUEST_ANIMATION_MODE_UNSPECIFIED":
        return $.REQUEST_ANIMATION_MODE_UNSPECIFIED;
      case 1:
      case "REQUEST_ANIMATION_MODE_PARALLEL":
        return $.REQUEST_ANIMATION_MODE_PARALLEL;
      case 2:
      case "REQUEST_ANIMATION_MODE_SERIES":
        return $.REQUEST_ANIMATION_MODE_SERIES;
      default:
        throw new ot.Error("Unrecognized enum value " + I2 + " for enum RequestAnimationMode");
    }
  }
  a92.requestAnimationModeFromJSON = J2;
  function V2(I2) {
    switch (I2) {
      case $.REQUEST_ANIMATION_MODE_UNSPECIFIED:
        return "REQUEST_ANIMATION_MODE_UNSPECIFIED";
      case $.REQUEST_ANIMATION_MODE_PARALLEL:
        return "REQUEST_ANIMATION_MODE_PARALLEL";
      case $.REQUEST_ANIMATION_MODE_SERIES:
        return "REQUEST_ANIMATION_MODE_SERIES";
      default:
        return "UNKNOWN";
    }
  }
  a92.requestAnimationModeToJSON = V2;
  function q2(I2) {
    switch (I2) {
      case $.REQUEST_ANIMATION_MODE_UNSPECIFIED:
        return 0;
      case $.REQUEST_ANIMATION_MODE_PARALLEL:
        return 1;
      case $.REQUEST_ANIMATION_MODE_SERIES:
        return 2;
      default:
        return 0;
    }
  }
  a92.requestAnimationModeToNumber = q2;
  var G2;
  (function(I2) {
    I2.EVENT_SUB_TYPE_UNSPECIFIED = "EVENT_SUB_TYPE_UNSPECIFIED", I2.EVENT_SUB_TYPE_CREATE = "EVENT_SUB_TYPE_CREATE", I2.EVENT_SUB_TYPE_UPDATE = "EVENT_SUB_TYPE_UPDATE", I2.EVENT_SUB_TYPE_DELETE = "EVENT_SUB_TYPE_DELETE", I2.EVENT_SUB_TYPE_BATCH = "EVENT_SUB_TYPE_BATCH";
  })(G2 = a92.EventSubType || (a92.EventSubType = {}));
  function H2(I2) {
    switch (I2) {
      case 0:
      case "EVENT_SUB_TYPE_UNSPECIFIED":
        return G2.EVENT_SUB_TYPE_UNSPECIFIED;
      case 1:
      case "EVENT_SUB_TYPE_CREATE":
        return G2.EVENT_SUB_TYPE_CREATE;
      case 2:
      case "EVENT_SUB_TYPE_UPDATE":
        return G2.EVENT_SUB_TYPE_UPDATE;
      case 3:
      case "EVENT_SUB_TYPE_DELETE":
        return G2.EVENT_SUB_TYPE_DELETE;
      case 4:
      case "EVENT_SUB_TYPE_BATCH":
        return G2.EVENT_SUB_TYPE_BATCH;
      default:
        throw new ot.Error("Unrecognized enum value " + I2 + " for enum EventSubType");
    }
  }
  a92.eventSubTypeFromJSON = H2;
  function B2(I2) {
    switch (I2) {
      case G2.EVENT_SUB_TYPE_UNSPECIFIED:
        return "EVENT_SUB_TYPE_UNSPECIFIED";
      case G2.EVENT_SUB_TYPE_CREATE:
        return "EVENT_SUB_TYPE_CREATE";
      case G2.EVENT_SUB_TYPE_UPDATE:
        return "EVENT_SUB_TYPE_UPDATE";
      case G2.EVENT_SUB_TYPE_DELETE:
        return "EVENT_SUB_TYPE_DELETE";
      case G2.EVENT_SUB_TYPE_BATCH:
        return "EVENT_SUB_TYPE_BATCH";
      default:
        return "UNKNOWN";
    }
  }
  a92.eventSubTypeToJSON = B2;
  function Y2(I2) {
    switch (I2) {
      case G2.EVENT_SUB_TYPE_UNSPECIFIED:
        return 0;
      case G2.EVENT_SUB_TYPE_CREATE:
        return 1;
      case G2.EVENT_SUB_TYPE_UPDATE:
        return 2;
      case G2.EVENT_SUB_TYPE_DELETE:
        return 3;
      case G2.EVENT_SUB_TYPE_BATCH:
        return 4;
      default:
        return 0;
    }
  }
  a92.eventSubTypeToNumber = Y2;
  var ne2;
  (function(I2) {
    I2.EVENT_TYPE_UNSPECIFIED = "EVENT_TYPE_UNSPECIFIED", I2.EVENT_TYPE_LAYOUT = "EVENT_TYPE_LAYOUT", I2.EVENT_TYPE_LAYER = "EVENT_TYPE_LAYER";
  })(ne2 = a92.EventType || (a92.EventType = {}));
  function Z2(I2) {
    switch (I2) {
      case 0:
      case "EVENT_TYPE_UNSPECIFIED":
        return ne2.EVENT_TYPE_UNSPECIFIED;
      case 1:
      case "EVENT_TYPE_LAYOUT":
        return ne2.EVENT_TYPE_LAYOUT;
      case 2:
      case "EVENT_TYPE_LAYER":
        return ne2.EVENT_TYPE_LAYER;
      default:
        throw new ot.Error("Unrecognized enum value " + I2 + " for enum EventType");
    }
  }
  a92.eventTypeFromJSON = Z2;
  function re2(I2) {
    switch (I2) {
      case ne2.EVENT_TYPE_UNSPECIFIED:
        return "EVENT_TYPE_UNSPECIFIED";
      case ne2.EVENT_TYPE_LAYOUT:
        return "EVENT_TYPE_LAYOUT";
      case ne2.EVENT_TYPE_LAYER:
        return "EVENT_TYPE_LAYER";
      default:
        return "UNKNOWN";
    }
  }
  a92.eventTypeToJSON = re2;
  function oe2(I2) {
    switch (I2) {
      case ne2.EVENT_TYPE_UNSPECIFIED:
        return 0;
      case ne2.EVENT_TYPE_LAYOUT:
        return 1;
      case ne2.EVENT_TYPE_LAYER:
        return 2;
      default:
        return 0;
    }
  }
  a92.eventTypeToNumber = oe2;
  var de2;
  (function(I2) {
    I2.TRANSITION_DIRECTION_UNSPECIFIED = "TRANSITION_DIRECTION_UNSPECIFIED", I2.TRANSITION_DIRECTION_LEFT = "TRANSITION_DIRECTION_LEFT", I2.TRANSITION_DIRECTION_RIGHT = "TRANSITION_DIRECTION_RIGHT", I2.TRANSITION_DIRECTION_UP = "TRANSITION_DIRECTION_UP", I2.TRANSITION_DIRECTION_DOWN = "TRANSITION_DIRECTION_DOWN";
  })(de2 = a92.Transition_TransitionDirection || (a92.Transition_TransitionDirection = {}));
  function A2(I2) {
    switch (I2) {
      case 0:
      case "TRANSITION_DIRECTION_UNSPECIFIED":
        return de2.TRANSITION_DIRECTION_UNSPECIFIED;
      case 1:
      case "TRANSITION_DIRECTION_LEFT":
        return de2.TRANSITION_DIRECTION_LEFT;
      case 2:
      case "TRANSITION_DIRECTION_RIGHT":
        return de2.TRANSITION_DIRECTION_RIGHT;
      case 3:
      case "TRANSITION_DIRECTION_UP":
        return de2.TRANSITION_DIRECTION_UP;
      case 4:
      case "TRANSITION_DIRECTION_DOWN":
        return de2.TRANSITION_DIRECTION_DOWN;
      default:
        throw new ot.Error("Unrecognized enum value " + I2 + " for enum Transition_TransitionDirection");
    }
  }
  a92.transition_TransitionDirectionFromJSON = A2;
  function N2(I2) {
    switch (I2) {
      case de2.TRANSITION_DIRECTION_UNSPECIFIED:
        return "TRANSITION_DIRECTION_UNSPECIFIED";
      case de2.TRANSITION_DIRECTION_LEFT:
        return "TRANSITION_DIRECTION_LEFT";
      case de2.TRANSITION_DIRECTION_RIGHT:
        return "TRANSITION_DIRECTION_RIGHT";
      case de2.TRANSITION_DIRECTION_UP:
        return "TRANSITION_DIRECTION_UP";
      case de2.TRANSITION_DIRECTION_DOWN:
        return "TRANSITION_DIRECTION_DOWN";
      default:
        return "UNKNOWN";
    }
  }
  a92.transition_TransitionDirectionToJSON = N2;
  function D2(I2) {
    switch (I2) {
      case de2.TRANSITION_DIRECTION_UNSPECIFIED:
        return 0;
      case de2.TRANSITION_DIRECTION_LEFT:
        return 1;
      case de2.TRANSITION_DIRECTION_RIGHT:
        return 2;
      case de2.TRANSITION_DIRECTION_UP:
        return 3;
      case de2.TRANSITION_DIRECTION_DOWN:
        return 4;
      default:
        return 0;
    }
  }
  a92.transition_TransitionDirectionToNumber = D2;
  var W2;
  (function(I2) {
    I2.TRANSITION_SWIPE_TYPE_UNSPECIFIED = "TRANSITION_SWIPE_TYPE_UNSPECIFIED", I2.TRANSITION_SWIPE_TYPE_COMBINED = "TRANSITION_SWIPE_TYPE_COMBINED", I2.TRANSITION_SWIPE_TYPE_SOURCE = "TRANSITION_SWIPE_TYPE_SOURCE", I2.TRANSITION_SWIPE_TYPE_DESTINATION = "TRANSITION_SWIPE_TYPE_DESTINATION";
  })(W2 = a92.Transition_TransitionSwipeType || (a92.Transition_TransitionSwipeType = {}));
  function ee2(I2) {
    switch (I2) {
      case 0:
      case "TRANSITION_SWIPE_TYPE_UNSPECIFIED":
        return W2.TRANSITION_SWIPE_TYPE_UNSPECIFIED;
      case 1:
      case "TRANSITION_SWIPE_TYPE_COMBINED":
        return W2.TRANSITION_SWIPE_TYPE_COMBINED;
      case 2:
      case "TRANSITION_SWIPE_TYPE_SOURCE":
        return W2.TRANSITION_SWIPE_TYPE_SOURCE;
      case 3:
      case "TRANSITION_SWIPE_TYPE_DESTINATION":
        return W2.TRANSITION_SWIPE_TYPE_DESTINATION;
      default:
        throw new ot.Error("Unrecognized enum value " + I2 + " for enum Transition_TransitionSwipeType");
    }
  }
  a92.transition_TransitionSwipeTypeFromJSON = ee2;
  function ae2(I2) {
    switch (I2) {
      case W2.TRANSITION_SWIPE_TYPE_UNSPECIFIED:
        return "TRANSITION_SWIPE_TYPE_UNSPECIFIED";
      case W2.TRANSITION_SWIPE_TYPE_COMBINED:
        return "TRANSITION_SWIPE_TYPE_COMBINED";
      case W2.TRANSITION_SWIPE_TYPE_SOURCE:
        return "TRANSITION_SWIPE_TYPE_SOURCE";
      case W2.TRANSITION_SWIPE_TYPE_DESTINATION:
        return "TRANSITION_SWIPE_TYPE_DESTINATION";
      default:
        return "UNKNOWN";
    }
  }
  a92.transition_TransitionSwipeTypeToJSON = ae2;
  function ye2(I2) {
    switch (I2) {
      case W2.TRANSITION_SWIPE_TYPE_UNSPECIFIED:
        return 0;
      case W2.TRANSITION_SWIPE_TYPE_COMBINED:
        return 1;
      case W2.TRANSITION_SWIPE_TYPE_SOURCE:
        return 2;
      case W2.TRANSITION_SWIPE_TYPE_DESTINATION:
        return 3;
      default:
        return 0;
    }
  }
  a92.transition_TransitionSwipeTypeToNumber = ye2;
  function he2() {
    return { fromLayoutIds: [], cut: void 0, crossfade: void 0, fadeToColor: void 0, swipe: void 0, stinger: void 0 };
  }
  a92.Transition = { encode(I2, F2 = g2.Writer.create()) {
    for (const z2 of I2.fromLayoutIds)
      F2.uint32(10).string(z2);
    return I2.cut !== void 0 && a92.Transition_TransitionCut.encode(I2.cut, F2.uint32(82).fork()).ldelim(), I2.crossfade !== void 0 && a92.Transition_TransitionCrossfade.encode(I2.crossfade, F2.uint32(90).fork()).ldelim(), I2.fadeToColor !== void 0 && a92.Transition_TransitionFadeToColor.encode(I2.fadeToColor, F2.uint32(98).fork()).ldelim(), I2.swipe !== void 0 && a92.Transition_TransitionSwipe.encode(I2.swipe, F2.uint32(106).fork()).ldelim(), I2.stinger !== void 0 && a92.Transition_TransitionStinger.encode(I2.stinger, F2.uint32(114).fork()).ldelim(), F2;
  }, decode(I2, F2) {
    const z2 = I2 instanceof g2.Reader ? I2 : new g2.Reader(I2);
    let Te2 = F2 === void 0 ? z2.len : z2.pos + F2;
    const fe2 = he2();
    for (; z2.pos < Te2; ) {
      const ke2 = z2.uint32();
      switch (ke2 >>> 3) {
        case 1:
          fe2.fromLayoutIds.push(z2.string());
          break;
        case 10:
          fe2.cut = a92.Transition_TransitionCut.decode(z2, z2.uint32());
          break;
        case 11:
          fe2.crossfade = a92.Transition_TransitionCrossfade.decode(z2, z2.uint32());
          break;
        case 12:
          fe2.fadeToColor = a92.Transition_TransitionFadeToColor.decode(z2, z2.uint32());
          break;
        case 13:
          fe2.swipe = a92.Transition_TransitionSwipe.decode(z2, z2.uint32());
          break;
        case 14:
          fe2.stinger = a92.Transition_TransitionStinger.decode(z2, z2.uint32());
          break;
        default:
          z2.skipType(ke2 & 7);
          break;
      }
    }
    return fe2;
  }, fromJSON(I2) {
    return { fromLayoutIds: Array.isArray(I2 == null ? void 0 : I2.fromLayoutIds) ? I2.fromLayoutIds.map((F2) => String(F2)) : [], cut: Ce2(I2.cut) ? a92.Transition_TransitionCut.fromJSON(I2.cut) : void 0, crossfade: Ce2(I2.crossfade) ? a92.Transition_TransitionCrossfade.fromJSON(I2.crossfade) : void 0, fadeToColor: Ce2(I2.fadeToColor) ? a92.Transition_TransitionFadeToColor.fromJSON(I2.fadeToColor) : void 0, swipe: Ce2(I2.swipe) ? a92.Transition_TransitionSwipe.fromJSON(I2.swipe) : void 0, stinger: Ce2(I2.stinger) ? a92.Transition_TransitionStinger.fromJSON(I2.stinger) : void 0 };
  }, toJSON(I2) {
    const F2 = {};
    return I2.fromLayoutIds ? F2.fromLayoutIds = I2.fromLayoutIds.map((z2) => z2) : F2.fromLayoutIds = [], I2.cut !== void 0 && (F2.cut = I2.cut ? a92.Transition_TransitionCut.toJSON(I2.cut) : void 0), I2.crossfade !== void 0 && (F2.crossfade = I2.crossfade ? a92.Transition_TransitionCrossfade.toJSON(I2.crossfade) : void 0), I2.fadeToColor !== void 0 && (F2.fadeToColor = I2.fadeToColor ? a92.Transition_TransitionFadeToColor.toJSON(I2.fadeToColor) : void 0), I2.swipe !== void 0 && (F2.swipe = I2.swipe ? a92.Transition_TransitionSwipe.toJSON(I2.swipe) : void 0), I2.stinger !== void 0 && (F2.stinger = I2.stinger ? a92.Transition_TransitionStinger.toJSON(I2.stinger) : void 0), F2;
  }, fromPartial(I2) {
    var F2;
    const z2 = he2();
    return z2.fromLayoutIds = ((F2 = I2.fromLayoutIds) === null || F2 === void 0 ? void 0 : F2.map((Te2) => Te2)) || [], z2.cut = I2.cut !== void 0 && I2.cut !== null ? a92.Transition_TransitionCut.fromPartial(I2.cut) : void 0, z2.crossfade = I2.crossfade !== void 0 && I2.crossfade !== null ? a92.Transition_TransitionCrossfade.fromPartial(I2.crossfade) : void 0, z2.fadeToColor = I2.fadeToColor !== void 0 && I2.fadeToColor !== null ? a92.Transition_TransitionFadeToColor.fromPartial(I2.fadeToColor) : void 0, z2.swipe = I2.swipe !== void 0 && I2.swipe !== null ? a92.Transition_TransitionSwipe.fromPartial(I2.swipe) : void 0, z2.stinger = I2.stinger !== void 0 && I2.stinger !== null ? a92.Transition_TransitionStinger.fromPartial(I2.stinger) : void 0, z2;
  } };
  function le2() {
    return { url: "", volume: 0 };
  }
  a92.Transition_TransitionMediaType = { encode(I2, F2 = g2.Writer.create()) {
    return I2.url !== "" && F2.uint32(10).string(I2.url), I2.volume !== 0 && F2.uint32(17).double(I2.volume), F2;
  }, decode(I2, F2) {
    const z2 = I2 instanceof g2.Reader ? I2 : new g2.Reader(I2);
    let Te2 = F2 === void 0 ? z2.len : z2.pos + F2;
    const fe2 = le2();
    for (; z2.pos < Te2; ) {
      const ke2 = z2.uint32();
      switch (ke2 >>> 3) {
        case 1:
          fe2.url = z2.string();
          break;
        case 2:
          fe2.volume = z2.double();
          break;
        default:
          z2.skipType(ke2 & 7);
          break;
      }
    }
    return fe2;
  }, fromJSON(I2) {
    return { url: Ce2(I2.url) ? String(I2.url) : "", volume: Ce2(I2.volume) ? Number(I2.volume) : 0 };
  }, toJSON(I2) {
    const F2 = {};
    return I2.url !== void 0 && (F2.url = I2.url), I2.volume !== void 0 && (F2.volume = I2.volume), F2;
  }, fromPartial(I2) {
    var F2, z2;
    const Te2 = le2();
    return Te2.url = (F2 = I2.url) !== null && F2 !== void 0 ? F2 : "", Te2.volume = (z2 = I2.volume) !== null && z2 !== void 0 ? z2 : 0, Te2;
  } };
  function we2() {
    return {};
  }
  a92.Transition_TransitionCut = { encode(I2, F2 = g2.Writer.create()) {
    return F2;
  }, decode(I2, F2) {
    const z2 = I2 instanceof g2.Reader ? I2 : new g2.Reader(I2);
    let Te2 = F2 === void 0 ? z2.len : z2.pos + F2;
    const fe2 = we2();
    for (; z2.pos < Te2; ) {
      const ke2 = z2.uint32();
      switch (ke2 >>> 3) {
        default:
          z2.skipType(ke2 & 7);
          break;
      }
    }
    return fe2;
  }, fromJSON(I2) {
    return {};
  }, toJSON(I2) {
    return {};
  }, fromPartial(I2) {
    return we2();
  } };
  function Be2() {
    return { durationMs: 0, backgroundColor: "" };
  }
  a92.Transition_TransitionFadeToColor = { encode(I2, F2 = g2.Writer.create()) {
    return I2.durationMs !== 0 && F2.uint32(8).int32(I2.durationMs), I2.backgroundColor !== "" && F2.uint32(18).string(I2.backgroundColor), F2;
  }, decode(I2, F2) {
    const z2 = I2 instanceof g2.Reader ? I2 : new g2.Reader(I2);
    let Te2 = F2 === void 0 ? z2.len : z2.pos + F2;
    const fe2 = Be2();
    for (; z2.pos < Te2; ) {
      const ke2 = z2.uint32();
      switch (ke2 >>> 3) {
        case 1:
          fe2.durationMs = z2.int32();
          break;
        case 2:
          fe2.backgroundColor = z2.string();
          break;
        default:
          z2.skipType(ke2 & 7);
          break;
      }
    }
    return fe2;
  }, fromJSON(I2) {
    return { durationMs: Ce2(I2.durationMs) ? Number(I2.durationMs) : 0, backgroundColor: Ce2(I2.backgroundColor) ? String(I2.backgroundColor) : "" };
  }, toJSON(I2) {
    const F2 = {};
    return I2.durationMs !== void 0 && (F2.durationMs = Math.round(I2.durationMs)), I2.backgroundColor !== void 0 && (F2.backgroundColor = I2.backgroundColor), F2;
  }, fromPartial(I2) {
    var F2, z2;
    const Te2 = Be2();
    return Te2.durationMs = (F2 = I2.durationMs) !== null && F2 !== void 0 ? F2 : 0, Te2.backgroundColor = (z2 = I2.backgroundColor) !== null && z2 !== void 0 ? z2 : "", Te2;
  } };
  function Ne2() {
    return { durationMs: 0 };
  }
  a92.Transition_TransitionCrossfade = { encode(I2, F2 = g2.Writer.create()) {
    return I2.durationMs !== 0 && F2.uint32(8).int32(I2.durationMs), F2;
  }, decode(I2, F2) {
    const z2 = I2 instanceof g2.Reader ? I2 : new g2.Reader(I2);
    let Te2 = F2 === void 0 ? z2.len : z2.pos + F2;
    const fe2 = Ne2();
    for (; z2.pos < Te2; ) {
      const ke2 = z2.uint32();
      switch (ke2 >>> 3) {
        case 1:
          fe2.durationMs = z2.int32();
          break;
        default:
          z2.skipType(ke2 & 7);
          break;
      }
    }
    return fe2;
  }, fromJSON(I2) {
    return { durationMs: Ce2(I2.durationMs) ? Number(I2.durationMs) : 0 };
  }, toJSON(I2) {
    const F2 = {};
    return I2.durationMs !== void 0 && (F2.durationMs = Math.round(I2.durationMs)), F2;
  }, fromPartial(I2) {
    var F2;
    const z2 = Ne2();
    return z2.durationMs = (F2 = I2.durationMs) !== null && F2 !== void 0 ? F2 : 0, z2;
  } };
  function Le2() {
    return { durationMs: 0, direction: de2.TRANSITION_DIRECTION_UNSPECIFIED, combinedAnimation: W2.TRANSITION_SWIPE_TYPE_UNSPECIFIED };
  }
  a92.Transition_TransitionSwipe = { encode(I2, F2 = g2.Writer.create()) {
    return I2.durationMs !== 0 && F2.uint32(8).int32(I2.durationMs), I2.direction !== de2.TRANSITION_DIRECTION_UNSPECIFIED && F2.uint32(16).int32(D2(I2.direction)), I2.combinedAnimation !== W2.TRANSITION_SWIPE_TYPE_UNSPECIFIED && F2.uint32(24).int32(ye2(I2.combinedAnimation)), F2;
  }, decode(I2, F2) {
    const z2 = I2 instanceof g2.Reader ? I2 : new g2.Reader(I2);
    let Te2 = F2 === void 0 ? z2.len : z2.pos + F2;
    const fe2 = Le2();
    for (; z2.pos < Te2; ) {
      const ke2 = z2.uint32();
      switch (ke2 >>> 3) {
        case 1:
          fe2.durationMs = z2.int32();
          break;
        case 2:
          fe2.direction = A2(z2.int32());
          break;
        case 3:
          fe2.combinedAnimation = ee2(z2.int32());
          break;
        default:
          z2.skipType(ke2 & 7);
          break;
      }
    }
    return fe2;
  }, fromJSON(I2) {
    return { durationMs: Ce2(I2.durationMs) ? Number(I2.durationMs) : 0, direction: Ce2(I2.direction) ? A2(I2.direction) : de2.TRANSITION_DIRECTION_UNSPECIFIED, combinedAnimation: Ce2(I2.combinedAnimation) ? ee2(I2.combinedAnimation) : W2.TRANSITION_SWIPE_TYPE_UNSPECIFIED };
  }, toJSON(I2) {
    const F2 = {};
    return I2.durationMs !== void 0 && (F2.durationMs = Math.round(I2.durationMs)), I2.direction !== void 0 && (F2.direction = N2(I2.direction)), I2.combinedAnimation !== void 0 && (F2.combinedAnimation = ae2(I2.combinedAnimation)), F2;
  }, fromPartial(I2) {
    var F2, z2, Te2;
    const fe2 = Le2();
    return fe2.durationMs = (F2 = I2.durationMs) !== null && F2 !== void 0 ? F2 : 0, fe2.direction = (z2 = I2.direction) !== null && z2 !== void 0 ? z2 : de2.TRANSITION_DIRECTION_UNSPECIFIED, fe2.combinedAnimation = (Te2 = I2.combinedAnimation) !== null && Te2 !== void 0 ? Te2 : W2.TRANSITION_SWIPE_TYPE_UNSPECIFIED, fe2;
  } };
  function $e2() {
    return { cutPointMs: 0, media: void 0 };
  }
  a92.Transition_TransitionStingerCut = { encode(I2, F2 = g2.Writer.create()) {
    return I2.cutPointMs !== 0 && F2.uint32(8).int32(I2.cutPointMs), I2.media !== void 0 && a92.Transition_TransitionMediaType.encode(I2.media, F2.uint32(18).fork()).ldelim(), F2;
  }, decode(I2, F2) {
    const z2 = I2 instanceof g2.Reader ? I2 : new g2.Reader(I2);
    let Te2 = F2 === void 0 ? z2.len : z2.pos + F2;
    const fe2 = $e2();
    for (; z2.pos < Te2; ) {
      const ke2 = z2.uint32();
      switch (ke2 >>> 3) {
        case 1:
          fe2.cutPointMs = z2.int32();
          break;
        case 2:
          fe2.media = a92.Transition_TransitionMediaType.decode(z2, z2.uint32());
          break;
        default:
          z2.skipType(ke2 & 7);
          break;
      }
    }
    return fe2;
  }, fromJSON(I2) {
    return { cutPointMs: Ce2(I2.cutPointMs) ? Number(I2.cutPointMs) : 0, media: Ce2(I2.media) ? a92.Transition_TransitionMediaType.fromJSON(I2.media) : void 0 };
  }, toJSON(I2) {
    const F2 = {};
    return I2.cutPointMs !== void 0 && (F2.cutPointMs = Math.round(I2.cutPointMs)), I2.media !== void 0 && (F2.media = I2.media ? a92.Transition_TransitionMediaType.toJSON(I2.media) : void 0), F2;
  }, fromPartial(I2) {
    var F2;
    const z2 = $e2();
    return z2.cutPointMs = (F2 = I2.cutPointMs) !== null && F2 !== void 0 ? F2 : 0, z2.media = I2.media !== void 0 && I2.media !== null ? a92.Transition_TransitionMediaType.fromPartial(I2.media) : void 0, z2;
  } };
  function Ue2() {
    return { cut: void 0 };
  }
  a92.Transition_TransitionStinger = { encode(I2, F2 = g2.Writer.create()) {
    return I2.cut !== void 0 && a92.Transition_TransitionStingerCut.encode(I2.cut, F2.uint32(10).fork()).ldelim(), F2;
  }, decode(I2, F2) {
    const z2 = I2 instanceof g2.Reader ? I2 : new g2.Reader(I2);
    let Te2 = F2 === void 0 ? z2.len : z2.pos + F2;
    const fe2 = Ue2();
    for (; z2.pos < Te2; ) {
      const ke2 = z2.uint32();
      switch (ke2 >>> 3) {
        case 1:
          fe2.cut = a92.Transition_TransitionStingerCut.decode(z2, z2.uint32());
          break;
        default:
          z2.skipType(ke2 & 7);
          break;
      }
    }
    return fe2;
  }, fromJSON(I2) {
    return { cut: Ce2(I2.cut) ? a92.Transition_TransitionStingerCut.fromJSON(I2.cut) : void 0 };
  }, toJSON(I2) {
    const F2 = {};
    return I2.cut !== void 0 && (F2.cut = I2.cut ? a92.Transition_TransitionStingerCut.toJSON(I2.cut) : void 0), F2;
  }, fromPartial(I2) {
    const F2 = Ue2();
    return F2.cut = I2.cut !== void 0 && I2.cut !== null ? a92.Transition_TransitionStingerCut.fromPartial(I2.cut) : void 0, F2;
  } };
  function Ge2() {
    return { id: "", width: 0, height: 0, metadata: void 0, projectId: void 0, collectionId: void 0, type: void 0, transitions: [], requestMetadata: void 0 };
  }
  a92.Layout = { encode(I2, F2 = g2.Writer.create()) {
    I2.id !== "" && F2.uint32(10).string(I2.id), I2.width !== 0 && F2.uint32(16).int32(I2.width), I2.height !== 0 && F2.uint32(24).int32(I2.height), I2.metadata !== void 0 && E2.Value.encode(E2.Value.wrap(I2.metadata), F2.uint32(50).fork()).ldelim(), I2.projectId !== void 0 && F2.uint32(58).string(I2.projectId), I2.collectionId !== void 0 && F2.uint32(66).string(I2.collectionId), I2.type !== void 0 && F2.uint32(72).int32(M2(I2.type));
    for (const z2 of I2.transitions)
      a92.Transition.encode(z2, F2.uint32(82).fork()).ldelim();
    return I2.requestMetadata !== void 0 && E2.Value.encode(E2.Value.wrap(I2.requestMetadata), F2.uint32(810).fork()).ldelim(), F2;
  }, decode(I2, F2) {
    const z2 = I2 instanceof g2.Reader ? I2 : new g2.Reader(I2);
    let Te2 = F2 === void 0 ? z2.len : z2.pos + F2;
    const fe2 = Ge2();
    for (; z2.pos < Te2; ) {
      const ke2 = z2.uint32();
      switch (ke2 >>> 3) {
        case 1:
          fe2.id = z2.string();
          break;
        case 2:
          fe2.width = z2.int32();
          break;
        case 3:
          fe2.height = z2.int32();
          break;
        case 6:
          fe2.metadata = E2.Value.unwrap(E2.Value.decode(z2, z2.uint32()));
          break;
        case 7:
          fe2.projectId = z2.string();
          break;
        case 8:
          fe2.collectionId = z2.string();
          break;
        case 9:
          fe2.type = k(z2.int32());
          break;
        case 10:
          fe2.transitions.push(a92.Transition.decode(z2, z2.uint32()));
          break;
        case 101:
          fe2.requestMetadata = E2.Value.unwrap(E2.Value.decode(z2, z2.uint32()));
          break;
        default:
          z2.skipType(ke2 & 7);
          break;
      }
    }
    return fe2;
  }, fromJSON(I2) {
    return { id: Ce2(I2.id) ? String(I2.id) : "", width: Ce2(I2.width) ? Number(I2.width) : 0, height: Ce2(I2.height) ? Number(I2.height) : 0, metadata: Ce2(I2 == null ? void 0 : I2.metadata) ? I2.metadata : void 0, projectId: Ce2(I2.projectId) ? String(I2.projectId) : void 0, collectionId: Ce2(I2.collectionId) ? String(I2.collectionId) : void 0, type: Ce2(I2.type) ? k(I2.type) : void 0, transitions: Array.isArray(I2 == null ? void 0 : I2.transitions) ? I2.transitions.map((F2) => a92.Transition.fromJSON(F2)) : [], requestMetadata: Ce2(I2 == null ? void 0 : I2.requestMetadata) ? I2.requestMetadata : void 0 };
  }, toJSON(I2) {
    const F2 = {};
    return I2.id !== void 0 && (F2.id = I2.id), I2.width !== void 0 && (F2.width = Math.round(I2.width)), I2.height !== void 0 && (F2.height = Math.round(I2.height)), I2.metadata !== void 0 && (F2.metadata = I2.metadata), I2.projectId !== void 0 && (F2.projectId = I2.projectId), I2.collectionId !== void 0 && (F2.collectionId = I2.collectionId), I2.type !== void 0 && (F2.type = I2.type !== void 0 ? L2(I2.type) : void 0), I2.transitions ? F2.transitions = I2.transitions.map((z2) => z2 ? a92.Transition.toJSON(z2) : void 0) : F2.transitions = [], I2.requestMetadata !== void 0 && (F2.requestMetadata = I2.requestMetadata), F2;
  }, fromPartial(I2) {
    var F2, z2, Te2, fe2, ke2, it, mt, vt, st;
    const ut = Ge2();
    return ut.id = (F2 = I2.id) !== null && F2 !== void 0 ? F2 : "", ut.width = (z2 = I2.width) !== null && z2 !== void 0 ? z2 : 0, ut.height = (Te2 = I2.height) !== null && Te2 !== void 0 ? Te2 : 0, ut.metadata = (fe2 = I2.metadata) !== null && fe2 !== void 0 ? fe2 : void 0, ut.projectId = (ke2 = I2.projectId) !== null && ke2 !== void 0 ? ke2 : void 0, ut.collectionId = (it = I2.collectionId) !== null && it !== void 0 ? it : void 0, ut.type = (mt = I2.type) !== null && mt !== void 0 ? mt : void 0, ut.transitions = ((vt = I2.transitions) === null || vt === void 0 ? void 0 : vt.map((yt) => a92.Transition.fromPartial(yt))) || [], ut.requestMetadata = (st = I2.requestMetadata) !== null && st !== void 0 ? st : void 0, ut;
  } };
  function He2() {
    return { type: "", data: void 0, x: void 0, y: void 0, width: void 0, height: void 0, rotation: 0, opacity: 0, scale: 0, hidden: false, children: void 0, metadata: void 0, id: "", layoutId: "", requestMetadata: void 0, requestAnimation: [] };
  }
  a92.Layer = { encode(I2, F2 = g2.Writer.create()) {
    I2.type !== "" && F2.uint32(10).string(I2.type), I2.data !== void 0 && E2.Struct.encode(E2.Struct.wrap(I2.data), F2.uint32(18).fork()).ldelim(), I2.x !== void 0 && E2.Value.encode(E2.Value.wrap(I2.x), F2.uint32(26).fork()).ldelim(), I2.y !== void 0 && E2.Value.encode(E2.Value.wrap(I2.y), F2.uint32(34).fork()).ldelim(), I2.width !== void 0 && E2.Value.encode(E2.Value.wrap(I2.width), F2.uint32(42).fork()).ldelim(), I2.height !== void 0 && E2.Value.encode(E2.Value.wrap(I2.height), F2.uint32(50).fork()).ldelim(), I2.rotation !== 0 && F2.uint32(57).double(I2.rotation), I2.opacity !== 0 && F2.uint32(65).double(I2.opacity), I2.scale !== 0 && F2.uint32(73).double(I2.scale), I2.hidden === true && F2.uint32(80).bool(I2.hidden), I2.children !== void 0 && E2.ListValue.encode(E2.ListValue.wrap(I2.children), F2.uint32(98).fork()).ldelim(), I2.metadata !== void 0 && E2.Value.encode(E2.Value.wrap(I2.metadata), F2.uint32(114).fork()).ldelim(), I2.id !== "" && F2.uint32(802).string(I2.id), I2.layoutId !== "" && F2.uint32(818).string(I2.layoutId), I2.requestMetadata !== void 0 && E2.Value.encode(E2.Value.wrap(I2.requestMetadata), F2.uint32(810).fork()).ldelim();
    for (const z2 of I2.requestAnimation)
      a92.LayerAnimation.encode(z2, F2.uint32(826).fork()).ldelim();
    return F2;
  }, decode(I2, F2) {
    const z2 = I2 instanceof g2.Reader ? I2 : new g2.Reader(I2);
    let Te2 = F2 === void 0 ? z2.len : z2.pos + F2;
    const fe2 = He2();
    for (; z2.pos < Te2; ) {
      const ke2 = z2.uint32();
      switch (ke2 >>> 3) {
        case 1:
          fe2.type = z2.string();
          break;
        case 2:
          fe2.data = E2.Struct.unwrap(E2.Struct.decode(z2, z2.uint32()));
          break;
        case 3:
          fe2.x = E2.Value.unwrap(E2.Value.decode(z2, z2.uint32()));
          break;
        case 4:
          fe2.y = E2.Value.unwrap(E2.Value.decode(z2, z2.uint32()));
          break;
        case 5:
          fe2.width = E2.Value.unwrap(E2.Value.decode(z2, z2.uint32()));
          break;
        case 6:
          fe2.height = E2.Value.unwrap(E2.Value.decode(z2, z2.uint32()));
          break;
        case 7:
          fe2.rotation = z2.double();
          break;
        case 8:
          fe2.opacity = z2.double();
          break;
        case 9:
          fe2.scale = z2.double();
          break;
        case 10:
          fe2.hidden = z2.bool();
          break;
        case 12:
          fe2.children = E2.ListValue.unwrap(E2.ListValue.decode(z2, z2.uint32()));
          break;
        case 14:
          fe2.metadata = E2.Value.unwrap(E2.Value.decode(z2, z2.uint32()));
          break;
        case 100:
          fe2.id = z2.string();
          break;
        case 102:
          fe2.layoutId = z2.string();
          break;
        case 101:
          fe2.requestMetadata = E2.Value.unwrap(E2.Value.decode(z2, z2.uint32()));
          break;
        case 103:
          fe2.requestAnimation.push(a92.LayerAnimation.decode(z2, z2.uint32()));
          break;
        default:
          z2.skipType(ke2 & 7);
          break;
      }
    }
    return fe2;
  }, fromJSON(I2) {
    return { type: Ce2(I2.type) ? String(I2.type) : "", data: ft(I2.data) ? I2.data : void 0, x: Ce2(I2 == null ? void 0 : I2.x) ? I2.x : void 0, y: Ce2(I2 == null ? void 0 : I2.y) ? I2.y : void 0, width: Ce2(I2 == null ? void 0 : I2.width) ? I2.width : void 0, height: Ce2(I2 == null ? void 0 : I2.height) ? I2.height : void 0, rotation: Ce2(I2.rotation) ? Number(I2.rotation) : 0, opacity: Ce2(I2.opacity) ? Number(I2.opacity) : 0, scale: Ce2(I2.scale) ? Number(I2.scale) : 0, hidden: Ce2(I2.hidden) ? !!I2.hidden : false, children: Array.isArray(I2.children) ? [...I2.children] : void 0, metadata: Ce2(I2 == null ? void 0 : I2.metadata) ? I2.metadata : void 0, id: Ce2(I2.id) ? String(I2.id) : "", layoutId: Ce2(I2.layoutId) ? String(I2.layoutId) : "", requestMetadata: Ce2(I2 == null ? void 0 : I2.requestMetadata) ? I2.requestMetadata : void 0, requestAnimation: Array.isArray(I2 == null ? void 0 : I2.requestAnimation) ? I2.requestAnimation.map((F2) => a92.LayerAnimation.fromJSON(F2)) : [] };
  }, toJSON(I2) {
    const F2 = {};
    return I2.type !== void 0 && (F2.type = I2.type), I2.data !== void 0 && (F2.data = I2.data), I2.x !== void 0 && (F2.x = I2.x), I2.y !== void 0 && (F2.y = I2.y), I2.width !== void 0 && (F2.width = I2.width), I2.height !== void 0 && (F2.height = I2.height), I2.rotation !== void 0 && (F2.rotation = I2.rotation), I2.opacity !== void 0 && (F2.opacity = I2.opacity), I2.scale !== void 0 && (F2.scale = I2.scale), I2.hidden !== void 0 && (F2.hidden = I2.hidden), I2.children !== void 0 && (F2.children = I2.children), I2.metadata !== void 0 && (F2.metadata = I2.metadata), I2.id !== void 0 && (F2.id = I2.id), I2.layoutId !== void 0 && (F2.layoutId = I2.layoutId), I2.requestMetadata !== void 0 && (F2.requestMetadata = I2.requestMetadata), I2.requestAnimation ? F2.requestAnimation = I2.requestAnimation.map((z2) => z2 ? a92.LayerAnimation.toJSON(z2) : void 0) : F2.requestAnimation = [], F2;
  }, fromPartial(I2) {
    var F2, z2, Te2, fe2, ke2, it, mt, vt, st, ut, yt, gt, bt, St, Et, ct;
    const Xe2 = He2();
    return Xe2.type = (F2 = I2.type) !== null && F2 !== void 0 ? F2 : "", Xe2.data = (z2 = I2.data) !== null && z2 !== void 0 ? z2 : void 0, Xe2.x = (Te2 = I2.x) !== null && Te2 !== void 0 ? Te2 : void 0, Xe2.y = (fe2 = I2.y) !== null && fe2 !== void 0 ? fe2 : void 0, Xe2.width = (ke2 = I2.width) !== null && ke2 !== void 0 ? ke2 : void 0, Xe2.height = (it = I2.height) !== null && it !== void 0 ? it : void 0, Xe2.rotation = (mt = I2.rotation) !== null && mt !== void 0 ? mt : 0, Xe2.opacity = (vt = I2.opacity) !== null && vt !== void 0 ? vt : 0, Xe2.scale = (st = I2.scale) !== null && st !== void 0 ? st : 0, Xe2.hidden = (ut = I2.hidden) !== null && ut !== void 0 ? ut : false, Xe2.children = (yt = I2.children) !== null && yt !== void 0 ? yt : void 0, Xe2.metadata = (gt = I2.metadata) !== null && gt !== void 0 ? gt : void 0, Xe2.id = (bt = I2.id) !== null && bt !== void 0 ? bt : "", Xe2.layoutId = (St = I2.layoutId) !== null && St !== void 0 ? St : "", Xe2.requestMetadata = (Et = I2.requestMetadata) !== null && Et !== void 0 ? Et : void 0, Xe2.requestAnimation = ((ct = I2.requestAnimation) === null || ct === void 0 ? void 0 : ct.map((Ct) => a92.LayerAnimation.fromPartial(Ct))) || [], Xe2;
  } };
  function Ve2() {
    return { layoutId: "", layerId: "", payload: void 0 };
  }
  a92.DeleteLayerRequest = { encode(I2, F2 = g2.Writer.create()) {
    return I2.layoutId !== "" && F2.uint32(10).string(I2.layoutId), I2.layerId !== "" && F2.uint32(18).string(I2.layerId), I2.payload !== void 0 && a92.DeleteLayerPayload.encode(I2.payload, F2.uint32(26).fork()).ldelim(), F2;
  }, decode(I2, F2) {
    const z2 = I2 instanceof g2.Reader ? I2 : new g2.Reader(I2);
    let Te2 = F2 === void 0 ? z2.len : z2.pos + F2;
    const fe2 = Ve2();
    for (; z2.pos < Te2; ) {
      const ke2 = z2.uint32();
      switch (ke2 >>> 3) {
        case 1:
          fe2.layoutId = z2.string();
          break;
        case 2:
          fe2.layerId = z2.string();
          break;
        case 3:
          fe2.payload = a92.DeleteLayerPayload.decode(z2, z2.uint32());
          break;
        default:
          z2.skipType(ke2 & 7);
          break;
      }
    }
    return fe2;
  }, fromJSON(I2) {
    return { layoutId: Ce2(I2.layoutId) ? String(I2.layoutId) : "", layerId: Ce2(I2.layerId) ? String(I2.layerId) : "", payload: Ce2(I2.payload) ? a92.DeleteLayerPayload.fromJSON(I2.payload) : void 0 };
  }, toJSON(I2) {
    const F2 = {};
    return I2.layoutId !== void 0 && (F2.layoutId = I2.layoutId), I2.layerId !== void 0 && (F2.layerId = I2.layerId), I2.payload !== void 0 && (F2.payload = I2.payload ? a92.DeleteLayerPayload.toJSON(I2.payload) : void 0), F2;
  }, fromPartial(I2) {
    var F2, z2;
    const Te2 = Ve2();
    return Te2.layoutId = (F2 = I2.layoutId) !== null && F2 !== void 0 ? F2 : "", Te2.layerId = (z2 = I2.layerId) !== null && z2 !== void 0 ? z2 : "", Te2.payload = I2.payload !== void 0 && I2.payload !== null ? a92.DeleteLayerPayload.fromPartial(I2.payload) : void 0, Te2;
  } };
  function be2() {
    return { id: "", layoutId: "", requestMetadata: void 0 };
  }
  a92.DeleteLayerResponse = { encode(I2, F2 = g2.Writer.create()) {
    return I2.id !== "" && F2.uint32(10).string(I2.id), I2.layoutId !== "" && F2.uint32(18).string(I2.layoutId), I2.requestMetadata !== void 0 && E2.Value.encode(E2.Value.wrap(I2.requestMetadata), F2.uint32(802).fork()).ldelim(), F2;
  }, decode(I2, F2) {
    const z2 = I2 instanceof g2.Reader ? I2 : new g2.Reader(I2);
    let Te2 = F2 === void 0 ? z2.len : z2.pos + F2;
    const fe2 = be2();
    for (; z2.pos < Te2; ) {
      const ke2 = z2.uint32();
      switch (ke2 >>> 3) {
        case 1:
          fe2.id = z2.string();
          break;
        case 2:
          fe2.layoutId = z2.string();
          break;
        case 100:
          fe2.requestMetadata = E2.Value.unwrap(E2.Value.decode(z2, z2.uint32()));
          break;
        default:
          z2.skipType(ke2 & 7);
          break;
      }
    }
    return fe2;
  }, fromJSON(I2) {
    return { id: Ce2(I2.id) ? String(I2.id) : "", layoutId: Ce2(I2.layoutId) ? String(I2.layoutId) : "", requestMetadata: Ce2(I2 == null ? void 0 : I2.requestMetadata) ? I2.requestMetadata : void 0 };
  }, toJSON(I2) {
    const F2 = {};
    return I2.id !== void 0 && (F2.id = I2.id), I2.layoutId !== void 0 && (F2.layoutId = I2.layoutId), I2.requestMetadata !== void 0 && (F2.requestMetadata = I2.requestMetadata), F2;
  }, fromPartial(I2) {
    var F2, z2, Te2;
    const fe2 = be2();
    return fe2.id = (F2 = I2.id) !== null && F2 !== void 0 ? F2 : "", fe2.layoutId = (z2 = I2.layoutId) !== null && z2 !== void 0 ? z2 : "", fe2.requestMetadata = (Te2 = I2.requestMetadata) !== null && Te2 !== void 0 ? Te2 : void 0, fe2;
  } };
  function Ae2() {
    return { layers: [], layoutId: "", requestMetadata: void 0, requestAnimationMode: $.REQUEST_ANIMATION_MODE_UNSPECIFIED };
  }
  a92.BatchLayerResponse = { encode(I2, F2 = g2.Writer.create()) {
    for (const z2 of I2.layers)
      a92.BatchLayerResponse_BatchLayerItem.encode(z2, F2.uint32(18).fork()).ldelim();
    return I2.layoutId !== "" && F2.uint32(26).string(I2.layoutId), I2.requestMetadata !== void 0 && E2.Value.encode(E2.Value.wrap(I2.requestMetadata), F2.uint32(802).fork()).ldelim(), I2.requestAnimationMode !== $.REQUEST_ANIMATION_MODE_UNSPECIFIED && F2.uint32(808).int32(q2(I2.requestAnimationMode)), F2;
  }, decode(I2, F2) {
    const z2 = I2 instanceof g2.Reader ? I2 : new g2.Reader(I2);
    let Te2 = F2 === void 0 ? z2.len : z2.pos + F2;
    const fe2 = Ae2();
    for (; z2.pos < Te2; ) {
      const ke2 = z2.uint32();
      switch (ke2 >>> 3) {
        case 2:
          fe2.layers.push(a92.BatchLayerResponse_BatchLayerItem.decode(z2, z2.uint32()));
          break;
        case 3:
          fe2.layoutId = z2.string();
          break;
        case 100:
          fe2.requestMetadata = E2.Value.unwrap(E2.Value.decode(z2, z2.uint32()));
          break;
        case 101:
          fe2.requestAnimationMode = J2(z2.int32());
          break;
        default:
          z2.skipType(ke2 & 7);
          break;
      }
    }
    return fe2;
  }, fromJSON(I2) {
    return { layers: Array.isArray(I2 == null ? void 0 : I2.layers) ? I2.layers.map((F2) => a92.BatchLayerResponse_BatchLayerItem.fromJSON(F2)) : [], layoutId: Ce2(I2.layoutId) ? String(I2.layoutId) : "", requestMetadata: Ce2(I2 == null ? void 0 : I2.requestMetadata) ? I2.requestMetadata : void 0, requestAnimationMode: Ce2(I2.requestAnimationMode) ? J2(I2.requestAnimationMode) : $.REQUEST_ANIMATION_MODE_UNSPECIFIED };
  }, toJSON(I2) {
    const F2 = {};
    return I2.layers ? F2.layers = I2.layers.map((z2) => z2 ? a92.BatchLayerResponse_BatchLayerItem.toJSON(z2) : void 0) : F2.layers = [], I2.layoutId !== void 0 && (F2.layoutId = I2.layoutId), I2.requestMetadata !== void 0 && (F2.requestMetadata = I2.requestMetadata), I2.requestAnimationMode !== void 0 && (F2.requestAnimationMode = V2(I2.requestAnimationMode)), F2;
  }, fromPartial(I2) {
    var F2, z2, Te2, fe2;
    const ke2 = Ae2();
    return ke2.layers = ((F2 = I2.layers) === null || F2 === void 0 ? void 0 : F2.map((it) => a92.BatchLayerResponse_BatchLayerItem.fromPartial(it))) || [], ke2.layoutId = (z2 = I2.layoutId) !== null && z2 !== void 0 ? z2 : "", ke2.requestMetadata = (Te2 = I2.requestMetadata) !== null && Te2 !== void 0 ? Te2 : void 0, ke2.requestAnimationMode = (fe2 = I2.requestAnimationMode) !== null && fe2 !== void 0 ? fe2 : $.REQUEST_ANIMATION_MODE_UNSPECIFIED, ke2;
  } };
  function qe2() {
    return { create: void 0, update: void 0, delete: void 0 };
  }
  a92.BatchLayerResponse_BatchLayerItem = { encode(I2, F2 = g2.Writer.create()) {
    return I2.create !== void 0 && a92.Layer.encode(I2.create, F2.uint32(10).fork()).ldelim(), I2.update !== void 0 && a92.Layer.encode(I2.update, F2.uint32(18).fork()).ldelim(), I2.delete !== void 0 && a92.DeleteLayerResponse.encode(I2.delete, F2.uint32(26).fork()).ldelim(), F2;
  }, decode(I2, F2) {
    const z2 = I2 instanceof g2.Reader ? I2 : new g2.Reader(I2);
    let Te2 = F2 === void 0 ? z2.len : z2.pos + F2;
    const fe2 = qe2();
    for (; z2.pos < Te2; ) {
      const ke2 = z2.uint32();
      switch (ke2 >>> 3) {
        case 1:
          fe2.create = a92.Layer.decode(z2, z2.uint32());
          break;
        case 2:
          fe2.update = a92.Layer.decode(z2, z2.uint32());
          break;
        case 3:
          fe2.delete = a92.DeleteLayerResponse.decode(z2, z2.uint32());
          break;
        default:
          z2.skipType(ke2 & 7);
          break;
      }
    }
    return fe2;
  }, fromJSON(I2) {
    return { create: Ce2(I2.create) ? a92.Layer.fromJSON(I2.create) : void 0, update: Ce2(I2.update) ? a92.Layer.fromJSON(I2.update) : void 0, delete: Ce2(I2.delete) ? a92.DeleteLayerResponse.fromJSON(I2.delete) : void 0 };
  }, toJSON(I2) {
    const F2 = {};
    return I2.create !== void 0 && (F2.create = I2.create ? a92.Layer.toJSON(I2.create) : void 0), I2.update !== void 0 && (F2.update = I2.update ? a92.Layer.toJSON(I2.update) : void 0), I2.delete !== void 0 && (F2.delete = I2.delete ? a92.DeleteLayerResponse.toJSON(I2.delete) : void 0), F2;
  }, fromPartial(I2) {
    const F2 = qe2();
    return F2.create = I2.create !== void 0 && I2.create !== null ? a92.Layer.fromPartial(I2.create) : void 0, F2.update = I2.update !== void 0 && I2.update !== null ? a92.Layer.fromPartial(I2.update) : void 0, F2.delete = I2.delete !== void 0 && I2.delete !== null ? a92.DeleteLayerResponse.fromPartial(I2.delete) : void 0, F2;
  } };
  function xe2() {
    return { width: void 0, height: void 0, metadata: void 0, projectId: void 0, collectionId: void 0, type: void 0, transitions: [], requestMetadata: void 0 };
  }
  a92.PartialLayout = { encode(I2, F2 = g2.Writer.create()) {
    I2.width !== void 0 && F2.uint32(16).int32(I2.width), I2.height !== void 0 && F2.uint32(24).int32(I2.height), I2.metadata !== void 0 && E2.Value.encode(E2.Value.wrap(I2.metadata), F2.uint32(50).fork()).ldelim(), I2.projectId !== void 0 && F2.uint32(58).string(I2.projectId), I2.collectionId !== void 0 && F2.uint32(66).string(I2.collectionId), I2.type !== void 0 && F2.uint32(72).int32(M2(I2.type));
    for (const z2 of I2.transitions)
      a92.Transition.encode(z2, F2.uint32(82).fork()).ldelim();
    return I2.requestMetadata !== void 0 && E2.Value.encode(E2.Value.wrap(I2.requestMetadata), F2.uint32(810).fork()).ldelim(), F2;
  }, decode(I2, F2) {
    const z2 = I2 instanceof g2.Reader ? I2 : new g2.Reader(I2);
    let Te2 = F2 === void 0 ? z2.len : z2.pos + F2;
    const fe2 = xe2();
    for (; z2.pos < Te2; ) {
      const ke2 = z2.uint32();
      switch (ke2 >>> 3) {
        case 2:
          fe2.width = z2.int32();
          break;
        case 3:
          fe2.height = z2.int32();
          break;
        case 6:
          fe2.metadata = E2.Value.unwrap(E2.Value.decode(z2, z2.uint32()));
          break;
        case 7:
          fe2.projectId = z2.string();
          break;
        case 8:
          fe2.collectionId = z2.string();
          break;
        case 9:
          fe2.type = k(z2.int32());
          break;
        case 10:
          fe2.transitions.push(a92.Transition.decode(z2, z2.uint32()));
          break;
        case 101:
          fe2.requestMetadata = E2.Value.unwrap(E2.Value.decode(z2, z2.uint32()));
          break;
        default:
          z2.skipType(ke2 & 7);
          break;
      }
    }
    return fe2;
  }, fromJSON(I2) {
    return { width: Ce2(I2.width) ? Number(I2.width) : void 0, height: Ce2(I2.height) ? Number(I2.height) : void 0, metadata: Ce2(I2 == null ? void 0 : I2.metadata) ? I2.metadata : void 0, projectId: Ce2(I2.projectId) ? String(I2.projectId) : void 0, collectionId: Ce2(I2.collectionId) ? String(I2.collectionId) : void 0, type: Ce2(I2.type) ? k(I2.type) : void 0, transitions: Array.isArray(I2 == null ? void 0 : I2.transitions) ? I2.transitions.map((F2) => a92.Transition.fromJSON(F2)) : [], requestMetadata: Ce2(I2 == null ? void 0 : I2.requestMetadata) ? I2.requestMetadata : void 0 };
  }, toJSON(I2) {
    const F2 = {};
    return I2.width !== void 0 && (F2.width = Math.round(I2.width)), I2.height !== void 0 && (F2.height = Math.round(I2.height)), I2.metadata !== void 0 && (F2.metadata = I2.metadata), I2.projectId !== void 0 && (F2.projectId = I2.projectId), I2.collectionId !== void 0 && (F2.collectionId = I2.collectionId), I2.type !== void 0 && (F2.type = I2.type !== void 0 ? L2(I2.type) : void 0), I2.transitions ? F2.transitions = I2.transitions.map((z2) => z2 ? a92.Transition.toJSON(z2) : void 0) : F2.transitions = [], I2.requestMetadata !== void 0 && (F2.requestMetadata = I2.requestMetadata), F2;
  }, fromPartial(I2) {
    var F2, z2, Te2, fe2, ke2, it, mt, vt;
    const st = xe2();
    return st.width = (F2 = I2.width) !== null && F2 !== void 0 ? F2 : void 0, st.height = (z2 = I2.height) !== null && z2 !== void 0 ? z2 : void 0, st.metadata = (Te2 = I2.metadata) !== null && Te2 !== void 0 ? Te2 : void 0, st.projectId = (fe2 = I2.projectId) !== null && fe2 !== void 0 ? fe2 : void 0, st.collectionId = (ke2 = I2.collectionId) !== null && ke2 !== void 0 ? ke2 : void 0, st.type = (it = I2.type) !== null && it !== void 0 ? it : void 0, st.transitions = ((mt = I2.transitions) === null || mt === void 0 ? void 0 : mt.map((ut) => a92.Transition.fromPartial(ut))) || [], st.requestMetadata = (vt = I2.requestMetadata) !== null && vt !== void 0 ? vt : void 0, st;
  } };
  function Pe2() {
    return { projectId: void 0, collectionId: void 0, type: void 0 };
  }
  a92.ListLayoutsRequest = { encode(I2, F2 = g2.Writer.create()) {
    return I2.projectId !== void 0 && F2.uint32(10).string(I2.projectId), I2.collectionId !== void 0 && F2.uint32(18).string(I2.collectionId), I2.type !== void 0 && F2.uint32(24).int32(M2(I2.type)), F2;
  }, decode(I2, F2) {
    const z2 = I2 instanceof g2.Reader ? I2 : new g2.Reader(I2);
    let Te2 = F2 === void 0 ? z2.len : z2.pos + F2;
    const fe2 = Pe2();
    for (; z2.pos < Te2; ) {
      const ke2 = z2.uint32();
      switch (ke2 >>> 3) {
        case 1:
          fe2.projectId = z2.string();
          break;
        case 2:
          fe2.collectionId = z2.string();
          break;
        case 3:
          fe2.type = k(z2.int32());
          break;
        default:
          z2.skipType(ke2 & 7);
          break;
      }
    }
    return fe2;
  }, fromJSON(I2) {
    return { projectId: Ce2(I2.projectId) ? String(I2.projectId) : void 0, collectionId: Ce2(I2.collectionId) ? String(I2.collectionId) : void 0, type: Ce2(I2.type) ? k(I2.type) : void 0 };
  }, toJSON(I2) {
    const F2 = {};
    return I2.projectId !== void 0 && (F2.projectId = I2.projectId), I2.collectionId !== void 0 && (F2.collectionId = I2.collectionId), I2.type !== void 0 && (F2.type = I2.type !== void 0 ? L2(I2.type) : void 0), F2;
  }, fromPartial(I2) {
    var F2, z2, Te2;
    const fe2 = Pe2();
    return fe2.projectId = (F2 = I2.projectId) !== null && F2 !== void 0 ? F2 : void 0, fe2.collectionId = (z2 = I2.collectionId) !== null && z2 !== void 0 ? z2 : void 0, fe2.type = (Te2 = I2.type) !== null && Te2 !== void 0 ? Te2 : void 0, fe2;
  } };
  function C2() {
    return { layouts: [] };
  }
  a92.ListLayoutsResponse = { encode(I2, F2 = g2.Writer.create()) {
    for (const z2 of I2.layouts)
      a92.Layout.encode(z2, F2.uint32(10).fork()).ldelim();
    return F2;
  }, decode(I2, F2) {
    const z2 = I2 instanceof g2.Reader ? I2 : new g2.Reader(I2);
    let Te2 = F2 === void 0 ? z2.len : z2.pos + F2;
    const fe2 = C2();
    for (; z2.pos < Te2; ) {
      const ke2 = z2.uint32();
      switch (ke2 >>> 3) {
        case 1:
          fe2.layouts.push(a92.Layout.decode(z2, z2.uint32()));
          break;
        default:
          z2.skipType(ke2 & 7);
          break;
      }
    }
    return fe2;
  }, fromJSON(I2) {
    return { layouts: Array.isArray(I2 == null ? void 0 : I2.layouts) ? I2.layouts.map((F2) => a92.Layout.fromJSON(F2)) : [] };
  }, toJSON(I2) {
    const F2 = {};
    return I2.layouts ? F2.layouts = I2.layouts.map((z2) => z2 ? a92.Layout.toJSON(z2) : void 0) : F2.layouts = [], F2;
  }, fromPartial(I2) {
    var F2;
    const z2 = C2();
    return z2.layouts = ((F2 = I2.layouts) === null || F2 === void 0 ? void 0 : F2.map((Te2) => a92.Layout.fromPartial(Te2))) || [], z2;
  } };
  function x2() {
    return { layout: void 0 };
  }
  a92.CreateLayoutRequest = { encode(I2, F2 = g2.Writer.create()) {
    return I2.layout !== void 0 && a92.PartialLayout.encode(I2.layout, F2.uint32(18).fork()).ldelim(), F2;
  }, decode(I2, F2) {
    const z2 = I2 instanceof g2.Reader ? I2 : new g2.Reader(I2);
    let Te2 = F2 === void 0 ? z2.len : z2.pos + F2;
    const fe2 = x2();
    for (; z2.pos < Te2; ) {
      const ke2 = z2.uint32();
      switch (ke2 >>> 3) {
        case 2:
          fe2.layout = a92.PartialLayout.decode(z2, z2.uint32());
          break;
        default:
          z2.skipType(ke2 & 7);
          break;
      }
    }
    return fe2;
  }, fromJSON(I2) {
    return { layout: Ce2(I2.layout) ? a92.PartialLayout.fromJSON(I2.layout) : void 0 };
  }, toJSON(I2) {
    const F2 = {};
    return I2.layout !== void 0 && (F2.layout = I2.layout ? a92.PartialLayout.toJSON(I2.layout) : void 0), F2;
  }, fromPartial(I2) {
    const F2 = x2();
    return F2.layout = I2.layout !== void 0 && I2.layout !== null ? a92.PartialLayout.fromPartial(I2.layout) : void 0, F2;
  } };
  function Q2() {
    return { layoutId: "" };
  }
  a92.GetLayoutRequest = { encode(I2, F2 = g2.Writer.create()) {
    return I2.layoutId !== "" && F2.uint32(10).string(I2.layoutId), F2;
  }, decode(I2, F2) {
    const z2 = I2 instanceof g2.Reader ? I2 : new g2.Reader(I2);
    let Te2 = F2 === void 0 ? z2.len : z2.pos + F2;
    const fe2 = Q2();
    for (; z2.pos < Te2; ) {
      const ke2 = z2.uint32();
      switch (ke2 >>> 3) {
        case 1:
          fe2.layoutId = z2.string();
          break;
        default:
          z2.skipType(ke2 & 7);
          break;
      }
    }
    return fe2;
  }, fromJSON(I2) {
    return { layoutId: Ce2(I2.layoutId) ? String(I2.layoutId) : "" };
  }, toJSON(I2) {
    const F2 = {};
    return I2.layoutId !== void 0 && (F2.layoutId = I2.layoutId), F2;
  }, fromPartial(I2) {
    var F2;
    const z2 = Q2();
    return z2.layoutId = (F2 = I2.layoutId) !== null && F2 !== void 0 ? F2 : "", z2;
  } };
  function Se2() {
    return { layoutId: "", layout: void 0 };
  }
  a92.UpdateLayoutRequest = { encode(I2, F2 = g2.Writer.create()) {
    return I2.layoutId !== "" && F2.uint32(10).string(I2.layoutId), I2.layout !== void 0 && a92.PartialLayout.encode(I2.layout, F2.uint32(26).fork()).ldelim(), F2;
  }, decode(I2, F2) {
    const z2 = I2 instanceof g2.Reader ? I2 : new g2.Reader(I2);
    let Te2 = F2 === void 0 ? z2.len : z2.pos + F2;
    const fe2 = Se2();
    for (; z2.pos < Te2; ) {
      const ke2 = z2.uint32();
      switch (ke2 >>> 3) {
        case 1:
          fe2.layoutId = z2.string();
          break;
        case 3:
          fe2.layout = a92.PartialLayout.decode(z2, z2.uint32());
          break;
        default:
          z2.skipType(ke2 & 7);
          break;
      }
    }
    return fe2;
  }, fromJSON(I2) {
    return { layoutId: Ce2(I2.layoutId) ? String(I2.layoutId) : "", layout: Ce2(I2.layout) ? a92.PartialLayout.fromJSON(I2.layout) : void 0 };
  }, toJSON(I2) {
    const F2 = {};
    return I2.layoutId !== void 0 && (F2.layoutId = I2.layoutId), I2.layout !== void 0 && (F2.layout = I2.layout ? a92.PartialLayout.toJSON(I2.layout) : void 0), F2;
  }, fromPartial(I2) {
    var F2;
    const z2 = Se2();
    return z2.layoutId = (F2 = I2.layoutId) !== null && F2 !== void 0 ? F2 : "", z2.layout = I2.layout !== void 0 && I2.layout !== null ? a92.PartialLayout.fromPartial(I2.layout) : void 0, z2;
  } };
  function me2() {
    return { requestMetadata: void 0 };
  }
  a92.DeleteLayoutPayload = { encode(I2, F2 = g2.Writer.create()) {
    return I2.requestMetadata !== void 0 && E2.Value.encode(E2.Value.wrap(I2.requestMetadata), F2.uint32(802).fork()).ldelim(), F2;
  }, decode(I2, F2) {
    const z2 = I2 instanceof g2.Reader ? I2 : new g2.Reader(I2);
    let Te2 = F2 === void 0 ? z2.len : z2.pos + F2;
    const fe2 = me2();
    for (; z2.pos < Te2; ) {
      const ke2 = z2.uint32();
      switch (ke2 >>> 3) {
        case 100:
          fe2.requestMetadata = E2.Value.unwrap(E2.Value.decode(z2, z2.uint32()));
          break;
        default:
          z2.skipType(ke2 & 7);
          break;
      }
    }
    return fe2;
  }, fromJSON(I2) {
    return { requestMetadata: Ce2(I2 == null ? void 0 : I2.requestMetadata) ? I2.requestMetadata : void 0 };
  }, toJSON(I2) {
    const F2 = {};
    return I2.requestMetadata !== void 0 && (F2.requestMetadata = I2.requestMetadata), F2;
  }, fromPartial(I2) {
    var F2;
    const z2 = me2();
    return z2.requestMetadata = (F2 = I2.requestMetadata) !== null && F2 !== void 0 ? F2 : void 0, z2;
  } };
  function Ie2() {
    return { layoutId: "", payload: void 0 };
  }
  a92.DeleteLayoutRequest = { encode(I2, F2 = g2.Writer.create()) {
    return I2.layoutId !== "" && F2.uint32(10).string(I2.layoutId), I2.payload !== void 0 && a92.DeleteLayoutPayload.encode(I2.payload, F2.uint32(18).fork()).ldelim(), F2;
  }, decode(I2, F2) {
    const z2 = I2 instanceof g2.Reader ? I2 : new g2.Reader(I2);
    let Te2 = F2 === void 0 ? z2.len : z2.pos + F2;
    const fe2 = Ie2();
    for (; z2.pos < Te2; ) {
      const ke2 = z2.uint32();
      switch (ke2 >>> 3) {
        case 1:
          fe2.layoutId = z2.string();
          break;
        case 2:
          fe2.payload = a92.DeleteLayoutPayload.decode(z2, z2.uint32());
          break;
        default:
          z2.skipType(ke2 & 7);
          break;
      }
    }
    return fe2;
  }, fromJSON(I2) {
    return { layoutId: Ce2(I2.layoutId) ? String(I2.layoutId) : "", payload: Ce2(I2.payload) ? a92.DeleteLayoutPayload.fromJSON(I2.payload) : void 0 };
  }, toJSON(I2) {
    const F2 = {};
    return I2.layoutId !== void 0 && (F2.layoutId = I2.layoutId), I2.payload !== void 0 && (F2.payload = I2.payload ? a92.DeleteLayoutPayload.toJSON(I2.payload) : void 0), F2;
  }, fromPartial(I2) {
    var F2;
    const z2 = Ie2();
    return z2.layoutId = (F2 = I2.layoutId) !== null && F2 !== void 0 ? F2 : "", z2.payload = I2.payload !== void 0 && I2.payload !== null ? a92.DeleteLayoutPayload.fromPartial(I2.payload) : void 0, z2;
  } };
  function at() {
    return { id: "", requestMetadata: void 0 };
  }
  a92.DeleteLayoutResponse = { encode(I2, F2 = g2.Writer.create()) {
    return I2.id !== "" && F2.uint32(18).string(I2.id), I2.requestMetadata !== void 0 && E2.Value.encode(E2.Value.wrap(I2.requestMetadata), F2.uint32(802).fork()).ldelim(), F2;
  }, decode(I2, F2) {
    const z2 = I2 instanceof g2.Reader ? I2 : new g2.Reader(I2);
    let Te2 = F2 === void 0 ? z2.len : z2.pos + F2;
    const fe2 = at();
    for (; z2.pos < Te2; ) {
      const ke2 = z2.uint32();
      switch (ke2 >>> 3) {
        case 2:
          fe2.id = z2.string();
          break;
        case 100:
          fe2.requestMetadata = E2.Value.unwrap(E2.Value.decode(z2, z2.uint32()));
          break;
        default:
          z2.skipType(ke2 & 7);
          break;
      }
    }
    return fe2;
  }, fromJSON(I2) {
    return { id: Ce2(I2.id) ? String(I2.id) : "", requestMetadata: Ce2(I2 == null ? void 0 : I2.requestMetadata) ? I2.requestMetadata : void 0 };
  }, toJSON(I2) {
    const F2 = {};
    return I2.id !== void 0 && (F2.id = I2.id), I2.requestMetadata !== void 0 && (F2.requestMetadata = I2.requestMetadata), F2;
  }, fromPartial(I2) {
    var F2, z2;
    const Te2 = at();
    return Te2.id = (F2 = I2.id) !== null && F2 !== void 0 ? F2 : "", Te2.requestMetadata = (z2 = I2.requestMetadata) !== null && z2 !== void 0 ? z2 : void 0, Te2;
  } };
  function Ye2() {
    return { properties: [], durationMs: 0, delayMs: void 0, easingMode: void 0 };
  }
  a92.LayerAnimation = { encode(I2, F2 = g2.Writer.create()) {
    for (const z2 of I2.properties)
      F2.uint32(10).string(z2);
    return I2.durationMs !== 0 && F2.uint32(16).int32(I2.durationMs), I2.delayMs !== void 0 && F2.uint32(32).int32(I2.delayMs), I2.easingMode !== void 0 && F2.uint32(42).string(I2.easingMode), F2;
  }, decode(I2, F2) {
    const z2 = I2 instanceof g2.Reader ? I2 : new g2.Reader(I2);
    let Te2 = F2 === void 0 ? z2.len : z2.pos + F2;
    const fe2 = Ye2();
    for (; z2.pos < Te2; ) {
      const ke2 = z2.uint32();
      switch (ke2 >>> 3) {
        case 1:
          fe2.properties.push(z2.string());
          break;
        case 2:
          fe2.durationMs = z2.int32();
          break;
        case 4:
          fe2.delayMs = z2.int32();
          break;
        case 5:
          fe2.easingMode = z2.string();
          break;
        default:
          z2.skipType(ke2 & 7);
          break;
      }
    }
    return fe2;
  }, fromJSON(I2) {
    return { properties: Array.isArray(I2 == null ? void 0 : I2.properties) ? I2.properties.map((F2) => String(F2)) : [], durationMs: Ce2(I2.durationMs) ? Number(I2.durationMs) : 0, delayMs: Ce2(I2.delayMs) ? Number(I2.delayMs) : void 0, easingMode: Ce2(I2.easingMode) ? String(I2.easingMode) : void 0 };
  }, toJSON(I2) {
    const F2 = {};
    return I2.properties ? F2.properties = I2.properties.map((z2) => z2) : F2.properties = [], I2.durationMs !== void 0 && (F2.durationMs = Math.round(I2.durationMs)), I2.delayMs !== void 0 && (F2.delayMs = Math.round(I2.delayMs)), I2.easingMode !== void 0 && (F2.easingMode = I2.easingMode), F2;
  }, fromPartial(I2) {
    var F2, z2, Te2, fe2;
    const ke2 = Ye2();
    return ke2.properties = ((F2 = I2.properties) === null || F2 === void 0 ? void 0 : F2.map((it) => it)) || [], ke2.durationMs = (z2 = I2.durationMs) !== null && z2 !== void 0 ? z2 : 0, ke2.delayMs = (Te2 = I2.delayMs) !== null && Te2 !== void 0 ? Te2 : void 0, ke2.easingMode = (fe2 = I2.easingMode) !== null && fe2 !== void 0 ? fe2 : void 0, ke2;
  } };
  function je2() {
    return { type: void 0, data: void 0, x: void 0, y: void 0, width: void 0, height: void 0, rotation: void 0, opacity: void 0, scale: void 0, hidden: void 0, children: void 0, parentId: void 0, metadata: void 0, requestMetadata: void 0, requestAnimation: [] };
  }
  a92.PartialLayer = { encode(I2, F2 = g2.Writer.create()) {
    I2.type !== void 0 && F2.uint32(10).string(I2.type), I2.data !== void 0 && E2.Struct.encode(E2.Struct.wrap(I2.data), F2.uint32(18).fork()).ldelim(), I2.x !== void 0 && E2.Value.encode(E2.Value.wrap(I2.x), F2.uint32(26).fork()).ldelim(), I2.y !== void 0 && E2.Value.encode(E2.Value.wrap(I2.y), F2.uint32(34).fork()).ldelim(), I2.width !== void 0 && E2.Value.encode(E2.Value.wrap(I2.width), F2.uint32(42).fork()).ldelim(), I2.height !== void 0 && E2.Value.encode(E2.Value.wrap(I2.height), F2.uint32(50).fork()).ldelim(), I2.rotation !== void 0 && F2.uint32(57).double(I2.rotation), I2.opacity !== void 0 && F2.uint32(65).double(I2.opacity), I2.scale !== void 0 && F2.uint32(73).double(I2.scale), I2.hidden !== void 0 && F2.uint32(80).bool(I2.hidden), I2.children !== void 0 && E2.ListValue.encode(E2.ListValue.wrap(I2.children), F2.uint32(98).fork()).ldelim(), I2.parentId !== void 0 && F2.uint32(106).string(I2.parentId), I2.metadata !== void 0 && E2.Value.encode(E2.Value.wrap(I2.metadata), F2.uint32(114).fork()).ldelim(), I2.requestMetadata !== void 0 && E2.Value.encode(E2.Value.wrap(I2.requestMetadata), F2.uint32(802).fork()).ldelim();
    for (const z2 of I2.requestAnimation)
      a92.LayerAnimation.encode(z2, F2.uint32(826).fork()).ldelim();
    return F2;
  }, decode(I2, F2) {
    const z2 = I2 instanceof g2.Reader ? I2 : new g2.Reader(I2);
    let Te2 = F2 === void 0 ? z2.len : z2.pos + F2;
    const fe2 = je2();
    for (; z2.pos < Te2; ) {
      const ke2 = z2.uint32();
      switch (ke2 >>> 3) {
        case 1:
          fe2.type = z2.string();
          break;
        case 2:
          fe2.data = E2.Struct.unwrap(E2.Struct.decode(z2, z2.uint32()));
          break;
        case 3:
          fe2.x = E2.Value.unwrap(E2.Value.decode(z2, z2.uint32()));
          break;
        case 4:
          fe2.y = E2.Value.unwrap(E2.Value.decode(z2, z2.uint32()));
          break;
        case 5:
          fe2.width = E2.Value.unwrap(E2.Value.decode(z2, z2.uint32()));
          break;
        case 6:
          fe2.height = E2.Value.unwrap(E2.Value.decode(z2, z2.uint32()));
          break;
        case 7:
          fe2.rotation = z2.double();
          break;
        case 8:
          fe2.opacity = z2.double();
          break;
        case 9:
          fe2.scale = z2.double();
          break;
        case 10:
          fe2.hidden = z2.bool();
          break;
        case 12:
          fe2.children = E2.ListValue.unwrap(E2.ListValue.decode(z2, z2.uint32()));
          break;
        case 13:
          fe2.parentId = z2.string();
          break;
        case 14:
          fe2.metadata = E2.Value.unwrap(E2.Value.decode(z2, z2.uint32()));
          break;
        case 100:
          fe2.requestMetadata = E2.Value.unwrap(E2.Value.decode(z2, z2.uint32()));
          break;
        case 103:
          fe2.requestAnimation.push(a92.LayerAnimation.decode(z2, z2.uint32()));
          break;
        default:
          z2.skipType(ke2 & 7);
          break;
      }
    }
    return fe2;
  }, fromJSON(I2) {
    return { type: Ce2(I2.type) ? String(I2.type) : void 0, data: ft(I2.data) ? I2.data : void 0, x: Ce2(I2 == null ? void 0 : I2.x) ? I2.x : void 0, y: Ce2(I2 == null ? void 0 : I2.y) ? I2.y : void 0, width: Ce2(I2 == null ? void 0 : I2.width) ? I2.width : void 0, height: Ce2(I2 == null ? void 0 : I2.height) ? I2.height : void 0, rotation: Ce2(I2.rotation) ? Number(I2.rotation) : void 0, opacity: Ce2(I2.opacity) ? Number(I2.opacity) : void 0, scale: Ce2(I2.scale) ? Number(I2.scale) : void 0, hidden: Ce2(I2.hidden) ? !!I2.hidden : void 0, children: Array.isArray(I2.children) ? [...I2.children] : void 0, parentId: Ce2(I2.parentId) ? String(I2.parentId) : void 0, metadata: Ce2(I2 == null ? void 0 : I2.metadata) ? I2.metadata : void 0, requestMetadata: Ce2(I2 == null ? void 0 : I2.requestMetadata) ? I2.requestMetadata : void 0, requestAnimation: Array.isArray(I2 == null ? void 0 : I2.requestAnimation) ? I2.requestAnimation.map((F2) => a92.LayerAnimation.fromJSON(F2)) : [] };
  }, toJSON(I2) {
    const F2 = {};
    return I2.type !== void 0 && (F2.type = I2.type), I2.data !== void 0 && (F2.data = I2.data), I2.x !== void 0 && (F2.x = I2.x), I2.y !== void 0 && (F2.y = I2.y), I2.width !== void 0 && (F2.width = I2.width), I2.height !== void 0 && (F2.height = I2.height), I2.rotation !== void 0 && (F2.rotation = I2.rotation), I2.opacity !== void 0 && (F2.opacity = I2.opacity), I2.scale !== void 0 && (F2.scale = I2.scale), I2.hidden !== void 0 && (F2.hidden = I2.hidden), I2.children !== void 0 && (F2.children = I2.children), I2.parentId !== void 0 && (F2.parentId = I2.parentId), I2.metadata !== void 0 && (F2.metadata = I2.metadata), I2.requestMetadata !== void 0 && (F2.requestMetadata = I2.requestMetadata), I2.requestAnimation ? F2.requestAnimation = I2.requestAnimation.map((z2) => z2 ? a92.LayerAnimation.toJSON(z2) : void 0) : F2.requestAnimation = [], F2;
  }, fromPartial(I2) {
    var F2, z2, Te2, fe2, ke2, it, mt, vt, st, ut, yt, gt, bt, St, Et;
    const ct = je2();
    return ct.type = (F2 = I2.type) !== null && F2 !== void 0 ? F2 : void 0, ct.data = (z2 = I2.data) !== null && z2 !== void 0 ? z2 : void 0, ct.x = (Te2 = I2.x) !== null && Te2 !== void 0 ? Te2 : void 0, ct.y = (fe2 = I2.y) !== null && fe2 !== void 0 ? fe2 : void 0, ct.width = (ke2 = I2.width) !== null && ke2 !== void 0 ? ke2 : void 0, ct.height = (it = I2.height) !== null && it !== void 0 ? it : void 0, ct.rotation = (mt = I2.rotation) !== null && mt !== void 0 ? mt : void 0, ct.opacity = (vt = I2.opacity) !== null && vt !== void 0 ? vt : void 0, ct.scale = (st = I2.scale) !== null && st !== void 0 ? st : void 0, ct.hidden = (ut = I2.hidden) !== null && ut !== void 0 ? ut : void 0, ct.children = (yt = I2.children) !== null && yt !== void 0 ? yt : void 0, ct.parentId = (gt = I2.parentId) !== null && gt !== void 0 ? gt : void 0, ct.metadata = (bt = I2.metadata) !== null && bt !== void 0 ? bt : void 0, ct.requestMetadata = (St = I2.requestMetadata) !== null && St !== void 0 ? St : void 0, ct.requestAnimation = ((Et = I2.requestAnimation) === null || Et === void 0 ? void 0 : Et.map((Xe2) => a92.LayerAnimation.fromPartial(Xe2))) || [], ct;
  } };
  function tt() {
    return { id: "", type: void 0, data: void 0, x: void 0, y: void 0, width: void 0, height: void 0, rotation: void 0, opacity: void 0, scale: void 0, hidden: void 0, children: void 0, parentId: void 0, metadata: void 0, requestMetadata: void 0, requestAnimation: [] };
  }
  a92.PartialLayerWithID = { encode(I2, F2 = g2.Writer.create()) {
    I2.id !== "" && F2.uint32(8002).string(I2.id), I2.type !== void 0 && F2.uint32(10).string(I2.type), I2.data !== void 0 && E2.Struct.encode(E2.Struct.wrap(I2.data), F2.uint32(18).fork()).ldelim(), I2.x !== void 0 && E2.Value.encode(E2.Value.wrap(I2.x), F2.uint32(26).fork()).ldelim(), I2.y !== void 0 && E2.Value.encode(E2.Value.wrap(I2.y), F2.uint32(34).fork()).ldelim(), I2.width !== void 0 && E2.Value.encode(E2.Value.wrap(I2.width), F2.uint32(42).fork()).ldelim(), I2.height !== void 0 && E2.Value.encode(E2.Value.wrap(I2.height), F2.uint32(50).fork()).ldelim(), I2.rotation !== void 0 && F2.uint32(57).double(I2.rotation), I2.opacity !== void 0 && F2.uint32(65).double(I2.opacity), I2.scale !== void 0 && F2.uint32(73).double(I2.scale), I2.hidden !== void 0 && F2.uint32(80).bool(I2.hidden), I2.children !== void 0 && E2.ListValue.encode(E2.ListValue.wrap(I2.children), F2.uint32(98).fork()).ldelim(), I2.parentId !== void 0 && F2.uint32(106).string(I2.parentId), I2.metadata !== void 0 && E2.Value.encode(E2.Value.wrap(I2.metadata), F2.uint32(114).fork()).ldelim(), I2.requestMetadata !== void 0 && E2.Value.encode(E2.Value.wrap(I2.requestMetadata), F2.uint32(802).fork()).ldelim();
    for (const z2 of I2.requestAnimation)
      a92.LayerAnimation.encode(z2, F2.uint32(826).fork()).ldelim();
    return F2;
  }, decode(I2, F2) {
    const z2 = I2 instanceof g2.Reader ? I2 : new g2.Reader(I2);
    let Te2 = F2 === void 0 ? z2.len : z2.pos + F2;
    const fe2 = tt();
    for (; z2.pos < Te2; ) {
      const ke2 = z2.uint32();
      switch (ke2 >>> 3) {
        case 1e3:
          fe2.id = z2.string();
          break;
        case 1:
          fe2.type = z2.string();
          break;
        case 2:
          fe2.data = E2.Struct.unwrap(E2.Struct.decode(z2, z2.uint32()));
          break;
        case 3:
          fe2.x = E2.Value.unwrap(E2.Value.decode(z2, z2.uint32()));
          break;
        case 4:
          fe2.y = E2.Value.unwrap(E2.Value.decode(z2, z2.uint32()));
          break;
        case 5:
          fe2.width = E2.Value.unwrap(E2.Value.decode(z2, z2.uint32()));
          break;
        case 6:
          fe2.height = E2.Value.unwrap(E2.Value.decode(z2, z2.uint32()));
          break;
        case 7:
          fe2.rotation = z2.double();
          break;
        case 8:
          fe2.opacity = z2.double();
          break;
        case 9:
          fe2.scale = z2.double();
          break;
        case 10:
          fe2.hidden = z2.bool();
          break;
        case 12:
          fe2.children = E2.ListValue.unwrap(E2.ListValue.decode(z2, z2.uint32()));
          break;
        case 13:
          fe2.parentId = z2.string();
          break;
        case 14:
          fe2.metadata = E2.Value.unwrap(E2.Value.decode(z2, z2.uint32()));
          break;
        case 100:
          fe2.requestMetadata = E2.Value.unwrap(E2.Value.decode(z2, z2.uint32()));
          break;
        case 103:
          fe2.requestAnimation.push(a92.LayerAnimation.decode(z2, z2.uint32()));
          break;
        default:
          z2.skipType(ke2 & 7);
          break;
      }
    }
    return fe2;
  }, fromJSON(I2) {
    return { id: Ce2(I2.id) ? String(I2.id) : "", type: Ce2(I2.type) ? String(I2.type) : void 0, data: ft(I2.data) ? I2.data : void 0, x: Ce2(I2 == null ? void 0 : I2.x) ? I2.x : void 0, y: Ce2(I2 == null ? void 0 : I2.y) ? I2.y : void 0, width: Ce2(I2 == null ? void 0 : I2.width) ? I2.width : void 0, height: Ce2(I2 == null ? void 0 : I2.height) ? I2.height : void 0, rotation: Ce2(I2.rotation) ? Number(I2.rotation) : void 0, opacity: Ce2(I2.opacity) ? Number(I2.opacity) : void 0, scale: Ce2(I2.scale) ? Number(I2.scale) : void 0, hidden: Ce2(I2.hidden) ? !!I2.hidden : void 0, children: Array.isArray(I2.children) ? [...I2.children] : void 0, parentId: Ce2(I2.parentId) ? String(I2.parentId) : void 0, metadata: Ce2(I2 == null ? void 0 : I2.metadata) ? I2.metadata : void 0, requestMetadata: Ce2(I2 == null ? void 0 : I2.requestMetadata) ? I2.requestMetadata : void 0, requestAnimation: Array.isArray(I2 == null ? void 0 : I2.requestAnimation) ? I2.requestAnimation.map((F2) => a92.LayerAnimation.fromJSON(F2)) : [] };
  }, toJSON(I2) {
    const F2 = {};
    return I2.id !== void 0 && (F2.id = I2.id), I2.type !== void 0 && (F2.type = I2.type), I2.data !== void 0 && (F2.data = I2.data), I2.x !== void 0 && (F2.x = I2.x), I2.y !== void 0 && (F2.y = I2.y), I2.width !== void 0 && (F2.width = I2.width), I2.height !== void 0 && (F2.height = I2.height), I2.rotation !== void 0 && (F2.rotation = I2.rotation), I2.opacity !== void 0 && (F2.opacity = I2.opacity), I2.scale !== void 0 && (F2.scale = I2.scale), I2.hidden !== void 0 && (F2.hidden = I2.hidden), I2.children !== void 0 && (F2.children = I2.children), I2.parentId !== void 0 && (F2.parentId = I2.parentId), I2.metadata !== void 0 && (F2.metadata = I2.metadata), I2.requestMetadata !== void 0 && (F2.requestMetadata = I2.requestMetadata), I2.requestAnimation ? F2.requestAnimation = I2.requestAnimation.map((z2) => z2 ? a92.LayerAnimation.toJSON(z2) : void 0) : F2.requestAnimation = [], F2;
  }, fromPartial(I2) {
    var F2, z2, Te2, fe2, ke2, it, mt, vt, st, ut, yt, gt, bt, St, Et, ct;
    const Xe2 = tt();
    return Xe2.id = (F2 = I2.id) !== null && F2 !== void 0 ? F2 : "", Xe2.type = (z2 = I2.type) !== null && z2 !== void 0 ? z2 : void 0, Xe2.data = (Te2 = I2.data) !== null && Te2 !== void 0 ? Te2 : void 0, Xe2.x = (fe2 = I2.x) !== null && fe2 !== void 0 ? fe2 : void 0, Xe2.y = (ke2 = I2.y) !== null && ke2 !== void 0 ? ke2 : void 0, Xe2.width = (it = I2.width) !== null && it !== void 0 ? it : void 0, Xe2.height = (mt = I2.height) !== null && mt !== void 0 ? mt : void 0, Xe2.rotation = (vt = I2.rotation) !== null && vt !== void 0 ? vt : void 0, Xe2.opacity = (st = I2.opacity) !== null && st !== void 0 ? st : void 0, Xe2.scale = (ut = I2.scale) !== null && ut !== void 0 ? ut : void 0, Xe2.hidden = (yt = I2.hidden) !== null && yt !== void 0 ? yt : void 0, Xe2.children = (gt = I2.children) !== null && gt !== void 0 ? gt : void 0, Xe2.parentId = (bt = I2.parentId) !== null && bt !== void 0 ? bt : void 0, Xe2.metadata = (St = I2.metadata) !== null && St !== void 0 ? St : void 0, Xe2.requestMetadata = (Et = I2.requestMetadata) !== null && Et !== void 0 ? Et : void 0, Xe2.requestAnimation = ((ct = I2.requestAnimation) === null || ct === void 0 ? void 0 : ct.map((Ct) => a92.LayerAnimation.fromPartial(Ct))) || [], Xe2;
  } };
  function Oe2() {
    return { layoutId: "" };
  }
  a92.ListLayersRequest = { encode(I2, F2 = g2.Writer.create()) {
    return I2.layoutId !== "" && F2.uint32(10).string(I2.layoutId), F2;
  }, decode(I2, F2) {
    const z2 = I2 instanceof g2.Reader ? I2 : new g2.Reader(I2);
    let Te2 = F2 === void 0 ? z2.len : z2.pos + F2;
    const fe2 = Oe2();
    for (; z2.pos < Te2; ) {
      const ke2 = z2.uint32();
      switch (ke2 >>> 3) {
        case 1:
          fe2.layoutId = z2.string();
          break;
        default:
          z2.skipType(ke2 & 7);
          break;
      }
    }
    return fe2;
  }, fromJSON(I2) {
    return { layoutId: Ce2(I2.layoutId) ? String(I2.layoutId) : "" };
  }, toJSON(I2) {
    const F2 = {};
    return I2.layoutId !== void 0 && (F2.layoutId = I2.layoutId), F2;
  }, fromPartial(I2) {
    var F2;
    const z2 = Oe2();
    return z2.layoutId = (F2 = I2.layoutId) !== null && F2 !== void 0 ? F2 : "", z2;
  } };
  function P2() {
    return { layers: [] };
  }
  a92.ListLayersResponse = { encode(I2, F2 = g2.Writer.create()) {
    for (const z2 of I2.layers)
      a92.Layer.encode(z2, F2.uint32(10).fork()).ldelim();
    return F2;
  }, decode(I2, F2) {
    const z2 = I2 instanceof g2.Reader ? I2 : new g2.Reader(I2);
    let Te2 = F2 === void 0 ? z2.len : z2.pos + F2;
    const fe2 = P2();
    for (; z2.pos < Te2; ) {
      const ke2 = z2.uint32();
      switch (ke2 >>> 3) {
        case 1:
          fe2.layers.push(a92.Layer.decode(z2, z2.uint32()));
          break;
        default:
          z2.skipType(ke2 & 7);
          break;
      }
    }
    return fe2;
  }, fromJSON(I2) {
    return { layers: Array.isArray(I2 == null ? void 0 : I2.layers) ? I2.layers.map((F2) => a92.Layer.fromJSON(F2)) : [] };
  }, toJSON(I2) {
    const F2 = {};
    return I2.layers ? F2.layers = I2.layers.map((z2) => z2 ? a92.Layer.toJSON(z2) : void 0) : F2.layers = [], F2;
  }, fromPartial(I2) {
    var F2;
    const z2 = P2();
    return z2.layers = ((F2 = I2.layers) === null || F2 === void 0 ? void 0 : F2.map((Te2) => a92.Layer.fromPartial(Te2))) || [], z2;
  } };
  function X2() {
    return { layoutId: "", layer: void 0 };
  }
  a92.CreateLayerRequest = { encode(I2, F2 = g2.Writer.create()) {
    return I2.layoutId !== "" && F2.uint32(10).string(I2.layoutId), I2.layer !== void 0 && a92.PartialLayer.encode(I2.layer, F2.uint32(18).fork()).ldelim(), F2;
  }, decode(I2, F2) {
    const z2 = I2 instanceof g2.Reader ? I2 : new g2.Reader(I2);
    let Te2 = F2 === void 0 ? z2.len : z2.pos + F2;
    const fe2 = X2();
    for (; z2.pos < Te2; ) {
      const ke2 = z2.uint32();
      switch (ke2 >>> 3) {
        case 1:
          fe2.layoutId = z2.string();
          break;
        case 2:
          fe2.layer = a92.PartialLayer.decode(z2, z2.uint32());
          break;
        default:
          z2.skipType(ke2 & 7);
          break;
      }
    }
    return fe2;
  }, fromJSON(I2) {
    return { layoutId: Ce2(I2.layoutId) ? String(I2.layoutId) : "", layer: Ce2(I2.layer) ? a92.PartialLayer.fromJSON(I2.layer) : void 0 };
  }, toJSON(I2) {
    const F2 = {};
    return I2.layoutId !== void 0 && (F2.layoutId = I2.layoutId), I2.layer !== void 0 && (F2.layer = I2.layer ? a92.PartialLayer.toJSON(I2.layer) : void 0), F2;
  }, fromPartial(I2) {
    var F2;
    const z2 = X2();
    return z2.layoutId = (F2 = I2.layoutId) !== null && F2 !== void 0 ? F2 : "", z2.layer = I2.layer !== void 0 && I2.layer !== null ? a92.PartialLayer.fromPartial(I2.layer) : void 0, z2;
  } };
  function ie2() {
    return { layoutId: "", layerId: "" };
  }
  a92.GetLayerRequest = { encode(I2, F2 = g2.Writer.create()) {
    return I2.layoutId !== "" && F2.uint32(10).string(I2.layoutId), I2.layerId !== "" && F2.uint32(18).string(I2.layerId), F2;
  }, decode(I2, F2) {
    const z2 = I2 instanceof g2.Reader ? I2 : new g2.Reader(I2);
    let Te2 = F2 === void 0 ? z2.len : z2.pos + F2;
    const fe2 = ie2();
    for (; z2.pos < Te2; ) {
      const ke2 = z2.uint32();
      switch (ke2 >>> 3) {
        case 1:
          fe2.layoutId = z2.string();
          break;
        case 2:
          fe2.layerId = z2.string();
          break;
        default:
          z2.skipType(ke2 & 7);
          break;
      }
    }
    return fe2;
  }, fromJSON(I2) {
    return { layoutId: Ce2(I2.layoutId) ? String(I2.layoutId) : "", layerId: Ce2(I2.layerId) ? String(I2.layerId) : "" };
  }, toJSON(I2) {
    const F2 = {};
    return I2.layoutId !== void 0 && (F2.layoutId = I2.layoutId), I2.layerId !== void 0 && (F2.layerId = I2.layerId), F2;
  }, fromPartial(I2) {
    var F2, z2;
    const Te2 = ie2();
    return Te2.layoutId = (F2 = I2.layoutId) !== null && F2 !== void 0 ? F2 : "", Te2.layerId = (z2 = I2.layerId) !== null && z2 !== void 0 ? z2 : "", Te2;
  } };
  function Ee2() {
    return { layoutId: "", layerId: "", layer: void 0 };
  }
  a92.UpdateLayerRequest = { encode(I2, F2 = g2.Writer.create()) {
    return I2.layoutId !== "" && F2.uint32(10).string(I2.layoutId), I2.layerId !== "" && F2.uint32(18).string(I2.layerId), I2.layer !== void 0 && a92.PartialLayer.encode(I2.layer, F2.uint32(26).fork()).ldelim(), F2;
  }, decode(I2, F2) {
    const z2 = I2 instanceof g2.Reader ? I2 : new g2.Reader(I2);
    let Te2 = F2 === void 0 ? z2.len : z2.pos + F2;
    const fe2 = Ee2();
    for (; z2.pos < Te2; ) {
      const ke2 = z2.uint32();
      switch (ke2 >>> 3) {
        case 1:
          fe2.layoutId = z2.string();
          break;
        case 2:
          fe2.layerId = z2.string();
          break;
        case 3:
          fe2.layer = a92.PartialLayer.decode(z2, z2.uint32());
          break;
        default:
          z2.skipType(ke2 & 7);
          break;
      }
    }
    return fe2;
  }, fromJSON(I2) {
    return { layoutId: Ce2(I2.layoutId) ? String(I2.layoutId) : "", layerId: Ce2(I2.layerId) ? String(I2.layerId) : "", layer: Ce2(I2.layer) ? a92.PartialLayer.fromJSON(I2.layer) : void 0 };
  }, toJSON(I2) {
    const F2 = {};
    return I2.layoutId !== void 0 && (F2.layoutId = I2.layoutId), I2.layerId !== void 0 && (F2.layerId = I2.layerId), I2.layer !== void 0 && (F2.layer = I2.layer ? a92.PartialLayer.toJSON(I2.layer) : void 0), F2;
  }, fromPartial(I2) {
    var F2, z2;
    const Te2 = Ee2();
    return Te2.layoutId = (F2 = I2.layoutId) !== null && F2 !== void 0 ? F2 : "", Te2.layerId = (z2 = I2.layerId) !== null && z2 !== void 0 ? z2 : "", Te2.layer = I2.layer !== void 0 && I2.layer !== null ? a92.PartialLayer.fromPartial(I2.layer) : void 0, Te2;
  } };
  function ue2() {
    return { requestMetadata: void 0 };
  }
  a92.DeleteLayerPayload = { encode(I2, F2 = g2.Writer.create()) {
    return I2.requestMetadata !== void 0 && E2.Value.encode(E2.Value.wrap(I2.requestMetadata), F2.uint32(802).fork()).ldelim(), F2;
  }, decode(I2, F2) {
    const z2 = I2 instanceof g2.Reader ? I2 : new g2.Reader(I2);
    let Te2 = F2 === void 0 ? z2.len : z2.pos + F2;
    const fe2 = ue2();
    for (; z2.pos < Te2; ) {
      const ke2 = z2.uint32();
      switch (ke2 >>> 3) {
        case 100:
          fe2.requestMetadata = E2.Value.unwrap(E2.Value.decode(z2, z2.uint32()));
          break;
        default:
          z2.skipType(ke2 & 7);
          break;
      }
    }
    return fe2;
  }, fromJSON(I2) {
    return { requestMetadata: Ce2(I2 == null ? void 0 : I2.requestMetadata) ? I2.requestMetadata : void 0 };
  }, toJSON(I2) {
    const F2 = {};
    return I2.requestMetadata !== void 0 && (F2.requestMetadata = I2.requestMetadata), F2;
  }, fromPartial(I2) {
    var F2;
    const z2 = ue2();
    return z2.requestMetadata = (F2 = I2.requestMetadata) !== null && F2 !== void 0 ? F2 : void 0, z2;
  } };
  function O2() {
    return { id: "", requestMetadata: void 0 };
  }
  a92.BatchDeleteLayerRequest = { encode(I2, F2 = g2.Writer.create()) {
    return I2.id !== "" && F2.uint32(10).string(I2.id), I2.requestMetadata !== void 0 && E2.Value.encode(E2.Value.wrap(I2.requestMetadata), F2.uint32(802).fork()).ldelim(), F2;
  }, decode(I2, F2) {
    const z2 = I2 instanceof g2.Reader ? I2 : new g2.Reader(I2);
    let Te2 = F2 === void 0 ? z2.len : z2.pos + F2;
    const fe2 = O2();
    for (; z2.pos < Te2; ) {
      const ke2 = z2.uint32();
      switch (ke2 >>> 3) {
        case 1:
          fe2.id = z2.string();
          break;
        case 100:
          fe2.requestMetadata = E2.Value.unwrap(E2.Value.decode(z2, z2.uint32()));
          break;
        default:
          z2.skipType(ke2 & 7);
          break;
      }
    }
    return fe2;
  }, fromJSON(I2) {
    return { id: Ce2(I2.id) ? String(I2.id) : "", requestMetadata: Ce2(I2 == null ? void 0 : I2.requestMetadata) ? I2.requestMetadata : void 0 };
  }, toJSON(I2) {
    const F2 = {};
    return I2.id !== void 0 && (F2.id = I2.id), I2.requestMetadata !== void 0 && (F2.requestMetadata = I2.requestMetadata), F2;
  }, fromPartial(I2) {
    var F2, z2;
    const Te2 = O2();
    return Te2.id = (F2 = I2.id) !== null && F2 !== void 0 ? F2 : "", Te2.requestMetadata = (z2 = I2.requestMetadata) !== null && z2 !== void 0 ? z2 : void 0, Te2;
  } };
  function j() {
    return { layoutId: "", layers: [], requestMetadata: void 0, requestAnimationMode: void 0 };
  }
  a92.BatchLayerRequest = { encode(I2, F2 = g2.Writer.create()) {
    I2.layoutId !== "" && F2.uint32(10).string(I2.layoutId);
    for (const z2 of I2.layers)
      a92.BatchLayerRequest_BatchItem.encode(z2, F2.uint32(18).fork()).ldelim();
    return I2.requestMetadata !== void 0 && E2.Value.encode(E2.Value.wrap(I2.requestMetadata), F2.uint32(802).fork()).ldelim(), I2.requestAnimationMode !== void 0 && F2.uint32(808).int32(q2(I2.requestAnimationMode)), F2;
  }, decode(I2, F2) {
    const z2 = I2 instanceof g2.Reader ? I2 : new g2.Reader(I2);
    let Te2 = F2 === void 0 ? z2.len : z2.pos + F2;
    const fe2 = j();
    for (; z2.pos < Te2; ) {
      const ke2 = z2.uint32();
      switch (ke2 >>> 3) {
        case 1:
          fe2.layoutId = z2.string();
          break;
        case 2:
          fe2.layers.push(a92.BatchLayerRequest_BatchItem.decode(z2, z2.uint32()));
          break;
        case 100:
          fe2.requestMetadata = E2.Value.unwrap(E2.Value.decode(z2, z2.uint32()));
          break;
        case 101:
          fe2.requestAnimationMode = J2(z2.int32());
          break;
        default:
          z2.skipType(ke2 & 7);
          break;
      }
    }
    return fe2;
  }, fromJSON(I2) {
    return { layoutId: Ce2(I2.layoutId) ? String(I2.layoutId) : "", layers: Array.isArray(I2 == null ? void 0 : I2.layers) ? I2.layers.map((F2) => a92.BatchLayerRequest_BatchItem.fromJSON(F2)) : [], requestMetadata: Ce2(I2 == null ? void 0 : I2.requestMetadata) ? I2.requestMetadata : void 0, requestAnimationMode: Ce2(I2.requestAnimationMode) ? J2(I2.requestAnimationMode) : void 0 };
  }, toJSON(I2) {
    const F2 = {};
    return I2.layoutId !== void 0 && (F2.layoutId = I2.layoutId), I2.layers ? F2.layers = I2.layers.map((z2) => z2 ? a92.BatchLayerRequest_BatchItem.toJSON(z2) : void 0) : F2.layers = [], I2.requestMetadata !== void 0 && (F2.requestMetadata = I2.requestMetadata), I2.requestAnimationMode !== void 0 && (F2.requestAnimationMode = I2.requestAnimationMode !== void 0 ? V2(I2.requestAnimationMode) : void 0), F2;
  }, fromPartial(I2) {
    var F2, z2, Te2, fe2;
    const ke2 = j();
    return ke2.layoutId = (F2 = I2.layoutId) !== null && F2 !== void 0 ? F2 : "", ke2.layers = ((z2 = I2.layers) === null || z2 === void 0 ? void 0 : z2.map((it) => a92.BatchLayerRequest_BatchItem.fromPartial(it))) || [], ke2.requestMetadata = (Te2 = I2.requestMetadata) !== null && Te2 !== void 0 ? Te2 : void 0, ke2.requestAnimationMode = (fe2 = I2.requestAnimationMode) !== null && fe2 !== void 0 ? fe2 : void 0, ke2;
  } };
  function se2() {
    return { create: void 0, update: void 0, delete: void 0 };
  }
  a92.BatchLayerRequest_BatchItem = { encode(I2, F2 = g2.Writer.create()) {
    return I2.create !== void 0 && a92.PartialLayer.encode(I2.create, F2.uint32(10).fork()).ldelim(), I2.update !== void 0 && a92.PartialLayerWithID.encode(I2.update, F2.uint32(18).fork()).ldelim(), I2.delete !== void 0 && a92.BatchDeleteLayerRequest.encode(I2.delete, F2.uint32(26).fork()).ldelim(), F2;
  }, decode(I2, F2) {
    const z2 = I2 instanceof g2.Reader ? I2 : new g2.Reader(I2);
    let Te2 = F2 === void 0 ? z2.len : z2.pos + F2;
    const fe2 = se2();
    for (; z2.pos < Te2; ) {
      const ke2 = z2.uint32();
      switch (ke2 >>> 3) {
        case 1:
          fe2.create = a92.PartialLayer.decode(z2, z2.uint32());
          break;
        case 2:
          fe2.update = a92.PartialLayerWithID.decode(z2, z2.uint32());
          break;
        case 3:
          fe2.delete = a92.BatchDeleteLayerRequest.decode(z2, z2.uint32());
          break;
        default:
          z2.skipType(ke2 & 7);
          break;
      }
    }
    return fe2;
  }, fromJSON(I2) {
    return { create: Ce2(I2.create) ? a92.PartialLayer.fromJSON(I2.create) : void 0, update: Ce2(I2.update) ? a92.PartialLayerWithID.fromJSON(I2.update) : void 0, delete: Ce2(I2.delete) ? a92.BatchDeleteLayerRequest.fromJSON(I2.delete) : void 0 };
  }, toJSON(I2) {
    const F2 = {};
    return I2.create !== void 0 && (F2.create = I2.create ? a92.PartialLayer.toJSON(I2.create) : void 0), I2.update !== void 0 && (F2.update = I2.update ? a92.PartialLayerWithID.toJSON(I2.update) : void 0), I2.delete !== void 0 && (F2.delete = I2.delete ? a92.BatchDeleteLayerRequest.toJSON(I2.delete) : void 0), F2;
  }, fromPartial(I2) {
    const F2 = se2();
    return F2.create = I2.create !== void 0 && I2.create !== null ? a92.PartialLayer.fromPartial(I2.create) : void 0, F2.update = I2.update !== void 0 && I2.update !== null ? a92.PartialLayerWithID.fromPartial(I2.update) : void 0, F2.delete = I2.delete !== void 0 && I2.delete !== null ? a92.BatchDeleteLayerRequest.fromPartial(I2.delete) : void 0, F2;
  } };
  function _e() {
    return { create: void 0, update: void 0, delete: void 0 };
  }
  a92.LayoutEvent = { encode(I2, F2 = g2.Writer.create()) {
    return I2.create !== void 0 && a92.Layout.encode(I2.create, F2.uint32(10).fork()).ldelim(), I2.update !== void 0 && a92.Layout.encode(I2.update, F2.uint32(18).fork()).ldelim(), I2.delete !== void 0 && a92.DeleteLayoutResponse.encode(I2.delete, F2.uint32(26).fork()).ldelim(), F2;
  }, decode(I2, F2) {
    const z2 = I2 instanceof g2.Reader ? I2 : new g2.Reader(I2);
    let Te2 = F2 === void 0 ? z2.len : z2.pos + F2;
    const fe2 = _e();
    for (; z2.pos < Te2; ) {
      const ke2 = z2.uint32();
      switch (ke2 >>> 3) {
        case 1:
          fe2.create = a92.Layout.decode(z2, z2.uint32());
          break;
        case 2:
          fe2.update = a92.Layout.decode(z2, z2.uint32());
          break;
        case 3:
          fe2.delete = a92.DeleteLayoutResponse.decode(z2, z2.uint32());
          break;
        default:
          z2.skipType(ke2 & 7);
          break;
      }
    }
    return fe2;
  }, fromJSON(I2) {
    return { create: Ce2(I2.create) ? a92.Layout.fromJSON(I2.create) : void 0, update: Ce2(I2.update) ? a92.Layout.fromJSON(I2.update) : void 0, delete: Ce2(I2.delete) ? a92.DeleteLayoutResponse.fromJSON(I2.delete) : void 0 };
  }, toJSON(I2) {
    const F2 = {};
    return I2.create !== void 0 && (F2.create = I2.create ? a92.Layout.toJSON(I2.create) : void 0), I2.update !== void 0 && (F2.update = I2.update ? a92.Layout.toJSON(I2.update) : void 0), I2.delete !== void 0 && (F2.delete = I2.delete ? a92.DeleteLayoutResponse.toJSON(I2.delete) : void 0), F2;
  }, fromPartial(I2) {
    const F2 = _e();
    return F2.create = I2.create !== void 0 && I2.create !== null ? a92.Layout.fromPartial(I2.create) : void 0, F2.update = I2.update !== void 0 && I2.update !== null ? a92.Layout.fromPartial(I2.update) : void 0, F2.delete = I2.delete !== void 0 && I2.delete !== null ? a92.DeleteLayoutResponse.fromPartial(I2.delete) : void 0, F2;
  } };
  function ve2() {
    return { create: void 0, update: void 0, delete: void 0, batch: void 0 };
  }
  a92.LayerEvent = { encode(I2, F2 = g2.Writer.create()) {
    return I2.create !== void 0 && a92.Layer.encode(I2.create, F2.uint32(10).fork()).ldelim(), I2.update !== void 0 && a92.Layer.encode(I2.update, F2.uint32(18).fork()).ldelim(), I2.delete !== void 0 && a92.DeleteLayerResponse.encode(I2.delete, F2.uint32(26).fork()).ldelim(), I2.batch !== void 0 && a92.BatchLayerResponse.encode(I2.batch, F2.uint32(34).fork()).ldelim(), F2;
  }, decode(I2, F2) {
    const z2 = I2 instanceof g2.Reader ? I2 : new g2.Reader(I2);
    let Te2 = F2 === void 0 ? z2.len : z2.pos + F2;
    const fe2 = ve2();
    for (; z2.pos < Te2; ) {
      const ke2 = z2.uint32();
      switch (ke2 >>> 3) {
        case 1:
          fe2.create = a92.Layer.decode(z2, z2.uint32());
          break;
        case 2:
          fe2.update = a92.Layer.decode(z2, z2.uint32());
          break;
        case 3:
          fe2.delete = a92.DeleteLayerResponse.decode(z2, z2.uint32());
          break;
        case 4:
          fe2.batch = a92.BatchLayerResponse.decode(z2, z2.uint32());
          break;
        default:
          z2.skipType(ke2 & 7);
          break;
      }
    }
    return fe2;
  }, fromJSON(I2) {
    return { create: Ce2(I2.create) ? a92.Layer.fromJSON(I2.create) : void 0, update: Ce2(I2.update) ? a92.Layer.fromJSON(I2.update) : void 0, delete: Ce2(I2.delete) ? a92.DeleteLayerResponse.fromJSON(I2.delete) : void 0, batch: Ce2(I2.batch) ? a92.BatchLayerResponse.fromJSON(I2.batch) : void 0 };
  }, toJSON(I2) {
    const F2 = {};
    return I2.create !== void 0 && (F2.create = I2.create ? a92.Layer.toJSON(I2.create) : void 0), I2.update !== void 0 && (F2.update = I2.update ? a92.Layer.toJSON(I2.update) : void 0), I2.delete !== void 0 && (F2.delete = I2.delete ? a92.DeleteLayerResponse.toJSON(I2.delete) : void 0), I2.batch !== void 0 && (F2.batch = I2.batch ? a92.BatchLayerResponse.toJSON(I2.batch) : void 0), F2;
  }, fromPartial(I2) {
    const F2 = ve2();
    return F2.create = I2.create !== void 0 && I2.create !== null ? a92.Layer.fromPartial(I2.create) : void 0, F2.update = I2.update !== void 0 && I2.update !== null ? a92.Layer.fromPartial(I2.update) : void 0, F2.delete = I2.delete !== void 0 && I2.delete !== null ? a92.DeleteLayerResponse.fromPartial(I2.delete) : void 0, F2.batch = I2.batch !== void 0 && I2.batch !== null ? a92.BatchLayerResponse.fromPartial(I2.batch) : void 0, F2;
  } };
  function De2() {
    return { layout: void 0, layer: void 0 };
  }
  a92.Event = { encode(I2, F2 = g2.Writer.create()) {
    return I2.layout !== void 0 && a92.LayoutEvent.encode(I2.layout, F2.uint32(10).fork()).ldelim(), I2.layer !== void 0 && a92.LayerEvent.encode(I2.layer, F2.uint32(18).fork()).ldelim(), F2;
  }, decode(I2, F2) {
    const z2 = I2 instanceof g2.Reader ? I2 : new g2.Reader(I2);
    let Te2 = F2 === void 0 ? z2.len : z2.pos + F2;
    const fe2 = De2();
    for (; z2.pos < Te2; ) {
      const ke2 = z2.uint32();
      switch (ke2 >>> 3) {
        case 1:
          fe2.layout = a92.LayoutEvent.decode(z2, z2.uint32());
          break;
        case 2:
          fe2.layer = a92.LayerEvent.decode(z2, z2.uint32());
          break;
        default:
          z2.skipType(ke2 & 7);
          break;
      }
    }
    return fe2;
  }, fromJSON(I2) {
    return { layout: Ce2(I2.layout) ? a92.LayoutEvent.fromJSON(I2.layout) : void 0, layer: Ce2(I2.layer) ? a92.LayerEvent.fromJSON(I2.layer) : void 0 };
  }, toJSON(I2) {
    const F2 = {};
    return I2.layout !== void 0 && (F2.layout = I2.layout ? a92.LayoutEvent.toJSON(I2.layout) : void 0), I2.layer !== void 0 && (F2.layer = I2.layer ? a92.LayerEvent.toJSON(I2.layer) : void 0), F2;
  }, fromPartial(I2) {
    const F2 = De2();
    return F2.layout = I2.layout !== void 0 && I2.layout !== null ? a92.LayoutEvent.fromPartial(I2.layout) : void 0, F2.layer = I2.layer !== void 0 && I2.layer !== null ? a92.LayerEvent.fromPartial(I2.layer) : void 0, F2;
  } };
  class Ze2 {
    constructor(F2) {
      this.rpc = F2, this.ListLayers = this.ListLayers.bind(this), this.CreateLayer = this.CreateLayer.bind(this), this.GetLayer = this.GetLayer.bind(this), this.UpdateLayer = this.UpdateLayer.bind(this), this.DeleteLayer = this.DeleteLayer.bind(this), this.Batch = this.Batch.bind(this);
    }
    ListLayers(F2) {
      const z2 = a92.ListLayersRequest.encode(F2).finish();
      return this.rpc.request("apis.layout.v2.LayerService", "ListLayers", z2).then((fe2) => a92.ListLayersResponse.decode(new g2.Reader(fe2)));
    }
    CreateLayer(F2) {
      const z2 = a92.CreateLayerRequest.encode(F2).finish();
      return this.rpc.request("apis.layout.v2.LayerService", "CreateLayer", z2).then((fe2) => a92.Layer.decode(new g2.Reader(fe2)));
    }
    GetLayer(F2) {
      const z2 = a92.GetLayerRequest.encode(F2).finish();
      return this.rpc.request("apis.layout.v2.LayerService", "GetLayer", z2).then((fe2) => a92.Layer.decode(new g2.Reader(fe2)));
    }
    UpdateLayer(F2) {
      const z2 = a92.UpdateLayerRequest.encode(F2).finish();
      return this.rpc.request("apis.layout.v2.LayerService", "UpdateLayer", z2).then((fe2) => a92.Layer.decode(new g2.Reader(fe2)));
    }
    DeleteLayer(F2) {
      const z2 = a92.DeleteLayerRequest.encode(F2).finish();
      return this.rpc.request("apis.layout.v2.LayerService", "DeleteLayer", z2).then((fe2) => a92.DeleteLayerResponse.decode(new g2.Reader(fe2)));
    }
    Batch(F2) {
      const z2 = a92.BatchLayerRequest.encode(F2).finish();
      return this.rpc.request("apis.layout.v2.LayerService", "Batch", z2).then((fe2) => a92.BatchLayerResponse.decode(new g2.Reader(fe2)));
    }
  }
  a92.LayerServiceClientImpl = Ze2, a92.LayerServiceDefinition = { name: "LayerService", fullName: "apis.layout.v2.LayerService", methods: {
    /** List all layers */
    listLayers: { name: "ListLayers", requestType: a92.ListLayersRequest, requestStream: false, responseType: a92.ListLayersResponse, responseStream: false, options: {} },
    /**
    * Create a layer
    * buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
    * buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
    */
    createLayer: { name: "CreateLayer", requestType: a92.CreateLayerRequest, requestStream: false, responseType: a92.Layer, responseStream: false, options: {} },
    /**
    * Get a single layer
    * buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
    * buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
    */
    getLayer: { name: "GetLayer", requestType: a92.GetLayerRequest, requestStream: false, responseType: a92.Layer, responseStream: false, options: {} },
    /**
    * Update a layer
    * buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
    * buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
    */
    updateLayer: { name: "UpdateLayer", requestType: a92.UpdateLayerRequest, requestStream: false, responseType: a92.Layer, responseStream: false, options: {} },
    /** Delete a layer */
    deleteLayer: { name: "DeleteLayer", requestType: a92.DeleteLayerRequest, requestStream: false, responseType: a92.DeleteLayerResponse, responseStream: false, options: {} },
    /**
    * Batch update
    * buf:lint:ignore RPC_REQUEST_STANDARD_NAME
    * buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
    */
    batch: { name: "Batch", requestType: a92.BatchLayerRequest, requestStream: false, responseType: a92.BatchLayerResponse, responseStream: false, options: {} }
  } };
  class Qe2 {
    constructor(F2) {
      this.rpc = F2, this.ListLayouts = this.ListLayouts.bind(this), this.CreateLayout = this.CreateLayout.bind(this), this.GetLayout = this.GetLayout.bind(this), this.UpdateLayout = this.UpdateLayout.bind(this), this.DeleteLayout = this.DeleteLayout.bind(this);
    }
    ListLayouts(F2) {
      const z2 = a92.ListLayoutsRequest.encode(F2).finish();
      return this.rpc.request("apis.layout.v2.LayoutService", "ListLayouts", z2).then((fe2) => a92.ListLayoutsResponse.decode(new g2.Reader(fe2)));
    }
    CreateLayout(F2) {
      const z2 = a92.CreateLayoutRequest.encode(F2).finish();
      return this.rpc.request("apis.layout.v2.LayoutService", "CreateLayout", z2).then((fe2) => a92.Layout.decode(new g2.Reader(fe2)));
    }
    GetLayout(F2) {
      const z2 = a92.GetLayoutRequest.encode(F2).finish();
      return this.rpc.request("apis.layout.v2.LayoutService", "GetLayout", z2).then((fe2) => a92.Layout.decode(new g2.Reader(fe2)));
    }
    UpdateLayout(F2) {
      const z2 = a92.UpdateLayoutRequest.encode(F2).finish();
      return this.rpc.request("apis.layout.v2.LayoutService", "UpdateLayout", z2).then((fe2) => a92.Layout.decode(new g2.Reader(fe2)));
    }
    DeleteLayout(F2) {
      const z2 = a92.DeleteLayoutRequest.encode(F2).finish();
      return this.rpc.request("apis.layout.v2.LayoutService", "DeleteLayout", z2).then((fe2) => a92.DeleteLayoutResponse.decode(new g2.Reader(fe2)));
    }
  }
  a92.LayoutServiceClientImpl = Qe2, a92.LayoutServiceDefinition = { name: "LayoutService", fullName: "apis.layout.v2.LayoutService", methods: {
    /** Get all layouts owned by the user. */
    listLayouts: { name: "ListLayouts", requestType: a92.ListLayoutsRequest, requestStream: false, responseType: a92.ListLayoutsResponse, responseStream: false, options: {} },
    /**
    * Create a new layout
    * buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
    * buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
    */
    createLayout: { name: "CreateLayout", requestType: a92.CreateLayoutRequest, requestStream: false, responseType: a92.Layout, responseStream: false, options: {} },
    /**
    * Get a layout
    * buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
    * buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
    */
    getLayout: { name: "GetLayout", requestType: a92.GetLayoutRequest, requestStream: false, responseType: a92.Layout, responseStream: false, options: {} },
    /**
    * Update a layout
    * buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
    * buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
    */
    updateLayout: { name: "UpdateLayout", requestType: a92.UpdateLayoutRequest, requestStream: false, responseType: a92.Layout, responseStream: false, options: {} },
    /** Delete a layout */
    deleteLayout: { name: "DeleteLayout", requestType: a92.DeleteLayoutRequest, requestStream: false, responseType: a92.DeleteLayoutResponse, responseStream: false, options: {} }
  } };
  var ot = (() => {
    if (typeof ot < "u")
      return ot;
    if (typeof self < "u")
      return self;
    if (typeof window < "u")
      return window;
    if (typeof commonjsGlobal$1 < "u")
      return commonjsGlobal$1;
    throw "Unable to locate global object";
  })();
  g2.util.Long !== S2.default && (g2.util.Long = S2.default, g2.configure());
  function ft(I2) {
    return typeof I2 == "object" && I2 !== null;
  }
  function Ce2(I2) {
    return I2 != null;
  }
})(api$3);
(function(a92) {
  var u2 = commonjsGlobal$1 && commonjsGlobal$1.__createBinding || (Object.create ? function(v2, S2, g2, E2) {
    E2 === void 0 && (E2 = g2), Object.defineProperty(v2, E2, { enumerable: true, get: function() {
      return S2[g2];
    } });
  } : function(v2, S2, g2, E2) {
    E2 === void 0 && (E2 = g2), v2[E2] = S2[g2];
  }), c = commonjsGlobal$1 && commonjsGlobal$1.__exportStar || function(v2, S2) {
    for (var g2 in v2)
      g2 !== "default" && !S2.hasOwnProperty(g2) && u2(S2, v2, g2);
  };
  Object.defineProperty(a92, "__esModule", { value: true }), a92.layoutApiEventMap = void 0;
  const l2 = api$3;
  c(api$3, a92), a92.layoutApiEventMap = { [l2.EventType.EVENT_TYPE_LAYOUT]: "layout", [l2.EventType.EVENT_TYPE_LAYER]: "layer", [l2.EventType.EVENT_TYPE_UNSPECIFIED]: "unspecified" };
})(dist$2);
var api$2 = {}, browser$2 = false;
const __viteBrowserExternal = {}, __viteBrowserExternal$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({ __proto__: null, default: __viteBrowserExternal }, Symbol.toStringTag, { value: "Module" })), require$$0$1 = /* @__PURE__ */ getAugmentedNamespace(__viteBrowserExternal$1);
var logger = {};
class EnhancedMap extends Map {
  /**
  * If key has a mapping already returns the currently associated value. If
  * there is no mapping, calls the computer which must return a value V.
  * The value is then stored for given key and returned.
  * @param key Key
  * @param computer Computer which is called only if key has no mapping yet.
  * @return Existing value if the key already existed, or the newly computed value.
  */
  computeIfAbsent(u2, c) {
    if (this.has(u2))
      return this.get(u2);
    const l2 = c(u2);
    return this.set(u2, l2), l2;
  }
  /**
  * If the key exists already calls given computer, if the key does not exist
  * this method does nothing.
  *
  * The computer is called with current key and current value associated. The
  * computer can return a (new) value V or undefined. When undefined is returned
  * the key is removed from this map, when a V is returned the key is updated
  * with the new value V.
  * @param key Key
  * @param computer Computer which is called only if the key has a mapping already
  * @return Undefined if the key has no mapping, otherwise the value returned from computer
  */
  computeIfPresent(u2, c) {
    const l2 = this.get(u2);
    if (l2 === void 0)
      return;
    const v2 = c(u2, l2);
    return v2 !== void 0 ? this.set(u2, v2) : this.delete(u2), v2;
  }
  /**
  * Computes a value for given key, the computer can return a value V (in which case the map
  * will set the value for given key), if it returns undefined the mapping for key K will be
  * removed.
  * @param key Key to compute
  * @param computer Computer which is called, note that the currentValue argument contains the existing
  *                 value or is undefined when no mapping exists for the key.
  * @return The newly computed value
  */
  compute(u2, c) {
    const l2 = this.get(u2), v2 = c(u2, l2);
    return v2 ? this.set(u2, v2) : this.delete(u2), v2;
  }
}
var InternalLogLevel;
(function(a92) {
  a92[a92.Trace = 0] = "Trace", a92[a92.Debug = 1] = "Debug", a92[a92.Info = 2] = "Info", a92[a92.Warn = 3] = "Warn", a92[a92.Error = 4] = "Error";
})(InternalLogLevel || (InternalLogLevel = {}));
function getInternalLogger(a92) {
  return provider.getLogger(a92);
}
const INTERNAL_LOGGING_SETTINGS = {
  /**
  * Changes the log level for the internal logging (for all new and existing loggers)
  * @param level New log level
  */
  setInternalLogLevel: (a92) => provider.changeLogLevel(a92),
  /**
  * Changes where messages are written to for all new and existing loggers),
  * by default they are written to the console.
  * @param fnOutput Function to write messages to
  */
  setOutput: (a92) => provider.changeOutput(a92),
  /**
  * Resets the log level and output back to defaults (level to error and writing to console)
  * for all new and existing loggers.
  */
  reset: () => provider.reset()
};
class InternalLoggerImpl {
  constructor(u2, c, l2) {
    this._name = u2, this._level = c, this._fnOutput = l2;
  }
  trace(u2) {
    this.log(InternalLogLevel.Trace, u2);
  }
  debug(u2) {
    this.log(InternalLogLevel.Debug, u2);
  }
  error(u2, c) {
    this.log(InternalLogLevel.Error, u2, c);
  }
  info(u2) {
    this.log(InternalLogLevel.Info, u2);
  }
  warn(u2, c) {
    this.log(InternalLogLevel.Warn, u2, c);
  }
  setLevel(u2) {
    this._level = u2;
  }
  setOutput(u2) {
    this._fnOutput = u2;
  }
  log(u2, c, l2) {
    this._level > u2 || this._fnOutput(`${InternalLogLevel[this._level].toString()} <INTERNAL LOGGER> ${this._name} ${c()}${l2 ? `
` + l2.stack : ""}`);
  }
}
class InternalProviderImpl {
  constructor() {
    this._loggers = new EnhancedMap(), this._logLevel = InternalLogLevel.Error, this._fnOutput = InternalProviderImpl.logConsole;
  }
  getLogger(u2) {
    return this._loggers.computeIfAbsent(u2, (c) => new InternalLoggerImpl(c, this._logLevel, this._fnOutput));
  }
  changeLogLevel(u2) {
    this._logLevel = u2, this._loggers.forEach((c) => c.setLevel(u2));
  }
  changeOutput(u2) {
    this._fnOutput = u2, this._loggers.forEach((c) => c.setOutput(this._fnOutput));
  }
  reset() {
    this.changeLogLevel(InternalLogLevel.Error), this._fnOutput = InternalProviderImpl.logConsole, this._loggers.forEach((u2) => u2.setOutput(this._fnOutput));
  }
  static logConsole(u2) {
    console && console.log && console.log(u2);
  }
}
const provider = new InternalProviderImpl();
var InternalLogger = /* @__PURE__ */ Object.freeze({ __proto__: null, get InternalLogLevel() {
  return InternalLogLevel;
}, getInternalLogger, INTERNAL_LOGGING_SETTINGS }), LogLevel$1;
(function(a92) {
  a92[a92.Trace = 0] = "Trace", a92[a92.Debug = 1] = "Debug", a92[a92.Info = 2] = "Info", a92[a92.Warn = 3] = "Warn", a92[a92.Error = 4] = "Error", a92[a92.Fatal = 5] = "Fatal";
})(LogLevel$1 || (LogLevel$1 = {}));
(function(a92) {
  function u2(c) {
    switch (c.toLowerCase()) {
      case "trace":
        return a92.Trace;
      case "debug":
        return a92.Debug;
      case "info":
        return a92.Info;
      case "warn":
        return a92.Warn;
      case "error":
        return a92.Error;
      case "fatal":
        return a92.Fatal;
      default:
        return;
    }
  }
  a92.toLogLevel = u2;
})(LogLevel$1 || (LogLevel$1 = {}));
class CoreLoggerImpl {
  constructor(u2) {
    this._runtime = u2;
  }
  get id() {
    return this._runtime.id;
  }
  get logLevel() {
    return this._runtime.level;
  }
  get runtimeSettings() {
    return Object.assign({}, this._runtime);
  }
  set runtimeSettings(u2) {
    this._runtime = u2;
  }
  trace(u2, ...c) {
    this.logMessage(LogLevel$1.Trace, u2, c);
  }
  debug(u2, ...c) {
    this.logMessage(LogLevel$1.Debug, u2, c);
  }
  info(u2, ...c) {
    this.logMessage(LogLevel$1.Info, u2, c);
  }
  warn(u2, ...c) {
    this.logMessage(LogLevel$1.Warn, u2, c);
  }
  error(u2, ...c) {
    this.logMessage(LogLevel$1.Error, u2, c);
  }
  fatal(u2, ...c) {
    this.logMessage(LogLevel$1.Fatal, u2, c);
  }
  logMessage(u2, c, l2) {
    if (this._runtime.level > u2)
      return;
    const v2 = Date.now(), S2 = typeof c == "string" ? c : c(), g2 = CoreLoggerImpl.getErrorAndArgs(l2);
    switch (this._runtime.channel.type) {
      case "RawLogChannel":
        this._runtime.channel.write({ message: S2, exception: g2.error, args: g2.args, timeInMillis: v2, level: u2, logNames: this._runtime.name }, this._runtime.argumentFormatter);
        return;
      case "LogChannel":
        this._runtime.channel.write(this.createLogMessage(S2, u2, g2, v2));
        break;
    }
  }
  formatArgValue(u2) {
    try {
      return this._runtime.argumentFormatter(u2);
    } catch {
      return `>>ARG CONVERT FAILED: '${u2 !== void 0 ? u2.toString() : "undefined"}'<<`;
    }
  }
  createLogMessage(u2, c, l2, v2) {
    let S2;
    const g2 = l2.error, E2 = l2.args;
    g2 && (S2 = `${g2.name}: ${g2.message}`, g2.stack && (S2 += `@
${g2.stack}`));
    const _ = this._runtime.dateFormatter(v2);
    let k = LogLevel$1[c].toUpperCase();
    k.length < 5 && (k += " ");
    const L2 = typeof this._runtime.name == "string" ? this._runtime.name : this._runtime.name.join(", "), M2 = typeof E2 < "u" && E2.length > 0 ? " [" + E2.map((J2) => this.formatArgValue(J2)).join(", ") + "]" : "";
    return { message: _ + " " + k + " [" + L2 + "] " + u2 + M2, error: S2 };
  }
  static getErrorAndArgs(u2) {
    if (u2.length === 0)
      return {};
    let c, l2;
    const v2 = u2[0];
    if (v2 instanceof Error)
      return c = v2, l2 = u2.length > 1 ? u2.slice(1) : void 0, { error: c, args: l2 };
    if (typeof v2 == "function") {
      const S2 = v2();
      return S2 instanceof Error ? (c = S2, l2 = u2.length > 1 ? u2.slice(1) : void 0, { error: c, args: l2 }) : u2.length === 1 ? Array.isArray(S2) ? { args: S2.length > 0 ? S2 : void 0 } : { args: S2 } : Array.isArray(S2) ? { args: [...S2, ...u2.slice(1)] } : { args: [S2, ...u2.slice(1)] };
    }
    return { args: u2 };
  }
}
function padStart(a92, u2, c = " ") {
  return padInternal(a92, u2, "start", c);
}
function padEnd(a92, u2, c = " ") {
  return padInternal(a92, u2, "end", c);
}
function maxLengthStringValueInArray(a92) {
  return a92.map((u2) => u2.length).reduce((u2, c) => c > u2 ? c : u2, 0);
}
function padInternal(a92, u2, c, l2 = " ") {
  if (u2 <= a92.length)
    return a92;
  if (l2.length > 1)
    throw new Error(`Fill char must be one char exactly, it is: ${l2.length}`);
  const v2 = u2 - a92.length;
  let S2 = "";
  for (let g2 = 0; g2 < v2; g2++)
    S2 += l2;
  return c === "start" ? S2 + a92 : a92 + S2;
}
function formatArgument(a92) {
  return a92 === void 0 ? "undefined" : JSON.stringify(a92);
}
function formatDate(a92) {
  const u2 = new Date(a92), c = u2.getFullYear(), l2 = padStart((u2.getMonth() + 1).toString(), 2, "0"), v2 = padStart(u2.getDate().toString(), 2, "0"), S2 = padStart(u2.getHours().toString(), 2, "0"), g2 = padStart(u2.getMinutes().toString(), 2, "0"), E2 = padStart(u2.getSeconds().toString(), 2, "0"), _ = padStart(u2.getMilliseconds().toString(), 2, "0");
  return `${c}-${l2}-${v2} ${S2}:${g2}:${E2},${_}`;
}
class ConsoleLogChannel {
  constructor() {
    this.type = "LogChannel";
  }
  write(u2) {
    console && console.log && console.log(u2.message + (u2.error ? `
${u2.error}` : ""));
  }
}
var DefaultChannels;
(function(a92) {
  function u2() {
    return new ConsoleLogChannel();
  }
  a92.createConsoleChannel = u2;
})(DefaultChannels || (DefaultChannels = {}));
class LogProviderImpl {
  constructor(u2, c) {
    this._log = getInternalLogger("core.impl.LogProviderImpl"), this._name = u2, this._settings = c, this._loggers = new EnhancedMap(), this._idToKeyMap = new EnhancedMap(), this._globalRuntimeSettings = { level: c.level, channel: c.channel }, this._nextLoggerId = 1, this._log.trace(() => `Created LogProviderImpl with settings: ${JSON.stringify(this._settings)}`);
  }
  get runtimeSettings() {
    return Object.assign(Object.assign({}, this._settings), { level: this._globalRuntimeSettings.level, channel: this._globalRuntimeSettings.channel });
  }
  getLogger(u2) {
    return this.getOrCreateLogger(u2);
  }
  updateLoggerRuntime(u2, c) {
    this._log.debug(() => `Updating logger ${u2.id} runtime settings using: '${JSON.stringify(c)}'`);
    const l2 = this._idToKeyMap.get(u2.id);
    return l2 === void 0 ? (this._log.warn(() => `Cannot update logger with id: ${u2.id}, it was not found.`), false) : (this._loggers.computeIfPresent(l2, (v2, S2) => (S2.runtimeSettings = LogProviderImpl.mergeRuntimeSettingsIntoLogRuntime(S2.runtimeSettings, c), S2)), true);
  }
  updateRuntimeSettings(u2) {
    this._log.debug(() => `Updating global runtime settings and updating existing loggers runtime settings using: '${JSON.stringify(u2)}'`), this._globalRuntimeSettings = {
      /* It's unclear, but not checking explicitly on undefined here makes the test fail, it makes no sense as level is a number | undefined essentially. */
      level: u2.level !== void 0 ? u2.level : this._globalRuntimeSettings.level,
      channel: u2.channel !== void 0 ? u2.channel : this._globalRuntimeSettings.channel
    }, this._loggers.forEach((c) => c.runtimeSettings = LogProviderImpl.mergeRuntimeSettingsIntoLogRuntime(c.runtimeSettings, u2));
  }
  /**
  * Removes all state and loggers, it reverts back to as it was after initial construction.
  */
  clear() {
    this._loggers.clear(), this._idToKeyMap.clear(), this._globalRuntimeSettings = Object.assign({}, this._settings), this._nextLoggerId = 1;
  }
  getOrCreateLogger(u2) {
    const c = LogProviderImpl.createKey(u2), l2 = this._loggers.computeIfAbsent(c, () => {
      const v2 = { level: this._globalRuntimeSettings.level, channel: this._globalRuntimeSettings.channel, id: this.nextLoggerId(), name: u2, argumentFormatter: this._settings.argumentFormatter, dateFormatter: this._settings.dateFormatter };
      return new CoreLoggerImpl(v2);
    });
    return this._idToKeyMap.computeIfAbsent(l2.id, () => c), l2;
  }
  nextLoggerId() {
    const u2 = this._name + "_" + this._nextLoggerId;
    return this._nextLoggerId++, u2;
  }
  static mergeRuntimeSettingsIntoLogRuntime(u2, c) {
    return Object.assign(Object.assign({}, u2), {
      /* It's unclear, but not checking explicitly on undefined here makes the test fail, it makes no sense as level is a number | undefined essentially. */
      level: c.level !== void 0 ? c.level : u2.level,
      channel: c.channel !== void 0 ? c.channel : u2.channel
    });
  }
  static createKey(u2) {
    return typeof u2 == "string" ? u2 : u2.join(",");
  }
}
function createLogProvider(a92, u2) {
  return new LogProviderImpl(a92, u2);
}
var index$3 = /* @__PURE__ */ Object.freeze({ __proto__: null, EnhancedMap, padStart, padEnd, maxLengthStringValueInArray });
class CategoryImpl {
  constructor(u2, c, l2, v2) {
    this._children = [], this._logger = u2, this._name = c, this._parent = l2, this._fnGetOrCreateChildCategory = v2;
  }
  get name() {
    return this._name;
  }
  get parent() {
    return this._parent;
  }
  get path() {
    const u2 = [];
    let c = this;
    for (; c !== void 0; )
      u2.push(c.name), c = c.parent;
    return u2.reverse();
  }
  get children() {
    return [...this._children];
  }
  addChild(u2) {
    if (u2.parent !== this)
      throw new Error(`Cannot add child '${u2.name}', expected parent '${this._name} but got ${u2.parent ? u2.parent.name : "undefined"}'`);
    this._children.push(u2);
  }
  getChildCategory(u2) {
    const c = this._children.find((l2) => l2.name === u2);
    return c !== void 0 ? c : this._fnGetOrCreateChildCategory(u2, this);
  }
  get id() {
    return this._logger.id;
  }
  get logLevel() {
    return this._logger.logLevel;
  }
  get runtimeSettings() {
    return this._logger.runtimeSettings;
  }
  get logger() {
    return this._logger;
  }
  trace(u2, ...c) {
    this._logger.trace(u2, ...c);
  }
  debug(u2, ...c) {
    this._logger.debug(u2, ...c);
  }
  info(u2, ...c) {
    this._logger.info(u2, ...c);
  }
  warn(u2, ...c) {
    this._logger.warn(u2, ...c);
  }
  error(u2, ...c) {
    this._logger.error(u2, ...c);
  }
  fatal(u2, ...c) {
    this._logger.fatal(u2, ...c);
  }
}
const CATEGORY_PATH_SEPARATOR = "#";
class CategoryProviderImpl {
  constructor(u2, c) {
    this._name = u2, this._initialConfig = c, this._categoryStorage = new CategoryStorage(u2, c);
  }
  get name() {
    return this._name;
  }
  get config() {
    return this._initialConfig;
  }
  get runtimeConfig() {
    return this._categoryStorage.getCurrentRuntimeConfig();
  }
  getCategory(u2, c) {
    return this._categoryStorage.getOrCreateCategory(u2, c);
  }
  updateRuntimeSettingsCategory(u2, c) {
    this._categoryStorage.updateRuntimeSettingsCategory(u2, c);
  }
  updateRuntimeSettings(u2) {
    this._categoryStorage.updateRuntimeSettings(u2);
  }
  /** Returns all currently registered categories */
  getRegisteredCategories() {
    return this._categoryStorage.getRegisteredCategories();
  }
  /** Get a category by path, note that paths must be separated by #, e.g. root#child1#child1_1 */
  getCategoryByPath(u2) {
    return this._categoryStorage.getCategoryByPath(u2);
  }
}
class CategoryStorage {
  constructor(u2, c) {
    this._categoriesById = /* @__PURE__ */ new Map(), this._categoriesByPath = /* @__PURE__ */ new Map(), this._categoryProviderName = u2, this._allowSameCategoryName = c.allowSameCategoryName, this._logProvider = createLogProvider(u2, Object.assign({}, c)), this.getOrCreateCategory = this.getOrCreateCategory.bind(this);
  }
  getOrCreateCategory(u2, c) {
    if (u2.indexOf(CATEGORY_PATH_SEPARATOR) !== -1)
      throw new Error(`Cannot create category '${u2}', name cannot contain a '${CATEGORY_PATH_SEPARATOR}'.`);
    const l2 = c !== void 0 ? this.getParentCategory(c) : void 0;
    return l2 === void 0 ? this.getOrCreateRootCategory(u2) : this.getOrCreateChildCategory(u2, l2);
  }
  updateRuntimeSettingsCategory(u2, c) {
    if (!u2.id.startsWith(this._categoryProviderName))
      throw new Error(`Category '${u2.name}' with LogId '${u2.id}' is from a different CategoryProvider, cannot mix categories between providers.`);
    const l2 = this._categoriesById.get(u2.id);
    l2 !== void 0 && (this._logProvider.updateLoggerRuntime(l2.logger, { level: c.level }), !(c.disableRecursion !== void 0 && c.disableRecursion) && l2.children.forEach((v2) => this.updateRuntimeSettingsCategory(v2, c)));
  }
  updateRuntimeSettings(u2) {
    this._logProvider.updateRuntimeSettings(u2);
  }
  getCurrentRuntimeConfig() {
    return Object.assign(Object.assign({}, this._logProvider.runtimeSettings), { allowSameCategoryName: this._allowSameCategoryName });
  }
  /** Returns all currently registered categories */
  getRegisteredCategories() {
    return [...this._categoriesById.values()];
  }
  /** Get a category by path, note that paths must be separated by #, e.g. root#child1#child1_1 */
  getCategoryByPath(u2) {
    return this._categoriesByPath.get(u2);
  }
  getParentCategory(u2) {
    let c;
    if (CategoryStorage.isLogId(u2)) {
      if (c = this._categoriesById.get(u2), c === void 0)
        throw new Error(`Parent category was not found by LogId '${u2}'. Are you sure you passed in the correct argument?`);
    } else if (c = this._categoriesById.get(u2.id), c === void 0)
      throw new Error(`Parent category '${u2.name}' was not found by it's LogId '${u2.id}'. Are you sure you passed in the correct parent category?`);
    return c;
  }
  getOrCreateRootCategory(u2) {
    const c = this._categoriesByPath.get(u2);
    if (c) {
      if (!this._allowSameCategoryName)
        throw new Error(`Category '${u2} already exists, config flag allowSameCategoryName=false - therefore matching version 1 behavior (hence this Error)`);
      return c;
    }
    const l2 = this._logProvider.getLogger(u2), v2 = new CategoryImpl(l2, u2, void 0, this.getOrCreateCategory);
    return this._categoriesById.set(v2.id, v2), this._categoriesByPath.set(u2, v2), v2;
  }
  getOrCreateChildCategory(u2, c) {
    if (!c.id.startsWith(this._categoryProviderName))
      throw new Error(`Parent category '${c.name}' with LogId '${c.id}' is from a different CategoryProvider, cannot mix categories between providers.`);
    const l2 = [...c.path, u2].join(CATEGORY_PATH_SEPARATOR), v2 = this._categoriesByPath.get(l2);
    if (v2) {
      if (!this._allowSameCategoryName)
        throw new Error(`Child category '${u2} already exists for parent category ${c.name}, config flag allowSameCategoryName=false - therefore matching version 1 behavior (hence this Error)`);
      return v2;
    }
    const S2 = this._logProvider.getLogger(l2);
    this._logProvider.updateLoggerRuntime(S2, { level: c.logger.runtimeSettings.level, channel: c.logger.runtimeSettings.channel });
    const g2 = new CategoryImpl(S2, u2, c, this.getOrCreateCategory);
    return this._categoriesById.set(g2.id, g2), this._categoriesByPath.set(g2.path.join(CATEGORY_PATH_SEPARATOR), g2), c.addChild(g2), g2;
  }
  static isLogId(u2) {
    return typeof u2 == "string";
  }
}
class CategoryControlProviderImpl {
  constructor(u2, c) {
    this._provider = u2, this._messageChannel = c, this._originalLogLevels = CategoryControlProviderImpl.loadCurrentGroupLogLevels(u2);
  }
  get name() {
    return this._provider.name;
  }
  /**
  * Shows current settings.
  */
  showSettings() {
    let u2 = `Available categories (CategoryProvider '${this._provider.name}'):
`;
    const c = this.createCategoryInfoHierarchy(), l2 = c.size.toString().length, v2 = index$3.maxLengthStringValueInArray([...c.values()].map((g2) => g2.category.name + " ".repeat(g2.depth))), S2 = [...c.values()].map((g2, E2) => CategoryControlProviderImpl.createSettingLineCategory(g2, E2, l2, v2));
    u2 += S2.join(`
`) + (S2.length > 0 ? `
` : ""), this._messageChannel(u2);
  }
  help() {
    const u2 = `You can use the following commands (CategoryProvider ${this._provider.name}):
  showSettings()
    Shows the current configuration settings.
  update(level: CategoryControlProviderLogLevel, categoryId?: number | string, noRecurse?: boolean)
    Change the log level for a category (by default recursively).
      @param level      The log level to set - must be one of 'trace', 'debug', 'info', 'warn', 'error' or 'fatal'
      @param categoryId The category id or path of a category (e.g. root#child1) to update. Use showSettings() for id and/or name.
                        When omitted, it applies the level to all categories recursively.
  reset()
    Resets the log levels of the config groups back to when this control provider was created.
  save()
    Saves the current log levels for all categories of this provider. Use restore() to load last saved state.
  restore()
    Restore stored saved state, if any. Log levels will be set according to the saved state.
  help()
    Shows this help.
`;
    this._messageChannel(u2);
  }
  reset() {
    const u2 = new Map(this._provider.getRegisteredCategories().map((c) => [c.id, c]));
    this._originalLogLevels.forEach((c, l2) => {
      const v2 = u2.get(l2);
      v2 !== void 0 && this._provider.updateRuntimeSettingsCategory(v2, { level: c, disableRecursion: true }), u2.delete(l2);
    }), u2.forEach((c) => {
      c.parent !== void 0 && this._provider.updateRuntimeSettingsCategory(c, { level: c.parent.logLevel, disableRecursion: true });
    }), this._originalLogLevels = CategoryControlProviderImpl.loadCurrentGroupLogLevels(this._provider), this._messageChannel("Successfully reset log levels back to original state (from when this CategoryControlProvider was created).");
  }
  save() {
    if (!localStorage) {
      this._messageChannel("Cannot save state, localStorage is not available.");
      return;
    }
    const u2 = this._provider.getRegisteredCategories().filter((l2) => l2.parent === void 0).map((l2) => CategoryControlProviderImpl.createCategorySaveData(l2)), c = { name: this._provider.name, rootCategories: u2 };
    localStorage.setItem(this.createKey(), JSON.stringify(c)), this._messageChannel(`Successfully saved state for CategoryControlProvider '${this._provider.name}'.`);
  }
  restore(u2) {
    const c = u2 !== void 0 ? u2 : true;
    if (!localStorage) {
      c && this._messageChannel(`Will not attempt to restore state for CategoryControlProvider '${this._provider.name}', localStorage is not available.`);
      return;
    }
    const l2 = this.createKey(), v2 = localStorage.getItem(l2);
    if (v2 === null) {
      c && this._messageChannel(`Cannot restore state for CategoryControlProvider '${this._provider.name}', no data available.`);
      return;
    }
    try {
      const S2 = JSON.parse(v2);
      if (this._provider.name !== S2.name) {
        c && this._messageChannel(`Cannot restore state for CategoryControlProvider '${this._provider.name}', data is not for provider - found name '${S2.name}'.`);
        return;
      }
      this.restoreBySaveData(S2, c), this._messageChannel(`Successfully restored state for CategoryControlProvider '${this._provider.name}'`), this._originalLogLevels = CategoryControlProviderImpl.loadCurrentGroupLogLevels(this._provider);
    } catch {
      localStorage.removeItem(l2), this._messageChannel(`Cannot restore state for CategoryControlProvider '${this._provider.name}', data is not valid. Invalid data removed from localStorage.`);
    }
  }
  update(u2, c, l2) {
    typeof c > "u" ? this.updateAll(u2) : typeof c == "number" ? this.updateByIndex(u2, c, l2 !== void 0 ? l2 : false) : this.updateByPath(u2, c, l2 !== void 0 ? l2 : false);
  }
  updateAll(u2) {
    const c = LogLevel$1.toLogLevel(u2);
    this._provider.getRegisteredCategories().filter((l2) => l2.parent === void 0).forEach((l2) => this._provider.updateRuntimeSettingsCategory(l2, { level: c })), this._messageChannel(`Updated all categories to use log level '${u2.toLowerCase()}'`);
  }
  updateByPath(u2, c, l2) {
    const v2 = this._provider.getCategoryByPath(c);
    if (v2 === void 0) {
      this._messageChannel(`Failed to find a provider by path '${c}', please make sure to separate the parts by a ${CATEGORY_PATH_SEPARATOR}.`);
      return;
    }
    this._provider.updateRuntimeSettingsCategory(v2, { level: LogLevel$1.toLogLevel(u2), disableRecursion: l2 }), this._messageChannel(`Successfully updated category '${v2.name}' with path '${c}' to log level '${u2.toLowerCase()}'${l2 ? "" : " and recursively applied to children (if any)"}.`);
  }
  updateByIndex(u2, c, l2) {
    if (c < 0) {
      this._messageChannel(`Cannot update category by index '${c}', it is negative.`);
      return;
    }
    const v2 = this.createCategoryInfoHierarchy();
    if (c >= v2.size) {
      this._messageChannel(`Cannot update category by index '${c}', it is outside of the range of available categories, use showSettings() to see the indices.`);
      return;
    }
    const S2 = [...v2.values()][c].category;
    this._provider.updateRuntimeSettingsCategory(S2, { level: LogLevel$1.toLogLevel(u2), disableRecursion: l2 }), this._messageChannel(`Successfully updated category '${S2.name}' by index '${c}' to log level '${u2.toLowerCase()}'${l2 ? "" : " and recursively applied to children (if any)"}.`);
  }
  restoreBySaveData(u2, c) {
    const l2 = (v2, S2) => {
      const g2 = S2.length > 0 ? S2 + CATEGORY_PATH_SEPARATOR + v2.name : v2.name, E2 = this._provider.getCategoryByPath(g2);
      if (E2 !== void 0) {
        const _ = LogLevel$1.toLogLevel(v2.level);
        _ !== void 0 ? this._provider.updateRuntimeSettingsCategory(E2, { level: _, disableRecursion: true }) : c && this._messageChannel(`CategoryControlProvider '${this._provider.name}' - cannot restore log level for category path '${g2}', log level is invalid.`);
        for (const k of v2.children)
          l2(k, g2);
      } else
        c && this._messageChannel(`CategoryControlProvider '${this._provider.name}' - failed to find a Category by path '${g2}', will not restore category (and children)`);
    };
    for (const v2 of u2.rootCategories)
      l2(v2, "");
  }
  createKey() {
    return `CategoryProvider-${this._provider.name}`;
  }
  createCategoryInfoHierarchy() {
    const u2 = /* @__PURE__ */ new Map();
    return this._provider.getRegisteredCategories().filter((l2) => l2.parent === void 0).forEach((l2) => CategoryControlProviderImpl.addCategoryInfoHierarchy(l2, 0, u2)), u2;
  }
  static createCategorySaveData(u2) {
    return { name: u2.name, level: LogLevel$1[u2.logLevel], children: u2.children.map((c) => this.createCategorySaveData(c)) };
  }
  static loadCurrentGroupLogLevels(u2) {
    return new Map(u2.getRegisteredCategories().map((c) => [c.id, c.logLevel]));
  }
  static createSettingLineCategory(u2, c, l2, v2) {
    const g2 = " ".repeat(u2.depth) + u2.category.name;
    return `  [${index$3.padStart(c.toString(), l2)}, ${index$3.padEnd(g2, v2)} (level=${index$3.padEnd(u2.logLevel, 5)})]`;
  }
  static addCategoryInfoHierarchy(u2, c, l2) {
    l2.set(u2.id, { category: u2, logLevel: LogLevel$1[u2.logLevel], depth: c }), u2.children.forEach((v2) => this.addCategoryInfoHierarchy(v2, c + 1, l2));
  }
}
function categoryConfigDebug(a92) {
  return `CategoryConfig=level: ${LogLevel$1[a92.level].toString()}, allowSameCategoryName=${a92.allowSameCategoryName}`;
}
class CategoryProviderService {
  constructor() {
    this._log = InternalLogger.getInternalLogger("category.impl.CategoryProviderService"), this._providers = new index$3.EnhancedMap();
  }
  createLogProvider(u2, c) {
    const l2 = this._providers.compute(u2, (v2, S2) => {
      if (S2)
        throw new Error(`CategoryProvider with name '${u2}' already exists, cannot create another.`);
      const g2 = mergeWithDefaults(c);
      return this._log.debug(() => `Creating new CategoryProvider with name '${u2}', using config settings '${categoryConfigDebug(g2)}'.`), new CategoryProviderImpl(u2, g2);
    });
    if (l2)
      return l2;
    throw new Error("No CategoryProvider? This is a bug.");
  }
  getCategoryControl(u2) {
    const c = u2 || ((l2) => {
      if (console && console.log)
        console.log(l2);
      else
        throw new Error("Cannot use console (it is not present), please specify a custom function to write to.");
    });
    return { help: () => c(CategoryProviderService.help()), showSettings: () => c(this.showSettings()), getProvider: (l2) => this.getCategoryControlProviderByIdOrName(l2, c) };
  }
  clear() {
    this._providers.clear();
  }
  /* Functions for CategoryControl follow */
  showSettings() {
    let u2 = `Available CategoryProviders:
`;
    const c = this._providers.size.toString().length, l2 = index$3.maxLengthStringValueInArray([...this._providers.keys()]), v2 = [...this._providers.entries()].map((S2, g2) => {
      const E2 = S2[0];
      return `  [${index$3.padStart(g2.toString(), c)}, ${index$3.padEnd(E2, l2)}]`;
    });
    return u2 += v2.join(`
`) + (v2.length > 0 ? `
` : ""), u2;
  }
  getCategoryControlProviderByIdOrName(u2, c) {
    if (typeof u2 == "string") {
      const v2 = this._providers.get(u2);
      if (v2 === void 0)
        throw new Error(`Provider with name '${u2}' does not exist.`);
      return new CategoryControlProviderImpl(v2, c);
    }
    const l2 = [...this._providers.values()];
    if (u2 < 0 || u2 >= l2.length)
      throw new Error(`Provider with index '${u2}' does not exist (outside of range).`);
    return new CategoryControlProviderImpl(l2[u2], c);
  }
  static help() {
    return `You can use the following commands:
  showSettings()
    Shows the current configuration settings.
  getProvider: (id: number | string): CategoryControlProvider
    Get access to a CategoryControlProvider to change log levels.
      @param id The id (use showSettings to see) or name of the provider
  help()
    Shows this help.
`;
  }
}
const CATEGORY_PROVIDER_SERVICE = new CategoryProviderService(), CATEGORY_LOG_CONTROL = (a92) => CATEGORY_PROVIDER_SERVICE.getCategoryControl(a92);
function mergeWithDefaults(a92) {
  const u2 = { channel: DefaultChannels.createConsoleChannel(), allowSameCategoryName: true, level: LogLevel$1.Error, dateFormatter: formatDate, argumentFormatter: formatArgument };
  return a92 ? { channel: a92.channel ? a92.channel : u2.channel, allowSameCategoryName: a92.allowSameCategoryName !== void 0 ? a92.allowSameCategoryName : u2.allowSameCategoryName, level: a92.level ? a92.level : u2.level, dateFormatter: a92.dateFormatter ? a92.dateFormatter : u2.dateFormatter, argumentFormatter: a92.argumentFormatter ? a92.argumentFormatter : u2.argumentFormatter } : u2;
}
var CategoryProvider;
(function(a92) {
  function u2(l2, v2) {
    return CATEGORY_PROVIDER_SERVICE.createLogProvider(l2, v2);
  }
  a92.createProvider = u2;
  function c() {
    CATEGORY_PROVIDER_SERVICE.clear();
  }
  a92.clear = c;
})(CategoryProvider || (CategoryProvider = {}));
const typescriptLoggingCategory_esm = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({ __proto__: null, CATEGORY_LOG_CONTROL, get CategoryProvider() {
  return CategoryProvider;
} }, Symbol.toStringTag, { value: "Module" })), require$$1 = /* @__PURE__ */ getAugmentedNamespace(typescriptLoggingCategory_esm);
Object.defineProperty(logger, "__esModule", { value: true });
logger.logger = void 0;
const typescript_logging_1 = require$$2$1, typescript_logging_category_style_1 = require$$1;
logger.logger = typescript_logging_category_style_1.CategoryProvider.createProvider("ApiStream", { allowSameCategoryName: true, level: typescript_logging_1.LogLevel.Warn });
var version$3 = "1.0.25", __createBinding$3 = commonjsGlobal$1 && commonjsGlobal$1.__createBinding || (Object.create ? function(a92, u2, c, l2) {
  l2 === void 0 && (l2 = c);
  var v2 = Object.getOwnPropertyDescriptor(u2, c);
  (!v2 || ("get" in v2 ? !u2.__esModule : v2.writable || v2.configurable)) && (v2 = { enumerable: true, get: function() {
    return u2[c];
  } }), Object.defineProperty(a92, l2, v2);
} : function(a92, u2, c, l2) {
  l2 === void 0 && (l2 = c), a92[l2] = u2[c];
}), __setModuleDefault$3 = commonjsGlobal$1 && commonjsGlobal$1.__setModuleDefault || (Object.create ? function(a92, u2) {
  Object.defineProperty(a92, "default", { enumerable: true, value: u2 });
} : function(a92, u2) {
  a92.default = u2;
}), __importStar$3 = commonjsGlobal$1 && commonjsGlobal$1.__importStar || function(a92) {
  if (a92 && a92.__esModule)
    return a92;
  var u2 = {};
  if (a92 != null)
    for (var c in a92)
      c !== "default" && Object.prototype.hasOwnProperty.call(a92, c) && __createBinding$3(u2, a92, c);
  return __setModuleDefault$3(u2, a92), u2;
}, __importDefault$d = commonjsGlobal$1 && commonjsGlobal$1.__importDefault || function(a92) {
  return a92 && a92.__esModule ? a92 : { default: a92 };
};
Object.defineProperty(api$2, "__esModule", { value: true });
api$2.ApiClient = void 0;
const NiceGrpc$1 = __importStar$3(lib$1), abort_controller_x_1 = require$$1$1, detect_node_1 = __importDefault$d(browser$2), NodeTransport = __importStar$3(require$$0$1), logger_1 = logger, clientVersion$1 = version$3;
class ApiClient {
  constructor(u2, c, l2, v2, S2, g2) {
    this.sessionId = u2, this.sdkVersion = l2, this.version = clientVersion$1, this.apiLogCallback = S2, this.eventLogCallback = g2, this.log = logger_1.logger.getCategory(v2), this.channel = NiceGrpc$1.createChannel(c, detect_node_1.default ? NodeTransport.NodeHttpTransport() : void 0), this.clientFactory = NiceGrpc$1.createClientFactory().use(this.logMiddleware.bind(this));
  }
  async *logMiddleware(u2, c) {
    const { path: l2 } = u2.method;
    try {
      const v2 = yield* u2.next(u2.request, c);
      if (this.log.debug(`-> ${l2}: ok`), this.log.trace(`${JSON.stringify(u2.request)} -> ${l2}: ${JSON.stringify(v2)}`), this.apiLogCallback) {
        let S2 = l2.split("/"), g2 = S2[1].split("."), E2 = g2[g2.length - 1], _ = g2[g2.length - 2], k = g2[g2.length - 3], L2 = S2[2];
        this.apiLogCallback(k, E2, L2, u2.request, v2);
      }
      return v2;
    } catch (v2) {
      throw this.log.trace(`${JSON.stringify(u2.request)} -> ${l2}`), v2 instanceof NiceGrpc$1.ClientError ? this.log.warn(`-> ${l2}: error: ${NiceGrpc$1.Status[v2.code]}: ${v2.details}`) : (0, abort_controller_x_1.isAbortError)(v2) ? this.log.warn(`-> ${l2}: cancel`) : this.log.warn(`-> ${l2}: error: ${v2 == null ? void 0 : v2.stack}`), v2;
    }
  }
  setAccessToken(u2) {
    (this.accessToken == null || this.accessToken != u2) && (this.log.debug("access token refreshed"), this.accessToken = u2, this.setup());
  }
  makeGrpcMetadata() {
    let u2 = NiceGrpc$1.Metadata({ Authorization: `Bearer ${this.accessToken}`, Version: this.version, SessionId: this.sessionId });
    return this.sdkVersion != null && u2.set("SdkVersion", this.sdkVersion), u2;
  }
  setup() {
    let u2 = { metadata: this.makeGrpcMetadata() };
    this._setup(u2);
  }
  _setup(u2) {
  }
}
api$2.ApiClient = ApiClient;
var decorator = {};
Object.defineProperty(decorator, "__esModule", { value: true });
decorator.RequiresSdkAuthentication = void 0;
function RequiresSdkAuthentication() {
  return function(a92, u2) {
    const c = Symbol(u2);
    Object.defineProperty(a92, u2, { get: function() {
      if (!this[c])
        throw new Error("Please authenticate ApiStream by calling apiStream.load( accessToken )");
      return this[c];
    }, set: function(l2) {
      this[c] = l2;
    } });
  };
}
decorator.RequiresSdkAuthentication = RequiresSdkAuthentication;
var __createBinding$2 = commonjsGlobal$1 && commonjsGlobal$1.__createBinding || (Object.create ? function(a92, u2, c, l2) {
  l2 === void 0 && (l2 = c);
  var v2 = Object.getOwnPropertyDescriptor(u2, c);
  (!v2 || ("get" in v2 ? !u2.__esModule : v2.writable || v2.configurable)) && (v2 = { enumerable: true, get: function() {
    return u2[c];
  } }), Object.defineProperty(a92, l2, v2);
} : function(a92, u2, c, l2) {
  l2 === void 0 && (l2 = c), a92[l2] = u2[c];
}), __setModuleDefault$2 = commonjsGlobal$1 && commonjsGlobal$1.__setModuleDefault || (Object.create ? function(a92, u2) {
  Object.defineProperty(a92, "default", { enumerable: true, value: u2 });
} : function(a92, u2) {
  a92.default = u2;
}), __decorate = commonjsGlobal$1 && commonjsGlobal$1.__decorate || function(a92, u2, c, l2) {
  var v2 = arguments.length, S2 = v2 < 3 ? u2 : l2 === null ? l2 = Object.getOwnPropertyDescriptor(u2, c) : l2, g2;
  if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
    S2 = Reflect.decorate(a92, u2, c, l2);
  else
    for (var E2 = a92.length - 1; E2 >= 0; E2--)
      (g2 = a92[E2]) && (S2 = (v2 < 3 ? g2(S2) : v2 > 3 ? g2(u2, c, S2) : g2(u2, c)) || S2);
  return v2 > 3 && S2 && Object.defineProperty(u2, c, S2), S2;
}, __importStar$2 = commonjsGlobal$1 && commonjsGlobal$1.__importStar || function(a92) {
  if (a92 && a92.__esModule)
    return a92;
  var u2 = {};
  if (a92 != null)
    for (var c in a92)
      c !== "default" && Object.prototype.hasOwnProperty.call(a92, c) && __createBinding$2(u2, a92, c);
  return __setModuleDefault$2(u2, a92), u2;
}, __metadata = commonjsGlobal$1 && commonjsGlobal$1.__metadata || function(a92, u2) {
  if (typeof Reflect == "object" && typeof Reflect.metadata == "function")
    return Reflect.metadata(a92, u2);
};
Object.defineProperty(layoutapi, "__esModule", { value: true });
layoutapi.LayoutApi = void 0;
__importStar$2(lib$1);
const LayoutApiModel = __importStar$2(dist$2), api_1$1 = api$2, decorator_1 = decorator, LOG_CATEGORY$1 = "LayoutApi";
class LayoutApi extends api_1$1.ApiClient {
  constructor(u2, c, l2, v2, S2) {
    super(u2, l2, v2, LOG_CATEGORY$1, S2), this.handlers = {}, this.eventApi = c, this.eventApi.on("event", { name: `${LayoutApi.LAYOUTAPI_EVENT_PREFIX}:*`, ignoreSessionEvents: true }, (g2) => {
      var E2;
      const [, _] = g2.name.split(`${LayoutApi.LAYOUTAPI_EVENT_PREFIX}:`), [k, L2] = _.split(":"), M2 = g2.payload;
      for (const $ of (E2 = this.handlers[k]) !== null && E2 !== void 0 ? E2 : [])
        $(Object.values(M2).find((J2) => !!J2), L2);
    });
  }
  _setup(u2) {
    this.layer = this.clientFactory.create(LayoutApiModel.LayerServiceDefinition, this.channel, { "*": u2 }), this.layout = this.clientFactory.create(LayoutApiModel.LayoutServiceDefinition, this.channel, { "*": u2 });
  }
  /**
  * Subscribe to all events for a given layout.
  *
  * @param layoutId - the id of the layout to which you want to subscribe to layout events
  */
  async subscribeToLayout(u2) {
    await Promise.all([this.eventApi.subscribe(`${LayoutApi.LAYOUTAPI_EVENT_PREFIX}:${LayoutApiModel.EventType.EVENT_TYPE_LAYER}:*`, { target: { layoutId: u2 } }), this.eventApi.subscribe(`${LayoutApi.LAYOUTAPI_EVENT_PREFIX}:${LayoutApiModel.EventType.EVENT_TYPE_LAYOUT}:*`, { target: { layoutId: u2 } })]);
  }
  /**
  * Unsubscribe from all events for a given layout.
  *
  * @param layoutId - the id of the layout to which you want to unsubscribe to layout events
  */
  async unsubscribeFromLayout(u2) {
    await Promise.all([this.eventApi.unsubscribe(`${LayoutApi.LAYOUTAPI_EVENT_PREFIX}:${LayoutApiModel.EventType.EVENT_TYPE_LAYER}:*`, { target: { layoutId: u2 } }), this.eventApi.unsubscribe(`${LayoutApi.LAYOUTAPI_EVENT_PREFIX}:${LayoutApiModel.EventType.EVENT_TYPE_LAYOUT}:*`, { target: { layoutId: u2 } })]);
  }
  /**
  * Subscribe to all events for layouts in a project.
  *
  * @param collectionId - the id of the collection the layouts are in.
  * @param projectId - the id of the project the layouts are in.
  */
  async subscribeToLayoutsInProject(u2, c) {
    await Promise.all([this.eventApi.subscribe(`${LayoutApi.LAYOUTAPI_EVENT_PREFIX}:${LayoutApiModel.EventType.EVENT_TYPE_LAYER}:*`, { target: { collectionId: u2, projectId: c } }), this.eventApi.subscribe(`${LayoutApi.LAYOUTAPI_EVENT_PREFIX}:${LayoutApiModel.EventType.EVENT_TYPE_LAYOUT}:*`, { target: { collectionId: u2, projectId: c } })]);
  }
  /**
  * Unsubscribe from all events for layouts in a project.
  *
  * @param collectionId - the id of the collection the layouts are in.
  * @param projectId - the id of the project the layouts are in.
  */
  async unsubscribeFromLayoutsInProject(u2, c) {
    await Promise.all([this.eventApi.unsubscribe(`${LayoutApi.LAYOUTAPI_EVENT_PREFIX}:${LayoutApiModel.EventType.EVENT_TYPE_LAYER}:*`, { target: { collectionId: u2, projectId: c } }), this.eventApi.unsubscribe(`${LayoutApi.LAYOUTAPI_EVENT_PREFIX}:${LayoutApiModel.EventType.EVENT_TYPE_LAYOUT}:*`, { target: { collectionId: u2, projectId: c } })]);
  }
  /**
  * Register an event handler
  *
  * @param type Type of event
  * @param handler
  */
  on(u2, c) {
    var l2;
    this.handlers[u2] = (l2 = this.handlers[u2]) !== null && l2 !== void 0 ? l2 : [], this.handlers[u2].push(c);
  }
  /**
  * Unregister an event handler
  *
  * @param type Type of event
  * @param handler
  */
  off(u2, c) {
    this.handlers[u2] = this.handlers[u2].filter((l2) => l2 !== c);
  }
}
LayoutApi.LAYOUTAPI_EVENT_PREFIX = "apistream:layout";
__decorate([(0, decorator_1.RequiresSdkAuthentication)(), __metadata("design:type", Object)], LayoutApi.prototype, "layout", void 0);
__decorate([(0, decorator_1.RequiresSdkAuthentication)(), __metadata("design:type", Object)], LayoutApi.prototype, "layer", void 0);
layoutapi.LayoutApi = LayoutApi;
var liveapi = {}, api$1 = {}, httpbody = {}, any = {}, __importDefault$c = commonjsGlobal$1 && commonjsGlobal$1.__importDefault || function(a92) {
  return a92 && a92.__esModule ? a92 : { default: a92 };
};
Object.defineProperty(any, "__esModule", { value: true });
any.Any = any.protobufPackage = void 0;
const minimal_1$5 = __importDefault$c(minimal);
any.protobufPackage = "google.protobuf";
function createBaseAny() {
  return { typeUrl: "", value: new Uint8Array() };
}
any.Any = { encode(a92, u2 = minimal_1$5.default.Writer.create()) {
  return a92.typeUrl !== "" && u2.uint32(10).string(a92.typeUrl), a92.value.length !== 0 && u2.uint32(18).bytes(a92.value), u2;
}, decode(a92, u2) {
  const c = a92 instanceof minimal_1$5.default.Reader ? a92 : new minimal_1$5.default.Reader(a92);
  let l2 = u2 === void 0 ? c.len : c.pos + u2;
  const v2 = createBaseAny();
  for (; c.pos < l2; ) {
    const S2 = c.uint32();
    switch (S2 >>> 3) {
      case 1:
        v2.typeUrl = c.string();
        break;
      case 2:
        v2.value = c.bytes();
        break;
      default:
        c.skipType(S2 & 7);
        break;
    }
  }
  return v2;
}, fromJSON(a92) {
  return { typeUrl: isSet$4(a92.typeUrl) ? String(a92.typeUrl) : "", value: isSet$4(a92.value) ? bytesFromBase64$1(a92.value) : new Uint8Array() };
}, toJSON(a92) {
  const u2 = {};
  return a92.typeUrl !== void 0 && (u2.typeUrl = a92.typeUrl), a92.value !== void 0 && (u2.value = base64FromBytes$1(a92.value !== void 0 ? a92.value : new Uint8Array())), u2;
}, fromPartial(a92) {
  var u2, c;
  const l2 = createBaseAny();
  return l2.typeUrl = (u2 = a92.typeUrl) !== null && u2 !== void 0 ? u2 : "", l2.value = (c = a92.value) !== null && c !== void 0 ? c : new Uint8Array(), l2;
} };
var globalThis$5 = (() => {
  if (typeof globalThis$5 < "u")
    return globalThis$5;
  if (typeof self < "u")
    return self;
  if (typeof window < "u")
    return window;
  if (typeof commonjsGlobal$1 < "u")
    return commonjsGlobal$1;
  throw "Unable to locate global object";
})();
function bytesFromBase64$1(a92) {
  if (globalThis$5.Buffer)
    return Uint8Array.from(globalThis$5.Buffer.from(a92, "base64"));
  {
    const u2 = globalThis$5.atob(a92), c = new Uint8Array(u2.length);
    for (let l2 = 0; l2 < u2.length; ++l2)
      c[l2] = u2.charCodeAt(l2);
    return c;
  }
}
function base64FromBytes$1(a92) {
  if (globalThis$5.Buffer)
    return globalThis$5.Buffer.from(a92).toString("base64");
  {
    const u2 = [];
    return a92.forEach((c) => {
      u2.push(String.fromCharCode(c));
    }), globalThis$5.btoa(u2.join(""));
  }
}
function isSet$4(a92) {
  return a92 != null;
}
var __importDefault$b = commonjsGlobal$1 && commonjsGlobal$1.__importDefault || function(a92) {
  return a92 && a92.__esModule ? a92 : { default: a92 };
};
Object.defineProperty(httpbody, "__esModule", { value: true });
httpbody.HttpBody = httpbody.protobufPackage = void 0;
const minimal_1$4 = __importDefault$b(minimal), any_1 = any;
httpbody.protobufPackage = "google.api";
function createBaseHttpBody() {
  return { contentType: "", data: new Uint8Array(), extensions: [] };
}
httpbody.HttpBody = { encode(a92, u2 = minimal_1$4.default.Writer.create()) {
  a92.contentType !== "" && u2.uint32(10).string(a92.contentType), a92.data.length !== 0 && u2.uint32(18).bytes(a92.data);
  for (const c of a92.extensions)
    any_1.Any.encode(c, u2.uint32(26).fork()).ldelim();
  return u2;
}, decode(a92, u2) {
  const c = a92 instanceof minimal_1$4.default.Reader ? a92 : new minimal_1$4.default.Reader(a92);
  let l2 = u2 === void 0 ? c.len : c.pos + u2;
  const v2 = createBaseHttpBody();
  for (; c.pos < l2; ) {
    const S2 = c.uint32();
    switch (S2 >>> 3) {
      case 1:
        v2.contentType = c.string();
        break;
      case 2:
        v2.data = c.bytes();
        break;
      case 3:
        v2.extensions.push(any_1.Any.decode(c, c.uint32()));
        break;
      default:
        c.skipType(S2 & 7);
        break;
    }
  }
  return v2;
}, fromJSON(a92) {
  return { contentType: isSet$3(a92.contentType) ? String(a92.contentType) : "", data: isSet$3(a92.data) ? bytesFromBase64(a92.data) : new Uint8Array(), extensions: Array.isArray(a92 == null ? void 0 : a92.extensions) ? a92.extensions.map((u2) => any_1.Any.fromJSON(u2)) : [] };
}, toJSON(a92) {
  const u2 = {};
  return a92.contentType !== void 0 && (u2.contentType = a92.contentType), a92.data !== void 0 && (u2.data = base64FromBytes(a92.data !== void 0 ? a92.data : new Uint8Array())), a92.extensions ? u2.extensions = a92.extensions.map((c) => c ? any_1.Any.toJSON(c) : void 0) : u2.extensions = [], u2;
}, fromPartial(a92) {
  var u2, c, l2;
  const v2 = createBaseHttpBody();
  return v2.contentType = (u2 = a92.contentType) !== null && u2 !== void 0 ? u2 : "", v2.data = (c = a92.data) !== null && c !== void 0 ? c : new Uint8Array(), v2.extensions = ((l2 = a92.extensions) === null || l2 === void 0 ? void 0 : l2.map((S2) => any_1.Any.fromPartial(S2))) || [], v2;
} };
var globalThis$4 = (() => {
  if (typeof globalThis$4 < "u")
    return globalThis$4;
  if (typeof self < "u")
    return self;
  if (typeof window < "u")
    return window;
  if (typeof commonjsGlobal$1 < "u")
    return commonjsGlobal$1;
  throw "Unable to locate global object";
})();
function bytesFromBase64(a92) {
  if (globalThis$4.Buffer)
    return Uint8Array.from(globalThis$4.Buffer.from(a92, "base64"));
  {
    const u2 = globalThis$4.atob(a92), c = new Uint8Array(u2.length);
    for (let l2 = 0; l2 < u2.length; ++l2)
      c[l2] = u2.charCodeAt(l2);
    return c;
  }
}
function base64FromBytes(a92) {
  if (globalThis$4.Buffer)
    return globalThis$4.Buffer.from(a92).toString("base64");
  {
    const u2 = [];
    return a92.forEach((c) => {
      u2.push(String.fromCharCode(c));
    }), globalThis$4.btoa(u2.join(""));
  }
}
function isSet$3(a92) {
  return a92 != null;
}
var field_mask = {}, __importDefault$a = commonjsGlobal$1 && commonjsGlobal$1.__importDefault || function(a92) {
  return a92 && a92.__esModule ? a92 : { default: a92 };
};
Object.defineProperty(field_mask, "__esModule", { value: true });
field_mask.FieldMask = field_mask.protobufPackage = void 0;
const minimal_1$3 = __importDefault$a(minimal);
field_mask.protobufPackage = "google.protobuf";
function createBaseFieldMask() {
  return { paths: [] };
}
field_mask.FieldMask = { encode(a92, u2 = minimal_1$3.default.Writer.create()) {
  for (const c of a92.paths)
    u2.uint32(10).string(c);
  return u2;
}, decode(a92, u2) {
  const c = a92 instanceof minimal_1$3.default.Reader ? a92 : new minimal_1$3.default.Reader(a92);
  let l2 = u2 === void 0 ? c.len : c.pos + u2;
  const v2 = createBaseFieldMask();
  for (; c.pos < l2; ) {
    const S2 = c.uint32();
    switch (S2 >>> 3) {
      case 1:
        v2.paths.push(c.string());
        break;
      default:
        c.skipType(S2 & 7);
        break;
    }
  }
  return v2;
}, fromJSON(a92) {
  return { paths: typeof a92 == "string" ? a92.split(",").filter(Boolean) : Array.isArray(a92 == null ? void 0 : a92.paths) ? a92.paths.map(String) : [] };
}, toJSON(a92) {
  return a92.paths.join(",");
}, fromPartial(a92) {
  var u2;
  const c = createBaseFieldMask();
  return c.paths = ((u2 = a92.paths) === null || u2 === void 0 ? void 0 : u2.map((l2) => l2)) || [], c;
}, wrap(a92) {
  const u2 = createBaseFieldMask();
  return u2.paths = a92, u2;
}, unwrap(a92) {
  return a92.paths;
} };
var struct$1 = {};
(function(a92) {
  var u2 = commonjsGlobal$1 && commonjsGlobal$1.__importDefault || function(V2) {
    return V2 && V2.__esModule ? V2 : { default: V2 };
  };
  Object.defineProperty(a92, "__esModule", { value: true }), a92.ListValue = a92.Value = a92.Struct_FieldsEntry = a92.Struct = a92.nullValueToNumber = a92.nullValueToJSON = a92.nullValueFromJSON = a92.NullValue = a92.protobufPackage = void 0;
  const c = u2(minimal);
  a92.protobufPackage = "google.protobuf";
  var l2;
  (function(V2) {
    V2.NULL_VALUE = "NULL_VALUE";
  })(l2 = a92.NullValue || (a92.NullValue = {}));
  function v2(V2) {
    switch (V2) {
      case 0:
      case "NULL_VALUE":
        return l2.NULL_VALUE;
      default:
        throw new M2.Error("Unrecognized enum value " + V2 + " for enum NullValue");
    }
  }
  a92.nullValueFromJSON = v2;
  function S2(V2) {
    switch (V2) {
      case l2.NULL_VALUE:
        return "NULL_VALUE";
      default:
        throw new M2.Error("Unrecognized enum value " + V2 + " for enum NullValue");
    }
  }
  a92.nullValueToJSON = S2;
  function g2(V2) {
    switch (V2) {
      case l2.NULL_VALUE:
        return 0;
      default:
        throw new M2.Error("Unrecognized enum value " + V2 + " for enum NullValue");
    }
  }
  a92.nullValueToNumber = g2;
  function E2() {
    return { fields: {} };
  }
  a92.Struct = { encode(V2, q2 = c.default.Writer.create()) {
    return Object.entries(V2.fields).forEach(([G2, H2]) => {
      H2 !== void 0 && a92.Struct_FieldsEntry.encode({ key: G2, value: H2 }, q2.uint32(10).fork()).ldelim();
    }), q2;
  }, decode(V2, q2) {
    const G2 = V2 instanceof c.default.Reader ? V2 : new c.default.Reader(V2);
    let H2 = q2 === void 0 ? G2.len : G2.pos + q2;
    const B2 = E2();
    for (; G2.pos < H2; ) {
      const Y2 = G2.uint32();
      switch (Y2 >>> 3) {
        case 1:
          const ne2 = a92.Struct_FieldsEntry.decode(G2, G2.uint32());
          ne2.value !== void 0 && (B2.fields[ne2.key] = ne2.value);
          break;
        default:
          G2.skipType(Y2 & 7);
          break;
      }
    }
    return B2;
  }, fromJSON(V2) {
    return { fields: $(V2.fields) ? Object.entries(V2.fields).reduce((q2, [G2, H2]) => (q2[G2] = H2, q2), {}) : {} };
  }, toJSON(V2) {
    const q2 = {};
    return q2.fields = {}, V2.fields && Object.entries(V2.fields).forEach(([G2, H2]) => {
      q2.fields[G2] = H2;
    }), q2;
  }, fromPartial(V2) {
    var q2;
    const G2 = E2();
    return G2.fields = Object.entries((q2 = V2.fields) !== null && q2 !== void 0 ? q2 : {}).reduce((H2, [B2, Y2]) => (Y2 !== void 0 && (H2[B2] = Y2), H2), {}), G2;
  }, wrap(V2) {
    const q2 = E2();
    return V2 !== void 0 && Object.keys(V2).forEach((G2) => {
      q2.fields[G2] = V2[G2];
    }), q2;
  }, unwrap(V2) {
    const q2 = {};
    return Object.keys(V2.fields).forEach((G2) => {
      q2[G2] = V2.fields[G2];
    }), q2;
  } };
  function _() {
    return { key: "", value: void 0 };
  }
  a92.Struct_FieldsEntry = { encode(V2, q2 = c.default.Writer.create()) {
    return V2.key !== "" && q2.uint32(10).string(V2.key), V2.value !== void 0 && a92.Value.encode(a92.Value.wrap(V2.value), q2.uint32(18).fork()).ldelim(), q2;
  }, decode(V2, q2) {
    const G2 = V2 instanceof c.default.Reader ? V2 : new c.default.Reader(V2);
    let H2 = q2 === void 0 ? G2.len : G2.pos + q2;
    const B2 = _();
    for (; G2.pos < H2; ) {
      const Y2 = G2.uint32();
      switch (Y2 >>> 3) {
        case 1:
          B2.key = G2.string();
          break;
        case 2:
          B2.value = a92.Value.unwrap(a92.Value.decode(G2, G2.uint32()));
          break;
        default:
          G2.skipType(Y2 & 7);
          break;
      }
    }
    return B2;
  }, fromJSON(V2) {
    return { key: J2(V2.key) ? String(V2.key) : "", value: J2(V2 == null ? void 0 : V2.value) ? V2.value : void 0 };
  }, toJSON(V2) {
    const q2 = {};
    return V2.key !== void 0 && (q2.key = V2.key), V2.value !== void 0 && (q2.value = V2.value), q2;
  }, fromPartial(V2) {
    var q2, G2;
    const H2 = _();
    return H2.key = (q2 = V2.key) !== null && q2 !== void 0 ? q2 : "", H2.value = (G2 = V2.value) !== null && G2 !== void 0 ? G2 : void 0, H2;
  } };
  function k() {
    return { nullValue: void 0, numberValue: void 0, stringValue: void 0, boolValue: void 0, structValue: void 0, listValue: void 0 };
  }
  a92.Value = { encode(V2, q2 = c.default.Writer.create()) {
    return V2.nullValue !== void 0 && q2.uint32(8).int32(g2(V2.nullValue)), V2.numberValue !== void 0 && q2.uint32(17).double(V2.numberValue), V2.stringValue !== void 0 && q2.uint32(26).string(V2.stringValue), V2.boolValue !== void 0 && q2.uint32(32).bool(V2.boolValue), V2.structValue !== void 0 && a92.Struct.encode(a92.Struct.wrap(V2.structValue), q2.uint32(42).fork()).ldelim(), V2.listValue !== void 0 && a92.ListValue.encode(a92.ListValue.wrap(V2.listValue), q2.uint32(50).fork()).ldelim(), q2;
  }, decode(V2, q2) {
    const G2 = V2 instanceof c.default.Reader ? V2 : new c.default.Reader(V2);
    let H2 = q2 === void 0 ? G2.len : G2.pos + q2;
    const B2 = k();
    for (; G2.pos < H2; ) {
      const Y2 = G2.uint32();
      switch (Y2 >>> 3) {
        case 1:
          B2.nullValue = v2(G2.int32());
          break;
        case 2:
          B2.numberValue = G2.double();
          break;
        case 3:
          B2.stringValue = G2.string();
          break;
        case 4:
          B2.boolValue = G2.bool();
          break;
        case 5:
          B2.structValue = a92.Struct.unwrap(a92.Struct.decode(G2, G2.uint32()));
          break;
        case 6:
          B2.listValue = a92.ListValue.unwrap(a92.ListValue.decode(G2, G2.uint32()));
          break;
        default:
          G2.skipType(Y2 & 7);
          break;
      }
    }
    return B2;
  }, fromJSON(V2) {
    return { nullValue: J2(V2.nullValue) ? v2(V2.nullValue) : void 0, numberValue: J2(V2.numberValue) ? Number(V2.numberValue) : void 0, stringValue: J2(V2.stringValue) ? String(V2.stringValue) : void 0, boolValue: J2(V2.boolValue) ? !!V2.boolValue : void 0, structValue: $(V2.structValue) ? V2.structValue : void 0, listValue: Array.isArray(V2.listValue) ? [...V2.listValue] : void 0 };
  }, toJSON(V2) {
    const q2 = {};
    return V2.nullValue !== void 0 && (q2.nullValue = V2.nullValue !== void 0 ? S2(V2.nullValue) : void 0), V2.numberValue !== void 0 && (q2.numberValue = V2.numberValue), V2.stringValue !== void 0 && (q2.stringValue = V2.stringValue), V2.boolValue !== void 0 && (q2.boolValue = V2.boolValue), V2.structValue !== void 0 && (q2.structValue = V2.structValue), V2.listValue !== void 0 && (q2.listValue = V2.listValue), q2;
  }, fromPartial(V2) {
    var q2, G2, H2, B2, Y2, ne2;
    const Z2 = k();
    return Z2.nullValue = (q2 = V2.nullValue) !== null && q2 !== void 0 ? q2 : void 0, Z2.numberValue = (G2 = V2.numberValue) !== null && G2 !== void 0 ? G2 : void 0, Z2.stringValue = (H2 = V2.stringValue) !== null && H2 !== void 0 ? H2 : void 0, Z2.boolValue = (B2 = V2.boolValue) !== null && B2 !== void 0 ? B2 : void 0, Z2.structValue = (Y2 = V2.structValue) !== null && Y2 !== void 0 ? Y2 : void 0, Z2.listValue = (ne2 = V2.listValue) !== null && ne2 !== void 0 ? ne2 : void 0, Z2;
  }, wrap(V2) {
    const q2 = k();
    if (V2 === null)
      q2.nullValue = l2.NULL_VALUE;
    else if (typeof V2 == "boolean")
      q2.boolValue = V2;
    else if (typeof V2 == "number")
      q2.numberValue = V2;
    else if (typeof V2 == "string")
      q2.stringValue = V2;
    else if (Array.isArray(V2))
      q2.listValue = V2;
    else if (typeof V2 == "object")
      q2.structValue = V2;
    else if (typeof V2 < "u")
      throw new Error("Unsupported any value type: " + typeof V2);
    return q2;
  }, unwrap(V2) {
    if ((V2 == null ? void 0 : V2.stringValue) !== void 0)
      return V2.stringValue;
    if ((V2 == null ? void 0 : V2.numberValue) !== void 0)
      return V2.numberValue;
    if ((V2 == null ? void 0 : V2.boolValue) !== void 0)
      return V2.boolValue;
    if ((V2 == null ? void 0 : V2.structValue) !== void 0)
      return V2.structValue;
    if ((V2 == null ? void 0 : V2.listValue) !== void 0)
      return V2.listValue;
    if ((V2 == null ? void 0 : V2.nullValue) !== void 0)
      return null;
  } };
  function L2() {
    return { values: [] };
  }
  a92.ListValue = { encode(V2, q2 = c.default.Writer.create()) {
    for (const G2 of V2.values)
      a92.Value.encode(a92.Value.wrap(G2), q2.uint32(10).fork()).ldelim();
    return q2;
  }, decode(V2, q2) {
    const G2 = V2 instanceof c.default.Reader ? V2 : new c.default.Reader(V2);
    let H2 = q2 === void 0 ? G2.len : G2.pos + q2;
    const B2 = L2();
    for (; G2.pos < H2; ) {
      const Y2 = G2.uint32();
      switch (Y2 >>> 3) {
        case 1:
          B2.values.push(a92.Value.unwrap(a92.Value.decode(G2, G2.uint32())));
          break;
        default:
          G2.skipType(Y2 & 7);
          break;
      }
    }
    return B2;
  }, fromJSON(V2) {
    return { values: Array.isArray(V2 == null ? void 0 : V2.values) ? [...V2.values] : [] };
  }, toJSON(V2) {
    const q2 = {};
    return V2.values ? q2.values = V2.values.map((G2) => G2) : q2.values = [], q2;
  }, fromPartial(V2) {
    var q2;
    const G2 = L2();
    return G2.values = ((q2 = V2.values) === null || q2 === void 0 ? void 0 : q2.map((H2) => H2)) || [], G2;
  }, wrap(V2) {
    const q2 = L2();
    return q2.values = V2 ?? [], q2;
  }, unwrap(V2) {
    return V2.values;
  } };
  var M2 = (() => {
    if (typeof M2 < "u")
      return M2;
    if (typeof self < "u")
      return self;
    if (typeof window < "u")
      return window;
    if (typeof commonjsGlobal$1 < "u")
      return commonjsGlobal$1;
    throw "Unable to locate global object";
  })();
  function $(V2) {
    return typeof V2 == "object" && V2 !== null;
  }
  function J2(V2) {
    return V2 != null;
  }
})(struct$1);
var timestamp$2 = {}, __importDefault$9 = commonjsGlobal$1 && commonjsGlobal$1.__importDefault || function(a92) {
  return a92 && a92.__esModule ? a92 : { default: a92 };
};
Object.defineProperty(timestamp$2, "__esModule", { value: true });
timestamp$2.Timestamp = timestamp$2.protobufPackage = void 0;
const long_1$2 = __importDefault$9(umdExports), minimal_1$2 = __importDefault$9(minimal);
timestamp$2.protobufPackage = "google.protobuf";
function createBaseTimestamp$1() {
  return { seconds: 0, nanos: 0 };
}
timestamp$2.Timestamp = { encode(a92, u2 = minimal_1$2.default.Writer.create()) {
  return a92.seconds !== 0 && u2.uint32(8).int64(a92.seconds), a92.nanos !== 0 && u2.uint32(16).int32(a92.nanos), u2;
}, decode(a92, u2) {
  const c = a92 instanceof minimal_1$2.default.Reader ? a92 : new minimal_1$2.default.Reader(a92);
  let l2 = u2 === void 0 ? c.len : c.pos + u2;
  const v2 = createBaseTimestamp$1();
  for (; c.pos < l2; ) {
    const S2 = c.uint32();
    switch (S2 >>> 3) {
      case 1:
        v2.seconds = longToNumber$2(c.int64());
        break;
      case 2:
        v2.nanos = c.int32();
        break;
      default:
        c.skipType(S2 & 7);
        break;
    }
  }
  return v2;
}, fromJSON(a92) {
  return { seconds: isSet$2(a92.seconds) ? Number(a92.seconds) : 0, nanos: isSet$2(a92.nanos) ? Number(a92.nanos) : 0 };
}, toJSON(a92) {
  const u2 = {};
  return a92.seconds !== void 0 && (u2.seconds = Math.round(a92.seconds)), a92.nanos !== void 0 && (u2.nanos = Math.round(a92.nanos)), u2;
}, fromPartial(a92) {
  var u2, c;
  const l2 = createBaseTimestamp$1();
  return l2.seconds = (u2 = a92.seconds) !== null && u2 !== void 0 ? u2 : 0, l2.nanos = (c = a92.nanos) !== null && c !== void 0 ? c : 0, l2;
} };
var globalThis$3 = (() => {
  if (typeof globalThis$3 < "u")
    return globalThis$3;
  if (typeof self < "u")
    return self;
  if (typeof window < "u")
    return window;
  if (typeof commonjsGlobal$1 < "u")
    return commonjsGlobal$1;
  throw "Unable to locate global object";
})();
function longToNumber$2(a92) {
  if (a92.gt(Number.MAX_SAFE_INTEGER))
    throw new globalThis$3.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  return a92.toNumber();
}
minimal_1$2.default.util.Long !== long_1$2.default && (minimal_1$2.default.util.Long = long_1$2.default, minimal_1$2.default.configure());
function isSet$2(a92) {
  return a92 != null;
}
(function(a92) {
  var u2 = commonjsGlobal$1 && commonjsGlobal$1.__importDefault || function(p2) {
    return p2 && p2.__esModule ? p2 : { default: p2 };
  };
  Object.defineProperty(a92, "__esModule", { value: true }), a92.Role = a92.regionToNumber = a92.regionToJSON = a92.regionFromJSON = a92.Region = a92.sourceTriggerActionToNumber = a92.sourceTriggerActionToJSON = a92.sourceTriggerActionFromJSON = a92.SourceTriggerAction = a92.s3ACLToNumber = a92.s3ACLToJSON = a92.s3ACLFromJSON = a92.S3ACL = a92.projectBroadcastPhaseToNumber = a92.projectBroadcastPhaseToJSON = a92.projectBroadcastPhaseFromJSON = a92.ProjectBroadcastPhase = a92.videoCodecRateControlModeToNumber = a92.videoCodecRateControlModeToJSON = a92.videoCodecRateControlModeFromJSON = a92.VideoCodecRateControlMode = a92.audioCodecToNumber = a92.audioCodecToJSON = a92.audioCodecFromJSON = a92.AudioCodec = a92.videoCodecProfileToNumber = a92.videoCodecProfileToJSON = a92.videoCodecProfileFromJSON = a92.VideoCodecProfile = a92.videoCodecToNumber = a92.videoCodecToJSON = a92.videoCodecFromJSON = a92.VideoCodec = a92.renderingQualityToNumber = a92.renderingQualityToJSON = a92.renderingQualityFromJSON = a92.RenderingQuality = a92.audioChannelLayoutToNumber = a92.audioChannelLayoutToJSON = a92.audioChannelLayoutFromJSON = a92.AudioChannelLayout = a92.videoColorSpaceToNumber = a92.videoColorSpaceToJSON = a92.videoColorSpaceFromJSON = a92.VideoColorSpace = a92.imageFormatToNumber = a92.imageFormatToJSON = a92.imageFormatFromJSON = a92.ImageFormat = a92.protobufPackage = void 0, a92.ExternalComposition = a92.SceneComposition = a92.StudioSdkComposition = a92.PreviewAddress = a92.PreviewWebRtcAddress = a92.PreviewHlsPullAddress = a92.ProjectTrigger = a92.WebRtcTrigger = a92.SourceTrigger = a92.DestinationAddress = a92.S3StorageAddress = a92.ObjectStoragePackaging = a92.HlsPackaging = a92.HlsLifecycle = a92.HlsLifecycleVod = a92.HlsLifecycleLive = a92.DestinationAgoraPushAddress = a92.DestinationSrtPushAddress = a92.DestinationRtmpPushAddress = a92.SourceAddress = a92.SrtPullAddress = a92.RtmpPullAddress = a92.SrtPushAddress = a92.SourceRtmpPushAddress = a92.Encoding = a92.AudioEncoding = a92.VideoEncoding = a92.VideoCodecRateControl = a92.Rendering = a92.AudioRendering = a92.VideoRendering = a92.eventTypeToNumber = a92.eventTypeToJSON = a92.eventTypeFromJSON = a92.EventType = a92.eventSubTypeToNumber = a92.eventSubTypeToJSON = a92.eventSubTypeFromJSON = a92.EventSubType = a92.connectStateToNumber = a92.connectStateToJSON = a92.connectStateFromJSON = a92.ConnectState = a92.projectBroadcastErrorToNumber = a92.projectBroadcastErrorToJSON = a92.projectBroadcastErrorFromJSON = a92.ProjectBroadcastError = a92.roleToNumber = a92.roleToJSON = a92.roleFromJSON = void 0, a92.CreateSourceResponse = a92.CreateSourceRequest = a92.UpdateDestinationResponse = a92.UpdateDestinationRequest = a92.DeleteDestinationResponse = a92.DeleteDestinationRequest = a92.GetDestinationResponse = a92.GetDestinationRequest = a92.CreateDestinationResponse = a92.CreateDestinationRequest = a92.StopProjectWebRtcResponse = a92.StopProjectWebRtcRequest = a92.StartProjectWebRtcResponse = a92.StartProjectWebRtcRequest = a92.GetProjectBroadcastStatusResponse = a92.GetProjectBroadcastStatusRequest = a92.GetProjectBroadcastSnapshotResponse = a92.GetProjectBroadcastSnapshotRequest = a92.GetProjectResponse = a92.GetProjectRequest = a92.StopProjectBroadcastResponse = a92.StopProjectBroadcastRequest = a92.StartProjectBroadcastResponse = a92.StartProjectBroadcastRequest = a92.DeleteProjectResponse = a92.DeleteProjectRequest = a92.UpdateProjectResponse = a92.UpdateProjectRequest = a92.CreateProjectResponse = a92.CreateProjectRequest = a92.GetCollectionsResponse = a92.GetCollectionsRequest = a92.DeleteCollectionResponse = a92.DeleteCollectionRequest = a92.UpdateCollectionResponse = a92.UpdateCollectionRequest = a92.GetCollectionResponse = a92.GetCollectionRequest = a92.CreateCollectionResponse = a92.CreateCollectionRequest = a92.Collection = a92.Project = a92.Destination = a92.Source = a92.ProjectBroadcastStatus = a92.LatLong = a92.WebRtcAccess = a92.WebRtc = a92.HostedWebRtc = a92.Composition = void 0, a92.SourceAddEvent = a92.SourceUpdateEvent = a92.SourceDeleteEvent = a92.SourceCreateEvent = a92.CollectionUpdateEvent = a92.CollectionDeleteEvent = a92.CollectionCreateEvent = a92.ProjectBroadcastStateEvent = a92.ProjectUpdateEvent = a92.ProjectDeleteEvent = a92.ProjectCreateEvent = a92.DestinationStateEvent = a92.DestinationUpdateEvent = a92.DestinationDeleteEvent = a92.DestinationCreateEvent = a92.GetTestTokenResponse = a92.GetTestTokenRequest = a92.GetJsonWebKeySetResponse = a92.GetJsonWebKeySetRequest = a92.JsonWebKey = a92.GuestCodeRedirectResponse = a92.GuestCodeRedirectRequest = a92.GuestCode = a92.RefreshAccessTokenResponse = a92.RefreshAccessTokenRequest = a92.CreateWebRtcAccessTokenResponse = a92.CreateWebRtcAccessTokenRequest = a92.CreateGuestAccessTokenResponse = a92.CreateGuestAccessTokenRequest = a92.GuestAccessToken = a92.GuestAccessTokenExchange = a92.GuestAccessTokenDirect = a92.CreateAccessTokenResponse = a92.CreateAccessTokenRequest = a92.GetSourcePlaylistResponse = a92.GetSourcePlaylistRequest = a92.RemoveSourceFromProjectResponse = a92.RemoveSourceFromProjectRequest = a92.UpdateSourceResponse = a92.UpdateSourceRequest = a92.GetSourcesResponse = a92.GetSourcesRequest = a92.GetSourceResponse = a92.GetSourceRequest = a92.UpdateSourceInProjectResponse = a92.UpdateSourceInProjectRequest = a92.AddSourceToProjectResponse = a92.AddSourceToProjectRequest = a92.DeleteSourceResponse = a92.DeleteSourceRequest = void 0, a92.PublicAuthenticationServiceDefinition = a92.PublicAuthenticationServiceClientImpl = a92.AuthenticationServiceDefinition = a92.AuthenticationServiceClientImpl = a92.BackendAuthenticationServiceDefinition = a92.BackendAuthenticationServiceClientImpl = a92.SourceServiceDefinition = a92.SourceServiceClientImpl = a92.DestinationServiceDefinition = a92.DestinationServiceClientImpl = a92.ProjectServiceDefinition = a92.ProjectServiceClientImpl = a92.CollectionServiceDefinition = a92.CollectionServiceClientImpl = a92.LiveEvent = a92.SourceEvent = a92.ProjectEvent = a92.DestinationEvent = a92.CollectionEvent = a92.SourceStateEvent = a92.SourceRemoveEvent = void 0;
  const c = u2(minimal), l2 = httpbody, v2 = field_mask, S2 = struct$1, g2 = timestamp$2;
  a92.protobufPackage = "live.v21";
  var E2;
  (function(p2) {
    p2.IMAGE_FORMAT_UNSPECIFIED = "IMAGE_FORMAT_UNSPECIFIED", p2.IMAGE_FORMAT_JPEG = "IMAGE_FORMAT_JPEG";
  })(E2 = a92.ImageFormat || (a92.ImageFormat = {}));
  function _(p2) {
    switch (p2) {
      case 0:
      case "IMAGE_FORMAT_UNSPECIFIED":
        return E2.IMAGE_FORMAT_UNSPECIFIED;
      case 1:
      case "IMAGE_FORMAT_JPEG":
        return E2.IMAGE_FORMAT_JPEG;
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum ImageFormat");
    }
  }
  a92.imageFormatFromJSON = _;
  function k(p2) {
    switch (p2) {
      case E2.IMAGE_FORMAT_UNSPECIFIED:
        return "IMAGE_FORMAT_UNSPECIFIED";
      case E2.IMAGE_FORMAT_JPEG:
        return "IMAGE_FORMAT_JPEG";
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum ImageFormat");
    }
  }
  a92.imageFormatToJSON = k;
  function L2(p2) {
    switch (p2) {
      case E2.IMAGE_FORMAT_UNSPECIFIED:
        return 0;
      case E2.IMAGE_FORMAT_JPEG:
        return 1;
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum ImageFormat");
    }
  }
  a92.imageFormatToNumber = L2;
  var M2;
  (function(p2) {
    p2.VIDEO_COLOR_SPACE_UNSPECIFIED = "VIDEO_COLOR_SPACE_UNSPECIFIED", p2.VIDEO_COLOR_SPACE_YUV420 = "VIDEO_COLOR_SPACE_YUV420";
  })(M2 = a92.VideoColorSpace || (a92.VideoColorSpace = {}));
  function $(p2) {
    switch (p2) {
      case 0:
      case "VIDEO_COLOR_SPACE_UNSPECIFIED":
        return M2.VIDEO_COLOR_SPACE_UNSPECIFIED;
      case 1:
      case "VIDEO_COLOR_SPACE_YUV420":
        return M2.VIDEO_COLOR_SPACE_YUV420;
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum VideoColorSpace");
    }
  }
  a92.videoColorSpaceFromJSON = $;
  function J2(p2) {
    switch (p2) {
      case M2.VIDEO_COLOR_SPACE_UNSPECIFIED:
        return "VIDEO_COLOR_SPACE_UNSPECIFIED";
      case M2.VIDEO_COLOR_SPACE_YUV420:
        return "VIDEO_COLOR_SPACE_YUV420";
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum VideoColorSpace");
    }
  }
  a92.videoColorSpaceToJSON = J2;
  function V2(p2) {
    switch (p2) {
      case M2.VIDEO_COLOR_SPACE_UNSPECIFIED:
        return 0;
      case M2.VIDEO_COLOR_SPACE_YUV420:
        return 1;
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum VideoColorSpace");
    }
  }
  a92.videoColorSpaceToNumber = V2;
  var q2;
  (function(p2) {
    p2.AUDIO_CHANNEL_LAYOUT_UNSPECIFIED = "AUDIO_CHANNEL_LAYOUT_UNSPECIFIED", p2.AUDIO_CHANNEL_LAYOUT_STEREO = "AUDIO_CHANNEL_LAYOUT_STEREO";
  })(q2 = a92.AudioChannelLayout || (a92.AudioChannelLayout = {}));
  function G2(p2) {
    switch (p2) {
      case 0:
      case "AUDIO_CHANNEL_LAYOUT_UNSPECIFIED":
        return q2.AUDIO_CHANNEL_LAYOUT_UNSPECIFIED;
      case 1:
      case "AUDIO_CHANNEL_LAYOUT_STEREO":
        return q2.AUDIO_CHANNEL_LAYOUT_STEREO;
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum AudioChannelLayout");
    }
  }
  a92.audioChannelLayoutFromJSON = G2;
  function H2(p2) {
    switch (p2) {
      case q2.AUDIO_CHANNEL_LAYOUT_UNSPECIFIED:
        return "AUDIO_CHANNEL_LAYOUT_UNSPECIFIED";
      case q2.AUDIO_CHANNEL_LAYOUT_STEREO:
        return "AUDIO_CHANNEL_LAYOUT_STEREO";
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum AudioChannelLayout");
    }
  }
  a92.audioChannelLayoutToJSON = H2;
  function B2(p2) {
    switch (p2) {
      case q2.AUDIO_CHANNEL_LAYOUT_UNSPECIFIED:
        return 0;
      case q2.AUDIO_CHANNEL_LAYOUT_STEREO:
        return 1;
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum AudioChannelLayout");
    }
  }
  a92.audioChannelLayoutToNumber = B2;
  var Y2;
  (function(p2) {
    p2.RENDERING_QUALITY_UNSPECIFIED = "RENDERING_QUALITY_UNSPECIFIED", p2.RENDERING_QUALITY_STANDARD = "RENDERING_QUALITY_STANDARD", p2.RENDERING_QUALITY_HIGH = "RENDERING_QUALITY_HIGH";
  })(Y2 = a92.RenderingQuality || (a92.RenderingQuality = {}));
  function ne2(p2) {
    switch (p2) {
      case 0:
      case "RENDERING_QUALITY_UNSPECIFIED":
        return Y2.RENDERING_QUALITY_UNSPECIFIED;
      case 1:
      case "RENDERING_QUALITY_STANDARD":
        return Y2.RENDERING_QUALITY_STANDARD;
      case 2:
      case "RENDERING_QUALITY_HIGH":
        return Y2.RENDERING_QUALITY_HIGH;
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum RenderingQuality");
    }
  }
  a92.renderingQualityFromJSON = ne2;
  function Z2(p2) {
    switch (p2) {
      case Y2.RENDERING_QUALITY_UNSPECIFIED:
        return "RENDERING_QUALITY_UNSPECIFIED";
      case Y2.RENDERING_QUALITY_STANDARD:
        return "RENDERING_QUALITY_STANDARD";
      case Y2.RENDERING_QUALITY_HIGH:
        return "RENDERING_QUALITY_HIGH";
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum RenderingQuality");
    }
  }
  a92.renderingQualityToJSON = Z2;
  function re2(p2) {
    switch (p2) {
      case Y2.RENDERING_QUALITY_UNSPECIFIED:
        return 0;
      case Y2.RENDERING_QUALITY_STANDARD:
        return 1;
      case Y2.RENDERING_QUALITY_HIGH:
        return 2;
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum RenderingQuality");
    }
  }
  a92.renderingQualityToNumber = re2;
  var oe2;
  (function(p2) {
    p2.VIDEO_CODEC_UNSPECIFIED = "VIDEO_CODEC_UNSPECIFIED", p2.VIDEO_CODEC_H264 = "VIDEO_CODEC_H264";
  })(oe2 = a92.VideoCodec || (a92.VideoCodec = {}));
  function de2(p2) {
    switch (p2) {
      case 0:
      case "VIDEO_CODEC_UNSPECIFIED":
        return oe2.VIDEO_CODEC_UNSPECIFIED;
      case 1:
      case "VIDEO_CODEC_H264":
        return oe2.VIDEO_CODEC_H264;
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum VideoCodec");
    }
  }
  a92.videoCodecFromJSON = de2;
  function A2(p2) {
    switch (p2) {
      case oe2.VIDEO_CODEC_UNSPECIFIED:
        return "VIDEO_CODEC_UNSPECIFIED";
      case oe2.VIDEO_CODEC_H264:
        return "VIDEO_CODEC_H264";
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum VideoCodec");
    }
  }
  a92.videoCodecToJSON = A2;
  function N2(p2) {
    switch (p2) {
      case oe2.VIDEO_CODEC_UNSPECIFIED:
        return 0;
      case oe2.VIDEO_CODEC_H264:
        return 1;
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum VideoCodec");
    }
  }
  a92.videoCodecToNumber = N2;
  var D2;
  (function(p2) {
    p2.VIDEO_CODEC_PROFILE_UNSPECIFIED = "VIDEO_CODEC_PROFILE_UNSPECIFIED", p2.VIDEO_CODEC_PROFILE_BASELINE = "VIDEO_CODEC_PROFILE_BASELINE", p2.VIDEO_CODEC_PROFILE_MAIN = "VIDEO_CODEC_PROFILE_MAIN", p2.VIDEO_CODEC_PROFILE_HIGH = "VIDEO_CODEC_PROFILE_HIGH";
  })(D2 = a92.VideoCodecProfile || (a92.VideoCodecProfile = {}));
  function W2(p2) {
    switch (p2) {
      case 0:
      case "VIDEO_CODEC_PROFILE_UNSPECIFIED":
        return D2.VIDEO_CODEC_PROFILE_UNSPECIFIED;
      case 2:
      case "VIDEO_CODEC_PROFILE_BASELINE":
        return D2.VIDEO_CODEC_PROFILE_BASELINE;
      case 3:
      case "VIDEO_CODEC_PROFILE_MAIN":
        return D2.VIDEO_CODEC_PROFILE_MAIN;
      case 4:
      case "VIDEO_CODEC_PROFILE_HIGH":
        return D2.VIDEO_CODEC_PROFILE_HIGH;
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum VideoCodecProfile");
    }
  }
  a92.videoCodecProfileFromJSON = W2;
  function ee2(p2) {
    switch (p2) {
      case D2.VIDEO_CODEC_PROFILE_UNSPECIFIED:
        return "VIDEO_CODEC_PROFILE_UNSPECIFIED";
      case D2.VIDEO_CODEC_PROFILE_BASELINE:
        return "VIDEO_CODEC_PROFILE_BASELINE";
      case D2.VIDEO_CODEC_PROFILE_MAIN:
        return "VIDEO_CODEC_PROFILE_MAIN";
      case D2.VIDEO_CODEC_PROFILE_HIGH:
        return "VIDEO_CODEC_PROFILE_HIGH";
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum VideoCodecProfile");
    }
  }
  a92.videoCodecProfileToJSON = ee2;
  function ae2(p2) {
    switch (p2) {
      case D2.VIDEO_CODEC_PROFILE_UNSPECIFIED:
        return 0;
      case D2.VIDEO_CODEC_PROFILE_BASELINE:
        return 2;
      case D2.VIDEO_CODEC_PROFILE_MAIN:
        return 3;
      case D2.VIDEO_CODEC_PROFILE_HIGH:
        return 4;
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum VideoCodecProfile");
    }
  }
  a92.videoCodecProfileToNumber = ae2;
  var ye2;
  (function(p2) {
    p2.AUDIO_CODEC_UNSPECIFIED = "AUDIO_CODEC_UNSPECIFIED", p2.AUDIO_CODEC_AAC = "AUDIO_CODEC_AAC";
  })(ye2 = a92.AudioCodec || (a92.AudioCodec = {}));
  function he2(p2) {
    switch (p2) {
      case 0:
      case "AUDIO_CODEC_UNSPECIFIED":
        return ye2.AUDIO_CODEC_UNSPECIFIED;
      case 1:
      case "AUDIO_CODEC_AAC":
        return ye2.AUDIO_CODEC_AAC;
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum AudioCodec");
    }
  }
  a92.audioCodecFromJSON = he2;
  function le2(p2) {
    switch (p2) {
      case ye2.AUDIO_CODEC_UNSPECIFIED:
        return "AUDIO_CODEC_UNSPECIFIED";
      case ye2.AUDIO_CODEC_AAC:
        return "AUDIO_CODEC_AAC";
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum AudioCodec");
    }
  }
  a92.audioCodecToJSON = le2;
  function we2(p2) {
    switch (p2) {
      case ye2.AUDIO_CODEC_UNSPECIFIED:
        return 0;
      case ye2.AUDIO_CODEC_AAC:
        return 1;
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum AudioCodec");
    }
  }
  a92.audioCodecToNumber = we2;
  var Be2;
  (function(p2) {
    p2.VIDEO_CODEC_RATE_CONTROL_MODE_UNSPECIFIED = "VIDEO_CODEC_RATE_CONTROL_MODE_UNSPECIFIED", p2.VIDEO_CODEC_RATE_CONTROL_MODE_CBR = "VIDEO_CODEC_RATE_CONTROL_MODE_CBR";
  })(Be2 = a92.VideoCodecRateControlMode || (a92.VideoCodecRateControlMode = {}));
  function Ne2(p2) {
    switch (p2) {
      case 0:
      case "VIDEO_CODEC_RATE_CONTROL_MODE_UNSPECIFIED":
        return Be2.VIDEO_CODEC_RATE_CONTROL_MODE_UNSPECIFIED;
      case 1:
      case "VIDEO_CODEC_RATE_CONTROL_MODE_CBR":
        return Be2.VIDEO_CODEC_RATE_CONTROL_MODE_CBR;
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum VideoCodecRateControlMode");
    }
  }
  a92.videoCodecRateControlModeFromJSON = Ne2;
  function Le2(p2) {
    switch (p2) {
      case Be2.VIDEO_CODEC_RATE_CONTROL_MODE_UNSPECIFIED:
        return "VIDEO_CODEC_RATE_CONTROL_MODE_UNSPECIFIED";
      case Be2.VIDEO_CODEC_RATE_CONTROL_MODE_CBR:
        return "VIDEO_CODEC_RATE_CONTROL_MODE_CBR";
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum VideoCodecRateControlMode");
    }
  }
  a92.videoCodecRateControlModeToJSON = Le2;
  function $e2(p2) {
    switch (p2) {
      case Be2.VIDEO_CODEC_RATE_CONTROL_MODE_UNSPECIFIED:
        return 0;
      case Be2.VIDEO_CODEC_RATE_CONTROL_MODE_CBR:
        return 1;
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum VideoCodecRateControlMode");
    }
  }
  a92.videoCodecRateControlModeToNumber = $e2;
  var Ue2;
  (function(p2) {
    p2.PROJECT_BROADCAST_PHASE_UNSPECIFIED = "PROJECT_BROADCAST_PHASE_UNSPECIFIED", p2.PROJECT_BROADCAST_PHASE_NOT_RUNNING = "PROJECT_BROADCAST_PHASE_NOT_RUNNING", p2.PROJECT_BROADCAST_PHASE_WAITING = "PROJECT_BROADCAST_PHASE_WAITING", p2.PROJECT_BROADCAST_PHASE_STARTING = "PROJECT_BROADCAST_PHASE_STARTING", p2.PROJECT_BROADCAST_PHASE_RUNNING = "PROJECT_BROADCAST_PHASE_RUNNING", p2.PROJECT_BROADCAST_PHASE_STOPPING = "PROJECT_BROADCAST_PHASE_STOPPING", p2.PROJECT_BROADCAST_PHASE_STOPPED = "PROJECT_BROADCAST_PHASE_STOPPED", p2.PROJECT_BROADCAST_PHASE_ARCHIVED = "PROJECT_BROADCAST_PHASE_ARCHIVED";
  })(Ue2 = a92.ProjectBroadcastPhase || (a92.ProjectBroadcastPhase = {}));
  function Ge2(p2) {
    switch (p2) {
      case 0:
      case "PROJECT_BROADCAST_PHASE_UNSPECIFIED":
        return Ue2.PROJECT_BROADCAST_PHASE_UNSPECIFIED;
      case 1:
      case "PROJECT_BROADCAST_PHASE_NOT_RUNNING":
        return Ue2.PROJECT_BROADCAST_PHASE_NOT_RUNNING;
      case 2:
      case "PROJECT_BROADCAST_PHASE_WAITING":
        return Ue2.PROJECT_BROADCAST_PHASE_WAITING;
      case 3:
      case "PROJECT_BROADCAST_PHASE_STARTING":
        return Ue2.PROJECT_BROADCAST_PHASE_STARTING;
      case 4:
      case "PROJECT_BROADCAST_PHASE_RUNNING":
        return Ue2.PROJECT_BROADCAST_PHASE_RUNNING;
      case 5:
      case "PROJECT_BROADCAST_PHASE_STOPPING":
        return Ue2.PROJECT_BROADCAST_PHASE_STOPPING;
      case 6:
      case "PROJECT_BROADCAST_PHASE_STOPPED":
        return Ue2.PROJECT_BROADCAST_PHASE_STOPPED;
      case 7:
      case "PROJECT_BROADCAST_PHASE_ARCHIVED":
        return Ue2.PROJECT_BROADCAST_PHASE_ARCHIVED;
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum ProjectBroadcastPhase");
    }
  }
  a92.projectBroadcastPhaseFromJSON = Ge2;
  function He2(p2) {
    switch (p2) {
      case Ue2.PROJECT_BROADCAST_PHASE_UNSPECIFIED:
        return "PROJECT_BROADCAST_PHASE_UNSPECIFIED";
      case Ue2.PROJECT_BROADCAST_PHASE_NOT_RUNNING:
        return "PROJECT_BROADCAST_PHASE_NOT_RUNNING";
      case Ue2.PROJECT_BROADCAST_PHASE_WAITING:
        return "PROJECT_BROADCAST_PHASE_WAITING";
      case Ue2.PROJECT_BROADCAST_PHASE_STARTING:
        return "PROJECT_BROADCAST_PHASE_STARTING";
      case Ue2.PROJECT_BROADCAST_PHASE_RUNNING:
        return "PROJECT_BROADCAST_PHASE_RUNNING";
      case Ue2.PROJECT_BROADCAST_PHASE_STOPPING:
        return "PROJECT_BROADCAST_PHASE_STOPPING";
      case Ue2.PROJECT_BROADCAST_PHASE_STOPPED:
        return "PROJECT_BROADCAST_PHASE_STOPPED";
      case Ue2.PROJECT_BROADCAST_PHASE_ARCHIVED:
        return "PROJECT_BROADCAST_PHASE_ARCHIVED";
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum ProjectBroadcastPhase");
    }
  }
  a92.projectBroadcastPhaseToJSON = He2;
  function Ve2(p2) {
    switch (p2) {
      case Ue2.PROJECT_BROADCAST_PHASE_UNSPECIFIED:
        return 0;
      case Ue2.PROJECT_BROADCAST_PHASE_NOT_RUNNING:
        return 1;
      case Ue2.PROJECT_BROADCAST_PHASE_WAITING:
        return 2;
      case Ue2.PROJECT_BROADCAST_PHASE_STARTING:
        return 3;
      case Ue2.PROJECT_BROADCAST_PHASE_RUNNING:
        return 4;
      case Ue2.PROJECT_BROADCAST_PHASE_STOPPING:
        return 5;
      case Ue2.PROJECT_BROADCAST_PHASE_STOPPED:
        return 6;
      case Ue2.PROJECT_BROADCAST_PHASE_ARCHIVED:
        return 7;
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum ProjectBroadcastPhase");
    }
  }
  a92.projectBroadcastPhaseToNumber = Ve2;
  var be2;
  (function(p2) {
    p2.S3ACL_UNSPECIFIED = "S3ACL_UNSPECIFIED", p2.S3ACL_PRIVATE = "S3ACL_PRIVATE", p2.S3ACL_PUBLIC_READ = "S3ACL_PUBLIC_READ", p2.S3ACL_PUBLIC_READ_WRITE = "S3ACL_PUBLIC_READ_WRITE", p2.S3ACL_AUTHENTICATED_READ = "S3ACL_AUTHENTICATED_READ", p2.S3ACL_BUCKET_OWNER_READ = "S3ACL_BUCKET_OWNER_READ", p2.S3ACL_BUCKET_OWNER_FULL_CONTROL = "S3ACL_BUCKET_OWNER_FULL_CONTROL";
  })(be2 = a92.S3ACL || (a92.S3ACL = {}));
  function Ae2(p2) {
    switch (p2) {
      case 0:
      case "S3ACL_UNSPECIFIED":
        return be2.S3ACL_UNSPECIFIED;
      case 1:
      case "S3ACL_PRIVATE":
        return be2.S3ACL_PRIVATE;
      case 2:
      case "S3ACL_PUBLIC_READ":
        return be2.S3ACL_PUBLIC_READ;
      case 3:
      case "S3ACL_PUBLIC_READ_WRITE":
        return be2.S3ACL_PUBLIC_READ_WRITE;
      case 4:
      case "S3ACL_AUTHENTICATED_READ":
        return be2.S3ACL_AUTHENTICATED_READ;
      case 5:
      case "S3ACL_BUCKET_OWNER_READ":
        return be2.S3ACL_BUCKET_OWNER_READ;
      case 6:
      case "S3ACL_BUCKET_OWNER_FULL_CONTROL":
        return be2.S3ACL_BUCKET_OWNER_FULL_CONTROL;
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum S3ACL");
    }
  }
  a92.s3ACLFromJSON = Ae2;
  function qe2(p2) {
    switch (p2) {
      case be2.S3ACL_UNSPECIFIED:
        return "S3ACL_UNSPECIFIED";
      case be2.S3ACL_PRIVATE:
        return "S3ACL_PRIVATE";
      case be2.S3ACL_PUBLIC_READ:
        return "S3ACL_PUBLIC_READ";
      case be2.S3ACL_PUBLIC_READ_WRITE:
        return "S3ACL_PUBLIC_READ_WRITE";
      case be2.S3ACL_AUTHENTICATED_READ:
        return "S3ACL_AUTHENTICATED_READ";
      case be2.S3ACL_BUCKET_OWNER_READ:
        return "S3ACL_BUCKET_OWNER_READ";
      case be2.S3ACL_BUCKET_OWNER_FULL_CONTROL:
        return "S3ACL_BUCKET_OWNER_FULL_CONTROL";
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum S3ACL");
    }
  }
  a92.s3ACLToJSON = qe2;
  function xe2(p2) {
    switch (p2) {
      case be2.S3ACL_UNSPECIFIED:
        return 0;
      case be2.S3ACL_PRIVATE:
        return 1;
      case be2.S3ACL_PUBLIC_READ:
        return 2;
      case be2.S3ACL_PUBLIC_READ_WRITE:
        return 3;
      case be2.S3ACL_AUTHENTICATED_READ:
        return 4;
      case be2.S3ACL_BUCKET_OWNER_READ:
        return 5;
      case be2.S3ACL_BUCKET_OWNER_FULL_CONTROL:
        return 6;
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum S3ACL");
    }
  }
  a92.s3ACLToNumber = xe2;
  var Pe2;
  (function(p2) {
    p2.SOURCE_TRIGGER_ACTION_UNSPECIFIED = "SOURCE_TRIGGER_ACTION_UNSPECIFIED", p2.SOURCE_TRIGGER_ACTION_IGNORE = "SOURCE_TRIGGER_ACTION_IGNORE", p2.SOURCE_TRIGGER_ACTION_OR = "SOURCE_TRIGGER_ACTION_OR";
  })(Pe2 = a92.SourceTriggerAction || (a92.SourceTriggerAction = {}));
  function C2(p2) {
    switch (p2) {
      case 0:
      case "SOURCE_TRIGGER_ACTION_UNSPECIFIED":
        return Pe2.SOURCE_TRIGGER_ACTION_UNSPECIFIED;
      case 1:
      case "SOURCE_TRIGGER_ACTION_IGNORE":
        return Pe2.SOURCE_TRIGGER_ACTION_IGNORE;
      case 3:
      case "SOURCE_TRIGGER_ACTION_OR":
        return Pe2.SOURCE_TRIGGER_ACTION_OR;
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum SourceTriggerAction");
    }
  }
  a92.sourceTriggerActionFromJSON = C2;
  function x2(p2) {
    switch (p2) {
      case Pe2.SOURCE_TRIGGER_ACTION_UNSPECIFIED:
        return "SOURCE_TRIGGER_ACTION_UNSPECIFIED";
      case Pe2.SOURCE_TRIGGER_ACTION_IGNORE:
        return "SOURCE_TRIGGER_ACTION_IGNORE";
      case Pe2.SOURCE_TRIGGER_ACTION_OR:
        return "SOURCE_TRIGGER_ACTION_OR";
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum SourceTriggerAction");
    }
  }
  a92.sourceTriggerActionToJSON = x2;
  function Q2(p2) {
    switch (p2) {
      case Pe2.SOURCE_TRIGGER_ACTION_UNSPECIFIED:
        return 0;
      case Pe2.SOURCE_TRIGGER_ACTION_IGNORE:
        return 1;
      case Pe2.SOURCE_TRIGGER_ACTION_OR:
        return 3;
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum SourceTriggerAction");
    }
  }
  a92.sourceTriggerActionToNumber = Q2;
  var Se2;
  (function(p2) {
    p2.REGION_UNSPECIFIED = "REGION_UNSPECIFIED", p2.REGION_US_EAST_1 = "REGION_US_EAST_1", p2.REGION_US_EAST_2 = "REGION_US_EAST_2", p2.REGION_US_WEST_1 = "REGION_US_WEST_1", p2.REGION_US_WEST_2 = "REGION_US_WEST_2", p2.REGION_US_CENTRAL_1 = "REGION_US_CENTRAL_1", p2.REGION_AP_SOUTHEAST_1 = "REGION_AP_SOUTHEAST_1", p2.REGION_AP_SOUTHEAST_2 = "REGION_AP_SOUTHEAST_2", p2.REGION_AP_SOUTH_1 = "REGION_AP_SOUTH_1", p2.REGION_CA_EAST_1 = "REGION_CA_EAST_1", p2.REGION_EU_CENTRAL_1 = "REGION_EU_CENTRAL_1", p2.REGION_EU_WEST_1 = "REGION_EU_WEST_1";
  })(Se2 = a92.Region || (a92.Region = {}));
  function me2(p2) {
    switch (p2) {
      case 0:
      case "REGION_UNSPECIFIED":
        return Se2.REGION_UNSPECIFIED;
      case 1:
      case "REGION_US_EAST_1":
        return Se2.REGION_US_EAST_1;
      case 2:
      case "REGION_US_EAST_2":
        return Se2.REGION_US_EAST_2;
      case 3:
      case "REGION_US_WEST_1":
        return Se2.REGION_US_WEST_1;
      case 4:
      case "REGION_US_WEST_2":
        return Se2.REGION_US_WEST_2;
      case 5:
      case "REGION_US_CENTRAL_1":
        return Se2.REGION_US_CENTRAL_1;
      case 10:
      case "REGION_AP_SOUTHEAST_1":
        return Se2.REGION_AP_SOUTHEAST_1;
      case 11:
      case "REGION_AP_SOUTHEAST_2":
        return Se2.REGION_AP_SOUTHEAST_2;
      case 15:
      case "REGION_AP_SOUTH_1":
        return Se2.REGION_AP_SOUTH_1;
      case 20:
      case "REGION_CA_EAST_1":
        return Se2.REGION_CA_EAST_1;
      case 30:
      case "REGION_EU_CENTRAL_1":
        return Se2.REGION_EU_CENTRAL_1;
      case 31:
      case "REGION_EU_WEST_1":
        return Se2.REGION_EU_WEST_1;
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum Region");
    }
  }
  a92.regionFromJSON = me2;
  function Ie2(p2) {
    switch (p2) {
      case Se2.REGION_UNSPECIFIED:
        return "REGION_UNSPECIFIED";
      case Se2.REGION_US_EAST_1:
        return "REGION_US_EAST_1";
      case Se2.REGION_US_EAST_2:
        return "REGION_US_EAST_2";
      case Se2.REGION_US_WEST_1:
        return "REGION_US_WEST_1";
      case Se2.REGION_US_WEST_2:
        return "REGION_US_WEST_2";
      case Se2.REGION_US_CENTRAL_1:
        return "REGION_US_CENTRAL_1";
      case Se2.REGION_AP_SOUTHEAST_1:
        return "REGION_AP_SOUTHEAST_1";
      case Se2.REGION_AP_SOUTHEAST_2:
        return "REGION_AP_SOUTHEAST_2";
      case Se2.REGION_AP_SOUTH_1:
        return "REGION_AP_SOUTH_1";
      case Se2.REGION_CA_EAST_1:
        return "REGION_CA_EAST_1";
      case Se2.REGION_EU_CENTRAL_1:
        return "REGION_EU_CENTRAL_1";
      case Se2.REGION_EU_WEST_1:
        return "REGION_EU_WEST_1";
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum Region");
    }
  }
  a92.regionToJSON = Ie2;
  function at(p2) {
    switch (p2) {
      case Se2.REGION_UNSPECIFIED:
        return 0;
      case Se2.REGION_US_EAST_1:
        return 1;
      case Se2.REGION_US_EAST_2:
        return 2;
      case Se2.REGION_US_WEST_1:
        return 3;
      case Se2.REGION_US_WEST_2:
        return 4;
      case Se2.REGION_US_CENTRAL_1:
        return 5;
      case Se2.REGION_AP_SOUTHEAST_1:
        return 10;
      case Se2.REGION_AP_SOUTHEAST_2:
        return 11;
      case Se2.REGION_AP_SOUTH_1:
        return 15;
      case Se2.REGION_CA_EAST_1:
        return 20;
      case Se2.REGION_EU_CENTRAL_1:
        return 30;
      case Se2.REGION_EU_WEST_1:
        return 31;
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum Region");
    }
  }
  a92.regionToNumber = at;
  var Ye2;
  (function(p2) {
    p2.ROLE_UNSPECIFIED = "ROLE_UNSPECIFIED", p2.ROLE_HOST = "ROLE_HOST", p2.ROLE_COHOST = "ROLE_COHOST", p2.ROLE_CONTRIBUTOR = "ROLE_CONTRIBUTOR", p2.ROLE_GUEST = "ROLE_GUEST", p2.ROLE_VIEWER = "ROLE_VIEWER", p2.ROLE_RENDERER = "ROLE_RENDERER", p2.ROLE_PLATFORM = "ROLE_PLATFORM", p2.ROLE_IMPERSONATE = "ROLE_IMPERSONATE";
  })(Ye2 = a92.Role || (a92.Role = {}));
  function je2(p2) {
    switch (p2) {
      case 0:
      case "ROLE_UNSPECIFIED":
        return Ye2.ROLE_UNSPECIFIED;
      case 1:
      case "ROLE_HOST":
        return Ye2.ROLE_HOST;
      case 2:
      case "ROLE_COHOST":
        return Ye2.ROLE_COHOST;
      case 3:
      case "ROLE_CONTRIBUTOR":
        return Ye2.ROLE_CONTRIBUTOR;
      case 4:
      case "ROLE_GUEST":
        return Ye2.ROLE_GUEST;
      case 5:
      case "ROLE_VIEWER":
        return Ye2.ROLE_VIEWER;
      case 6:
      case "ROLE_RENDERER":
        return Ye2.ROLE_RENDERER;
      case 7:
      case "ROLE_PLATFORM":
        return Ye2.ROLE_PLATFORM;
      case 8:
      case "ROLE_IMPERSONATE":
        return Ye2.ROLE_IMPERSONATE;
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum Role");
    }
  }
  a92.roleFromJSON = je2;
  function tt(p2) {
    switch (p2) {
      case Ye2.ROLE_UNSPECIFIED:
        return "ROLE_UNSPECIFIED";
      case Ye2.ROLE_HOST:
        return "ROLE_HOST";
      case Ye2.ROLE_COHOST:
        return "ROLE_COHOST";
      case Ye2.ROLE_CONTRIBUTOR:
        return "ROLE_CONTRIBUTOR";
      case Ye2.ROLE_GUEST:
        return "ROLE_GUEST";
      case Ye2.ROLE_VIEWER:
        return "ROLE_VIEWER";
      case Ye2.ROLE_RENDERER:
        return "ROLE_RENDERER";
      case Ye2.ROLE_PLATFORM:
        return "ROLE_PLATFORM";
      case Ye2.ROLE_IMPERSONATE:
        return "ROLE_IMPERSONATE";
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum Role");
    }
  }
  a92.roleToJSON = tt;
  function Oe2(p2) {
    switch (p2) {
      case Ye2.ROLE_UNSPECIFIED:
        return 0;
      case Ye2.ROLE_HOST:
        return 1;
      case Ye2.ROLE_COHOST:
        return 2;
      case Ye2.ROLE_CONTRIBUTOR:
        return 3;
      case Ye2.ROLE_GUEST:
        return 4;
      case Ye2.ROLE_VIEWER:
        return 5;
      case Ye2.ROLE_RENDERER:
        return 6;
      case Ye2.ROLE_PLATFORM:
        return 7;
      case Ye2.ROLE_IMPERSONATE:
        return 8;
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum Role");
    }
  }
  a92.roleToNumber = Oe2;
  var P2;
  (function(p2) {
    p2.PROJECT_BROADCAST_ERROR_UNSPECIFIED = "PROJECT_BROADCAST_ERROR_UNSPECIFIED", p2.PROJECT_BROADCAST_ERROR_INTERNAL = "PROJECT_BROADCAST_ERROR_INTERNAL", p2.PROJECT_BROADCAST_ERROR_DURATION_EXCEEDED = "PROJECT_BROADCAST_ERROR_DURATION_EXCEEDED";
  })(P2 = a92.ProjectBroadcastError || (a92.ProjectBroadcastError = {}));
  function X2(p2) {
    switch (p2) {
      case 0:
      case "PROJECT_BROADCAST_ERROR_UNSPECIFIED":
        return P2.PROJECT_BROADCAST_ERROR_UNSPECIFIED;
      case 1:
      case "PROJECT_BROADCAST_ERROR_INTERNAL":
        return P2.PROJECT_BROADCAST_ERROR_INTERNAL;
      case 2:
      case "PROJECT_BROADCAST_ERROR_DURATION_EXCEEDED":
        return P2.PROJECT_BROADCAST_ERROR_DURATION_EXCEEDED;
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum ProjectBroadcastError");
    }
  }
  a92.projectBroadcastErrorFromJSON = X2;
  function ie2(p2) {
    switch (p2) {
      case P2.PROJECT_BROADCAST_ERROR_UNSPECIFIED:
        return "PROJECT_BROADCAST_ERROR_UNSPECIFIED";
      case P2.PROJECT_BROADCAST_ERROR_INTERNAL:
        return "PROJECT_BROADCAST_ERROR_INTERNAL";
      case P2.PROJECT_BROADCAST_ERROR_DURATION_EXCEEDED:
        return "PROJECT_BROADCAST_ERROR_DURATION_EXCEEDED";
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum ProjectBroadcastError");
    }
  }
  a92.projectBroadcastErrorToJSON = ie2;
  function Ee2(p2) {
    switch (p2) {
      case P2.PROJECT_BROADCAST_ERROR_UNSPECIFIED:
        return 0;
      case P2.PROJECT_BROADCAST_ERROR_INTERNAL:
        return 1;
      case P2.PROJECT_BROADCAST_ERROR_DURATION_EXCEEDED:
        return 2;
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum ProjectBroadcastError");
    }
  }
  a92.projectBroadcastErrorToNumber = Ee2;
  var ue2;
  (function(p2) {
    p2.CONNECT_STATE_UNSPECIFIED = "CONNECT_STATE_UNSPECIFIED", p2.CONNECT_STATE_CONNECTED = "CONNECT_STATE_CONNECTED", p2.CONNECT_STATE_DISCONNECTED = "CONNECT_STATE_DISCONNECTED";
  })(ue2 = a92.ConnectState || (a92.ConnectState = {}));
  function O2(p2) {
    switch (p2) {
      case 0:
      case "CONNECT_STATE_UNSPECIFIED":
        return ue2.CONNECT_STATE_UNSPECIFIED;
      case 1:
      case "CONNECT_STATE_CONNECTED":
        return ue2.CONNECT_STATE_CONNECTED;
      case 2:
      case "CONNECT_STATE_DISCONNECTED":
        return ue2.CONNECT_STATE_DISCONNECTED;
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum ConnectState");
    }
  }
  a92.connectStateFromJSON = O2;
  function j(p2) {
    switch (p2) {
      case ue2.CONNECT_STATE_UNSPECIFIED:
        return "CONNECT_STATE_UNSPECIFIED";
      case ue2.CONNECT_STATE_CONNECTED:
        return "CONNECT_STATE_CONNECTED";
      case ue2.CONNECT_STATE_DISCONNECTED:
        return "CONNECT_STATE_DISCONNECTED";
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum ConnectState");
    }
  }
  a92.connectStateToJSON = j;
  function se2(p2) {
    switch (p2) {
      case ue2.CONNECT_STATE_UNSPECIFIED:
        return 0;
      case ue2.CONNECT_STATE_CONNECTED:
        return 1;
      case ue2.CONNECT_STATE_DISCONNECTED:
        return 2;
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum ConnectState");
    }
  }
  a92.connectStateToNumber = se2;
  var _e;
  (function(p2) {
    p2.EVENT_SUB_TYPE_UNSPECIFIED = "EVENT_SUB_TYPE_UNSPECIFIED", p2.EVENT_SUB_TYPE_CREATE = "EVENT_SUB_TYPE_CREATE", p2.EVENT_SUB_TYPE_UPDATE = "EVENT_SUB_TYPE_UPDATE", p2.EVENT_SUB_TYPE_DELETE = "EVENT_SUB_TYPE_DELETE", p2.EVENT_SUB_TYPE_ADD = "EVENT_SUB_TYPE_ADD", p2.EVENT_SUB_TYPE_REMOVE = "EVENT_SUB_TYPE_REMOVE", p2.EVENT_SUB_TYPE_STATE = "EVENT_SUB_TYPE_STATE";
  })(_e = a92.EventSubType || (a92.EventSubType = {}));
  function ve2(p2) {
    switch (p2) {
      case 0:
      case "EVENT_SUB_TYPE_UNSPECIFIED":
        return _e.EVENT_SUB_TYPE_UNSPECIFIED;
      case 1:
      case "EVENT_SUB_TYPE_CREATE":
        return _e.EVENT_SUB_TYPE_CREATE;
      case 2:
      case "EVENT_SUB_TYPE_UPDATE":
        return _e.EVENT_SUB_TYPE_UPDATE;
      case 3:
      case "EVENT_SUB_TYPE_DELETE":
        return _e.EVENT_SUB_TYPE_DELETE;
      case 4:
      case "EVENT_SUB_TYPE_ADD":
        return _e.EVENT_SUB_TYPE_ADD;
      case 5:
      case "EVENT_SUB_TYPE_REMOVE":
        return _e.EVENT_SUB_TYPE_REMOVE;
      case 6:
      case "EVENT_SUB_TYPE_STATE":
        return _e.EVENT_SUB_TYPE_STATE;
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum EventSubType");
    }
  }
  a92.eventSubTypeFromJSON = ve2;
  function De2(p2) {
    switch (p2) {
      case _e.EVENT_SUB_TYPE_UNSPECIFIED:
        return "EVENT_SUB_TYPE_UNSPECIFIED";
      case _e.EVENT_SUB_TYPE_CREATE:
        return "EVENT_SUB_TYPE_CREATE";
      case _e.EVENT_SUB_TYPE_UPDATE:
        return "EVENT_SUB_TYPE_UPDATE";
      case _e.EVENT_SUB_TYPE_DELETE:
        return "EVENT_SUB_TYPE_DELETE";
      case _e.EVENT_SUB_TYPE_ADD:
        return "EVENT_SUB_TYPE_ADD";
      case _e.EVENT_SUB_TYPE_REMOVE:
        return "EVENT_SUB_TYPE_REMOVE";
      case _e.EVENT_SUB_TYPE_STATE:
        return "EVENT_SUB_TYPE_STATE";
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum EventSubType");
    }
  }
  a92.eventSubTypeToJSON = De2;
  function Ze2(p2) {
    switch (p2) {
      case _e.EVENT_SUB_TYPE_UNSPECIFIED:
        return 0;
      case _e.EVENT_SUB_TYPE_CREATE:
        return 1;
      case _e.EVENT_SUB_TYPE_UPDATE:
        return 2;
      case _e.EVENT_SUB_TYPE_DELETE:
        return 3;
      case _e.EVENT_SUB_TYPE_ADD:
        return 4;
      case _e.EVENT_SUB_TYPE_REMOVE:
        return 5;
      case _e.EVENT_SUB_TYPE_STATE:
        return 6;
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum EventSubType");
    }
  }
  a92.eventSubTypeToNumber = Ze2;
  var Qe2;
  (function(p2) {
    p2.EVENT_TYPE_UNSPECIFIED = "EVENT_TYPE_UNSPECIFIED", p2.EVENT_TYPE_COLLECTION = "EVENT_TYPE_COLLECTION", p2.EVENT_TYPE_PROJECT = "EVENT_TYPE_PROJECT", p2.EVENT_TYPE_SOURCE = "EVENT_TYPE_SOURCE", p2.EVENT_TYPE_DESTINATION = "EVENT_TYPE_DESTINATION";
  })(Qe2 = a92.EventType || (a92.EventType = {}));
  function ot(p2) {
    switch (p2) {
      case 0:
      case "EVENT_TYPE_UNSPECIFIED":
        return Qe2.EVENT_TYPE_UNSPECIFIED;
      case 1:
      case "EVENT_TYPE_COLLECTION":
        return Qe2.EVENT_TYPE_COLLECTION;
      case 2:
      case "EVENT_TYPE_PROJECT":
        return Qe2.EVENT_TYPE_PROJECT;
      case 4:
      case "EVENT_TYPE_SOURCE":
        return Qe2.EVENT_TYPE_SOURCE;
      case 5:
      case "EVENT_TYPE_DESTINATION":
        return Qe2.EVENT_TYPE_DESTINATION;
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum EventType");
    }
  }
  a92.eventTypeFromJSON = ot;
  function ft(p2) {
    switch (p2) {
      case Qe2.EVENT_TYPE_UNSPECIFIED:
        return "EVENT_TYPE_UNSPECIFIED";
      case Qe2.EVENT_TYPE_COLLECTION:
        return "EVENT_TYPE_COLLECTION";
      case Qe2.EVENT_TYPE_PROJECT:
        return "EVENT_TYPE_PROJECT";
      case Qe2.EVENT_TYPE_SOURCE:
        return "EVENT_TYPE_SOURCE";
      case Qe2.EVENT_TYPE_DESTINATION:
        return "EVENT_TYPE_DESTINATION";
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum EventType");
    }
  }
  a92.eventTypeToJSON = ft;
  function Ce2(p2) {
    switch (p2) {
      case Qe2.EVENT_TYPE_UNSPECIFIED:
        return 0;
      case Qe2.EVENT_TYPE_COLLECTION:
        return 1;
      case Qe2.EVENT_TYPE_PROJECT:
        return 2;
      case Qe2.EVENT_TYPE_SOURCE:
        return 4;
      case Qe2.EVENT_TYPE_DESTINATION:
        return 5;
      default:
        throw new Ke2.Error("Unrecognized enum value " + p2 + " for enum EventType");
    }
  }
  a92.eventTypeToNumber = Ce2;
  function I2() {
    return { height: void 0, width: void 0, framerate: void 0, colorSpace: void 0 };
  }
  a92.VideoRendering = { encode(p2, b = c.default.Writer.create()) {
    return p2.height !== void 0 && b.uint32(8).uint32(p2.height), p2.width !== void 0 && b.uint32(16).uint32(p2.width), p2.framerate !== void 0 && b.uint32(29).float(p2.framerate), p2.colorSpace !== void 0 && b.uint32(32).int32(V2(p2.colorSpace)), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = I2();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.height = T2.uint32();
          break;
        case 2:
          U2.width = T2.uint32();
          break;
        case 3:
          U2.framerate = T2.float();
          break;
        case 4:
          U2.colorSpace = $(T2.int32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { height: ce2(p2.height) ? Number(p2.height) : void 0, width: ce2(p2.width) ? Number(p2.width) : void 0, framerate: ce2(p2.framerate) ? Number(p2.framerate) : void 0, colorSpace: ce2(p2.colorSpace) ? $(p2.colorSpace) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.height !== void 0 && (b.height = Math.round(p2.height)), p2.width !== void 0 && (b.width = Math.round(p2.width)), p2.framerate !== void 0 && (b.framerate = p2.framerate), p2.colorSpace !== void 0 && (b.colorSpace = p2.colorSpace !== void 0 ? J2(p2.colorSpace) : void 0), b;
  }, fromPartial(p2) {
    var b, T2, K2, U2;
    const te2 = I2();
    return te2.height = (b = p2.height) !== null && b !== void 0 ? b : void 0, te2.width = (T2 = p2.width) !== null && T2 !== void 0 ? T2 : void 0, te2.framerate = (K2 = p2.framerate) !== null && K2 !== void 0 ? K2 : void 0, te2.colorSpace = (U2 = p2.colorSpace) !== null && U2 !== void 0 ? U2 : void 0, te2;
  } };
  function F2() {
    return { channelLayout: void 0 };
  }
  a92.AudioRendering = { encode(p2, b = c.default.Writer.create()) {
    return p2.channelLayout !== void 0 && b.uint32(8).int32(B2(p2.channelLayout)), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = F2();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.channelLayout = G2(T2.int32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { channelLayout: ce2(p2.channelLayout) ? G2(p2.channelLayout) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.channelLayout !== void 0 && (b.channelLayout = p2.channelLayout !== void 0 ? H2(p2.channelLayout) : void 0), b;
  }, fromPartial(p2) {
    var b;
    const T2 = F2();
    return T2.channelLayout = (b = p2.channelLayout) !== null && b !== void 0 ? b : void 0, T2;
  } };
  function z2() {
    return { video: void 0, audio: void 0, quality: void 0, targetLatency: void 0, complexity: void 0 };
  }
  a92.Rendering = { encode(p2, b = c.default.Writer.create()) {
    return p2.video !== void 0 && a92.VideoRendering.encode(p2.video, b.uint32(10).fork()).ldelim(), p2.audio !== void 0 && a92.AudioRendering.encode(p2.audio, b.uint32(18).fork()).ldelim(), p2.quality !== void 0 && b.uint32(24).int32(re2(p2.quality)), p2.targetLatency !== void 0 && b.uint32(32).uint32(p2.targetLatency), p2.complexity !== void 0 && b.uint32(40).int32(p2.complexity), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = z2();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.video = a92.VideoRendering.decode(T2, T2.uint32());
          break;
        case 2:
          U2.audio = a92.AudioRendering.decode(T2, T2.uint32());
          break;
        case 3:
          U2.quality = ne2(T2.int32());
          break;
        case 4:
          U2.targetLatency = T2.uint32();
          break;
        case 5:
          U2.complexity = T2.int32();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { video: ce2(p2.video) ? a92.VideoRendering.fromJSON(p2.video) : void 0, audio: ce2(p2.audio) ? a92.AudioRendering.fromJSON(p2.audio) : void 0, quality: ce2(p2.quality) ? ne2(p2.quality) : void 0, targetLatency: ce2(p2.targetLatency) ? Number(p2.targetLatency) : void 0, complexity: ce2(p2.complexity) ? Number(p2.complexity) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.video !== void 0 && (b.video = p2.video ? a92.VideoRendering.toJSON(p2.video) : void 0), p2.audio !== void 0 && (b.audio = p2.audio ? a92.AudioRendering.toJSON(p2.audio) : void 0), p2.quality !== void 0 && (b.quality = p2.quality !== void 0 ? Z2(p2.quality) : void 0), p2.targetLatency !== void 0 && (b.targetLatency = Math.round(p2.targetLatency)), p2.complexity !== void 0 && (b.complexity = Math.round(p2.complexity)), b;
  }, fromPartial(p2) {
    var b, T2, K2;
    const U2 = z2();
    return U2.video = p2.video !== void 0 && p2.video !== null ? a92.VideoRendering.fromPartial(p2.video) : void 0, U2.audio = p2.audio !== void 0 && p2.audio !== null ? a92.AudioRendering.fromPartial(p2.audio) : void 0, U2.quality = (b = p2.quality) !== null && b !== void 0 ? b : void 0, U2.targetLatency = (T2 = p2.targetLatency) !== null && T2 !== void 0 ? T2 : void 0, U2.complexity = (K2 = p2.complexity) !== null && K2 !== void 0 ? K2 : void 0, U2;
  } };
  function Te2() {
    return { mode: void 0, targetBitrate: void 0, maxKeyFrameInterval: void 0 };
  }
  a92.VideoCodecRateControl = { encode(p2, b = c.default.Writer.create()) {
    return p2.mode !== void 0 && b.uint32(8).int32($e2(p2.mode)), p2.targetBitrate !== void 0 && b.uint32(16).uint32(p2.targetBitrate), p2.maxKeyFrameInterval !== void 0 && b.uint32(24).uint32(p2.maxKeyFrameInterval), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Te2();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.mode = Ne2(T2.int32());
          break;
        case 2:
          U2.targetBitrate = T2.uint32();
          break;
        case 3:
          U2.maxKeyFrameInterval = T2.uint32();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { mode: ce2(p2.mode) ? Ne2(p2.mode) : void 0, targetBitrate: ce2(p2.targetBitrate) ? Number(p2.targetBitrate) : void 0, maxKeyFrameInterval: ce2(p2.maxKeyFrameInterval) ? Number(p2.maxKeyFrameInterval) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.mode !== void 0 && (b.mode = p2.mode !== void 0 ? Le2(p2.mode) : void 0), p2.targetBitrate !== void 0 && (b.targetBitrate = Math.round(p2.targetBitrate)), p2.maxKeyFrameInterval !== void 0 && (b.maxKeyFrameInterval = Math.round(p2.maxKeyFrameInterval)), b;
  }, fromPartial(p2) {
    var b, T2, K2;
    const U2 = Te2();
    return U2.mode = (b = p2.mode) !== null && b !== void 0 ? b : void 0, U2.targetBitrate = (T2 = p2.targetBitrate) !== null && T2 !== void 0 ? T2 : void 0, U2.maxKeyFrameInterval = (K2 = p2.maxKeyFrameInterval) !== null && K2 !== void 0 ? K2 : void 0, U2;
  } };
  function fe2() {
    return { codec: void 0, rateControl: void 0, profile: void 0 };
  }
  a92.VideoEncoding = { encode(p2, b = c.default.Writer.create()) {
    return p2.codec !== void 0 && b.uint32(8).int32(N2(p2.codec)), p2.rateControl !== void 0 && a92.VideoCodecRateControl.encode(p2.rateControl, b.uint32(18).fork()).ldelim(), p2.profile !== void 0 && b.uint32(32).int32(ae2(p2.profile)), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = fe2();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.codec = de2(T2.int32());
          break;
        case 2:
          U2.rateControl = a92.VideoCodecRateControl.decode(T2, T2.uint32());
          break;
        case 4:
          U2.profile = W2(T2.int32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { codec: ce2(p2.codec) ? de2(p2.codec) : void 0, rateControl: ce2(p2.rateControl) ? a92.VideoCodecRateControl.fromJSON(p2.rateControl) : void 0, profile: ce2(p2.profile) ? W2(p2.profile) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.codec !== void 0 && (b.codec = p2.codec !== void 0 ? A2(p2.codec) : void 0), p2.rateControl !== void 0 && (b.rateControl = p2.rateControl ? a92.VideoCodecRateControl.toJSON(p2.rateControl) : void 0), p2.profile !== void 0 && (b.profile = p2.profile !== void 0 ? ee2(p2.profile) : void 0), b;
  }, fromPartial(p2) {
    var b, T2;
    const K2 = fe2();
    return K2.codec = (b = p2.codec) !== null && b !== void 0 ? b : void 0, K2.rateControl = p2.rateControl !== void 0 && p2.rateControl !== null ? a92.VideoCodecRateControl.fromPartial(p2.rateControl) : void 0, K2.profile = (T2 = p2.profile) !== null && T2 !== void 0 ? T2 : void 0, K2;
  } };
  function ke2() {
    return { codec: void 0 };
  }
  a92.AudioEncoding = { encode(p2, b = c.default.Writer.create()) {
    return p2.codec !== void 0 && b.uint32(8).int32(we2(p2.codec)), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = ke2();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.codec = he2(T2.int32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { codec: ce2(p2.codec) ? he2(p2.codec) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.codec !== void 0 && (b.codec = p2.codec !== void 0 ? le2(p2.codec) : void 0), b;
  }, fromPartial(p2) {
    var b;
    const T2 = ke2();
    return T2.codec = (b = p2.codec) !== null && b !== void 0 ? b : void 0, T2;
  } };
  function it() {
    return { video: void 0, audio: void 0 };
  }
  a92.Encoding = { encode(p2, b = c.default.Writer.create()) {
    return p2.video !== void 0 && a92.VideoEncoding.encode(p2.video, b.uint32(10).fork()).ldelim(), p2.audio !== void 0 && a92.AudioEncoding.encode(p2.audio, b.uint32(18).fork()).ldelim(), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = it();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.video = a92.VideoEncoding.decode(T2, T2.uint32());
          break;
        case 2:
          U2.audio = a92.AudioEncoding.decode(T2, T2.uint32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { video: ce2(p2.video) ? a92.VideoEncoding.fromJSON(p2.video) : void 0, audio: ce2(p2.audio) ? a92.AudioEncoding.fromJSON(p2.audio) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.video !== void 0 && (b.video = p2.video ? a92.VideoEncoding.toJSON(p2.video) : void 0), p2.audio !== void 0 && (b.audio = p2.audio ? a92.AudioEncoding.toJSON(p2.audio) : void 0), b;
  }, fromPartial(p2) {
    const b = it();
    return b.video = p2.video !== void 0 && p2.video !== null ? a92.VideoEncoding.fromPartial(p2.video) : void 0, b.audio = p2.audio !== void 0 && p2.audio !== null ? a92.AudioEncoding.fromPartial(p2.audio) : void 0, b;
  } };
  function mt() {
    return { enabled: void 0, key: void 0, url: void 0, baseUrl: void 0, previewUrl: void 0, ingestId: void 0, secure: void 0, ingestType: void 0 };
  }
  a92.SourceRtmpPushAddress = { encode(p2, b = c.default.Writer.create()) {
    return p2.enabled !== void 0 && b.uint32(8).bool(p2.enabled), p2.key !== void 0 && b.uint32(18).string(p2.key), p2.url !== void 0 && b.uint32(26).string(p2.url), p2.baseUrl !== void 0 && b.uint32(34).string(p2.baseUrl), p2.previewUrl !== void 0 && b.uint32(42).string(p2.previewUrl), p2.ingestId !== void 0 && b.uint32(50).string(p2.ingestId), p2.secure !== void 0 && b.uint32(56).bool(p2.secure), p2.ingestType !== void 0 && b.uint32(66).string(p2.ingestType), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = mt();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.enabled = T2.bool();
          break;
        case 2:
          U2.key = T2.string();
          break;
        case 3:
          U2.url = T2.string();
          break;
        case 4:
          U2.baseUrl = T2.string();
          break;
        case 5:
          U2.previewUrl = T2.string();
          break;
        case 6:
          U2.ingestId = T2.string();
          break;
        case 7:
          U2.secure = T2.bool();
          break;
        case 8:
          U2.ingestType = T2.string();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { enabled: ce2(p2.enabled) ? !!p2.enabled : void 0, key: ce2(p2.key) ? String(p2.key) : void 0, url: ce2(p2.url) ? String(p2.url) : void 0, baseUrl: ce2(p2.baseUrl) ? String(p2.baseUrl) : void 0, previewUrl: ce2(p2.previewUrl) ? String(p2.previewUrl) : void 0, ingestId: ce2(p2.ingestId) ? String(p2.ingestId) : void 0, secure: ce2(p2.secure) ? !!p2.secure : void 0, ingestType: ce2(p2.ingestType) ? String(p2.ingestType) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.enabled !== void 0 && (b.enabled = p2.enabled), p2.key !== void 0 && (b.key = p2.key), p2.url !== void 0 && (b.url = p2.url), p2.baseUrl !== void 0 && (b.baseUrl = p2.baseUrl), p2.previewUrl !== void 0 && (b.previewUrl = p2.previewUrl), p2.ingestId !== void 0 && (b.ingestId = p2.ingestId), p2.secure !== void 0 && (b.secure = p2.secure), p2.ingestType !== void 0 && (b.ingestType = p2.ingestType), b;
  }, fromPartial(p2) {
    var b, T2, K2, U2, te2, We2, et, dt;
    const lt = mt();
    return lt.enabled = (b = p2.enabled) !== null && b !== void 0 ? b : void 0, lt.key = (T2 = p2.key) !== null && T2 !== void 0 ? T2 : void 0, lt.url = (K2 = p2.url) !== null && K2 !== void 0 ? K2 : void 0, lt.baseUrl = (U2 = p2.baseUrl) !== null && U2 !== void 0 ? U2 : void 0, lt.previewUrl = (te2 = p2.previewUrl) !== null && te2 !== void 0 ? te2 : void 0, lt.ingestId = (We2 = p2.ingestId) !== null && We2 !== void 0 ? We2 : void 0, lt.secure = (et = p2.secure) !== null && et !== void 0 ? et : void 0, lt.ingestType = (dt = p2.ingestType) !== null && dt !== void 0 ? dt : void 0, lt;
  } };
  function vt() {
    return { enabled: void 0, streamId: void 0, url: void 0, baseUrl: void 0, previewUrl: void 0, ingestId: void 0, ingestType: void 0 };
  }
  a92.SrtPushAddress = { encode(p2, b = c.default.Writer.create()) {
    return p2.enabled !== void 0 && b.uint32(8).bool(p2.enabled), p2.streamId !== void 0 && b.uint32(18).string(p2.streamId), p2.url !== void 0 && b.uint32(26).string(p2.url), p2.baseUrl !== void 0 && b.uint32(34).string(p2.baseUrl), p2.previewUrl !== void 0 && b.uint32(42).string(p2.previewUrl), p2.ingestId !== void 0 && b.uint32(50).string(p2.ingestId), p2.ingestType !== void 0 && b.uint32(58).string(p2.ingestType), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = vt();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.enabled = T2.bool();
          break;
        case 2:
          U2.streamId = T2.string();
          break;
        case 3:
          U2.url = T2.string();
          break;
        case 4:
          U2.baseUrl = T2.string();
          break;
        case 5:
          U2.previewUrl = T2.string();
          break;
        case 6:
          U2.ingestId = T2.string();
          break;
        case 7:
          U2.ingestType = T2.string();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { enabled: ce2(p2.enabled) ? !!p2.enabled : void 0, streamId: ce2(p2.streamId) ? String(p2.streamId) : void 0, url: ce2(p2.url) ? String(p2.url) : void 0, baseUrl: ce2(p2.baseUrl) ? String(p2.baseUrl) : void 0, previewUrl: ce2(p2.previewUrl) ? String(p2.previewUrl) : void 0, ingestId: ce2(p2.ingestId) ? String(p2.ingestId) : void 0, ingestType: ce2(p2.ingestType) ? String(p2.ingestType) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.enabled !== void 0 && (b.enabled = p2.enabled), p2.streamId !== void 0 && (b.streamId = p2.streamId), p2.url !== void 0 && (b.url = p2.url), p2.baseUrl !== void 0 && (b.baseUrl = p2.baseUrl), p2.previewUrl !== void 0 && (b.previewUrl = p2.previewUrl), p2.ingestId !== void 0 && (b.ingestId = p2.ingestId), p2.ingestType !== void 0 && (b.ingestType = p2.ingestType), b;
  }, fromPartial(p2) {
    var b, T2, K2, U2, te2, We2, et;
    const dt = vt();
    return dt.enabled = (b = p2.enabled) !== null && b !== void 0 ? b : void 0, dt.streamId = (T2 = p2.streamId) !== null && T2 !== void 0 ? T2 : void 0, dt.url = (K2 = p2.url) !== null && K2 !== void 0 ? K2 : void 0, dt.baseUrl = (U2 = p2.baseUrl) !== null && U2 !== void 0 ? U2 : void 0, dt.previewUrl = (te2 = p2.previewUrl) !== null && te2 !== void 0 ? te2 : void 0, dt.ingestId = (We2 = p2.ingestId) !== null && We2 !== void 0 ? We2 : void 0, dt.ingestType = (et = p2.ingestType) !== null && et !== void 0 ? et : void 0, dt;
  } };
  function st() {
    return { url: "" };
  }
  a92.RtmpPullAddress = { encode(p2, b = c.default.Writer.create()) {
    return p2.url !== "" && b.uint32(10).string(p2.url), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = st();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.url = T2.string();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { url: ce2(p2.url) ? String(p2.url) : "" };
  }, toJSON(p2) {
    const b = {};
    return p2.url !== void 0 && (b.url = p2.url), b;
  }, fromPartial(p2) {
    var b;
    const T2 = st();
    return T2.url = (b = p2.url) !== null && b !== void 0 ? b : "", T2;
  } };
  function ut() {
    return { url: "" };
  }
  a92.SrtPullAddress = { encode(p2, b = c.default.Writer.create()) {
    return p2.url !== "" && b.uint32(10).string(p2.url), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = ut();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.url = T2.string();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { url: ce2(p2.url) ? String(p2.url) : "" };
  }, toJSON(p2) {
    const b = {};
    return p2.url !== void 0 && (b.url = p2.url), b;
  }, fromPartial(p2) {
    var b;
    const T2 = ut();
    return T2.url = (b = p2.url) !== null && b !== void 0 ? b : "", T2;
  } };
  function yt() {
    return { rtmpPush: void 0, srtPush: void 0, rtmpPull: void 0, srtPull: void 0 };
  }
  a92.SourceAddress = { encode(p2, b = c.default.Writer.create()) {
    return p2.rtmpPush !== void 0 && a92.SourceRtmpPushAddress.encode(p2.rtmpPush, b.uint32(10).fork()).ldelim(), p2.srtPush !== void 0 && a92.SrtPushAddress.encode(p2.srtPush, b.uint32(18).fork()).ldelim(), p2.rtmpPull !== void 0 && a92.RtmpPullAddress.encode(p2.rtmpPull, b.uint32(26).fork()).ldelim(), p2.srtPull !== void 0 && a92.SrtPullAddress.encode(p2.srtPull, b.uint32(34).fork()).ldelim(), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = yt();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.rtmpPush = a92.SourceRtmpPushAddress.decode(T2, T2.uint32());
          break;
        case 2:
          U2.srtPush = a92.SrtPushAddress.decode(T2, T2.uint32());
          break;
        case 3:
          U2.rtmpPull = a92.RtmpPullAddress.decode(T2, T2.uint32());
          break;
        case 4:
          U2.srtPull = a92.SrtPullAddress.decode(T2, T2.uint32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { rtmpPush: ce2(p2.rtmpPush) ? a92.SourceRtmpPushAddress.fromJSON(p2.rtmpPush) : void 0, srtPush: ce2(p2.srtPush) ? a92.SrtPushAddress.fromJSON(p2.srtPush) : void 0, rtmpPull: ce2(p2.rtmpPull) ? a92.RtmpPullAddress.fromJSON(p2.rtmpPull) : void 0, srtPull: ce2(p2.srtPull) ? a92.SrtPullAddress.fromJSON(p2.srtPull) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.rtmpPush !== void 0 && (b.rtmpPush = p2.rtmpPush ? a92.SourceRtmpPushAddress.toJSON(p2.rtmpPush) : void 0), p2.srtPush !== void 0 && (b.srtPush = p2.srtPush ? a92.SrtPushAddress.toJSON(p2.srtPush) : void 0), p2.rtmpPull !== void 0 && (b.rtmpPull = p2.rtmpPull ? a92.RtmpPullAddress.toJSON(p2.rtmpPull) : void 0), p2.srtPull !== void 0 && (b.srtPull = p2.srtPull ? a92.SrtPullAddress.toJSON(p2.srtPull) : void 0), b;
  }, fromPartial(p2) {
    const b = yt();
    return b.rtmpPush = p2.rtmpPush !== void 0 && p2.rtmpPush !== null ? a92.SourceRtmpPushAddress.fromPartial(p2.rtmpPush) : void 0, b.srtPush = p2.srtPush !== void 0 && p2.srtPush !== null ? a92.SrtPushAddress.fromPartial(p2.srtPush) : void 0, b.rtmpPull = p2.rtmpPull !== void 0 && p2.rtmpPull !== null ? a92.RtmpPullAddress.fromPartial(p2.rtmpPull) : void 0, b.srtPull = p2.srtPull !== void 0 && p2.srtPull !== null ? a92.SrtPullAddress.fromPartial(p2.srtPull) : void 0, b;
  } };
  function gt() {
    return { key: void 0, url: "" };
  }
  a92.DestinationRtmpPushAddress = { encode(p2, b = c.default.Writer.create()) {
    return p2.key !== void 0 && b.uint32(10).string(p2.key), p2.url !== "" && b.uint32(18).string(p2.url), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = gt();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.key = T2.string();
          break;
        case 2:
          U2.url = T2.string();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { key: ce2(p2.key) ? String(p2.key) : void 0, url: ce2(p2.url) ? String(p2.url) : "" };
  }, toJSON(p2) {
    const b = {};
    return p2.key !== void 0 && (b.key = p2.key), p2.url !== void 0 && (b.url = p2.url), b;
  }, fromPartial(p2) {
    var b, T2;
    const K2 = gt();
    return K2.key = (b = p2.key) !== null && b !== void 0 ? b : void 0, K2.url = (T2 = p2.url) !== null && T2 !== void 0 ? T2 : "", K2;
  } };
  function bt() {
    return { url: "" };
  }
  a92.DestinationSrtPushAddress = { encode(p2, b = c.default.Writer.create()) {
    return p2.url !== "" && b.uint32(18).string(p2.url), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = bt();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 2:
          U2.url = T2.string();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { url: ce2(p2.url) ? String(p2.url) : "" };
  }, toJSON(p2) {
    const b = {};
    return p2.url !== void 0 && (b.url = p2.url), b;
  }, fromPartial(p2) {
    var b;
    const T2 = bt();
    return T2.url = (b = p2.url) !== null && b !== void 0 ? b : "", T2;
  } };
  function St() {
    return { appId: "", channelId: "", userId: "" };
  }
  a92.DestinationAgoraPushAddress = { encode(p2, b = c.default.Writer.create()) {
    return p2.appId !== "" && b.uint32(10).string(p2.appId), p2.channelId !== "" && b.uint32(18).string(p2.channelId), p2.userId !== "" && b.uint32(26).string(p2.userId), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = St();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.appId = T2.string();
          break;
        case 2:
          U2.channelId = T2.string();
          break;
        case 3:
          U2.userId = T2.string();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { appId: ce2(p2.appId) ? String(p2.appId) : "", channelId: ce2(p2.channelId) ? String(p2.channelId) : "", userId: ce2(p2.userId) ? String(p2.userId) : "" };
  }, toJSON(p2) {
    const b = {};
    return p2.appId !== void 0 && (b.appId = p2.appId), p2.channelId !== void 0 && (b.channelId = p2.channelId), p2.userId !== void 0 && (b.userId = p2.userId), b;
  }, fromPartial(p2) {
    var b, T2, K2;
    const U2 = St();
    return U2.appId = (b = p2.appId) !== null && b !== void 0 ? b : "", U2.channelId = (T2 = p2.channelId) !== null && T2 !== void 0 ? T2 : "", U2.userId = (K2 = p2.userId) !== null && K2 !== void 0 ? K2 : "", U2;
  } };
  function Et() {
    return { playlistCount: void 0, fileCount: void 0 };
  }
  a92.HlsLifecycleLive = { encode(p2, b = c.default.Writer.create()) {
    return p2.playlistCount !== void 0 && b.uint32(8).int32(p2.playlistCount), p2.fileCount !== void 0 && b.uint32(16).int32(p2.fileCount), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Et();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.playlistCount = T2.int32();
          break;
        case 2:
          U2.fileCount = T2.int32();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { playlistCount: ce2(p2.playlistCount) ? Number(p2.playlistCount) : void 0, fileCount: ce2(p2.fileCount) ? Number(p2.fileCount) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.playlistCount !== void 0 && (b.playlistCount = Math.round(p2.playlistCount)), p2.fileCount !== void 0 && (b.fileCount = Math.round(p2.fileCount)), b;
  }, fromPartial(p2) {
    var b, T2;
    const K2 = Et();
    return K2.playlistCount = (b = p2.playlistCount) !== null && b !== void 0 ? b : void 0, K2.fileCount = (T2 = p2.fileCount) !== null && T2 !== void 0 ? T2 : void 0, K2;
  } };
  function ct() {
    return { maxDuration: void 0 };
  }
  a92.HlsLifecycleVod = { encode(p2, b = c.default.Writer.create()) {
    return p2.maxDuration !== void 0 && b.uint32(8).int32(p2.maxDuration), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = ct();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.maxDuration = T2.int32();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { maxDuration: ce2(p2.maxDuration) ? Number(p2.maxDuration) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.maxDuration !== void 0 && (b.maxDuration = Math.round(p2.maxDuration)), b;
  }, fromPartial(p2) {
    var b;
    const T2 = ct();
    return T2.maxDuration = (b = p2.maxDuration) !== null && b !== void 0 ? b : void 0, T2;
  } };
  function Xe2() {
    return { vod: void 0, live: void 0 };
  }
  a92.HlsLifecycle = { encode(p2, b = c.default.Writer.create()) {
    return p2.vod !== void 0 && a92.HlsLifecycleVod.encode(p2.vod, b.uint32(10).fork()).ldelim(), p2.live !== void 0 && a92.HlsLifecycleLive.encode(p2.live, b.uint32(18).fork()).ldelim(), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Xe2();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.vod = a92.HlsLifecycleVod.decode(T2, T2.uint32());
          break;
        case 2:
          U2.live = a92.HlsLifecycleLive.decode(T2, T2.uint32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { vod: ce2(p2.vod) ? a92.HlsLifecycleVod.fromJSON(p2.vod) : void 0, live: ce2(p2.live) ? a92.HlsLifecycleLive.fromJSON(p2.live) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.vod !== void 0 && (b.vod = p2.vod ? a92.HlsLifecycleVod.toJSON(p2.vod) : void 0), p2.live !== void 0 && (b.live = p2.live ? a92.HlsLifecycleLive.toJSON(p2.live) : void 0), b;
  }, fromPartial(p2) {
    const b = Xe2();
    return b.vod = p2.vod !== void 0 && p2.vod !== null ? a92.HlsLifecycleVod.fromPartial(p2.vod) : void 0, b.live = p2.live !== void 0 && p2.live !== null ? a92.HlsLifecycleLive.fromPartial(p2.live) : void 0, b;
  } };
  function Ct() {
    return { lifecycle: void 0, segmentDuration: void 0 };
  }
  a92.HlsPackaging = { encode(p2, b = c.default.Writer.create()) {
    return p2.lifecycle !== void 0 && a92.HlsLifecycle.encode(p2.lifecycle, b.uint32(10).fork()).ldelim(), p2.segmentDuration !== void 0 && b.uint32(16).int32(p2.segmentDuration), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Ct();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.lifecycle = a92.HlsLifecycle.decode(T2, T2.uint32());
          break;
        case 2:
          U2.segmentDuration = T2.int32();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { lifecycle: ce2(p2.lifecycle) ? a92.HlsLifecycle.fromJSON(p2.lifecycle) : void 0, segmentDuration: ce2(p2.segmentDuration) ? Number(p2.segmentDuration) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.lifecycle !== void 0 && (b.lifecycle = p2.lifecycle ? a92.HlsLifecycle.toJSON(p2.lifecycle) : void 0), p2.segmentDuration !== void 0 && (b.segmentDuration = Math.round(p2.segmentDuration)), b;
  }, fromPartial(p2) {
    var b;
    const T2 = Ct();
    return T2.lifecycle = p2.lifecycle !== void 0 && p2.lifecycle !== null ? a92.HlsLifecycle.fromPartial(p2.lifecycle) : void 0, T2.segmentDuration = (b = p2.segmentDuration) !== null && b !== void 0 ? b : void 0, T2;
  } };
  function Ot() {
    return { hls: void 0 };
  }
  a92.ObjectStoragePackaging = { encode(p2, b = c.default.Writer.create()) {
    return p2.hls !== void 0 && a92.HlsPackaging.encode(p2.hls, b.uint32(10).fork()).ldelim(), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Ot();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.hls = a92.HlsPackaging.decode(T2, T2.uint32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { hls: ce2(p2.hls) ? a92.HlsPackaging.fromJSON(p2.hls) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.hls !== void 0 && (b.hls = p2.hls ? a92.HlsPackaging.toJSON(p2.hls) : void 0), b;
  }, fromPartial(p2) {
    const b = Ot();
    return b.hls = p2.hls !== void 0 && p2.hls !== null ? a92.HlsPackaging.fromPartial(p2.hls) : void 0, b;
  } };
  function Nt() {
    return { region: "", bucket: "", prefix: void 0, accessKey: "", secretKey: "", token: void 0, tokenDuration: void 0, acl: void 0, endpoint: void 0, packaging: void 0 };
  }
  a92.S3StorageAddress = { encode(p2, b = c.default.Writer.create()) {
    return p2.region !== "" && b.uint32(10).string(p2.region), p2.bucket !== "" && b.uint32(18).string(p2.bucket), p2.prefix !== void 0 && b.uint32(26).string(p2.prefix), p2.accessKey !== "" && b.uint32(34).string(p2.accessKey), p2.secretKey !== "" && b.uint32(42).string(p2.secretKey), p2.token !== void 0 && b.uint32(50).string(p2.token), p2.tokenDuration !== void 0 && b.uint32(56).int32(p2.tokenDuration), p2.acl !== void 0 && b.uint32(64).int32(xe2(p2.acl)), p2.endpoint !== void 0 && b.uint32(74).string(p2.endpoint), p2.packaging !== void 0 && a92.ObjectStoragePackaging.encode(p2.packaging, b.uint32(82).fork()).ldelim(), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Nt();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.region = T2.string();
          break;
        case 2:
          U2.bucket = T2.string();
          break;
        case 3:
          U2.prefix = T2.string();
          break;
        case 4:
          U2.accessKey = T2.string();
          break;
        case 5:
          U2.secretKey = T2.string();
          break;
        case 6:
          U2.token = T2.string();
          break;
        case 7:
          U2.tokenDuration = T2.int32();
          break;
        case 8:
          U2.acl = Ae2(T2.int32());
          break;
        case 9:
          U2.endpoint = T2.string();
          break;
        case 10:
          U2.packaging = a92.ObjectStoragePackaging.decode(T2, T2.uint32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { region: ce2(p2.region) ? String(p2.region) : "", bucket: ce2(p2.bucket) ? String(p2.bucket) : "", prefix: ce2(p2.prefix) ? String(p2.prefix) : void 0, accessKey: ce2(p2.accessKey) ? String(p2.accessKey) : "", secretKey: ce2(p2.secretKey) ? String(p2.secretKey) : "", token: ce2(p2.token) ? String(p2.token) : void 0, tokenDuration: ce2(p2.tokenDuration) ? Number(p2.tokenDuration) : void 0, acl: ce2(p2.acl) ? Ae2(p2.acl) : void 0, endpoint: ce2(p2.endpoint) ? String(p2.endpoint) : void 0, packaging: ce2(p2.packaging) ? a92.ObjectStoragePackaging.fromJSON(p2.packaging) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.region !== void 0 && (b.region = p2.region), p2.bucket !== void 0 && (b.bucket = p2.bucket), p2.prefix !== void 0 && (b.prefix = p2.prefix), p2.accessKey !== void 0 && (b.accessKey = p2.accessKey), p2.secretKey !== void 0 && (b.secretKey = p2.secretKey), p2.token !== void 0 && (b.token = p2.token), p2.tokenDuration !== void 0 && (b.tokenDuration = Math.round(p2.tokenDuration)), p2.acl !== void 0 && (b.acl = p2.acl !== void 0 ? qe2(p2.acl) : void 0), p2.endpoint !== void 0 && (b.endpoint = p2.endpoint), p2.packaging !== void 0 && (b.packaging = p2.packaging ? a92.ObjectStoragePackaging.toJSON(p2.packaging) : void 0), b;
  }, fromPartial(p2) {
    var b, T2, K2, U2, te2, We2, et, dt, lt;
    const pt = Nt();
    return pt.region = (b = p2.region) !== null && b !== void 0 ? b : "", pt.bucket = (T2 = p2.bucket) !== null && T2 !== void 0 ? T2 : "", pt.prefix = (K2 = p2.prefix) !== null && K2 !== void 0 ? K2 : void 0, pt.accessKey = (U2 = p2.accessKey) !== null && U2 !== void 0 ? U2 : "", pt.secretKey = (te2 = p2.secretKey) !== null && te2 !== void 0 ? te2 : "", pt.token = (We2 = p2.token) !== null && We2 !== void 0 ? We2 : void 0, pt.tokenDuration = (et = p2.tokenDuration) !== null && et !== void 0 ? et : void 0, pt.acl = (dt = p2.acl) !== null && dt !== void 0 ? dt : void 0, pt.endpoint = (lt = p2.endpoint) !== null && lt !== void 0 ? lt : void 0, pt.packaging = p2.packaging !== void 0 && p2.packaging !== null ? a92.ObjectStoragePackaging.fromPartial(p2.packaging) : void 0, pt;
  } };
  function Pt() {
    return { rtmpPush: void 0, agora: void 0, s3Storage: void 0, srtPush: void 0 };
  }
  a92.DestinationAddress = { encode(p2, b = c.default.Writer.create()) {
    return p2.rtmpPush !== void 0 && a92.DestinationRtmpPushAddress.encode(p2.rtmpPush, b.uint32(10).fork()).ldelim(), p2.agora !== void 0 && a92.DestinationAgoraPushAddress.encode(p2.agora, b.uint32(18).fork()).ldelim(), p2.s3Storage !== void 0 && a92.S3StorageAddress.encode(p2.s3Storage, b.uint32(26).fork()).ldelim(), p2.srtPush !== void 0 && a92.DestinationSrtPushAddress.encode(p2.srtPush, b.uint32(34).fork()).ldelim(), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Pt();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.rtmpPush = a92.DestinationRtmpPushAddress.decode(T2, T2.uint32());
          break;
        case 2:
          U2.agora = a92.DestinationAgoraPushAddress.decode(T2, T2.uint32());
          break;
        case 3:
          U2.s3Storage = a92.S3StorageAddress.decode(T2, T2.uint32());
          break;
        case 4:
          U2.srtPush = a92.DestinationSrtPushAddress.decode(T2, T2.uint32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { rtmpPush: ce2(p2.rtmpPush) ? a92.DestinationRtmpPushAddress.fromJSON(p2.rtmpPush) : void 0, agora: ce2(p2.agora) ? a92.DestinationAgoraPushAddress.fromJSON(p2.agora) : void 0, s3Storage: ce2(p2.s3Storage) ? a92.S3StorageAddress.fromJSON(p2.s3Storage) : void 0, srtPush: ce2(p2.srtPush) ? a92.DestinationSrtPushAddress.fromJSON(p2.srtPush) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.rtmpPush !== void 0 && (b.rtmpPush = p2.rtmpPush ? a92.DestinationRtmpPushAddress.toJSON(p2.rtmpPush) : void 0), p2.agora !== void 0 && (b.agora = p2.agora ? a92.DestinationAgoraPushAddress.toJSON(p2.agora) : void 0), p2.s3Storage !== void 0 && (b.s3Storage = p2.s3Storage ? a92.S3StorageAddress.toJSON(p2.s3Storage) : void 0), p2.srtPush !== void 0 && (b.srtPush = p2.srtPush ? a92.DestinationSrtPushAddress.toJSON(p2.srtPush) : void 0), b;
  }, fromPartial(p2) {
    const b = Pt();
    return b.rtmpPush = p2.rtmpPush !== void 0 && p2.rtmpPush !== null ? a92.DestinationRtmpPushAddress.fromPartial(p2.rtmpPush) : void 0, b.agora = p2.agora !== void 0 && p2.agora !== null ? a92.DestinationAgoraPushAddress.fromPartial(p2.agora) : void 0, b.s3Storage = p2.s3Storage !== void 0 && p2.s3Storage !== null ? a92.S3StorageAddress.fromPartial(p2.s3Storage) : void 0, b.srtPush = p2.srtPush !== void 0 && p2.srtPush !== null ? a92.DestinationSrtPushAddress.fromPartial(p2.srtPush) : void 0, b;
  } };
  function wt() {
    return { sourceId: "", start: void 0, stop: void 0 };
  }
  a92.SourceTrigger = { encode(p2, b = c.default.Writer.create()) {
    return p2.sourceId !== "" && b.uint32(10).string(p2.sourceId), p2.start !== void 0 && b.uint32(16).int32(Q2(p2.start)), p2.stop !== void 0 && b.uint32(24).int32(Q2(p2.stop)), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = wt();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.sourceId = T2.string();
          break;
        case 2:
          U2.start = C2(T2.int32());
          break;
        case 3:
          U2.stop = C2(T2.int32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { sourceId: ce2(p2.sourceId) ? String(p2.sourceId) : "", start: ce2(p2.start) ? C2(p2.start) : void 0, stop: ce2(p2.stop) ? C2(p2.stop) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.sourceId !== void 0 && (b.sourceId = p2.sourceId), p2.start !== void 0 && (b.start = p2.start !== void 0 ? x2(p2.start) : void 0), p2.stop !== void 0 && (b.stop = p2.stop !== void 0 ? x2(p2.stop) : void 0), b;
  }, fromPartial(p2) {
    var b, T2, K2;
    const U2 = wt();
    return U2.sourceId = (b = p2.sourceId) !== null && b !== void 0 ? b : "", U2.start = (T2 = p2.start) !== null && T2 !== void 0 ? T2 : void 0, U2.stop = (K2 = p2.stop) !== null && K2 !== void 0 ? K2 : void 0, U2;
  } };
  function At() {
    return { stop: void 0 };
  }
  a92.WebRtcTrigger = { encode(p2, b = c.default.Writer.create()) {
    return p2.stop !== void 0 && b.uint32(24).int32(Q2(p2.stop)), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = At();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 3:
          U2.stop = C2(T2.int32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { stop: ce2(p2.stop) ? C2(p2.stop) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.stop !== void 0 && (b.stop = p2.stop !== void 0 ? x2(p2.stop) : void 0), b;
  }, fromPartial(p2) {
    var b;
    const T2 = At();
    return T2.stop = (b = p2.stop) !== null && b !== void 0 ? b : void 0, T2;
  } };
  function Dt() {
    return { source: void 0 };
  }
  a92.ProjectTrigger = { encode(p2, b = c.default.Writer.create()) {
    return p2.source !== void 0 && a92.SourceTrigger.encode(p2.source, b.uint32(10).fork()).ldelim(), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Dt();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.source = a92.SourceTrigger.decode(T2, T2.uint32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { source: ce2(p2.source) ? a92.SourceTrigger.fromJSON(p2.source) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.source !== void 0 && (b.source = p2.source ? a92.SourceTrigger.toJSON(p2.source) : void 0), b;
  }, fromPartial(p2) {
    const b = Dt();
    return b.source = p2.source !== void 0 && p2.source !== null ? a92.SourceTrigger.fromPartial(p2.source) : void 0, b;
  } };
  function pe2() {
    return { enabled: void 0, url: void 0 };
  }
  a92.PreviewHlsPullAddress = { encode(p2, b = c.default.Writer.create()) {
    return p2.enabled !== void 0 && b.uint32(8).bool(p2.enabled), p2.url !== void 0 && b.uint32(18).string(p2.url), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = pe2();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.enabled = T2.bool();
          break;
        case 2:
          U2.url = T2.string();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { enabled: ce2(p2.enabled) ? !!p2.enabled : void 0, url: ce2(p2.url) ? String(p2.url) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.enabled !== void 0 && (b.enabled = p2.enabled), p2.url !== void 0 && (b.url = p2.url), b;
  }, fromPartial(p2) {
    var b, T2;
    const K2 = pe2();
    return K2.enabled = (b = p2.enabled) !== null && b !== void 0 ? b : void 0, K2.url = (T2 = p2.url) !== null && T2 !== void 0 ? T2 : void 0, K2;
  } };
  function ge2() {
    return { enabled: void 0, displayName: void 0, participantId: void 0 };
  }
  a92.PreviewWebRtcAddress = { encode(p2, b = c.default.Writer.create()) {
    return p2.enabled !== void 0 && b.uint32(8).bool(p2.enabled), p2.displayName !== void 0 && b.uint32(18).string(p2.displayName), p2.participantId !== void 0 && b.uint32(26).string(p2.participantId), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = ge2();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.enabled = T2.bool();
          break;
        case 2:
          U2.displayName = T2.string();
          break;
        case 3:
          U2.participantId = T2.string();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { enabled: ce2(p2.enabled) ? !!p2.enabled : void 0, displayName: ce2(p2.displayName) ? String(p2.displayName) : void 0, participantId: ce2(p2.participantId) ? String(p2.participantId) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.enabled !== void 0 && (b.enabled = p2.enabled), p2.displayName !== void 0 && (b.displayName = p2.displayName), p2.participantId !== void 0 && (b.participantId = p2.participantId), b;
  }, fromPartial(p2) {
    var b, T2, K2;
    const U2 = ge2();
    return U2.enabled = (b = p2.enabled) !== null && b !== void 0 ? b : void 0, U2.displayName = (T2 = p2.displayName) !== null && T2 !== void 0 ? T2 : void 0, U2.participantId = (K2 = p2.participantId) !== null && K2 !== void 0 ? K2 : void 0, U2;
  } };
  function Re2() {
    return { webrtc: void 0 };
  }
  a92.PreviewAddress = { encode(p2, b = c.default.Writer.create()) {
    return p2.webrtc !== void 0 && a92.PreviewWebRtcAddress.encode(p2.webrtc, b.uint32(18).fork()).ldelim(), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Re2();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 2:
          U2.webrtc = a92.PreviewWebRtcAddress.decode(T2, T2.uint32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { webrtc: ce2(p2.webrtc) ? a92.PreviewWebRtcAddress.fromJSON(p2.webrtc) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.webrtc !== void 0 && (b.webrtc = p2.webrtc ? a92.PreviewWebRtcAddress.toJSON(p2.webrtc) : void 0), b;
  }, fromPartial(p2) {
    const b = Re2();
    return b.webrtc = p2.webrtc !== void 0 && p2.webrtc !== null ? a92.PreviewWebRtcAddress.fromPartial(p2.webrtc) : void 0, b;
  } };
  function Je2() {
    return { rendererUrl: void 0, version: void 0 };
  }
  a92.StudioSdkComposition = { encode(p2, b = c.default.Writer.create()) {
    return p2.rendererUrl !== void 0 && b.uint32(10).string(p2.rendererUrl), p2.version !== void 0 && b.uint32(18).string(p2.version), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Je2();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.rendererUrl = T2.string();
          break;
        case 2:
          U2.version = T2.string();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { rendererUrl: ce2(p2.rendererUrl) ? String(p2.rendererUrl) : void 0, version: ce2(p2.version) ? String(p2.version) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.rendererUrl !== void 0 && (b.rendererUrl = p2.rendererUrl), p2.version !== void 0 && (b.version = p2.version), b;
  }, fromPartial(p2) {
    var b, T2;
    const K2 = Je2();
    return K2.rendererUrl = (b = p2.rendererUrl) !== null && b !== void 0 ? b : void 0, K2.version = (T2 = p2.version) !== null && T2 !== void 0 ? T2 : void 0, K2;
  } };
  function Fe2() {
    return { rendererUrl: void 0, selectedLayoutId: void 0, debug: void 0 };
  }
  a92.SceneComposition = { encode(p2, b = c.default.Writer.create()) {
    return p2.rendererUrl !== void 0 && b.uint32(10).string(p2.rendererUrl), p2.selectedLayoutId !== void 0 && b.uint32(18).string(p2.selectedLayoutId), p2.debug !== void 0 && b.uint32(24).bool(p2.debug), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Fe2();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.rendererUrl = T2.string();
          break;
        case 2:
          U2.selectedLayoutId = T2.string();
          break;
        case 3:
          U2.debug = T2.bool();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { rendererUrl: ce2(p2.rendererUrl) ? String(p2.rendererUrl) : void 0, selectedLayoutId: ce2(p2.selectedLayoutId) ? String(p2.selectedLayoutId) : void 0, debug: ce2(p2.debug) ? !!p2.debug : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.rendererUrl !== void 0 && (b.rendererUrl = p2.rendererUrl), p2.selectedLayoutId !== void 0 && (b.selectedLayoutId = p2.selectedLayoutId), p2.debug !== void 0 && (b.debug = p2.debug), b;
  }, fromPartial(p2) {
    var b, T2, K2;
    const U2 = Fe2();
    return U2.rendererUrl = (b = p2.rendererUrl) !== null && b !== void 0 ? b : void 0, U2.selectedLayoutId = (T2 = p2.selectedLayoutId) !== null && T2 !== void 0 ? T2 : void 0, U2.debug = (K2 = p2.debug) !== null && K2 !== void 0 ? K2 : void 0, U2;
  } };
  function ze2() {
    return { url: "" };
  }
  a92.ExternalComposition = { encode(p2, b = c.default.Writer.create()) {
    return p2.url !== "" && b.uint32(10).string(p2.url), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = ze2();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.url = T2.string();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { url: ce2(p2.url) ? String(p2.url) : "" };
  }, toJSON(p2) {
    const b = {};
    return p2.url !== void 0 && (b.url = p2.url), b;
  }, fromPartial(p2) {
    var b;
    const T2 = ze2();
    return T2.url = (b = p2.url) !== null && b !== void 0 ? b : "", T2;
  } };
  function Me2() {
    return { external: void 0, studioSdk: void 0, scene: void 0 };
  }
  a92.Composition = { encode(p2, b = c.default.Writer.create()) {
    return p2.external !== void 0 && a92.ExternalComposition.encode(p2.external, b.uint32(10).fork()).ldelim(), p2.studioSdk !== void 0 && a92.StudioSdkComposition.encode(p2.studioSdk, b.uint32(18).fork()).ldelim(), p2.scene !== void 0 && a92.SceneComposition.encode(p2.scene, b.uint32(34).fork()).ldelim(), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Me2();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.external = a92.ExternalComposition.decode(T2, T2.uint32());
          break;
        case 2:
          U2.studioSdk = a92.StudioSdkComposition.decode(T2, T2.uint32());
          break;
        case 4:
          U2.scene = a92.SceneComposition.decode(T2, T2.uint32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { external: ce2(p2.external) ? a92.ExternalComposition.fromJSON(p2.external) : void 0, studioSdk: ce2(p2.studioSdk) ? a92.StudioSdkComposition.fromJSON(p2.studioSdk) : void 0, scene: ce2(p2.scene) ? a92.SceneComposition.fromJSON(p2.scene) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.external !== void 0 && (b.external = p2.external ? a92.ExternalComposition.toJSON(p2.external) : void 0), p2.studioSdk !== void 0 && (b.studioSdk = p2.studioSdk ? a92.StudioSdkComposition.toJSON(p2.studioSdk) : void 0), p2.scene !== void 0 && (b.scene = p2.scene ? a92.SceneComposition.toJSON(p2.scene) : void 0), b;
  }, fromPartial(p2) {
    const b = Me2();
    return b.external = p2.external !== void 0 && p2.external !== null ? a92.ExternalComposition.fromPartial(p2.external) : void 0, b.studioSdk = p2.studioSdk !== void 0 && p2.studioSdk !== null ? a92.StudioSdkComposition.fromPartial(p2.studioSdk) : void 0, b.scene = p2.scene !== void 0 && p2.scene !== null ? a92.SceneComposition.fromPartial(p2.scene) : void 0, b;
  } };
  function nt() {
    return { enabled: void 0 };
  }
  a92.HostedWebRtc = { encode(p2, b = c.default.Writer.create()) {
    return p2.enabled !== void 0 && b.uint32(8).bool(p2.enabled), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = nt();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.enabled = T2.bool();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { enabled: ce2(p2.enabled) ? !!p2.enabled : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.enabled !== void 0 && (b.enabled = p2.enabled), b;
  }, fromPartial(p2) {
    var b;
    const T2 = nt();
    return T2.enabled = (b = p2.enabled) !== null && b !== void 0 ? b : void 0, T2;
  } };
  function rt() {
    return { hosted: void 0 };
  }
  a92.WebRtc = { encode(p2, b = c.default.Writer.create()) {
    return p2.hosted !== void 0 && a92.HostedWebRtc.encode(p2.hosted, b.uint32(10).fork()).ldelim(), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = rt();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.hosted = a92.HostedWebRtc.decode(T2, T2.uint32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { hosted: ce2(p2.hosted) ? a92.HostedWebRtc.fromJSON(p2.hosted) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.hosted !== void 0 && (b.hosted = p2.hosted ? a92.HostedWebRtc.toJSON(p2.hosted) : void 0), b;
  }, fromPartial(p2) {
    const b = rt();
    return b.hosted = p2.hosted !== void 0 && p2.hosted !== null ? a92.HostedWebRtc.fromPartial(p2.hosted) : void 0, b;
  } };
  function Tt() {
    return { accessToken: "", participantId: void 0 };
  }
  a92.WebRtcAccess = { encode(p2, b = c.default.Writer.create()) {
    return p2.accessToken !== "" && b.uint32(10).string(p2.accessToken), p2.participantId !== void 0 && b.uint32(26).string(p2.participantId), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Tt();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.accessToken = T2.string();
          break;
        case 3:
          U2.participantId = T2.string();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { accessToken: ce2(p2.accessToken) ? String(p2.accessToken) : "", participantId: ce2(p2.participantId) ? String(p2.participantId) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.accessToken !== void 0 && (b.accessToken = p2.accessToken), p2.participantId !== void 0 && (b.participantId = p2.participantId), b;
  }, fromPartial(p2) {
    var b, T2;
    const K2 = Tt();
    return K2.accessToken = (b = p2.accessToken) !== null && b !== void 0 ? b : "", K2.participantId = (T2 = p2.participantId) !== null && T2 !== void 0 ? T2 : void 0, K2;
  } };
  function kt() {
    return { latitude: 0, longitude: 0 };
  }
  a92.LatLong = { encode(p2, b = c.default.Writer.create()) {
    return p2.latitude !== 0 && b.uint32(9).double(p2.latitude), p2.longitude !== 0 && b.uint32(17).double(p2.longitude), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = kt();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.latitude = T2.double();
          break;
        case 2:
          U2.longitude = T2.double();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { latitude: ce2(p2.latitude) ? Number(p2.latitude) : 0, longitude: ce2(p2.longitude) ? Number(p2.longitude) : 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.latitude !== void 0 && (b.latitude = p2.latitude), p2.longitude !== void 0 && (b.longitude = p2.longitude), b;
  }, fromPartial(p2) {
    var b, T2;
    const K2 = kt();
    return K2.latitude = (b = p2.latitude) !== null && b !== void 0 ? b : 0, K2.longitude = (T2 = p2.longitude) !== null && T2 !== void 0 ? T2 : 0, K2;
  } };
  function It() {
    return { collectionId: "", projectId: "", broadcastId: void 0, duration: void 0, start: void 0, stop: void 0, phase: Ue2.PROJECT_BROADCAST_PHASE_UNSPECIFIED, region: void 0, datacenter: void 0 };
  }
  a92.ProjectBroadcastStatus = { encode(p2, b = c.default.Writer.create()) {
    return p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.projectId !== "" && b.uint32(18).string(p2.projectId), p2.broadcastId !== void 0 && b.uint32(26).string(p2.broadcastId), p2.duration !== void 0 && b.uint32(32).uint32(p2.duration), p2.start !== void 0 && g2.Timestamp.encode(Ut(p2.start), b.uint32(42).fork()).ldelim(), p2.stop !== void 0 && g2.Timestamp.encode(Ut(p2.stop), b.uint32(50).fork()).ldelim(), p2.phase !== Ue2.PROJECT_BROADCAST_PHASE_UNSPECIFIED && b.uint32(56).int32(Ve2(p2.phase)), p2.region !== void 0 && b.uint32(64).int32(at(p2.region)), p2.datacenter !== void 0 && b.uint32(74).string(p2.datacenter), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = It();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 2:
          U2.projectId = T2.string();
          break;
        case 3:
          U2.broadcastId = T2.string();
          break;
        case 4:
          U2.duration = T2.uint32();
          break;
        case 5:
          U2.start = $t(g2.Timestamp.decode(T2, T2.uint32()));
          break;
        case 6:
          U2.stop = $t(g2.Timestamp.decode(T2, T2.uint32()));
          break;
        case 7:
          U2.phase = Ge2(T2.int32());
          break;
        case 8:
          U2.region = me2(T2.int32());
          break;
        case 9:
          U2.datacenter = T2.string();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", projectId: ce2(p2.projectId) ? String(p2.projectId) : "", broadcastId: ce2(p2.broadcastId) ? String(p2.broadcastId) : void 0, duration: ce2(p2.duration) ? Number(p2.duration) : void 0, start: ce2(p2.start) ? String(p2.start) : void 0, stop: ce2(p2.stop) ? String(p2.stop) : void 0, phase: ce2(p2.phase) ? Ge2(p2.phase) : Ue2.PROJECT_BROADCAST_PHASE_UNSPECIFIED, region: ce2(p2.region) ? me2(p2.region) : void 0, datacenter: ce2(p2.datacenter) ? String(p2.datacenter) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.projectId !== void 0 && (b.projectId = p2.projectId), p2.broadcastId !== void 0 && (b.broadcastId = p2.broadcastId), p2.duration !== void 0 && (b.duration = Math.round(p2.duration)), p2.start !== void 0 && (b.start = p2.start), p2.stop !== void 0 && (b.stop = p2.stop), p2.phase !== void 0 && (b.phase = He2(p2.phase)), p2.region !== void 0 && (b.region = p2.region !== void 0 ? Ie2(p2.region) : void 0), p2.datacenter !== void 0 && (b.datacenter = p2.datacenter), b;
  }, fromPartial(p2) {
    var b, T2, K2, U2, te2, We2, et, dt, lt;
    const pt = It();
    return pt.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", pt.projectId = (T2 = p2.projectId) !== null && T2 !== void 0 ? T2 : "", pt.broadcastId = (K2 = p2.broadcastId) !== null && K2 !== void 0 ? K2 : void 0, pt.duration = (U2 = p2.duration) !== null && U2 !== void 0 ? U2 : void 0, pt.start = (te2 = p2.start) !== null && te2 !== void 0 ? te2 : void 0, pt.stop = (We2 = p2.stop) !== null && We2 !== void 0 ? We2 : void 0, pt.phase = (et = p2.phase) !== null && et !== void 0 ? et : Ue2.PROJECT_BROADCAST_PHASE_UNSPECIFIED, pt.region = (dt = p2.region) !== null && dt !== void 0 ? dt : void 0, pt.datacenter = (lt = p2.datacenter) !== null && lt !== void 0 ? lt : void 0, pt;
  } };
  function _t() {
    return { collectionId: "", sourceId: "", metadata: void 0, preview: void 0, address: void 0 };
  }
  a92.Source = { encode(p2, b = c.default.Writer.create()) {
    return p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.sourceId !== "" && b.uint32(18).string(p2.sourceId), p2.metadata !== void 0 && S2.Value.encode(S2.Value.wrap(p2.metadata), b.uint32(26).fork()).ldelim(), p2.preview !== void 0 && a92.PreviewAddress.encode(p2.preview, b.uint32(34).fork()).ldelim(), p2.address !== void 0 && a92.SourceAddress.encode(p2.address, b.uint32(50).fork()).ldelim(), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = _t();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 2:
          U2.sourceId = T2.string();
          break;
        case 3:
          U2.metadata = S2.Value.unwrap(S2.Value.decode(T2, T2.uint32()));
          break;
        case 4:
          U2.preview = a92.PreviewAddress.decode(T2, T2.uint32());
          break;
        case 6:
          U2.address = a92.SourceAddress.decode(T2, T2.uint32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", sourceId: ce2(p2.sourceId) ? String(p2.sourceId) : "", metadata: ce2(p2 == null ? void 0 : p2.metadata) ? p2.metadata : void 0, preview: ce2(p2.preview) ? a92.PreviewAddress.fromJSON(p2.preview) : void 0, address: ce2(p2.address) ? a92.SourceAddress.fromJSON(p2.address) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.sourceId !== void 0 && (b.sourceId = p2.sourceId), p2.metadata !== void 0 && (b.metadata = p2.metadata), p2.preview !== void 0 && (b.preview = p2.preview ? a92.PreviewAddress.toJSON(p2.preview) : void 0), p2.address !== void 0 && (b.address = p2.address ? a92.SourceAddress.toJSON(p2.address) : void 0), b;
  }, fromPartial(p2) {
    var b, T2, K2;
    const U2 = _t();
    return U2.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", U2.sourceId = (T2 = p2.sourceId) !== null && T2 !== void 0 ? T2 : "", U2.metadata = (K2 = p2.metadata) !== null && K2 !== void 0 ? K2 : void 0, U2.preview = p2.preview !== void 0 && p2.preview !== null ? a92.PreviewAddress.fromPartial(p2.preview) : void 0, U2.address = p2.address !== void 0 && p2.address !== null ? a92.SourceAddress.fromPartial(p2.address) : void 0, U2;
  } };
  function Rt() {
    return { collectionId: "", projectId: "", destinationId: "", metadata: void 0, enabled: void 0, address: void 0, timeout: void 0 };
  }
  a92.Destination = { encode(p2, b = c.default.Writer.create()) {
    return p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.projectId !== "" && b.uint32(18).string(p2.projectId), p2.destinationId !== "" && b.uint32(26).string(p2.destinationId), p2.metadata !== void 0 && S2.Value.encode(S2.Value.wrap(p2.metadata), b.uint32(34).fork()).ldelim(), p2.enabled !== void 0 && b.uint32(40).bool(p2.enabled), p2.address !== void 0 && a92.DestinationAddress.encode(p2.address, b.uint32(50).fork()).ldelim(), p2.timeout !== void 0 && b.uint32(56).uint32(p2.timeout), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Rt();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 2:
          U2.projectId = T2.string();
          break;
        case 3:
          U2.destinationId = T2.string();
          break;
        case 4:
          U2.metadata = S2.Value.unwrap(S2.Value.decode(T2, T2.uint32()));
          break;
        case 5:
          U2.enabled = T2.bool();
          break;
        case 6:
          U2.address = a92.DestinationAddress.decode(T2, T2.uint32());
          break;
        case 7:
          U2.timeout = T2.uint32();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", projectId: ce2(p2.projectId) ? String(p2.projectId) : "", destinationId: ce2(p2.destinationId) ? String(p2.destinationId) : "", metadata: ce2(p2 == null ? void 0 : p2.metadata) ? p2.metadata : void 0, enabled: ce2(p2.enabled) ? !!p2.enabled : void 0, address: ce2(p2.address) ? a92.DestinationAddress.fromJSON(p2.address) : void 0, timeout: ce2(p2.timeout) ? Number(p2.timeout) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.projectId !== void 0 && (b.projectId = p2.projectId), p2.destinationId !== void 0 && (b.destinationId = p2.destinationId), p2.metadata !== void 0 && (b.metadata = p2.metadata), p2.enabled !== void 0 && (b.enabled = p2.enabled), p2.address !== void 0 && (b.address = p2.address ? a92.DestinationAddress.toJSON(p2.address) : void 0), p2.timeout !== void 0 && (b.timeout = Math.round(p2.timeout)), b;
  }, fromPartial(p2) {
    var b, T2, K2, U2, te2, We2;
    const et = Rt();
    return et.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", et.projectId = (T2 = p2.projectId) !== null && T2 !== void 0 ? T2 : "", et.destinationId = (K2 = p2.destinationId) !== null && K2 !== void 0 ? K2 : "", et.metadata = (U2 = p2.metadata) !== null && U2 !== void 0 ? U2 : void 0, et.enabled = (te2 = p2.enabled) !== null && te2 !== void 0 ? te2 : void 0, et.address = p2.address !== void 0 && p2.address !== null ? a92.DestinationAddress.fromPartial(p2.address) : void 0, et.timeout = (We2 = p2.timeout) !== null && We2 !== void 0 ? We2 : void 0, et;
  } };
  function Jt() {
    return { collectionId: "", projectId: "", metadata: void 0, rendering: void 0, encoding: void 0, sources: [], destinations: [], composition: void 0, maxDuration: void 0, webrtc: void 0, triggers: [], location: void 0, guestCodes: [] };
  }
  a92.Project = { encode(p2, b = c.default.Writer.create()) {
    p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.projectId !== "" && b.uint32(18).string(p2.projectId), p2.metadata !== void 0 && S2.Value.encode(S2.Value.wrap(p2.metadata), b.uint32(26).fork()).ldelim(), p2.rendering !== void 0 && a92.Rendering.encode(p2.rendering, b.uint32(34).fork()).ldelim(), p2.encoding !== void 0 && a92.Encoding.encode(p2.encoding, b.uint32(42).fork()).ldelim();
    for (const T2 of p2.sources)
      a92.Source.encode(T2, b.uint32(50).fork()).ldelim();
    for (const T2 of p2.destinations)
      a92.Destination.encode(T2, b.uint32(58).fork()).ldelim();
    p2.composition !== void 0 && a92.Composition.encode(p2.composition, b.uint32(66).fork()).ldelim(), p2.maxDuration !== void 0 && b.uint32(72).uint32(p2.maxDuration), p2.webrtc !== void 0 && a92.WebRtc.encode(p2.webrtc, b.uint32(82).fork()).ldelim();
    for (const T2 of p2.triggers)
      a92.ProjectTrigger.encode(T2, b.uint32(90).fork()).ldelim();
    p2.location !== void 0 && a92.LatLong.encode(p2.location, b.uint32(98).fork()).ldelim();
    for (const T2 of p2.guestCodes)
      a92.GuestCode.encode(T2, b.uint32(106).fork()).ldelim();
    return b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Jt();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 2:
          U2.projectId = T2.string();
          break;
        case 3:
          U2.metadata = S2.Value.unwrap(S2.Value.decode(T2, T2.uint32()));
          break;
        case 4:
          U2.rendering = a92.Rendering.decode(T2, T2.uint32());
          break;
        case 5:
          U2.encoding = a92.Encoding.decode(T2, T2.uint32());
          break;
        case 6:
          U2.sources.push(a92.Source.decode(T2, T2.uint32()));
          break;
        case 7:
          U2.destinations.push(a92.Destination.decode(T2, T2.uint32()));
          break;
        case 8:
          U2.composition = a92.Composition.decode(T2, T2.uint32());
          break;
        case 9:
          U2.maxDuration = T2.uint32();
          break;
        case 10:
          U2.webrtc = a92.WebRtc.decode(T2, T2.uint32());
          break;
        case 11:
          U2.triggers.push(a92.ProjectTrigger.decode(T2, T2.uint32()));
          break;
        case 12:
          U2.location = a92.LatLong.decode(T2, T2.uint32());
          break;
        case 13:
          U2.guestCodes.push(a92.GuestCode.decode(T2, T2.uint32()));
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", projectId: ce2(p2.projectId) ? String(p2.projectId) : "", metadata: ce2(p2 == null ? void 0 : p2.metadata) ? p2.metadata : void 0, rendering: ce2(p2.rendering) ? a92.Rendering.fromJSON(p2.rendering) : void 0, encoding: ce2(p2.encoding) ? a92.Encoding.fromJSON(p2.encoding) : void 0, sources: Array.isArray(p2 == null ? void 0 : p2.sources) ? p2.sources.map((b) => a92.Source.fromJSON(b)) : [], destinations: Array.isArray(p2 == null ? void 0 : p2.destinations) ? p2.destinations.map((b) => a92.Destination.fromJSON(b)) : [], composition: ce2(p2.composition) ? a92.Composition.fromJSON(p2.composition) : void 0, maxDuration: ce2(p2.maxDuration) ? Number(p2.maxDuration) : void 0, webrtc: ce2(p2.webrtc) ? a92.WebRtc.fromJSON(p2.webrtc) : void 0, triggers: Array.isArray(p2 == null ? void 0 : p2.triggers) ? p2.triggers.map((b) => a92.ProjectTrigger.fromJSON(b)) : [], location: ce2(p2.location) ? a92.LatLong.fromJSON(p2.location) : void 0, guestCodes: Array.isArray(p2 == null ? void 0 : p2.guestCodes) ? p2.guestCodes.map((b) => a92.GuestCode.fromJSON(b)) : [] };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.projectId !== void 0 && (b.projectId = p2.projectId), p2.metadata !== void 0 && (b.metadata = p2.metadata), p2.rendering !== void 0 && (b.rendering = p2.rendering ? a92.Rendering.toJSON(p2.rendering) : void 0), p2.encoding !== void 0 && (b.encoding = p2.encoding ? a92.Encoding.toJSON(p2.encoding) : void 0), p2.sources ? b.sources = p2.sources.map((T2) => T2 ? a92.Source.toJSON(T2) : void 0) : b.sources = [], p2.destinations ? b.destinations = p2.destinations.map((T2) => T2 ? a92.Destination.toJSON(T2) : void 0) : b.destinations = [], p2.composition !== void 0 && (b.composition = p2.composition ? a92.Composition.toJSON(p2.composition) : void 0), p2.maxDuration !== void 0 && (b.maxDuration = Math.round(p2.maxDuration)), p2.webrtc !== void 0 && (b.webrtc = p2.webrtc ? a92.WebRtc.toJSON(p2.webrtc) : void 0), p2.triggers ? b.triggers = p2.triggers.map((T2) => T2 ? a92.ProjectTrigger.toJSON(T2) : void 0) : b.triggers = [], p2.location !== void 0 && (b.location = p2.location ? a92.LatLong.toJSON(p2.location) : void 0), p2.guestCodes ? b.guestCodes = p2.guestCodes.map((T2) => T2 ? a92.GuestCode.toJSON(T2) : void 0) : b.guestCodes = [], b;
  }, fromPartial(p2) {
    var b, T2, K2, U2, te2, We2, et, dt;
    const lt = Jt();
    return lt.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", lt.projectId = (T2 = p2.projectId) !== null && T2 !== void 0 ? T2 : "", lt.metadata = (K2 = p2.metadata) !== null && K2 !== void 0 ? K2 : void 0, lt.rendering = p2.rendering !== void 0 && p2.rendering !== null ? a92.Rendering.fromPartial(p2.rendering) : void 0, lt.encoding = p2.encoding !== void 0 && p2.encoding !== null ? a92.Encoding.fromPartial(p2.encoding) : void 0, lt.sources = ((U2 = p2.sources) === null || U2 === void 0 ? void 0 : U2.map((pt) => a92.Source.fromPartial(pt))) || [], lt.destinations = ((te2 = p2.destinations) === null || te2 === void 0 ? void 0 : te2.map((pt) => a92.Destination.fromPartial(pt))) || [], lt.composition = p2.composition !== void 0 && p2.composition !== null ? a92.Composition.fromPartial(p2.composition) : void 0, lt.maxDuration = (We2 = p2.maxDuration) !== null && We2 !== void 0 ? We2 : void 0, lt.webrtc = p2.webrtc !== void 0 && p2.webrtc !== null ? a92.WebRtc.fromPartial(p2.webrtc) : void 0, lt.triggers = ((et = p2.triggers) === null || et === void 0 ? void 0 : et.map((pt) => a92.ProjectTrigger.fromPartial(pt))) || [], lt.location = p2.location !== void 0 && p2.location !== null ? a92.LatLong.fromPartial(p2.location) : void 0, lt.guestCodes = ((dt = p2.guestCodes) === null || dt === void 0 ? void 0 : dt.map((pt) => a92.GuestCode.fromPartial(pt))) || [], lt;
  } };
  function Ft() {
    return { collectionId: "", metadata: void 0, projects: [], sources: [] };
  }
  a92.Collection = { encode(p2, b = c.default.Writer.create()) {
    p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.metadata !== void 0 && S2.Value.encode(S2.Value.wrap(p2.metadata), b.uint32(18).fork()).ldelim();
    for (const T2 of p2.projects)
      a92.Project.encode(T2, b.uint32(26).fork()).ldelim();
    for (const T2 of p2.sources)
      a92.Source.encode(T2, b.uint32(34).fork()).ldelim();
    return b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Ft();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 2:
          U2.metadata = S2.Value.unwrap(S2.Value.decode(T2, T2.uint32()));
          break;
        case 3:
          U2.projects.push(a92.Project.decode(T2, T2.uint32()));
          break;
        case 4:
          U2.sources.push(a92.Source.decode(T2, T2.uint32()));
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", metadata: ce2(p2 == null ? void 0 : p2.metadata) ? p2.metadata : void 0, projects: Array.isArray(p2 == null ? void 0 : p2.projects) ? p2.projects.map((b) => a92.Project.fromJSON(b)) : [], sources: Array.isArray(p2 == null ? void 0 : p2.sources) ? p2.sources.map((b) => a92.Source.fromJSON(b)) : [] };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.metadata !== void 0 && (b.metadata = p2.metadata), p2.projects ? b.projects = p2.projects.map((T2) => T2 ? a92.Project.toJSON(T2) : void 0) : b.projects = [], p2.sources ? b.sources = p2.sources.map((T2) => T2 ? a92.Source.toJSON(T2) : void 0) : b.sources = [], b;
  }, fromPartial(p2) {
    var b, T2, K2, U2;
    const te2 = Ft();
    return te2.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", te2.metadata = (T2 = p2.metadata) !== null && T2 !== void 0 ? T2 : void 0, te2.projects = ((K2 = p2.projects) === null || K2 === void 0 ? void 0 : K2.map((We2) => a92.Project.fromPartial(We2))) || [], te2.sources = ((U2 = p2.sources) === null || U2 === void 0 ? void 0 : U2.map((We2) => a92.Source.fromPartial(We2))) || [], te2;
  } };
  function Vt() {
    return { metadata: void 0 };
  }
  a92.CreateCollectionRequest = { encode(p2, b = c.default.Writer.create()) {
    return p2.metadata !== void 0 && S2.Value.encode(S2.Value.wrap(p2.metadata), b.uint32(10).fork()).ldelim(), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Vt();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.metadata = S2.Value.unwrap(S2.Value.decode(T2, T2.uint32()));
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { metadata: ce2(p2 == null ? void 0 : p2.metadata) ? p2.metadata : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.metadata !== void 0 && (b.metadata = p2.metadata), b;
  }, fromPartial(p2) {
    var b;
    const T2 = Vt();
    return T2.metadata = (b = p2.metadata) !== null && b !== void 0 ? b : void 0, T2;
  } };
  function qt() {
    return { collection: void 0 };
  }
  a92.CreateCollectionResponse = { encode(p2, b = c.default.Writer.create()) {
    return p2.collection !== void 0 && a92.Collection.encode(p2.collection, b.uint32(10).fork()).ldelim(), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = qt();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collection = a92.Collection.decode(T2, T2.uint32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collection: ce2(p2.collection) ? a92.Collection.fromJSON(p2.collection) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.collection !== void 0 && (b.collection = p2.collection ? a92.Collection.toJSON(p2.collection) : void 0), b;
  }, fromPartial(p2) {
    const b = qt();
    return b.collection = p2.collection !== void 0 && p2.collection !== null ? a92.Collection.fromPartial(p2.collection) : void 0, b;
  } };
  function Gt() {
    return { collectionId: "", populateProjects: void 0, populateSources: void 0 };
  }
  a92.GetCollectionRequest = { encode(p2, b = c.default.Writer.create()) {
    return p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.populateProjects !== void 0 && b.uint32(16).bool(p2.populateProjects), p2.populateSources !== void 0 && b.uint32(24).bool(p2.populateSources), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Gt();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 2:
          U2.populateProjects = T2.bool();
          break;
        case 3:
          U2.populateSources = T2.bool();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", populateProjects: ce2(p2.populateProjects) ? !!p2.populateProjects : void 0, populateSources: ce2(p2.populateSources) ? !!p2.populateSources : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.populateProjects !== void 0 && (b.populateProjects = p2.populateProjects), p2.populateSources !== void 0 && (b.populateSources = p2.populateSources), b;
  }, fromPartial(p2) {
    var b, T2, K2;
    const U2 = Gt();
    return U2.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", U2.populateProjects = (T2 = p2.populateProjects) !== null && T2 !== void 0 ? T2 : void 0, U2.populateSources = (K2 = p2.populateSources) !== null && K2 !== void 0 ? K2 : void 0, U2;
  } };
  function Wt() {
    return { collection: void 0 };
  }
  a92.GetCollectionResponse = { encode(p2, b = c.default.Writer.create()) {
    return p2.collection !== void 0 && a92.Collection.encode(p2.collection, b.uint32(10).fork()).ldelim(), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Wt();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collection = a92.Collection.decode(T2, T2.uint32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collection: ce2(p2.collection) ? a92.Collection.fromJSON(p2.collection) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.collection !== void 0 && (b.collection = p2.collection ? a92.Collection.toJSON(p2.collection) : void 0), b;
  }, fromPartial(p2) {
    const b = Wt();
    return b.collection = p2.collection !== void 0 && p2.collection !== null ? a92.Collection.fromPartial(p2.collection) : void 0, b;
  } };
  function Ht() {
    return { collectionId: "", updateMask: void 0, metadata: void 0 };
  }
  a92.UpdateCollectionRequest = { encode(p2, b = c.default.Writer.create()) {
    return p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.updateMask !== void 0 && v2.FieldMask.encode(v2.FieldMask.wrap(p2.updateMask), b.uint32(18).fork()).ldelim(), p2.metadata !== void 0 && S2.Value.encode(S2.Value.wrap(p2.metadata), b.uint32(26).fork()).ldelim(), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Ht();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 2:
          U2.updateMask = v2.FieldMask.unwrap(v2.FieldMask.decode(T2, T2.uint32()));
          break;
        case 3:
          U2.metadata = S2.Value.unwrap(S2.Value.decode(T2, T2.uint32()));
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", updateMask: ce2(p2.updateMask) ? v2.FieldMask.unwrap(v2.FieldMask.fromJSON(p2.updateMask)) : void 0, metadata: ce2(p2 == null ? void 0 : p2.metadata) ? p2.metadata : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.updateMask !== void 0 && (b.updateMask = v2.FieldMask.toJSON(v2.FieldMask.wrap(p2.updateMask))), p2.metadata !== void 0 && (b.metadata = p2.metadata), b;
  }, fromPartial(p2) {
    var b, T2, K2;
    const U2 = Ht();
    return U2.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", U2.updateMask = (T2 = p2.updateMask) !== null && T2 !== void 0 ? T2 : void 0, U2.metadata = (K2 = p2.metadata) !== null && K2 !== void 0 ? K2 : void 0, U2;
  } };
  function xt() {
    return { collection: void 0 };
  }
  a92.UpdateCollectionResponse = { encode(p2, b = c.default.Writer.create()) {
    return p2.collection !== void 0 && a92.Collection.encode(p2.collection, b.uint32(10).fork()).ldelim(), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = xt();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collection = a92.Collection.decode(T2, T2.uint32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collection: ce2(p2.collection) ? a92.Collection.fromJSON(p2.collection) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.collection !== void 0 && (b.collection = p2.collection ? a92.Collection.toJSON(p2.collection) : void 0), b;
  }, fromPartial(p2) {
    const b = xt();
    return b.collection = p2.collection !== void 0 && p2.collection !== null ? a92.Collection.fromPartial(p2.collection) : void 0, b;
  } };
  function zt() {
    return { collectionId: "", force: void 0 };
  }
  a92.DeleteCollectionRequest = { encode(p2, b = c.default.Writer.create()) {
    return p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.force !== void 0 && b.uint32(16).bool(p2.force), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = zt();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 2:
          U2.force = T2.bool();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", force: ce2(p2.force) ? !!p2.force : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.force !== void 0 && (b.force = p2.force), b;
  }, fromPartial(p2) {
    var b, T2;
    const K2 = zt();
    return K2.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", K2.force = (T2 = p2.force) !== null && T2 !== void 0 ? T2 : void 0, K2;
  } };
  function Yt() {
    return { sourcesDeleted: 0, projectsDeleted: 0, projectIdsStopped: [] };
  }
  a92.DeleteCollectionResponse = { encode(p2, b = c.default.Writer.create()) {
    p2.sourcesDeleted !== 0 && b.uint32(8).uint32(p2.sourcesDeleted), p2.projectsDeleted !== 0 && b.uint32(16).uint32(p2.projectsDeleted);
    for (const T2 of p2.projectIdsStopped)
      b.uint32(26).string(T2);
    return b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Yt();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.sourcesDeleted = T2.uint32();
          break;
        case 2:
          U2.projectsDeleted = T2.uint32();
          break;
        case 3:
          U2.projectIdsStopped.push(T2.string());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { sourcesDeleted: ce2(p2.sourcesDeleted) ? Number(p2.sourcesDeleted) : 0, projectsDeleted: ce2(p2.projectsDeleted) ? Number(p2.projectsDeleted) : 0, projectIdsStopped: Array.isArray(p2 == null ? void 0 : p2.projectIdsStopped) ? p2.projectIdsStopped.map((b) => String(b)) : [] };
  }, toJSON(p2) {
    const b = {};
    return p2.sourcesDeleted !== void 0 && (b.sourcesDeleted = Math.round(p2.sourcesDeleted)), p2.projectsDeleted !== void 0 && (b.projectsDeleted = Math.round(p2.projectsDeleted)), p2.projectIdsStopped ? b.projectIdsStopped = p2.projectIdsStopped.map((T2) => T2) : b.projectIdsStopped = [], b;
  }, fromPartial(p2) {
    var b, T2, K2;
    const U2 = Yt();
    return U2.sourcesDeleted = (b = p2.sourcesDeleted) !== null && b !== void 0 ? b : 0, U2.projectsDeleted = (T2 = p2.projectsDeleted) !== null && T2 !== void 0 ? T2 : 0, U2.projectIdsStopped = ((K2 = p2.projectIdsStopped) === null || K2 === void 0 ? void 0 : K2.map((te2) => te2)) || [], U2;
  } };
  function Kt() {
    return {};
  }
  a92.GetCollectionsRequest = { encode(p2, b = c.default.Writer.create()) {
    return b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Kt();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return {};
  }, toJSON(p2) {
    return {};
  }, fromPartial(p2) {
    return Kt();
  } };
  function Qt() {
    return { collections: [] };
  }
  a92.GetCollectionsResponse = { encode(p2, b = c.default.Writer.create()) {
    for (const T2 of p2.collections)
      a92.Collection.encode(T2, b.uint32(10).fork()).ldelim();
    return b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Qt();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collections.push(a92.Collection.decode(T2, T2.uint32()));
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collections: Array.isArray(p2 == null ? void 0 : p2.collections) ? p2.collections.map((b) => a92.Collection.fromJSON(b)) : [] };
  }, toJSON(p2) {
    const b = {};
    return p2.collections ? b.collections = p2.collections.map((T2) => T2 ? a92.Collection.toJSON(T2) : void 0) : b.collections = [], b;
  }, fromPartial(p2) {
    var b;
    const T2 = Qt();
    return T2.collections = ((b = p2.collections) === null || b === void 0 ? void 0 : b.map((K2) => a92.Collection.fromPartial(K2))) || [], T2;
  } };
  function Zt() {
    return { collectionId: "", metadata: void 0, rendering: void 0, encoding: void 0, composition: void 0, maxDuration: void 0, webrtc: void 0, location: void 0 };
  }
  a92.CreateProjectRequest = { encode(p2, b = c.default.Writer.create()) {
    return p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.metadata !== void 0 && S2.Value.encode(S2.Value.wrap(p2.metadata), b.uint32(18).fork()).ldelim(), p2.rendering !== void 0 && a92.Rendering.encode(p2.rendering, b.uint32(26).fork()).ldelim(), p2.encoding !== void 0 && a92.Encoding.encode(p2.encoding, b.uint32(34).fork()).ldelim(), p2.composition !== void 0 && a92.Composition.encode(p2.composition, b.uint32(42).fork()).ldelim(), p2.maxDuration !== void 0 && b.uint32(48).uint32(p2.maxDuration), p2.webrtc !== void 0 && a92.WebRtc.encode(p2.webrtc, b.uint32(58).fork()).ldelim(), p2.location !== void 0 && a92.LatLong.encode(p2.location, b.uint32(74).fork()).ldelim(), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Zt();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 2:
          U2.metadata = S2.Value.unwrap(S2.Value.decode(T2, T2.uint32()));
          break;
        case 3:
          U2.rendering = a92.Rendering.decode(T2, T2.uint32());
          break;
        case 4:
          U2.encoding = a92.Encoding.decode(T2, T2.uint32());
          break;
        case 5:
          U2.composition = a92.Composition.decode(T2, T2.uint32());
          break;
        case 6:
          U2.maxDuration = T2.uint32();
          break;
        case 7:
          U2.webrtc = a92.WebRtc.decode(T2, T2.uint32());
          break;
        case 9:
          U2.location = a92.LatLong.decode(T2, T2.uint32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", metadata: ce2(p2 == null ? void 0 : p2.metadata) ? p2.metadata : void 0, rendering: ce2(p2.rendering) ? a92.Rendering.fromJSON(p2.rendering) : void 0, encoding: ce2(p2.encoding) ? a92.Encoding.fromJSON(p2.encoding) : void 0, composition: ce2(p2.composition) ? a92.Composition.fromJSON(p2.composition) : void 0, maxDuration: ce2(p2.maxDuration) ? Number(p2.maxDuration) : void 0, webrtc: ce2(p2.webrtc) ? a92.WebRtc.fromJSON(p2.webrtc) : void 0, location: ce2(p2.location) ? a92.LatLong.fromJSON(p2.location) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.metadata !== void 0 && (b.metadata = p2.metadata), p2.rendering !== void 0 && (b.rendering = p2.rendering ? a92.Rendering.toJSON(p2.rendering) : void 0), p2.encoding !== void 0 && (b.encoding = p2.encoding ? a92.Encoding.toJSON(p2.encoding) : void 0), p2.composition !== void 0 && (b.composition = p2.composition ? a92.Composition.toJSON(p2.composition) : void 0), p2.maxDuration !== void 0 && (b.maxDuration = Math.round(p2.maxDuration)), p2.webrtc !== void 0 && (b.webrtc = p2.webrtc ? a92.WebRtc.toJSON(p2.webrtc) : void 0), p2.location !== void 0 && (b.location = p2.location ? a92.LatLong.toJSON(p2.location) : void 0), b;
  }, fromPartial(p2) {
    var b, T2, K2;
    const U2 = Zt();
    return U2.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", U2.metadata = (T2 = p2.metadata) !== null && T2 !== void 0 ? T2 : void 0, U2.rendering = p2.rendering !== void 0 && p2.rendering !== null ? a92.Rendering.fromPartial(p2.rendering) : void 0, U2.encoding = p2.encoding !== void 0 && p2.encoding !== null ? a92.Encoding.fromPartial(p2.encoding) : void 0, U2.composition = p2.composition !== void 0 && p2.composition !== null ? a92.Composition.fromPartial(p2.composition) : void 0, U2.maxDuration = (K2 = p2.maxDuration) !== null && K2 !== void 0 ? K2 : void 0, U2.webrtc = p2.webrtc !== void 0 && p2.webrtc !== null ? a92.WebRtc.fromPartial(p2.webrtc) : void 0, U2.location = p2.location !== void 0 && p2.location !== null ? a92.LatLong.fromPartial(p2.location) : void 0, U2;
  } };
  function Xt() {
    return { project: void 0 };
  }
  a92.CreateProjectResponse = { encode(p2, b = c.default.Writer.create()) {
    return p2.project !== void 0 && a92.Project.encode(p2.project, b.uint32(10).fork()).ldelim(), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Xt();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.project = a92.Project.decode(T2, T2.uint32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { project: ce2(p2.project) ? a92.Project.fromJSON(p2.project) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.project !== void 0 && (b.project = p2.project ? a92.Project.toJSON(p2.project) : void 0), b;
  }, fromPartial(p2) {
    const b = Xt();
    return b.project = p2.project !== void 0 && p2.project !== null ? a92.Project.fromPartial(p2.project) : void 0, b;
  } };
  function jt() {
    return { collectionId: "", projectId: "", updateMask: void 0, metadata: void 0, rendering: void 0, encoding: void 0, composition: void 0, maxDuration: void 0, webrtc: void 0, location: void 0 };
  }
  a92.UpdateProjectRequest = { encode(p2, b = c.default.Writer.create()) {
    return p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.projectId !== "" && b.uint32(18).string(p2.projectId), p2.updateMask !== void 0 && v2.FieldMask.encode(v2.FieldMask.wrap(p2.updateMask), b.uint32(26).fork()).ldelim(), p2.metadata !== void 0 && S2.Value.encode(S2.Value.wrap(p2.metadata), b.uint32(34).fork()).ldelim(), p2.rendering !== void 0 && a92.Rendering.encode(p2.rendering, b.uint32(42).fork()).ldelim(), p2.encoding !== void 0 && a92.Encoding.encode(p2.encoding, b.uint32(50).fork()).ldelim(), p2.composition !== void 0 && a92.Composition.encode(p2.composition, b.uint32(58).fork()).ldelim(), p2.maxDuration !== void 0 && b.uint32(64).uint32(p2.maxDuration), p2.webrtc !== void 0 && a92.WebRtc.encode(p2.webrtc, b.uint32(74).fork()).ldelim(), p2.location !== void 0 && a92.LatLong.encode(p2.location, b.uint32(82).fork()).ldelim(), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = jt();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 2:
          U2.projectId = T2.string();
          break;
        case 3:
          U2.updateMask = v2.FieldMask.unwrap(v2.FieldMask.decode(T2, T2.uint32()));
          break;
        case 4:
          U2.metadata = S2.Value.unwrap(S2.Value.decode(T2, T2.uint32()));
          break;
        case 5:
          U2.rendering = a92.Rendering.decode(T2, T2.uint32());
          break;
        case 6:
          U2.encoding = a92.Encoding.decode(T2, T2.uint32());
          break;
        case 7:
          U2.composition = a92.Composition.decode(T2, T2.uint32());
          break;
        case 8:
          U2.maxDuration = T2.uint32();
          break;
        case 9:
          U2.webrtc = a92.WebRtc.decode(T2, T2.uint32());
          break;
        case 10:
          U2.location = a92.LatLong.decode(T2, T2.uint32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", projectId: ce2(p2.projectId) ? String(p2.projectId) : "", updateMask: ce2(p2.updateMask) ? v2.FieldMask.unwrap(v2.FieldMask.fromJSON(p2.updateMask)) : void 0, metadata: ce2(p2 == null ? void 0 : p2.metadata) ? p2.metadata : void 0, rendering: ce2(p2.rendering) ? a92.Rendering.fromJSON(p2.rendering) : void 0, encoding: ce2(p2.encoding) ? a92.Encoding.fromJSON(p2.encoding) : void 0, composition: ce2(p2.composition) ? a92.Composition.fromJSON(p2.composition) : void 0, maxDuration: ce2(p2.maxDuration) ? Number(p2.maxDuration) : void 0, webrtc: ce2(p2.webrtc) ? a92.WebRtc.fromJSON(p2.webrtc) : void 0, location: ce2(p2.location) ? a92.LatLong.fromJSON(p2.location) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.projectId !== void 0 && (b.projectId = p2.projectId), p2.updateMask !== void 0 && (b.updateMask = v2.FieldMask.toJSON(v2.FieldMask.wrap(p2.updateMask))), p2.metadata !== void 0 && (b.metadata = p2.metadata), p2.rendering !== void 0 && (b.rendering = p2.rendering ? a92.Rendering.toJSON(p2.rendering) : void 0), p2.encoding !== void 0 && (b.encoding = p2.encoding ? a92.Encoding.toJSON(p2.encoding) : void 0), p2.composition !== void 0 && (b.composition = p2.composition ? a92.Composition.toJSON(p2.composition) : void 0), p2.maxDuration !== void 0 && (b.maxDuration = Math.round(p2.maxDuration)), p2.webrtc !== void 0 && (b.webrtc = p2.webrtc ? a92.WebRtc.toJSON(p2.webrtc) : void 0), p2.location !== void 0 && (b.location = p2.location ? a92.LatLong.toJSON(p2.location) : void 0), b;
  }, fromPartial(p2) {
    var b, T2, K2, U2, te2;
    const We2 = jt();
    return We2.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", We2.projectId = (T2 = p2.projectId) !== null && T2 !== void 0 ? T2 : "", We2.updateMask = (K2 = p2.updateMask) !== null && K2 !== void 0 ? K2 : void 0, We2.metadata = (U2 = p2.metadata) !== null && U2 !== void 0 ? U2 : void 0, We2.rendering = p2.rendering !== void 0 && p2.rendering !== null ? a92.Rendering.fromPartial(p2.rendering) : void 0, We2.encoding = p2.encoding !== void 0 && p2.encoding !== null ? a92.Encoding.fromPartial(p2.encoding) : void 0, We2.composition = p2.composition !== void 0 && p2.composition !== null ? a92.Composition.fromPartial(p2.composition) : void 0, We2.maxDuration = (te2 = p2.maxDuration) !== null && te2 !== void 0 ? te2 : void 0, We2.webrtc = p2.webrtc !== void 0 && p2.webrtc !== null ? a92.WebRtc.fromPartial(p2.webrtc) : void 0, We2.location = p2.location !== void 0 && p2.location !== null ? a92.LatLong.fromPartial(p2.location) : void 0, We2;
  } };
  function en() {
    return { project: void 0, broadcastUpdated: false };
  }
  a92.UpdateProjectResponse = { encode(p2, b = c.default.Writer.create()) {
    return p2.project !== void 0 && a92.Project.encode(p2.project, b.uint32(10).fork()).ldelim(), p2.broadcastUpdated === true && b.uint32(16).bool(p2.broadcastUpdated), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = en();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.project = a92.Project.decode(T2, T2.uint32());
          break;
        case 2:
          U2.broadcastUpdated = T2.bool();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { project: ce2(p2.project) ? a92.Project.fromJSON(p2.project) : void 0, broadcastUpdated: ce2(p2.broadcastUpdated) ? !!p2.broadcastUpdated : false };
  }, toJSON(p2) {
    const b = {};
    return p2.project !== void 0 && (b.project = p2.project ? a92.Project.toJSON(p2.project) : void 0), p2.broadcastUpdated !== void 0 && (b.broadcastUpdated = p2.broadcastUpdated), b;
  }, fromPartial(p2) {
    var b;
    const T2 = en();
    return T2.project = p2.project !== void 0 && p2.project !== null ? a92.Project.fromPartial(p2.project) : void 0, T2.broadcastUpdated = (b = p2.broadcastUpdated) !== null && b !== void 0 ? b : false, T2;
  } };
  function tn() {
    return { collectionId: "", projectId: "", force: void 0 };
  }
  a92.DeleteProjectRequest = { encode(p2, b = c.default.Writer.create()) {
    return p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.projectId !== "" && b.uint32(18).string(p2.projectId), p2.force !== void 0 && b.uint32(24).bool(p2.force), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = tn();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 2:
          U2.projectId = T2.string();
          break;
        case 3:
          U2.force = T2.bool();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", projectId: ce2(p2.projectId) ? String(p2.projectId) : "", force: ce2(p2.force) ? !!p2.force : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.projectId !== void 0 && (b.projectId = p2.projectId), p2.force !== void 0 && (b.force = p2.force), b;
  }, fromPartial(p2) {
    var b, T2, K2;
    const U2 = tn();
    return U2.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", U2.projectId = (T2 = p2.projectId) !== null && T2 !== void 0 ? T2 : "", U2.force = (K2 = p2.force) !== null && K2 !== void 0 ? K2 : void 0, U2;
  } };
  function nn() {
    return { broadcastStopped: false, layoutsDeleted: 0 };
  }
  a92.DeleteProjectResponse = { encode(p2, b = c.default.Writer.create()) {
    return p2.broadcastStopped === true && b.uint32(8).bool(p2.broadcastStopped), p2.layoutsDeleted !== 0 && b.uint32(16).uint32(p2.layoutsDeleted), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = nn();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.broadcastStopped = T2.bool();
          break;
        case 2:
          U2.layoutsDeleted = T2.uint32();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { broadcastStopped: ce2(p2.broadcastStopped) ? !!p2.broadcastStopped : false, layoutsDeleted: ce2(p2.layoutsDeleted) ? Number(p2.layoutsDeleted) : 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.broadcastStopped !== void 0 && (b.broadcastStopped = p2.broadcastStopped), p2.layoutsDeleted !== void 0 && (b.layoutsDeleted = Math.round(p2.layoutsDeleted)), b;
  }, fromPartial(p2) {
    var b, T2;
    const K2 = nn();
    return K2.broadcastStopped = (b = p2.broadcastStopped) !== null && b !== void 0 ? b : false, K2.layoutsDeleted = (T2 = p2.layoutsDeleted) !== null && T2 !== void 0 ? T2 : 0, K2;
  } };
  function rn() {
    return { collectionId: "", projectId: "", webrtcStart: void 0 };
  }
  a92.StartProjectBroadcastRequest = { encode(p2, b = c.default.Writer.create()) {
    return p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.projectId !== "" && b.uint32(18).string(p2.projectId), p2.webrtcStart !== void 0 && b.uint32(24).bool(p2.webrtcStart), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = rn();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 2:
          U2.projectId = T2.string();
          break;
        case 3:
          U2.webrtcStart = T2.bool();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", projectId: ce2(p2.projectId) ? String(p2.projectId) : "", webrtcStart: ce2(p2.webrtcStart) ? !!p2.webrtcStart : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.projectId !== void 0 && (b.projectId = p2.projectId), p2.webrtcStart !== void 0 && (b.webrtcStart = p2.webrtcStart), b;
  }, fromPartial(p2) {
    var b, T2, K2;
    const U2 = rn();
    return U2.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", U2.projectId = (T2 = p2.projectId) !== null && T2 !== void 0 ? T2 : "", U2.webrtcStart = (K2 = p2.webrtcStart) !== null && K2 !== void 0 ? K2 : void 0, U2;
  } };
  function an() {
    return { broadcastId: "" };
  }
  a92.StartProjectBroadcastResponse = { encode(p2, b = c.default.Writer.create()) {
    return p2.broadcastId !== "" && b.uint32(10).string(p2.broadcastId), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = an();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.broadcastId = T2.string();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { broadcastId: ce2(p2.broadcastId) ? String(p2.broadcastId) : "" };
  }, toJSON(p2) {
    const b = {};
    return p2.broadcastId !== void 0 && (b.broadcastId = p2.broadcastId), b;
  }, fromPartial(p2) {
    var b;
    const T2 = an();
    return T2.broadcastId = (b = p2.broadcastId) !== null && b !== void 0 ? b : "", T2;
  } };
  function sn() {
    return { collectionId: "", projectId: "", webrtcStop: void 0 };
  }
  a92.StopProjectBroadcastRequest = { encode(p2, b = c.default.Writer.create()) {
    return p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.projectId !== "" && b.uint32(18).string(p2.projectId), p2.webrtcStop !== void 0 && b.uint32(24).bool(p2.webrtcStop), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = sn();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 2:
          U2.projectId = T2.string();
          break;
        case 3:
          U2.webrtcStop = T2.bool();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", projectId: ce2(p2.projectId) ? String(p2.projectId) : "", webrtcStop: ce2(p2.webrtcStop) ? !!p2.webrtcStop : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.projectId !== void 0 && (b.projectId = p2.projectId), p2.webrtcStop !== void 0 && (b.webrtcStop = p2.webrtcStop), b;
  }, fromPartial(p2) {
    var b, T2, K2;
    const U2 = sn();
    return U2.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", U2.projectId = (T2 = p2.projectId) !== null && T2 !== void 0 ? T2 : "", U2.webrtcStop = (K2 = p2.webrtcStop) !== null && K2 !== void 0 ? K2 : void 0, U2;
  } };
  function dn() {
    return {};
  }
  a92.StopProjectBroadcastResponse = { encode(p2, b = c.default.Writer.create()) {
    return b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = dn();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return {};
  }, toJSON(p2) {
    return {};
  }, fromPartial(p2) {
    return dn();
  } };
  function un() {
    return { collectionId: "", projectId: "", status: void 0 };
  }
  a92.GetProjectRequest = { encode(p2, b = c.default.Writer.create()) {
    return p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.projectId !== "" && b.uint32(18).string(p2.projectId), p2.status !== void 0 && b.uint32(24).bool(p2.status), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = un();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 2:
          U2.projectId = T2.string();
          break;
        case 3:
          U2.status = T2.bool();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", projectId: ce2(p2.projectId) ? String(p2.projectId) : "", status: ce2(p2.status) ? !!p2.status : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.projectId !== void 0 && (b.projectId = p2.projectId), p2.status !== void 0 && (b.status = p2.status), b;
  }, fromPartial(p2) {
    var b, T2, K2;
    const U2 = un();
    return U2.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", U2.projectId = (T2 = p2.projectId) !== null && T2 !== void 0 ? T2 : "", U2.status = (K2 = p2.status) !== null && K2 !== void 0 ? K2 : void 0, U2;
  } };
  function cn() {
    return { project: void 0, status: void 0 };
  }
  a92.GetProjectResponse = { encode(p2, b = c.default.Writer.create()) {
    return p2.project !== void 0 && a92.Project.encode(p2.project, b.uint32(10).fork()).ldelim(), p2.status !== void 0 && a92.ProjectBroadcastStatus.encode(p2.status, b.uint32(18).fork()).ldelim(), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = cn();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.project = a92.Project.decode(T2, T2.uint32());
          break;
        case 2:
          U2.status = a92.ProjectBroadcastStatus.decode(T2, T2.uint32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { project: ce2(p2.project) ? a92.Project.fromJSON(p2.project) : void 0, status: ce2(p2.status) ? a92.ProjectBroadcastStatus.fromJSON(p2.status) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.project !== void 0 && (b.project = p2.project ? a92.Project.toJSON(p2.project) : void 0), p2.status !== void 0 && (b.status = p2.status ? a92.ProjectBroadcastStatus.toJSON(p2.status) : void 0), b;
  }, fromPartial(p2) {
    const b = cn();
    return b.project = p2.project !== void 0 && p2.project !== null ? a92.Project.fromPartial(p2.project) : void 0, b.status = p2.status !== void 0 && p2.status !== null ? a92.ProjectBroadcastStatus.fromPartial(p2.status) : void 0, b;
  } };
  function ln() {
    return { collectionId: "", projectId: "", format: void 0 };
  }
  a92.GetProjectBroadcastSnapshotRequest = { encode(p2, b = c.default.Writer.create()) {
    return p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.projectId !== "" && b.uint32(18).string(p2.projectId), p2.format !== void 0 && b.uint32(24).int32(L2(p2.format)), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = ln();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 2:
          U2.projectId = T2.string();
          break;
        case 3:
          U2.format = _(T2.int32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", projectId: ce2(p2.projectId) ? String(p2.projectId) : "", format: ce2(p2.format) ? _(p2.format) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.projectId !== void 0 && (b.projectId = p2.projectId), p2.format !== void 0 && (b.format = p2.format !== void 0 ? k(p2.format) : void 0), b;
  }, fromPartial(p2) {
    var b, T2, K2;
    const U2 = ln();
    return U2.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", U2.projectId = (T2 = p2.projectId) !== null && T2 !== void 0 ? T2 : "", U2.format = (K2 = p2.format) !== null && K2 !== void 0 ? K2 : void 0, U2;
  } };
  function fn() {
    return { format: E2.IMAGE_FORMAT_UNSPECIFIED, image: new Uint8Array() };
  }
  a92.GetProjectBroadcastSnapshotResponse = { encode(p2, b = c.default.Writer.create()) {
    return p2.format !== E2.IMAGE_FORMAT_UNSPECIFIED && b.uint32(8).int32(L2(p2.format)), p2.image.length !== 0 && b.uint32(18).bytes(p2.image), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = fn();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.format = _(T2.int32());
          break;
        case 2:
          U2.image = T2.bytes();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { format: ce2(p2.format) ? _(p2.format) : E2.IMAGE_FORMAT_UNSPECIFIED, image: ce2(p2.image) ? Fr(p2.image) : new Uint8Array() };
  }, toJSON(p2) {
    const b = {};
    return p2.format !== void 0 && (b.format = k(p2.format)), p2.image !== void 0 && (b.image = Vr(p2.image !== void 0 ? p2.image : new Uint8Array())), b;
  }, fromPartial(p2) {
    var b, T2;
    const K2 = fn();
    return K2.format = (b = p2.format) !== null && b !== void 0 ? b : E2.IMAGE_FORMAT_UNSPECIFIED, K2.image = (T2 = p2.image) !== null && T2 !== void 0 ? T2 : new Uint8Array(), K2;
  } };
  function pn() {
    return { collectionId: "", projectId: "" };
  }
  a92.GetProjectBroadcastStatusRequest = { encode(p2, b = c.default.Writer.create()) {
    return p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.projectId !== "" && b.uint32(18).string(p2.projectId), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = pn();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 2:
          U2.projectId = T2.string();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", projectId: ce2(p2.projectId) ? String(p2.projectId) : "" };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.projectId !== void 0 && (b.projectId = p2.projectId), b;
  }, fromPartial(p2) {
    var b, T2;
    const K2 = pn();
    return K2.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", K2.projectId = (T2 = p2.projectId) !== null && T2 !== void 0 ? T2 : "", K2;
  } };
  function hn() {
    return { status: void 0 };
  }
  a92.GetProjectBroadcastStatusResponse = { encode(p2, b = c.default.Writer.create()) {
    return p2.status !== void 0 && a92.ProjectBroadcastStatus.encode(p2.status, b.uint32(10).fork()).ldelim(), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = hn();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.status = a92.ProjectBroadcastStatus.decode(T2, T2.uint32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { status: ce2(p2.status) ? a92.ProjectBroadcastStatus.fromJSON(p2.status) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.status !== void 0 && (b.status = p2.status ? a92.ProjectBroadcastStatus.toJSON(p2.status) : void 0), b;
  }, fromPartial(p2) {
    const b = hn();
    return b.status = p2.status !== void 0 && p2.status !== null ? a92.ProjectBroadcastStatus.fromPartial(p2.status) : void 0, b;
  } };
  function mn() {
    return { collectionId: "", projectId: "" };
  }
  a92.StartProjectWebRtcRequest = { encode(p2, b = c.default.Writer.create()) {
    return p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.projectId !== "" && b.uint32(18).string(p2.projectId), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = mn();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 2:
          U2.projectId = T2.string();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", projectId: ce2(p2.projectId) ? String(p2.projectId) : "" };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.projectId !== void 0 && (b.projectId = p2.projectId), b;
  }, fromPartial(p2) {
    var b, T2;
    const K2 = mn();
    return K2.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", K2.projectId = (T2 = p2.projectId) !== null && T2 !== void 0 ? T2 : "", K2;
  } };
  function vn() {
    return {};
  }
  a92.StartProjectWebRtcResponse = { encode(p2, b = c.default.Writer.create()) {
    return b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = vn();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return {};
  }, toJSON(p2) {
    return {};
  }, fromPartial(p2) {
    return vn();
  } };
  function Sn() {
    return { collectionId: "", projectId: "" };
  }
  a92.StopProjectWebRtcRequest = { encode(p2, b = c.default.Writer.create()) {
    return p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.projectId !== "" && b.uint32(18).string(p2.projectId), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Sn();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 2:
          U2.projectId = T2.string();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", projectId: ce2(p2.projectId) ? String(p2.projectId) : "" };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.projectId !== void 0 && (b.projectId = p2.projectId), b;
  }, fromPartial(p2) {
    var b, T2;
    const K2 = Sn();
    return K2.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", K2.projectId = (T2 = p2.projectId) !== null && T2 !== void 0 ? T2 : "", K2;
  } };
  function yn() {
    return {};
  }
  a92.StopProjectWebRtcResponse = { encode(p2, b = c.default.Writer.create()) {
    return b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = yn();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return {};
  }, toJSON(p2) {
    return {};
  }, fromPartial(p2) {
    return yn();
  } };
  function gn() {
    return { collectionId: "", projectId: "", metadata: void 0, address: void 0, enabled: void 0, timeout: void 0 };
  }
  a92.CreateDestinationRequest = { encode(p2, b = c.default.Writer.create()) {
    return p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.projectId !== "" && b.uint32(18).string(p2.projectId), p2.metadata !== void 0 && S2.Value.encode(S2.Value.wrap(p2.metadata), b.uint32(26).fork()).ldelim(), p2.address !== void 0 && a92.DestinationAddress.encode(p2.address, b.uint32(42).fork()).ldelim(), p2.enabled !== void 0 && b.uint32(48).bool(p2.enabled), p2.timeout !== void 0 && b.uint32(56).uint32(p2.timeout), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = gn();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 2:
          U2.projectId = T2.string();
          break;
        case 3:
          U2.metadata = S2.Value.unwrap(S2.Value.decode(T2, T2.uint32()));
          break;
        case 5:
          U2.address = a92.DestinationAddress.decode(T2, T2.uint32());
          break;
        case 6:
          U2.enabled = T2.bool();
          break;
        case 7:
          U2.timeout = T2.uint32();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", projectId: ce2(p2.projectId) ? String(p2.projectId) : "", metadata: ce2(p2 == null ? void 0 : p2.metadata) ? p2.metadata : void 0, address: ce2(p2.address) ? a92.DestinationAddress.fromJSON(p2.address) : void 0, enabled: ce2(p2.enabled) ? !!p2.enabled : void 0, timeout: ce2(p2.timeout) ? Number(p2.timeout) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.projectId !== void 0 && (b.projectId = p2.projectId), p2.metadata !== void 0 && (b.metadata = p2.metadata), p2.address !== void 0 && (b.address = p2.address ? a92.DestinationAddress.toJSON(p2.address) : void 0), p2.enabled !== void 0 && (b.enabled = p2.enabled), p2.timeout !== void 0 && (b.timeout = Math.round(p2.timeout)), b;
  }, fromPartial(p2) {
    var b, T2, K2, U2, te2;
    const We2 = gn();
    return We2.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", We2.projectId = (T2 = p2.projectId) !== null && T2 !== void 0 ? T2 : "", We2.metadata = (K2 = p2.metadata) !== null && K2 !== void 0 ? K2 : void 0, We2.address = p2.address !== void 0 && p2.address !== null ? a92.DestinationAddress.fromPartial(p2.address) : void 0, We2.enabled = (U2 = p2.enabled) !== null && U2 !== void 0 ? U2 : void 0, We2.timeout = (te2 = p2.timeout) !== null && te2 !== void 0 ? te2 : void 0, We2;
  } };
  function bn() {
    return { destination: void 0 };
  }
  a92.CreateDestinationResponse = { encode(p2, b = c.default.Writer.create()) {
    return p2.destination !== void 0 && a92.Destination.encode(p2.destination, b.uint32(10).fork()).ldelim(), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = bn();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.destination = a92.Destination.decode(T2, T2.uint32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { destination: ce2(p2.destination) ? a92.Destination.fromJSON(p2.destination) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.destination !== void 0 && (b.destination = p2.destination ? a92.Destination.toJSON(p2.destination) : void 0), b;
  }, fromPartial(p2) {
    const b = bn();
    return b.destination = p2.destination !== void 0 && p2.destination !== null ? a92.Destination.fromPartial(p2.destination) : void 0, b;
  } };
  function En() {
    return { collectionId: "", projectId: "", destinationId: "" };
  }
  a92.GetDestinationRequest = { encode(p2, b = c.default.Writer.create()) {
    return p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.projectId !== "" && b.uint32(18).string(p2.projectId), p2.destinationId !== "" && b.uint32(26).string(p2.destinationId), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = En();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 2:
          U2.projectId = T2.string();
          break;
        case 3:
          U2.destinationId = T2.string();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", projectId: ce2(p2.projectId) ? String(p2.projectId) : "", destinationId: ce2(p2.destinationId) ? String(p2.destinationId) : "" };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.projectId !== void 0 && (b.projectId = p2.projectId), p2.destinationId !== void 0 && (b.destinationId = p2.destinationId), b;
  }, fromPartial(p2) {
    var b, T2, K2;
    const U2 = En();
    return U2.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", U2.projectId = (T2 = p2.projectId) !== null && T2 !== void 0 ? T2 : "", U2.destinationId = (K2 = p2.destinationId) !== null && K2 !== void 0 ? K2 : "", U2;
  } };
  function Tn() {
    return { destination: void 0 };
  }
  a92.GetDestinationResponse = { encode(p2, b = c.default.Writer.create()) {
    return p2.destination !== void 0 && a92.Destination.encode(p2.destination, b.uint32(10).fork()).ldelim(), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Tn();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.destination = a92.Destination.decode(T2, T2.uint32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { destination: ce2(p2.destination) ? a92.Destination.fromJSON(p2.destination) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.destination !== void 0 && (b.destination = p2.destination ? a92.Destination.toJSON(p2.destination) : void 0), b;
  }, fromPartial(p2) {
    const b = Tn();
    return b.destination = p2.destination !== void 0 && p2.destination !== null ? a92.Destination.fromPartial(p2.destination) : void 0, b;
  } };
  function _n() {
    return { collectionId: "", projectId: "", destinationId: "", force: void 0 };
  }
  a92.DeleteDestinationRequest = { encode(p2, b = c.default.Writer.create()) {
    return p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.projectId !== "" && b.uint32(18).string(p2.projectId), p2.destinationId !== "" && b.uint32(26).string(p2.destinationId), p2.force !== void 0 && b.uint32(32).bool(p2.force), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = _n();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 2:
          U2.projectId = T2.string();
          break;
        case 3:
          U2.destinationId = T2.string();
          break;
        case 4:
          U2.force = T2.bool();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", projectId: ce2(p2.projectId) ? String(p2.projectId) : "", destinationId: ce2(p2.destinationId) ? String(p2.destinationId) : "", force: ce2(p2.force) ? !!p2.force : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.projectId !== void 0 && (b.projectId = p2.projectId), p2.destinationId !== void 0 && (b.destinationId = p2.destinationId), p2.force !== void 0 && (b.force = p2.force), b;
  }, fromPartial(p2) {
    var b, T2, K2, U2;
    const te2 = _n();
    return te2.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", te2.projectId = (T2 = p2.projectId) !== null && T2 !== void 0 ? T2 : "", te2.destinationId = (K2 = p2.destinationId) !== null && K2 !== void 0 ? K2 : "", te2.force = (U2 = p2.force) !== null && U2 !== void 0 ? U2 : void 0, te2;
  } };
  function In() {
    return { broadcastUpdated: false };
  }
  a92.DeleteDestinationResponse = { encode(p2, b = c.default.Writer.create()) {
    return p2.broadcastUpdated === true && b.uint32(8).bool(p2.broadcastUpdated), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = In();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.broadcastUpdated = T2.bool();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { broadcastUpdated: ce2(p2.broadcastUpdated) ? !!p2.broadcastUpdated : false };
  }, toJSON(p2) {
    const b = {};
    return p2.broadcastUpdated !== void 0 && (b.broadcastUpdated = p2.broadcastUpdated), b;
  }, fromPartial(p2) {
    var b;
    const T2 = In();
    return T2.broadcastUpdated = (b = p2.broadcastUpdated) !== null && b !== void 0 ? b : false, T2;
  } };
  function kn() {
    return { collectionId: "", projectId: "", destinationId: "", updateMask: void 0, metadata: void 0, address: void 0, enabled: void 0, timeout: void 0 };
  }
  a92.UpdateDestinationRequest = { encode(p2, b = c.default.Writer.create()) {
    return p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.projectId !== "" && b.uint32(18).string(p2.projectId), p2.destinationId !== "" && b.uint32(26).string(p2.destinationId), p2.updateMask !== void 0 && v2.FieldMask.encode(v2.FieldMask.wrap(p2.updateMask), b.uint32(34).fork()).ldelim(), p2.metadata !== void 0 && S2.Value.encode(S2.Value.wrap(p2.metadata), b.uint32(42).fork()).ldelim(), p2.address !== void 0 && a92.DestinationAddress.encode(p2.address, b.uint32(50).fork()).ldelim(), p2.enabled !== void 0 && b.uint32(56).bool(p2.enabled), p2.timeout !== void 0 && b.uint32(64).uint32(p2.timeout), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = kn();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 2:
          U2.projectId = T2.string();
          break;
        case 3:
          U2.destinationId = T2.string();
          break;
        case 4:
          U2.updateMask = v2.FieldMask.unwrap(v2.FieldMask.decode(T2, T2.uint32()));
          break;
        case 5:
          U2.metadata = S2.Value.unwrap(S2.Value.decode(T2, T2.uint32()));
          break;
        case 6:
          U2.address = a92.DestinationAddress.decode(T2, T2.uint32());
          break;
        case 7:
          U2.enabled = T2.bool();
          break;
        case 8:
          U2.timeout = T2.uint32();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", projectId: ce2(p2.projectId) ? String(p2.projectId) : "", destinationId: ce2(p2.destinationId) ? String(p2.destinationId) : "", updateMask: ce2(p2.updateMask) ? v2.FieldMask.unwrap(v2.FieldMask.fromJSON(p2.updateMask)) : void 0, metadata: ce2(p2 == null ? void 0 : p2.metadata) ? p2.metadata : void 0, address: ce2(p2.address) ? a92.DestinationAddress.fromJSON(p2.address) : void 0, enabled: ce2(p2.enabled) ? !!p2.enabled : void 0, timeout: ce2(p2.timeout) ? Number(p2.timeout) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.projectId !== void 0 && (b.projectId = p2.projectId), p2.destinationId !== void 0 && (b.destinationId = p2.destinationId), p2.updateMask !== void 0 && (b.updateMask = v2.FieldMask.toJSON(v2.FieldMask.wrap(p2.updateMask))), p2.metadata !== void 0 && (b.metadata = p2.metadata), p2.address !== void 0 && (b.address = p2.address ? a92.DestinationAddress.toJSON(p2.address) : void 0), p2.enabled !== void 0 && (b.enabled = p2.enabled), p2.timeout !== void 0 && (b.timeout = Math.round(p2.timeout)), b;
  }, fromPartial(p2) {
    var b, T2, K2, U2, te2, We2, et;
    const dt = kn();
    return dt.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", dt.projectId = (T2 = p2.projectId) !== null && T2 !== void 0 ? T2 : "", dt.destinationId = (K2 = p2.destinationId) !== null && K2 !== void 0 ? K2 : "", dt.updateMask = (U2 = p2.updateMask) !== null && U2 !== void 0 ? U2 : void 0, dt.metadata = (te2 = p2.metadata) !== null && te2 !== void 0 ? te2 : void 0, dt.address = p2.address !== void 0 && p2.address !== null ? a92.DestinationAddress.fromPartial(p2.address) : void 0, dt.enabled = (We2 = p2.enabled) !== null && We2 !== void 0 ? We2 : void 0, dt.timeout = (et = p2.timeout) !== null && et !== void 0 ? et : void 0, dt;
  } };
  function Cn() {
    return { destination: void 0, broadcastUpdated: false };
  }
  a92.UpdateDestinationResponse = { encode(p2, b = c.default.Writer.create()) {
    return p2.destination !== void 0 && a92.Destination.encode(p2.destination, b.uint32(10).fork()).ldelim(), p2.broadcastUpdated === true && b.uint32(16).bool(p2.broadcastUpdated), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Cn();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.destination = a92.Destination.decode(T2, T2.uint32());
          break;
        case 2:
          U2.broadcastUpdated = T2.bool();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { destination: ce2(p2.destination) ? a92.Destination.fromJSON(p2.destination) : void 0, broadcastUpdated: ce2(p2.broadcastUpdated) ? !!p2.broadcastUpdated : false };
  }, toJSON(p2) {
    const b = {};
    return p2.destination !== void 0 && (b.destination = p2.destination ? a92.Destination.toJSON(p2.destination) : void 0), p2.broadcastUpdated !== void 0 && (b.broadcastUpdated = p2.broadcastUpdated), b;
  }, fromPartial(p2) {
    var b;
    const T2 = Cn();
    return T2.destination = p2.destination !== void 0 && p2.destination !== null ? a92.Destination.fromPartial(p2.destination) : void 0, T2.broadcastUpdated = (b = p2.broadcastUpdated) !== null && b !== void 0 ? b : false, T2;
  } };
  function Rn() {
    return { collectionId: "", metadata: void 0, address: void 0, preview: void 0 };
  }
  a92.CreateSourceRequest = { encode(p2, b = c.default.Writer.create()) {
    return p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.metadata !== void 0 && S2.Value.encode(S2.Value.wrap(p2.metadata), b.uint32(18).fork()).ldelim(), p2.address !== void 0 && a92.SourceAddress.encode(p2.address, b.uint32(26).fork()).ldelim(), p2.preview !== void 0 && a92.PreviewAddress.encode(p2.preview, b.uint32(34).fork()).ldelim(), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Rn();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 2:
          U2.metadata = S2.Value.unwrap(S2.Value.decode(T2, T2.uint32()));
          break;
        case 3:
          U2.address = a92.SourceAddress.decode(T2, T2.uint32());
          break;
        case 4:
          U2.preview = a92.PreviewAddress.decode(T2, T2.uint32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", metadata: ce2(p2 == null ? void 0 : p2.metadata) ? p2.metadata : void 0, address: ce2(p2.address) ? a92.SourceAddress.fromJSON(p2.address) : void 0, preview: ce2(p2.preview) ? a92.PreviewAddress.fromJSON(p2.preview) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.metadata !== void 0 && (b.metadata = p2.metadata), p2.address !== void 0 && (b.address = p2.address ? a92.SourceAddress.toJSON(p2.address) : void 0), p2.preview !== void 0 && (b.preview = p2.preview ? a92.PreviewAddress.toJSON(p2.preview) : void 0), b;
  }, fromPartial(p2) {
    var b, T2;
    const K2 = Rn();
    return K2.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", K2.metadata = (T2 = p2.metadata) !== null && T2 !== void 0 ? T2 : void 0, K2.address = p2.address !== void 0 && p2.address !== null ? a92.SourceAddress.fromPartial(p2.address) : void 0, K2.preview = p2.preview !== void 0 && p2.preview !== null ? a92.PreviewAddress.fromPartial(p2.preview) : void 0, K2;
  } };
  function Pn() {
    return { source: void 0 };
  }
  a92.CreateSourceResponse = { encode(p2, b = c.default.Writer.create()) {
    return p2.source !== void 0 && a92.Source.encode(p2.source, b.uint32(10).fork()).ldelim(), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Pn();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.source = a92.Source.decode(T2, T2.uint32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { source: ce2(p2.source) ? a92.Source.fromJSON(p2.source) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.source !== void 0 && (b.source = p2.source ? a92.Source.toJSON(p2.source) : void 0), b;
  }, fromPartial(p2) {
    const b = Pn();
    return b.source = p2.source !== void 0 && p2.source !== null ? a92.Source.fromPartial(p2.source) : void 0, b;
  } };
  function On() {
    return { collectionId: "", sourceId: "", force: void 0 };
  }
  a92.DeleteSourceRequest = { encode(p2, b = c.default.Writer.create()) {
    return p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.sourceId !== "" && b.uint32(18).string(p2.sourceId), p2.force !== void 0 && b.uint32(24).bool(p2.force), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = On();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 2:
          U2.sourceId = T2.string();
          break;
        case 3:
          U2.force = T2.bool();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", sourceId: ce2(p2.sourceId) ? String(p2.sourceId) : "", force: ce2(p2.force) ? !!p2.force : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.sourceId !== void 0 && (b.sourceId = p2.sourceId), p2.force !== void 0 && (b.force = p2.force), b;
  }, fromPartial(p2) {
    var b, T2, K2;
    const U2 = On();
    return U2.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", U2.sourceId = (T2 = p2.sourceId) !== null && T2 !== void 0 ? T2 : "", U2.force = (K2 = p2.force) !== null && K2 !== void 0 ? K2 : void 0, U2;
  } };
  function Nn() {
    return { projectIdsUpdated: [] };
  }
  a92.DeleteSourceResponse = { encode(p2, b = c.default.Writer.create()) {
    for (const T2 of p2.projectIdsUpdated)
      b.uint32(26).string(T2);
    return b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Nn();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 3:
          U2.projectIdsUpdated.push(T2.string());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { projectIdsUpdated: Array.isArray(p2 == null ? void 0 : p2.projectIdsUpdated) ? p2.projectIdsUpdated.map((b) => String(b)) : [] };
  }, toJSON(p2) {
    const b = {};
    return p2.projectIdsUpdated ? b.projectIdsUpdated = p2.projectIdsUpdated.map((T2) => T2) : b.projectIdsUpdated = [], b;
  }, fromPartial(p2) {
    var b;
    const T2 = Nn();
    return T2.projectIdsUpdated = ((b = p2.projectIdsUpdated) === null || b === void 0 ? void 0 : b.map((K2) => K2)) || [], T2;
  } };
  function wn() {
    return { collectionId: "", projectId: "", sourceId: "", trigger: void 0 };
  }
  a92.AddSourceToProjectRequest = { encode(p2, b = c.default.Writer.create()) {
    return p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.projectId !== "" && b.uint32(18).string(p2.projectId), p2.sourceId !== "" && b.uint32(26).string(p2.sourceId), p2.trigger !== void 0 && a92.SourceTrigger.encode(p2.trigger, b.uint32(34).fork()).ldelim(), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = wn();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 2:
          U2.projectId = T2.string();
          break;
        case 3:
          U2.sourceId = T2.string();
          break;
        case 4:
          U2.trigger = a92.SourceTrigger.decode(T2, T2.uint32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", projectId: ce2(p2.projectId) ? String(p2.projectId) : "", sourceId: ce2(p2.sourceId) ? String(p2.sourceId) : "", trigger: ce2(p2.trigger) ? a92.SourceTrigger.fromJSON(p2.trigger) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.projectId !== void 0 && (b.projectId = p2.projectId), p2.sourceId !== void 0 && (b.sourceId = p2.sourceId), p2.trigger !== void 0 && (b.trigger = p2.trigger ? a92.SourceTrigger.toJSON(p2.trigger) : void 0), b;
  }, fromPartial(p2) {
    var b, T2, K2;
    const U2 = wn();
    return U2.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", U2.projectId = (T2 = p2.projectId) !== null && T2 !== void 0 ? T2 : "", U2.sourceId = (K2 = p2.sourceId) !== null && K2 !== void 0 ? K2 : "", U2.trigger = p2.trigger !== void 0 && p2.trigger !== null ? a92.SourceTrigger.fromPartial(p2.trigger) : void 0, U2;
  } };
  function An() {
    return { project: void 0, broadcastUpdated: false };
  }
  a92.AddSourceToProjectResponse = { encode(p2, b = c.default.Writer.create()) {
    return p2.project !== void 0 && a92.Project.encode(p2.project, b.uint32(10).fork()).ldelim(), p2.broadcastUpdated === true && b.uint32(16).bool(p2.broadcastUpdated), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = An();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.project = a92.Project.decode(T2, T2.uint32());
          break;
        case 2:
          U2.broadcastUpdated = T2.bool();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { project: ce2(p2.project) ? a92.Project.fromJSON(p2.project) : void 0, broadcastUpdated: ce2(p2.broadcastUpdated) ? !!p2.broadcastUpdated : false };
  }, toJSON(p2) {
    const b = {};
    return p2.project !== void 0 && (b.project = p2.project ? a92.Project.toJSON(p2.project) : void 0), p2.broadcastUpdated !== void 0 && (b.broadcastUpdated = p2.broadcastUpdated), b;
  }, fromPartial(p2) {
    var b;
    const T2 = An();
    return T2.project = p2.project !== void 0 && p2.project !== null ? a92.Project.fromPartial(p2.project) : void 0, T2.broadcastUpdated = (b = p2.broadcastUpdated) !== null && b !== void 0 ? b : false, T2;
  } };
  function Dn() {
    return { collectionId: "", projectId: "", sourceId: "", updateMask: void 0, trigger: void 0 };
  }
  a92.UpdateSourceInProjectRequest = { encode(p2, b = c.default.Writer.create()) {
    return p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.projectId !== "" && b.uint32(18).string(p2.projectId), p2.sourceId !== "" && b.uint32(26).string(p2.sourceId), p2.updateMask !== void 0 && v2.FieldMask.encode(v2.FieldMask.wrap(p2.updateMask), b.uint32(34).fork()).ldelim(), p2.trigger !== void 0 && a92.SourceTrigger.encode(p2.trigger, b.uint32(42).fork()).ldelim(), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Dn();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 2:
          U2.projectId = T2.string();
          break;
        case 3:
          U2.sourceId = T2.string();
          break;
        case 4:
          U2.updateMask = v2.FieldMask.unwrap(v2.FieldMask.decode(T2, T2.uint32()));
          break;
        case 5:
          U2.trigger = a92.SourceTrigger.decode(T2, T2.uint32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", projectId: ce2(p2.projectId) ? String(p2.projectId) : "", sourceId: ce2(p2.sourceId) ? String(p2.sourceId) : "", updateMask: ce2(p2.updateMask) ? v2.FieldMask.unwrap(v2.FieldMask.fromJSON(p2.updateMask)) : void 0, trigger: ce2(p2.trigger) ? a92.SourceTrigger.fromJSON(p2.trigger) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.projectId !== void 0 && (b.projectId = p2.projectId), p2.sourceId !== void 0 && (b.sourceId = p2.sourceId), p2.updateMask !== void 0 && (b.updateMask = v2.FieldMask.toJSON(v2.FieldMask.wrap(p2.updateMask))), p2.trigger !== void 0 && (b.trigger = p2.trigger ? a92.SourceTrigger.toJSON(p2.trigger) : void 0), b;
  }, fromPartial(p2) {
    var b, T2, K2, U2;
    const te2 = Dn();
    return te2.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", te2.projectId = (T2 = p2.projectId) !== null && T2 !== void 0 ? T2 : "", te2.sourceId = (K2 = p2.sourceId) !== null && K2 !== void 0 ? K2 : "", te2.updateMask = (U2 = p2.updateMask) !== null && U2 !== void 0 ? U2 : void 0, te2.trigger = p2.trigger !== void 0 && p2.trigger !== null ? a92.SourceTrigger.fromPartial(p2.trigger) : void 0, te2;
  } };
  function Ln() {
    return { project: void 0 };
  }
  a92.UpdateSourceInProjectResponse = { encode(p2, b = c.default.Writer.create()) {
    return p2.project !== void 0 && a92.Project.encode(p2.project, b.uint32(10).fork()).ldelim(), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Ln();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.project = a92.Project.decode(T2, T2.uint32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { project: ce2(p2.project) ? a92.Project.fromJSON(p2.project) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.project !== void 0 && (b.project = p2.project ? a92.Project.toJSON(p2.project) : void 0), b;
  }, fromPartial(p2) {
    const b = Ln();
    return b.project = p2.project !== void 0 && p2.project !== null ? a92.Project.fromPartial(p2.project) : void 0, b;
  } };
  function Mn() {
    return { collectionId: "", sourceId: "" };
  }
  a92.GetSourceRequest = { encode(p2, b = c.default.Writer.create()) {
    return p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.sourceId !== "" && b.uint32(26).string(p2.sourceId), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Mn();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 3:
          U2.sourceId = T2.string();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", sourceId: ce2(p2.sourceId) ? String(p2.sourceId) : "" };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.sourceId !== void 0 && (b.sourceId = p2.sourceId), b;
  }, fromPartial(p2) {
    var b, T2;
    const K2 = Mn();
    return K2.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", K2.sourceId = (T2 = p2.sourceId) !== null && T2 !== void 0 ? T2 : "", K2;
  } };
  function Un() {
    return { source: void 0 };
  }
  a92.GetSourceResponse = { encode(p2, b = c.default.Writer.create()) {
    return p2.source !== void 0 && a92.Source.encode(p2.source, b.uint32(10).fork()).ldelim(), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Un();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.source = a92.Source.decode(T2, T2.uint32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { source: ce2(p2.source) ? a92.Source.fromJSON(p2.source) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.source !== void 0 && (b.source = p2.source ? a92.Source.toJSON(p2.source) : void 0), b;
  }, fromPartial(p2) {
    const b = Un();
    return b.source = p2.source !== void 0 && p2.source !== null ? a92.Source.fromPartial(p2.source) : void 0, b;
  } };
  function $n() {
    return { collectionId: "" };
  }
  a92.GetSourcesRequest = { encode(p2, b = c.default.Writer.create()) {
    return p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = $n();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "" };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), b;
  }, fromPartial(p2) {
    var b;
    const T2 = $n();
    return T2.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", T2;
  } };
  function Bn() {
    return { sources: [] };
  }
  a92.GetSourcesResponse = { encode(p2, b = c.default.Writer.create()) {
    for (const T2 of p2.sources)
      a92.Source.encode(T2, b.uint32(10).fork()).ldelim();
    return b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Bn();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.sources.push(a92.Source.decode(T2, T2.uint32()));
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { sources: Array.isArray(p2 == null ? void 0 : p2.sources) ? p2.sources.map((b) => a92.Source.fromJSON(b)) : [] };
  }, toJSON(p2) {
    const b = {};
    return p2.sources ? b.sources = p2.sources.map((T2) => T2 ? a92.Source.toJSON(T2) : void 0) : b.sources = [], b;
  }, fromPartial(p2) {
    var b;
    const T2 = Bn();
    return T2.sources = ((b = p2.sources) === null || b === void 0 ? void 0 : b.map((K2) => a92.Source.fromPartial(K2))) || [], T2;
  } };
  function Jn() {
    return { collectionId: "", sourceId: "", updateMask: void 0, metadata: void 0, address: void 0, preview: void 0 };
  }
  a92.UpdateSourceRequest = { encode(p2, b = c.default.Writer.create()) {
    return p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.sourceId !== "" && b.uint32(26).string(p2.sourceId), p2.updateMask !== void 0 && v2.FieldMask.encode(v2.FieldMask.wrap(p2.updateMask), b.uint32(34).fork()).ldelim(), p2.metadata !== void 0 && S2.Value.encode(S2.Value.wrap(p2.metadata), b.uint32(42).fork()).ldelim(), p2.address !== void 0 && a92.SourceAddress.encode(p2.address, b.uint32(50).fork()).ldelim(), p2.preview !== void 0 && a92.PreviewAddress.encode(p2.preview, b.uint32(58).fork()).ldelim(), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Jn();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 3:
          U2.sourceId = T2.string();
          break;
        case 4:
          U2.updateMask = v2.FieldMask.unwrap(v2.FieldMask.decode(T2, T2.uint32()));
          break;
        case 5:
          U2.metadata = S2.Value.unwrap(S2.Value.decode(T2, T2.uint32()));
          break;
        case 6:
          U2.address = a92.SourceAddress.decode(T2, T2.uint32());
          break;
        case 7:
          U2.preview = a92.PreviewAddress.decode(T2, T2.uint32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", sourceId: ce2(p2.sourceId) ? String(p2.sourceId) : "", updateMask: ce2(p2.updateMask) ? v2.FieldMask.unwrap(v2.FieldMask.fromJSON(p2.updateMask)) : void 0, metadata: ce2(p2 == null ? void 0 : p2.metadata) ? p2.metadata : void 0, address: ce2(p2.address) ? a92.SourceAddress.fromJSON(p2.address) : void 0, preview: ce2(p2.preview) ? a92.PreviewAddress.fromJSON(p2.preview) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.sourceId !== void 0 && (b.sourceId = p2.sourceId), p2.updateMask !== void 0 && (b.updateMask = v2.FieldMask.toJSON(v2.FieldMask.wrap(p2.updateMask))), p2.metadata !== void 0 && (b.metadata = p2.metadata), p2.address !== void 0 && (b.address = p2.address ? a92.SourceAddress.toJSON(p2.address) : void 0), p2.preview !== void 0 && (b.preview = p2.preview ? a92.PreviewAddress.toJSON(p2.preview) : void 0), b;
  }, fromPartial(p2) {
    var b, T2, K2, U2;
    const te2 = Jn();
    return te2.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", te2.sourceId = (T2 = p2.sourceId) !== null && T2 !== void 0 ? T2 : "", te2.updateMask = (K2 = p2.updateMask) !== null && K2 !== void 0 ? K2 : void 0, te2.metadata = (U2 = p2.metadata) !== null && U2 !== void 0 ? U2 : void 0, te2.address = p2.address !== void 0 && p2.address !== null ? a92.SourceAddress.fromPartial(p2.address) : void 0, te2.preview = p2.preview !== void 0 && p2.preview !== null ? a92.PreviewAddress.fromPartial(p2.preview) : void 0, te2;
  } };
  function Fn() {
    return { source: void 0, broadcastUpdated: false };
  }
  a92.UpdateSourceResponse = { encode(p2, b = c.default.Writer.create()) {
    return p2.source !== void 0 && a92.Source.encode(p2.source, b.uint32(10).fork()).ldelim(), p2.broadcastUpdated === true && b.uint32(16).bool(p2.broadcastUpdated), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Fn();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.source = a92.Source.decode(T2, T2.uint32());
          break;
        case 2:
          U2.broadcastUpdated = T2.bool();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { source: ce2(p2.source) ? a92.Source.fromJSON(p2.source) : void 0, broadcastUpdated: ce2(p2.broadcastUpdated) ? !!p2.broadcastUpdated : false };
  }, toJSON(p2) {
    const b = {};
    return p2.source !== void 0 && (b.source = p2.source ? a92.Source.toJSON(p2.source) : void 0), p2.broadcastUpdated !== void 0 && (b.broadcastUpdated = p2.broadcastUpdated), b;
  }, fromPartial(p2) {
    var b;
    const T2 = Fn();
    return T2.source = p2.source !== void 0 && p2.source !== null ? a92.Source.fromPartial(p2.source) : void 0, T2.broadcastUpdated = (b = p2.broadcastUpdated) !== null && b !== void 0 ? b : false, T2;
  } };
  function Vn() {
    return { collectionId: "", projectId: "", sourceId: "", force: void 0 };
  }
  a92.RemoveSourceFromProjectRequest = { encode(p2, b = c.default.Writer.create()) {
    return p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.projectId !== "" && b.uint32(18).string(p2.projectId), p2.sourceId !== "" && b.uint32(26).string(p2.sourceId), p2.force !== void 0 && b.uint32(32).bool(p2.force), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Vn();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 2:
          U2.projectId = T2.string();
          break;
        case 3:
          U2.sourceId = T2.string();
          break;
        case 4:
          U2.force = T2.bool();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", projectId: ce2(p2.projectId) ? String(p2.projectId) : "", sourceId: ce2(p2.sourceId) ? String(p2.sourceId) : "", force: ce2(p2.force) ? !!p2.force : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.projectId !== void 0 && (b.projectId = p2.projectId), p2.sourceId !== void 0 && (b.sourceId = p2.sourceId), p2.force !== void 0 && (b.force = p2.force), b;
  }, fromPartial(p2) {
    var b, T2, K2, U2;
    const te2 = Vn();
    return te2.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", te2.projectId = (T2 = p2.projectId) !== null && T2 !== void 0 ? T2 : "", te2.sourceId = (K2 = p2.sourceId) !== null && K2 !== void 0 ? K2 : "", te2.force = (U2 = p2.force) !== null && U2 !== void 0 ? U2 : void 0, te2;
  } };
  function qn() {
    return { project: void 0, broadcastUpdated: false };
  }
  a92.RemoveSourceFromProjectResponse = { encode(p2, b = c.default.Writer.create()) {
    return p2.project !== void 0 && a92.Project.encode(p2.project, b.uint32(10).fork()).ldelim(), p2.broadcastUpdated === true && b.uint32(16).bool(p2.broadcastUpdated), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = qn();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.project = a92.Project.decode(T2, T2.uint32());
          break;
        case 2:
          U2.broadcastUpdated = T2.bool();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { project: ce2(p2.project) ? a92.Project.fromJSON(p2.project) : void 0, broadcastUpdated: ce2(p2.broadcastUpdated) ? !!p2.broadcastUpdated : false };
  }, toJSON(p2) {
    const b = {};
    return p2.project !== void 0 && (b.project = p2.project ? a92.Project.toJSON(p2.project) : void 0), p2.broadcastUpdated !== void 0 && (b.broadcastUpdated = p2.broadcastUpdated), b;
  }, fromPartial(p2) {
    var b;
    const T2 = qn();
    return T2.project = p2.project !== void 0 && p2.project !== null ? a92.Project.fromPartial(p2.project) : void 0, T2.broadcastUpdated = (b = p2.broadcastUpdated) !== null && b !== void 0 ? b : false, T2;
  } };
  function Gn() {
    return { collectionId: "", sourceId: "", accessToken: void 0 };
  }
  a92.GetSourcePlaylistRequest = { encode(p2, b = c.default.Writer.create()) {
    return p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.sourceId !== "" && b.uint32(26).string(p2.sourceId), p2.accessToken !== void 0 && b.uint32(34).string(p2.accessToken), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Gn();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 3:
          U2.sourceId = T2.string();
          break;
        case 4:
          U2.accessToken = T2.string();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", sourceId: ce2(p2.sourceId) ? String(p2.sourceId) : "", accessToken: ce2(p2.accessToken) ? String(p2.accessToken) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.sourceId !== void 0 && (b.sourceId = p2.sourceId), p2.accessToken !== void 0 && (b.accessToken = p2.accessToken), b;
  }, fromPartial(p2) {
    var b, T2, K2;
    const U2 = Gn();
    return U2.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", U2.sourceId = (T2 = p2.sourceId) !== null && T2 !== void 0 ? T2 : "", U2.accessToken = (K2 = p2.accessToken) !== null && K2 !== void 0 ? K2 : void 0, U2;
  } };
  function Wn() {
    return { manifest: "" };
  }
  a92.GetSourcePlaylistResponse = { encode(p2, b = c.default.Writer.create()) {
    return p2.manifest !== "" && b.uint32(10).string(p2.manifest), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Wn();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.manifest = T2.string();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { manifest: ce2(p2.manifest) ? String(p2.manifest) : "" };
  }, toJSON(p2) {
    const b = {};
    return p2.manifest !== void 0 && (b.manifest = p2.manifest), b;
  }, fromPartial(p2) {
    var b;
    const T2 = Wn();
    return T2.manifest = (b = p2.manifest) !== null && b !== void 0 ? b : "", T2;
  } };
  function Hn() {
    return { serviceUserId: "", displayName: void 0, role: void 0, maxDuration: void 0 };
  }
  a92.CreateAccessTokenRequest = { encode(p2, b = c.default.Writer.create()) {
    return p2.serviceUserId !== "" && b.uint32(10).string(p2.serviceUserId), p2.displayName !== void 0 && b.uint32(34).string(p2.displayName), p2.role !== void 0 && b.uint32(16).int32(Oe2(p2.role)), p2.maxDuration !== void 0 && b.uint32(24).uint32(p2.maxDuration), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Hn();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.serviceUserId = T2.string();
          break;
        case 4:
          U2.displayName = T2.string();
          break;
        case 2:
          U2.role = je2(T2.int32());
          break;
        case 3:
          U2.maxDuration = T2.uint32();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { serviceUserId: ce2(p2.serviceUserId) ? String(p2.serviceUserId) : "", displayName: ce2(p2.displayName) ? String(p2.displayName) : void 0, role: ce2(p2.role) ? je2(p2.role) : void 0, maxDuration: ce2(p2.maxDuration) ? Number(p2.maxDuration) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.serviceUserId !== void 0 && (b.serviceUserId = p2.serviceUserId), p2.displayName !== void 0 && (b.displayName = p2.displayName), p2.role !== void 0 && (b.role = p2.role !== void 0 ? tt(p2.role) : void 0), p2.maxDuration !== void 0 && (b.maxDuration = Math.round(p2.maxDuration)), b;
  }, fromPartial(p2) {
    var b, T2, K2, U2;
    const te2 = Hn();
    return te2.serviceUserId = (b = p2.serviceUserId) !== null && b !== void 0 ? b : "", te2.displayName = (T2 = p2.displayName) !== null && T2 !== void 0 ? T2 : void 0, te2.role = (K2 = p2.role) !== null && K2 !== void 0 ? K2 : void 0, te2.maxDuration = (U2 = p2.maxDuration) !== null && U2 !== void 0 ? U2 : void 0, te2;
  } };
  function xn() {
    return { accessToken: "" };
  }
  a92.CreateAccessTokenResponse = { encode(p2, b = c.default.Writer.create()) {
    return p2.accessToken !== "" && b.uint32(10).string(p2.accessToken), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = xn();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.accessToken = T2.string();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { accessToken: ce2(p2.accessToken) ? String(p2.accessToken) : "" };
  }, toJSON(p2) {
    const b = {};
    return p2.accessToken !== void 0 && (b.accessToken = p2.accessToken), b;
  }, fromPartial(p2) {
    var b;
    const T2 = xn();
    return T2.accessToken = (b = p2.accessToken) !== null && b !== void 0 ? b : "", T2;
  } };
  function zn() {
    return { displayName: "", serviceUserId: void 0 };
  }
  a92.GuestAccessTokenDirect = { encode(p2, b = c.default.Writer.create()) {
    return p2.displayName !== "" && b.uint32(10).string(p2.displayName), p2.serviceUserId !== void 0 && b.uint32(18).string(p2.serviceUserId), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = zn();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.displayName = T2.string();
          break;
        case 2:
          U2.serviceUserId = T2.string();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { displayName: ce2(p2.displayName) ? String(p2.displayName) : "", serviceUserId: ce2(p2.serviceUserId) ? String(p2.serviceUserId) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.displayName !== void 0 && (b.displayName = p2.displayName), p2.serviceUserId !== void 0 && (b.serviceUserId = p2.serviceUserId), b;
  }, fromPartial(p2) {
    var b, T2;
    const K2 = zn();
    return K2.displayName = (b = p2.displayName) !== null && b !== void 0 ? b : "", K2.serviceUserId = (T2 = p2.serviceUserId) !== null && T2 !== void 0 ? T2 : void 0, K2;
  } };
  function Yn() {
    return { maxDuration: void 0 };
  }
  a92.GuestAccessTokenExchange = { encode(p2, b = c.default.Writer.create()) {
    return p2.maxDuration !== void 0 && b.uint32(8).uint32(p2.maxDuration), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Yn();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.maxDuration = T2.uint32();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { maxDuration: ce2(p2.maxDuration) ? Number(p2.maxDuration) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.maxDuration !== void 0 && (b.maxDuration = Math.round(p2.maxDuration)), b;
  }, fromPartial(p2) {
    var b;
    const T2 = Yn();
    return T2.maxDuration = (b = p2.maxDuration) !== null && b !== void 0 ? b : void 0, T2;
  } };
  function Kn() {
    return { direct: void 0, exchange: void 0 };
  }
  a92.GuestAccessToken = { encode(p2, b = c.default.Writer.create()) {
    return p2.direct !== void 0 && a92.GuestAccessTokenDirect.encode(p2.direct, b.uint32(10).fork()).ldelim(), p2.exchange !== void 0 && a92.GuestAccessTokenExchange.encode(p2.exchange, b.uint32(18).fork()).ldelim(), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Kn();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.direct = a92.GuestAccessTokenDirect.decode(T2, T2.uint32());
          break;
        case 2:
          U2.exchange = a92.GuestAccessTokenExchange.decode(T2, T2.uint32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { direct: ce2(p2.direct) ? a92.GuestAccessTokenDirect.fromJSON(p2.direct) : void 0, exchange: ce2(p2.exchange) ? a92.GuestAccessTokenExchange.fromJSON(p2.exchange) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.direct !== void 0 && (b.direct = p2.direct ? a92.GuestAccessTokenDirect.toJSON(p2.direct) : void 0), p2.exchange !== void 0 && (b.exchange = p2.exchange ? a92.GuestAccessTokenExchange.toJSON(p2.exchange) : void 0), b;
  }, fromPartial(p2) {
    const b = Kn();
    return b.direct = p2.direct !== void 0 && p2.direct !== null ? a92.GuestAccessTokenDirect.fromPartial(p2.direct) : void 0, b.exchange = p2.exchange !== void 0 && p2.exchange !== null ? a92.GuestAccessTokenExchange.fromPartial(p2.exchange) : void 0, b;
  } };
  function Qn() {
    return { collectionId: "", projectId: "", maxDuration: void 0, role: Ye2.ROLE_UNSPECIFIED, token: void 0, url: void 0 };
  }
  a92.CreateGuestAccessTokenRequest = { encode(p2, b = c.default.Writer.create()) {
    return p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.projectId !== "" && b.uint32(18).string(p2.projectId), p2.maxDuration !== void 0 && b.uint32(24).uint32(p2.maxDuration), p2.role !== Ye2.ROLE_UNSPECIFIED && b.uint32(32).int32(Oe2(p2.role)), p2.token !== void 0 && a92.GuestAccessToken.encode(p2.token, b.uint32(42).fork()).ldelim(), p2.url !== void 0 && b.uint32(50).string(p2.url), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Qn();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 2:
          U2.projectId = T2.string();
          break;
        case 3:
          U2.maxDuration = T2.uint32();
          break;
        case 4:
          U2.role = je2(T2.int32());
          break;
        case 5:
          U2.token = a92.GuestAccessToken.decode(T2, T2.uint32());
          break;
        case 6:
          U2.url = T2.string();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", projectId: ce2(p2.projectId) ? String(p2.projectId) : "", maxDuration: ce2(p2.maxDuration) ? Number(p2.maxDuration) : void 0, role: ce2(p2.role) ? je2(p2.role) : Ye2.ROLE_UNSPECIFIED, token: ce2(p2.token) ? a92.GuestAccessToken.fromJSON(p2.token) : void 0, url: ce2(p2.url) ? String(p2.url) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.projectId !== void 0 && (b.projectId = p2.projectId), p2.maxDuration !== void 0 && (b.maxDuration = Math.round(p2.maxDuration)), p2.role !== void 0 && (b.role = tt(p2.role)), p2.token !== void 0 && (b.token = p2.token ? a92.GuestAccessToken.toJSON(p2.token) : void 0), p2.url !== void 0 && (b.url = p2.url), b;
  }, fromPartial(p2) {
    var b, T2, K2, U2, te2;
    const We2 = Qn();
    return We2.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", We2.projectId = (T2 = p2.projectId) !== null && T2 !== void 0 ? T2 : "", We2.maxDuration = (K2 = p2.maxDuration) !== null && K2 !== void 0 ? K2 : void 0, We2.role = (U2 = p2.role) !== null && U2 !== void 0 ? U2 : Ye2.ROLE_UNSPECIFIED, We2.token = p2.token !== void 0 && p2.token !== null ? a92.GuestAccessToken.fromPartial(p2.token) : void 0, We2.url = (te2 = p2.url) !== null && te2 !== void 0 ? te2 : void 0, We2;
  } };
  function Zn() {
    return { accessToken: "", url: void 0 };
  }
  a92.CreateGuestAccessTokenResponse = { encode(p2, b = c.default.Writer.create()) {
    return p2.accessToken !== "" && b.uint32(10).string(p2.accessToken), p2.url !== void 0 && b.uint32(18).string(p2.url), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Zn();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.accessToken = T2.string();
          break;
        case 2:
          U2.url = T2.string();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { accessToken: ce2(p2.accessToken) ? String(p2.accessToken) : "", url: ce2(p2.url) ? String(p2.url) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.accessToken !== void 0 && (b.accessToken = p2.accessToken), p2.url !== void 0 && (b.url = p2.url), b;
  }, fromPartial(p2) {
    var b, T2;
    const K2 = Zn();
    return K2.accessToken = (b = p2.accessToken) !== null && b !== void 0 ? b : "", K2.url = (T2 = p2.url) !== null && T2 !== void 0 ? T2 : void 0, K2;
  } };
  function Xn() {
    return { collectionId: "", projectId: "", displayName: "" };
  }
  a92.CreateWebRtcAccessTokenRequest = { encode(p2, b = c.default.Writer.create()) {
    return p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.projectId !== "" && b.uint32(18).string(p2.projectId), p2.displayName !== "" && b.uint32(26).string(p2.displayName), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Xn();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 2:
          U2.projectId = T2.string();
          break;
        case 3:
          U2.displayName = T2.string();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", projectId: ce2(p2.projectId) ? String(p2.projectId) : "", displayName: ce2(p2.displayName) ? String(p2.displayName) : "" };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.projectId !== void 0 && (b.projectId = p2.projectId), p2.displayName !== void 0 && (b.displayName = p2.displayName), b;
  }, fromPartial(p2) {
    var b, T2, K2;
    const U2 = Xn();
    return U2.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", U2.projectId = (T2 = p2.projectId) !== null && T2 !== void 0 ? T2 : "", U2.displayName = (K2 = p2.displayName) !== null && K2 !== void 0 ? K2 : "", U2;
  } };
  function jn() {
    return { webrtcAccess: void 0 };
  }
  a92.CreateWebRtcAccessTokenResponse = { encode(p2, b = c.default.Writer.create()) {
    return p2.webrtcAccess !== void 0 && a92.WebRtcAccess.encode(p2.webrtcAccess, b.uint32(18).fork()).ldelim(), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = jn();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 2:
          U2.webrtcAccess = a92.WebRtcAccess.decode(T2, T2.uint32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { webrtcAccess: ce2(p2.webrtcAccess) ? a92.WebRtcAccess.fromJSON(p2.webrtcAccess) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.webrtcAccess !== void 0 && (b.webrtcAccess = p2.webrtcAccess ? a92.WebRtcAccess.toJSON(p2.webrtcAccess) : void 0), b;
  }, fromPartial(p2) {
    const b = jn();
    return b.webrtcAccess = p2.webrtcAccess !== void 0 && p2.webrtcAccess !== null ? a92.WebRtcAccess.fromPartial(p2.webrtcAccess) : void 0, b;
  } };
  function er() {
    return {};
  }
  a92.RefreshAccessTokenRequest = { encode(p2, b = c.default.Writer.create()) {
    return b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = er();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return {};
  }, toJSON(p2) {
    return {};
  }, fromPartial(p2) {
    return er();
  } };
  function tr() {
    return {};
  }
  a92.RefreshAccessTokenResponse = { encode(p2, b = c.default.Writer.create()) {
    return b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = tr();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return {};
  }, toJSON(p2) {
    return {};
  }, fromPartial(p2) {
    return tr();
  } };
  function nr() {
    return { collectionId: "", projectId: "", code: "", url: "", autoDelete: void 0 };
  }
  a92.GuestCode = { encode(p2, b = c.default.Writer.create()) {
    return p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.projectId !== "" && b.uint32(18).string(p2.projectId), p2.code !== "" && b.uint32(26).string(p2.code), p2.url !== "" && b.uint32(34).string(p2.url), p2.autoDelete !== void 0 && g2.Timestamp.encode(Ut(p2.autoDelete), b.uint32(42).fork()).ldelim(), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = nr();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 2:
          U2.projectId = T2.string();
          break;
        case 3:
          U2.code = T2.string();
          break;
        case 4:
          U2.url = T2.string();
          break;
        case 5:
          U2.autoDelete = $t(g2.Timestamp.decode(T2, T2.uint32()));
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", projectId: ce2(p2.projectId) ? String(p2.projectId) : "", code: ce2(p2.code) ? String(p2.code) : "", url: ce2(p2.url) ? String(p2.url) : "", autoDelete: ce2(p2.autoDelete) ? String(p2.autoDelete) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.projectId !== void 0 && (b.projectId = p2.projectId), p2.code !== void 0 && (b.code = p2.code), p2.url !== void 0 && (b.url = p2.url), p2.autoDelete !== void 0 && (b.autoDelete = p2.autoDelete), b;
  }, fromPartial(p2) {
    var b, T2, K2, U2, te2;
    const We2 = nr();
    return We2.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", We2.projectId = (T2 = p2.projectId) !== null && T2 !== void 0 ? T2 : "", We2.code = (K2 = p2.code) !== null && K2 !== void 0 ? K2 : "", We2.url = (U2 = p2.url) !== null && U2 !== void 0 ? U2 : "", We2.autoDelete = (te2 = p2.autoDelete) !== null && te2 !== void 0 ? te2 : void 0, We2;
  } };
  function rr() {
    return { serviceId: "", code: "" };
  }
  a92.GuestCodeRedirectRequest = { encode(p2, b = c.default.Writer.create()) {
    return p2.serviceId !== "" && b.uint32(10).string(p2.serviceId), p2.code !== "" && b.uint32(18).string(p2.code), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = rr();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.serviceId = T2.string();
          break;
        case 2:
          U2.code = T2.string();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { serviceId: ce2(p2.serviceId) ? String(p2.serviceId) : "", code: ce2(p2.code) ? String(p2.code) : "" };
  }, toJSON(p2) {
    const b = {};
    return p2.serviceId !== void 0 && (b.serviceId = p2.serviceId), p2.code !== void 0 && (b.code = p2.code), b;
  }, fromPartial(p2) {
    var b, T2;
    const K2 = rr();
    return K2.serviceId = (b = p2.serviceId) !== null && b !== void 0 ? b : "", K2.code = (T2 = p2.code) !== null && T2 !== void 0 ? T2 : "", K2;
  } };
  function ir() {
    return {};
  }
  a92.GuestCodeRedirectResponse = { encode(p2, b = c.default.Writer.create()) {
    return b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = ir();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return {};
  }, toJSON(p2) {
    return {};
  }, fromPartial(p2) {
    return ir();
  } };
  function ar() {
    return { alg: "", kty: "", use: "", kid: "", e: "", n: "" };
  }
  a92.JsonWebKey = { encode(p2, b = c.default.Writer.create()) {
    return p2.alg !== "" && b.uint32(10).string(p2.alg), p2.kty !== "" && b.uint32(18).string(p2.kty), p2.use !== "" && b.uint32(26).string(p2.use), p2.kid !== "" && b.uint32(34).string(p2.kid), p2.e !== "" && b.uint32(42).string(p2.e), p2.n !== "" && b.uint32(50).string(p2.n), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = ar();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.alg = T2.string();
          break;
        case 2:
          U2.kty = T2.string();
          break;
        case 3:
          U2.use = T2.string();
          break;
        case 4:
          U2.kid = T2.string();
          break;
        case 5:
          U2.e = T2.string();
          break;
        case 6:
          U2.n = T2.string();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { alg: ce2(p2.alg) ? String(p2.alg) : "", kty: ce2(p2.kty) ? String(p2.kty) : "", use: ce2(p2.use) ? String(p2.use) : "", kid: ce2(p2.kid) ? String(p2.kid) : "", e: ce2(p2.e) ? String(p2.e) : "", n: ce2(p2.n) ? String(p2.n) : "" };
  }, toJSON(p2) {
    const b = {};
    return p2.alg !== void 0 && (b.alg = p2.alg), p2.kty !== void 0 && (b.kty = p2.kty), p2.use !== void 0 && (b.use = p2.use), p2.kid !== void 0 && (b.kid = p2.kid), p2.e !== void 0 && (b.e = p2.e), p2.n !== void 0 && (b.n = p2.n), b;
  }, fromPartial(p2) {
    var b, T2, K2, U2, te2, We2;
    const et = ar();
    return et.alg = (b = p2.alg) !== null && b !== void 0 ? b : "", et.kty = (T2 = p2.kty) !== null && T2 !== void 0 ? T2 : "", et.use = (K2 = p2.use) !== null && K2 !== void 0 ? K2 : "", et.kid = (U2 = p2.kid) !== null && U2 !== void 0 ? U2 : "", et.e = (te2 = p2.e) !== null && te2 !== void 0 ? te2 : "", et.n = (We2 = p2.n) !== null && We2 !== void 0 ? We2 : "", et;
  } };
  function or() {
    return {};
  }
  a92.GetJsonWebKeySetRequest = { encode(p2, b = c.default.Writer.create()) {
    return b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = or();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return {};
  }, toJSON(p2) {
    return {};
  }, fromPartial(p2) {
    return or();
  } };
  function sr() {
    return { keys: [] };
  }
  a92.GetJsonWebKeySetResponse = { encode(p2, b = c.default.Writer.create()) {
    for (const T2 of p2.keys)
      a92.JsonWebKey.encode(T2, b.uint32(10).fork()).ldelim();
    return b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = sr();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.keys.push(a92.JsonWebKey.decode(T2, T2.uint32()));
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { keys: Array.isArray(p2 == null ? void 0 : p2.keys) ? p2.keys.map((b) => a92.JsonWebKey.fromJSON(b)) : [] };
  }, toJSON(p2) {
    const b = {};
    return p2.keys ? b.keys = p2.keys.map((T2) => T2 ? a92.JsonWebKey.toJSON(T2) : void 0) : b.keys = [], b;
  }, fromPartial(p2) {
    var b;
    const T2 = sr();
    return T2.keys = ((b = p2.keys) === null || b === void 0 ? void 0 : b.map((K2) => a92.JsonWebKey.fromPartial(K2))) || [], T2;
  } };
  function dr() {
    return {};
  }
  a92.GetTestTokenRequest = { encode(p2, b = c.default.Writer.create()) {
    return b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = dr();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return {};
  }, toJSON(p2) {
    return {};
  }, fromPartial(p2) {
    return dr();
  } };
  function ur() {
    return { accessToken: "" };
  }
  a92.GetTestTokenResponse = { encode(p2, b = c.default.Writer.create()) {
    return p2.accessToken !== "" && b.uint32(10).string(p2.accessToken), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = ur();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.accessToken = T2.string();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { accessToken: ce2(p2.accessToken) ? String(p2.accessToken) : "" };
  }, toJSON(p2) {
    const b = {};
    return p2.accessToken !== void 0 && (b.accessToken = p2.accessToken), b;
  }, fromPartial(p2) {
    var b;
    const T2 = ur();
    return T2.accessToken = (b = p2.accessToken) !== null && b !== void 0 ? b : "", T2;
  } };
  function cr() {
    return { collectionId: "", projectId: "", destinationId: "", destination: void 0 };
  }
  a92.DestinationCreateEvent = { encode(p2, b = c.default.Writer.create()) {
    return p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.projectId !== "" && b.uint32(18).string(p2.projectId), p2.destinationId !== "" && b.uint32(26).string(p2.destinationId), p2.destination !== void 0 && a92.Destination.encode(p2.destination, b.uint32(34).fork()).ldelim(), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = cr();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 2:
          U2.projectId = T2.string();
          break;
        case 3:
          U2.destinationId = T2.string();
          break;
        case 4:
          U2.destination = a92.Destination.decode(T2, T2.uint32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", projectId: ce2(p2.projectId) ? String(p2.projectId) : "", destinationId: ce2(p2.destinationId) ? String(p2.destinationId) : "", destination: ce2(p2.destination) ? a92.Destination.fromJSON(p2.destination) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.projectId !== void 0 && (b.projectId = p2.projectId), p2.destinationId !== void 0 && (b.destinationId = p2.destinationId), p2.destination !== void 0 && (b.destination = p2.destination ? a92.Destination.toJSON(p2.destination) : void 0), b;
  }, fromPartial(p2) {
    var b, T2, K2;
    const U2 = cr();
    return U2.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", U2.projectId = (T2 = p2.projectId) !== null && T2 !== void 0 ? T2 : "", U2.destinationId = (K2 = p2.destinationId) !== null && K2 !== void 0 ? K2 : "", U2.destination = p2.destination !== void 0 && p2.destination !== null ? a92.Destination.fromPartial(p2.destination) : void 0, U2;
  } };
  function lr() {
    return { collectionId: "", projectId: "", destinationId: "" };
  }
  a92.DestinationDeleteEvent = { encode(p2, b = c.default.Writer.create()) {
    return p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.projectId !== "" && b.uint32(18).string(p2.projectId), p2.destinationId !== "" && b.uint32(26).string(p2.destinationId), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = lr();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 2:
          U2.projectId = T2.string();
          break;
        case 3:
          U2.destinationId = T2.string();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", projectId: ce2(p2.projectId) ? String(p2.projectId) : "", destinationId: ce2(p2.destinationId) ? String(p2.destinationId) : "" };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.projectId !== void 0 && (b.projectId = p2.projectId), p2.destinationId !== void 0 && (b.destinationId = p2.destinationId), b;
  }, fromPartial(p2) {
    var b, T2, K2;
    const U2 = lr();
    return U2.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", U2.projectId = (T2 = p2.projectId) !== null && T2 !== void 0 ? T2 : "", U2.destinationId = (K2 = p2.destinationId) !== null && K2 !== void 0 ? K2 : "", U2;
  } };
  function fr() {
    return { collectionId: "", projectId: "", destinationId: "", updateMask: [], destination: void 0 };
  }
  a92.DestinationUpdateEvent = { encode(p2, b = c.default.Writer.create()) {
    p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.projectId !== "" && b.uint32(18).string(p2.projectId), p2.destinationId !== "" && b.uint32(26).string(p2.destinationId);
    for (const T2 of p2.updateMask)
      b.uint32(34).string(T2);
    return p2.destination !== void 0 && a92.Destination.encode(p2.destination, b.uint32(42).fork()).ldelim(), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = fr();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 2:
          U2.projectId = T2.string();
          break;
        case 3:
          U2.destinationId = T2.string();
          break;
        case 4:
          U2.updateMask.push(T2.string());
          break;
        case 5:
          U2.destination = a92.Destination.decode(T2, T2.uint32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", projectId: ce2(p2.projectId) ? String(p2.projectId) : "", destinationId: ce2(p2.destinationId) ? String(p2.destinationId) : "", updateMask: Array.isArray(p2 == null ? void 0 : p2.updateMask) ? p2.updateMask.map((b) => String(b)) : [], destination: ce2(p2.destination) ? a92.Destination.fromJSON(p2.destination) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.projectId !== void 0 && (b.projectId = p2.projectId), p2.destinationId !== void 0 && (b.destinationId = p2.destinationId), p2.updateMask ? b.updateMask = p2.updateMask.map((T2) => T2) : b.updateMask = [], p2.destination !== void 0 && (b.destination = p2.destination ? a92.Destination.toJSON(p2.destination) : void 0), b;
  }, fromPartial(p2) {
    var b, T2, K2, U2;
    const te2 = fr();
    return te2.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", te2.projectId = (T2 = p2.projectId) !== null && T2 !== void 0 ? T2 : "", te2.destinationId = (K2 = p2.destinationId) !== null && K2 !== void 0 ? K2 : "", te2.updateMask = ((U2 = p2.updateMask) === null || U2 === void 0 ? void 0 : U2.map((We2) => We2)) || [], te2.destination = p2.destination !== void 0 && p2.destination !== null ? a92.Destination.fromPartial(p2.destination) : void 0, te2;
  } };
  function pr() {
    return { collectionId: "", projectId: "", destinationId: "", connect: void 0 };
  }
  a92.DestinationStateEvent = { encode(p2, b = c.default.Writer.create()) {
    return p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.projectId !== "" && b.uint32(18).string(p2.projectId), p2.destinationId !== "" && b.uint32(26).string(p2.destinationId), p2.connect !== void 0 && b.uint32(32).int32(se2(p2.connect)), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = pr();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 2:
          U2.projectId = T2.string();
          break;
        case 3:
          U2.destinationId = T2.string();
          break;
        case 4:
          U2.connect = O2(T2.int32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", projectId: ce2(p2.projectId) ? String(p2.projectId) : "", destinationId: ce2(p2.destinationId) ? String(p2.destinationId) : "", connect: ce2(p2.connect) ? O2(p2.connect) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.projectId !== void 0 && (b.projectId = p2.projectId), p2.destinationId !== void 0 && (b.destinationId = p2.destinationId), p2.connect !== void 0 && (b.connect = p2.connect !== void 0 ? j(p2.connect) : void 0), b;
  }, fromPartial(p2) {
    var b, T2, K2, U2;
    const te2 = pr();
    return te2.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", te2.projectId = (T2 = p2.projectId) !== null && T2 !== void 0 ? T2 : "", te2.destinationId = (K2 = p2.destinationId) !== null && K2 !== void 0 ? K2 : "", te2.connect = (U2 = p2.connect) !== null && U2 !== void 0 ? U2 : void 0, te2;
  } };
  function hr() {
    return { collectionId: "", projectId: "", project: void 0 };
  }
  a92.ProjectCreateEvent = { encode(p2, b = c.default.Writer.create()) {
    return p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.projectId !== "" && b.uint32(18).string(p2.projectId), p2.project !== void 0 && a92.Project.encode(p2.project, b.uint32(26).fork()).ldelim(), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = hr();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 2:
          U2.projectId = T2.string();
          break;
        case 3:
          U2.project = a92.Project.decode(T2, T2.uint32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", projectId: ce2(p2.projectId) ? String(p2.projectId) : "", project: ce2(p2.project) ? a92.Project.fromJSON(p2.project) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.projectId !== void 0 && (b.projectId = p2.projectId), p2.project !== void 0 && (b.project = p2.project ? a92.Project.toJSON(p2.project) : void 0), b;
  }, fromPartial(p2) {
    var b, T2;
    const K2 = hr();
    return K2.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", K2.projectId = (T2 = p2.projectId) !== null && T2 !== void 0 ? T2 : "", K2.project = p2.project !== void 0 && p2.project !== null ? a92.Project.fromPartial(p2.project) : void 0, K2;
  } };
  function mr() {
    return { collectionId: "", projectId: "" };
  }
  a92.ProjectDeleteEvent = { encode(p2, b = c.default.Writer.create()) {
    return p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.projectId !== "" && b.uint32(18).string(p2.projectId), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = mr();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 2:
          U2.projectId = T2.string();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", projectId: ce2(p2.projectId) ? String(p2.projectId) : "" };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.projectId !== void 0 && (b.projectId = p2.projectId), b;
  }, fromPartial(p2) {
    var b, T2;
    const K2 = mr();
    return K2.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", K2.projectId = (T2 = p2.projectId) !== null && T2 !== void 0 ? T2 : "", K2;
  } };
  function vr() {
    return { collectionId: "", projectId: "", updateMask: [], project: void 0 };
  }
  a92.ProjectUpdateEvent = { encode(p2, b = c.default.Writer.create()) {
    p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.projectId !== "" && b.uint32(18).string(p2.projectId);
    for (const T2 of p2.updateMask)
      b.uint32(26).string(T2);
    return p2.project !== void 0 && a92.Project.encode(p2.project, b.uint32(34).fork()).ldelim(), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = vr();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 2:
          U2.projectId = T2.string();
          break;
        case 3:
          U2.updateMask.push(T2.string());
          break;
        case 4:
          U2.project = a92.Project.decode(T2, T2.uint32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", projectId: ce2(p2.projectId) ? String(p2.projectId) : "", updateMask: Array.isArray(p2 == null ? void 0 : p2.updateMask) ? p2.updateMask.map((b) => String(b)) : [], project: ce2(p2.project) ? a92.Project.fromJSON(p2.project) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.projectId !== void 0 && (b.projectId = p2.projectId), p2.updateMask ? b.updateMask = p2.updateMask.map((T2) => T2) : b.updateMask = [], p2.project !== void 0 && (b.project = p2.project ? a92.Project.toJSON(p2.project) : void 0), b;
  }, fromPartial(p2) {
    var b, T2, K2;
    const U2 = vr();
    return U2.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", U2.projectId = (T2 = p2.projectId) !== null && T2 !== void 0 ? T2 : "", U2.updateMask = ((K2 = p2.updateMask) === null || K2 === void 0 ? void 0 : K2.map((te2) => te2)) || [], U2.project = p2.project !== void 0 && p2.project !== null ? a92.Project.fromPartial(p2.project) : void 0, U2;
  } };
  function Sr() {
    return { collectionId: "", projectId: "", broadcastId: "", phase: void 0, error: void 0 };
  }
  a92.ProjectBroadcastStateEvent = { encode(p2, b = c.default.Writer.create()) {
    return p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.projectId !== "" && b.uint32(18).string(p2.projectId), p2.broadcastId !== "" && b.uint32(26).string(p2.broadcastId), p2.phase !== void 0 && b.uint32(32).int32(Ve2(p2.phase)), p2.error !== void 0 && b.uint32(40).int32(Ee2(p2.error)), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Sr();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 2:
          U2.projectId = T2.string();
          break;
        case 3:
          U2.broadcastId = T2.string();
          break;
        case 4:
          U2.phase = Ge2(T2.int32());
          break;
        case 5:
          U2.error = X2(T2.int32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", projectId: ce2(p2.projectId) ? String(p2.projectId) : "", broadcastId: ce2(p2.broadcastId) ? String(p2.broadcastId) : "", phase: ce2(p2.phase) ? Ge2(p2.phase) : void 0, error: ce2(p2.error) ? X2(p2.error) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.projectId !== void 0 && (b.projectId = p2.projectId), p2.broadcastId !== void 0 && (b.broadcastId = p2.broadcastId), p2.phase !== void 0 && (b.phase = p2.phase !== void 0 ? He2(p2.phase) : void 0), p2.error !== void 0 && (b.error = p2.error !== void 0 ? ie2(p2.error) : void 0), b;
  }, fromPartial(p2) {
    var b, T2, K2, U2, te2;
    const We2 = Sr();
    return We2.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", We2.projectId = (T2 = p2.projectId) !== null && T2 !== void 0 ? T2 : "", We2.broadcastId = (K2 = p2.broadcastId) !== null && K2 !== void 0 ? K2 : "", We2.phase = (U2 = p2.phase) !== null && U2 !== void 0 ? U2 : void 0, We2.error = (te2 = p2.error) !== null && te2 !== void 0 ? te2 : void 0, We2;
  } };
  function yr() {
    return { collectionId: "", collection: void 0 };
  }
  a92.CollectionCreateEvent = { encode(p2, b = c.default.Writer.create()) {
    return p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.collection !== void 0 && a92.Collection.encode(p2.collection, b.uint32(18).fork()).ldelim(), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = yr();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 2:
          U2.collection = a92.Collection.decode(T2, T2.uint32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", collection: ce2(p2.collection) ? a92.Collection.fromJSON(p2.collection) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.collection !== void 0 && (b.collection = p2.collection ? a92.Collection.toJSON(p2.collection) : void 0), b;
  }, fromPartial(p2) {
    var b;
    const T2 = yr();
    return T2.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", T2.collection = p2.collection !== void 0 && p2.collection !== null ? a92.Collection.fromPartial(p2.collection) : void 0, T2;
  } };
  function gr() {
    return { collectionId: "" };
  }
  a92.CollectionDeleteEvent = { encode(p2, b = c.default.Writer.create()) {
    return p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = gr();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "" };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), b;
  }, fromPartial(p2) {
    var b;
    const T2 = gr();
    return T2.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", T2;
  } };
  function br() {
    return { collectionId: "", updateMask: [], collection: void 0 };
  }
  a92.CollectionUpdateEvent = { encode(p2, b = c.default.Writer.create()) {
    p2.collectionId !== "" && b.uint32(10).string(p2.collectionId);
    for (const T2 of p2.updateMask)
      b.uint32(18).string(T2);
    return p2.collection !== void 0 && a92.Collection.encode(p2.collection, b.uint32(26).fork()).ldelim(), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = br();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 2:
          U2.updateMask.push(T2.string());
          break;
        case 3:
          U2.collection = a92.Collection.decode(T2, T2.uint32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", updateMask: Array.isArray(p2 == null ? void 0 : p2.updateMask) ? p2.updateMask.map((b) => String(b)) : [], collection: ce2(p2.collection) ? a92.Collection.fromJSON(p2.collection) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.updateMask ? b.updateMask = p2.updateMask.map((T2) => T2) : b.updateMask = [], p2.collection !== void 0 && (b.collection = p2.collection ? a92.Collection.toJSON(p2.collection) : void 0), b;
  }, fromPartial(p2) {
    var b, T2;
    const K2 = br();
    return K2.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", K2.updateMask = ((T2 = p2.updateMask) === null || T2 === void 0 ? void 0 : T2.map((U2) => U2)) || [], K2.collection = p2.collection !== void 0 && p2.collection !== null ? a92.Collection.fromPartial(p2.collection) : void 0, K2;
  } };
  function Er() {
    return { collectionId: "", sourceId: "", source: void 0 };
  }
  a92.SourceCreateEvent = { encode(p2, b = c.default.Writer.create()) {
    return p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.sourceId !== "" && b.uint32(18).string(p2.sourceId), p2.source !== void 0 && a92.Source.encode(p2.source, b.uint32(26).fork()).ldelim(), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Er();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 2:
          U2.sourceId = T2.string();
          break;
        case 3:
          U2.source = a92.Source.decode(T2, T2.uint32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", sourceId: ce2(p2.sourceId) ? String(p2.sourceId) : "", source: ce2(p2.source) ? a92.Source.fromJSON(p2.source) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.sourceId !== void 0 && (b.sourceId = p2.sourceId), p2.source !== void 0 && (b.source = p2.source ? a92.Source.toJSON(p2.source) : void 0), b;
  }, fromPartial(p2) {
    var b, T2;
    const K2 = Er();
    return K2.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", K2.sourceId = (T2 = p2.sourceId) !== null && T2 !== void 0 ? T2 : "", K2.source = p2.source !== void 0 && p2.source !== null ? a92.Source.fromPartial(p2.source) : void 0, K2;
  } };
  function Tr() {
    return { collectionId: "", sourceId: "" };
  }
  a92.SourceDeleteEvent = { encode(p2, b = c.default.Writer.create()) {
    return p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.sourceId !== "" && b.uint32(18).string(p2.sourceId), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Tr();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 2:
          U2.sourceId = T2.string();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", sourceId: ce2(p2.sourceId) ? String(p2.sourceId) : "" };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.sourceId !== void 0 && (b.sourceId = p2.sourceId), b;
  }, fromPartial(p2) {
    var b, T2;
    const K2 = Tr();
    return K2.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", K2.sourceId = (T2 = p2.sourceId) !== null && T2 !== void 0 ? T2 : "", K2;
  } };
  function _r() {
    return { collectionId: "", sourceId: "", updateMask: [], source: void 0 };
  }
  a92.SourceUpdateEvent = { encode(p2, b = c.default.Writer.create()) {
    p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.sourceId !== "" && b.uint32(18).string(p2.sourceId);
    for (const T2 of p2.updateMask)
      b.uint32(26).string(T2);
    return p2.source !== void 0 && a92.Source.encode(p2.source, b.uint32(34).fork()).ldelim(), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = _r();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 2:
          U2.sourceId = T2.string();
          break;
        case 3:
          U2.updateMask.push(T2.string());
          break;
        case 4:
          U2.source = a92.Source.decode(T2, T2.uint32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", sourceId: ce2(p2.sourceId) ? String(p2.sourceId) : "", updateMask: Array.isArray(p2 == null ? void 0 : p2.updateMask) ? p2.updateMask.map((b) => String(b)) : [], source: ce2(p2.source) ? a92.Source.fromJSON(p2.source) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.sourceId !== void 0 && (b.sourceId = p2.sourceId), p2.updateMask ? b.updateMask = p2.updateMask.map((T2) => T2) : b.updateMask = [], p2.source !== void 0 && (b.source = p2.source ? a92.Source.toJSON(p2.source) : void 0), b;
  }, fromPartial(p2) {
    var b, T2, K2;
    const U2 = _r();
    return U2.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", U2.sourceId = (T2 = p2.sourceId) !== null && T2 !== void 0 ? T2 : "", U2.updateMask = ((K2 = p2.updateMask) === null || K2 === void 0 ? void 0 : K2.map((te2) => te2)) || [], U2.source = p2.source !== void 0 && p2.source !== null ? a92.Source.fromPartial(p2.source) : void 0, U2;
  } };
  function Ir() {
    return { collectionId: "", sourceId: "", projectId: "", source: void 0 };
  }
  a92.SourceAddEvent = { encode(p2, b = c.default.Writer.create()) {
    return p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.sourceId !== "" && b.uint32(18).string(p2.sourceId), p2.projectId !== "" && b.uint32(26).string(p2.projectId), p2.source !== void 0 && a92.Source.encode(p2.source, b.uint32(34).fork()).ldelim(), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Ir();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 2:
          U2.sourceId = T2.string();
          break;
        case 3:
          U2.projectId = T2.string();
          break;
        case 4:
          U2.source = a92.Source.decode(T2, T2.uint32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", sourceId: ce2(p2.sourceId) ? String(p2.sourceId) : "", projectId: ce2(p2.projectId) ? String(p2.projectId) : "", source: ce2(p2.source) ? a92.Source.fromJSON(p2.source) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.sourceId !== void 0 && (b.sourceId = p2.sourceId), p2.projectId !== void 0 && (b.projectId = p2.projectId), p2.source !== void 0 && (b.source = p2.source ? a92.Source.toJSON(p2.source) : void 0), b;
  }, fromPartial(p2) {
    var b, T2, K2;
    const U2 = Ir();
    return U2.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", U2.sourceId = (T2 = p2.sourceId) !== null && T2 !== void 0 ? T2 : "", U2.projectId = (K2 = p2.projectId) !== null && K2 !== void 0 ? K2 : "", U2.source = p2.source !== void 0 && p2.source !== null ? a92.Source.fromPartial(p2.source) : void 0, U2;
  } };
  function kr() {
    return { collectionId: "", sourceId: "", projectId: "" };
  }
  a92.SourceRemoveEvent = { encode(p2, b = c.default.Writer.create()) {
    return p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.sourceId !== "" && b.uint32(18).string(p2.sourceId), p2.projectId !== "" && b.uint32(26).string(p2.projectId), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = kr();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 2:
          U2.sourceId = T2.string();
          break;
        case 3:
          U2.projectId = T2.string();
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", sourceId: ce2(p2.sourceId) ? String(p2.sourceId) : "", projectId: ce2(p2.projectId) ? String(p2.projectId) : "" };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.sourceId !== void 0 && (b.sourceId = p2.sourceId), p2.projectId !== void 0 && (b.projectId = p2.projectId), b;
  }, fromPartial(p2) {
    var b, T2, K2;
    const U2 = kr();
    return U2.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", U2.sourceId = (T2 = p2.sourceId) !== null && T2 !== void 0 ? T2 : "", U2.projectId = (K2 = p2.projectId) !== null && K2 !== void 0 ? K2 : "", U2;
  } };
  function Cr() {
    return { collectionId: "", projectId: "", sourceId: "", connect: void 0 };
  }
  a92.SourceStateEvent = { encode(p2, b = c.default.Writer.create()) {
    return p2.collectionId !== "" && b.uint32(10).string(p2.collectionId), p2.projectId !== "" && b.uint32(18).string(p2.projectId), p2.sourceId !== "" && b.uint32(26).string(p2.sourceId), p2.connect !== void 0 && b.uint32(32).int32(se2(p2.connect)), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Cr();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collectionId = T2.string();
          break;
        case 2:
          U2.projectId = T2.string();
          break;
        case 3:
          U2.sourceId = T2.string();
          break;
        case 4:
          U2.connect = O2(T2.int32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collectionId: ce2(p2.collectionId) ? String(p2.collectionId) : "", projectId: ce2(p2.projectId) ? String(p2.projectId) : "", sourceId: ce2(p2.sourceId) ? String(p2.sourceId) : "", connect: ce2(p2.connect) ? O2(p2.connect) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.collectionId !== void 0 && (b.collectionId = p2.collectionId), p2.projectId !== void 0 && (b.projectId = p2.projectId), p2.sourceId !== void 0 && (b.sourceId = p2.sourceId), p2.connect !== void 0 && (b.connect = p2.connect !== void 0 ? j(p2.connect) : void 0), b;
  }, fromPartial(p2) {
    var b, T2, K2, U2;
    const te2 = Cr();
    return te2.collectionId = (b = p2.collectionId) !== null && b !== void 0 ? b : "", te2.projectId = (T2 = p2.projectId) !== null && T2 !== void 0 ? T2 : "", te2.sourceId = (K2 = p2.sourceId) !== null && K2 !== void 0 ? K2 : "", te2.connect = (U2 = p2.connect) !== null && U2 !== void 0 ? U2 : void 0, te2;
  } };
  function Rr() {
    return { create: void 0, update: void 0, delete: void 0 };
  }
  a92.CollectionEvent = { encode(p2, b = c.default.Writer.create()) {
    return p2.create !== void 0 && a92.CollectionCreateEvent.encode(p2.create, b.uint32(10).fork()).ldelim(), p2.update !== void 0 && a92.CollectionUpdateEvent.encode(p2.update, b.uint32(18).fork()).ldelim(), p2.delete !== void 0 && a92.CollectionDeleteEvent.encode(p2.delete, b.uint32(26).fork()).ldelim(), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Rr();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.create = a92.CollectionCreateEvent.decode(T2, T2.uint32());
          break;
        case 2:
          U2.update = a92.CollectionUpdateEvent.decode(T2, T2.uint32());
          break;
        case 3:
          U2.delete = a92.CollectionDeleteEvent.decode(T2, T2.uint32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { create: ce2(p2.create) ? a92.CollectionCreateEvent.fromJSON(p2.create) : void 0, update: ce2(p2.update) ? a92.CollectionUpdateEvent.fromJSON(p2.update) : void 0, delete: ce2(p2.delete) ? a92.CollectionDeleteEvent.fromJSON(p2.delete) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.create !== void 0 && (b.create = p2.create ? a92.CollectionCreateEvent.toJSON(p2.create) : void 0), p2.update !== void 0 && (b.update = p2.update ? a92.CollectionUpdateEvent.toJSON(p2.update) : void 0), p2.delete !== void 0 && (b.delete = p2.delete ? a92.CollectionDeleteEvent.toJSON(p2.delete) : void 0), b;
  }, fromPartial(p2) {
    const b = Rr();
    return b.create = p2.create !== void 0 && p2.create !== null ? a92.CollectionCreateEvent.fromPartial(p2.create) : void 0, b.update = p2.update !== void 0 && p2.update !== null ? a92.CollectionUpdateEvent.fromPartial(p2.update) : void 0, b.delete = p2.delete !== void 0 && p2.delete !== null ? a92.CollectionDeleteEvent.fromPartial(p2.delete) : void 0, b;
  } };
  function Pr() {
    return { create: void 0, update: void 0, delete: void 0, state: void 0 };
  }
  a92.DestinationEvent = { encode(p2, b = c.default.Writer.create()) {
    return p2.create !== void 0 && a92.DestinationCreateEvent.encode(p2.create, b.uint32(10).fork()).ldelim(), p2.update !== void 0 && a92.DestinationUpdateEvent.encode(p2.update, b.uint32(18).fork()).ldelim(), p2.delete !== void 0 && a92.DestinationDeleteEvent.encode(p2.delete, b.uint32(26).fork()).ldelim(), p2.state !== void 0 && a92.DestinationStateEvent.encode(p2.state, b.uint32(34).fork()).ldelim(), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Pr();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.create = a92.DestinationCreateEvent.decode(T2, T2.uint32());
          break;
        case 2:
          U2.update = a92.DestinationUpdateEvent.decode(T2, T2.uint32());
          break;
        case 3:
          U2.delete = a92.DestinationDeleteEvent.decode(T2, T2.uint32());
          break;
        case 4:
          U2.state = a92.DestinationStateEvent.decode(T2, T2.uint32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { create: ce2(p2.create) ? a92.DestinationCreateEvent.fromJSON(p2.create) : void 0, update: ce2(p2.update) ? a92.DestinationUpdateEvent.fromJSON(p2.update) : void 0, delete: ce2(p2.delete) ? a92.DestinationDeleteEvent.fromJSON(p2.delete) : void 0, state: ce2(p2.state) ? a92.DestinationStateEvent.fromJSON(p2.state) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.create !== void 0 && (b.create = p2.create ? a92.DestinationCreateEvent.toJSON(p2.create) : void 0), p2.update !== void 0 && (b.update = p2.update ? a92.DestinationUpdateEvent.toJSON(p2.update) : void 0), p2.delete !== void 0 && (b.delete = p2.delete ? a92.DestinationDeleteEvent.toJSON(p2.delete) : void 0), p2.state !== void 0 && (b.state = p2.state ? a92.DestinationStateEvent.toJSON(p2.state) : void 0), b;
  }, fromPartial(p2) {
    const b = Pr();
    return b.create = p2.create !== void 0 && p2.create !== null ? a92.DestinationCreateEvent.fromPartial(p2.create) : void 0, b.update = p2.update !== void 0 && p2.update !== null ? a92.DestinationUpdateEvent.fromPartial(p2.update) : void 0, b.delete = p2.delete !== void 0 && p2.delete !== null ? a92.DestinationDeleteEvent.fromPartial(p2.delete) : void 0, b.state = p2.state !== void 0 && p2.state !== null ? a92.DestinationStateEvent.fromPartial(p2.state) : void 0, b;
  } };
  function Or() {
    return { create: void 0, update: void 0, delete: void 0, state: void 0 };
  }
  a92.ProjectEvent = { encode(p2, b = c.default.Writer.create()) {
    return p2.create !== void 0 && a92.ProjectCreateEvent.encode(p2.create, b.uint32(10).fork()).ldelim(), p2.update !== void 0 && a92.ProjectUpdateEvent.encode(p2.update, b.uint32(18).fork()).ldelim(), p2.delete !== void 0 && a92.ProjectDeleteEvent.encode(p2.delete, b.uint32(26).fork()).ldelim(), p2.state !== void 0 && a92.ProjectBroadcastStateEvent.encode(p2.state, b.uint32(34).fork()).ldelim(), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Or();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.create = a92.ProjectCreateEvent.decode(T2, T2.uint32());
          break;
        case 2:
          U2.update = a92.ProjectUpdateEvent.decode(T2, T2.uint32());
          break;
        case 3:
          U2.delete = a92.ProjectDeleteEvent.decode(T2, T2.uint32());
          break;
        case 4:
          U2.state = a92.ProjectBroadcastStateEvent.decode(T2, T2.uint32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { create: ce2(p2.create) ? a92.ProjectCreateEvent.fromJSON(p2.create) : void 0, update: ce2(p2.update) ? a92.ProjectUpdateEvent.fromJSON(p2.update) : void 0, delete: ce2(p2.delete) ? a92.ProjectDeleteEvent.fromJSON(p2.delete) : void 0, state: ce2(p2.state) ? a92.ProjectBroadcastStateEvent.fromJSON(p2.state) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.create !== void 0 && (b.create = p2.create ? a92.ProjectCreateEvent.toJSON(p2.create) : void 0), p2.update !== void 0 && (b.update = p2.update ? a92.ProjectUpdateEvent.toJSON(p2.update) : void 0), p2.delete !== void 0 && (b.delete = p2.delete ? a92.ProjectDeleteEvent.toJSON(p2.delete) : void 0), p2.state !== void 0 && (b.state = p2.state ? a92.ProjectBroadcastStateEvent.toJSON(p2.state) : void 0), b;
  }, fromPartial(p2) {
    const b = Or();
    return b.create = p2.create !== void 0 && p2.create !== null ? a92.ProjectCreateEvent.fromPartial(p2.create) : void 0, b.update = p2.update !== void 0 && p2.update !== null ? a92.ProjectUpdateEvent.fromPartial(p2.update) : void 0, b.delete = p2.delete !== void 0 && p2.delete !== null ? a92.ProjectDeleteEvent.fromPartial(p2.delete) : void 0, b.state = p2.state !== void 0 && p2.state !== null ? a92.ProjectBroadcastStateEvent.fromPartial(p2.state) : void 0, b;
  } };
  function Nr() {
    return { create: void 0, update: void 0, delete: void 0, add: void 0, remove: void 0, state: void 0 };
  }
  a92.SourceEvent = { encode(p2, b = c.default.Writer.create()) {
    return p2.create !== void 0 && a92.SourceCreateEvent.encode(p2.create, b.uint32(10).fork()).ldelim(), p2.update !== void 0 && a92.SourceUpdateEvent.encode(p2.update, b.uint32(18).fork()).ldelim(), p2.delete !== void 0 && a92.SourceDeleteEvent.encode(p2.delete, b.uint32(26).fork()).ldelim(), p2.add !== void 0 && a92.SourceAddEvent.encode(p2.add, b.uint32(34).fork()).ldelim(), p2.remove !== void 0 && a92.SourceRemoveEvent.encode(p2.remove, b.uint32(42).fork()).ldelim(), p2.state !== void 0 && a92.SourceStateEvent.encode(p2.state, b.uint32(50).fork()).ldelim(), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = Nr();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.create = a92.SourceCreateEvent.decode(T2, T2.uint32());
          break;
        case 2:
          U2.update = a92.SourceUpdateEvent.decode(T2, T2.uint32());
          break;
        case 3:
          U2.delete = a92.SourceDeleteEvent.decode(T2, T2.uint32());
          break;
        case 4:
          U2.add = a92.SourceAddEvent.decode(T2, T2.uint32());
          break;
        case 5:
          U2.remove = a92.SourceRemoveEvent.decode(T2, T2.uint32());
          break;
        case 6:
          U2.state = a92.SourceStateEvent.decode(T2, T2.uint32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { create: ce2(p2.create) ? a92.SourceCreateEvent.fromJSON(p2.create) : void 0, update: ce2(p2.update) ? a92.SourceUpdateEvent.fromJSON(p2.update) : void 0, delete: ce2(p2.delete) ? a92.SourceDeleteEvent.fromJSON(p2.delete) : void 0, add: ce2(p2.add) ? a92.SourceAddEvent.fromJSON(p2.add) : void 0, remove: ce2(p2.remove) ? a92.SourceRemoveEvent.fromJSON(p2.remove) : void 0, state: ce2(p2.state) ? a92.SourceStateEvent.fromJSON(p2.state) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.create !== void 0 && (b.create = p2.create ? a92.SourceCreateEvent.toJSON(p2.create) : void 0), p2.update !== void 0 && (b.update = p2.update ? a92.SourceUpdateEvent.toJSON(p2.update) : void 0), p2.delete !== void 0 && (b.delete = p2.delete ? a92.SourceDeleteEvent.toJSON(p2.delete) : void 0), p2.add !== void 0 && (b.add = p2.add ? a92.SourceAddEvent.toJSON(p2.add) : void 0), p2.remove !== void 0 && (b.remove = p2.remove ? a92.SourceRemoveEvent.toJSON(p2.remove) : void 0), p2.state !== void 0 && (b.state = p2.state ? a92.SourceStateEvent.toJSON(p2.state) : void 0), b;
  }, fromPartial(p2) {
    const b = Nr();
    return b.create = p2.create !== void 0 && p2.create !== null ? a92.SourceCreateEvent.fromPartial(p2.create) : void 0, b.update = p2.update !== void 0 && p2.update !== null ? a92.SourceUpdateEvent.fromPartial(p2.update) : void 0, b.delete = p2.delete !== void 0 && p2.delete !== null ? a92.SourceDeleteEvent.fromPartial(p2.delete) : void 0, b.add = p2.add !== void 0 && p2.add !== null ? a92.SourceAddEvent.fromPartial(p2.add) : void 0, b.remove = p2.remove !== void 0 && p2.remove !== null ? a92.SourceRemoveEvent.fromPartial(p2.remove) : void 0, b.state = p2.state !== void 0 && p2.state !== null ? a92.SourceStateEvent.fromPartial(p2.state) : void 0, b;
  } };
  function wr() {
    return { collection: void 0, destination: void 0, project: void 0, source: void 0, unspecified: void 0 };
  }
  a92.LiveEvent = { encode(p2, b = c.default.Writer.create()) {
    return p2.collection !== void 0 && a92.CollectionEvent.encode(p2.collection, b.uint32(10).fork()).ldelim(), p2.destination !== void 0 && a92.DestinationEvent.encode(p2.destination, b.uint32(18).fork()).ldelim(), p2.project !== void 0 && a92.ProjectEvent.encode(p2.project, b.uint32(26).fork()).ldelim(), p2.source !== void 0 && a92.SourceEvent.encode(p2.source, b.uint32(34).fork()).ldelim(), p2.unspecified !== void 0 && b.uint32(40).int32((0, S2.nullValueToNumber)(p2.unspecified)), b;
  }, decode(p2, b) {
    const T2 = p2 instanceof c.default.Reader ? p2 : new c.default.Reader(p2);
    let K2 = b === void 0 ? T2.len : T2.pos + b;
    const U2 = wr();
    for (; T2.pos < K2; ) {
      const te2 = T2.uint32();
      switch (te2 >>> 3) {
        case 1:
          U2.collection = a92.CollectionEvent.decode(T2, T2.uint32());
          break;
        case 2:
          U2.destination = a92.DestinationEvent.decode(T2, T2.uint32());
          break;
        case 3:
          U2.project = a92.ProjectEvent.decode(T2, T2.uint32());
          break;
        case 4:
          U2.source = a92.SourceEvent.decode(T2, T2.uint32());
          break;
        case 5:
          U2.unspecified = (0, S2.nullValueFromJSON)(T2.int32());
          break;
        default:
          T2.skipType(te2 & 7);
          break;
      }
    }
    return U2;
  }, fromJSON(p2) {
    return { collection: ce2(p2.collection) ? a92.CollectionEvent.fromJSON(p2.collection) : void 0, destination: ce2(p2.destination) ? a92.DestinationEvent.fromJSON(p2.destination) : void 0, project: ce2(p2.project) ? a92.ProjectEvent.fromJSON(p2.project) : void 0, source: ce2(p2.source) ? a92.SourceEvent.fromJSON(p2.source) : void 0, unspecified: ce2(p2.unspecified) ? (0, S2.nullValueFromJSON)(p2.unspecified) : void 0 };
  }, toJSON(p2) {
    const b = {};
    return p2.collection !== void 0 && (b.collection = p2.collection ? a92.CollectionEvent.toJSON(p2.collection) : void 0), p2.destination !== void 0 && (b.destination = p2.destination ? a92.DestinationEvent.toJSON(p2.destination) : void 0), p2.project !== void 0 && (b.project = p2.project ? a92.ProjectEvent.toJSON(p2.project) : void 0), p2.source !== void 0 && (b.source = p2.source ? a92.SourceEvent.toJSON(p2.source) : void 0), p2.unspecified !== void 0 && (b.unspecified = p2.unspecified !== void 0 ? (0, S2.nullValueToJSON)(p2.unspecified) : void 0), b;
  }, fromPartial(p2) {
    var b;
    const T2 = wr();
    return T2.collection = p2.collection !== void 0 && p2.collection !== null ? a92.CollectionEvent.fromPartial(p2.collection) : void 0, T2.destination = p2.destination !== void 0 && p2.destination !== null ? a92.DestinationEvent.fromPartial(p2.destination) : void 0, T2.project = p2.project !== void 0 && p2.project !== null ? a92.ProjectEvent.fromPartial(p2.project) : void 0, T2.source = p2.source !== void 0 && p2.source !== null ? a92.SourceEvent.fromPartial(p2.source) : void 0, T2.unspecified = (b = p2.unspecified) !== null && b !== void 0 ? b : void 0, T2;
  } };
  class Dr {
    constructor(b, T2) {
      this.service = (T2 == null ? void 0 : T2.service) || "live.v21.CollectionService", this.rpc = b, this.CreateCollection = this.CreateCollection.bind(this), this.GetCollection = this.GetCollection.bind(this), this.GetCollections = this.GetCollections.bind(this), this.UpdateCollection = this.UpdateCollection.bind(this), this.DeleteCollection = this.DeleteCollection.bind(this);
    }
    CreateCollection(b) {
      const T2 = a92.CreateCollectionRequest.encode(b).finish();
      return this.rpc.request(this.service, "CreateCollection", T2).then((U2) => a92.CreateCollectionResponse.decode(new c.default.Reader(U2)));
    }
    GetCollection(b) {
      const T2 = a92.GetCollectionRequest.encode(b).finish();
      return this.rpc.request(this.service, "GetCollection", T2).then((U2) => a92.GetCollectionResponse.decode(new c.default.Reader(U2)));
    }
    GetCollections(b) {
      const T2 = a92.GetCollectionsRequest.encode(b).finish();
      return this.rpc.request(this.service, "GetCollections", T2).then((U2) => a92.GetCollectionsResponse.decode(new c.default.Reader(U2)));
    }
    UpdateCollection(b) {
      const T2 = a92.UpdateCollectionRequest.encode(b).finish();
      return this.rpc.request(this.service, "UpdateCollection", T2).then((U2) => a92.UpdateCollectionResponse.decode(new c.default.Reader(U2)));
    }
    DeleteCollection(b) {
      const T2 = a92.DeleteCollectionRequest.encode(b).finish();
      return this.rpc.request(this.service, "DeleteCollection", T2).then((U2) => a92.DeleteCollectionResponse.decode(new c.default.Reader(U2)));
    }
  }
  a92.CollectionServiceClientImpl = Dr, a92.CollectionServiceDefinition = { name: "CollectionService", fullName: "live.v21.CollectionService", methods: {
    /**
    * Create Collection
    *
    * Create a new collection of related projects and collection live sources
    */
    createCollection: { name: "CreateCollection", requestType: a92.CreateCollectionRequest, requestStream: false, responseType: a92.CreateCollectionResponse, responseStream: false, options: {} },
    /**
    * Get Collection
    *
    * Get an existing collection of related projects and collection live
    * sources
    */
    getCollection: { name: "GetCollection", requestType: a92.GetCollectionRequest, requestStream: false, responseType: a92.GetCollectionResponse, responseStream: false, options: {} },
    /**
    * Get Collections
    *
    * Get all collections owned by the user
    */
    getCollections: { name: "GetCollections", requestType: a92.GetCollectionsRequest, requestStream: false, responseType: a92.GetCollectionsResponse, responseStream: false, options: {} },
    /**
    * Update Collection
    *
    * Update select collection document data
    */
    updateCollection: { name: "UpdateCollection", requestType: a92.UpdateCollectionRequest, requestStream: false, responseType: a92.UpdateCollectionResponse, responseStream: false, options: {} },
    /**
    * Delete Collection
    *
    * Delete a collection of related projects and collection live sources
    */
    deleteCollection: { name: "DeleteCollection", requestType: a92.DeleteCollectionRequest, requestStream: false, responseType: a92.DeleteCollectionResponse, responseStream: false, options: {} }
  } };
  class Lr {
    constructor(b, T2) {
      this.service = (T2 == null ? void 0 : T2.service) || "live.v21.ProjectService", this.rpc = b, this.CreateProject = this.CreateProject.bind(this), this.GetProject = this.GetProject.bind(this), this.DeleteProject = this.DeleteProject.bind(this), this.UpdateProject = this.UpdateProject.bind(this), this.StartProjectBroadcast = this.StartProjectBroadcast.bind(this), this.StopProjectBroadcast = this.StopProjectBroadcast.bind(this), this.StartProjectWebRtc = this.StartProjectWebRtc.bind(this), this.StopProjectWebRtc = this.StopProjectWebRtc.bind(this), this.GetProjectBroadcastSnapshot = this.GetProjectBroadcastSnapshot.bind(this), this.GetProjectBroadcastStatus = this.GetProjectBroadcastStatus.bind(this);
    }
    CreateProject(b) {
      const T2 = a92.CreateProjectRequest.encode(b).finish();
      return this.rpc.request(this.service, "CreateProject", T2).then((U2) => a92.CreateProjectResponse.decode(new c.default.Reader(U2)));
    }
    GetProject(b) {
      const T2 = a92.GetProjectRequest.encode(b).finish();
      return this.rpc.request(this.service, "GetProject", T2).then((U2) => a92.GetProjectResponse.decode(new c.default.Reader(U2)));
    }
    DeleteProject(b) {
      const T2 = a92.DeleteProjectRequest.encode(b).finish();
      return this.rpc.request(this.service, "DeleteProject", T2).then((U2) => a92.DeleteProjectResponse.decode(new c.default.Reader(U2)));
    }
    UpdateProject(b) {
      const T2 = a92.UpdateProjectRequest.encode(b).finish();
      return this.rpc.request(this.service, "UpdateProject", T2).then((U2) => a92.UpdateProjectResponse.decode(new c.default.Reader(U2)));
    }
    StartProjectBroadcast(b) {
      const T2 = a92.StartProjectBroadcastRequest.encode(b).finish();
      return this.rpc.request(this.service, "StartProjectBroadcast", T2).then((U2) => a92.StartProjectBroadcastResponse.decode(new c.default.Reader(U2)));
    }
    StopProjectBroadcast(b) {
      const T2 = a92.StopProjectBroadcastRequest.encode(b).finish();
      return this.rpc.request(this.service, "StopProjectBroadcast", T2).then((U2) => a92.StopProjectBroadcastResponse.decode(new c.default.Reader(U2)));
    }
    StartProjectWebRtc(b) {
      const T2 = a92.StartProjectWebRtcRequest.encode(b).finish();
      return this.rpc.request(this.service, "StartProjectWebRtc", T2).then((U2) => a92.StartProjectWebRtcResponse.decode(new c.default.Reader(U2)));
    }
    StopProjectWebRtc(b) {
      const T2 = a92.StopProjectWebRtcRequest.encode(b).finish();
      return this.rpc.request(this.service, "StopProjectWebRtc", T2).then((U2) => a92.StopProjectWebRtcResponse.decode(new c.default.Reader(U2)));
    }
    GetProjectBroadcastSnapshot(b) {
      const T2 = a92.GetProjectBroadcastSnapshotRequest.encode(b).finish();
      return this.rpc.request(this.service, "GetProjectBroadcastSnapshot", T2).then((U2) => a92.GetProjectBroadcastSnapshotResponse.decode(new c.default.Reader(U2)));
    }
    GetProjectBroadcastStatus(b) {
      const T2 = a92.GetProjectBroadcastStatusRequest.encode(b).finish();
      return this.rpc.request(this.service, "GetProjectBroadcastStatus", T2).then((U2) => a92.GetProjectBroadcastStatusResponse.decode(new c.default.Reader(U2)));
    }
  }
  a92.ProjectServiceClientImpl = Lr, a92.ProjectServiceDefinition = { name: "ProjectService", fullName: "live.v21.ProjectService", methods: {
    /**
    * Create Project
    *
    * Create a new project
    */
    createProject: { name: "CreateProject", requestType: a92.CreateProjectRequest, requestStream: false, responseType: a92.CreateProjectResponse, responseStream: false, options: {} },
    /**
    * Get Project
    *
    * Get an existing project
    */
    getProject: { name: "GetProject", requestType: a92.GetProjectRequest, requestStream: false, responseType: a92.GetProjectResponse, responseStream: false, options: {} },
    /**
    * Delete Project
    *
    * Delete a project
    */
    deleteProject: { name: "DeleteProject", requestType: a92.DeleteProjectRequest, requestStream: false, responseType: a92.DeleteProjectResponse, responseStream: false, options: {} },
    /**
    * Update Project
    *
    * Updates a project
    */
    updateProject: { name: "UpdateProject", requestType: a92.UpdateProjectRequest, requestStream: false, responseType: a92.UpdateProjectResponse, responseStream: false, options: {} },
    /**
    * Start Broadcast
    *
    * Start broadcasting a project
    */
    startProjectBroadcast: { name: "StartProjectBroadcast", requestType: a92.StartProjectBroadcastRequest, requestStream: false, responseType: a92.StartProjectBroadcastResponse, responseStream: false, options: {} },
    /**
    * Stop Broadcast
    *
    * Stop broadcasting a project
    */
    stopProjectBroadcast: { name: "StopProjectBroadcast", requestType: a92.StopProjectBroadcastRequest, requestStream: false, responseType: a92.StopProjectBroadcastResponse, responseStream: false, options: {} },
    /**
    * Start WebRTC
    *
    * Start WebRTC services
    */
    startProjectWebRtc: { name: "StartProjectWebRtc", requestType: a92.StartProjectWebRtcRequest, requestStream: false, responseType: a92.StartProjectWebRtcResponse, responseStream: false, options: {} },
    /**
    * Stop WebRTC
    *
    * Stop WebRTC services
    */
    stopProjectWebRtc: { name: "StopProjectWebRtc", requestType: a92.StopProjectWebRtcRequest, requestStream: false, responseType: a92.StopProjectWebRtcResponse, responseStream: false, options: {} },
    /**
    * Get Snapshot
    *
    * Get a snapshot of the current output frame of the broadcast
    */
    getProjectBroadcastSnapshot: { name: "GetProjectBroadcastSnapshot", requestType: a92.GetProjectBroadcastSnapshotRequest, requestStream: false, responseType: a92.GetProjectBroadcastSnapshotResponse, responseStream: false, options: {} },
    /**
    * Get Broadcast Status
    *
    * Get the broadcast status of the project
    */
    getProjectBroadcastStatus: { name: "GetProjectBroadcastStatus", requestType: a92.GetProjectBroadcastStatusRequest, requestStream: false, responseType: a92.GetProjectBroadcastStatusResponse, responseStream: false, options: {} }
  } };
  class Mr {
    constructor(b, T2) {
      this.service = (T2 == null ? void 0 : T2.service) || "live.v21.DestinationService", this.rpc = b, this.CreateDestination = this.CreateDestination.bind(this), this.GetDestination = this.GetDestination.bind(this), this.UpdateDestination = this.UpdateDestination.bind(this), this.DeleteDestination = this.DeleteDestination.bind(this);
    }
    CreateDestination(b) {
      const T2 = a92.CreateDestinationRequest.encode(b).finish();
      return this.rpc.request(this.service, "CreateDestination", T2).then((U2) => a92.CreateDestinationResponse.decode(new c.default.Reader(U2)));
    }
    GetDestination(b) {
      const T2 = a92.GetDestinationRequest.encode(b).finish();
      return this.rpc.request(this.service, "GetDestination", T2).then((U2) => a92.GetDestinationResponse.decode(new c.default.Reader(U2)));
    }
    UpdateDestination(b) {
      const T2 = a92.UpdateDestinationRequest.encode(b).finish();
      return this.rpc.request(this.service, "UpdateDestination", T2).then((U2) => a92.UpdateDestinationResponse.decode(new c.default.Reader(U2)));
    }
    DeleteDestination(b) {
      const T2 = a92.DeleteDestinationRequest.encode(b).finish();
      return this.rpc.request(this.service, "DeleteDestination", T2).then((U2) => a92.DeleteDestinationResponse.decode(new c.default.Reader(U2)));
    }
  }
  a92.DestinationServiceClientImpl = Mr, a92.DestinationServiceDefinition = { name: "DestinationService", fullName: "live.v21.DestinationService", methods: {
    /**
    * Create Destination
    *
    * Create a new Destination
    */
    createDestination: { name: "CreateDestination", requestType: a92.CreateDestinationRequest, requestStream: false, responseType: a92.CreateDestinationResponse, responseStream: false, options: {} },
    /**
    * Get Destination
    *
    * Get an existing Destination.
    */
    getDestination: { name: "GetDestination", requestType: a92.GetDestinationRequest, requestStream: false, responseType: a92.GetDestinationResponse, responseStream: false, options: {} },
    /**
    * Update Destination
    *
    * Update a destination
    */
    updateDestination: { name: "UpdateDestination", requestType: a92.UpdateDestinationRequest, requestStream: false, responseType: a92.UpdateDestinationResponse, responseStream: false, options: {} },
    /**
    * Delete Destination
    *
    * Delete a destination
    */
    deleteDestination: { name: "DeleteDestination", requestType: a92.DeleteDestinationRequest, requestStream: false, responseType: a92.DeleteDestinationResponse, responseStream: false, options: {} }
  } };
  class Ur {
    constructor(b, T2) {
      this.service = (T2 == null ? void 0 : T2.service) || "live.v21.SourceService", this.rpc = b, this.CreateSource = this.CreateSource.bind(this), this.DeleteSource = this.DeleteSource.bind(this), this.UpdateSource = this.UpdateSource.bind(this), this.UpdateSourceInProject = this.UpdateSourceInProject.bind(this), this.GetSource = this.GetSource.bind(this), this.GetSources = this.GetSources.bind(this), this.AddSourceToProject = this.AddSourceToProject.bind(this), this.RemoveSourceFromProject = this.RemoveSourceFromProject.bind(this), this.GetSourcePlaylist = this.GetSourcePlaylist.bind(this);
    }
    CreateSource(b) {
      const T2 = a92.CreateSourceRequest.encode(b).finish();
      return this.rpc.request(this.service, "CreateSource", T2).then((U2) => a92.CreateSourceResponse.decode(new c.default.Reader(U2)));
    }
    DeleteSource(b) {
      const T2 = a92.DeleteSourceRequest.encode(b).finish();
      return this.rpc.request(this.service, "DeleteSource", T2).then((U2) => a92.DeleteSourceResponse.decode(new c.default.Reader(U2)));
    }
    UpdateSource(b) {
      const T2 = a92.UpdateSourceRequest.encode(b).finish();
      return this.rpc.request(this.service, "UpdateSource", T2).then((U2) => a92.UpdateSourceResponse.decode(new c.default.Reader(U2)));
    }
    UpdateSourceInProject(b) {
      const T2 = a92.UpdateSourceInProjectRequest.encode(b).finish();
      return this.rpc.request(this.service, "UpdateSourceInProject", T2).then((U2) => a92.UpdateSourceInProjectResponse.decode(new c.default.Reader(U2)));
    }
    GetSource(b) {
      const T2 = a92.GetSourceRequest.encode(b).finish();
      return this.rpc.request(this.service, "GetSource", T2).then((U2) => a92.GetSourceResponse.decode(new c.default.Reader(U2)));
    }
    GetSources(b) {
      const T2 = a92.GetSourcesRequest.encode(b).finish();
      return this.rpc.request(this.service, "GetSources", T2).then((U2) => a92.GetSourcesResponse.decode(new c.default.Reader(U2)));
    }
    AddSourceToProject(b) {
      const T2 = a92.AddSourceToProjectRequest.encode(b).finish();
      return this.rpc.request(this.service, "AddSourceToProject", T2).then((U2) => a92.AddSourceToProjectResponse.decode(new c.default.Reader(U2)));
    }
    RemoveSourceFromProject(b) {
      const T2 = a92.RemoveSourceFromProjectRequest.encode(b).finish();
      return this.rpc.request(this.service, "RemoveSourceFromProject", T2).then((U2) => a92.RemoveSourceFromProjectResponse.decode(new c.default.Reader(U2)));
    }
    GetSourcePlaylist(b) {
      const T2 = a92.GetSourcePlaylistRequest.encode(b).finish();
      return this.rpc.request(this.service, "GetSourcePlaylist", T2).then((U2) => l2.HttpBody.decode(new c.default.Reader(U2)));
    }
  }
  a92.SourceServiceClientImpl = Ur, a92.SourceServiceDefinition = { name: "SourceService", fullName: "live.v21.SourceService", methods: {
    /**
    * Create Collection Live Source
    *
    * Create a new live source in a collection
    * ### Permissions
    * * scope: `SCOPE_VAPI_CREATE`
    */
    createSource: { name: "CreateSource", requestType: a92.CreateSourceRequest, requestStream: false, responseType: a92.CreateSourceResponse, responseStream: false, options: {} },
    /**
    * Delete Live Source
    *
    * Deletes a live source from a collection
    */
    deleteSource: { name: "DeleteSource", requestType: a92.DeleteSourceRequest, requestStream: false, responseType: a92.DeleteSourceResponse, responseStream: false, options: {} },
    /**
    * Update Source
    *
    * Update attributes of the Source.
    */
    updateSource: { name: "UpdateSource", requestType: a92.UpdateSourceRequest, requestStream: false, responseType: a92.UpdateSourceResponse, responseStream: false, options: {} },
    /**
    * Update Source
    *
    * Update attributes of the Source.
    */
    updateSourceInProject: { name: "UpdateSourceInProject", requestType: a92.UpdateSourceInProjectRequest, requestStream: false, responseType: a92.UpdateSourceInProjectResponse, responseStream: false, options: {} },
    /**
    * Get Source
    *
    * Get an existing source in a project
    */
    getSource: { name: "GetSource", requestType: a92.GetSourceRequest, requestStream: false, responseType: a92.GetSourceResponse, responseStream: false, options: {} },
    /**
    * Get Source
    *
    * Get existing sources in a collection
    */
    getSources: { name: "GetSources", requestType: a92.GetSourcesRequest, requestStream: false, responseType: a92.GetSourcesResponse, responseStream: false, options: {} },
    /**
    * Add Source to Project
    *
    * Add a source to a project
    */
    addSourceToProject: { name: "AddSourceToProject", requestType: a92.AddSourceToProjectRequest, requestStream: false, responseType: a92.AddSourceToProjectResponse, responseStream: false, options: {} },
    /**
    * Delete Source From Project
    *
    * Removes a source from a project.
    */
    removeSourceFromProject: { name: "RemoveSourceFromProject", requestType: a92.RemoveSourceFromProjectRequest, requestStream: false, responseType: a92.RemoveSourceFromProjectResponse, responseStream: false, options: {} },
    /**
    * Get the HLS playlist for a source.
    * buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
    */
    getSourcePlaylist: { name: "GetSourcePlaylist", requestType: a92.GetSourcePlaylistRequest, requestStream: false, responseType: l2.HttpBody, responseStream: false, options: {} }
  } };
  class $r {
    constructor(b, T2) {
      this.service = (T2 == null ? void 0 : T2.service) || "live.v21.BackendAuthenticationService", this.rpc = b, this.CreateAccessToken = this.CreateAccessToken.bind(this);
    }
    CreateAccessToken(b) {
      const T2 = a92.CreateAccessTokenRequest.encode(b).finish();
      return this.rpc.request(this.service, "CreateAccessToken", T2).then((U2) => a92.CreateAccessTokenResponse.decode(new c.default.Reader(U2)));
    }
  }
  a92.BackendAuthenticationServiceClientImpl = $r, a92.BackendAuthenticationServiceDefinition = { name: "BackendAuthenticationService", fullName: "live.v21.BackendAuthenticationService", methods: {
    /**
    * Create Access Token
    *
    * Create an access token for a session host
    */
    createAccessToken: { name: "CreateAccessToken", requestType: a92.CreateAccessTokenRequest, requestStream: false, responseType: a92.CreateAccessTokenResponse, responseStream: false, options: {} }
  } };
  class Br {
    constructor(b, T2) {
      this.service = (T2 == null ? void 0 : T2.service) || "live.v21.AuthenticationService", this.rpc = b, this.CreateGuestAccessToken = this.CreateGuestAccessToken.bind(this), this.RefreshAccessToken = this.RefreshAccessToken.bind(this), this.CreateWebRtcAccessToken = this.CreateWebRtcAccessToken.bind(this);
    }
    CreateGuestAccessToken(b) {
      const T2 = a92.CreateGuestAccessTokenRequest.encode(b).finish();
      return this.rpc.request(this.service, "CreateGuestAccessToken", T2).then((U2) => a92.CreateGuestAccessTokenResponse.decode(new c.default.Reader(U2)));
    }
    RefreshAccessToken(b) {
      const T2 = a92.RefreshAccessTokenRequest.encode(b).finish();
      return this.rpc.request(this.service, "RefreshAccessToken", T2).then((U2) => a92.RefreshAccessTokenResponse.decode(new c.default.Reader(U2)));
    }
    CreateWebRtcAccessToken(b) {
      const T2 = a92.CreateWebRtcAccessTokenRequest.encode(b).finish();
      return this.rpc.request(this.service, "CreateWebRtcAccessToken", T2).then((U2) => a92.CreateWebRtcAccessTokenResponse.decode(new c.default.Reader(U2)));
    }
  }
  a92.AuthenticationServiceClientImpl = Br, a92.AuthenticationServiceDefinition = { name: "AuthenticationService", fullName: "live.v21.AuthenticationService", methods: {
    /**
    * Create Guest Access Token
    *
    * Create an access token for a guest
    */
    createGuestAccessToken: { name: "CreateGuestAccessToken", requestType: a92.CreateGuestAccessTokenRequest, requestStream: false, responseType: a92.CreateGuestAccessTokenResponse, responseStream: false, options: {} },
    /**
    * Refresh Access Token
    *
    * Forcibly refresh an access token prior to expiration
    */
    refreshAccessToken: { name: "RefreshAccessToken", requestType: a92.RefreshAccessTokenRequest, requestStream: false, responseType: a92.RefreshAccessTokenResponse, responseStream: false, options: {} },
    /**
    * Create WebRTC Access Token
    *
    * Create a WebRTC Access Token
    */
    createWebRtcAccessToken: { name: "CreateWebRtcAccessToken", requestType: a92.CreateWebRtcAccessTokenRequest, requestStream: false, responseType: a92.CreateWebRtcAccessTokenResponse, responseStream: false, options: {} }
  } };
  class Jr {
    constructor(b, T2) {
      this.service = (T2 == null ? void 0 : T2.service) || "live.v21.PublicAuthenticationService", this.rpc = b, this.GetJsonWebKeySet = this.GetJsonWebKeySet.bind(this), this.GuestCodeRedirect = this.GuestCodeRedirect.bind(this);
    }
    GetJsonWebKeySet(b) {
      const T2 = a92.GetJsonWebKeySetRequest.encode(b).finish();
      return this.rpc.request(this.service, "GetJsonWebKeySet", T2).then((U2) => a92.GetJsonWebKeySetResponse.decode(new c.default.Reader(U2)));
    }
    GuestCodeRedirect(b) {
      const T2 = a92.GuestCodeRedirectRequest.encode(b).finish();
      return this.rpc.request(this.service, "GuestCodeRedirect", T2).then((U2) => a92.GuestCodeRedirectResponse.decode(new c.default.Reader(U2)));
    }
  }
  a92.PublicAuthenticationServiceClientImpl = Jr, a92.PublicAuthenticationServiceDefinition = { name: "PublicAuthenticationService", fullName: "live.v21.PublicAuthenticationService", methods: {
    /**
    * Get Public Keys
    *
    * Get public keys used to sign access tokens
    */
    getJsonWebKeySet: { name: "GetJsonWebKeySet", requestType: a92.GetJsonWebKeySetRequest, requestStream: false, responseType: a92.GetJsonWebKeySetResponse, responseStream: false, options: {} },
    /**
    * Exchange Guest Access Token
    *
    * Exchange a guest access token with updated user identifiers
    */
    guestCodeRedirect: { name: "GuestCodeRedirect", requestType: a92.GuestCodeRedirectRequest, requestStream: false, responseType: a92.GuestCodeRedirectResponse, responseStream: false, options: {} }
  } };
  var Ke2 = (() => {
    if (typeof Ke2 < "u")
      return Ke2;
    if (typeof self < "u")
      return self;
    if (typeof window < "u")
      return window;
    if (typeof commonjsGlobal$1 < "u")
      return commonjsGlobal$1;
    throw "Unable to locate global object";
  })();
  function Fr(p2) {
    if (Ke2.Buffer)
      return Uint8Array.from(Ke2.Buffer.from(p2, "base64"));
    {
      const b = Ke2.atob(p2), T2 = new Uint8Array(b.length);
      for (let K2 = 0; K2 < b.length; ++K2)
        T2[K2] = b.charCodeAt(K2);
      return T2;
    }
  }
  function Vr(p2) {
    if (Ke2.Buffer)
      return Ke2.Buffer.from(p2).toString("base64");
    {
      const b = [];
      return p2.forEach((T2) => {
        b.push(String.fromCharCode(T2));
      }), Ke2.btoa(b.join(""));
    }
  }
  function Ut(p2) {
    const b = new Date(p2), T2 = b.getTime() / 1e3, K2 = b.getTime() % 1e3 * 1e6;
    return { seconds: T2, nanos: K2 };
  }
  function $t(p2) {
    let b = p2.seconds * 1e3;
    return b += p2.nanos / 1e6, new Date(b).toISOString();
  }
  function ce2(p2) {
    return p2 != null;
  }
})(api$1);
(function(a92) {
  var u2 = commonjsGlobal$1 && commonjsGlobal$1.__createBinding || (Object.create ? function($, J2, V2, q2) {
    q2 === void 0 && (q2 = V2);
    var G2 = Object.getOwnPropertyDescriptor(J2, V2);
    (!G2 || ("get" in G2 ? !J2.__esModule : G2.writable || G2.configurable)) && (G2 = { enumerable: true, get: function() {
      return J2[V2];
    } }), Object.defineProperty($, q2, G2);
  } : function($, J2, V2, q2) {
    q2 === void 0 && (q2 = V2), $[q2] = J2[V2];
  }), c = commonjsGlobal$1 && commonjsGlobal$1.__setModuleDefault || (Object.create ? function($, J2) {
    Object.defineProperty($, "default", { enumerable: true, value: J2 });
  } : function($, J2) {
    $.default = J2;
  }), l2 = commonjsGlobal$1 && commonjsGlobal$1.__decorate || function($, J2, V2, q2) {
    var G2 = arguments.length, H2 = G2 < 3 ? J2 : q2 === null ? q2 = Object.getOwnPropertyDescriptor(J2, V2) : q2, B2;
    if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
      H2 = Reflect.decorate($, J2, V2, q2);
    else
      for (var Y2 = $.length - 1; Y2 >= 0; Y2--)
        (B2 = $[Y2]) && (H2 = (G2 < 3 ? B2(H2) : G2 > 3 ? B2(J2, V2, H2) : B2(J2, V2)) || H2);
    return G2 > 3 && H2 && Object.defineProperty(J2, V2, H2), H2;
  }, v2 = commonjsGlobal$1 && commonjsGlobal$1.__importStar || function($) {
    if ($ && $.__esModule)
      return $;
    var J2 = {};
    if ($ != null)
      for (var V2 in $)
        V2 !== "default" && Object.prototype.hasOwnProperty.call($, V2) && u2(J2, $, V2);
    return c(J2, $), J2;
  }, S2 = commonjsGlobal$1 && commonjsGlobal$1.__metadata || function($, J2) {
    if (typeof Reflect == "object" && typeof Reflect.metadata == "function")
      return Reflect.metadata($, J2);
  };
  Object.defineProperty(a92, "__esModule", { value: true }), a92.LiveApi = void 0;
  const g2 = v2(lib$1), E2 = api$2, _ = v2(api$1), k = decorator, L2 = "LiveApi";
  class M2 extends E2.ApiClient {
    constructor(J2, V2, q2, G2, H2, B2, Y2) {
      super(J2, q2, B2, L2, Y2), this.handlers = {}, this.eventApi = V2, this.accessTokenRefreshCallback = G2, this.publicAuthentication = this.clientFactory.create(_.PublicAuthenticationServiceDefinition, this.channel), H2 != null && (this.backendAuthentication = this.clientFactory.create(_.BackendAuthenticationServiceDefinition, this.channel, { "*": { metadata: g2.Metadata({ "X-Api-Key": H2 }) } })), this.eventApi.on("event", { name: `${M2.LIVEAPI_EVENT_PREFIX}:*`, ignoreSessionEvents: true, allowedSessionEvents: [`${M2.LIVEAPI_EVENT_PREFIX}:EVENT_TYPE_PROJECT:EVENT_SUB_TYPE_STATE`] }, this.eventCallback.bind(this));
    }
    /**
    * Register an event handler
    *
    * @param type Type of event
    * @param handler
    */
    on(J2, V2) {
      var q2;
      this.handlers[J2] = (q2 = this.handlers[J2]) !== null && q2 !== void 0 ? q2 : [], this.handlers[J2].push(V2);
    }
    /**
    * Unregister an event handler
    *
    * @param type Type of event
    * @param handler
    */
    off(J2, V2) {
      this.handlers[J2] = this.handlers[J2].filter((q2) => q2 !== V2);
    }
    emitToHandlers(J2, V2, q2) {
      var G2;
      for (const H2 of (G2 = this.handlers[J2]) !== null && G2 !== void 0 ? G2 : [])
        H2(Object.values(q2).find((B2) => !!B2), V2);
    }
    async subscribeToCollection(J2) {
      await this.eventApi.subscribe(`${M2.LIVEAPI_EVENT_PREFIX}:*`, { target: { collectionId: J2 } });
    }
    async unsubscribeFromCollection(J2) {
      await this.eventApi.unsubscribe(`${M2.LIVEAPI_EVENT_PREFIX}:*`, { target: { collectionId: J2 } });
    }
    async subscribeToProject(J2, V2) {
      await this.eventApi.subscribe(`${M2.LIVEAPI_EVENT_PREFIX}:*`, { target: { collectionId: J2, projectId: V2 } });
    }
    async unsubscribeFromProject(J2, V2) {
      await this.eventApi.unsubscribe(`${M2.LIVEAPI_EVENT_PREFIX}:*`, { target: { collectionId: J2, projectId: V2 } });
    }
    eventCallback(J2) {
      let q2 = J2.name.split(`${M2.LIVEAPI_EVENT_PREFIX}:`)[1].split(":"), G2 = _.eventTypeFromJSON(q2[0]), H2 = _.eventSubTypeFromJSON(q2[1]);
      this.log.info("processing event: " + G2 + "/" + H2), M2.liveApiEventMap[G2] && this.emitToHandlers(G2, H2, J2.payload);
    }
    _setup(J2) {
      let V2 = this;
      J2.onHeader = function(q2) {
        let G2 = q2.get("Authorization");
        if (G2 != null) {
          const H2 = G2.split(" ");
          if (H2.length == 2 && H2[0] == "Bearer") {
            let B2 = H2[1];
            V2.log.info("received refresh token"), V2.accessTokenRefreshCallback(B2);
          }
        }
      }, this.collection = this.clientFactory.create(_.CollectionServiceDefinition, this.channel, { "*": J2 }), this.project = this.clientFactory.create(_.ProjectServiceDefinition, this.channel, { "*": J2 }), this.source = this.clientFactory.create(_.SourceServiceDefinition, this.channel, { "*": J2 }), this.destination = this.clientFactory.create(_.DestinationServiceDefinition, this.channel, { "*": J2 }), this.authentication = this.clientFactory.create(_.AuthenticationServiceDefinition, this.channel, { "*": J2 });
    }
  }
  M2.LIVEAPI_EVENT_PREFIX = "apistream:live", l2([(0, k.RequiresSdkAuthentication)(), S2("design:type", Object)], M2.prototype, "collection", void 0), l2([(0, k.RequiresSdkAuthentication)(), S2("design:type", Object)], M2.prototype, "project", void 0), l2([(0, k.RequiresSdkAuthentication)(), S2("design:type", Object)], M2.prototype, "source", void 0), l2([(0, k.RequiresSdkAuthentication)(), S2("design:type", Object)], M2.prototype, "destination", void 0), l2([(0, k.RequiresSdkAuthentication)(), S2("design:type", Object)], M2.prototype, "authentication", void 0), a92.LiveApi = M2, function($) {
    $.liveApiEventMap = { [_.EventType.EVENT_TYPE_COLLECTION]: "collection", [_.EventType.EVENT_TYPE_PROJECT]: "project", [_.EventType.EVENT_TYPE_SOURCE]: "source", [_.EventType.EVENT_TYPE_DESTINATION]: "destination", [_.EventType.EVENT_TYPE_UNSPECIFIED]: "unspecified" };
  }(M2 = a92.LiveApi || (a92.LiveApi = {}));
})(liveapi);
var eventapi = {}, dist$1 = {}, api = {};
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
var extendStatics = function(a92, u2) {
  return extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(c, l2) {
    c.__proto__ = l2;
  } || function(c, l2) {
    for (var v2 in l2)
      l2.hasOwnProperty(v2) && (c[v2] = l2[v2]);
  }, extendStatics(a92, u2);
};
function __extends(a92, u2) {
  extendStatics(a92, u2);
  function c() {
    this.constructor = a92;
  }
  a92.prototype = u2 === null ? Object.create(u2) : (c.prototype = u2.prototype, new c());
}
function isFunction$2(a92) {
  return typeof a92 == "function";
}
var _enable_super_gross_mode_that_will_cause_bad_things = false, config$2 = { Promise: void 0, set useDeprecatedSynchronousErrorHandling(a92) {
  if (a92) {
    var u2 = /* @__PURE__ */ new Error();
    "" + u2.stack;
  }
  _enable_super_gross_mode_that_will_cause_bad_things = a92;
}, get useDeprecatedSynchronousErrorHandling() {
  return _enable_super_gross_mode_that_will_cause_bad_things;
} };
function hostReportError(a92) {
  setTimeout(function() {
    throw a92;
  }, 0);
}
var empty$2 = { closed: true, next: function(a92) {
}, error: function(a92) {
  if (config$2.useDeprecatedSynchronousErrorHandling)
    throw a92;
  hostReportError(a92);
}, complete: function() {
} }, isArray$4 = /* @__PURE__ */ function() {
  return Array.isArray || function(a92) {
    return a92 && typeof a92.length == "number";
  };
}();
function isObject$8(a92) {
  return a92 !== null && typeof a92 == "object";
}
var UnsubscriptionErrorImpl = /* @__PURE__ */ function() {
  function a92(u2) {
    return Error.call(this), this.message = u2 ? u2.length + ` errors occurred during unsubscription:
` + u2.map(function(c, l2) {
      return l2 + 1 + ") " + c.toString();
    }).join(`
  `) : "", this.name = "UnsubscriptionError", this.errors = u2, this;
  }
  return a92.prototype = /* @__PURE__ */ Object.create(Error.prototype), a92;
}(), UnsubscriptionError = UnsubscriptionErrorImpl, Subscription = /* @__PURE__ */ function() {
  function a92(u2) {
    this.closed = false, this._parentOrParents = null, this._subscriptions = null, u2 && (this._ctorUnsubscribe = true, this._unsubscribe = u2);
  }
  return a92.prototype.unsubscribe = function() {
    var u2;
    if (!this.closed) {
      var c = this, l2 = c._parentOrParents, v2 = c._ctorUnsubscribe, S2 = c._unsubscribe, g2 = c._subscriptions;
      if (this.closed = true, this._parentOrParents = null, this._subscriptions = null, l2 instanceof a92)
        l2.remove(this);
      else if (l2 !== null)
        for (var E2 = 0; E2 < l2.length; ++E2) {
          var _ = l2[E2];
          _.remove(this);
        }
      if (isFunction$2(S2)) {
        v2 && (this._unsubscribe = void 0);
        try {
          S2.call(this);
        } catch (M2) {
          u2 = M2 instanceof UnsubscriptionError ? flattenUnsubscriptionErrors(M2.errors) : [M2];
        }
      }
      if (isArray$4(g2))
        for (var E2 = -1, k = g2.length; ++E2 < k; ) {
          var L2 = g2[E2];
          if (isObject$8(L2))
            try {
              L2.unsubscribe();
            } catch ($) {
              u2 = u2 || [], $ instanceof UnsubscriptionError ? u2 = u2.concat(flattenUnsubscriptionErrors($.errors)) : u2.push($);
            }
        }
      if (u2)
        throw new UnsubscriptionError(u2);
    }
  }, a92.prototype.add = function(u2) {
    var c = u2;
    if (!u2)
      return a92.EMPTY;
    switch (typeof u2) {
      case "function":
        c = new a92(u2);
      case "object":
        if (c === this || c.closed || typeof c.unsubscribe != "function")
          return c;
        if (this.closed)
          return c.unsubscribe(), c;
        if (!(c instanceof a92)) {
          var l2 = c;
          c = new a92(), c._subscriptions = [l2];
        }
        break;
      default:
        throw new Error("unrecognized teardown " + u2 + " added to Subscription.");
    }
    var v2 = c._parentOrParents;
    if (v2 === null)
      c._parentOrParents = this;
    else if (v2 instanceof a92) {
      if (v2 === this)
        return c;
      c._parentOrParents = [v2, this];
    } else if (v2.indexOf(this) === -1)
      v2.push(this);
    else
      return c;
    var S2 = this._subscriptions;
    return S2 === null ? this._subscriptions = [c] : S2.push(c), c;
  }, a92.prototype.remove = function(u2) {
    var c = this._subscriptions;
    if (c) {
      var l2 = c.indexOf(u2);
      l2 !== -1 && c.splice(l2, 1);
    }
  }, a92.EMPTY = function(u2) {
    return u2.closed = true, u2;
  }(new a92()), a92;
}();
function flattenUnsubscriptionErrors(a92) {
  return a92.reduce(function(u2, c) {
    return u2.concat(c instanceof UnsubscriptionError ? c.errors : c);
  }, []);
}
var rxSubscriber = /* @__PURE__ */ function() {
  return typeof Symbol == "function" ? /* @__PURE__ */ Symbol("rxSubscriber") : "@@rxSubscriber_" + /* @__PURE__ */ Math.random();
}(), Subscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2, v2) {
    var S2 = a92.call(this) || this;
    switch (S2.syncErrorValue = null, S2.syncErrorThrown = false, S2.syncErrorThrowable = false, S2.isStopped = false, arguments.length) {
      case 0:
        S2.destination = empty$2;
        break;
      case 1:
        if (!c) {
          S2.destination = empty$2;
          break;
        }
        if (typeof c == "object") {
          c instanceof u2 ? (S2.syncErrorThrowable = c.syncErrorThrowable, S2.destination = c, c.add(S2)) : (S2.syncErrorThrowable = true, S2.destination = new SafeSubscriber(S2, c));
          break;
        }
      default:
        S2.syncErrorThrowable = true, S2.destination = new SafeSubscriber(S2, c, l2, v2);
        break;
    }
    return S2;
  }
  return u2.prototype[rxSubscriber] = function() {
    return this;
  }, u2.create = function(c, l2, v2) {
    var S2 = new u2(c, l2, v2);
    return S2.syncErrorThrowable = false, S2;
  }, u2.prototype.next = function(c) {
    this.isStopped || this._next(c);
  }, u2.prototype.error = function(c) {
    this.isStopped || (this.isStopped = true, this._error(c));
  }, u2.prototype.complete = function() {
    this.isStopped || (this.isStopped = true, this._complete());
  }, u2.prototype.unsubscribe = function() {
    this.closed || (this.isStopped = true, a92.prototype.unsubscribe.call(this));
  }, u2.prototype._next = function(c) {
    this.destination.next(c);
  }, u2.prototype._error = function(c) {
    this.destination.error(c), this.unsubscribe();
  }, u2.prototype._complete = function() {
    this.destination.complete(), this.unsubscribe();
  }, u2.prototype._unsubscribeAndRecycle = function() {
    var c = this._parentOrParents;
    return this._parentOrParents = null, this.unsubscribe(), this.closed = false, this.isStopped = false, this._parentOrParents = c, this;
  }, u2;
}(Subscription), SafeSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2, v2, S2) {
    var g2 = a92.call(this) || this;
    g2._parentSubscriber = c;
    var E2, _ = g2;
    return isFunction$2(l2) ? E2 = l2 : l2 && (E2 = l2.next, v2 = l2.error, S2 = l2.complete, l2 !== empty$2 && (_ = Object.create(l2), isFunction$2(_.unsubscribe) && g2.add(_.unsubscribe.bind(_)), _.unsubscribe = g2.unsubscribe.bind(g2))), g2._context = _, g2._next = E2, g2._error = v2, g2._complete = S2, g2;
  }
  return u2.prototype.next = function(c) {
    if (!this.isStopped && this._next) {
      var l2 = this._parentSubscriber;
      !config$2.useDeprecatedSynchronousErrorHandling || !l2.syncErrorThrowable ? this.__tryOrUnsub(this._next, c) : this.__tryOrSetError(l2, this._next, c) && this.unsubscribe();
    }
  }, u2.prototype.error = function(c) {
    if (!this.isStopped) {
      var l2 = this._parentSubscriber, v2 = config$2.useDeprecatedSynchronousErrorHandling;
      if (this._error)
        !v2 || !l2.syncErrorThrowable ? (this.__tryOrUnsub(this._error, c), this.unsubscribe()) : (this.__tryOrSetError(l2, this._error, c), this.unsubscribe());
      else if (l2.syncErrorThrowable)
        v2 ? (l2.syncErrorValue = c, l2.syncErrorThrown = true) : hostReportError(c), this.unsubscribe();
      else {
        if (this.unsubscribe(), v2)
          throw c;
        hostReportError(c);
      }
    }
  }, u2.prototype.complete = function() {
    var c = this;
    if (!this.isStopped) {
      var l2 = this._parentSubscriber;
      if (this._complete) {
        var v2 = function() {
          return c._complete.call(c._context);
        };
        !config$2.useDeprecatedSynchronousErrorHandling || !l2.syncErrorThrowable ? (this.__tryOrUnsub(v2), this.unsubscribe()) : (this.__tryOrSetError(l2, v2), this.unsubscribe());
      } else
        this.unsubscribe();
    }
  }, u2.prototype.__tryOrUnsub = function(c, l2) {
    try {
      c.call(this._context, l2);
    } catch (v2) {
      if (this.unsubscribe(), config$2.useDeprecatedSynchronousErrorHandling)
        throw v2;
      hostReportError(v2);
    }
  }, u2.prototype.__tryOrSetError = function(c, l2, v2) {
    if (!config$2.useDeprecatedSynchronousErrorHandling)
      throw new Error("bad call");
    try {
      l2.call(this._context, v2);
    } catch (S2) {
      return config$2.useDeprecatedSynchronousErrorHandling ? (c.syncErrorValue = S2, c.syncErrorThrown = true, true) : (hostReportError(S2), true);
    }
    return false;
  }, u2.prototype._unsubscribe = function() {
    var c = this._parentSubscriber;
    this._context = null, this._parentSubscriber = null, c.unsubscribe();
  }, u2;
}(Subscriber);
function canReportError(a92) {
  for (; a92; ) {
    var u2 = a92, c = u2.closed, l2 = u2.destination, v2 = u2.isStopped;
    if (c || v2)
      return false;
    l2 && l2 instanceof Subscriber ? a92 = l2 : a92 = null;
  }
  return true;
}
function toSubscriber(a92, u2, c) {
  if (a92) {
    if (a92 instanceof Subscriber)
      return a92;
    if (a92[rxSubscriber])
      return a92[rxSubscriber]();
  }
  return !a92 && !u2 && !c ? new Subscriber(empty$2) : new Subscriber(a92, u2, c);
}
var observable = /* @__PURE__ */ function() {
  return typeof Symbol == "function" && Symbol.observable || "@@observable";
}();
function identity(a92) {
  return a92;
}
function pipe() {
  for (var a92 = [], u2 = 0; u2 < arguments.length; u2++)
    a92[u2] = arguments[u2];
  return pipeFromArray(a92);
}
function pipeFromArray(a92) {
  return a92.length === 0 ? identity : a92.length === 1 ? a92[0] : function(c) {
    return a92.reduce(function(l2, v2) {
      return v2(l2);
    }, c);
  };
}
var Observable = /* @__PURE__ */ function() {
  function a92(u2) {
    this._isScalar = false, u2 && (this._subscribe = u2);
  }
  return a92.prototype.lift = function(u2) {
    var c = new a92();
    return c.source = this, c.operator = u2, c;
  }, a92.prototype.subscribe = function(u2, c, l2) {
    var v2 = this.operator, S2 = toSubscriber(u2, c, l2);
    if (v2 ? S2.add(v2.call(S2, this.source)) : S2.add(this.source || config$2.useDeprecatedSynchronousErrorHandling && !S2.syncErrorThrowable ? this._subscribe(S2) : this._trySubscribe(S2)), config$2.useDeprecatedSynchronousErrorHandling && S2.syncErrorThrowable && (S2.syncErrorThrowable = false, S2.syncErrorThrown))
      throw S2.syncErrorValue;
    return S2;
  }, a92.prototype._trySubscribe = function(u2) {
    try {
      return this._subscribe(u2);
    } catch (c) {
      config$2.useDeprecatedSynchronousErrorHandling && (u2.syncErrorThrown = true, u2.syncErrorValue = c), canReportError(u2) ? u2.error(c) : console.warn(c);
    }
  }, a92.prototype.forEach = function(u2, c) {
    var l2 = this;
    return c = getPromiseCtor(c), new c(function(v2, S2) {
      var g2;
      g2 = l2.subscribe(function(E2) {
        try {
          u2(E2);
        } catch (_) {
          S2(_), g2 && g2.unsubscribe();
        }
      }, S2, v2);
    });
  }, a92.prototype._subscribe = function(u2) {
    var c = this.source;
    return c && c.subscribe(u2);
  }, a92.prototype[observable] = function() {
    return this;
  }, a92.prototype.pipe = function() {
    for (var u2 = [], c = 0; c < arguments.length; c++)
      u2[c] = arguments[c];
    return u2.length === 0 ? this : pipeFromArray(u2)(this);
  }, a92.prototype.toPromise = function(u2) {
    var c = this;
    return u2 = getPromiseCtor(u2), new u2(function(l2, v2) {
      var S2;
      c.subscribe(function(g2) {
        return S2 = g2;
      }, function(g2) {
        return v2(g2);
      }, function() {
        return l2(S2);
      });
    });
  }, a92.create = function(u2) {
    return new a92(u2);
  }, a92;
}();
function getPromiseCtor(a92) {
  if (a92 || (a92 = Promise), !a92)
    throw new Error("no Promise impl found");
  return a92;
}
var subscribeToArray = function(a92) {
  return function(u2) {
    for (var c = 0, l2 = a92.length; c < l2 && !u2.closed; c++)
      u2.next(a92[c]);
    u2.complete();
  };
}, subscribeToPromise = function(a92) {
  return function(u2) {
    return a92.then(function(c) {
      u2.closed || (u2.next(c), u2.complete());
    }, function(c) {
      return u2.error(c);
    }).then(null, hostReportError), u2;
  };
};
function getSymbolIterator() {
  return typeof Symbol != "function" || !Symbol.iterator ? "@@iterator" : Symbol.iterator;
}
var iterator = /* @__PURE__ */ getSymbolIterator(), subscribeToIterable = function(a92) {
  return function(u2) {
    var c = a92[iterator]();
    do {
      var l2 = void 0;
      try {
        l2 = c.next();
      } catch (v2) {
        return u2.error(v2), u2;
      }
      if (l2.done) {
        u2.complete();
        break;
      }
      if (u2.next(l2.value), u2.closed)
        break;
    } while (true);
    return typeof c.return == "function" && u2.add(function() {
      c.return && c.return();
    }), u2;
  };
}, subscribeToObservable = function(a92) {
  return function(u2) {
    var c = a92[observable]();
    if (typeof c.subscribe != "function")
      throw new TypeError("Provided object does not correctly implement Symbol.observable");
    return c.subscribe(u2);
  };
}, isArrayLike$1 = function(a92) {
  return a92 && typeof a92.length == "number" && typeof a92 != "function";
};
function isPromise(a92) {
  return !!a92 && typeof a92.subscribe != "function" && typeof a92.then == "function";
}
var subscribeTo = function(a92) {
  if (a92 && typeof a92[observable] == "function")
    return subscribeToObservable(a92);
  if (isArrayLike$1(a92))
    return subscribeToArray(a92);
  if (isPromise(a92))
    return subscribeToPromise(a92);
  if (a92 && typeof a92[iterator] == "function")
    return subscribeToIterable(a92);
  var u2 = isObject$8(a92) ? "an invalid object" : "'" + a92 + "'", c = "You provided " + u2 + " where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.";
  throw new TypeError(c);
}, SimpleInnerSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c) {
    var l2 = a92.call(this) || this;
    return l2.parent = c, l2;
  }
  return u2.prototype._next = function(c) {
    this.parent.notifyNext(c);
  }, u2.prototype._error = function(c) {
    this.parent.notifyError(c), this.unsubscribe();
  }, u2.prototype._complete = function() {
    this.parent.notifyComplete(), this.unsubscribe();
  }, u2;
}(Subscriber), SimpleOuterSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2() {
    return a92 !== null && a92.apply(this, arguments) || this;
  }
  return u2.prototype.notifyNext = function(c) {
    this.destination.next(c);
  }, u2.prototype.notifyError = function(c) {
    this.destination.error(c);
  }, u2.prototype.notifyComplete = function() {
    this.destination.complete();
  }, u2;
}(Subscriber);
function innerSubscribe(a92, u2) {
  if (!u2.closed) {
    if (a92 instanceof Observable)
      return a92.subscribe(u2);
    var c;
    try {
      c = subscribeTo(a92)(u2);
    } catch (l2) {
      u2.error(l2);
    }
    return c;
  }
}
function audit(a92) {
  return function(c) {
    return c.lift(new AuditOperator(a92));
  };
}
var AuditOperator = /* @__PURE__ */ function() {
  function a92(u2) {
    this.durationSelector = u2;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new AuditSubscriber(u2, this.durationSelector));
  }, a92;
}(), AuditSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2) {
    var v2 = a92.call(this, c) || this;
    return v2.durationSelector = l2, v2.hasValue = false, v2;
  }
  return u2.prototype._next = function(c) {
    if (this.value = c, this.hasValue = true, !this.throttled) {
      var l2 = void 0;
      try {
        var v2 = this.durationSelector;
        l2 = v2(c);
      } catch (g2) {
        return this.destination.error(g2);
      }
      var S2 = innerSubscribe(l2, new SimpleInnerSubscriber(this));
      !S2 || S2.closed ? this.clearThrottle() : this.add(this.throttled = S2);
    }
  }, u2.prototype.clearThrottle = function() {
    var c = this, l2 = c.value, v2 = c.hasValue, S2 = c.throttled;
    S2 && (this.remove(S2), this.throttled = void 0, S2.unsubscribe()), v2 && (this.value = void 0, this.hasValue = false, this.destination.next(l2));
  }, u2.prototype.notifyNext = function() {
    this.clearThrottle();
  }, u2.prototype.notifyComplete = function() {
    this.clearThrottle();
  }, u2;
}(SimpleOuterSubscriber), Action = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2) {
    return a92.call(this) || this;
  }
  return u2.prototype.schedule = function(c, l2) {
    return this;
  }, u2;
}(Subscription), AsyncAction = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2) {
    var v2 = a92.call(this, c, l2) || this;
    return v2.scheduler = c, v2.work = l2, v2.pending = false, v2;
  }
  return u2.prototype.schedule = function(c, l2) {
    if (l2 === void 0 && (l2 = 0), this.closed)
      return this;
    this.state = c;
    var v2 = this.id, S2 = this.scheduler;
    return v2 != null && (this.id = this.recycleAsyncId(S2, v2, l2)), this.pending = true, this.delay = l2, this.id = this.id || this.requestAsyncId(S2, this.id, l2), this;
  }, u2.prototype.requestAsyncId = function(c, l2, v2) {
    return v2 === void 0 && (v2 = 0), setInterval(c.flush.bind(c, this), v2);
  }, u2.prototype.recycleAsyncId = function(c, l2, v2) {
    if (v2 === void 0 && (v2 = 0), v2 !== null && this.delay === v2 && this.pending === false)
      return l2;
    clearInterval(l2);
  }, u2.prototype.execute = function(c, l2) {
    if (this.closed)
      return new Error("executing a cancelled action");
    this.pending = false;
    var v2 = this._execute(c, l2);
    if (v2)
      return v2;
    this.pending === false && this.id != null && (this.id = this.recycleAsyncId(this.scheduler, this.id, null));
  }, u2.prototype._execute = function(c, l2) {
    var v2 = false, S2 = void 0;
    try {
      this.work(c);
    } catch (g2) {
      v2 = true, S2 = !!g2 && g2 || new Error(g2);
    }
    if (v2)
      return this.unsubscribe(), S2;
  }, u2.prototype._unsubscribe = function() {
    var c = this.id, l2 = this.scheduler, v2 = l2.actions, S2 = v2.indexOf(this);
    this.work = null, this.state = null, this.pending = false, this.scheduler = null, S2 !== -1 && v2.splice(S2, 1), c != null && (this.id = this.recycleAsyncId(l2, c, null)), this.delay = null;
  }, u2;
}(Action), Scheduler = /* @__PURE__ */ function() {
  function a92(u2, c) {
    c === void 0 && (c = a92.now), this.SchedulerAction = u2, this.now = c;
  }
  return a92.prototype.schedule = function(u2, c, l2) {
    return c === void 0 && (c = 0), new this.SchedulerAction(this, u2).schedule(l2, c);
  }, a92.now = function() {
    return Date.now();
  }, a92;
}(), AsyncScheduler = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2) {
    l2 === void 0 && (l2 = Scheduler.now);
    var v2 = a92.call(this, c, function() {
      return u2.delegate && u2.delegate !== v2 ? u2.delegate.now() : l2();
    }) || this;
    return v2.actions = [], v2.active = false, v2.scheduled = void 0, v2;
  }
  return u2.prototype.schedule = function(c, l2, v2) {
    return l2 === void 0 && (l2 = 0), u2.delegate && u2.delegate !== this ? u2.delegate.schedule(c, l2, v2) : a92.prototype.schedule.call(this, c, l2, v2);
  }, u2.prototype.flush = function(c) {
    var l2 = this.actions;
    if (this.active) {
      l2.push(c);
      return;
    }
    var v2;
    this.active = true;
    do
      if (v2 = c.execute(c.state, c.delay))
        break;
    while (c = l2.shift());
    if (this.active = false, v2) {
      for (; c = l2.shift(); )
        c.unsubscribe();
      throw v2;
    }
  }, u2;
}(Scheduler), asyncScheduler = /* @__PURE__ */ new AsyncScheduler(AsyncAction), async = asyncScheduler;
function isNumeric(a92) {
  return !isArray$4(a92) && a92 - parseFloat(a92) + 1 >= 0;
}
function isScheduler(a92) {
  return a92 && typeof a92.schedule == "function";
}
function timer(a92, u2, c) {
  a92 === void 0 && (a92 = 0);
  var l2 = -1;
  return isNumeric(u2) ? l2 = Number(u2) < 1 && 1 || Number(u2) : isScheduler(u2) && (c = u2), isScheduler(c) || (c = async), new Observable(function(v2) {
    var S2 = isNumeric(a92) ? a92 : +a92 - c.now();
    return c.schedule(dispatch$1, S2, { index: 0, period: l2, subscriber: v2 });
  });
}
function dispatch$1(a92) {
  var u2 = a92.index, c = a92.period, l2 = a92.subscriber;
  if (l2.next(u2), !l2.closed) {
    if (c === -1)
      return l2.complete();
    a92.index = u2 + 1, this.schedule(a92, c);
  }
}
function auditTime(a92, u2) {
  return u2 === void 0 && (u2 = async), audit(function() {
    return timer(a92, u2);
  });
}
function buffer(a92) {
  return function(c) {
    return c.lift(new BufferOperator(a92));
  };
}
var BufferOperator = /* @__PURE__ */ function() {
  function a92(u2) {
    this.closingNotifier = u2;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new BufferSubscriber(u2, this.closingNotifier));
  }, a92;
}(), BufferSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2) {
    var v2 = a92.call(this, c) || this;
    return v2.buffer = [], v2.add(innerSubscribe(l2, new SimpleInnerSubscriber(v2))), v2;
  }
  return u2.prototype._next = function(c) {
    this.buffer.push(c);
  }, u2.prototype.notifyNext = function() {
    var c = this.buffer;
    this.buffer = [], this.destination.next(c);
  }, u2;
}(SimpleOuterSubscriber);
function bufferCount(a92, u2) {
  return u2 === void 0 && (u2 = null), function(l2) {
    return l2.lift(new BufferCountOperator(a92, u2));
  };
}
var BufferCountOperator = /* @__PURE__ */ function() {
  function a92(u2, c) {
    this.bufferSize = u2, this.startBufferEvery = c, !c || u2 === c ? this.subscriberClass = BufferCountSubscriber : this.subscriberClass = BufferSkipCountSubscriber;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new this.subscriberClass(u2, this.bufferSize, this.startBufferEvery));
  }, a92;
}(), BufferCountSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2) {
    var v2 = a92.call(this, c) || this;
    return v2.bufferSize = l2, v2.buffer = [], v2;
  }
  return u2.prototype._next = function(c) {
    var l2 = this.buffer;
    l2.push(c), l2.length == this.bufferSize && (this.destination.next(l2), this.buffer = []);
  }, u2.prototype._complete = function() {
    var c = this.buffer;
    c.length > 0 && this.destination.next(c), a92.prototype._complete.call(this);
  }, u2;
}(Subscriber), BufferSkipCountSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2, v2) {
    var S2 = a92.call(this, c) || this;
    return S2.bufferSize = l2, S2.startBufferEvery = v2, S2.buffers = [], S2.count = 0, S2;
  }
  return u2.prototype._next = function(c) {
    var l2 = this, v2 = l2.bufferSize, S2 = l2.startBufferEvery, g2 = l2.buffers, E2 = l2.count;
    this.count++, E2 % S2 === 0 && g2.push([]);
    for (var _ = g2.length; _--; ) {
      var k = g2[_];
      k.push(c), k.length === v2 && (g2.splice(_, 1), this.destination.next(k));
    }
  }, u2.prototype._complete = function() {
    for (var c = this, l2 = c.buffers, v2 = c.destination; l2.length > 0; ) {
      var S2 = l2.shift();
      S2.length > 0 && v2.next(S2);
    }
    a92.prototype._complete.call(this);
  }, u2;
}(Subscriber);
function bufferTime(a92) {
  var u2 = arguments.length, c = async;
  isScheduler(arguments[arguments.length - 1]) && (c = arguments[arguments.length - 1], u2--);
  var l2 = null;
  u2 >= 2 && (l2 = arguments[1]);
  var v2 = Number.POSITIVE_INFINITY;
  return u2 >= 3 && (v2 = arguments[2]), function(g2) {
    return g2.lift(new BufferTimeOperator(a92, l2, v2, c));
  };
}
var BufferTimeOperator = /* @__PURE__ */ function() {
  function a92(u2, c, l2, v2) {
    this.bufferTimeSpan = u2, this.bufferCreationInterval = c, this.maxBufferSize = l2, this.scheduler = v2;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new BufferTimeSubscriber(u2, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));
  }, a92;
}(), Context = /* @__PURE__ */ function() {
  function a92() {
    this.buffer = [];
  }
  return a92;
}(), BufferTimeSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2, v2, S2, g2) {
    var E2 = a92.call(this, c) || this;
    E2.bufferTimeSpan = l2, E2.bufferCreationInterval = v2, E2.maxBufferSize = S2, E2.scheduler = g2, E2.contexts = [];
    var _ = E2.openContext();
    if (E2.timespanOnly = v2 == null || v2 < 0, E2.timespanOnly) {
      var k = { subscriber: E2, context: _, bufferTimeSpan: l2 };
      E2.add(_.closeAction = g2.schedule(dispatchBufferTimeSpanOnly, l2, k));
    } else {
      var L2 = { subscriber: E2, context: _ }, M2 = { bufferTimeSpan: l2, bufferCreationInterval: v2, subscriber: E2, scheduler: g2 };
      E2.add(_.closeAction = g2.schedule(dispatchBufferClose, l2, L2)), E2.add(g2.schedule(dispatchBufferCreation, v2, M2));
    }
    return E2;
  }
  return u2.prototype._next = function(c) {
    for (var l2 = this.contexts, v2 = l2.length, S2, g2 = 0; g2 < v2; g2++) {
      var E2 = l2[g2], _ = E2.buffer;
      _.push(c), _.length == this.maxBufferSize && (S2 = E2);
    }
    S2 && this.onBufferFull(S2);
  }, u2.prototype._error = function(c) {
    this.contexts.length = 0, a92.prototype._error.call(this, c);
  }, u2.prototype._complete = function() {
    for (var c = this, l2 = c.contexts, v2 = c.destination; l2.length > 0; ) {
      var S2 = l2.shift();
      v2.next(S2.buffer);
    }
    a92.prototype._complete.call(this);
  }, u2.prototype._unsubscribe = function() {
    this.contexts = null;
  }, u2.prototype.onBufferFull = function(c) {
    this.closeContext(c);
    var l2 = c.closeAction;
    if (l2.unsubscribe(), this.remove(l2), !this.closed && this.timespanOnly) {
      c = this.openContext();
      var v2 = this.bufferTimeSpan, S2 = { subscriber: this, context: c, bufferTimeSpan: v2 };
      this.add(c.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, v2, S2));
    }
  }, u2.prototype.openContext = function() {
    var c = new Context();
    return this.contexts.push(c), c;
  }, u2.prototype.closeContext = function(c) {
    this.destination.next(c.buffer);
    var l2 = this.contexts, v2 = l2 ? l2.indexOf(c) : -1;
    v2 >= 0 && l2.splice(l2.indexOf(c), 1);
  }, u2;
}(Subscriber);
function dispatchBufferTimeSpanOnly(a92) {
  var u2 = a92.subscriber, c = a92.context;
  c && u2.closeContext(c), u2.closed || (a92.context = u2.openContext(), a92.context.closeAction = this.schedule(a92, a92.bufferTimeSpan));
}
function dispatchBufferCreation(a92) {
  var u2 = a92.bufferCreationInterval, c = a92.bufferTimeSpan, l2 = a92.subscriber, v2 = a92.scheduler, S2 = l2.openContext(), g2 = this;
  l2.closed || (l2.add(S2.closeAction = v2.schedule(dispatchBufferClose, c, { subscriber: l2, context: S2 })), g2.schedule(a92, u2));
}
function dispatchBufferClose(a92) {
  var u2 = a92.subscriber, c = a92.context;
  u2.closeContext(c);
}
var InnerSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2, v2) {
    var S2 = a92.call(this) || this;
    return S2.parent = c, S2.outerValue = l2, S2.outerIndex = v2, S2.index = 0, S2;
  }
  return u2.prototype._next = function(c) {
    this.parent.notifyNext(this.outerValue, c, this.outerIndex, this.index++, this);
  }, u2.prototype._error = function(c) {
    this.parent.notifyError(c, this), this.unsubscribe();
  }, u2.prototype._complete = function() {
    this.parent.notifyComplete(this), this.unsubscribe();
  }, u2;
}(Subscriber);
function subscribeToResult(a92, u2, c, l2, v2) {
  if (v2 === void 0 && (v2 = new InnerSubscriber(a92, c, l2)), !v2.closed)
    return u2 instanceof Observable ? u2.subscribe(v2) : subscribeTo(u2)(v2);
}
var OuterSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2() {
    return a92 !== null && a92.apply(this, arguments) || this;
  }
  return u2.prototype.notifyNext = function(c, l2, v2, S2, g2) {
    this.destination.next(l2);
  }, u2.prototype.notifyError = function(c, l2) {
    this.destination.error(c);
  }, u2.prototype.notifyComplete = function(c) {
    this.destination.complete();
  }, u2;
}(Subscriber);
function bufferToggle(a92, u2) {
  return function(l2) {
    return l2.lift(new BufferToggleOperator(a92, u2));
  };
}
var BufferToggleOperator = /* @__PURE__ */ function() {
  function a92(u2, c) {
    this.openings = u2, this.closingSelector = c;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new BufferToggleSubscriber(u2, this.openings, this.closingSelector));
  }, a92;
}(), BufferToggleSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2, v2) {
    var S2 = a92.call(this, c) || this;
    return S2.closingSelector = v2, S2.contexts = [], S2.add(subscribeToResult(S2, l2)), S2;
  }
  return u2.prototype._next = function(c) {
    for (var l2 = this.contexts, v2 = l2.length, S2 = 0; S2 < v2; S2++)
      l2[S2].buffer.push(c);
  }, u2.prototype._error = function(c) {
    for (var l2 = this.contexts; l2.length > 0; ) {
      var v2 = l2.shift();
      v2.subscription.unsubscribe(), v2.buffer = null, v2.subscription = null;
    }
    this.contexts = null, a92.prototype._error.call(this, c);
  }, u2.prototype._complete = function() {
    for (var c = this.contexts; c.length > 0; ) {
      var l2 = c.shift();
      this.destination.next(l2.buffer), l2.subscription.unsubscribe(), l2.buffer = null, l2.subscription = null;
    }
    this.contexts = null, a92.prototype._complete.call(this);
  }, u2.prototype.notifyNext = function(c, l2) {
    c ? this.closeBuffer(c) : this.openBuffer(l2);
  }, u2.prototype.notifyComplete = function(c) {
    this.closeBuffer(c.context);
  }, u2.prototype.openBuffer = function(c) {
    try {
      var l2 = this.closingSelector, v2 = l2.call(this, c);
      v2 && this.trySubscribe(v2);
    } catch (S2) {
      this._error(S2);
    }
  }, u2.prototype.closeBuffer = function(c) {
    var l2 = this.contexts;
    if (l2 && c) {
      var v2 = c.buffer, S2 = c.subscription;
      this.destination.next(v2), l2.splice(l2.indexOf(c), 1), this.remove(S2), S2.unsubscribe();
    }
  }, u2.prototype.trySubscribe = function(c) {
    var l2 = this.contexts, v2 = [], S2 = new Subscription(), g2 = { buffer: v2, subscription: S2 };
    l2.push(g2);
    var E2 = subscribeToResult(this, c, g2);
    !E2 || E2.closed ? this.closeBuffer(g2) : (E2.context = g2, this.add(E2), S2.add(E2));
  }, u2;
}(OuterSubscriber);
function bufferWhen(a92) {
  return function(u2) {
    return u2.lift(new BufferWhenOperator(a92));
  };
}
var BufferWhenOperator = /* @__PURE__ */ function() {
  function a92(u2) {
    this.closingSelector = u2;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new BufferWhenSubscriber(u2, this.closingSelector));
  }, a92;
}(), BufferWhenSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2) {
    var v2 = a92.call(this, c) || this;
    return v2.closingSelector = l2, v2.subscribing = false, v2.openBuffer(), v2;
  }
  return u2.prototype._next = function(c) {
    this.buffer.push(c);
  }, u2.prototype._complete = function() {
    var c = this.buffer;
    c && this.destination.next(c), a92.prototype._complete.call(this);
  }, u2.prototype._unsubscribe = function() {
    this.buffer = void 0, this.subscribing = false;
  }, u2.prototype.notifyNext = function() {
    this.openBuffer();
  }, u2.prototype.notifyComplete = function() {
    this.subscribing ? this.complete() : this.openBuffer();
  }, u2.prototype.openBuffer = function() {
    var c = this.closingSubscription;
    c && (this.remove(c), c.unsubscribe());
    var l2 = this.buffer;
    this.buffer && this.destination.next(l2), this.buffer = [];
    var v2;
    try {
      var S2 = this.closingSelector;
      v2 = S2();
    } catch (g2) {
      return this.error(g2);
    }
    c = new Subscription(), this.closingSubscription = c, this.add(c), this.subscribing = true, c.add(innerSubscribe(v2, new SimpleInnerSubscriber(this))), this.subscribing = false;
  }, u2;
}(SimpleOuterSubscriber);
function catchError(a92) {
  return function(c) {
    var l2 = new CatchOperator(a92), v2 = c.lift(l2);
    return l2.caught = v2;
  };
}
var CatchOperator = /* @__PURE__ */ function() {
  function a92(u2) {
    this.selector = u2;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new CatchSubscriber(u2, this.selector, this.caught));
  }, a92;
}(), CatchSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2, v2) {
    var S2 = a92.call(this, c) || this;
    return S2.selector = l2, S2.caught = v2, S2;
  }
  return u2.prototype.error = function(c) {
    if (!this.isStopped) {
      var l2 = void 0;
      try {
        l2 = this.selector(c, this.caught);
      } catch (g2) {
        a92.prototype.error.call(this, g2);
        return;
      }
      this._unsubscribeAndRecycle();
      var v2 = new SimpleInnerSubscriber(this);
      this.add(v2);
      var S2 = innerSubscribe(l2, v2);
      S2 !== v2 && this.add(S2);
    }
  }, u2;
}(SimpleOuterSubscriber);
function scheduleArray(a92, u2) {
  return new Observable(function(c) {
    var l2 = new Subscription(), v2 = 0;
    return l2.add(u2.schedule(function() {
      if (v2 === a92.length) {
        c.complete();
        return;
      }
      c.next(a92[v2++]), c.closed || l2.add(this.schedule());
    })), l2;
  });
}
function fromArray(a92, u2) {
  return u2 ? scheduleArray(a92, u2) : new Observable(subscribeToArray(a92));
}
var NONE = {}, CombineLatestOperator = /* @__PURE__ */ function() {
  function a92(u2) {
    this.resultSelector = u2;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new CombineLatestSubscriber(u2, this.resultSelector));
  }, a92;
}(), CombineLatestSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2) {
    var v2 = a92.call(this, c) || this;
    return v2.resultSelector = l2, v2.active = 0, v2.values = [], v2.observables = [], v2;
  }
  return u2.prototype._next = function(c) {
    this.values.push(NONE), this.observables.push(c);
  }, u2.prototype._complete = function() {
    var c = this.observables, l2 = c.length;
    if (l2 === 0)
      this.destination.complete();
    else {
      this.active = l2, this.toRespond = l2;
      for (var v2 = 0; v2 < l2; v2++) {
        var S2 = c[v2];
        this.add(subscribeToResult(this, S2, void 0, v2));
      }
    }
  }, u2.prototype.notifyComplete = function(c) {
    (this.active -= 1) === 0 && this.destination.complete();
  }, u2.prototype.notifyNext = function(c, l2, v2) {
    var S2 = this.values, g2 = S2[v2], E2 = this.toRespond ? g2 === NONE ? --this.toRespond : this.toRespond : 0;
    S2[v2] = l2, E2 === 0 && (this.resultSelector ? this._tryResultSelector(S2) : this.destination.next(S2.slice()));
  }, u2.prototype._tryResultSelector = function(c) {
    var l2;
    try {
      l2 = this.resultSelector.apply(this, c);
    } catch (v2) {
      this.destination.error(v2);
      return;
    }
    this.destination.next(l2);
  }, u2;
}(OuterSubscriber);
function combineAll(a92) {
  return function(u2) {
    return u2.lift(new CombineLatestOperator(a92));
  };
}
function scheduleObservable(a92, u2) {
  return new Observable(function(c) {
    var l2 = new Subscription();
    return l2.add(u2.schedule(function() {
      var v2 = a92[observable]();
      l2.add(v2.subscribe({ next: function(S2) {
        l2.add(u2.schedule(function() {
          return c.next(S2);
        }));
      }, error: function(S2) {
        l2.add(u2.schedule(function() {
          return c.error(S2);
        }));
      }, complete: function() {
        l2.add(u2.schedule(function() {
          return c.complete();
        }));
      } }));
    })), l2;
  });
}
function schedulePromise(a92, u2) {
  return new Observable(function(c) {
    var l2 = new Subscription();
    return l2.add(u2.schedule(function() {
      return a92.then(function(v2) {
        l2.add(u2.schedule(function() {
          c.next(v2), l2.add(u2.schedule(function() {
            return c.complete();
          }));
        }));
      }, function(v2) {
        l2.add(u2.schedule(function() {
          return c.error(v2);
        }));
      });
    })), l2;
  });
}
function scheduleIterable(a92, u2) {
  if (!a92)
    throw new Error("Iterable cannot be null");
  return new Observable(function(c) {
    var l2 = new Subscription(), v2;
    return l2.add(function() {
      v2 && typeof v2.return == "function" && v2.return();
    }), l2.add(u2.schedule(function() {
      v2 = a92[iterator](), l2.add(u2.schedule(function() {
        if (!c.closed) {
          var S2, g2;
          try {
            var E2 = v2.next();
            S2 = E2.value, g2 = E2.done;
          } catch (_) {
            c.error(_);
            return;
          }
          g2 ? c.complete() : (c.next(S2), this.schedule());
        }
      }));
    })), l2;
  });
}
function isInteropObservable(a92) {
  return a92 && typeof a92[observable] == "function";
}
function isIterable(a92) {
  return a92 && typeof a92[iterator] == "function";
}
function scheduled(a92, u2) {
  if (a92 != null) {
    if (isInteropObservable(a92))
      return scheduleObservable(a92, u2);
    if (isPromise(a92))
      return schedulePromise(a92, u2);
    if (isArrayLike$1(a92))
      return scheduleArray(a92, u2);
    if (isIterable(a92) || typeof a92 == "string")
      return scheduleIterable(a92, u2);
  }
  throw new TypeError((a92 !== null && typeof a92 || a92) + " is not observable");
}
function from(a92, u2) {
  return u2 ? scheduled(a92, u2) : a92 instanceof Observable ? a92 : new Observable(subscribeTo(a92));
}
function combineLatest() {
  for (var a92 = [], u2 = 0; u2 < arguments.length; u2++)
    a92[u2] = arguments[u2];
  var c = null;
  return typeof a92[a92.length - 1] == "function" && (c = a92.pop()), a92.length === 1 && isArray$4(a92[0]) && (a92 = a92[0].slice()), function(l2) {
    return l2.lift.call(from([l2].concat(a92)), new CombineLatestOperator(c));
  };
}
function of$1() {
  for (var a92 = [], u2 = 0; u2 < arguments.length; u2++)
    a92[u2] = arguments[u2];
  var c = a92[a92.length - 1];
  return isScheduler(c) ? (a92.pop(), scheduleArray(a92, c)) : fromArray(a92);
}
function map(a92, u2) {
  return function(l2) {
    if (typeof a92 != "function")
      throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");
    return l2.lift(new MapOperator(a92, u2));
  };
}
var MapOperator = /* @__PURE__ */ function() {
  function a92(u2, c) {
    this.project = u2, this.thisArg = c;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new MapSubscriber(u2, this.project, this.thisArg));
  }, a92;
}(), MapSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2, v2) {
    var S2 = a92.call(this, c) || this;
    return S2.project = l2, S2.count = 0, S2.thisArg = v2 || S2, S2;
  }
  return u2.prototype._next = function(c) {
    var l2;
    try {
      l2 = this.project.call(this.thisArg, c, this.count++);
    } catch (v2) {
      this.destination.error(v2);
      return;
    }
    this.destination.next(l2);
  }, u2;
}(Subscriber);
function mergeMap(a92, u2, c) {
  return c === void 0 && (c = Number.POSITIVE_INFINITY), typeof u2 == "function" ? function(l2) {
    return l2.pipe(mergeMap(function(v2, S2) {
      return from(a92(v2, S2)).pipe(map(function(g2, E2) {
        return u2(v2, g2, S2, E2);
      }));
    }, c));
  } : (typeof u2 == "number" && (c = u2), function(l2) {
    return l2.lift(new MergeMapOperator(a92, c));
  });
}
var MergeMapOperator = /* @__PURE__ */ function() {
  function a92(u2, c) {
    c === void 0 && (c = Number.POSITIVE_INFINITY), this.project = u2, this.concurrent = c;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new MergeMapSubscriber(u2, this.project, this.concurrent));
  }, a92;
}(), MergeMapSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2, v2) {
    v2 === void 0 && (v2 = Number.POSITIVE_INFINITY);
    var S2 = a92.call(this, c) || this;
    return S2.project = l2, S2.concurrent = v2, S2.hasCompleted = false, S2.buffer = [], S2.active = 0, S2.index = 0, S2;
  }
  return u2.prototype._next = function(c) {
    this.active < this.concurrent ? this._tryNext(c) : this.buffer.push(c);
  }, u2.prototype._tryNext = function(c) {
    var l2, v2 = this.index++;
    try {
      l2 = this.project(c, v2);
    } catch (S2) {
      this.destination.error(S2);
      return;
    }
    this.active++, this._innerSub(l2);
  }, u2.prototype._innerSub = function(c) {
    var l2 = new SimpleInnerSubscriber(this), v2 = this.destination;
    v2.add(l2);
    var S2 = innerSubscribe(c, l2);
    S2 !== l2 && v2.add(S2);
  }, u2.prototype._complete = function() {
    this.hasCompleted = true, this.active === 0 && this.buffer.length === 0 && this.destination.complete(), this.unsubscribe();
  }, u2.prototype.notifyNext = function(c) {
    this.destination.next(c);
  }, u2.prototype.notifyComplete = function() {
    var c = this.buffer;
    this.active--, c.length > 0 ? this._next(c.shift()) : this.active === 0 && this.hasCompleted && this.destination.complete();
  }, u2;
}(SimpleOuterSubscriber), flatMap = mergeMap;
function mergeAll(a92) {
  return a92 === void 0 && (a92 = Number.POSITIVE_INFINITY), mergeMap(identity, a92);
}
function concatAll() {
  return mergeAll(1);
}
function concat$1() {
  for (var a92 = [], u2 = 0; u2 < arguments.length; u2++)
    a92[u2] = arguments[u2];
  return concatAll()(of$1.apply(void 0, a92));
}
function concat() {
  for (var a92 = [], u2 = 0; u2 < arguments.length; u2++)
    a92[u2] = arguments[u2];
  return function(c) {
    return c.lift.call(concat$1.apply(void 0, [c].concat(a92)));
  };
}
function concatMap(a92, u2) {
  return mergeMap(a92, u2, 1);
}
function concatMapTo(a92, u2) {
  return concatMap(function() {
    return a92;
  }, u2);
}
function count(a92) {
  return function(u2) {
    return u2.lift(new CountOperator(a92, u2));
  };
}
var CountOperator = /* @__PURE__ */ function() {
  function a92(u2, c) {
    this.predicate = u2, this.source = c;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new CountSubscriber(u2, this.predicate, this.source));
  }, a92;
}(), CountSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2, v2) {
    var S2 = a92.call(this, c) || this;
    return S2.predicate = l2, S2.source = v2, S2.count = 0, S2.index = 0, S2;
  }
  return u2.prototype._next = function(c) {
    this.predicate ? this._tryPredicate(c) : this.count++;
  }, u2.prototype._tryPredicate = function(c) {
    var l2;
    try {
      l2 = this.predicate(c, this.index++, this.source);
    } catch (v2) {
      this.destination.error(v2);
      return;
    }
    l2 && this.count++;
  }, u2.prototype._complete = function() {
    this.destination.next(this.count), this.destination.complete();
  }, u2;
}(Subscriber);
function debounce(a92) {
  return function(u2) {
    return u2.lift(new DebounceOperator(a92));
  };
}
var DebounceOperator = /* @__PURE__ */ function() {
  function a92(u2) {
    this.durationSelector = u2;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new DebounceSubscriber(u2, this.durationSelector));
  }, a92;
}(), DebounceSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2) {
    var v2 = a92.call(this, c) || this;
    return v2.durationSelector = l2, v2.hasValue = false, v2;
  }
  return u2.prototype._next = function(c) {
    try {
      var l2 = this.durationSelector.call(this, c);
      l2 && this._tryNext(c, l2);
    } catch (v2) {
      this.destination.error(v2);
    }
  }, u2.prototype._complete = function() {
    this.emitValue(), this.destination.complete();
  }, u2.prototype._tryNext = function(c, l2) {
    var v2 = this.durationSubscription;
    this.value = c, this.hasValue = true, v2 && (v2.unsubscribe(), this.remove(v2)), v2 = innerSubscribe(l2, new SimpleInnerSubscriber(this)), v2 && !v2.closed && this.add(this.durationSubscription = v2);
  }, u2.prototype.notifyNext = function() {
    this.emitValue();
  }, u2.prototype.notifyComplete = function() {
    this.emitValue();
  }, u2.prototype.emitValue = function() {
    if (this.hasValue) {
      var c = this.value, l2 = this.durationSubscription;
      l2 && (this.durationSubscription = void 0, l2.unsubscribe(), this.remove(l2)), this.value = void 0, this.hasValue = false, a92.prototype._next.call(this, c);
    }
  }, u2;
}(SimpleOuterSubscriber);
function debounceTime(a92, u2) {
  return u2 === void 0 && (u2 = async), function(c) {
    return c.lift(new DebounceTimeOperator(a92, u2));
  };
}
var DebounceTimeOperator = /* @__PURE__ */ function() {
  function a92(u2, c) {
    this.dueTime = u2, this.scheduler = c;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new DebounceTimeSubscriber(u2, this.dueTime, this.scheduler));
  }, a92;
}(), DebounceTimeSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2, v2) {
    var S2 = a92.call(this, c) || this;
    return S2.dueTime = l2, S2.scheduler = v2, S2.debouncedSubscription = null, S2.lastValue = null, S2.hasValue = false, S2;
  }
  return u2.prototype._next = function(c) {
    this.clearDebounce(), this.lastValue = c, this.hasValue = true, this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext$1, this.dueTime, this));
  }, u2.prototype._complete = function() {
    this.debouncedNext(), this.destination.complete();
  }, u2.prototype.debouncedNext = function() {
    if (this.clearDebounce(), this.hasValue) {
      var c = this.lastValue;
      this.lastValue = null, this.hasValue = false, this.destination.next(c);
    }
  }, u2.prototype.clearDebounce = function() {
    var c = this.debouncedSubscription;
    c !== null && (this.remove(c), c.unsubscribe(), this.debouncedSubscription = null);
  }, u2;
}(Subscriber);
function dispatchNext$1(a92) {
  a92.debouncedNext();
}
function defaultIfEmpty(a92) {
  return a92 === void 0 && (a92 = null), function(u2) {
    return u2.lift(new DefaultIfEmptyOperator(a92));
  };
}
var DefaultIfEmptyOperator = /* @__PURE__ */ function() {
  function a92(u2) {
    this.defaultValue = u2;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new DefaultIfEmptySubscriber(u2, this.defaultValue));
  }, a92;
}(), DefaultIfEmptySubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2) {
    var v2 = a92.call(this, c) || this;
    return v2.defaultValue = l2, v2.isEmpty = true, v2;
  }
  return u2.prototype._next = function(c) {
    this.isEmpty = false, this.destination.next(c);
  }, u2.prototype._complete = function() {
    this.isEmpty && this.destination.next(this.defaultValue), this.destination.complete();
  }, u2;
}(Subscriber);
function isDate$1(a92) {
  return a92 instanceof Date && !isNaN(+a92);
}
var EMPTY = /* @__PURE__ */ new Observable(function(a92) {
  return a92.complete();
});
function empty$1(a92) {
  return a92 ? emptyScheduled(a92) : EMPTY;
}
function emptyScheduled(a92) {
  return new Observable(function(u2) {
    return a92.schedule(function() {
      return u2.complete();
    });
  });
}
function throwError(a92, u2) {
  return u2 ? new Observable(function(c) {
    return u2.schedule(dispatch, 0, { error: a92, subscriber: c });
  }) : new Observable(function(c) {
    return c.error(a92);
  });
}
function dispatch(a92) {
  var u2 = a92.error, c = a92.subscriber;
  c.error(u2);
}
var Notification = /* @__PURE__ */ function() {
  function a92(u2, c, l2) {
    this.kind = u2, this.value = c, this.error = l2, this.hasValue = u2 === "N";
  }
  return a92.prototype.observe = function(u2) {
    switch (this.kind) {
      case "N":
        return u2.next && u2.next(this.value);
      case "E":
        return u2.error && u2.error(this.error);
      case "C":
        return u2.complete && u2.complete();
    }
  }, a92.prototype.do = function(u2, c, l2) {
    var v2 = this.kind;
    switch (v2) {
      case "N":
        return u2 && u2(this.value);
      case "E":
        return c && c(this.error);
      case "C":
        return l2 && l2();
    }
  }, a92.prototype.accept = function(u2, c, l2) {
    return u2 && typeof u2.next == "function" ? this.observe(u2) : this.do(u2, c, l2);
  }, a92.prototype.toObservable = function() {
    var u2 = this.kind;
    switch (u2) {
      case "N":
        return of$1(this.value);
      case "E":
        return throwError(this.error);
      case "C":
        return empty$1();
    }
    throw new Error("unexpected notification kind value");
  }, a92.createNext = function(u2) {
    return typeof u2 < "u" ? new a92("N", u2) : a92.undefinedValueNotification;
  }, a92.createError = function(u2) {
    return new a92("E", void 0, u2);
  }, a92.createComplete = function() {
    return a92.completeNotification;
  }, a92.completeNotification = new a92("C"), a92.undefinedValueNotification = new a92("N", void 0), a92;
}();
function delay(a92, u2) {
  u2 === void 0 && (u2 = async);
  var c = isDate$1(a92), l2 = c ? +a92 - u2.now() : Math.abs(a92);
  return function(v2) {
    return v2.lift(new DelayOperator(l2, u2));
  };
}
var DelayOperator = /* @__PURE__ */ function() {
  function a92(u2, c) {
    this.delay = u2, this.scheduler = c;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new DelaySubscriber(u2, this.delay, this.scheduler));
  }, a92;
}(), DelaySubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2, v2) {
    var S2 = a92.call(this, c) || this;
    return S2.delay = l2, S2.scheduler = v2, S2.queue = [], S2.active = false, S2.errored = false, S2;
  }
  return u2.dispatch = function(c) {
    for (var l2 = c.source, v2 = l2.queue, S2 = c.scheduler, g2 = c.destination; v2.length > 0 && v2[0].time - S2.now() <= 0; )
      v2.shift().notification.observe(g2);
    if (v2.length > 0) {
      var E2 = Math.max(0, v2[0].time - S2.now());
      this.schedule(c, E2);
    } else
      this.unsubscribe(), l2.active = false;
  }, u2.prototype._schedule = function(c) {
    this.active = true;
    var l2 = this.destination;
    l2.add(c.schedule(u2.dispatch, this.delay, { source: this, destination: this.destination, scheduler: c }));
  }, u2.prototype.scheduleNotification = function(c) {
    if (this.errored !== true) {
      var l2 = this.scheduler, v2 = new DelayMessage(l2.now() + this.delay, c);
      this.queue.push(v2), this.active === false && this._schedule(l2);
    }
  }, u2.prototype._next = function(c) {
    this.scheduleNotification(Notification.createNext(c));
  }, u2.prototype._error = function(c) {
    this.errored = true, this.queue = [], this.destination.error(c), this.unsubscribe();
  }, u2.prototype._complete = function() {
    this.scheduleNotification(Notification.createComplete()), this.unsubscribe();
  }, u2;
}(Subscriber), DelayMessage = /* @__PURE__ */ function() {
  function a92(u2, c) {
    this.time = u2, this.notification = c;
  }
  return a92;
}();
function delayWhen(a92, u2) {
  return u2 ? function(c) {
    return new SubscriptionDelayObservable(c, u2).lift(new DelayWhenOperator(a92));
  } : function(c) {
    return c.lift(new DelayWhenOperator(a92));
  };
}
var DelayWhenOperator = /* @__PURE__ */ function() {
  function a92(u2) {
    this.delayDurationSelector = u2;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new DelayWhenSubscriber(u2, this.delayDurationSelector));
  }, a92;
}(), DelayWhenSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2) {
    var v2 = a92.call(this, c) || this;
    return v2.delayDurationSelector = l2, v2.completed = false, v2.delayNotifierSubscriptions = [], v2.index = 0, v2;
  }
  return u2.prototype.notifyNext = function(c, l2, v2, S2, g2) {
    this.destination.next(c), this.removeSubscription(g2), this.tryComplete();
  }, u2.prototype.notifyError = function(c, l2) {
    this._error(c);
  }, u2.prototype.notifyComplete = function(c) {
    var l2 = this.removeSubscription(c);
    l2 && this.destination.next(l2), this.tryComplete();
  }, u2.prototype._next = function(c) {
    var l2 = this.index++;
    try {
      var v2 = this.delayDurationSelector(c, l2);
      v2 && this.tryDelay(v2, c);
    } catch (S2) {
      this.destination.error(S2);
    }
  }, u2.prototype._complete = function() {
    this.completed = true, this.tryComplete(), this.unsubscribe();
  }, u2.prototype.removeSubscription = function(c) {
    c.unsubscribe();
    var l2 = this.delayNotifierSubscriptions.indexOf(c);
    return l2 !== -1 && this.delayNotifierSubscriptions.splice(l2, 1), c.outerValue;
  }, u2.prototype.tryDelay = function(c, l2) {
    var v2 = subscribeToResult(this, c, l2);
    if (v2 && !v2.closed) {
      var S2 = this.destination;
      S2.add(v2), this.delayNotifierSubscriptions.push(v2);
    }
  }, u2.prototype.tryComplete = function() {
    this.completed && this.delayNotifierSubscriptions.length === 0 && this.destination.complete();
  }, u2;
}(OuterSubscriber), SubscriptionDelayObservable = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2) {
    var v2 = a92.call(this) || this;
    return v2.source = c, v2.subscriptionDelay = l2, v2;
  }
  return u2.prototype._subscribe = function(c) {
    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(c, this.source));
  }, u2;
}(Observable), SubscriptionDelaySubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2) {
    var v2 = a92.call(this) || this;
    return v2.parent = c, v2.source = l2, v2.sourceSubscribed = false, v2;
  }
  return u2.prototype._next = function(c) {
    this.subscribeToSource();
  }, u2.prototype._error = function(c) {
    this.unsubscribe(), this.parent.error(c);
  }, u2.prototype._complete = function() {
    this.unsubscribe(), this.subscribeToSource();
  }, u2.prototype.subscribeToSource = function() {
    this.sourceSubscribed || (this.sourceSubscribed = true, this.unsubscribe(), this.source.subscribe(this.parent));
  }, u2;
}(Subscriber);
function dematerialize() {
  return function(u2) {
    return u2.lift(new DeMaterializeOperator());
  };
}
var DeMaterializeOperator = /* @__PURE__ */ function() {
  function a92() {
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new DeMaterializeSubscriber(u2));
  }, a92;
}(), DeMaterializeSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c) {
    return a92.call(this, c) || this;
  }
  return u2.prototype._next = function(c) {
    c.observe(this.destination);
  }, u2;
}(Subscriber);
function distinct(a92, u2) {
  return function(c) {
    return c.lift(new DistinctOperator(a92, u2));
  };
}
var DistinctOperator = /* @__PURE__ */ function() {
  function a92(u2, c) {
    this.keySelector = u2, this.flushes = c;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new DistinctSubscriber(u2, this.keySelector, this.flushes));
  }, a92;
}(), DistinctSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2, v2) {
    var S2 = a92.call(this, c) || this;
    return S2.keySelector = l2, S2.values = /* @__PURE__ */ new Set(), v2 && S2.add(innerSubscribe(v2, new SimpleInnerSubscriber(S2))), S2;
  }
  return u2.prototype.notifyNext = function() {
    this.values.clear();
  }, u2.prototype.notifyError = function(c) {
    this._error(c);
  }, u2.prototype._next = function(c) {
    this.keySelector ? this._useKeySelector(c) : this._finalizeNext(c, c);
  }, u2.prototype._useKeySelector = function(c) {
    var l2, v2 = this.destination;
    try {
      l2 = this.keySelector(c);
    } catch (S2) {
      v2.error(S2);
      return;
    }
    this._finalizeNext(l2, c);
  }, u2.prototype._finalizeNext = function(c, l2) {
    var v2 = this.values;
    v2.has(c) || (v2.add(c), this.destination.next(l2));
  }, u2;
}(SimpleOuterSubscriber);
function distinctUntilChanged(a92, u2) {
  return function(c) {
    return c.lift(new DistinctUntilChangedOperator(a92, u2));
  };
}
var DistinctUntilChangedOperator = /* @__PURE__ */ function() {
  function a92(u2, c) {
    this.compare = u2, this.keySelector = c;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new DistinctUntilChangedSubscriber(u2, this.compare, this.keySelector));
  }, a92;
}(), DistinctUntilChangedSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2, v2) {
    var S2 = a92.call(this, c) || this;
    return S2.keySelector = v2, S2.hasKey = false, typeof l2 == "function" && (S2.compare = l2), S2;
  }
  return u2.prototype.compare = function(c, l2) {
    return c === l2;
  }, u2.prototype._next = function(c) {
    var l2;
    try {
      var v2 = this.keySelector;
      l2 = v2 ? v2(c) : c;
    } catch (E2) {
      return this.destination.error(E2);
    }
    var S2 = false;
    if (this.hasKey)
      try {
        var g2 = this.compare;
        S2 = g2(this.key, l2);
      } catch (E2) {
        return this.destination.error(E2);
      }
    else
      this.hasKey = true;
    S2 || (this.key = l2, this.destination.next(c));
  }, u2;
}(Subscriber);
function distinctUntilKeyChanged(a92, u2) {
  return distinctUntilChanged(function(c, l2) {
    return u2 ? u2(c[a92], l2[a92]) : c[a92] === l2[a92];
  });
}
var ArgumentOutOfRangeErrorImpl = /* @__PURE__ */ function() {
  function a92() {
    return Error.call(this), this.message = "argument out of range", this.name = "ArgumentOutOfRangeError", this;
  }
  return a92.prototype = /* @__PURE__ */ Object.create(Error.prototype), a92;
}(), ArgumentOutOfRangeError = ArgumentOutOfRangeErrorImpl;
function filter(a92, u2) {
  return function(l2) {
    return l2.lift(new FilterOperator(a92, u2));
  };
}
var FilterOperator = /* @__PURE__ */ function() {
  function a92(u2, c) {
    this.predicate = u2, this.thisArg = c;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new FilterSubscriber(u2, this.predicate, this.thisArg));
  }, a92;
}(), FilterSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2, v2) {
    var S2 = a92.call(this, c) || this;
    return S2.predicate = l2, S2.thisArg = v2, S2.count = 0, S2;
  }
  return u2.prototype._next = function(c) {
    var l2;
    try {
      l2 = this.predicate.call(this.thisArg, c, this.count++);
    } catch (v2) {
      this.destination.error(v2);
      return;
    }
    l2 && this.destination.next(c);
  }, u2;
}(Subscriber), EmptyErrorImpl = /* @__PURE__ */ function() {
  function a92() {
    return Error.call(this), this.message = "no elements in sequence", this.name = "EmptyError", this;
  }
  return a92.prototype = /* @__PURE__ */ Object.create(Error.prototype), a92;
}(), EmptyError = EmptyErrorImpl;
function throwIfEmpty(a92) {
  return a92 === void 0 && (a92 = defaultErrorFactory), function(u2) {
    return u2.lift(new ThrowIfEmptyOperator(a92));
  };
}
var ThrowIfEmptyOperator = /* @__PURE__ */ function() {
  function a92(u2) {
    this.errorFactory = u2;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new ThrowIfEmptySubscriber(u2, this.errorFactory));
  }, a92;
}(), ThrowIfEmptySubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2) {
    var v2 = a92.call(this, c) || this;
    return v2.errorFactory = l2, v2.hasValue = false, v2;
  }
  return u2.prototype._next = function(c) {
    this.hasValue = true, this.destination.next(c);
  }, u2.prototype._complete = function() {
    if (this.hasValue)
      return this.destination.complete();
    var c = void 0;
    try {
      c = this.errorFactory();
    } catch (l2) {
      c = l2;
    }
    this.destination.error(c);
  }, u2;
}(Subscriber);
function defaultErrorFactory() {
  return new EmptyError();
}
function take(a92) {
  return function(u2) {
    return a92 === 0 ? empty$1() : u2.lift(new TakeOperator(a92));
  };
}
var TakeOperator = /* @__PURE__ */ function() {
  function a92(u2) {
    if (this.total = u2, this.total < 0)
      throw new ArgumentOutOfRangeError();
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new TakeSubscriber(u2, this.total));
  }, a92;
}(), TakeSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2) {
    var v2 = a92.call(this, c) || this;
    return v2.total = l2, v2.count = 0, v2;
  }
  return u2.prototype._next = function(c) {
    var l2 = this.total, v2 = ++this.count;
    v2 <= l2 && (this.destination.next(c), v2 === l2 && (this.destination.complete(), this.unsubscribe()));
  }, u2;
}(Subscriber);
function elementAt(a92, u2) {
  if (a92 < 0)
    throw new ArgumentOutOfRangeError();
  var c = arguments.length >= 2;
  return function(l2) {
    return l2.pipe(filter(function(v2, S2) {
      return S2 === a92;
    }), take(1), c ? defaultIfEmpty(u2) : throwIfEmpty(function() {
      return new ArgumentOutOfRangeError();
    }));
  };
}
function endWith() {
  for (var a92 = [], u2 = 0; u2 < arguments.length; u2++)
    a92[u2] = arguments[u2];
  return function(c) {
    return concat$1(c, of$1.apply(void 0, a92));
  };
}
function every(a92, u2) {
  return function(c) {
    return c.lift(new EveryOperator(a92, u2, c));
  };
}
var EveryOperator = /* @__PURE__ */ function() {
  function a92(u2, c, l2) {
    this.predicate = u2, this.thisArg = c, this.source = l2;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new EverySubscriber(u2, this.predicate, this.thisArg, this.source));
  }, a92;
}(), EverySubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2, v2, S2) {
    var g2 = a92.call(this, c) || this;
    return g2.predicate = l2, g2.thisArg = v2, g2.source = S2, g2.index = 0, g2.thisArg = v2 || g2, g2;
  }
  return u2.prototype.notifyComplete = function(c) {
    this.destination.next(c), this.destination.complete();
  }, u2.prototype._next = function(c) {
    var l2 = false;
    try {
      l2 = this.predicate.call(this.thisArg, c, this.index++, this.source);
    } catch (v2) {
      this.destination.error(v2);
      return;
    }
    l2 || this.notifyComplete(false);
  }, u2.prototype._complete = function() {
    this.notifyComplete(true);
  }, u2;
}(Subscriber);
function exhaust() {
  return function(a92) {
    return a92.lift(new SwitchFirstOperator());
  };
}
var SwitchFirstOperator = /* @__PURE__ */ function() {
  function a92() {
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new SwitchFirstSubscriber(u2));
  }, a92;
}(), SwitchFirstSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c) {
    var l2 = a92.call(this, c) || this;
    return l2.hasCompleted = false, l2.hasSubscription = false, l2;
  }
  return u2.prototype._next = function(c) {
    this.hasSubscription || (this.hasSubscription = true, this.add(innerSubscribe(c, new SimpleInnerSubscriber(this))));
  }, u2.prototype._complete = function() {
    this.hasCompleted = true, this.hasSubscription || this.destination.complete();
  }, u2.prototype.notifyComplete = function() {
    this.hasSubscription = false, this.hasCompleted && this.destination.complete();
  }, u2;
}(SimpleOuterSubscriber);
function exhaustMap(a92, u2) {
  return u2 ? function(c) {
    return c.pipe(exhaustMap(function(l2, v2) {
      return from(a92(l2, v2)).pipe(map(function(S2, g2) {
        return u2(l2, S2, v2, g2);
      }));
    }));
  } : function(c) {
    return c.lift(new ExhaustMapOperator(a92));
  };
}
var ExhaustMapOperator = /* @__PURE__ */ function() {
  function a92(u2) {
    this.project = u2;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new ExhaustMapSubscriber(u2, this.project));
  }, a92;
}(), ExhaustMapSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2) {
    var v2 = a92.call(this, c) || this;
    return v2.project = l2, v2.hasSubscription = false, v2.hasCompleted = false, v2.index = 0, v2;
  }
  return u2.prototype._next = function(c) {
    this.hasSubscription || this.tryNext(c);
  }, u2.prototype.tryNext = function(c) {
    var l2, v2 = this.index++;
    try {
      l2 = this.project(c, v2);
    } catch (S2) {
      this.destination.error(S2);
      return;
    }
    this.hasSubscription = true, this._innerSub(l2);
  }, u2.prototype._innerSub = function(c) {
    var l2 = new SimpleInnerSubscriber(this), v2 = this.destination;
    v2.add(l2);
    var S2 = innerSubscribe(c, l2);
    S2 !== l2 && v2.add(S2);
  }, u2.prototype._complete = function() {
    this.hasCompleted = true, this.hasSubscription || this.destination.complete(), this.unsubscribe();
  }, u2.prototype.notifyNext = function(c) {
    this.destination.next(c);
  }, u2.prototype.notifyError = function(c) {
    this.destination.error(c);
  }, u2.prototype.notifyComplete = function() {
    this.hasSubscription = false, this.hasCompleted && this.destination.complete();
  }, u2;
}(SimpleOuterSubscriber);
function expand(a92, u2, c) {
  return u2 === void 0 && (u2 = Number.POSITIVE_INFINITY), u2 = (u2 || 0) < 1 ? Number.POSITIVE_INFINITY : u2, function(l2) {
    return l2.lift(new ExpandOperator(a92, u2, c));
  };
}
var ExpandOperator = /* @__PURE__ */ function() {
  function a92(u2, c, l2) {
    this.project = u2, this.concurrent = c, this.scheduler = l2;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new ExpandSubscriber(u2, this.project, this.concurrent, this.scheduler));
  }, a92;
}(), ExpandSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2, v2, S2) {
    var g2 = a92.call(this, c) || this;
    return g2.project = l2, g2.concurrent = v2, g2.scheduler = S2, g2.index = 0, g2.active = 0, g2.hasCompleted = false, v2 < Number.POSITIVE_INFINITY && (g2.buffer = []), g2;
  }
  return u2.dispatch = function(c) {
    var l2 = c.subscriber, v2 = c.result, S2 = c.value, g2 = c.index;
    l2.subscribeToProjection(v2, S2, g2);
  }, u2.prototype._next = function(c) {
    var l2 = this.destination;
    if (l2.closed) {
      this._complete();
      return;
    }
    var v2 = this.index++;
    if (this.active < this.concurrent) {
      l2.next(c);
      try {
        var S2 = this.project, g2 = S2(c, v2);
        if (!this.scheduler)
          this.subscribeToProjection(g2, c, v2);
        else {
          var E2 = { subscriber: this, result: g2, value: c, index: v2 }, _ = this.destination;
          _.add(this.scheduler.schedule(u2.dispatch, 0, E2));
        }
      } catch (k) {
        l2.error(k);
      }
    } else
      this.buffer.push(c);
  }, u2.prototype.subscribeToProjection = function(c, l2, v2) {
    this.active++;
    var S2 = this.destination;
    S2.add(innerSubscribe(c, new SimpleInnerSubscriber(this)));
  }, u2.prototype._complete = function() {
    this.hasCompleted = true, this.hasCompleted && this.active === 0 && this.destination.complete(), this.unsubscribe();
  }, u2.prototype.notifyNext = function(c) {
    this._next(c);
  }, u2.prototype.notifyComplete = function() {
    var c = this.buffer;
    this.active--, c && c.length > 0 && this._next(c.shift()), this.hasCompleted && this.active === 0 && this.destination.complete();
  }, u2;
}(SimpleOuterSubscriber);
function finalize(a92) {
  return function(u2) {
    return u2.lift(new FinallyOperator(a92));
  };
}
var FinallyOperator = /* @__PURE__ */ function() {
  function a92(u2) {
    this.callback = u2;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new FinallySubscriber(u2, this.callback));
  }, a92;
}(), FinallySubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2) {
    var v2 = a92.call(this, c) || this;
    return v2.add(new Subscription(l2)), v2;
  }
  return u2;
}(Subscriber);
function find$1(a92, u2) {
  if (typeof a92 != "function")
    throw new TypeError("predicate is not a function");
  return function(c) {
    return c.lift(new FindValueOperator(a92, c, false, u2));
  };
}
var FindValueOperator = /* @__PURE__ */ function() {
  function a92(u2, c, l2, v2) {
    this.predicate = u2, this.source = c, this.yieldIndex = l2, this.thisArg = v2;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new FindValueSubscriber(u2, this.predicate, this.source, this.yieldIndex, this.thisArg));
  }, a92;
}(), FindValueSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2, v2, S2, g2) {
    var E2 = a92.call(this, c) || this;
    return E2.predicate = l2, E2.source = v2, E2.yieldIndex = S2, E2.thisArg = g2, E2.index = 0, E2;
  }
  return u2.prototype.notifyComplete = function(c) {
    var l2 = this.destination;
    l2.next(c), l2.complete(), this.unsubscribe();
  }, u2.prototype._next = function(c) {
    var l2 = this, v2 = l2.predicate, S2 = l2.thisArg, g2 = this.index++;
    try {
      var E2 = v2.call(S2 || this, c, g2, this.source);
      E2 && this.notifyComplete(this.yieldIndex ? g2 : c);
    } catch (_) {
      this.destination.error(_);
    }
  }, u2.prototype._complete = function() {
    this.notifyComplete(this.yieldIndex ? -1 : void 0);
  }, u2;
}(Subscriber);
function findIndex(a92, u2) {
  return function(c) {
    return c.lift(new FindValueOperator(a92, c, true, u2));
  };
}
function first(a92, u2) {
  var c = arguments.length >= 2;
  return function(l2) {
    return l2.pipe(a92 ? filter(function(v2, S2) {
      return a92(v2, S2, l2);
    }) : identity, take(1), c ? defaultIfEmpty(u2) : throwIfEmpty(function() {
      return new EmptyError();
    }));
  };
}
var ObjectUnsubscribedErrorImpl = /* @__PURE__ */ function() {
  function a92() {
    return Error.call(this), this.message = "object unsubscribed", this.name = "ObjectUnsubscribedError", this;
  }
  return a92.prototype = /* @__PURE__ */ Object.create(Error.prototype), a92;
}(), ObjectUnsubscribedError = ObjectUnsubscribedErrorImpl, SubjectSubscription = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2) {
    var v2 = a92.call(this) || this;
    return v2.subject = c, v2.subscriber = l2, v2.closed = false, v2;
  }
  return u2.prototype.unsubscribe = function() {
    if (!this.closed) {
      this.closed = true;
      var c = this.subject, l2 = c.observers;
      if (this.subject = null, !(!l2 || l2.length === 0 || c.isStopped || c.closed)) {
        var v2 = l2.indexOf(this.subscriber);
        v2 !== -1 && l2.splice(v2, 1);
      }
    }
  }, u2;
}(Subscription), SubjectSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c) {
    var l2 = a92.call(this, c) || this;
    return l2.destination = c, l2;
  }
  return u2;
}(Subscriber), Subject = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2() {
    var c = a92.call(this) || this;
    return c.observers = [], c.closed = false, c.isStopped = false, c.hasError = false, c.thrownError = null, c;
  }
  return u2.prototype[rxSubscriber] = function() {
    return new SubjectSubscriber(this);
  }, u2.prototype.lift = function(c) {
    var l2 = new AnonymousSubject(this, this);
    return l2.operator = c, l2;
  }, u2.prototype.next = function(c) {
    if (this.closed)
      throw new ObjectUnsubscribedError();
    if (!this.isStopped)
      for (var l2 = this.observers, v2 = l2.length, S2 = l2.slice(), g2 = 0; g2 < v2; g2++)
        S2[g2].next(c);
  }, u2.prototype.error = function(c) {
    if (this.closed)
      throw new ObjectUnsubscribedError();
    this.hasError = true, this.thrownError = c, this.isStopped = true;
    for (var l2 = this.observers, v2 = l2.length, S2 = l2.slice(), g2 = 0; g2 < v2; g2++)
      S2[g2].error(c);
    this.observers.length = 0;
  }, u2.prototype.complete = function() {
    if (this.closed)
      throw new ObjectUnsubscribedError();
    this.isStopped = true;
    for (var c = this.observers, l2 = c.length, v2 = c.slice(), S2 = 0; S2 < l2; S2++)
      v2[S2].complete();
    this.observers.length = 0;
  }, u2.prototype.unsubscribe = function() {
    this.isStopped = true, this.closed = true, this.observers = null;
  }, u2.prototype._trySubscribe = function(c) {
    if (this.closed)
      throw new ObjectUnsubscribedError();
    return a92.prototype._trySubscribe.call(this, c);
  }, u2.prototype._subscribe = function(c) {
    if (this.closed)
      throw new ObjectUnsubscribedError();
    return this.hasError ? (c.error(this.thrownError), Subscription.EMPTY) : this.isStopped ? (c.complete(), Subscription.EMPTY) : (this.observers.push(c), new SubjectSubscription(this, c));
  }, u2.prototype.asObservable = function() {
    var c = new Observable();
    return c.source = this, c;
  }, u2.create = function(c, l2) {
    return new AnonymousSubject(c, l2);
  }, u2;
}(Observable), AnonymousSubject = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2) {
    var v2 = a92.call(this) || this;
    return v2.destination = c, v2.source = l2, v2;
  }
  return u2.prototype.next = function(c) {
    var l2 = this.destination;
    l2 && l2.next && l2.next(c);
  }, u2.prototype.error = function(c) {
    var l2 = this.destination;
    l2 && l2.error && this.destination.error(c);
  }, u2.prototype.complete = function() {
    var c = this.destination;
    c && c.complete && this.destination.complete();
  }, u2.prototype._subscribe = function(c) {
    var l2 = this.source;
    return l2 ? this.source.subscribe(c) : Subscription.EMPTY;
  }, u2;
}(Subject);
function groupBy(a92, u2, c, l2) {
  return function(v2) {
    return v2.lift(new GroupByOperator(a92, u2, c, l2));
  };
}
var GroupByOperator = /* @__PURE__ */ function() {
  function a92(u2, c, l2, v2) {
    this.keySelector = u2, this.elementSelector = c, this.durationSelector = l2, this.subjectSelector = v2;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new GroupBySubscriber(u2, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));
  }, a92;
}(), GroupBySubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2, v2, S2, g2) {
    var E2 = a92.call(this, c) || this;
    return E2.keySelector = l2, E2.elementSelector = v2, E2.durationSelector = S2, E2.subjectSelector = g2, E2.groups = null, E2.attemptedToUnsubscribe = false, E2.count = 0, E2;
  }
  return u2.prototype._next = function(c) {
    var l2;
    try {
      l2 = this.keySelector(c);
    } catch (v2) {
      this.error(v2);
      return;
    }
    this._group(c, l2);
  }, u2.prototype._group = function(c, l2) {
    var v2 = this.groups;
    v2 || (v2 = this.groups = /* @__PURE__ */ new Map());
    var S2 = v2.get(l2), g2;
    if (this.elementSelector)
      try {
        g2 = this.elementSelector(c);
      } catch (k) {
        this.error(k);
      }
    else
      g2 = c;
    if (!S2) {
      S2 = this.subjectSelector ? this.subjectSelector() : new Subject(), v2.set(l2, S2);
      var E2 = new GroupedObservable(l2, S2, this);
      if (this.destination.next(E2), this.durationSelector) {
        var _ = void 0;
        try {
          _ = this.durationSelector(new GroupedObservable(l2, S2));
        } catch (k) {
          this.error(k);
          return;
        }
        this.add(_.subscribe(new GroupDurationSubscriber(l2, S2, this)));
      }
    }
    S2.closed || S2.next(g2);
  }, u2.prototype._error = function(c) {
    var l2 = this.groups;
    l2 && (l2.forEach(function(v2, S2) {
      v2.error(c);
    }), l2.clear()), this.destination.error(c);
  }, u2.prototype._complete = function() {
    var c = this.groups;
    c && (c.forEach(function(l2, v2) {
      l2.complete();
    }), c.clear()), this.destination.complete();
  }, u2.prototype.removeGroup = function(c) {
    this.groups.delete(c);
  }, u2.prototype.unsubscribe = function() {
    this.closed || (this.attemptedToUnsubscribe = true, this.count === 0 && a92.prototype.unsubscribe.call(this));
  }, u2;
}(Subscriber), GroupDurationSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2, v2) {
    var S2 = a92.call(this, l2) || this;
    return S2.key = c, S2.group = l2, S2.parent = v2, S2;
  }
  return u2.prototype._next = function(c) {
    this.complete();
  }, u2.prototype._unsubscribe = function() {
    var c = this, l2 = c.parent, v2 = c.key;
    this.key = this.parent = null, l2 && l2.removeGroup(v2);
  }, u2;
}(Subscriber), GroupedObservable = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2, v2) {
    var S2 = a92.call(this) || this;
    return S2.key = c, S2.groupSubject = l2, S2.refCountSubscription = v2, S2;
  }
  return u2.prototype._subscribe = function(c) {
    var l2 = new Subscription(), v2 = this, S2 = v2.refCountSubscription, g2 = v2.groupSubject;
    return S2 && !S2.closed && l2.add(new InnerRefCountSubscription(S2)), l2.add(g2.subscribe(c)), l2;
  }, u2;
}(Observable), InnerRefCountSubscription = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c) {
    var l2 = a92.call(this) || this;
    return l2.parent = c, c.count++, l2;
  }
  return u2.prototype.unsubscribe = function() {
    var c = this.parent;
    !c.closed && !this.closed && (a92.prototype.unsubscribe.call(this), c.count -= 1, c.count === 0 && c.attemptedToUnsubscribe && c.unsubscribe());
  }, u2;
}(Subscription);
function ignoreElements() {
  return function(u2) {
    return u2.lift(new IgnoreElementsOperator());
  };
}
var IgnoreElementsOperator = /* @__PURE__ */ function() {
  function a92() {
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new IgnoreElementsSubscriber(u2));
  }, a92;
}(), IgnoreElementsSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2() {
    return a92 !== null && a92.apply(this, arguments) || this;
  }
  return u2.prototype._next = function(c) {
  }, u2;
}(Subscriber);
function isEmpty() {
  return function(a92) {
    return a92.lift(new IsEmptyOperator());
  };
}
var IsEmptyOperator = /* @__PURE__ */ function() {
  function a92() {
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new IsEmptySubscriber(u2));
  }, a92;
}(), IsEmptySubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c) {
    return a92.call(this, c) || this;
  }
  return u2.prototype.notifyComplete = function(c) {
    var l2 = this.destination;
    l2.next(c), l2.complete();
  }, u2.prototype._next = function(c) {
    this.notifyComplete(false);
  }, u2.prototype._complete = function() {
    this.notifyComplete(true);
  }, u2;
}(Subscriber);
function takeLast(a92) {
  return function(c) {
    return a92 === 0 ? empty$1() : c.lift(new TakeLastOperator(a92));
  };
}
var TakeLastOperator = /* @__PURE__ */ function() {
  function a92(u2) {
    if (this.total = u2, this.total < 0)
      throw new ArgumentOutOfRangeError();
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new TakeLastSubscriber(u2, this.total));
  }, a92;
}(), TakeLastSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2) {
    var v2 = a92.call(this, c) || this;
    return v2.total = l2, v2.ring = new Array(), v2.count = 0, v2;
  }
  return u2.prototype._next = function(c) {
    var l2 = this.ring, v2 = this.total, S2 = this.count++;
    if (l2.length < v2)
      l2.push(c);
    else {
      var g2 = S2 % v2;
      l2[g2] = c;
    }
  }, u2.prototype._complete = function() {
    var c = this.destination, l2 = this.count;
    if (l2 > 0)
      for (var v2 = this.count >= this.total ? this.total : this.count, S2 = this.ring, g2 = 0; g2 < v2; g2++) {
        var E2 = l2++ % v2;
        c.next(S2[E2]);
      }
    c.complete();
  }, u2;
}(Subscriber);
function last(a92, u2) {
  var c = arguments.length >= 2;
  return function(l2) {
    return l2.pipe(a92 ? filter(function(v2, S2) {
      return a92(v2, S2, l2);
    }) : identity, takeLast(1), c ? defaultIfEmpty(u2) : throwIfEmpty(function() {
      return new EmptyError();
    }));
  };
}
function mapTo(a92) {
  return function(u2) {
    return u2.lift(new MapToOperator(a92));
  };
}
var MapToOperator = /* @__PURE__ */ function() {
  function a92(u2) {
    this.value = u2;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new MapToSubscriber(u2, this.value));
  }, a92;
}(), MapToSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2) {
    var v2 = a92.call(this, c) || this;
    return v2.value = l2, v2;
  }
  return u2.prototype._next = function(c) {
    this.destination.next(this.value);
  }, u2;
}(Subscriber);
function materialize() {
  return function(u2) {
    return u2.lift(new MaterializeOperator());
  };
}
var MaterializeOperator = /* @__PURE__ */ function() {
  function a92() {
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new MaterializeSubscriber(u2));
  }, a92;
}(), MaterializeSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c) {
    return a92.call(this, c) || this;
  }
  return u2.prototype._next = function(c) {
    this.destination.next(Notification.createNext(c));
  }, u2.prototype._error = function(c) {
    var l2 = this.destination;
    l2.next(Notification.createError(c)), l2.complete();
  }, u2.prototype._complete = function() {
    var c = this.destination;
    c.next(Notification.createComplete()), c.complete();
  }, u2;
}(Subscriber);
function scan(a92, u2) {
  var c = false;
  return arguments.length >= 2 && (c = true), function(v2) {
    return v2.lift(new ScanOperator(a92, u2, c));
  };
}
var ScanOperator = /* @__PURE__ */ function() {
  function a92(u2, c, l2) {
    l2 === void 0 && (l2 = false), this.accumulator = u2, this.seed = c, this.hasSeed = l2;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new ScanSubscriber(u2, this.accumulator, this.seed, this.hasSeed));
  }, a92;
}(), ScanSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2, v2, S2) {
    var g2 = a92.call(this, c) || this;
    return g2.accumulator = l2, g2._seed = v2, g2.hasSeed = S2, g2.index = 0, g2;
  }
  return Object.defineProperty(u2.prototype, "seed", { get: function() {
    return this._seed;
  }, set: function(c) {
    this.hasSeed = true, this._seed = c;
  }, enumerable: true, configurable: true }), u2.prototype._next = function(c) {
    if (!this.hasSeed)
      this.seed = c, this.destination.next(c);
    else
      return this._tryNext(c);
  }, u2.prototype._tryNext = function(c) {
    var l2 = this.index++, v2;
    try {
      v2 = this.accumulator(this.seed, c, l2);
    } catch (S2) {
      this.destination.error(S2);
    }
    this.seed = v2, this.destination.next(v2);
  }, u2;
}(Subscriber);
function reduce(a92, u2) {
  return arguments.length >= 2 ? function(l2) {
    return pipe(scan(a92, u2), takeLast(1), defaultIfEmpty(u2))(l2);
  } : function(l2) {
    return pipe(scan(function(v2, S2, g2) {
      return a92(v2, S2, g2 + 1);
    }), takeLast(1))(l2);
  };
}
function max(a92) {
  var u2 = typeof a92 == "function" ? function(c, l2) {
    return a92(c, l2) > 0 ? c : l2;
  } : function(c, l2) {
    return c > l2 ? c : l2;
  };
  return reduce(u2);
}
function merge$2() {
  for (var a92 = [], u2 = 0; u2 < arguments.length; u2++)
    a92[u2] = arguments[u2];
  var c = Number.POSITIVE_INFINITY, l2 = null, v2 = a92[a92.length - 1];
  return isScheduler(v2) ? (l2 = a92.pop(), a92.length > 1 && typeof a92[a92.length - 1] == "number" && (c = a92.pop())) : typeof v2 == "number" && (c = a92.pop()), l2 === null && a92.length === 1 && a92[0] instanceof Observable ? a92[0] : mergeAll(c)(fromArray(a92, l2));
}
function merge$1() {
  for (var a92 = [], u2 = 0; u2 < arguments.length; u2++)
    a92[u2] = arguments[u2];
  return function(c) {
    return c.lift.call(merge$2.apply(void 0, [c].concat(a92)));
  };
}
function mergeMapTo(a92, u2, c) {
  return c === void 0 && (c = Number.POSITIVE_INFINITY), typeof u2 == "function" ? mergeMap(function() {
    return a92;
  }, u2, c) : (typeof u2 == "number" && (c = u2), mergeMap(function() {
    return a92;
  }, c));
}
function mergeScan(a92, u2, c) {
  return c === void 0 && (c = Number.POSITIVE_INFINITY), function(l2) {
    return l2.lift(new MergeScanOperator(a92, u2, c));
  };
}
var MergeScanOperator = /* @__PURE__ */ function() {
  function a92(u2, c, l2) {
    this.accumulator = u2, this.seed = c, this.concurrent = l2;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new MergeScanSubscriber(u2, this.accumulator, this.seed, this.concurrent));
  }, a92;
}(), MergeScanSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2, v2, S2) {
    var g2 = a92.call(this, c) || this;
    return g2.accumulator = l2, g2.acc = v2, g2.concurrent = S2, g2.hasValue = false, g2.hasCompleted = false, g2.buffer = [], g2.active = 0, g2.index = 0, g2;
  }
  return u2.prototype._next = function(c) {
    if (this.active < this.concurrent) {
      var l2 = this.index++, v2 = this.destination, S2 = void 0;
      try {
        var g2 = this.accumulator;
        S2 = g2(this.acc, c, l2);
      } catch (E2) {
        return v2.error(E2);
      }
      this.active++, this._innerSub(S2);
    } else
      this.buffer.push(c);
  }, u2.prototype._innerSub = function(c) {
    var l2 = new SimpleInnerSubscriber(this), v2 = this.destination;
    v2.add(l2);
    var S2 = innerSubscribe(c, l2);
    S2 !== l2 && v2.add(S2);
  }, u2.prototype._complete = function() {
    this.hasCompleted = true, this.active === 0 && this.buffer.length === 0 && (this.hasValue === false && this.destination.next(this.acc), this.destination.complete()), this.unsubscribe();
  }, u2.prototype.notifyNext = function(c) {
    var l2 = this.destination;
    this.acc = c, this.hasValue = true, l2.next(c);
  }, u2.prototype.notifyComplete = function() {
    var c = this.buffer;
    this.active--, c.length > 0 ? this._next(c.shift()) : this.active === 0 && this.hasCompleted && (this.hasValue === false && this.destination.next(this.acc), this.destination.complete());
  }, u2;
}(SimpleOuterSubscriber);
function min(a92) {
  var u2 = typeof a92 == "function" ? function(c, l2) {
    return a92(c, l2) < 0 ? c : l2;
  } : function(c, l2) {
    return c < l2 ? c : l2;
  };
  return reduce(u2);
}
function refCount() {
  return function(u2) {
    return u2.lift(new RefCountOperator(u2));
  };
}
var RefCountOperator = /* @__PURE__ */ function() {
  function a92(u2) {
    this.connectable = u2;
  }
  return a92.prototype.call = function(u2, c) {
    var l2 = this.connectable;
    l2._refCount++;
    var v2 = new RefCountSubscriber(u2, l2), S2 = c.subscribe(v2);
    return v2.closed || (v2.connection = l2.connect()), S2;
  }, a92;
}(), RefCountSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2) {
    var v2 = a92.call(this, c) || this;
    return v2.connectable = l2, v2;
  }
  return u2.prototype._unsubscribe = function() {
    var c = this.connectable;
    if (!c) {
      this.connection = null;
      return;
    }
    this.connectable = null;
    var l2 = c._refCount;
    if (l2 <= 0) {
      this.connection = null;
      return;
    }
    if (c._refCount = l2 - 1, l2 > 1) {
      this.connection = null;
      return;
    }
    var v2 = this.connection, S2 = c._connection;
    this.connection = null, S2 && (!v2 || S2 === v2) && S2.unsubscribe();
  }, u2;
}(Subscriber), ConnectableObservable = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2) {
    var v2 = a92.call(this) || this;
    return v2.source = c, v2.subjectFactory = l2, v2._refCount = 0, v2._isComplete = false, v2;
  }
  return u2.prototype._subscribe = function(c) {
    return this.getSubject().subscribe(c);
  }, u2.prototype.getSubject = function() {
    var c = this._subject;
    return (!c || c.isStopped) && (this._subject = this.subjectFactory()), this._subject;
  }, u2.prototype.connect = function() {
    var c = this._connection;
    return c || (this._isComplete = false, c = this._connection = new Subscription(), c.add(this.source.subscribe(new ConnectableSubscriber(this.getSubject(), this))), c.closed && (this._connection = null, c = Subscription.EMPTY)), c;
  }, u2.prototype.refCount = function() {
    return refCount()(this);
  }, u2;
}(Observable), connectableObservableDescriptor = /* @__PURE__ */ function() {
  var a92 = ConnectableObservable.prototype;
  return { operator: { value: null }, _refCount: { value: 0, writable: true }, _subject: { value: null, writable: true }, _connection: { value: null, writable: true }, _subscribe: { value: a92._subscribe }, _isComplete: { value: a92._isComplete, writable: true }, getSubject: { value: a92.getSubject }, connect: { value: a92.connect }, refCount: { value: a92.refCount } };
}(), ConnectableSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2) {
    var v2 = a92.call(this, c) || this;
    return v2.connectable = l2, v2;
  }
  return u2.prototype._error = function(c) {
    this._unsubscribe(), a92.prototype._error.call(this, c);
  }, u2.prototype._complete = function() {
    this.connectable._isComplete = true, this._unsubscribe(), a92.prototype._complete.call(this);
  }, u2.prototype._unsubscribe = function() {
    var c = this.connectable;
    if (c) {
      this.connectable = null;
      var l2 = c._connection;
      c._refCount = 0, c._subject = null, c._connection = null, l2 && l2.unsubscribe();
    }
  }, u2;
}(SubjectSubscriber);
function multicast(a92, u2) {
  return function(l2) {
    var v2;
    if (typeof a92 == "function" ? v2 = a92 : v2 = function() {
      return a92;
    }, typeof u2 == "function")
      return l2.lift(new MulticastOperator(v2, u2));
    var S2 = Object.create(l2, connectableObservableDescriptor);
    return S2.source = l2, S2.subjectFactory = v2, S2;
  };
}
var MulticastOperator = /* @__PURE__ */ function() {
  function a92(u2, c) {
    this.subjectFactory = u2, this.selector = c;
  }
  return a92.prototype.call = function(u2, c) {
    var l2 = this.selector, v2 = this.subjectFactory(), S2 = l2(v2).subscribe(u2);
    return S2.add(c.subscribe(v2)), S2;
  }, a92;
}();
function observeOn(a92, u2) {
  return u2 === void 0 && (u2 = 0), function(l2) {
    return l2.lift(new ObserveOnOperator(a92, u2));
  };
}
var ObserveOnOperator = /* @__PURE__ */ function() {
  function a92(u2, c) {
    c === void 0 && (c = 0), this.scheduler = u2, this.delay = c;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new ObserveOnSubscriber(u2, this.scheduler, this.delay));
  }, a92;
}(), ObserveOnSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2, v2) {
    v2 === void 0 && (v2 = 0);
    var S2 = a92.call(this, c) || this;
    return S2.scheduler = l2, S2.delay = v2, S2;
  }
  return u2.dispatch = function(c) {
    var l2 = c.notification, v2 = c.destination;
    l2.observe(v2), this.unsubscribe();
  }, u2.prototype.scheduleMessage = function(c) {
    var l2 = this.destination;
    l2.add(this.scheduler.schedule(u2.dispatch, this.delay, new ObserveOnMessage(c, this.destination)));
  }, u2.prototype._next = function(c) {
    this.scheduleMessage(Notification.createNext(c));
  }, u2.prototype._error = function(c) {
    this.scheduleMessage(Notification.createError(c)), this.unsubscribe();
  }, u2.prototype._complete = function() {
    this.scheduleMessage(Notification.createComplete()), this.unsubscribe();
  }, u2;
}(Subscriber), ObserveOnMessage = /* @__PURE__ */ function() {
  function a92(u2, c) {
    this.notification = u2, this.destination = c;
  }
  return a92;
}();
function onErrorResumeNext() {
  for (var a92 = [], u2 = 0; u2 < arguments.length; u2++)
    a92[u2] = arguments[u2];
  return a92.length === 1 && isArray$4(a92[0]) && (a92 = a92[0]), function(c) {
    return c.lift(new OnErrorResumeNextOperator(a92));
  };
}
var OnErrorResumeNextOperator = /* @__PURE__ */ function() {
  function a92(u2) {
    this.nextSources = u2;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new OnErrorResumeNextSubscriber(u2, this.nextSources));
  }, a92;
}(), OnErrorResumeNextSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2) {
    var v2 = a92.call(this, c) || this;
    return v2.destination = c, v2.nextSources = l2, v2;
  }
  return u2.prototype.notifyError = function() {
    this.subscribeToNextSource();
  }, u2.prototype.notifyComplete = function() {
    this.subscribeToNextSource();
  }, u2.prototype._error = function(c) {
    this.subscribeToNextSource(), this.unsubscribe();
  }, u2.prototype._complete = function() {
    this.subscribeToNextSource(), this.unsubscribe();
  }, u2.prototype.subscribeToNextSource = function() {
    var c = this.nextSources.shift();
    if (c) {
      var l2 = new SimpleInnerSubscriber(this), v2 = this.destination;
      v2.add(l2);
      var S2 = innerSubscribe(c, l2);
      S2 !== l2 && v2.add(S2);
    } else
      this.destination.complete();
  }, u2;
}(SimpleOuterSubscriber);
function pairwise() {
  return function(a92) {
    return a92.lift(new PairwiseOperator());
  };
}
var PairwiseOperator = /* @__PURE__ */ function() {
  function a92() {
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new PairwiseSubscriber(u2));
  }, a92;
}(), PairwiseSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c) {
    var l2 = a92.call(this, c) || this;
    return l2.hasPrev = false, l2;
  }
  return u2.prototype._next = function(c) {
    var l2;
    this.hasPrev ? l2 = [this.prev, c] : this.hasPrev = true, this.prev = c, l2 && this.destination.next(l2);
  }, u2;
}(Subscriber);
function not(a92, u2) {
  function c() {
    return !c.pred.apply(c.thisArg, arguments);
  }
  return c.pred = a92, c.thisArg = u2, c;
}
function partition(a92, u2) {
  return function(c) {
    return [filter(a92, u2)(c), filter(not(a92, u2))(c)];
  };
}
function pluck() {
  for (var a92 = [], u2 = 0; u2 < arguments.length; u2++)
    a92[u2] = arguments[u2];
  var c = a92.length;
  if (c === 0)
    throw new Error("list of properties cannot be empty.");
  return function(l2) {
    return map(plucker(a92, c))(l2);
  };
}
function plucker(a92, u2) {
  var c = function(l2) {
    for (var v2 = l2, S2 = 0; S2 < u2; S2++) {
      var g2 = v2 != null ? v2[a92[S2]] : void 0;
      if (g2 !== void 0)
        v2 = g2;
      else
        return;
    }
    return v2;
  };
  return c;
}
function publish(a92) {
  return a92 ? multicast(function() {
    return new Subject();
  }, a92) : multicast(new Subject());
}
var BehaviorSubject = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c) {
    var l2 = a92.call(this) || this;
    return l2._value = c, l2;
  }
  return Object.defineProperty(u2.prototype, "value", { get: function() {
    return this.getValue();
  }, enumerable: true, configurable: true }), u2.prototype._subscribe = function(c) {
    var l2 = a92.prototype._subscribe.call(this, c);
    return l2 && !l2.closed && c.next(this._value), l2;
  }, u2.prototype.getValue = function() {
    if (this.hasError)
      throw this.thrownError;
    if (this.closed)
      throw new ObjectUnsubscribedError();
    return this._value;
  }, u2.prototype.next = function(c) {
    a92.prototype.next.call(this, this._value = c);
  }, u2;
}(Subject);
function publishBehavior(a92) {
  return function(u2) {
    return multicast(new BehaviorSubject(a92))(u2);
  };
}
var AsyncSubject = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2() {
    var c = a92 !== null && a92.apply(this, arguments) || this;
    return c.value = null, c.hasNext = false, c.hasCompleted = false, c;
  }
  return u2.prototype._subscribe = function(c) {
    return this.hasError ? (c.error(this.thrownError), Subscription.EMPTY) : this.hasCompleted && this.hasNext ? (c.next(this.value), c.complete(), Subscription.EMPTY) : a92.prototype._subscribe.call(this, c);
  }, u2.prototype.next = function(c) {
    this.hasCompleted || (this.value = c, this.hasNext = true);
  }, u2.prototype.error = function(c) {
    this.hasCompleted || a92.prototype.error.call(this, c);
  }, u2.prototype.complete = function() {
    this.hasCompleted = true, this.hasNext && a92.prototype.next.call(this, this.value), a92.prototype.complete.call(this);
  }, u2;
}(Subject);
function publishLast() {
  return function(a92) {
    return multicast(new AsyncSubject())(a92);
  };
}
var QueueAction = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2) {
    var v2 = a92.call(this, c, l2) || this;
    return v2.scheduler = c, v2.work = l2, v2;
  }
  return u2.prototype.schedule = function(c, l2) {
    return l2 === void 0 && (l2 = 0), l2 > 0 ? a92.prototype.schedule.call(this, c, l2) : (this.delay = l2, this.state = c, this.scheduler.flush(this), this);
  }, u2.prototype.execute = function(c, l2) {
    return l2 > 0 || this.closed ? a92.prototype.execute.call(this, c, l2) : this._execute(c, l2);
  }, u2.prototype.requestAsyncId = function(c, l2, v2) {
    return v2 === void 0 && (v2 = 0), v2 !== null && v2 > 0 || v2 === null && this.delay > 0 ? a92.prototype.requestAsyncId.call(this, c, l2, v2) : c.flush(this);
  }, u2;
}(AsyncAction), QueueScheduler = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2() {
    return a92 !== null && a92.apply(this, arguments) || this;
  }
  return u2;
}(AsyncScheduler), queueScheduler = /* @__PURE__ */ new QueueScheduler(QueueAction), queue = queueScheduler, ReplaySubject = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2, v2) {
    c === void 0 && (c = Number.POSITIVE_INFINITY), l2 === void 0 && (l2 = Number.POSITIVE_INFINITY);
    var S2 = a92.call(this) || this;
    return S2.scheduler = v2, S2._events = [], S2._infiniteTimeWindow = false, S2._bufferSize = c < 1 ? 1 : c, S2._windowTime = l2 < 1 ? 1 : l2, l2 === Number.POSITIVE_INFINITY ? (S2._infiniteTimeWindow = true, S2.next = S2.nextInfiniteTimeWindow) : S2.next = S2.nextTimeWindow, S2;
  }
  return u2.prototype.nextInfiniteTimeWindow = function(c) {
    if (!this.isStopped) {
      var l2 = this._events;
      l2.push(c), l2.length > this._bufferSize && l2.shift();
    }
    a92.prototype.next.call(this, c);
  }, u2.prototype.nextTimeWindow = function(c) {
    this.isStopped || (this._events.push(new ReplayEvent(this._getNow(), c)), this._trimBufferThenGetEvents()), a92.prototype.next.call(this, c);
  }, u2.prototype._subscribe = function(c) {
    var l2 = this._infiniteTimeWindow, v2 = l2 ? this._events : this._trimBufferThenGetEvents(), S2 = this.scheduler, g2 = v2.length, E2;
    if (this.closed)
      throw new ObjectUnsubscribedError();
    if (this.isStopped || this.hasError ? E2 = Subscription.EMPTY : (this.observers.push(c), E2 = new SubjectSubscription(this, c)), S2 && c.add(c = new ObserveOnSubscriber(c, S2)), l2)
      for (var _ = 0; _ < g2 && !c.closed; _++)
        c.next(v2[_]);
    else
      for (var _ = 0; _ < g2 && !c.closed; _++)
        c.next(v2[_].value);
    return this.hasError ? c.error(this.thrownError) : this.isStopped && c.complete(), E2;
  }, u2.prototype._getNow = function() {
    return (this.scheduler || queue).now();
  }, u2.prototype._trimBufferThenGetEvents = function() {
    for (var c = this._getNow(), l2 = this._bufferSize, v2 = this._windowTime, S2 = this._events, g2 = S2.length, E2 = 0; E2 < g2 && !(c - S2[E2].time < v2); )
      E2++;
    return g2 > l2 && (E2 = Math.max(E2, g2 - l2)), E2 > 0 && S2.splice(0, E2), S2;
  }, u2;
}(Subject), ReplayEvent = /* @__PURE__ */ function() {
  function a92(u2, c) {
    this.time = u2, this.value = c;
  }
  return a92;
}();
function publishReplay(a92, u2, c, l2) {
  c && typeof c != "function" && (l2 = c);
  var v2 = typeof c == "function" ? c : void 0, S2 = new ReplaySubject(a92, u2, l2);
  return function(g2) {
    return multicast(function() {
      return S2;
    }, v2)(g2);
  };
}
function race$1() {
  for (var a92 = [], u2 = 0; u2 < arguments.length; u2++)
    a92[u2] = arguments[u2];
  if (a92.length === 1)
    if (isArray$4(a92[0]))
      a92 = a92[0];
    else
      return a92[0];
  return fromArray(a92, void 0).lift(new RaceOperator());
}
var RaceOperator = /* @__PURE__ */ function() {
  function a92() {
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new RaceSubscriber(u2));
  }, a92;
}(), RaceSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c) {
    var l2 = a92.call(this, c) || this;
    return l2.hasFirst = false, l2.observables = [], l2.subscriptions = [], l2;
  }
  return u2.prototype._next = function(c) {
    this.observables.push(c);
  }, u2.prototype._complete = function() {
    var c = this.observables, l2 = c.length;
    if (l2 === 0)
      this.destination.complete();
    else {
      for (var v2 = 0; v2 < l2 && !this.hasFirst; v2++) {
        var S2 = c[v2], g2 = subscribeToResult(this, S2, void 0, v2);
        this.subscriptions && this.subscriptions.push(g2), this.add(g2);
      }
      this.observables = null;
    }
  }, u2.prototype.notifyNext = function(c, l2, v2) {
    if (!this.hasFirst) {
      this.hasFirst = true;
      for (var S2 = 0; S2 < this.subscriptions.length; S2++)
        if (S2 !== v2) {
          var g2 = this.subscriptions[S2];
          g2.unsubscribe(), this.remove(g2);
        }
      this.subscriptions = null;
    }
    this.destination.next(l2);
  }, u2;
}(OuterSubscriber);
function race() {
  for (var a92 = [], u2 = 0; u2 < arguments.length; u2++)
    a92[u2] = arguments[u2];
  return function(l2) {
    return a92.length === 1 && isArray$4(a92[0]) && (a92 = a92[0]), l2.lift.call(race$1.apply(void 0, [l2].concat(a92)));
  };
}
function repeat(a92) {
  return a92 === void 0 && (a92 = -1), function(u2) {
    return a92 === 0 ? empty$1() : a92 < 0 ? u2.lift(new RepeatOperator(-1, u2)) : u2.lift(new RepeatOperator(a92 - 1, u2));
  };
}
var RepeatOperator = /* @__PURE__ */ function() {
  function a92(u2, c) {
    this.count = u2, this.source = c;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new RepeatSubscriber(u2, this.count, this.source));
  }, a92;
}(), RepeatSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2, v2) {
    var S2 = a92.call(this, c) || this;
    return S2.count = l2, S2.source = v2, S2;
  }
  return u2.prototype.complete = function() {
    if (!this.isStopped) {
      var c = this, l2 = c.source, v2 = c.count;
      if (v2 === 0)
        return a92.prototype.complete.call(this);
      v2 > -1 && (this.count = v2 - 1), l2.subscribe(this._unsubscribeAndRecycle());
    }
  }, u2;
}(Subscriber);
function repeatWhen(a92) {
  return function(u2) {
    return u2.lift(new RepeatWhenOperator(a92));
  };
}
var RepeatWhenOperator = /* @__PURE__ */ function() {
  function a92(u2) {
    this.notifier = u2;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new RepeatWhenSubscriber(u2, this.notifier, c));
  }, a92;
}(), RepeatWhenSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2, v2) {
    var S2 = a92.call(this, c) || this;
    return S2.notifier = l2, S2.source = v2, S2.sourceIsBeingSubscribedTo = true, S2;
  }
  return u2.prototype.notifyNext = function() {
    this.sourceIsBeingSubscribedTo = true, this.source.subscribe(this);
  }, u2.prototype.notifyComplete = function() {
    if (this.sourceIsBeingSubscribedTo === false)
      return a92.prototype.complete.call(this);
  }, u2.prototype.complete = function() {
    if (this.sourceIsBeingSubscribedTo = false, !this.isStopped) {
      if (this.retries || this.subscribeToRetries(), !this.retriesSubscription || this.retriesSubscription.closed)
        return a92.prototype.complete.call(this);
      this._unsubscribeAndRecycle(), this.notifications.next(void 0);
    }
  }, u2.prototype._unsubscribe = function() {
    var c = this, l2 = c.notifications, v2 = c.retriesSubscription;
    l2 && (l2.unsubscribe(), this.notifications = void 0), v2 && (v2.unsubscribe(), this.retriesSubscription = void 0), this.retries = void 0;
  }, u2.prototype._unsubscribeAndRecycle = function() {
    var c = this._unsubscribe;
    return this._unsubscribe = null, a92.prototype._unsubscribeAndRecycle.call(this), this._unsubscribe = c, this;
  }, u2.prototype.subscribeToRetries = function() {
    this.notifications = new Subject();
    var c;
    try {
      var l2 = this.notifier;
      c = l2(this.notifications);
    } catch {
      return a92.prototype.complete.call(this);
    }
    this.retries = c, this.retriesSubscription = innerSubscribe(c, new SimpleInnerSubscriber(this));
  }, u2;
}(SimpleOuterSubscriber);
function retry(a92) {
  return a92 === void 0 && (a92 = -1), function(u2) {
    return u2.lift(new RetryOperator(a92, u2));
  };
}
var RetryOperator = /* @__PURE__ */ function() {
  function a92(u2, c) {
    this.count = u2, this.source = c;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new RetrySubscriber(u2, this.count, this.source));
  }, a92;
}(), RetrySubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2, v2) {
    var S2 = a92.call(this, c) || this;
    return S2.count = l2, S2.source = v2, S2;
  }
  return u2.prototype.error = function(c) {
    if (!this.isStopped) {
      var l2 = this, v2 = l2.source, S2 = l2.count;
      if (S2 === 0)
        return a92.prototype.error.call(this, c);
      S2 > -1 && (this.count = S2 - 1), v2.subscribe(this._unsubscribeAndRecycle());
    }
  }, u2;
}(Subscriber);
function retryWhen(a92) {
  return function(u2) {
    return u2.lift(new RetryWhenOperator(a92, u2));
  };
}
var RetryWhenOperator = /* @__PURE__ */ function() {
  function a92(u2, c) {
    this.notifier = u2, this.source = c;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new RetryWhenSubscriber(u2, this.notifier, this.source));
  }, a92;
}(), RetryWhenSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2, v2) {
    var S2 = a92.call(this, c) || this;
    return S2.notifier = l2, S2.source = v2, S2;
  }
  return u2.prototype.error = function(c) {
    if (!this.isStopped) {
      var l2 = this.errors, v2 = this.retries, S2 = this.retriesSubscription;
      if (v2)
        this.errors = void 0, this.retriesSubscription = void 0;
      else {
        l2 = new Subject();
        try {
          var g2 = this.notifier;
          v2 = g2(l2);
        } catch (E2) {
          return a92.prototype.error.call(this, E2);
        }
        S2 = innerSubscribe(v2, new SimpleInnerSubscriber(this));
      }
      this._unsubscribeAndRecycle(), this.errors = l2, this.retries = v2, this.retriesSubscription = S2, l2.next(c);
    }
  }, u2.prototype._unsubscribe = function() {
    var c = this, l2 = c.errors, v2 = c.retriesSubscription;
    l2 && (l2.unsubscribe(), this.errors = void 0), v2 && (v2.unsubscribe(), this.retriesSubscription = void 0), this.retries = void 0;
  }, u2.prototype.notifyNext = function() {
    var c = this._unsubscribe;
    this._unsubscribe = null, this._unsubscribeAndRecycle(), this._unsubscribe = c, this.source.subscribe(this);
  }, u2;
}(SimpleOuterSubscriber);
function sample(a92) {
  return function(u2) {
    return u2.lift(new SampleOperator(a92));
  };
}
var SampleOperator = /* @__PURE__ */ function() {
  function a92(u2) {
    this.notifier = u2;
  }
  return a92.prototype.call = function(u2, c) {
    var l2 = new SampleSubscriber(u2), v2 = c.subscribe(l2);
    return v2.add(innerSubscribe(this.notifier, new SimpleInnerSubscriber(l2))), v2;
  }, a92;
}(), SampleSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2() {
    var c = a92 !== null && a92.apply(this, arguments) || this;
    return c.hasValue = false, c;
  }
  return u2.prototype._next = function(c) {
    this.value = c, this.hasValue = true;
  }, u2.prototype.notifyNext = function() {
    this.emitValue();
  }, u2.prototype.notifyComplete = function() {
    this.emitValue();
  }, u2.prototype.emitValue = function() {
    this.hasValue && (this.hasValue = false, this.destination.next(this.value));
  }, u2;
}(SimpleOuterSubscriber);
function sampleTime(a92, u2) {
  return u2 === void 0 && (u2 = async), function(c) {
    return c.lift(new SampleTimeOperator(a92, u2));
  };
}
var SampleTimeOperator = /* @__PURE__ */ function() {
  function a92(u2, c) {
    this.period = u2, this.scheduler = c;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new SampleTimeSubscriber(u2, this.period, this.scheduler));
  }, a92;
}(), SampleTimeSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2, v2) {
    var S2 = a92.call(this, c) || this;
    return S2.period = l2, S2.scheduler = v2, S2.hasValue = false, S2.add(v2.schedule(dispatchNotification, l2, { subscriber: S2, period: l2 })), S2;
  }
  return u2.prototype._next = function(c) {
    this.lastValue = c, this.hasValue = true;
  }, u2.prototype.notifyNext = function() {
    this.hasValue && (this.hasValue = false, this.destination.next(this.lastValue));
  }, u2;
}(Subscriber);
function dispatchNotification(a92) {
  var u2 = a92.subscriber, c = a92.period;
  u2.notifyNext(), this.schedule(a92, c);
}
function sequenceEqual(a92, u2) {
  return function(c) {
    return c.lift(new SequenceEqualOperator(a92, u2));
  };
}
var SequenceEqualOperator = /* @__PURE__ */ function() {
  function a92(u2, c) {
    this.compareTo = u2, this.comparator = c;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new SequenceEqualSubscriber(u2, this.compareTo, this.comparator));
  }, a92;
}(), SequenceEqualSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2, v2) {
    var S2 = a92.call(this, c) || this;
    return S2.compareTo = l2, S2.comparator = v2, S2._a = [], S2._b = [], S2._oneComplete = false, S2.destination.add(l2.subscribe(new SequenceEqualCompareToSubscriber(c, S2))), S2;
  }
  return u2.prototype._next = function(c) {
    this._oneComplete && this._b.length === 0 ? this.emit(false) : (this._a.push(c), this.checkValues());
  }, u2.prototype._complete = function() {
    this._oneComplete ? this.emit(this._a.length === 0 && this._b.length === 0) : this._oneComplete = true, this.unsubscribe();
  }, u2.prototype.checkValues = function() {
    for (var c = this, l2 = c._a, v2 = c._b, S2 = c.comparator; l2.length > 0 && v2.length > 0; ) {
      var g2 = l2.shift(), E2 = v2.shift(), _ = false;
      try {
        _ = S2 ? S2(g2, E2) : g2 === E2;
      } catch (k) {
        this.destination.error(k);
      }
      _ || this.emit(false);
    }
  }, u2.prototype.emit = function(c) {
    var l2 = this.destination;
    l2.next(c), l2.complete();
  }, u2.prototype.nextB = function(c) {
    this._oneComplete && this._a.length === 0 ? this.emit(false) : (this._b.push(c), this.checkValues());
  }, u2.prototype.completeB = function() {
    this._oneComplete ? this.emit(this._a.length === 0 && this._b.length === 0) : this._oneComplete = true;
  }, u2;
}(Subscriber), SequenceEqualCompareToSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2) {
    var v2 = a92.call(this, c) || this;
    return v2.parent = l2, v2;
  }
  return u2.prototype._next = function(c) {
    this.parent.nextB(c);
  }, u2.prototype._error = function(c) {
    this.parent.error(c), this.unsubscribe();
  }, u2.prototype._complete = function() {
    this.parent.completeB(), this.unsubscribe();
  }, u2;
}(Subscriber);
function shareSubjectFactory() {
  return new Subject();
}
function share() {
  return function(a92) {
    return refCount()(multicast(shareSubjectFactory)(a92));
  };
}
function shareReplay(a92, u2, c) {
  var l2;
  return a92 && typeof a92 == "object" ? l2 = a92 : l2 = { bufferSize: a92, windowTime: u2, refCount: false, scheduler: c }, function(v2) {
    return v2.lift(shareReplayOperator(l2));
  };
}
function shareReplayOperator(a92) {
  var u2 = a92.bufferSize, c = u2 === void 0 ? Number.POSITIVE_INFINITY : u2, l2 = a92.windowTime, v2 = l2 === void 0 ? Number.POSITIVE_INFINITY : l2, S2 = a92.refCount, g2 = a92.scheduler, E2, _ = 0, k, L2 = false, M2 = false;
  return function(J2) {
    _++;
    var V2;
    !E2 || L2 ? (L2 = false, E2 = new ReplaySubject(c, v2, g2), V2 = E2.subscribe(this), k = J2.subscribe({ next: function(q2) {
      E2.next(q2);
    }, error: function(q2) {
      L2 = true, E2.error(q2);
    }, complete: function() {
      M2 = true, k = void 0, E2.complete();
    } }), M2 && (k = void 0)) : V2 = E2.subscribe(this), this.add(function() {
      _--, V2.unsubscribe(), V2 = void 0, k && !M2 && S2 && _ === 0 && (k.unsubscribe(), k = void 0, E2 = void 0);
    });
  };
}
function single(a92) {
  return function(u2) {
    return u2.lift(new SingleOperator(a92, u2));
  };
}
var SingleOperator = /* @__PURE__ */ function() {
  function a92(u2, c) {
    this.predicate = u2, this.source = c;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new SingleSubscriber(u2, this.predicate, this.source));
  }, a92;
}(), SingleSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2, v2) {
    var S2 = a92.call(this, c) || this;
    return S2.predicate = l2, S2.source = v2, S2.seenValue = false, S2.index = 0, S2;
  }
  return u2.prototype.applySingleValue = function(c) {
    this.seenValue ? this.destination.error("Sequence contains more than one element") : (this.seenValue = true, this.singleValue = c);
  }, u2.prototype._next = function(c) {
    var l2 = this.index++;
    this.predicate ? this.tryNext(c, l2) : this.applySingleValue(c);
  }, u2.prototype.tryNext = function(c, l2) {
    try {
      this.predicate(c, l2, this.source) && this.applySingleValue(c);
    } catch (v2) {
      this.destination.error(v2);
    }
  }, u2.prototype._complete = function() {
    var c = this.destination;
    this.index > 0 ? (c.next(this.seenValue ? this.singleValue : void 0), c.complete()) : c.error(new EmptyError());
  }, u2;
}(Subscriber);
function skip(a92) {
  return function(u2) {
    return u2.lift(new SkipOperator(a92));
  };
}
var SkipOperator = /* @__PURE__ */ function() {
  function a92(u2) {
    this.total = u2;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new SkipSubscriber(u2, this.total));
  }, a92;
}(), SkipSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2) {
    var v2 = a92.call(this, c) || this;
    return v2.total = l2, v2.count = 0, v2;
  }
  return u2.prototype._next = function(c) {
    ++this.count > this.total && this.destination.next(c);
  }, u2;
}(Subscriber);
function skipLast(a92) {
  return function(u2) {
    return u2.lift(new SkipLastOperator(a92));
  };
}
var SkipLastOperator = /* @__PURE__ */ function() {
  function a92(u2) {
    if (this._skipCount = u2, this._skipCount < 0)
      throw new ArgumentOutOfRangeError();
  }
  return a92.prototype.call = function(u2, c) {
    return this._skipCount === 0 ? c.subscribe(new Subscriber(u2)) : c.subscribe(new SkipLastSubscriber(u2, this._skipCount));
  }, a92;
}(), SkipLastSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2) {
    var v2 = a92.call(this, c) || this;
    return v2._skipCount = l2, v2._count = 0, v2._ring = new Array(l2), v2;
  }
  return u2.prototype._next = function(c) {
    var l2 = this._skipCount, v2 = this._count++;
    if (v2 < l2)
      this._ring[v2] = c;
    else {
      var S2 = v2 % l2, g2 = this._ring, E2 = g2[S2];
      g2[S2] = c, this.destination.next(E2);
    }
  }, u2;
}(Subscriber);
function skipUntil(a92) {
  return function(u2) {
    return u2.lift(new SkipUntilOperator(a92));
  };
}
var SkipUntilOperator = /* @__PURE__ */ function() {
  function a92(u2) {
    this.notifier = u2;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new SkipUntilSubscriber(u2, this.notifier));
  }, a92;
}(), SkipUntilSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2) {
    var v2 = a92.call(this, c) || this;
    v2.hasValue = false;
    var S2 = new SimpleInnerSubscriber(v2);
    v2.add(S2), v2.innerSubscription = S2;
    var g2 = innerSubscribe(l2, S2);
    return g2 !== S2 && (v2.add(g2), v2.innerSubscription = g2), v2;
  }
  return u2.prototype._next = function(c) {
    this.hasValue && a92.prototype._next.call(this, c);
  }, u2.prototype.notifyNext = function() {
    this.hasValue = true, this.innerSubscription && this.innerSubscription.unsubscribe();
  }, u2.prototype.notifyComplete = function() {
  }, u2;
}(SimpleOuterSubscriber);
function skipWhile(a92) {
  return function(u2) {
    return u2.lift(new SkipWhileOperator(a92));
  };
}
var SkipWhileOperator = /* @__PURE__ */ function() {
  function a92(u2) {
    this.predicate = u2;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new SkipWhileSubscriber(u2, this.predicate));
  }, a92;
}(), SkipWhileSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2) {
    var v2 = a92.call(this, c) || this;
    return v2.predicate = l2, v2.skipping = true, v2.index = 0, v2;
  }
  return u2.prototype._next = function(c) {
    var l2 = this.destination;
    this.skipping && this.tryCallPredicate(c), this.skipping || l2.next(c);
  }, u2.prototype.tryCallPredicate = function(c) {
    try {
      var l2 = this.predicate(c, this.index++);
      this.skipping = !!l2;
    } catch (v2) {
      this.destination.error(v2);
    }
  }, u2;
}(Subscriber);
function startWith() {
  for (var a92 = [], u2 = 0; u2 < arguments.length; u2++)
    a92[u2] = arguments[u2];
  var c = a92[a92.length - 1];
  return isScheduler(c) ? (a92.pop(), function(l2) {
    return concat$1(a92, l2, c);
  }) : function(l2) {
    return concat$1(a92, l2);
  };
}
var nextHandle = 1, RESOLVED = /* @__PURE__ */ function() {
  return /* @__PURE__ */ Promise.resolve();
}(), activeHandles = {};
function findAndClearHandle(a92) {
  return a92 in activeHandles ? (delete activeHandles[a92], true) : false;
}
var Immediate = { setImmediate: function(a92) {
  var u2 = nextHandle++;
  return activeHandles[u2] = true, RESOLVED.then(function() {
    return findAndClearHandle(u2) && a92();
  }), u2;
}, clearImmediate: function(a92) {
  findAndClearHandle(a92);
} }, AsapAction = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2) {
    var v2 = a92.call(this, c, l2) || this;
    return v2.scheduler = c, v2.work = l2, v2;
  }
  return u2.prototype.requestAsyncId = function(c, l2, v2) {
    return v2 === void 0 && (v2 = 0), v2 !== null && v2 > 0 ? a92.prototype.requestAsyncId.call(this, c, l2, v2) : (c.actions.push(this), c.scheduled || (c.scheduled = Immediate.setImmediate(c.flush.bind(c, null))));
  }, u2.prototype.recycleAsyncId = function(c, l2, v2) {
    if (v2 === void 0 && (v2 = 0), v2 !== null && v2 > 0 || v2 === null && this.delay > 0)
      return a92.prototype.recycleAsyncId.call(this, c, l2, v2);
    c.actions.length === 0 && (Immediate.clearImmediate(l2), c.scheduled = void 0);
  }, u2;
}(AsyncAction), AsapScheduler = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2() {
    return a92 !== null && a92.apply(this, arguments) || this;
  }
  return u2.prototype.flush = function(c) {
    this.active = true, this.scheduled = void 0;
    var l2 = this.actions, v2, S2 = -1, g2 = l2.length;
    c = c || l2.shift();
    do
      if (v2 = c.execute(c.state, c.delay))
        break;
    while (++S2 < g2 && (c = l2.shift()));
    if (this.active = false, v2) {
      for (; ++S2 < g2 && (c = l2.shift()); )
        c.unsubscribe();
      throw v2;
    }
  }, u2;
}(AsyncScheduler), asapScheduler = /* @__PURE__ */ new AsapScheduler(AsapAction), asap = asapScheduler, SubscribeOnObservable = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2, v2) {
    l2 === void 0 && (l2 = 0), v2 === void 0 && (v2 = asap);
    var S2 = a92.call(this) || this;
    return S2.source = c, S2.delayTime = l2, S2.scheduler = v2, (!isNumeric(l2) || l2 < 0) && (S2.delayTime = 0), (!v2 || typeof v2.schedule != "function") && (S2.scheduler = asap), S2;
  }
  return u2.create = function(c, l2, v2) {
    return l2 === void 0 && (l2 = 0), v2 === void 0 && (v2 = asap), new u2(c, l2, v2);
  }, u2.dispatch = function(c) {
    var l2 = c.source, v2 = c.subscriber;
    return this.add(l2.subscribe(v2));
  }, u2.prototype._subscribe = function(c) {
    var l2 = this.delayTime, v2 = this.source, S2 = this.scheduler;
    return S2.schedule(u2.dispatch, l2, { source: v2, subscriber: c });
  }, u2;
}(Observable);
function subscribeOn(a92, u2) {
  return u2 === void 0 && (u2 = 0), function(l2) {
    return l2.lift(new SubscribeOnOperator(a92, u2));
  };
}
var SubscribeOnOperator = /* @__PURE__ */ function() {
  function a92(u2, c) {
    this.scheduler = u2, this.delay = c;
  }
  return a92.prototype.call = function(u2, c) {
    return new SubscribeOnObservable(c, this.delay, this.scheduler).subscribe(u2);
  }, a92;
}();
function switchMap(a92, u2) {
  return typeof u2 == "function" ? function(c) {
    return c.pipe(switchMap(function(l2, v2) {
      return from(a92(l2, v2)).pipe(map(function(S2, g2) {
        return u2(l2, S2, v2, g2);
      }));
    }));
  } : function(c) {
    return c.lift(new SwitchMapOperator(a92));
  };
}
var SwitchMapOperator = /* @__PURE__ */ function() {
  function a92(u2) {
    this.project = u2;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new SwitchMapSubscriber(u2, this.project));
  }, a92;
}(), SwitchMapSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2) {
    var v2 = a92.call(this, c) || this;
    return v2.project = l2, v2.index = 0, v2;
  }
  return u2.prototype._next = function(c) {
    var l2, v2 = this.index++;
    try {
      l2 = this.project(c, v2);
    } catch (S2) {
      this.destination.error(S2);
      return;
    }
    this._innerSub(l2);
  }, u2.prototype._innerSub = function(c) {
    var l2 = this.innerSubscription;
    l2 && l2.unsubscribe();
    var v2 = new SimpleInnerSubscriber(this), S2 = this.destination;
    S2.add(v2), this.innerSubscription = innerSubscribe(c, v2), this.innerSubscription !== v2 && S2.add(this.innerSubscription);
  }, u2.prototype._complete = function() {
    var c = this.innerSubscription;
    (!c || c.closed) && a92.prototype._complete.call(this), this.unsubscribe();
  }, u2.prototype._unsubscribe = function() {
    this.innerSubscription = void 0;
  }, u2.prototype.notifyComplete = function() {
    this.innerSubscription = void 0, this.isStopped && a92.prototype._complete.call(this);
  }, u2.prototype.notifyNext = function(c) {
    this.destination.next(c);
  }, u2;
}(SimpleOuterSubscriber);
function switchAll() {
  return switchMap(identity);
}
function switchMapTo(a92, u2) {
  return u2 ? switchMap(function() {
    return a92;
  }, u2) : switchMap(function() {
    return a92;
  });
}
function takeUntil(a92) {
  return function(u2) {
    return u2.lift(new TakeUntilOperator(a92));
  };
}
var TakeUntilOperator = /* @__PURE__ */ function() {
  function a92(u2) {
    this.notifier = u2;
  }
  return a92.prototype.call = function(u2, c) {
    var l2 = new TakeUntilSubscriber(u2), v2 = innerSubscribe(this.notifier, new SimpleInnerSubscriber(l2));
    return v2 && !l2.seenValue ? (l2.add(v2), c.subscribe(l2)) : l2;
  }, a92;
}(), TakeUntilSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c) {
    var l2 = a92.call(this, c) || this;
    return l2.seenValue = false, l2;
  }
  return u2.prototype.notifyNext = function() {
    this.seenValue = true, this.complete();
  }, u2.prototype.notifyComplete = function() {
  }, u2;
}(SimpleOuterSubscriber);
function takeWhile(a92, u2) {
  return u2 === void 0 && (u2 = false), function(c) {
    return c.lift(new TakeWhileOperator(a92, u2));
  };
}
var TakeWhileOperator = /* @__PURE__ */ function() {
  function a92(u2, c) {
    this.predicate = u2, this.inclusive = c;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new TakeWhileSubscriber(u2, this.predicate, this.inclusive));
  }, a92;
}(), TakeWhileSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2, v2) {
    var S2 = a92.call(this, c) || this;
    return S2.predicate = l2, S2.inclusive = v2, S2.index = 0, S2;
  }
  return u2.prototype._next = function(c) {
    var l2 = this.destination, v2;
    try {
      v2 = this.predicate(c, this.index++);
    } catch (S2) {
      l2.error(S2);
      return;
    }
    this.nextOrComplete(c, v2);
  }, u2.prototype.nextOrComplete = function(c, l2) {
    var v2 = this.destination;
    l2 ? v2.next(c) : (this.inclusive && v2.next(c), v2.complete());
  }, u2;
}(Subscriber);
function noop$1() {
}
function tap(a92, u2, c) {
  return function(v2) {
    return v2.lift(new DoOperator(a92, u2, c));
  };
}
var DoOperator = /* @__PURE__ */ function() {
  function a92(u2, c, l2) {
    this.nextOrObserver = u2, this.error = c, this.complete = l2;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new TapSubscriber(u2, this.nextOrObserver, this.error, this.complete));
  }, a92;
}(), TapSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2, v2, S2) {
    var g2 = a92.call(this, c) || this;
    return g2._tapNext = noop$1, g2._tapError = noop$1, g2._tapComplete = noop$1, g2._tapError = v2 || noop$1, g2._tapComplete = S2 || noop$1, isFunction$2(l2) ? (g2._context = g2, g2._tapNext = l2) : l2 && (g2._context = l2, g2._tapNext = l2.next || noop$1, g2._tapError = l2.error || noop$1, g2._tapComplete = l2.complete || noop$1), g2;
  }
  return u2.prototype._next = function(c) {
    try {
      this._tapNext.call(this._context, c);
    } catch (l2) {
      this.destination.error(l2);
      return;
    }
    this.destination.next(c);
  }, u2.prototype._error = function(c) {
    try {
      this._tapError.call(this._context, c);
    } catch (l2) {
      this.destination.error(l2);
      return;
    }
    this.destination.error(c);
  }, u2.prototype._complete = function() {
    try {
      this._tapComplete.call(this._context);
    } catch (c) {
      this.destination.error(c);
      return;
    }
    return this.destination.complete();
  }, u2;
}(Subscriber), defaultThrottleConfig = { leading: true, trailing: false };
function throttle(a92, u2) {
  return u2 === void 0 && (u2 = defaultThrottleConfig), function(c) {
    return c.lift(new ThrottleOperator(a92, !!u2.leading, !!u2.trailing));
  };
}
var ThrottleOperator = /* @__PURE__ */ function() {
  function a92(u2, c, l2) {
    this.durationSelector = u2, this.leading = c, this.trailing = l2;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new ThrottleSubscriber(u2, this.durationSelector, this.leading, this.trailing));
  }, a92;
}(), ThrottleSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2, v2, S2) {
    var g2 = a92.call(this, c) || this;
    return g2.destination = c, g2.durationSelector = l2, g2._leading = v2, g2._trailing = S2, g2._hasValue = false, g2;
  }
  return u2.prototype._next = function(c) {
    this._hasValue = true, this._sendValue = c, this._throttled || (this._leading ? this.send() : this.throttle(c));
  }, u2.prototype.send = function() {
    var c = this, l2 = c._hasValue, v2 = c._sendValue;
    l2 && (this.destination.next(v2), this.throttle(v2)), this._hasValue = false, this._sendValue = void 0;
  }, u2.prototype.throttle = function(c) {
    var l2 = this.tryDurationSelector(c);
    l2 && this.add(this._throttled = innerSubscribe(l2, new SimpleInnerSubscriber(this)));
  }, u2.prototype.tryDurationSelector = function(c) {
    try {
      return this.durationSelector(c);
    } catch (l2) {
      return this.destination.error(l2), null;
    }
  }, u2.prototype.throttlingDone = function() {
    var c = this, l2 = c._throttled, v2 = c._trailing;
    l2 && l2.unsubscribe(), this._throttled = void 0, v2 && this.send();
  }, u2.prototype.notifyNext = function() {
    this.throttlingDone();
  }, u2.prototype.notifyComplete = function() {
    this.throttlingDone();
  }, u2;
}(SimpleOuterSubscriber);
function throttleTime(a92, u2, c) {
  return u2 === void 0 && (u2 = async), c === void 0 && (c = defaultThrottleConfig), function(l2) {
    return l2.lift(new ThrottleTimeOperator(a92, u2, c.leading, c.trailing));
  };
}
var ThrottleTimeOperator = /* @__PURE__ */ function() {
  function a92(u2, c, l2, v2) {
    this.duration = u2, this.scheduler = c, this.leading = l2, this.trailing = v2;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new ThrottleTimeSubscriber(u2, this.duration, this.scheduler, this.leading, this.trailing));
  }, a92;
}(), ThrottleTimeSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2, v2, S2, g2) {
    var E2 = a92.call(this, c) || this;
    return E2.duration = l2, E2.scheduler = v2, E2.leading = S2, E2.trailing = g2, E2._hasTrailingValue = false, E2._trailingValue = null, E2;
  }
  return u2.prototype._next = function(c) {
    this.throttled ? this.trailing && (this._trailingValue = c, this._hasTrailingValue = true) : (this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this })), this.leading ? this.destination.next(c) : this.trailing && (this._trailingValue = c, this._hasTrailingValue = true));
  }, u2.prototype._complete = function() {
    this._hasTrailingValue ? (this.destination.next(this._trailingValue), this.destination.complete()) : this.destination.complete();
  }, u2.prototype.clearThrottle = function() {
    var c = this.throttled;
    c && (this.trailing && this._hasTrailingValue && (this.destination.next(this._trailingValue), this._trailingValue = null, this._hasTrailingValue = false), c.unsubscribe(), this.remove(c), this.throttled = null);
  }, u2;
}(Subscriber);
function dispatchNext(a92) {
  var u2 = a92.subscriber;
  u2.clearThrottle();
}
function defer(a92) {
  return new Observable(function(u2) {
    var c;
    try {
      c = a92();
    } catch (v2) {
      u2.error(v2);
      return;
    }
    var l2 = c ? from(c) : empty$1();
    return l2.subscribe(u2);
  });
}
function timeInterval(a92) {
  return a92 === void 0 && (a92 = async), function(u2) {
    return defer(function() {
      return u2.pipe(scan(function(c, l2) {
        var v2 = c.current;
        return { value: l2, current: a92.now(), last: v2 };
      }, { current: a92.now(), value: void 0, last: void 0 }), map(function(c) {
        var l2 = c.current, v2 = c.last, S2 = c.value;
        return new TimeInterval(S2, l2 - v2);
      }));
    });
  };
}
var TimeInterval = /* @__PURE__ */ function() {
  function a92(u2, c) {
    this.value = u2, this.interval = c;
  }
  return a92;
}(), TimeoutErrorImpl = /* @__PURE__ */ function() {
  function a92() {
    return Error.call(this), this.message = "Timeout has occurred", this.name = "TimeoutError", this;
  }
  return a92.prototype = /* @__PURE__ */ Object.create(Error.prototype), a92;
}(), TimeoutError = TimeoutErrorImpl;
function timeoutWith(a92, u2, c) {
  return c === void 0 && (c = async), function(l2) {
    var v2 = isDate$1(a92), S2 = v2 ? +a92 - c.now() : Math.abs(a92);
    return l2.lift(new TimeoutWithOperator(S2, v2, u2, c));
  };
}
var TimeoutWithOperator = /* @__PURE__ */ function() {
  function a92(u2, c, l2, v2) {
    this.waitFor = u2, this.absoluteTimeout = c, this.withObservable = l2, this.scheduler = v2;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new TimeoutWithSubscriber(u2, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));
  }, a92;
}(), TimeoutWithSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2, v2, S2, g2) {
    var E2 = a92.call(this, c) || this;
    return E2.absoluteTimeout = l2, E2.waitFor = v2, E2.withObservable = S2, E2.scheduler = g2, E2.scheduleTimeout(), E2;
  }
  return u2.dispatchTimeout = function(c) {
    var l2 = c.withObservable;
    c._unsubscribeAndRecycle(), c.add(innerSubscribe(l2, new SimpleInnerSubscriber(c)));
  }, u2.prototype.scheduleTimeout = function() {
    var c = this.action;
    c ? this.action = c.schedule(this, this.waitFor) : this.add(this.action = this.scheduler.schedule(u2.dispatchTimeout, this.waitFor, this));
  }, u2.prototype._next = function(c) {
    this.absoluteTimeout || this.scheduleTimeout(), a92.prototype._next.call(this, c);
  }, u2.prototype._unsubscribe = function() {
    this.action = void 0, this.scheduler = null, this.withObservable = null;
  }, u2;
}(SimpleOuterSubscriber);
function timeout(a92, u2) {
  return u2 === void 0 && (u2 = async), timeoutWith(a92, throwError(new TimeoutError()), u2);
}
function timestamp$1(a92) {
  return a92 === void 0 && (a92 = async), map(function(u2) {
    return new Timestamp$1(u2, a92.now());
  });
}
var Timestamp$1 = /* @__PURE__ */ function() {
  function a92(u2, c) {
    this.value = u2, this.timestamp = c;
  }
  return a92;
}();
function toArrayReducer(a92, u2, c) {
  return c === 0 ? [u2] : (a92.push(u2), a92);
}
function toArray() {
  return reduce(toArrayReducer, []);
}
function window$1(a92) {
  return function(c) {
    return c.lift(new WindowOperator$1(a92));
  };
}
var WindowOperator$1 = /* @__PURE__ */ function() {
  function a92(u2) {
    this.windowBoundaries = u2;
  }
  return a92.prototype.call = function(u2, c) {
    var l2 = new WindowSubscriber$1(u2), v2 = c.subscribe(l2);
    return v2.closed || l2.add(innerSubscribe(this.windowBoundaries, new SimpleInnerSubscriber(l2))), v2;
  }, a92;
}(), WindowSubscriber$1 = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c) {
    var l2 = a92.call(this, c) || this;
    return l2.window = new Subject(), c.next(l2.window), l2;
  }
  return u2.prototype.notifyNext = function() {
    this.openWindow();
  }, u2.prototype.notifyError = function(c) {
    this._error(c);
  }, u2.prototype.notifyComplete = function() {
    this._complete();
  }, u2.prototype._next = function(c) {
    this.window.next(c);
  }, u2.prototype._error = function(c) {
    this.window.error(c), this.destination.error(c);
  }, u2.prototype._complete = function() {
    this.window.complete(), this.destination.complete();
  }, u2.prototype._unsubscribe = function() {
    this.window = null;
  }, u2.prototype.openWindow = function() {
    var c = this.window;
    c && c.complete();
    var l2 = this.destination, v2 = this.window = new Subject();
    l2.next(v2);
  }, u2;
}(SimpleOuterSubscriber);
function windowCount(a92, u2) {
  return u2 === void 0 && (u2 = 0), function(l2) {
    return l2.lift(new WindowCountOperator(a92, u2));
  };
}
var WindowCountOperator = /* @__PURE__ */ function() {
  function a92(u2, c) {
    this.windowSize = u2, this.startWindowEvery = c;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new WindowCountSubscriber(u2, this.windowSize, this.startWindowEvery));
  }, a92;
}(), WindowCountSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2, v2) {
    var S2 = a92.call(this, c) || this;
    return S2.destination = c, S2.windowSize = l2, S2.startWindowEvery = v2, S2.windows = [new Subject()], S2.count = 0, c.next(S2.windows[0]), S2;
  }
  return u2.prototype._next = function(c) {
    for (var l2 = this.startWindowEvery > 0 ? this.startWindowEvery : this.windowSize, v2 = this.destination, S2 = this.windowSize, g2 = this.windows, E2 = g2.length, _ = 0; _ < E2 && !this.closed; _++)
      g2[_].next(c);
    var k = this.count - S2 + 1;
    if (k >= 0 && k % l2 === 0 && !this.closed && g2.shift().complete(), ++this.count % l2 === 0 && !this.closed) {
      var L2 = new Subject();
      g2.push(L2), v2.next(L2);
    }
  }, u2.prototype._error = function(c) {
    var l2 = this.windows;
    if (l2)
      for (; l2.length > 0 && !this.closed; )
        l2.shift().error(c);
    this.destination.error(c);
  }, u2.prototype._complete = function() {
    var c = this.windows;
    if (c)
      for (; c.length > 0 && !this.closed; )
        c.shift().complete();
    this.destination.complete();
  }, u2.prototype._unsubscribe = function() {
    this.count = 0, this.windows = null;
  }, u2;
}(Subscriber);
function windowTime(a92) {
  var u2 = async, c = null, l2 = Number.POSITIVE_INFINITY;
  return isScheduler(arguments[3]) && (u2 = arguments[3]), isScheduler(arguments[2]) ? u2 = arguments[2] : isNumeric(arguments[2]) && (l2 = Number(arguments[2])), isScheduler(arguments[1]) ? u2 = arguments[1] : isNumeric(arguments[1]) && (c = Number(arguments[1])), function(S2) {
    return S2.lift(new WindowTimeOperator(a92, c, l2, u2));
  };
}
var WindowTimeOperator = /* @__PURE__ */ function() {
  function a92(u2, c, l2, v2) {
    this.windowTimeSpan = u2, this.windowCreationInterval = c, this.maxWindowSize = l2, this.scheduler = v2;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new WindowTimeSubscriber(u2, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler));
  }, a92;
}(), CountedSubject = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2() {
    var c = a92 !== null && a92.apply(this, arguments) || this;
    return c._numberOfNextedValues = 0, c;
  }
  return u2.prototype.next = function(c) {
    this._numberOfNextedValues++, a92.prototype.next.call(this, c);
  }, Object.defineProperty(u2.prototype, "numberOfNextedValues", { get: function() {
    return this._numberOfNextedValues;
  }, enumerable: true, configurable: true }), u2;
}(Subject), WindowTimeSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2, v2, S2, g2) {
    var E2 = a92.call(this, c) || this;
    E2.destination = c, E2.windowTimeSpan = l2, E2.windowCreationInterval = v2, E2.maxWindowSize = S2, E2.scheduler = g2, E2.windows = [];
    var _ = E2.openWindow();
    if (v2 !== null && v2 >= 0) {
      var k = { subscriber: E2, window: _, context: null }, L2 = { windowTimeSpan: l2, windowCreationInterval: v2, subscriber: E2, scheduler: g2 };
      E2.add(g2.schedule(dispatchWindowClose, l2, k)), E2.add(g2.schedule(dispatchWindowCreation, v2, L2));
    } else {
      var M2 = { subscriber: E2, window: _, windowTimeSpan: l2 };
      E2.add(g2.schedule(dispatchWindowTimeSpanOnly, l2, M2));
    }
    return E2;
  }
  return u2.prototype._next = function(c) {
    for (var l2 = this.windows, v2 = l2.length, S2 = 0; S2 < v2; S2++) {
      var g2 = l2[S2];
      g2.closed || (g2.next(c), g2.numberOfNextedValues >= this.maxWindowSize && this.closeWindow(g2));
    }
  }, u2.prototype._error = function(c) {
    for (var l2 = this.windows; l2.length > 0; )
      l2.shift().error(c);
    this.destination.error(c);
  }, u2.prototype._complete = function() {
    for (var c = this.windows; c.length > 0; ) {
      var l2 = c.shift();
      l2.closed || l2.complete();
    }
    this.destination.complete();
  }, u2.prototype.openWindow = function() {
    var c = new CountedSubject();
    this.windows.push(c);
    var l2 = this.destination;
    return l2.next(c), c;
  }, u2.prototype.closeWindow = function(c) {
    c.complete();
    var l2 = this.windows;
    l2.splice(l2.indexOf(c), 1);
  }, u2;
}(Subscriber);
function dispatchWindowTimeSpanOnly(a92) {
  var u2 = a92.subscriber, c = a92.windowTimeSpan, l2 = a92.window;
  l2 && u2.closeWindow(l2), a92.window = u2.openWindow(), this.schedule(a92, c);
}
function dispatchWindowCreation(a92) {
  var u2 = a92.windowTimeSpan, c = a92.subscriber, l2 = a92.scheduler, v2 = a92.windowCreationInterval, S2 = c.openWindow(), g2 = this, E2 = { action: g2, subscription: null }, _ = { subscriber: c, window: S2, context: E2 };
  E2.subscription = l2.schedule(dispatchWindowClose, u2, _), g2.add(E2.subscription), g2.schedule(a92, v2);
}
function dispatchWindowClose(a92) {
  var u2 = a92.subscriber, c = a92.window, l2 = a92.context;
  l2 && l2.action && l2.subscription && l2.action.remove(l2.subscription), u2.closeWindow(c);
}
function windowToggle(a92, u2) {
  return function(c) {
    return c.lift(new WindowToggleOperator(a92, u2));
  };
}
var WindowToggleOperator = /* @__PURE__ */ function() {
  function a92(u2, c) {
    this.openings = u2, this.closingSelector = c;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new WindowToggleSubscriber(u2, this.openings, this.closingSelector));
  }, a92;
}(), WindowToggleSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2, v2) {
    var S2 = a92.call(this, c) || this;
    return S2.openings = l2, S2.closingSelector = v2, S2.contexts = [], S2.add(S2.openSubscription = subscribeToResult(S2, l2, l2)), S2;
  }
  return u2.prototype._next = function(c) {
    var l2 = this.contexts;
    if (l2)
      for (var v2 = l2.length, S2 = 0; S2 < v2; S2++)
        l2[S2].window.next(c);
  }, u2.prototype._error = function(c) {
    var l2 = this.contexts;
    if (this.contexts = null, l2)
      for (var v2 = l2.length, S2 = -1; ++S2 < v2; ) {
        var g2 = l2[S2];
        g2.window.error(c), g2.subscription.unsubscribe();
      }
    a92.prototype._error.call(this, c);
  }, u2.prototype._complete = function() {
    var c = this.contexts;
    if (this.contexts = null, c)
      for (var l2 = c.length, v2 = -1; ++v2 < l2; ) {
        var S2 = c[v2];
        S2.window.complete(), S2.subscription.unsubscribe();
      }
    a92.prototype._complete.call(this);
  }, u2.prototype._unsubscribe = function() {
    var c = this.contexts;
    if (this.contexts = null, c)
      for (var l2 = c.length, v2 = -1; ++v2 < l2; ) {
        var S2 = c[v2];
        S2.window.unsubscribe(), S2.subscription.unsubscribe();
      }
  }, u2.prototype.notifyNext = function(c, l2, v2, S2, g2) {
    if (c === this.openings) {
      var E2 = void 0;
      try {
        var _ = this.closingSelector;
        E2 = _(l2);
      } catch (J2) {
        return this.error(J2);
      }
      var k = new Subject(), L2 = new Subscription(), M2 = { window: k, subscription: L2 };
      this.contexts.push(M2);
      var $ = subscribeToResult(this, E2, M2);
      $.closed ? this.closeWindow(this.contexts.length - 1) : ($.context = M2, L2.add($)), this.destination.next(k);
    } else
      this.closeWindow(this.contexts.indexOf(c));
  }, u2.prototype.notifyError = function(c) {
    this.error(c);
  }, u2.prototype.notifyComplete = function(c) {
    c !== this.openSubscription && this.closeWindow(this.contexts.indexOf(c.context));
  }, u2.prototype.closeWindow = function(c) {
    if (c !== -1) {
      var l2 = this.contexts, v2 = l2[c], S2 = v2.window, g2 = v2.subscription;
      l2.splice(c, 1), S2.complete(), g2.unsubscribe();
    }
  }, u2;
}(OuterSubscriber);
function windowWhen(a92) {
  return function(c) {
    return c.lift(new WindowOperator(a92));
  };
}
var WindowOperator = /* @__PURE__ */ function() {
  function a92(u2) {
    this.closingSelector = u2;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new WindowSubscriber(u2, this.closingSelector));
  }, a92;
}(), WindowSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2) {
    var v2 = a92.call(this, c) || this;
    return v2.destination = c, v2.closingSelector = l2, v2.openWindow(), v2;
  }
  return u2.prototype.notifyNext = function(c, l2, v2, S2, g2) {
    this.openWindow(g2);
  }, u2.prototype.notifyError = function(c) {
    this._error(c);
  }, u2.prototype.notifyComplete = function(c) {
    this.openWindow(c);
  }, u2.prototype._next = function(c) {
    this.window.next(c);
  }, u2.prototype._error = function(c) {
    this.window.error(c), this.destination.error(c), this.unsubscribeClosingNotification();
  }, u2.prototype._complete = function() {
    this.window.complete(), this.destination.complete(), this.unsubscribeClosingNotification();
  }, u2.prototype.unsubscribeClosingNotification = function() {
    this.closingNotification && this.closingNotification.unsubscribe();
  }, u2.prototype.openWindow = function(c) {
    c === void 0 && (c = null), c && (this.remove(c), c.unsubscribe());
    var l2 = this.window;
    l2 && l2.complete();
    var v2 = this.window = new Subject();
    this.destination.next(v2);
    var S2;
    try {
      var g2 = this.closingSelector;
      S2 = g2();
    } catch (E2) {
      this.destination.error(E2), this.window.error(E2);
      return;
    }
    this.add(this.closingNotification = subscribeToResult(this, S2));
  }, u2;
}(OuterSubscriber);
function withLatestFrom() {
  for (var a92 = [], u2 = 0; u2 < arguments.length; u2++)
    a92[u2] = arguments[u2];
  return function(c) {
    var l2;
    typeof a92[a92.length - 1] == "function" && (l2 = a92.pop());
    var v2 = a92;
    return c.lift(new WithLatestFromOperator(v2, l2));
  };
}
var WithLatestFromOperator = /* @__PURE__ */ function() {
  function a92(u2, c) {
    this.observables = u2, this.project = c;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new WithLatestFromSubscriber(u2, this.observables, this.project));
  }, a92;
}(), WithLatestFromSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2, v2) {
    var S2 = a92.call(this, c) || this;
    S2.observables = l2, S2.project = v2, S2.toRespond = [];
    var g2 = l2.length;
    S2.values = new Array(g2);
    for (var E2 = 0; E2 < g2; E2++)
      S2.toRespond.push(E2);
    for (var E2 = 0; E2 < g2; E2++) {
      var _ = l2[E2];
      S2.add(subscribeToResult(S2, _, void 0, E2));
    }
    return S2;
  }
  return u2.prototype.notifyNext = function(c, l2, v2) {
    this.values[v2] = l2;
    var S2 = this.toRespond;
    if (S2.length > 0) {
      var g2 = S2.indexOf(v2);
      g2 !== -1 && S2.splice(g2, 1);
    }
  }, u2.prototype.notifyComplete = function() {
  }, u2.prototype._next = function(c) {
    if (this.toRespond.length === 0) {
      var l2 = [c].concat(this.values);
      this.project ? this._tryProject(l2) : this.destination.next(l2);
    }
  }, u2.prototype._tryProject = function(c) {
    var l2;
    try {
      l2 = this.project.apply(this, c);
    } catch (v2) {
      this.destination.error(v2);
      return;
    }
    this.destination.next(l2);
  }, u2;
}(OuterSubscriber);
function zip$1() {
  for (var a92 = [], u2 = 0; u2 < arguments.length; u2++)
    a92[u2] = arguments[u2];
  var c = a92[a92.length - 1];
  return typeof c == "function" && a92.pop(), fromArray(a92, void 0).lift(new ZipOperator(c));
}
var ZipOperator = /* @__PURE__ */ function() {
  function a92(u2) {
    this.resultSelector = u2;
  }
  return a92.prototype.call = function(u2, c) {
    return c.subscribe(new ZipSubscriber(u2, this.resultSelector));
  }, a92;
}(), ZipSubscriber = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2, v2) {
    var S2 = a92.call(this, c) || this;
    return S2.resultSelector = l2, S2.iterators = [], S2.active = 0, S2.resultSelector = typeof l2 == "function" ? l2 : void 0, S2;
  }
  return u2.prototype._next = function(c) {
    var l2 = this.iterators;
    isArray$4(c) ? l2.push(new StaticArrayIterator(c)) : typeof c[iterator] == "function" ? l2.push(new StaticIterator(c[iterator]())) : l2.push(new ZipBufferIterator(this.destination, this, c));
  }, u2.prototype._complete = function() {
    var c = this.iterators, l2 = c.length;
    if (this.unsubscribe(), l2 === 0) {
      this.destination.complete();
      return;
    }
    this.active = l2;
    for (var v2 = 0; v2 < l2; v2++) {
      var S2 = c[v2];
      if (S2.stillUnsubscribed) {
        var g2 = this.destination;
        g2.add(S2.subscribe());
      } else
        this.active--;
    }
  }, u2.prototype.notifyInactive = function() {
    this.active--, this.active === 0 && this.destination.complete();
  }, u2.prototype.checkIterators = function() {
    for (var c = this.iterators, l2 = c.length, v2 = this.destination, S2 = 0; S2 < l2; S2++) {
      var g2 = c[S2];
      if (typeof g2.hasValue == "function" && !g2.hasValue())
        return;
    }
    for (var E2 = false, _ = [], S2 = 0; S2 < l2; S2++) {
      var g2 = c[S2], k = g2.next();
      if (g2.hasCompleted() && (E2 = true), k.done) {
        v2.complete();
        return;
      }
      _.push(k.value);
    }
    this.resultSelector ? this._tryresultSelector(_) : v2.next(_), E2 && v2.complete();
  }, u2.prototype._tryresultSelector = function(c) {
    var l2;
    try {
      l2 = this.resultSelector.apply(this, c);
    } catch (v2) {
      this.destination.error(v2);
      return;
    }
    this.destination.next(l2);
  }, u2;
}(Subscriber), StaticIterator = /* @__PURE__ */ function() {
  function a92(u2) {
    this.iterator = u2, this.nextResult = u2.next();
  }
  return a92.prototype.hasValue = function() {
    return true;
  }, a92.prototype.next = function() {
    var u2 = this.nextResult;
    return this.nextResult = this.iterator.next(), u2;
  }, a92.prototype.hasCompleted = function() {
    var u2 = this.nextResult;
    return !!(u2 && u2.done);
  }, a92;
}(), StaticArrayIterator = /* @__PURE__ */ function() {
  function a92(u2) {
    this.array = u2, this.index = 0, this.length = 0, this.length = u2.length;
  }
  return a92.prototype[iterator] = function() {
    return this;
  }, a92.prototype.next = function(u2) {
    var c = this.index++, l2 = this.array;
    return c < this.length ? { value: l2[c], done: false } : { value: null, done: true };
  }, a92.prototype.hasValue = function() {
    return this.array.length > this.index;
  }, a92.prototype.hasCompleted = function() {
    return this.array.length === this.index;
  }, a92;
}(), ZipBufferIterator = /* @__PURE__ */ function(a92) {
  __extends(u2, a92);
  function u2(c, l2, v2) {
    var S2 = a92.call(this, c) || this;
    return S2.parent = l2, S2.observable = v2, S2.stillUnsubscribed = true, S2.buffer = [], S2.isComplete = false, S2;
  }
  return u2.prototype[iterator] = function() {
    return this;
  }, u2.prototype.next = function() {
    var c = this.buffer;
    return c.length === 0 && this.isComplete ? { value: null, done: true } : { value: c.shift(), done: false };
  }, u2.prototype.hasValue = function() {
    return this.buffer.length > 0;
  }, u2.prototype.hasCompleted = function() {
    return this.buffer.length === 0 && this.isComplete;
  }, u2.prototype.notifyComplete = function() {
    this.buffer.length > 0 ? (this.isComplete = true, this.parent.notifyInactive()) : this.destination.complete();
  }, u2.prototype.notifyNext = function(c) {
    this.buffer.push(c), this.parent.checkIterators();
  }, u2.prototype.subscribe = function() {
    return innerSubscribe(this.observable, new SimpleInnerSubscriber(this));
  }, u2;
}(SimpleOuterSubscriber);
function zip() {
  for (var a92 = [], u2 = 0; u2 < arguments.length; u2++)
    a92[u2] = arguments[u2];
  return function(l2) {
    return l2.lift.call(zip$1.apply(void 0, [l2].concat(a92)));
  };
}
function zipAll(a92) {
  return function(u2) {
    return u2.lift(new ZipOperator(a92));
  };
}
const operators = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({ __proto__: null, audit, auditTime, buffer, bufferCount, bufferTime, bufferToggle, bufferWhen, catchError, combineAll, combineLatest, concat, concatAll, concatMap, concatMapTo, count, debounce, debounceTime, defaultIfEmpty, delay, delayWhen, dematerialize, distinct, distinctUntilChanged, distinctUntilKeyChanged, elementAt, endWith, every, exhaust, exhaustMap, expand, filter, finalize, find: find$1, findIndex, first, flatMap, groupBy, ignoreElements, isEmpty, last, map, mapTo, materialize, max, merge: merge$1, mergeAll, mergeMap, mergeMapTo, mergeScan, min, multicast, observeOn, onErrorResumeNext, pairwise, partition, pluck, publish, publishBehavior, publishLast, publishReplay, race, reduce, refCount, repeat, repeatWhen, retry, retryWhen, sample, sampleTime, scan, sequenceEqual, share, shareReplay, single, skip, skipLast, skipUntil, skipWhile, startWith, subscribeOn, switchAll, switchMap, switchMapTo, take, takeLast, takeUntil, takeWhile, tap, throttle, throttleTime, throwIfEmpty, timeInterval, timeout, timeoutWith, timestamp: timestamp$1, toArray, window: window$1, windowCount, windowTime, windowToggle, windowWhen, withLatestFrom, zip, zipAll }, Symbol.toStringTag, { value: "Module" })), require$$2 = /* @__PURE__ */ getAugmentedNamespace(operators);
var struct = {};
(function(a92) {
  var u2 = commonjsGlobal$1 && commonjsGlobal$1.__createBinding || (Object.create ? function(B2, Y2, ne2, Z2) {
    Z2 === void 0 && (Z2 = ne2), Object.defineProperty(B2, Z2, { enumerable: true, get: function() {
      return Y2[ne2];
    } });
  } : function(B2, Y2, ne2, Z2) {
    Z2 === void 0 && (Z2 = ne2), B2[Z2] = Y2[ne2];
  }), c = commonjsGlobal$1 && commonjsGlobal$1.__setModuleDefault || (Object.create ? function(B2, Y2) {
    Object.defineProperty(B2, "default", { enumerable: true, value: Y2 });
  } : function(B2, Y2) {
    B2.default = Y2;
  }), l2 = commonjsGlobal$1 && commonjsGlobal$1.__importStar || function(B2) {
    if (B2 && B2.__esModule)
      return B2;
    var Y2 = {};
    if (B2 != null)
      for (var ne2 in B2)
        ne2 !== "default" && Object.hasOwnProperty.call(B2, ne2) && u2(Y2, B2, ne2);
    return c(Y2, B2), Y2;
  }, v2 = commonjsGlobal$1 && commonjsGlobal$1.__importDefault || function(B2) {
    return B2 && B2.__esModule ? B2 : { default: B2 };
  };
  Object.defineProperty(a92, "__esModule", { value: true }), a92.ListValue = a92.Value = a92.Struct_FieldsEntry = a92.Struct = a92.nullValueToNumber = a92.nullValueToJSON = a92.nullValueFromJSON = a92.NullValue = a92.protobufPackage = void 0;
  const S2 = v2(umdExports), g2 = l2(minimal);
  a92.protobufPackage = "google.protobuf";
  var E2;
  (function(B2) {
    B2.NULL_VALUE = "NULL_VALUE";
  })(E2 = a92.NullValue || (a92.NullValue = {}));
  function _(B2) {
    switch (B2) {
      case 0:
      case "NULL_VALUE":
        return E2.NULL_VALUE;
      default:
        throw new q2.Error("Unrecognized enum value " + B2 + " for enum NullValue");
    }
  }
  a92.nullValueFromJSON = _;
  function k(B2) {
    switch (B2) {
      case E2.NULL_VALUE:
        return "NULL_VALUE";
      default:
        return "UNKNOWN";
    }
  }
  a92.nullValueToJSON = k;
  function L2(B2) {
    switch (B2) {
      case E2.NULL_VALUE:
        return 0;
      default:
        return 0;
    }
  }
  a92.nullValueToNumber = L2;
  function M2() {
    return { fields: {} };
  }
  a92.Struct = { encode(B2, Y2 = g2.Writer.create()) {
    return Object.entries(B2.fields).forEach(([ne2, Z2]) => {
      Z2 !== void 0 && a92.Struct_FieldsEntry.encode({ key: ne2, value: Z2 }, Y2.uint32(10).fork()).ldelim();
    }), Y2;
  }, decode(B2, Y2) {
    const ne2 = B2 instanceof g2.Reader ? B2 : new g2.Reader(B2);
    let Z2 = Y2 === void 0 ? ne2.len : ne2.pos + Y2;
    const re2 = M2();
    for (; ne2.pos < Z2; ) {
      const oe2 = ne2.uint32();
      switch (oe2 >>> 3) {
        case 1:
          const de2 = a92.Struct_FieldsEntry.decode(ne2, ne2.uint32());
          de2.value !== void 0 && (re2.fields[de2.key] = de2.value);
          break;
        default:
          ne2.skipType(oe2 & 7);
          break;
      }
    }
    return re2;
  }, fromJSON(B2) {
    return { fields: G2(B2.fields) ? Object.entries(B2.fields).reduce((Y2, [ne2, Z2]) => (Y2[ne2] = Z2, Y2), {}) : {} };
  }, toJSON(B2) {
    const Y2 = {};
    return Y2.fields = {}, B2.fields && Object.entries(B2.fields).forEach(([ne2, Z2]) => {
      Y2.fields[ne2] = Z2;
    }), Y2;
  }, fromPartial(B2) {
    var Y2;
    const ne2 = M2();
    return ne2.fields = Object.entries((Y2 = B2.fields) !== null && Y2 !== void 0 ? Y2 : {}).reduce((Z2, [re2, oe2]) => (oe2 !== void 0 && (Z2[re2] = oe2), Z2), {}), ne2;
  }, wrap(B2) {
    const Y2 = M2();
    return B2 !== void 0 && Object.keys(B2).forEach((ne2) => {
      Y2.fields[ne2] = B2[ne2];
    }), Y2;
  }, unwrap(B2) {
    const Y2 = {};
    return Object.keys(B2.fields).forEach((ne2) => {
      Y2[ne2] = B2.fields[ne2];
    }), Y2;
  } };
  function $() {
    return { key: "", value: void 0 };
  }
  a92.Struct_FieldsEntry = { encode(B2, Y2 = g2.Writer.create()) {
    return B2.key !== "" && Y2.uint32(10).string(B2.key), B2.value !== void 0 && a92.Value.encode(a92.Value.wrap(B2.value), Y2.uint32(18).fork()).ldelim(), Y2;
  }, decode(B2, Y2) {
    const ne2 = B2 instanceof g2.Reader ? B2 : new g2.Reader(B2);
    let Z2 = Y2 === void 0 ? ne2.len : ne2.pos + Y2;
    const re2 = $();
    for (; ne2.pos < Z2; ) {
      const oe2 = ne2.uint32();
      switch (oe2 >>> 3) {
        case 1:
          re2.key = ne2.string();
          break;
        case 2:
          re2.value = a92.Value.unwrap(a92.Value.decode(ne2, ne2.uint32()));
          break;
        default:
          ne2.skipType(oe2 & 7);
          break;
      }
    }
    return re2;
  }, fromJSON(B2) {
    return { key: H2(B2.key) ? String(B2.key) : "", value: H2(B2 == null ? void 0 : B2.value) ? B2.value : void 0 };
  }, toJSON(B2) {
    const Y2 = {};
    return B2.key !== void 0 && (Y2.key = B2.key), B2.value !== void 0 && (Y2.value = B2.value), Y2;
  }, fromPartial(B2) {
    var Y2, ne2;
    const Z2 = $();
    return Z2.key = (Y2 = B2.key) !== null && Y2 !== void 0 ? Y2 : "", Z2.value = (ne2 = B2.value) !== null && ne2 !== void 0 ? ne2 : void 0, Z2;
  } };
  function J2() {
    return { nullValue: void 0, numberValue: void 0, stringValue: void 0, boolValue: void 0, structValue: void 0, listValue: void 0 };
  }
  a92.Value = { encode(B2, Y2 = g2.Writer.create()) {
    return B2.nullValue !== void 0 && Y2.uint32(8).int32(L2(B2.nullValue)), B2.numberValue !== void 0 && Y2.uint32(17).double(B2.numberValue), B2.stringValue !== void 0 && Y2.uint32(26).string(B2.stringValue), B2.boolValue !== void 0 && Y2.uint32(32).bool(B2.boolValue), B2.structValue !== void 0 && a92.Struct.encode(a92.Struct.wrap(B2.structValue), Y2.uint32(42).fork()).ldelim(), B2.listValue !== void 0 && a92.ListValue.encode(a92.ListValue.wrap(B2.listValue), Y2.uint32(50).fork()).ldelim(), Y2;
  }, decode(B2, Y2) {
    const ne2 = B2 instanceof g2.Reader ? B2 : new g2.Reader(B2);
    let Z2 = Y2 === void 0 ? ne2.len : ne2.pos + Y2;
    const re2 = J2();
    for (; ne2.pos < Z2; ) {
      const oe2 = ne2.uint32();
      switch (oe2 >>> 3) {
        case 1:
          re2.nullValue = _(ne2.int32());
          break;
        case 2:
          re2.numberValue = ne2.double();
          break;
        case 3:
          re2.stringValue = ne2.string();
          break;
        case 4:
          re2.boolValue = ne2.bool();
          break;
        case 5:
          re2.structValue = a92.Struct.unwrap(a92.Struct.decode(ne2, ne2.uint32()));
          break;
        case 6:
          re2.listValue = a92.ListValue.unwrap(a92.ListValue.decode(ne2, ne2.uint32()));
          break;
        default:
          ne2.skipType(oe2 & 7);
          break;
      }
    }
    return re2;
  }, fromJSON(B2) {
    return { nullValue: H2(B2.nullValue) ? _(B2.nullValue) : void 0, numberValue: H2(B2.numberValue) ? Number(B2.numberValue) : void 0, stringValue: H2(B2.stringValue) ? String(B2.stringValue) : void 0, boolValue: H2(B2.boolValue) ? !!B2.boolValue : void 0, structValue: G2(B2.structValue) ? B2.structValue : void 0, listValue: Array.isArray(B2.listValue) ? [...B2.listValue] : void 0 };
  }, toJSON(B2) {
    const Y2 = {};
    return B2.nullValue !== void 0 && (Y2.nullValue = B2.nullValue !== void 0 ? k(B2.nullValue) : void 0), B2.numberValue !== void 0 && (Y2.numberValue = B2.numberValue), B2.stringValue !== void 0 && (Y2.stringValue = B2.stringValue), B2.boolValue !== void 0 && (Y2.boolValue = B2.boolValue), B2.structValue !== void 0 && (Y2.structValue = B2.structValue), B2.listValue !== void 0 && (Y2.listValue = B2.listValue), Y2;
  }, fromPartial(B2) {
    var Y2, ne2, Z2, re2, oe2, de2;
    const A2 = J2();
    return A2.nullValue = (Y2 = B2.nullValue) !== null && Y2 !== void 0 ? Y2 : void 0, A2.numberValue = (ne2 = B2.numberValue) !== null && ne2 !== void 0 ? ne2 : void 0, A2.stringValue = (Z2 = B2.stringValue) !== null && Z2 !== void 0 ? Z2 : void 0, A2.boolValue = (re2 = B2.boolValue) !== null && re2 !== void 0 ? re2 : void 0, A2.structValue = (oe2 = B2.structValue) !== null && oe2 !== void 0 ? oe2 : void 0, A2.listValue = (de2 = B2.listValue) !== null && de2 !== void 0 ? de2 : void 0, A2;
  }, wrap(B2) {
    const Y2 = J2();
    if (B2 === null)
      Y2.nullValue = E2.NULL_VALUE;
    else if (typeof B2 == "boolean")
      Y2.boolValue = B2;
    else if (typeof B2 == "number")
      Y2.numberValue = B2;
    else if (typeof B2 == "string")
      Y2.stringValue = B2;
    else if (Array.isArray(B2))
      Y2.listValue = B2;
    else if (typeof B2 == "object")
      Y2.structValue = B2;
    else if (typeof B2 < "u")
      throw new Error("Unsupported any value type: " + typeof B2);
    return Y2;
  }, unwrap(B2) {
    if ((B2 == null ? void 0 : B2.stringValue) !== void 0)
      return B2.stringValue;
    if ((B2 == null ? void 0 : B2.numberValue) !== void 0)
      return B2.numberValue;
    if ((B2 == null ? void 0 : B2.boolValue) !== void 0)
      return B2.boolValue;
    if ((B2 == null ? void 0 : B2.structValue) !== void 0)
      return B2.structValue;
    if ((B2 == null ? void 0 : B2.listValue) !== void 0)
      return B2.listValue;
    if ((B2 == null ? void 0 : B2.nullValue) !== void 0)
      return null;
  } };
  function V2() {
    return { values: [] };
  }
  a92.ListValue = { encode(B2, Y2 = g2.Writer.create()) {
    for (const ne2 of B2.values)
      a92.Value.encode(a92.Value.wrap(ne2), Y2.uint32(10).fork()).ldelim();
    return Y2;
  }, decode(B2, Y2) {
    const ne2 = B2 instanceof g2.Reader ? B2 : new g2.Reader(B2);
    let Z2 = Y2 === void 0 ? ne2.len : ne2.pos + Y2;
    const re2 = V2();
    for (; ne2.pos < Z2; ) {
      const oe2 = ne2.uint32();
      switch (oe2 >>> 3) {
        case 1:
          re2.values.push(a92.Value.unwrap(a92.Value.decode(ne2, ne2.uint32())));
          break;
        default:
          ne2.skipType(oe2 & 7);
          break;
      }
    }
    return re2;
  }, fromJSON(B2) {
    return { values: Array.isArray(B2 == null ? void 0 : B2.values) ? [...B2.values] : [] };
  }, toJSON(B2) {
    const Y2 = {};
    return B2.values ? Y2.values = B2.values.map((ne2) => ne2) : Y2.values = [], Y2;
  }, fromPartial(B2) {
    var Y2;
    const ne2 = V2();
    return ne2.values = ((Y2 = B2.values) === null || Y2 === void 0 ? void 0 : Y2.map((Z2) => Z2)) || [], ne2;
  }, wrap(B2) {
    const Y2 = V2();
    return Y2.values = B2 ?? [], Y2;
  }, unwrap(B2) {
    return B2.values;
  } };
  var q2 = (() => {
    if (typeof q2 < "u")
      return q2;
    if (typeof self < "u")
      return self;
    if (typeof window < "u")
      return window;
    if (typeof commonjsGlobal$1 < "u")
      return commonjsGlobal$1;
    throw "Unable to locate global object";
  })();
  g2.util.Long !== S2.default && (g2.util.Long = S2.default, g2.configure());
  function G2(B2) {
    return typeof B2 == "object" && B2 !== null;
  }
  function H2(B2) {
    return B2 != null;
  }
})(struct);
(function(a92) {
  var u2 = commonjsGlobal$1 && commonjsGlobal$1.__createBinding || (Object.create ? function(A2, N2, D2, W2) {
    W2 === void 0 && (W2 = D2), Object.defineProperty(A2, W2, { enumerable: true, get: function() {
      return N2[D2];
    } });
  } : function(A2, N2, D2, W2) {
    W2 === void 0 && (W2 = D2), A2[W2] = N2[D2];
  }), c = commonjsGlobal$1 && commonjsGlobal$1.__setModuleDefault || (Object.create ? function(A2, N2) {
    Object.defineProperty(A2, "default", { enumerable: true, value: N2 });
  } : function(A2, N2) {
    A2.default = N2;
  }), l2 = commonjsGlobal$1 && commonjsGlobal$1.__importStar || function(A2) {
    if (A2 && A2.__esModule)
      return A2;
    var N2 = {};
    if (A2 != null)
      for (var D2 in A2)
        D2 !== "default" && Object.hasOwnProperty.call(A2, D2) && u2(N2, A2, D2);
    return c(N2, A2), N2;
  }, v2 = commonjsGlobal$1 && commonjsGlobal$1.__importDefault || function(A2) {
    return A2 && A2.__esModule ? A2 : { default: A2 };
  };
  Object.defineProperty(a92, "__esModule", { value: true }), a92.EventServiceDefinition = a92.EventServiceClientImpl = a92.EventsStreamResponse = a92.EventsStreamRequest = a92.EventsStreamReconnectRequest = a92.EventsStreamError = a92.SubscribePayload = a92.PublishEventResponse = a92.PublishEventRequest = a92.EventTarget = a92.eventsStreamMessageTypeToNumber = a92.eventsStreamMessageTypeToJSON = a92.eventsStreamMessageTypeFromJSON = a92.EventsStreamMessageType = a92.protobufPackage = void 0;
  const S2 = v2(umdExports), g2 = l2(minimal), E2 = require$$2, _ = struct;
  a92.protobufPackage = "apis.event.v2";
  var k;
  (function(A2) {
    A2.EVENTS_STREAM_MESSAGE_TYPE_UNSPECIFIED = "EVENTS_STREAM_MESSAGE_TYPE_UNSPECIFIED", A2.EVENTS_STREAM_MESSAGE_TYPE_PING = "EVENTS_STREAM_MESSAGE_TYPE_PING", A2.EVENTS_STREAM_MESSAGE_TYPE_ERROR = "EVENTS_STREAM_MESSAGE_TYPE_ERROR", A2.EVENTS_STREAM_MESSAGE_TYPE_SUBSCRIBED = "EVENTS_STREAM_MESSAGE_TYPE_SUBSCRIBED", A2.EVENTS_STREAM_MESSAGE_TYPE_UNSUBSCRIBED = "EVENTS_STREAM_MESSAGE_TYPE_UNSUBSCRIBED", A2.EVENTS_STREAM_MESSAGE_TYPE_PUBLISHED = "EVENTS_STREAM_MESSAGE_TYPE_PUBLISHED";
  })(k = a92.EventsStreamMessageType || (a92.EventsStreamMessageType = {}));
  function L2(A2) {
    switch (A2) {
      case 0:
      case "EVENTS_STREAM_MESSAGE_TYPE_UNSPECIFIED":
        return k.EVENTS_STREAM_MESSAGE_TYPE_UNSPECIFIED;
      case 1:
      case "EVENTS_STREAM_MESSAGE_TYPE_PING":
        return k.EVENTS_STREAM_MESSAGE_TYPE_PING;
      case 2:
      case "EVENTS_STREAM_MESSAGE_TYPE_ERROR":
        return k.EVENTS_STREAM_MESSAGE_TYPE_ERROR;
      case 3:
      case "EVENTS_STREAM_MESSAGE_TYPE_SUBSCRIBED":
        return k.EVENTS_STREAM_MESSAGE_TYPE_SUBSCRIBED;
      case 4:
      case "EVENTS_STREAM_MESSAGE_TYPE_UNSUBSCRIBED":
        return k.EVENTS_STREAM_MESSAGE_TYPE_UNSUBSCRIBED;
      case 5:
      case "EVENTS_STREAM_MESSAGE_TYPE_PUBLISHED":
        return k.EVENTS_STREAM_MESSAGE_TYPE_PUBLISHED;
      default:
        throw new re2.Error("Unrecognized enum value " + A2 + " for enum EventsStreamMessageType");
    }
  }
  a92.eventsStreamMessageTypeFromJSON = L2;
  function M2(A2) {
    switch (A2) {
      case k.EVENTS_STREAM_MESSAGE_TYPE_UNSPECIFIED:
        return "EVENTS_STREAM_MESSAGE_TYPE_UNSPECIFIED";
      case k.EVENTS_STREAM_MESSAGE_TYPE_PING:
        return "EVENTS_STREAM_MESSAGE_TYPE_PING";
      case k.EVENTS_STREAM_MESSAGE_TYPE_ERROR:
        return "EVENTS_STREAM_MESSAGE_TYPE_ERROR";
      case k.EVENTS_STREAM_MESSAGE_TYPE_SUBSCRIBED:
        return "EVENTS_STREAM_MESSAGE_TYPE_SUBSCRIBED";
      case k.EVENTS_STREAM_MESSAGE_TYPE_UNSUBSCRIBED:
        return "EVENTS_STREAM_MESSAGE_TYPE_UNSUBSCRIBED";
      case k.EVENTS_STREAM_MESSAGE_TYPE_PUBLISHED:
        return "EVENTS_STREAM_MESSAGE_TYPE_PUBLISHED";
      default:
        return "UNKNOWN";
    }
  }
  a92.eventsStreamMessageTypeToJSON = M2;
  function $(A2) {
    switch (A2) {
      case k.EVENTS_STREAM_MESSAGE_TYPE_UNSPECIFIED:
        return 0;
      case k.EVENTS_STREAM_MESSAGE_TYPE_PING:
        return 1;
      case k.EVENTS_STREAM_MESSAGE_TYPE_ERROR:
        return 2;
      case k.EVENTS_STREAM_MESSAGE_TYPE_SUBSCRIBED:
        return 3;
      case k.EVENTS_STREAM_MESSAGE_TYPE_UNSUBSCRIBED:
        return 4;
      case k.EVENTS_STREAM_MESSAGE_TYPE_PUBLISHED:
        return 5;
      default:
        return 0;
    }
  }
  a92.eventsStreamMessageTypeToNumber = $;
  function J2() {
    return { collectionId: void 0, projectId: void 0, layoutId: void 0 };
  }
  a92.EventTarget = { encode(A2, N2 = g2.Writer.create()) {
    return A2.collectionId !== void 0 && N2.uint32(42).string(A2.collectionId), A2.projectId !== void 0 && N2.uint32(34).string(A2.projectId), A2.layoutId !== void 0 && N2.uint32(10).string(A2.layoutId), N2;
  }, decode(A2, N2) {
    const D2 = A2 instanceof g2.Reader ? A2 : new g2.Reader(A2);
    let W2 = N2 === void 0 ? D2.len : D2.pos + N2;
    const ee2 = J2();
    for (; D2.pos < W2; ) {
      const ae2 = D2.uint32();
      switch (ae2 >>> 3) {
        case 5:
          ee2.collectionId = D2.string();
          break;
        case 4:
          ee2.projectId = D2.string();
          break;
        case 1:
          ee2.layoutId = D2.string();
          break;
        default:
          D2.skipType(ae2 & 7);
          break;
      }
    }
    return ee2;
  }, fromJSON(A2) {
    return { collectionId: de2(A2.collectionId) ? String(A2.collectionId) : void 0, projectId: de2(A2.projectId) ? String(A2.projectId) : void 0, layoutId: de2(A2.layoutId) ? String(A2.layoutId) : void 0 };
  }, toJSON(A2) {
    const N2 = {};
    return A2.collectionId !== void 0 && (N2.collectionId = A2.collectionId), A2.projectId !== void 0 && (N2.projectId = A2.projectId), A2.layoutId !== void 0 && (N2.layoutId = A2.layoutId), N2;
  }, fromPartial(A2) {
    var N2, D2, W2;
    const ee2 = J2();
    return ee2.collectionId = (N2 = A2.collectionId) !== null && N2 !== void 0 ? N2 : void 0, ee2.projectId = (D2 = A2.projectId) !== null && D2 !== void 0 ? D2 : void 0, ee2.layoutId = (W2 = A2.layoutId) !== null && W2 !== void 0 ? W2 : void 0, ee2;
  } };
  function V2() {
    return { name: "", payload: void 0, requestMetadata: void 0, target: void 0 };
  }
  a92.PublishEventRequest = { encode(A2, N2 = g2.Writer.create()) {
    return A2.name !== "" && N2.uint32(10).string(A2.name), A2.payload !== void 0 && _.Struct.encode(_.Struct.wrap(A2.payload), N2.uint32(18).fork()).ldelim(), A2.requestMetadata !== void 0 && _.Value.encode(_.Value.wrap(A2.requestMetadata), N2.uint32(34).fork()).ldelim(), A2.target !== void 0 && a92.EventTarget.encode(A2.target, N2.uint32(26).fork()).ldelim(), N2;
  }, decode(A2, N2) {
    const D2 = A2 instanceof g2.Reader ? A2 : new g2.Reader(A2);
    let W2 = N2 === void 0 ? D2.len : D2.pos + N2;
    const ee2 = V2();
    for (; D2.pos < W2; ) {
      const ae2 = D2.uint32();
      switch (ae2 >>> 3) {
        case 1:
          ee2.name = D2.string();
          break;
        case 2:
          ee2.payload = _.Struct.unwrap(_.Struct.decode(D2, D2.uint32()));
          break;
        case 4:
          ee2.requestMetadata = _.Value.unwrap(_.Value.decode(D2, D2.uint32()));
          break;
        case 3:
          ee2.target = a92.EventTarget.decode(D2, D2.uint32());
          break;
        default:
          D2.skipType(ae2 & 7);
          break;
      }
    }
    return ee2;
  }, fromJSON(A2) {
    return { name: de2(A2.name) ? String(A2.name) : "", payload: oe2(A2.payload) ? A2.payload : void 0, requestMetadata: de2(A2 == null ? void 0 : A2.requestMetadata) ? A2.requestMetadata : void 0, target: de2(A2.target) ? a92.EventTarget.fromJSON(A2.target) : void 0 };
  }, toJSON(A2) {
    const N2 = {};
    return A2.name !== void 0 && (N2.name = A2.name), A2.payload !== void 0 && (N2.payload = A2.payload), A2.requestMetadata !== void 0 && (N2.requestMetadata = A2.requestMetadata), A2.target !== void 0 && (N2.target = A2.target ? a92.EventTarget.toJSON(A2.target) : void 0), N2;
  }, fromPartial(A2) {
    var N2, D2, W2;
    const ee2 = V2();
    return ee2.name = (N2 = A2.name) !== null && N2 !== void 0 ? N2 : "", ee2.payload = (D2 = A2.payload) !== null && D2 !== void 0 ? D2 : void 0, ee2.requestMetadata = (W2 = A2.requestMetadata) !== null && W2 !== void 0 ? W2 : void 0, ee2.target = A2.target !== void 0 && A2.target !== null ? a92.EventTarget.fromPartial(A2.target) : void 0, ee2;
  } };
  function q2() {
    return { name: "", payload: void 0, target: void 0, requestMetadata: void 0, id: "" };
  }
  a92.PublishEventResponse = { encode(A2, N2 = g2.Writer.create()) {
    return A2.name !== "" && N2.uint32(10).string(A2.name), A2.payload !== void 0 && _.Struct.encode(_.Struct.wrap(A2.payload), N2.uint32(18).fork()).ldelim(), A2.target !== void 0 && a92.EventTarget.encode(A2.target, N2.uint32(26).fork()).ldelim(), A2.requestMetadata !== void 0 && _.Value.encode(_.Value.wrap(A2.requestMetadata), N2.uint32(34).fork()).ldelim(), A2.id !== "" && N2.uint32(42).string(A2.id), N2;
  }, decode(A2, N2) {
    const D2 = A2 instanceof g2.Reader ? A2 : new g2.Reader(A2);
    let W2 = N2 === void 0 ? D2.len : D2.pos + N2;
    const ee2 = q2();
    for (; D2.pos < W2; ) {
      const ae2 = D2.uint32();
      switch (ae2 >>> 3) {
        case 1:
          ee2.name = D2.string();
          break;
        case 2:
          ee2.payload = _.Struct.unwrap(_.Struct.decode(D2, D2.uint32()));
          break;
        case 3:
          ee2.target = a92.EventTarget.decode(D2, D2.uint32());
          break;
        case 4:
          ee2.requestMetadata = _.Value.unwrap(_.Value.decode(D2, D2.uint32()));
          break;
        case 5:
          ee2.id = D2.string();
          break;
        default:
          D2.skipType(ae2 & 7);
          break;
      }
    }
    return ee2;
  }, fromJSON(A2) {
    return { name: de2(A2.name) ? String(A2.name) : "", payload: oe2(A2.payload) ? A2.payload : void 0, target: de2(A2.target) ? a92.EventTarget.fromJSON(A2.target) : void 0, requestMetadata: de2(A2 == null ? void 0 : A2.requestMetadata) ? A2.requestMetadata : void 0, id: de2(A2.id) ? String(A2.id) : "" };
  }, toJSON(A2) {
    const N2 = {};
    return A2.name !== void 0 && (N2.name = A2.name), A2.payload !== void 0 && (N2.payload = A2.payload), A2.target !== void 0 && (N2.target = A2.target ? a92.EventTarget.toJSON(A2.target) : void 0), A2.requestMetadata !== void 0 && (N2.requestMetadata = A2.requestMetadata), A2.id !== void 0 && (N2.id = A2.id), N2;
  }, fromPartial(A2) {
    var N2, D2, W2, ee2;
    const ae2 = q2();
    return ae2.name = (N2 = A2.name) !== null && N2 !== void 0 ? N2 : "", ae2.payload = (D2 = A2.payload) !== null && D2 !== void 0 ? D2 : void 0, ae2.target = A2.target !== void 0 && A2.target !== null ? a92.EventTarget.fromPartial(A2.target) : void 0, ae2.requestMetadata = (W2 = A2.requestMetadata) !== null && W2 !== void 0 ? W2 : void 0, ae2.id = (ee2 = A2.id) !== null && ee2 !== void 0 ? ee2 : "", ae2;
  } };
  function G2() {
    return { name: "", target: void 0 };
  }
  a92.SubscribePayload = { encode(A2, N2 = g2.Writer.create()) {
    return A2.name !== "" && N2.uint32(10).string(A2.name), A2.target !== void 0 && a92.EventTarget.encode(A2.target, N2.uint32(18).fork()).ldelim(), N2;
  }, decode(A2, N2) {
    const D2 = A2 instanceof g2.Reader ? A2 : new g2.Reader(A2);
    let W2 = N2 === void 0 ? D2.len : D2.pos + N2;
    const ee2 = G2();
    for (; D2.pos < W2; ) {
      const ae2 = D2.uint32();
      switch (ae2 >>> 3) {
        case 1:
          ee2.name = D2.string();
          break;
        case 2:
          ee2.target = a92.EventTarget.decode(D2, D2.uint32());
          break;
        default:
          D2.skipType(ae2 & 7);
          break;
      }
    }
    return ee2;
  }, fromJSON(A2) {
    return { name: de2(A2.name) ? String(A2.name) : "", target: de2(A2.target) ? a92.EventTarget.fromJSON(A2.target) : void 0 };
  }, toJSON(A2) {
    const N2 = {};
    return A2.name !== void 0 && (N2.name = A2.name), A2.target !== void 0 && (N2.target = A2.target ? a92.EventTarget.toJSON(A2.target) : void 0), N2;
  }, fromPartial(A2) {
    var N2;
    const D2 = G2();
    return D2.name = (N2 = A2.name) !== null && N2 !== void 0 ? N2 : "", D2.target = A2.target !== void 0 && A2.target !== null ? a92.EventTarget.fromPartial(A2.target) : void 0, D2;
  } };
  function H2() {
    return { code: 0, message: "" };
  }
  a92.EventsStreamError = { encode(A2, N2 = g2.Writer.create()) {
    return A2.code !== 0 && N2.uint32(8).int32(A2.code), A2.message !== "" && N2.uint32(18).string(A2.message), N2;
  }, decode(A2, N2) {
    const D2 = A2 instanceof g2.Reader ? A2 : new g2.Reader(A2);
    let W2 = N2 === void 0 ? D2.len : D2.pos + N2;
    const ee2 = H2();
    for (; D2.pos < W2; ) {
      const ae2 = D2.uint32();
      switch (ae2 >>> 3) {
        case 1:
          ee2.code = D2.int32();
          break;
        case 2:
          ee2.message = D2.string();
          break;
        default:
          D2.skipType(ae2 & 7);
          break;
      }
    }
    return ee2;
  }, fromJSON(A2) {
    return { code: de2(A2.code) ? Number(A2.code) : 0, message: de2(A2.message) ? String(A2.message) : "" };
  }, toJSON(A2) {
    const N2 = {};
    return A2.code !== void 0 && (N2.code = Math.round(A2.code)), A2.message !== void 0 && (N2.message = A2.message), N2;
  }, fromPartial(A2) {
    var N2, D2;
    const W2 = H2();
    return W2.code = (N2 = A2.code) !== null && N2 !== void 0 ? N2 : 0, W2.message = (D2 = A2.message) !== null && D2 !== void 0 ? D2 : "", W2;
  } };
  function B2() {
    return { reauthenticate: false, beforeTimestamp: "" };
  }
  a92.EventsStreamReconnectRequest = { encode(A2, N2 = g2.Writer.create()) {
    return A2.reauthenticate === true && N2.uint32(8).bool(A2.reauthenticate), A2.beforeTimestamp !== "" && N2.uint32(18).string(A2.beforeTimestamp), N2;
  }, decode(A2, N2) {
    const D2 = A2 instanceof g2.Reader ? A2 : new g2.Reader(A2);
    let W2 = N2 === void 0 ? D2.len : D2.pos + N2;
    const ee2 = B2();
    for (; D2.pos < W2; ) {
      const ae2 = D2.uint32();
      switch (ae2 >>> 3) {
        case 1:
          ee2.reauthenticate = D2.bool();
          break;
        case 2:
          ee2.beforeTimestamp = D2.string();
          break;
        default:
          D2.skipType(ae2 & 7);
          break;
      }
    }
    return ee2;
  }, fromJSON(A2) {
    return { reauthenticate: de2(A2.reauthenticate) ? !!A2.reauthenticate : false, beforeTimestamp: de2(A2.beforeTimestamp) ? String(A2.beforeTimestamp) : "" };
  }, toJSON(A2) {
    const N2 = {};
    return A2.reauthenticate !== void 0 && (N2.reauthenticate = A2.reauthenticate), A2.beforeTimestamp !== void 0 && (N2.beforeTimestamp = A2.beforeTimestamp), N2;
  }, fromPartial(A2) {
    var N2, D2;
    const W2 = B2();
    return W2.reauthenticate = (N2 = A2.reauthenticate) !== null && N2 !== void 0 ? N2 : false, W2.beforeTimestamp = (D2 = A2.beforeTimestamp) !== null && D2 !== void 0 ? D2 : "", W2;
  } };
  function Y2() {
    return { correlationId: void 0, subscribe: void 0, unsubscribe: void 0, publish: void 0, ping: void 0 };
  }
  a92.EventsStreamRequest = { encode(A2, N2 = g2.Writer.create()) {
    return A2.correlationId !== void 0 && N2.uint32(10).string(A2.correlationId), A2.subscribe !== void 0 && a92.SubscribePayload.encode(A2.subscribe, N2.uint32(802).fork()).ldelim(), A2.unsubscribe !== void 0 && a92.SubscribePayload.encode(A2.unsubscribe, N2.uint32(810).fork()).ldelim(), A2.publish !== void 0 && a92.PublishEventRequest.encode(A2.publish, N2.uint32(818).fork()).ldelim(), A2.ping !== void 0 && N2.uint32(826).string(A2.ping), N2;
  }, decode(A2, N2) {
    const D2 = A2 instanceof g2.Reader ? A2 : new g2.Reader(A2);
    let W2 = N2 === void 0 ? D2.len : D2.pos + N2;
    const ee2 = Y2();
    for (; D2.pos < W2; ) {
      const ae2 = D2.uint32();
      switch (ae2 >>> 3) {
        case 1:
          ee2.correlationId = D2.string();
          break;
        case 100:
          ee2.subscribe = a92.SubscribePayload.decode(D2, D2.uint32());
          break;
        case 101:
          ee2.unsubscribe = a92.SubscribePayload.decode(D2, D2.uint32());
          break;
        case 102:
          ee2.publish = a92.PublishEventRequest.decode(D2, D2.uint32());
          break;
        case 103:
          ee2.ping = D2.string();
          break;
        default:
          D2.skipType(ae2 & 7);
          break;
      }
    }
    return ee2;
  }, fromJSON(A2) {
    return { correlationId: de2(A2.correlationId) ? String(A2.correlationId) : void 0, subscribe: de2(A2.subscribe) ? a92.SubscribePayload.fromJSON(A2.subscribe) : void 0, unsubscribe: de2(A2.unsubscribe) ? a92.SubscribePayload.fromJSON(A2.unsubscribe) : void 0, publish: de2(A2.publish) ? a92.PublishEventRequest.fromJSON(A2.publish) : void 0, ping: de2(A2.ping) ? String(A2.ping) : void 0 };
  }, toJSON(A2) {
    const N2 = {};
    return A2.correlationId !== void 0 && (N2.correlationId = A2.correlationId), A2.subscribe !== void 0 && (N2.subscribe = A2.subscribe ? a92.SubscribePayload.toJSON(A2.subscribe) : void 0), A2.unsubscribe !== void 0 && (N2.unsubscribe = A2.unsubscribe ? a92.SubscribePayload.toJSON(A2.unsubscribe) : void 0), A2.publish !== void 0 && (N2.publish = A2.publish ? a92.PublishEventRequest.toJSON(A2.publish) : void 0), A2.ping !== void 0 && (N2.ping = A2.ping), N2;
  }, fromPartial(A2) {
    var N2, D2;
    const W2 = Y2();
    return W2.correlationId = (N2 = A2.correlationId) !== null && N2 !== void 0 ? N2 : void 0, W2.subscribe = A2.subscribe !== void 0 && A2.subscribe !== null ? a92.SubscribePayload.fromPartial(A2.subscribe) : void 0, W2.unsubscribe = A2.unsubscribe !== void 0 && A2.unsubscribe !== null ? a92.SubscribePayload.fromPartial(A2.unsubscribe) : void 0, W2.publish = A2.publish !== void 0 && A2.publish !== null ? a92.PublishEventRequest.fromPartial(A2.publish) : void 0, W2.ping = (D2 = A2.ping) !== null && D2 !== void 0 ? D2 : void 0, W2;
  } };
  function ne2() {
    return { correlationId: void 0, sessionId: void 0, event: void 0, pong: void 0, error: void 0, subscribed: void 0, unsubscribed: void 0, published: void 0, reconnectBefore: void 0 };
  }
  a92.EventsStreamResponse = { encode(A2, N2 = g2.Writer.create()) {
    return A2.correlationId !== void 0 && N2.uint32(18).string(A2.correlationId), A2.sessionId !== void 0 && N2.uint32(26).string(A2.sessionId), A2.event !== void 0 && a92.PublishEventResponse.encode(A2.event, N2.uint32(802).fork()).ldelim(), A2.pong !== void 0 && N2.uint32(1602).string(A2.pong), A2.error !== void 0 && a92.EventsStreamError.encode(A2.error, N2.uint32(1610).fork()).ldelim(), A2.subscribed !== void 0 && a92.SubscribePayload.encode(A2.subscribed, N2.uint32(1618).fork()).ldelim(), A2.unsubscribed !== void 0 && a92.SubscribePayload.encode(A2.unsubscribed, N2.uint32(1626).fork()).ldelim(), A2.published !== void 0 && a92.PublishEventResponse.encode(A2.published, N2.uint32(1634).fork()).ldelim(), A2.reconnectBefore !== void 0 && a92.EventsStreamReconnectRequest.encode(A2.reconnectBefore, N2.uint32(1642).fork()).ldelim(), N2;
  }, decode(A2, N2) {
    const D2 = A2 instanceof g2.Reader ? A2 : new g2.Reader(A2);
    let W2 = N2 === void 0 ? D2.len : D2.pos + N2;
    const ee2 = ne2();
    for (; D2.pos < W2; ) {
      const ae2 = D2.uint32();
      switch (ae2 >>> 3) {
        case 2:
          ee2.correlationId = D2.string();
          break;
        case 3:
          ee2.sessionId = D2.string();
          break;
        case 100:
          ee2.event = a92.PublishEventResponse.decode(D2, D2.uint32());
          break;
        case 200:
          ee2.pong = D2.string();
          break;
        case 201:
          ee2.error = a92.EventsStreamError.decode(D2, D2.uint32());
          break;
        case 202:
          ee2.subscribed = a92.SubscribePayload.decode(D2, D2.uint32());
          break;
        case 203:
          ee2.unsubscribed = a92.SubscribePayload.decode(D2, D2.uint32());
          break;
        case 204:
          ee2.published = a92.PublishEventResponse.decode(D2, D2.uint32());
          break;
        case 205:
          ee2.reconnectBefore = a92.EventsStreamReconnectRequest.decode(D2, D2.uint32());
          break;
        default:
          D2.skipType(ae2 & 7);
          break;
      }
    }
    return ee2;
  }, fromJSON(A2) {
    return { correlationId: de2(A2.correlationId) ? String(A2.correlationId) : void 0, sessionId: de2(A2.sessionId) ? String(A2.sessionId) : void 0, event: de2(A2.event) ? a92.PublishEventResponse.fromJSON(A2.event) : void 0, pong: de2(A2.pong) ? String(A2.pong) : void 0, error: de2(A2.error) ? a92.EventsStreamError.fromJSON(A2.error) : void 0, subscribed: de2(A2.subscribed) ? a92.SubscribePayload.fromJSON(A2.subscribed) : void 0, unsubscribed: de2(A2.unsubscribed) ? a92.SubscribePayload.fromJSON(A2.unsubscribed) : void 0, published: de2(A2.published) ? a92.PublishEventResponse.fromJSON(A2.published) : void 0, reconnectBefore: de2(A2.reconnectBefore) ? a92.EventsStreamReconnectRequest.fromJSON(A2.reconnectBefore) : void 0 };
  }, toJSON(A2) {
    const N2 = {};
    return A2.correlationId !== void 0 && (N2.correlationId = A2.correlationId), A2.sessionId !== void 0 && (N2.sessionId = A2.sessionId), A2.event !== void 0 && (N2.event = A2.event ? a92.PublishEventResponse.toJSON(A2.event) : void 0), A2.pong !== void 0 && (N2.pong = A2.pong), A2.error !== void 0 && (N2.error = A2.error ? a92.EventsStreamError.toJSON(A2.error) : void 0), A2.subscribed !== void 0 && (N2.subscribed = A2.subscribed ? a92.SubscribePayload.toJSON(A2.subscribed) : void 0), A2.unsubscribed !== void 0 && (N2.unsubscribed = A2.unsubscribed ? a92.SubscribePayload.toJSON(A2.unsubscribed) : void 0), A2.published !== void 0 && (N2.published = A2.published ? a92.PublishEventResponse.toJSON(A2.published) : void 0), A2.reconnectBefore !== void 0 && (N2.reconnectBefore = A2.reconnectBefore ? a92.EventsStreamReconnectRequest.toJSON(A2.reconnectBefore) : void 0), N2;
  }, fromPartial(A2) {
    var N2, D2, W2;
    const ee2 = ne2();
    return ee2.correlationId = (N2 = A2.correlationId) !== null && N2 !== void 0 ? N2 : void 0, ee2.sessionId = (D2 = A2.sessionId) !== null && D2 !== void 0 ? D2 : void 0, ee2.event = A2.event !== void 0 && A2.event !== null ? a92.PublishEventResponse.fromPartial(A2.event) : void 0, ee2.pong = (W2 = A2.pong) !== null && W2 !== void 0 ? W2 : void 0, ee2.error = A2.error !== void 0 && A2.error !== null ? a92.EventsStreamError.fromPartial(A2.error) : void 0, ee2.subscribed = A2.subscribed !== void 0 && A2.subscribed !== null ? a92.SubscribePayload.fromPartial(A2.subscribed) : void 0, ee2.unsubscribed = A2.unsubscribed !== void 0 && A2.unsubscribed !== null ? a92.SubscribePayload.fromPartial(A2.unsubscribed) : void 0, ee2.published = A2.published !== void 0 && A2.published !== null ? a92.PublishEventResponse.fromPartial(A2.published) : void 0, ee2.reconnectBefore = A2.reconnectBefore !== void 0 && A2.reconnectBefore !== null ? a92.EventsStreamReconnectRequest.fromPartial(A2.reconnectBefore) : void 0, ee2;
  } };
  class Z2 {
    constructor(N2) {
      this.rpc = N2, this.Stream = this.Stream.bind(this), this.Publish = this.Publish.bind(this);
    }
    Stream(N2) {
      const D2 = N2.pipe(E2.map((ee2) => a92.EventsStreamRequest.encode(ee2).finish()));
      return this.rpc.bidirectionalStreamingRequest("apis.event.v2.EventService", "Stream", D2).pipe(E2.map((ee2) => a92.EventsStreamResponse.decode(new g2.Reader(ee2))));
    }
    Publish(N2) {
      const D2 = a92.PublishEventRequest.encode(N2).finish();
      return this.rpc.request("apis.event.v2.EventService", "Publish", D2).then((ee2) => a92.PublishEventResponse.decode(new g2.Reader(ee2)));
    }
  }
  a92.EventServiceClientImpl = Z2, a92.EventServiceDefinition = { name: "EventService", fullName: "apis.event.v2.EventService", methods: {
    /**
    * Stream Events
    * buf:lint:ignore RPC_REQUEST_STANDARD_NAME
    * buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
    */
    stream: { name: "Stream", requestType: a92.EventsStreamRequest, requestStream: true, responseType: a92.EventsStreamResponse, responseStream: true, options: {} },
    /**
    * Publish Event
    * buf:lint:ignore RPC_REQUEST_STANDARD_NAME
    * buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
    */
    publish: { name: "Publish", requestType: a92.PublishEventRequest, requestStream: false, responseType: a92.PublishEventResponse, responseStream: false, options: {} }
  } };
  var re2 = (() => {
    if (typeof re2 < "u")
      return re2;
    if (typeof self < "u")
      return self;
    if (typeof window < "u")
      return window;
    if (typeof commonjsGlobal$1 < "u")
      return commonjsGlobal$1;
    throw "Unable to locate global object";
  })();
  g2.util.Long !== S2.default && (g2.util.Long = S2.default, g2.configure());
  function oe2(A2) {
    return typeof A2 == "object" && A2 !== null;
  }
  function de2(A2) {
    return A2 != null;
  }
})(api);
(function(a92) {
  var u2 = commonjsGlobal$1 && commonjsGlobal$1.__createBinding || (Object.create ? function(l2, v2, S2, g2) {
    g2 === void 0 && (g2 = S2), Object.defineProperty(l2, g2, { enumerable: true, get: function() {
      return v2[S2];
    } });
  } : function(l2, v2, S2, g2) {
    g2 === void 0 && (g2 = S2), l2[g2] = v2[S2];
  }), c = commonjsGlobal$1 && commonjsGlobal$1.__exportStar || function(l2, v2) {
    for (var S2 in l2)
      S2 !== "default" && !v2.hasOwnProperty(S2) && u2(v2, l2, S2);
  };
  Object.defineProperty(a92, "__esModule", { value: true }), a92.eventsApiSupportedEvents = a92.eventsApiEventRpcCalls = void 0, c(api, a92), a92.eventsApiEventRpcCalls = { ping: "pong", publish: "published", subscribe: "subscribed", unsubscribe: "unsubscribed" }, a92.eventsApiSupportedEvents = [...Object.values(a92.eventsApiEventRpcCalls), "error", "event", "reconnectBefore"];
})(dist$1);
var ws = null;
typeof WebSocket < "u" ? ws = WebSocket : typeof MozWebSocket < "u" ? ws = MozWebSocket : typeof commonjsGlobal$1 < "u" ? ws = commonjsGlobal$1.WebSocket || commonjsGlobal$1.MozWebSocket : typeof window < "u" ? ws = window.WebSocket || window.MozWebSocket : typeof self < "u" && (ws = self.WebSocket || self.MozWebSocket);
var browser$1 = ws, matcher = { exports: {} }, escapeStringRegexp$1 = (a92) => {
  if (typeof a92 != "string")
    throw new TypeError("Expected a string");
  return a92.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
};
const escapeStringRegexp = escapeStringRegexp$1, regexpCache = /* @__PURE__ */ new Map();
function sanitizeArray(a92, u2) {
  if (!Array.isArray(a92))
    switch (typeof a92) {
      case "string":
        a92 = [a92];
        break;
      case "undefined":
        a92 = [];
        break;
      default:
        throw new TypeError(`Expected '${u2}' to be a string or an array, but got a type of '${typeof a92}'`);
    }
  return a92.filter((c) => {
    if (typeof c != "string") {
      if (typeof c > "u")
        return false;
      throw new TypeError(`Expected '${u2}' to be an array of strings, but found a type of '${typeof c}' in the array`);
    }
    return true;
  });
}
function makeRegexp(a92, u2) {
  u2 = { caseSensitive: false, ...u2 };
  const c = a92 + JSON.stringify(u2);
  if (regexpCache.has(c))
    return regexpCache.get(c);
  const l2 = a92[0] === "!";
  l2 && (a92 = a92.slice(1)), a92 = escapeStringRegexp(a92).replace(/\\\*/g, "[\\s\\S]*");
  const v2 = new RegExp(`^${a92}$`, u2.caseSensitive ? "" : "i");
  return v2.negated = l2, regexpCache.set(c, v2), v2;
}
matcher.exports = (a92, u2, c) => {
  if (a92 = sanitizeArray(a92, "inputs"), u2 = sanitizeArray(u2, "patterns"), u2.length === 0)
    return [];
  const l2 = u2[0][0] === "!";
  u2 = u2.map((S2) => makeRegexp(S2, c));
  const v2 = [];
  for (const S2 of a92) {
    let g2 = l2;
    for (const E2 of u2)
      E2.test(S2) && (g2 = !E2.negated);
    g2 && v2.push(S2);
  }
  return v2;
};
matcher.exports.isMatch = (a92, u2, c) => (a92 = sanitizeArray(a92, "inputs"), u2 = sanitizeArray(u2, "patterns"), u2.length === 0 ? false : a92.some((l2) => u2.every((v2) => {
  const S2 = makeRegexp(v2, c), g2 = S2.test(l2);
  return S2.negated ? !g2 : g2;
})));
var matcherExports = matcher.exports, __createBinding$1 = commonjsGlobal$1 && commonjsGlobal$1.__createBinding || (Object.create ? function(a92, u2, c, l2) {
  l2 === void 0 && (l2 = c);
  var v2 = Object.getOwnPropertyDescriptor(u2, c);
  (!v2 || ("get" in v2 ? !u2.__esModule : v2.writable || v2.configurable)) && (v2 = { enumerable: true, get: function() {
    return u2[c];
  } }), Object.defineProperty(a92, l2, v2);
} : function(a92, u2, c, l2) {
  l2 === void 0 && (l2 = c), a92[l2] = u2[c];
}), __setModuleDefault$1 = commonjsGlobal$1 && commonjsGlobal$1.__setModuleDefault || (Object.create ? function(a92, u2) {
  Object.defineProperty(a92, "default", { enumerable: true, value: u2 });
} : function(a92, u2) {
  a92.default = u2;
}), __importStar$1 = commonjsGlobal$1 && commonjsGlobal$1.__importStar || function(a92) {
  if (a92 && a92.__esModule)
    return a92;
  var u2 = {};
  if (a92 != null)
    for (var c in a92)
      c !== "default" && Object.prototype.hasOwnProperty.call(a92, c) && __createBinding$1(u2, a92, c);
  return __setModuleDefault$1(u2, a92), u2;
}, __importDefault$8 = commonjsGlobal$1 && commonjsGlobal$1.__importDefault || function(a92) {
  return a92 && a92.__esModule ? a92 : { default: a92 };
};
Object.defineProperty(eventapi, "__esModule", { value: true });
eventapi.EventApi = void 0;
const EventApiModel = __importStar$1(dist$1), isomorphic_ws_1 = __importDefault$8(browser$1), uuid_1 = require$$1$2, NiceGrpc = __importStar$1(lib$1), matcher_1 = matcherExports, api_1 = api$2, clientVersion = version$3, WS_PING_INTERVAL = 2e4, WS_PING_TIMEOUT = 1e4, WS_RECONNECT_DELAY = 2e3, WS_MAX_BADAUTH_ATTEMPTS = 3, LOG_CATEGORY = "EventApi";
class EventApi extends api_1.ApiClient {
  constructor(u2, c, l2, v2, S2, g2) {
    super(u2, c, v2, LOG_CATEGORY, S2, g2), this.websocketServer = l2, this.subscriptions = /* @__PURE__ */ new Set(), this.eventHandlers = {}, this.calls = {}, this.messageQueue = [], this.websocketReady = false, this.reconnectionAttempts = 0, this.badAuthentication = false, this.eventsClient = null;
  }
  /**
  * Publish a custom event
  *
  * note: if this session has an established stream, all custom
  * events will use that transport.
  *
  * @param request
  * @returns
  */
  publish(...u2) {
    return this.websocketReady ? this.call("publish", u2[0]) : this.eventsClient.publish(...u2);
  }
  /**
  * Open the connection
  */
  connect() {
    if (!this.ws) {
      this.cleanup();
      const u2 = this.accessToken, c = [`version=${clientVersion}`, `sessionid=${this.sessionId}`];
      this.sdkVersion && c.push(`sdkversion=${this.sdkVersion}`), this.ws = new isomorphic_ws_1.default(`${this.websocketServer}/stream?${c.join("&")}`, ["Bearer", this.accessToken]);
      let l2;
      this.ws.addEventListener("message", (v2) => {
        const S2 = JSON.parse(v2.data.toString()), g2 = S2.result;
        if (S2.error && (l2 = S2.error, this.handleEvent("error", { error: { code: S2.code, message: S2.message } }), ["You do not have permission to this resource", "You do not have permission to this resource"].includes(S2.message) && (this.badAuthentication = true)), !g2)
          return;
        g2.reconnectBefore && g2.reconnectBefore.reauthenticate && this.accessToken === u2 && (this.badAuthentication = true);
        const E2 = EventApiModel.eventsApiSupportedEvents.find((_) => !!g2[_]);
        E2 && this.handleEvent(E2, g2);
      }), this.ws.addEventListener("open", () => {
        this.log.info("websocket connected"), this.call("ping", "hello", { timeout: WS_PING_TIMEOUT, skipQueue: true }).then(() => {
          this.ready();
        }).catch((v2) => {
          !l2 && v2.message !== "Stream connection closed" && this.disconnect("hello timeout");
        });
      }), this.ws.addEventListener("close", (v2) => {
        var S2;
        l2 ? this.reconnect(`${(S2 = l2 == null ? void 0 : l2.message) !== null && S2 !== void 0 ? S2 : "unknown"}`) : this.reconnect(`closed - ${v2.reason || v2.code}`);
      }), this.ws.addEventListener("error", (v2) => {
        l2 = v2;
      });
    }
  }
  /**
  * Subscribe to an event
  *
  * note: if a connection does not exist, one will be established.
  *
  * @param type
  * @param payload
  */
  async subscribe(u2, c = {}) {
    return this.call("subscribe", { name: u2, ...c }).then(() => {
      this.subscriptions.add(JSON.stringify({ name: u2, ...c }));
    });
  }
  /**
  * Unsubscribe from an event
  * @param type
  * @param payload
  */
  async unsubscribe(u2, c = {}) {
    this.subscriptions.delete(JSON.stringify({ name: u2, payload: c })), await this.call("unsubscribe", { name: u2, ...c });
  }
  on(u2, c, l2) {
    const v2 = l2 || c, S2 = { ignoreSessionEvents: false, allowedSessionEvents: [], ...l2 ? c : {} };
    this.eventHandlers[u2] || (this.eventHandlers[u2] = []), this.eventHandlers[u2].push({ ...S2, handler: v2 });
  }
  off(u2, c, l2) {
    var v2;
    const S2 = l2 || c, g2 = { ignoreSessionEvents: false, allowedSessionEvents: [], ...l2 ? c : {} };
    this.eventHandlers[u2] = ((v2 = this.eventHandlers[u2]) !== null && v2 !== void 0 ? v2 : []).filter((E2) => !(E2.ignoreSessionEvents === g2.ignoreSessionEvents && E2.allowedSessionEvents === g2.allowedSessionEvents && E2.handler === S2 && E2.name === g2.name));
  }
  /**
  * Disconnect the websocket connection
  */
  disconnect(u2) {
    this.log.warn(`disconnected from events reason=${u2}`), Object.values(this.calls).forEach((c) => {
      clearTimeout(c.timeout), c.reject(new Error("Stream connection closed"));
    }), this.calls = {}, this.cleanup();
  }
  _setup(u2) {
    this.eventsClient = this.clientFactory.create(EventApiModel.EventServiceDefinition, this.channel, { "*": u2 }), this.badAuthentication && (this.badAuthentication = false, this.reconnectionAttempts = 0, this.reconnect("updated token"));
  }
  /**
  * Called when the websocket is ready.
  */
  ready() {
    this.reconnectionAttempts = 0, this.badAuthentication = false, this.websocketReady = true, this.handleEvent("connected", { connected: void 0 });
    for (const u2 of this.subscriptions.values())
      this.send({ subscribe: JSON.parse(u2), correlationId: (0, uuid_1.v4)() });
    for (const u2 of this.messageQueue)
      this.send(u2);
    this.messageQueue = [], this.pingLoop = setInterval(() => {
      this.ping();
    }, WS_PING_INTERVAL);
  }
  ping() {
    this.call("ping", `${+/* @__PURE__ */ new Date()}`, { timeout: WS_PING_TIMEOUT }).catch(() => {
      this.reconnect("connection stalled");
    });
  }
  /**
  * Reconnect event stream
  *
  * @param reason Rec
  */
  reconnect(u2) {
    this.disconnect(u2), this.reconnectTimeout = setTimeout(() => {
      if (this.reconnectionAttempts++, this.badAuthentication && this.reconnectionAttempts >= WS_MAX_BADAUTH_ATTEMPTS) {
        this.log.warn("Maximum number of reconnection attempts reached with bad authentication, please re-authenticate the SDK");
        return;
      }
      this.connect();
    }, WS_RECONNECT_DELAY);
  }
  /**
  * Send a raw message to the websocket.
  *
  * @param data
  */
  send(u2) {
    this.ws && this.ws.readyState === this.ws.OPEN ? this.ws.send(JSON.stringify(u2)) : this.log.warn("Message sent to a disconnected stream");
  }
  /**
  * Process a stream event
  *
  * @param name the name of the event
  * @param payload the full event stream payload
  *
  * @returns void
  */
  handleEvent(u2, c) {
    var l2;
    if (this.calls[c.correlationId]) {
      const v2 = EventApiModel.eventsApiEventRpcCalls[this.calls[c.correlationId].method] === u2, S2 = !!c.error;
      if (v2 || S2) {
        this.resolveCall(u2, c);
        return;
      }
    }
    for (const v2 of (l2 = this.eventHandlers[u2]) !== null && l2 !== void 0 ? l2 : []) {
      if (u2 === "event" && c.event) {
        if (c.sessionId === this.sessionId && v2.ignoreSessionEvents && !v2.allowedSessionEvents.includes(c.event.name)) {
          this.log.trace("ignoring user event from self: " + c.event.name + ", payload.sessionId=" + c.sessionId + ", this.sessionId");
          continue;
        }
        if (v2.name && !(0, matcher_1.isMatch)(c.event.name, v2.name))
          continue;
        if (this.eventLogCallback) {
          let S2, g2 = c.event.name, E2;
          if (c.event.name.startsWith(EventApi.APISTREAM_EVENT_PREFIX)) {
            let _ = c.event.name.split(":");
            _.length == 4 && (S2 = _[1], g2 = _[2], E2 = _[3]), this.eventLogCallback(S2, g2, E2, c);
          }
        }
      } else if (c.sessionId === this.sessionId && v2.ignoreSessionEvents) {
        this.log.trace("ignoring event from self: " + c.event.name + ", payload.sessionId=" + c.sessionId + ", this.sessionId");
        continue;
      }
      this.log.trace("processing event: payload.sessionId=" + c.sessionId + ", this.sessionId"), v2.handler(c ? c[u2] : void 0, { isFromCurrentSession: c.sessionId === this.sessionId });
    }
  }
  /**
  * Make an RPC call
  *
  * Initiates an async request via the stream. A correlationId is generated and used to track
  * responses and errors. A handler is registered
  *
  * @param method request method to call
  * @param payload payload to send
  * @param opts timeout
  * @returns
  */
  async call(u2, c, l2 = { timeout: 2e4, skipQueue: false }) {
    this.ws || this.connect();
    const v2 = (0, uuid_1.v4)();
    return new Promise((S2, g2) => {
      const E2 = setTimeout(() => {
        delete this.calls[v2], g2(new Error("Request timed out"));
      }, l2.timeout);
      this.calls[v2] = { resolve: S2, reject: g2, timeout: E2, method: u2 }, this.websocketReady || l2.skipQueue ? this.send({ [u2]: c, correlationId: v2 }) : this.messageQueue.push({ [u2]: c, correlationId: v2 });
    });
  }
  /**
  * Handler for `.call()`
  *
  * Handle response events for a socket call.
  *
  * @param name name of responding event
  * @param payload payload of the event
  * @returns void
  */
  resolveCall(u2, c) {
    const l2 = this.calls[c.correlationId];
    if (l2) {
      if (clearTimeout(l2.timeout), delete this.calls[c.correlationId], u2 === "error" && c.error) {
        l2.reject(new NiceGrpc.ClientError("error", c.error.code, c.error.message));
        return;
      }
      l2.resolve(c[u2]);
    }
  }
  /**
  * Cleanup connection
  *
  * This cleans up the local state for a given websocket connection.
  */
  cleanup() {
    clearTimeout(this.pingLoop), clearTimeout(this.reconnectTimeout), this.websocketReady = false, this.ws && (this.ws.onclose = function() {
    }, this.ws.close(), this.ws = null);
  }
}
eventapi.EventApi = EventApi;
EventApi.APISTREAM_EVENT_PREFIX = "apistream";
var livekit = {}, __importDefault$7 = commonjsGlobal$1 && commonjsGlobal$1.__importDefault || function(a92) {
  return a92 && a92.__esModule ? a92 : { default: a92 };
};
Object.defineProperty(livekit, "__esModule", { value: true });
livekit.LiveKitUtils = void 0;
const jwt_decode_1 = __importDefault$7(require$$0$2);
class LiveKitUtils {
  static decodeJwt(u2) {
    return (0, jwt_decode_1.default)(u2, { header: false });
  }
  static isRoomAdmin(u2) {
    return LiveKitUtils.decodeJwt(u2).video.roomAdmin;
  }
  static getRoomName(u2) {
    return LiveKitUtils.decodeJwt(u2).video.room;
  }
}
livekit.LiveKitUtils = LiveKitUtils;
(function(a92) {
  var u2 = commonjsGlobal$1 && commonjsGlobal$1.__createBinding || (Object.create ? function(de2, A2, N2, D2) {
    D2 === void 0 && (D2 = N2);
    var W2 = Object.getOwnPropertyDescriptor(A2, N2);
    (!W2 || ("get" in W2 ? !A2.__esModule : W2.writable || W2.configurable)) && (W2 = { enumerable: true, get: function() {
      return A2[N2];
    } }), Object.defineProperty(de2, D2, W2);
  } : function(de2, A2, N2, D2) {
    D2 === void 0 && (D2 = N2), de2[D2] = A2[N2];
  }), c = commonjsGlobal$1 && commonjsGlobal$1.__setModuleDefault || (Object.create ? function(de2, A2) {
    Object.defineProperty(de2, "default", { enumerable: true, value: A2 });
  } : function(de2, A2) {
    de2.default = A2;
  }), l2 = commonjsGlobal$1 && commonjsGlobal$1.__importStar || function(de2) {
    if (de2 && de2.__esModule)
      return de2;
    var A2 = {};
    if (de2 != null)
      for (var N2 in de2)
        N2 !== "default" && Object.prototype.hasOwnProperty.call(de2, N2) && u2(A2, de2, N2);
    return c(A2, de2), A2;
  }, v2 = commonjsGlobal$1 && commonjsGlobal$1.__importDefault || function(de2) {
    return de2 && de2.__esModule ? de2 : { default: de2 };
  };
  Object.defineProperty(a92, "__esModule", { value: true }), a92.ApiStream = a92.LiveKitUtils = a92.EventApiModel = a92.LayoutApiModel = a92.LiveApiModel = void 0;
  const S2 = v2(require$$0$2), g2 = require$$1$2, E2 = require$$2$1, _ = layoutapi, k = liveapi, L2 = eventapi, M2 = l2(api$1);
  a92.LiveApiModel = M2;
  const $ = l2(dist$2);
  a92.LayoutApiModel = $;
  const J2 = l2(dist$1);
  a92.EventApiModel = J2;
  const V2 = livekit;
  Object.defineProperty(a92, "LiveKitUtils", { enumerable: true, get: function() {
    return V2.LiveKitUtils;
  } });
  const q2 = logger, G2 = version$3, H2 = { dev: "http://127.0.0.1:8081", stage: "https://live.silly.horse/grpcweb/live/v2", prod: "https://live.api.stream/grpcweb/live/v2" }, B2 = { dev: "https://live.silly.horse/grpcweb/layout/v2", stage: "https://live.silly.horse/grpcweb/layout/v2", prod: "https://live.api.stream/grpcweb/layout/v2" }, Y2 = { dev: "wss://live.silly.horse/event/v2", stage: "wss://live.silly.horse/event/v2", prod: "wss://live.api.stream/event/v2" }, ne2 = { dev: "https://live.silly.horse/grpcweb/event/v2", stage: "https://live.silly.horse/grpcweb/event/v2", prod: "https://live.api.stream/grpcweb/event/v2" }, Z2 = { dev: "wss://live.silly.horse/webrtc/v2", stage: "wss://live.silly.horse/webrtc/v2", prod: "wss://live.api.stream/webrtc/v2" }, re2 = { dev: "https://live.silly.horse/webrtc/v2", stage: "https://live.silly.horse/webrtc/v2", prod: "https://live.api.stream/webrtc/v2" };
  class oe2 {
    /**
    * Create an ApiStream API Client
    */
    constructor(A2 = {}) {
      var N2;
      const D2 = { env: "prod", logLevel: "Warn", ...A2 };
      this.env = D2.env;
      let W2 = (0, g2.v4)();
      D2.sessionId != null && (W2 = D2.sessionId), this.log = q2.logger.getCategory("ApiStream"), this.setLogLevel(D2.env == "dev" ? "Trace" : D2.logLevel);
      const ee2 = (N2 = D2.overrideEndpoints) !== null && N2 !== void 0 ? N2 : {};
      ee2.liveApiServer == null && (ee2.liveApiServer = H2[this.env]), ee2.layoutApiServer == null && (ee2.layoutApiServer = B2[this.env]), ee2.eventApiServer == null && (ee2.eventApiServer = ne2[this.env]), ee2.eventApiWebSocketServer == null && (ee2.eventApiWebSocketServer = Y2[this.env]), this.eventApi = new L2.EventApi(W2, ee2.eventApiServer, ee2.eventApiWebSocketServer, D2.sdkVersion, D2.apiLogCallback, D2.eventLogCallback), this.layoutApi = new _.LayoutApi(W2, this.eventApi, ee2.layoutApiServer, D2.sdkVersion, D2.apiLogCallback), this.liveApi = new k.LiveApi(W2, this.eventApi, ee2.liveApiServer, this.setAccessToken.bind(this), D2.apiKey, D2.sdkVersion, D2.apiLogCallback), this.eventApi.on("reconnectBefore", (ae2) => {
        ae2.reauthenticate && this.liveApi.authentication.refreshAccessToken({}).catch(() => {
        });
      }), this.log.info("api.stream: sessionid=" + W2 + ", version=" + G2 + ", sdkVersion=" + D2.sdkVersion);
    }
    /**
    * Returns the live api client
    *
    * @returns the live api client
    */
    LiveApi() {
      return this.liveApi;
    }
    /**
    * Returns the layout api client
    *
    * @returns the layout api client
    */
    LayoutApi() {
      return this.layoutApi;
    }
    /**
    * Returns the layout api client
    *
    * @returns the layout api client
    */
    EventApi() {
      return this.eventApi;
    }
    setLogLevel(A2) {
      try {
        let N2 = E2.LogLevel.toLogLevel(A2);
        q2.logger.updateRuntimeSettings({ level: N2 });
      } catch {
        this.log.warn(`unknown logging level ${A2}`);
      }
    }
    setAccessToken(A2) {
      this.decodedAccessToken = oe2.decodeAccessToken(A2), this.log.debug("setting accessToken", A2, this.decodedAccessToken), this.layoutApi.setAccessToken(A2), this.liveApi.setAccessToken(A2), this.eventApi.setAccessToken(A2);
    }
    getAccessToken() {
      return this.decodedAccessToken;
    }
    /**
    * Are we running as a guest role?
    *
    * @returns {(ApiStream.GuestProject | null)} return the active project if running as a guest role
    */
    getGuestProject() {
      return this.decodedAccessToken.guestControl;
    }
    /**
    * Initialize the api library and check if we are running inside of the rendering engine
    * @async
    * @param {string} accessToken - a valid ApiStream access token
    * @returns {(ApiStream.GuestProject | null)} if we are operating inside of the rendering engine, this is the active project
    */
    async load(A2) {
      if (A2 == null && typeof window < "u") {
        let N2 = this.parseQuery();
        N2.get(oe2.ACCESS_TOKEN_QUERY_PARAM) != null && (A2 = N2.get(oe2.ACCESS_TOKEN_QUERY_PARAM));
      }
      return A2 != null && (this.setAccessToken(A2), this.decodedAccessToken.guestControl != null) ? (this.log.info("loading guest token and exchanging"), await this.LiveApi().authentication.refreshAccessToken({}), this.log.info("auto-loading project = " + JSON.stringify(this.decodedAccessToken.guestControl)), this.decodedAccessToken.guestControl) : null;
    }
    /**
    * get the signaling address of the appropriate livekit webrtc server
    *
    * @param {boolean} admin - if true, return the admin (vs. client) address
    * @returns {string} the address of the appropriate livekit webrtc server
    */
    getLiveKitServer(A2 = false) {
      return A2 ? re2[this.env] : Z2[this.env];
    }
    parseQuery() {
      let A2 = window.location.search, N2 = /* @__PURE__ */ new Map(), D2 = (A2[0] === "?" ? A2.substr(1) : A2).split("&");
      for (let W2 = 0; W2 < D2.length; W2++) {
        let ee2 = D2[W2].split("=");
        ee2.length == 2 && (N2.set(decodeURIComponent(ee2[0]), decodeURIComponent(ee2[1] || "")), this.log.debug(`found query param: ${decodeURIComponent(ee2[0])}=${decodeURIComponent(ee2[1] || "")}`));
      }
      return N2;
    }
    static decodeAccessToken(A2) {
      let N2 = (0, S2.default)(A2, { header: false }), D2 = { serviceUserId: N2.user.serviceUserId, userId: N2.user.userId, displayName: N2.user.displayName, trial: N2.user.trial, demo: N2.user.demo };
      return N2.guestControl != null && (D2.guestControl = { collectionId: N2.guestControl.collectionId, projectId: N2.guestControl.projectId, role: M2.roleFromJSON(N2.guestControl.role) }), D2;
    }
  }
  a92.ApiStream = oe2, oe2.ACCESS_TOKEN_QUERY_PARAM = "at";
})(lib$2);
var dist = {}, AccessToken$1 = {}, jws$3 = {}, safeBuffer = { exports: {} };
(function(a92, u2) {
  var c = require$$0$1, l2 = c.Buffer;
  function v2(g2, E2) {
    for (var _ in g2)
      E2[_] = g2[_];
  }
  l2.from && l2.alloc && l2.allocUnsafe && l2.allocUnsafeSlow ? a92.exports = c : (v2(c, u2), u2.Buffer = S2);
  function S2(g2, E2, _) {
    return l2(g2, E2, _);
  }
  v2(l2, S2), S2.from = function(g2, E2, _) {
    if (typeof g2 == "number")
      throw new TypeError("Argument must not be a number");
    return l2(g2, E2, _);
  }, S2.alloc = function(g2, E2, _) {
    if (typeof g2 != "number")
      throw new TypeError("Argument must be a number");
    var k = l2(g2);
    return E2 !== void 0 ? typeof _ == "string" ? k.fill(E2, _) : k.fill(E2) : k.fill(0), k;
  }, S2.allocUnsafe = function(g2) {
    if (typeof g2 != "number")
      throw new TypeError("Argument must be a number");
    return l2(g2);
  }, S2.allocUnsafeSlow = function(g2) {
    if (typeof g2 != "number")
      throw new TypeError("Argument must be a number");
    return c.SlowBuffer(g2);
  };
})(safeBuffer, safeBuffer.exports);
var safeBufferExports = safeBuffer.exports, Buffer$7 = safeBufferExports.Buffer, Stream$2 = require$$0$1, util$3 = require$$0$1;
function DataStream$2(a92) {
  if (this.buffer = null, this.writable = true, this.readable = true, !a92)
    return this.buffer = Buffer$7.alloc(0), this;
  if (typeof a92.pipe == "function")
    return this.buffer = Buffer$7.alloc(0), a92.pipe(this), this;
  if (a92.length || typeof a92 == "object")
    return this.buffer = a92, this.writable = false, process.nextTick((function() {
      this.emit("end", a92), this.readable = false, this.emit("close");
    }).bind(this)), this;
  throw new TypeError("Unexpected data type (" + typeof a92 + ")");
}
util$3.inherits(DataStream$2, Stream$2);
DataStream$2.prototype.write = function a43(u2) {
  this.buffer = Buffer$7.concat([this.buffer, Buffer$7.from(u2)]), this.emit("data", u2);
};
DataStream$2.prototype.end = function a44(u2) {
  u2 && this.write(u2), this.emit("end", u2), this.emit("close"), this.writable = false, this.readable = false;
};
var dataStream = DataStream$2, Buffer$6 = require$$0$1.Buffer, SlowBuffer = require$$0$1.SlowBuffer, bufferEqualConstantTime = bufferEq;
function bufferEq(a92, u2) {
  if (!Buffer$6.isBuffer(a92) || !Buffer$6.isBuffer(u2) || a92.length !== u2.length)
    return false;
  for (var c = 0, l2 = 0; l2 < a92.length; l2++)
    c |= a92[l2] ^ u2[l2];
  return c === 0;
}
bufferEq.install = function() {
  Buffer$6.prototype.equal = SlowBuffer.prototype.equal = function(u2) {
    return bufferEq(this, u2);
  };
};
var origBufEqual = Buffer$6.prototype.equal, origSlowBufEqual = SlowBuffer.prototype.equal;
bufferEq.restore = function() {
  Buffer$6.prototype.equal = origBufEqual, SlowBuffer.prototype.equal = origSlowBufEqual;
};
function getParamSize(a92) {
  var u2 = (a92 / 8 | 0) + (a92 % 8 === 0 ? 0 : 1);
  return u2;
}
var paramBytesForAlg = { ES256: getParamSize(256), ES384: getParamSize(384), ES512: getParamSize(521) };
function getParamBytesForAlg$1(a92) {
  var u2 = paramBytesForAlg[a92];
  if (u2)
    return u2;
  throw new Error('Unknown algorithm "' + a92 + '"');
}
var paramBytesForAlg_1 = getParamBytesForAlg$1, Buffer$5 = safeBufferExports.Buffer, getParamBytesForAlg = paramBytesForAlg_1, MAX_OCTET = 128, CLASS_UNIVERSAL = 0, PRIMITIVE_BIT = 32, TAG_SEQ = 16, TAG_INT = 2, ENCODED_TAG_SEQ = TAG_SEQ | PRIMITIVE_BIT | CLASS_UNIVERSAL << 6, ENCODED_TAG_INT = TAG_INT | CLASS_UNIVERSAL << 6;
function base64Url(a92) {
  return a92.replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
}
function signatureAsBuffer(a92) {
  if (Buffer$5.isBuffer(a92))
    return a92;
  if (typeof a92 == "string")
    return Buffer$5.from(a92, "base64");
  throw new TypeError("ECDSA signature must be a Base64 string or a Buffer");
}
function derToJose(a92, u2) {
  a92 = signatureAsBuffer(a92);
  var c = getParamBytesForAlg(u2), l2 = c + 1, v2 = a92.length, S2 = 0;
  if (a92[S2++] !== ENCODED_TAG_SEQ)
    throw new Error('Could not find expected "seq"');
  var g2 = a92[S2++];
  if (g2 === (MAX_OCTET | 1) && (g2 = a92[S2++]), v2 - S2 < g2)
    throw new Error('"seq" specified length of "' + g2 + '", only "' + (v2 - S2) + '" remaining');
  if (a92[S2++] !== ENCODED_TAG_INT)
    throw new Error('Could not find expected "int" for "r"');
  var E2 = a92[S2++];
  if (v2 - S2 - 2 < E2)
    throw new Error('"r" specified length of "' + E2 + '", only "' + (v2 - S2 - 2) + '" available');
  if (l2 < E2)
    throw new Error('"r" specified length of "' + E2 + '", max of "' + l2 + '" is acceptable');
  var _ = S2;
  if (S2 += E2, a92[S2++] !== ENCODED_TAG_INT)
    throw new Error('Could not find expected "int" for "s"');
  var k = a92[S2++];
  if (v2 - S2 !== k)
    throw new Error('"s" specified length of "' + k + '", expected "' + (v2 - S2) + '"');
  if (l2 < k)
    throw new Error('"s" specified length of "' + k + '", max of "' + l2 + '" is acceptable');
  var L2 = S2;
  if (S2 += k, S2 !== v2)
    throw new Error('Expected to consume entire buffer, but "' + (v2 - S2) + '" bytes remain');
  var M2 = c - E2, $ = c - k, J2 = Buffer$5.allocUnsafe(M2 + E2 + $ + k);
  for (S2 = 0; S2 < M2; ++S2)
    J2[S2] = 0;
  a92.copy(J2, S2, _ + Math.max(-M2, 0), _ + E2), S2 = c;
  for (var V2 = S2; S2 < V2 + $; ++S2)
    J2[S2] = 0;
  return a92.copy(J2, S2, L2 + Math.max(-$, 0), L2 + k), J2 = J2.toString("base64"), J2 = base64Url(J2), J2;
}
function countPadding(a92, u2, c) {
  for (var l2 = 0; u2 + l2 < c && a92[u2 + l2] === 0; )
    ++l2;
  var v2 = a92[u2 + l2] >= MAX_OCTET;
  return v2 && --l2, l2;
}
function joseToDer(a92, u2) {
  a92 = signatureAsBuffer(a92);
  var c = getParamBytesForAlg(u2), l2 = a92.length;
  if (l2 !== c * 2)
    throw new TypeError('"' + u2 + '" signatures must be "' + c * 2 + '" bytes, saw "' + l2 + '"');
  var v2 = countPadding(a92, 0, c), S2 = countPadding(a92, c, a92.length), g2 = c - v2, E2 = c - S2, _ = 2 + g2 + 1 + 1 + E2, k = _ < MAX_OCTET, L2 = Buffer$5.allocUnsafe((k ? 2 : 3) + _), M2 = 0;
  return L2[M2++] = ENCODED_TAG_SEQ, k ? L2[M2++] = _ : (L2[M2++] = MAX_OCTET | 1, L2[M2++] = _ & 255), L2[M2++] = ENCODED_TAG_INT, L2[M2++] = g2, v2 < 0 ? (L2[M2++] = 0, M2 += a92.copy(L2, M2, 0, c)) : M2 += a92.copy(L2, M2, v2, c), L2[M2++] = ENCODED_TAG_INT, L2[M2++] = E2, S2 < 0 ? (L2[M2++] = 0, a92.copy(L2, M2, c)) : a92.copy(L2, M2, c + S2), L2;
}
var ecdsaSigFormatter = { derToJose, joseToDer }, bufferEqual = bufferEqualConstantTime, Buffer$4 = safeBufferExports.Buffer, crypto$1 = require$$0$1, formatEcdsa = ecdsaSigFormatter, util$2 = require$$0$1, MSG_INVALID_ALGORITHM = `"%s" is not a valid algorithm.
  Supported algorithms are:
  "HS256", "HS384", "HS512", "RS256", "RS384", "RS512", "PS256", "PS384", "PS512", "ES256", "ES384", "ES512" and "none".`, MSG_INVALID_SECRET = "secret must be a string or buffer", MSG_INVALID_VERIFIER_KEY = "key must be a string or a buffer", MSG_INVALID_SIGNER_KEY = "key must be a string, a buffer or an object", supportsKeyObjects = typeof crypto$1.createPublicKey == "function";
supportsKeyObjects && (MSG_INVALID_VERIFIER_KEY += " or a KeyObject", MSG_INVALID_SECRET += "or a KeyObject");
function checkIsPublicKey(a92) {
  if (!Buffer$4.isBuffer(a92) && typeof a92 != "string" && (!supportsKeyObjects || typeof a92 != "object" || typeof a92.type != "string" || typeof a92.asymmetricKeyType != "string" || typeof a92.export != "function"))
    throw typeError(MSG_INVALID_VERIFIER_KEY);
}
function checkIsPrivateKey(a92) {
  if (!Buffer$4.isBuffer(a92) && typeof a92 != "string" && typeof a92 != "object")
    throw typeError(MSG_INVALID_SIGNER_KEY);
}
function checkIsSecretKey(a92) {
  if (!Buffer$4.isBuffer(a92)) {
    if (typeof a92 == "string")
      return a92;
    if (!supportsKeyObjects || typeof a92 != "object" || a92.type !== "secret" || typeof a92.export != "function")
      throw typeError(MSG_INVALID_SECRET);
  }
}
function fromBase64(a92) {
  return a92.replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
}
function toBase64(a92) {
  a92 = a92.toString();
  var u2 = 4 - a92.length % 4;
  if (u2 !== 4)
    for (var c = 0; c < u2; ++c)
      a92 += "=";
  return a92.replace(/\-/g, "+").replace(/_/g, "/");
}
function typeError(a92) {
  var u2 = [].slice.call(arguments, 1), c = util$2.format.bind(util$2, a92).apply(null, u2);
  return new TypeError(c);
}
function bufferOrString(a92) {
  return Buffer$4.isBuffer(a92) || typeof a92 == "string";
}
function normalizeInput(a92) {
  return bufferOrString(a92) || (a92 = JSON.stringify(a92)), a92;
}
function createHmacSigner(a92) {
  return function(c, l2) {
    checkIsSecretKey(l2), c = normalizeInput(c);
    var v2 = crypto$1.createHmac("sha" + a92, l2), S2 = (v2.update(c), v2.digest("base64"));
    return fromBase64(S2);
  };
}
function createHmacVerifier(a92) {
  return function(c, l2, v2) {
    var S2 = createHmacSigner(a92)(c, v2);
    return bufferEqual(Buffer$4.from(l2), Buffer$4.from(S2));
  };
}
function createKeySigner(a92) {
  return function(c, l2) {
    checkIsPrivateKey(l2), c = normalizeInput(c);
    var v2 = crypto$1.createSign("RSA-SHA" + a92), S2 = (v2.update(c), v2.sign(l2, "base64"));
    return fromBase64(S2);
  };
}
function createKeyVerifier(a92) {
  return function(c, l2, v2) {
    checkIsPublicKey(v2), c = normalizeInput(c), l2 = toBase64(l2);
    var S2 = crypto$1.createVerify("RSA-SHA" + a92);
    return S2.update(c), S2.verify(v2, l2, "base64");
  };
}
function createPSSKeySigner(a92) {
  return function(c, l2) {
    checkIsPrivateKey(l2), c = normalizeInput(c);
    var v2 = crypto$1.createSign("RSA-SHA" + a92), S2 = (v2.update(c), v2.sign({ key: l2, padding: crypto$1.constants.RSA_PKCS1_PSS_PADDING, saltLength: crypto$1.constants.RSA_PSS_SALTLEN_DIGEST }, "base64"));
    return fromBase64(S2);
  };
}
function createPSSKeyVerifier(a92) {
  return function(c, l2, v2) {
    checkIsPublicKey(v2), c = normalizeInput(c), l2 = toBase64(l2);
    var S2 = crypto$1.createVerify("RSA-SHA" + a92);
    return S2.update(c), S2.verify({ key: v2, padding: crypto$1.constants.RSA_PKCS1_PSS_PADDING, saltLength: crypto$1.constants.RSA_PSS_SALTLEN_DIGEST }, l2, "base64");
  };
}
function createECDSASigner(a92) {
  var u2 = createKeySigner(a92);
  return function() {
    var l2 = u2.apply(null, arguments);
    return l2 = formatEcdsa.derToJose(l2, "ES" + a92), l2;
  };
}
function createECDSAVerifer(a92) {
  var u2 = createKeyVerifier(a92);
  return function(l2, v2, S2) {
    v2 = formatEcdsa.joseToDer(v2, "ES" + a92).toString("base64");
    var g2 = u2(l2, v2, S2);
    return g2;
  };
}
function createNoneSigner() {
  return function() {
    return "";
  };
}
function createNoneVerifier() {
  return function(u2, c) {
    return c === "";
  };
}
var jwa$2 = function a45(u2) {
  var c = { hs: createHmacSigner, rs: createKeySigner, ps: createPSSKeySigner, es: createECDSASigner, none: createNoneSigner }, l2 = { hs: createHmacVerifier, rs: createKeyVerifier, ps: createPSSKeyVerifier, es: createECDSAVerifer, none: createNoneVerifier }, v2 = u2.match(/^(RS|PS|ES|HS)(256|384|512)$|^(none)$/i);
  if (!v2)
    throw typeError(MSG_INVALID_ALGORITHM, u2);
  var S2 = (v2[1] || v2[3]).toLowerCase(), g2 = v2[2];
  return { sign: c[S2](g2), verify: l2[S2](g2) };
}, Buffer$3 = require$$0$1.Buffer, tostring = function a46(u2) {
  return typeof u2 == "string" ? u2 : typeof u2 == "number" || Buffer$3.isBuffer(u2) ? u2.toString() : JSON.stringify(u2);
}, Buffer$2 = safeBufferExports.Buffer, DataStream$1 = dataStream, jwa$1 = jwa$2, Stream$1 = require$$0$1, toString$2 = tostring, util$1 = require$$0$1;
function base64url(a92, u2) {
  return Buffer$2.from(a92, u2).toString("base64").replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
}
function jwsSecuredInput(a92, u2, c) {
  c = c || "utf8";
  var l2 = base64url(toString$2(a92), "binary"), v2 = base64url(toString$2(u2), c);
  return util$1.format("%s.%s", l2, v2);
}
function jwsSign(a92) {
  var u2 = a92.header, c = a92.payload, l2 = a92.secret || a92.privateKey, v2 = a92.encoding, S2 = jwa$1(u2.alg), g2 = jwsSecuredInput(u2, c, v2), E2 = S2.sign(g2, l2);
  return util$1.format("%s.%s", g2, E2);
}
function SignStream$1(a92) {
  var u2 = a92.secret || a92.privateKey || a92.key, c = new DataStream$1(u2);
  this.readable = true, this.header = a92.header, this.encoding = a92.encoding, this.secret = this.privateKey = this.key = c, this.payload = new DataStream$1(a92.payload), this.secret.once("close", (function() {
    !this.payload.writable && this.readable && this.sign();
  }).bind(this)), this.payload.once("close", (function() {
    !this.secret.writable && this.readable && this.sign();
  }).bind(this));
}
util$1.inherits(SignStream$1, Stream$1);
SignStream$1.prototype.sign = function a47() {
  try {
    var u2 = jwsSign({ header: this.header, payload: this.payload.buffer, secret: this.secret.buffer, encoding: this.encoding });
    return this.emit("done", u2), this.emit("data", u2), this.emit("end"), this.readable = false, u2;
  } catch (c) {
    this.readable = false, this.emit("error", c), this.emit("close");
  }
};
SignStream$1.sign = jwsSign;
var signStream = SignStream$1, Buffer$1 = safeBufferExports.Buffer, DataStream = dataStream, jwa = jwa$2, Stream = require$$0$1, toString$1 = tostring, util = require$$0$1, JWS_REGEX = /^[a-zA-Z0-9\-_]+?\.[a-zA-Z0-9\-_]+?\.([a-zA-Z0-9\-_]+)?$/;
function isObject$7(a92) {
  return Object.prototype.toString.call(a92) === "[object Object]";
}
function safeJsonParse(a92) {
  if (isObject$7(a92))
    return a92;
  try {
    return JSON.parse(a92);
  } catch {
    return;
  }
}
function headerFromJWS(a92) {
  var u2 = a92.split(".", 1)[0];
  return safeJsonParse(Buffer$1.from(u2, "base64").toString("binary"));
}
function securedInputFromJWS(a92) {
  return a92.split(".", 2).join(".");
}
function signatureFromJWS(a92) {
  return a92.split(".")[2];
}
function payloadFromJWS(a92, u2) {
  u2 = u2 || "utf8";
  var c = a92.split(".")[1];
  return Buffer$1.from(c, "base64").toString(u2);
}
function isValidJws(a92) {
  return JWS_REGEX.test(a92) && !!headerFromJWS(a92);
}
function jwsVerify(a92, u2, c) {
  if (!u2) {
    var l2 = new Error("Missing algorithm parameter for jws.verify");
    throw l2.code = "MISSING_ALGORITHM", l2;
  }
  a92 = toString$1(a92);
  var v2 = signatureFromJWS(a92), S2 = securedInputFromJWS(a92), g2 = jwa(u2);
  return g2.verify(S2, v2, c);
}
function jwsDecode(a92, u2) {
  if (u2 = u2 || {}, a92 = toString$1(a92), !isValidJws(a92))
    return null;
  var c = headerFromJWS(a92);
  if (!c)
    return null;
  var l2 = payloadFromJWS(a92);
  return (c.typ === "JWT" || u2.json) && (l2 = JSON.parse(l2, u2.encoding)), { header: c, payload: l2, signature: signatureFromJWS(a92) };
}
function VerifyStream$1(a92) {
  a92 = a92 || {};
  var u2 = a92.secret || a92.publicKey || a92.key, c = new DataStream(u2);
  this.readable = true, this.algorithm = a92.algorithm, this.encoding = a92.encoding, this.secret = this.publicKey = this.key = c, this.signature = new DataStream(a92.signature), this.secret.once("close", (function() {
    !this.signature.writable && this.readable && this.verify();
  }).bind(this)), this.signature.once("close", (function() {
    !this.secret.writable && this.readable && this.verify();
  }).bind(this));
}
util.inherits(VerifyStream$1, Stream);
VerifyStream$1.prototype.verify = function a48() {
  try {
    var u2 = jwsVerify(this.signature.buffer, this.algorithm, this.key.buffer), c = jwsDecode(this.signature.buffer, this.encoding);
    return this.emit("done", u2, c), this.emit("data", u2), this.emit("end"), this.readable = false, u2;
  } catch (l2) {
    this.readable = false, this.emit("error", l2), this.emit("close");
  }
};
VerifyStream$1.decode = jwsDecode;
VerifyStream$1.isValid = isValidJws;
VerifyStream$1.verify = jwsVerify;
var verifyStream = VerifyStream$1, SignStream = signStream, VerifyStream = verifyStream, ALGORITHMS = ["HS256", "HS384", "HS512", "RS256", "RS384", "RS512", "PS256", "PS384", "PS512", "ES256", "ES384", "ES512"];
jws$3.ALGORITHMS = ALGORITHMS;
jws$3.sign = SignStream.sign;
jws$3.verify = VerifyStream.verify;
jws$3.decode = VerifyStream.decode;
jws$3.isValid = VerifyStream.isValid;
jws$3.createSign = function a49(u2) {
  return new SignStream(u2);
};
jws$3.createVerify = function a50(u2) {
  return new VerifyStream(u2);
};
var jws$2 = jws$3, decode$1 = function(a92, u2) {
  u2 = u2 || {};
  var c = jws$2.decode(a92, u2);
  if (!c)
    return null;
  var l2 = c.payload;
  if (typeof l2 == "string")
    try {
      var v2 = JSON.parse(l2);
      v2 !== null && typeof v2 == "object" && (l2 = v2);
    } catch {
    }
  return u2.complete === true ? { header: c.header, payload: l2, signature: c.signature } : l2;
}, JsonWebTokenError$3 = function(a92, u2) {
  Error.call(this, a92), Error.captureStackTrace && Error.captureStackTrace(this, this.constructor), this.name = "JsonWebTokenError", this.message = a92, u2 && (this.inner = u2);
};
JsonWebTokenError$3.prototype = Object.create(Error.prototype);
JsonWebTokenError$3.prototype.constructor = JsonWebTokenError$3;
var JsonWebTokenError_1 = JsonWebTokenError$3, JsonWebTokenError$2 = JsonWebTokenError_1, NotBeforeError$1 = function(a92, u2) {
  JsonWebTokenError$2.call(this, a92), this.name = "NotBeforeError", this.date = u2;
};
NotBeforeError$1.prototype = Object.create(JsonWebTokenError$2.prototype);
NotBeforeError$1.prototype.constructor = NotBeforeError$1;
var NotBeforeError_1 = NotBeforeError$1, JsonWebTokenError$1 = JsonWebTokenError_1, TokenExpiredError$1 = function(a92, u2) {
  JsonWebTokenError$1.call(this, a92), this.name = "TokenExpiredError", this.expiredAt = u2;
};
TokenExpiredError$1.prototype = Object.create(JsonWebTokenError$1.prototype);
TokenExpiredError$1.prototype.constructor = TokenExpiredError$1;
var TokenExpiredError_1 = TokenExpiredError$1, s = 1e3, m = s * 60, h = m * 60, d = h * 24, w = d * 7, y = d * 365.25, ms$1 = function(a92, u2) {
  u2 = u2 || {};
  var c = typeof a92;
  if (c === "string" && a92.length > 0)
    return parse$2(a92);
  if (c === "number" && isFinite(a92))
    return u2.long ? fmtLong(a92) : fmtShort(a92);
  throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(a92));
};
function parse$2(a92) {
  if (a92 = String(a92), !(a92.length > 100)) {
    var u2 = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(a92);
    if (u2) {
      var c = parseFloat(u2[1]), l2 = (u2[2] || "ms").toLowerCase();
      switch (l2) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return c * y;
        case "weeks":
        case "week":
        case "w":
          return c * w;
        case "days":
        case "day":
        case "d":
          return c * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return c * h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return c * m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return c * s;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return c;
        default:
          return;
      }
    }
  }
}
function fmtShort(a92) {
  var u2 = Math.abs(a92);
  return u2 >= d ? Math.round(a92 / d) + "d" : u2 >= h ? Math.round(a92 / h) + "h" : u2 >= m ? Math.round(a92 / m) + "m" : u2 >= s ? Math.round(a92 / s) + "s" : a92 + "ms";
}
function fmtLong(a92) {
  var u2 = Math.abs(a92);
  return u2 >= d ? plural(a92, u2, d, "day") : u2 >= h ? plural(a92, u2, h, "hour") : u2 >= m ? plural(a92, u2, m, "minute") : u2 >= s ? plural(a92, u2, s, "second") : a92 + " ms";
}
function plural(a92, u2, c, l2) {
  var v2 = u2 >= c * 1.5;
  return Math.round(a92 / c) + " " + l2 + (v2 ? "s" : "");
}
var ms = ms$1, timespan$2 = function(a92, u2) {
  var c = u2 || Math.floor(Date.now() / 1e3);
  if (typeof a92 == "string") {
    var l2 = ms(a92);
    return typeof l2 > "u" ? void 0 : Math.floor(c + l2 / 1e3);
  } else
    return typeof a92 == "number" ? c + a92 : void 0;
}, semver$1 = { exports: {} };
(function(a92, u2) {
  u2 = a92.exports = Ie2;
  var c;
  typeof process == "object" && define_process_env_default && define_process_env_default.NODE_DEBUG && /\bsemver\b/i.test(define_process_env_default.NODE_DEBUG) ? c = function() {
    var pe2 = Array.prototype.slice.call(arguments, 0);
    pe2.unshift("SEMVER"), console.log.apply(console, pe2);
  } : c = function() {
  }, u2.SEMVER_SPEC_VERSION = "2.0.0";
  var l2 = 256, v2 = Number.MAX_SAFE_INTEGER || /* istanbul ignore next */
  9007199254740991, S2 = 16, g2 = u2.re = [], E2 = u2.src = [], _ = 0, k = _++;
  E2[k] = "0|[1-9]\\d*";
  var L2 = _++;
  E2[L2] = "[0-9]+";
  var M2 = _++;
  E2[M2] = "\\d*[a-zA-Z-][a-zA-Z0-9-]*";
  var $ = _++;
  E2[$] = "(" + E2[k] + ")\\.(" + E2[k] + ")\\.(" + E2[k] + ")";
  var J2 = _++;
  E2[J2] = "(" + E2[L2] + ")\\.(" + E2[L2] + ")\\.(" + E2[L2] + ")";
  var V2 = _++;
  E2[V2] = "(?:" + E2[k] + "|" + E2[M2] + ")";
  var q2 = _++;
  E2[q2] = "(?:" + E2[L2] + "|" + E2[M2] + ")";
  var G2 = _++;
  E2[G2] = "(?:-(" + E2[V2] + "(?:\\." + E2[V2] + ")*))";
  var H2 = _++;
  E2[H2] = "(?:-?(" + E2[q2] + "(?:\\." + E2[q2] + ")*))";
  var B2 = _++;
  E2[B2] = "[0-9A-Za-z-]+";
  var Y2 = _++;
  E2[Y2] = "(?:\\+(" + E2[B2] + "(?:\\." + E2[B2] + ")*))";
  var ne2 = _++, Z2 = "v?" + E2[$] + E2[G2] + "?" + E2[Y2] + "?";
  E2[ne2] = "^" + Z2 + "$";
  var re2 = "[v=\\s]*" + E2[J2] + E2[H2] + "?" + E2[Y2] + "?", oe2 = _++;
  E2[oe2] = "^" + re2 + "$";
  var de2 = _++;
  E2[de2] = "((?:<|>)?=?)";
  var A2 = _++;
  E2[A2] = E2[L2] + "|x|X|\\*";
  var N2 = _++;
  E2[N2] = E2[k] + "|x|X|\\*";
  var D2 = _++;
  E2[D2] = "[v=\\s]*(" + E2[N2] + ")(?:\\.(" + E2[N2] + ")(?:\\.(" + E2[N2] + ")(?:" + E2[G2] + ")?" + E2[Y2] + "?)?)?";
  var W2 = _++;
  E2[W2] = "[v=\\s]*(" + E2[A2] + ")(?:\\.(" + E2[A2] + ")(?:\\.(" + E2[A2] + ")(?:" + E2[H2] + ")?" + E2[Y2] + "?)?)?";
  var ee2 = _++;
  E2[ee2] = "^" + E2[de2] + "\\s*" + E2[D2] + "$";
  var ae2 = _++;
  E2[ae2] = "^" + E2[de2] + "\\s*" + E2[W2] + "$";
  var ye2 = _++;
  E2[ye2] = "(?:^|[^\\d])(\\d{1," + S2 + "})(?:\\.(\\d{1," + S2 + "}))?(?:\\.(\\d{1," + S2 + "}))?(?:$|[^\\d])";
  var he2 = _++;
  E2[he2] = "(?:~>?)";
  var le2 = _++;
  E2[le2] = "(\\s*)" + E2[he2] + "\\s+", g2[le2] = new RegExp(E2[le2], "g");
  var we2 = "$1~", Be2 = _++;
  E2[Be2] = "^" + E2[he2] + E2[D2] + "$";
  var Ne2 = _++;
  E2[Ne2] = "^" + E2[he2] + E2[W2] + "$";
  var Le2 = _++;
  E2[Le2] = "(?:\\^)";
  var $e2 = _++;
  E2[$e2] = "(\\s*)" + E2[Le2] + "\\s+", g2[$e2] = new RegExp(E2[$e2], "g");
  var Ue2 = "$1^", Ge2 = _++;
  E2[Ge2] = "^" + E2[Le2] + E2[D2] + "$";
  var He2 = _++;
  E2[He2] = "^" + E2[Le2] + E2[W2] + "$";
  var Ve2 = _++;
  E2[Ve2] = "^" + E2[de2] + "\\s*(" + re2 + ")$|^$";
  var be2 = _++;
  E2[be2] = "^" + E2[de2] + "\\s*(" + Z2 + ")$|^$";
  var Ae2 = _++;
  E2[Ae2] = "(\\s*)" + E2[de2] + "\\s*(" + re2 + "|" + E2[D2] + ")", g2[Ae2] = new RegExp(E2[Ae2], "g");
  var qe2 = "$1$2$3", xe2 = _++;
  E2[xe2] = "^\\s*(" + E2[D2] + ")\\s+-\\s+(" + E2[D2] + ")\\s*$";
  var Pe2 = _++;
  E2[Pe2] = "^\\s*(" + E2[W2] + ")\\s+-\\s+(" + E2[W2] + ")\\s*$";
  var C2 = _++;
  E2[C2] = "(<|>)?=?\\s*\\*";
  for (var x2 = 0; x2 < _; x2++)
    c(x2, E2[x2]), g2[x2] || (g2[x2] = new RegExp(E2[x2]));
  u2.parse = Q2;
  function Q2(pe2, ge2) {
    if ((!ge2 || typeof ge2 != "object") && (ge2 = { loose: !!ge2, includePrerelease: false }), pe2 instanceof Ie2)
      return pe2;
    if (typeof pe2 != "string" || pe2.length > l2)
      return null;
    var Re2 = ge2.loose ? g2[oe2] : g2[ne2];
    if (!Re2.test(pe2))
      return null;
    try {
      return new Ie2(pe2, ge2);
    } catch {
      return null;
    }
  }
  u2.valid = Se2;
  function Se2(pe2, ge2) {
    var Re2 = Q2(pe2, ge2);
    return Re2 ? Re2.version : null;
  }
  u2.clean = me2;
  function me2(pe2, ge2) {
    var Re2 = Q2(pe2.trim().replace(/^[=v]+/, ""), ge2);
    return Re2 ? Re2.version : null;
  }
  u2.SemVer = Ie2;
  function Ie2(pe2, ge2) {
    if ((!ge2 || typeof ge2 != "object") && (ge2 = { loose: !!ge2, includePrerelease: false }), pe2 instanceof Ie2) {
      if (pe2.loose === ge2.loose)
        return pe2;
      pe2 = pe2.version;
    } else if (typeof pe2 != "string")
      throw new TypeError("Invalid Version: " + pe2);
    if (pe2.length > l2)
      throw new TypeError("version is longer than " + l2 + " characters");
    if (!(this instanceof Ie2))
      return new Ie2(pe2, ge2);
    c("SemVer", pe2, ge2), this.options = ge2, this.loose = !!ge2.loose;
    var Re2 = pe2.trim().match(ge2.loose ? g2[oe2] : g2[ne2]);
    if (!Re2)
      throw new TypeError("Invalid Version: " + pe2);
    if (this.raw = pe2, this.major = +Re2[1], this.minor = +Re2[2], this.patch = +Re2[3], this.major > v2 || this.major < 0)
      throw new TypeError("Invalid major version");
    if (this.minor > v2 || this.minor < 0)
      throw new TypeError("Invalid minor version");
    if (this.patch > v2 || this.patch < 0)
      throw new TypeError("Invalid patch version");
    Re2[4] ? this.prerelease = Re2[4].split(".").map(function(Je2) {
      if (/^[0-9]+$/.test(Je2)) {
        var Fe2 = +Je2;
        if (Fe2 >= 0 && Fe2 < v2)
          return Fe2;
      }
      return Je2;
    }) : this.prerelease = [], this.build = Re2[5] ? Re2[5].split(".") : [], this.format();
  }
  Ie2.prototype.format = function() {
    return this.version = this.major + "." + this.minor + "." + this.patch, this.prerelease.length && (this.version += "-" + this.prerelease.join(".")), this.version;
  }, Ie2.prototype.toString = function() {
    return this.version;
  }, Ie2.prototype.compare = function(pe2) {
    return c("SemVer.compare", this.version, this.options, pe2), pe2 instanceof Ie2 || (pe2 = new Ie2(pe2, this.options)), this.compareMain(pe2) || this.comparePre(pe2);
  }, Ie2.prototype.compareMain = function(pe2) {
    return pe2 instanceof Ie2 || (pe2 = new Ie2(pe2, this.options)), tt(this.major, pe2.major) || tt(this.minor, pe2.minor) || tt(this.patch, pe2.patch);
  }, Ie2.prototype.comparePre = function(pe2) {
    if (pe2 instanceof Ie2 || (pe2 = new Ie2(pe2, this.options)), this.prerelease.length && !pe2.prerelease.length)
      return -1;
    if (!this.prerelease.length && pe2.prerelease.length)
      return 1;
    if (!this.prerelease.length && !pe2.prerelease.length)
      return 0;
    var ge2 = 0;
    do {
      var Re2 = this.prerelease[ge2], Je2 = pe2.prerelease[ge2];
      if (c("prerelease compare", ge2, Re2, Je2), Re2 === void 0 && Je2 === void 0)
        return 0;
      if (Je2 === void 0)
        return 1;
      if (Re2 === void 0)
        return -1;
      if (Re2 === Je2)
        continue;
      return tt(Re2, Je2);
    } while (++ge2);
  }, Ie2.prototype.inc = function(pe2, ge2) {
    switch (pe2) {
      case "premajor":
        this.prerelease.length = 0, this.patch = 0, this.minor = 0, this.major++, this.inc("pre", ge2);
        break;
      case "preminor":
        this.prerelease.length = 0, this.patch = 0, this.minor++, this.inc("pre", ge2);
        break;
      case "prepatch":
        this.prerelease.length = 0, this.inc("patch", ge2), this.inc("pre", ge2);
        break;
      case "prerelease":
        this.prerelease.length === 0 && this.inc("patch", ge2), this.inc("pre", ge2);
        break;
      case "major":
        (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) && this.major++, this.minor = 0, this.patch = 0, this.prerelease = [];
        break;
      case "minor":
        (this.patch !== 0 || this.prerelease.length === 0) && this.minor++, this.patch = 0, this.prerelease = [];
        break;
      case "patch":
        this.prerelease.length === 0 && this.patch++, this.prerelease = [];
        break;
      case "pre":
        if (this.prerelease.length === 0)
          this.prerelease = [0];
        else {
          for (var Re2 = this.prerelease.length; --Re2 >= 0; )
            typeof this.prerelease[Re2] == "number" && (this.prerelease[Re2]++, Re2 = -2);
          Re2 === -1 && this.prerelease.push(0);
        }
        ge2 && (this.prerelease[0] === ge2 ? isNaN(this.prerelease[1]) && (this.prerelease = [ge2, 0]) : this.prerelease = [ge2, 0]);
        break;
      default:
        throw new Error("invalid increment argument: " + pe2);
    }
    return this.format(), this.raw = this.version, this;
  }, u2.inc = at;
  function at(pe2, ge2, Re2, Je2) {
    typeof Re2 == "string" && (Je2 = Re2, Re2 = void 0);
    try {
      return new Ie2(pe2, Re2).inc(ge2, Je2).version;
    } catch {
      return null;
    }
  }
  u2.diff = Ye2;
  function Ye2(pe2, ge2) {
    if (De2(pe2, ge2))
      return null;
    var Re2 = Q2(pe2), Je2 = Q2(ge2), Fe2 = "";
    if (Re2.prerelease.length || Je2.prerelease.length) {
      Fe2 = "pre";
      var ze2 = "prerelease";
    }
    for (var Me2 in Re2)
      if ((Me2 === "major" || Me2 === "minor" || Me2 === "patch") && Re2[Me2] !== Je2[Me2])
        return Fe2 + Me2;
    return ze2;
  }
  u2.compareIdentifiers = tt;
  var je2 = /^[0-9]+$/;
  function tt(pe2, ge2) {
    var Re2 = je2.test(pe2), Je2 = je2.test(ge2);
    return Re2 && Je2 && (pe2 = +pe2, ge2 = +ge2), pe2 === ge2 ? 0 : Re2 && !Je2 ? -1 : Je2 && !Re2 ? 1 : pe2 < ge2 ? -1 : 1;
  }
  u2.rcompareIdentifiers = Oe2;
  function Oe2(pe2, ge2) {
    return tt(ge2, pe2);
  }
  u2.major = P2;
  function P2(pe2, ge2) {
    return new Ie2(pe2, ge2).major;
  }
  u2.minor = X2;
  function X2(pe2, ge2) {
    return new Ie2(pe2, ge2).minor;
  }
  u2.patch = ie2;
  function ie2(pe2, ge2) {
    return new Ie2(pe2, ge2).patch;
  }
  u2.compare = Ee2;
  function Ee2(pe2, ge2, Re2) {
    return new Ie2(pe2, Re2).compare(new Ie2(ge2, Re2));
  }
  u2.compareLoose = ue2;
  function ue2(pe2, ge2) {
    return Ee2(pe2, ge2, true);
  }
  u2.rcompare = O2;
  function O2(pe2, ge2, Re2) {
    return Ee2(ge2, pe2, Re2);
  }
  u2.sort = j;
  function j(pe2, ge2) {
    return pe2.sort(function(Re2, Je2) {
      return u2.compare(Re2, Je2, ge2);
    });
  }
  u2.rsort = se2;
  function se2(pe2, ge2) {
    return pe2.sort(function(Re2, Je2) {
      return u2.rcompare(Re2, Je2, ge2);
    });
  }
  u2.gt = _e;
  function _e(pe2, ge2, Re2) {
    return Ee2(pe2, ge2, Re2) > 0;
  }
  u2.lt = ve2;
  function ve2(pe2, ge2, Re2) {
    return Ee2(pe2, ge2, Re2) < 0;
  }
  u2.eq = De2;
  function De2(pe2, ge2, Re2) {
    return Ee2(pe2, ge2, Re2) === 0;
  }
  u2.neq = Ze2;
  function Ze2(pe2, ge2, Re2) {
    return Ee2(pe2, ge2, Re2) !== 0;
  }
  u2.gte = Qe2;
  function Qe2(pe2, ge2, Re2) {
    return Ee2(pe2, ge2, Re2) >= 0;
  }
  u2.lte = ot;
  function ot(pe2, ge2, Re2) {
    return Ee2(pe2, ge2, Re2) <= 0;
  }
  u2.cmp = ft;
  function ft(pe2, ge2, Re2, Je2) {
    switch (ge2) {
      case "===":
        return typeof pe2 == "object" && (pe2 = pe2.version), typeof Re2 == "object" && (Re2 = Re2.version), pe2 === Re2;
      case "!==":
        return typeof pe2 == "object" && (pe2 = pe2.version), typeof Re2 == "object" && (Re2 = Re2.version), pe2 !== Re2;
      case "":
      case "=":
      case "==":
        return De2(pe2, Re2, Je2);
      case "!=":
        return Ze2(pe2, Re2, Je2);
      case ">":
        return _e(pe2, Re2, Je2);
      case ">=":
        return Qe2(pe2, Re2, Je2);
      case "<":
        return ve2(pe2, Re2, Je2);
      case "<=":
        return ot(pe2, Re2, Je2);
      default:
        throw new TypeError("Invalid operator: " + ge2);
    }
  }
  u2.Comparator = Ce2;
  function Ce2(pe2, ge2) {
    if ((!ge2 || typeof ge2 != "object") && (ge2 = { loose: !!ge2, includePrerelease: false }), pe2 instanceof Ce2) {
      if (pe2.loose === !!ge2.loose)
        return pe2;
      pe2 = pe2.value;
    }
    if (!(this instanceof Ce2))
      return new Ce2(pe2, ge2);
    c("comparator", pe2, ge2), this.options = ge2, this.loose = !!ge2.loose, this.parse(pe2), this.semver === I2 ? this.value = "" : this.value = this.operator + this.semver.version, c("comp", this);
  }
  var I2 = {};
  Ce2.prototype.parse = function(pe2) {
    var ge2 = this.options.loose ? g2[Ve2] : g2[be2], Re2 = pe2.match(ge2);
    if (!Re2)
      throw new TypeError("Invalid comparator: " + pe2);
    this.operator = Re2[1], this.operator === "=" && (this.operator = ""), Re2[2] ? this.semver = new Ie2(Re2[2], this.options.loose) : this.semver = I2;
  }, Ce2.prototype.toString = function() {
    return this.value;
  }, Ce2.prototype.test = function(pe2) {
    return c("Comparator.test", pe2, this.options.loose), this.semver === I2 ? true : (typeof pe2 == "string" && (pe2 = new Ie2(pe2, this.options)), ft(pe2, this.operator, this.semver, this.options));
  }, Ce2.prototype.intersects = function(pe2, ge2) {
    if (!(pe2 instanceof Ce2))
      throw new TypeError("a Comparator is required");
    (!ge2 || typeof ge2 != "object") && (ge2 = { loose: !!ge2, includePrerelease: false });
    var Re2;
    if (this.operator === "")
      return Re2 = new F2(pe2.value, ge2), St(this.value, Re2, ge2);
    if (pe2.operator === "")
      return Re2 = new F2(this.value, ge2), St(pe2.semver, Re2, ge2);
    var Je2 = (this.operator === ">=" || this.operator === ">") && (pe2.operator === ">=" || pe2.operator === ">"), Fe2 = (this.operator === "<=" || this.operator === "<") && (pe2.operator === "<=" || pe2.operator === "<"), ze2 = this.semver.version === pe2.semver.version, Me2 = (this.operator === ">=" || this.operator === "<=") && (pe2.operator === ">=" || pe2.operator === "<="), nt = ft(this.semver, "<", pe2.semver, ge2) && (this.operator === ">=" || this.operator === ">") && (pe2.operator === "<=" || pe2.operator === "<"), rt = ft(this.semver, ">", pe2.semver, ge2) && (this.operator === "<=" || this.operator === "<") && (pe2.operator === ">=" || pe2.operator === ">");
    return Je2 || Fe2 || ze2 && Me2 || nt || rt;
  }, u2.Range = F2;
  function F2(pe2, ge2) {
    if ((!ge2 || typeof ge2 != "object") && (ge2 = { loose: !!ge2, includePrerelease: false }), pe2 instanceof F2)
      return pe2.loose === !!ge2.loose && pe2.includePrerelease === !!ge2.includePrerelease ? pe2 : new F2(pe2.raw, ge2);
    if (pe2 instanceof Ce2)
      return new F2(pe2.value, ge2);
    if (!(this instanceof F2))
      return new F2(pe2, ge2);
    if (this.options = ge2, this.loose = !!ge2.loose, this.includePrerelease = !!ge2.includePrerelease, this.raw = pe2, this.set = pe2.split(/\s*\|\|\s*/).map(function(Re2) {
      return this.parseRange(Re2.trim());
    }, this).filter(function(Re2) {
      return Re2.length;
    }), !this.set.length)
      throw new TypeError("Invalid SemVer Range: " + pe2);
    this.format();
  }
  F2.prototype.format = function() {
    return this.range = this.set.map(function(pe2) {
      return pe2.join(" ").trim();
    }).join("||").trim(), this.range;
  }, F2.prototype.toString = function() {
    return this.range;
  }, F2.prototype.parseRange = function(pe2) {
    var ge2 = this.options.loose;
    pe2 = pe2.trim();
    var Re2 = ge2 ? g2[Pe2] : g2[xe2];
    pe2 = pe2.replace(Re2, gt), c("hyphen replace", pe2), pe2 = pe2.replace(g2[Ae2], qe2), c("comparator trim", pe2, g2[Ae2]), pe2 = pe2.replace(g2[le2], we2), pe2 = pe2.replace(g2[$e2], Ue2), pe2 = pe2.split(/\s+/).join(" ");
    var Je2 = ge2 ? g2[Ve2] : g2[be2], Fe2 = pe2.split(" ").map(function(ze2) {
      return Te2(ze2, this.options);
    }, this).join(" ").split(/\s+/);
    return this.options.loose && (Fe2 = Fe2.filter(function(ze2) {
      return !!ze2.match(Je2);
    })), Fe2 = Fe2.map(function(ze2) {
      return new Ce2(ze2, this.options);
    }, this), Fe2;
  }, F2.prototype.intersects = function(pe2, ge2) {
    if (!(pe2 instanceof F2))
      throw new TypeError("a Range is required");
    return this.set.some(function(Re2) {
      return Re2.every(function(Je2) {
        return pe2.set.some(function(Fe2) {
          return Fe2.every(function(ze2) {
            return Je2.intersects(ze2, ge2);
          });
        });
      });
    });
  }, u2.toComparators = z2;
  function z2(pe2, ge2) {
    return new F2(pe2, ge2).set.map(function(Re2) {
      return Re2.map(function(Je2) {
        return Je2.value;
      }).join(" ").trim().split(" ");
    });
  }
  function Te2(pe2, ge2) {
    return c("comp", pe2, ge2), pe2 = mt(pe2, ge2), c("caret", pe2), pe2 = ke2(pe2, ge2), c("tildes", pe2), pe2 = st(pe2, ge2), c("xrange", pe2), pe2 = yt(pe2, ge2), c("stars", pe2), pe2;
  }
  function fe2(pe2) {
    return !pe2 || pe2.toLowerCase() === "x" || pe2 === "*";
  }
  function ke2(pe2, ge2) {
    return pe2.trim().split(/\s+/).map(function(Re2) {
      return it(Re2, ge2);
    }).join(" ");
  }
  function it(pe2, ge2) {
    var Re2 = ge2.loose ? g2[Ne2] : g2[Be2];
    return pe2.replace(Re2, function(Je2, Fe2, ze2, Me2, nt) {
      c("tilde", pe2, Je2, Fe2, ze2, Me2, nt);
      var rt;
      return fe2(Fe2) ? rt = "" : fe2(ze2) ? rt = ">=" + Fe2 + ".0.0 <" + (+Fe2 + 1) + ".0.0" : fe2(Me2) ? rt = ">=" + Fe2 + "." + ze2 + ".0 <" + Fe2 + "." + (+ze2 + 1) + ".0" : nt ? (c("replaceTilde pr", nt), rt = ">=" + Fe2 + "." + ze2 + "." + Me2 + "-" + nt + " <" + Fe2 + "." + (+ze2 + 1) + ".0") : rt = ">=" + Fe2 + "." + ze2 + "." + Me2 + " <" + Fe2 + "." + (+ze2 + 1) + ".0", c("tilde return", rt), rt;
    });
  }
  function mt(pe2, ge2) {
    return pe2.trim().split(/\s+/).map(function(Re2) {
      return vt(Re2, ge2);
    }).join(" ");
  }
  function vt(pe2, ge2) {
    c("caret", pe2, ge2);
    var Re2 = ge2.loose ? g2[He2] : g2[Ge2];
    return pe2.replace(Re2, function(Je2, Fe2, ze2, Me2, nt) {
      c("caret", pe2, Je2, Fe2, ze2, Me2, nt);
      var rt;
      return fe2(Fe2) ? rt = "" : fe2(ze2) ? rt = ">=" + Fe2 + ".0.0 <" + (+Fe2 + 1) + ".0.0" : fe2(Me2) ? Fe2 === "0" ? rt = ">=" + Fe2 + "." + ze2 + ".0 <" + Fe2 + "." + (+ze2 + 1) + ".0" : rt = ">=" + Fe2 + "." + ze2 + ".0 <" + (+Fe2 + 1) + ".0.0" : nt ? (c("replaceCaret pr", nt), Fe2 === "0" ? ze2 === "0" ? rt = ">=" + Fe2 + "." + ze2 + "." + Me2 + "-" + nt + " <" + Fe2 + "." + ze2 + "." + (+Me2 + 1) : rt = ">=" + Fe2 + "." + ze2 + "." + Me2 + "-" + nt + " <" + Fe2 + "." + (+ze2 + 1) + ".0" : rt = ">=" + Fe2 + "." + ze2 + "." + Me2 + "-" + nt + " <" + (+Fe2 + 1) + ".0.0") : (c("no pr"), Fe2 === "0" ? ze2 === "0" ? rt = ">=" + Fe2 + "." + ze2 + "." + Me2 + " <" + Fe2 + "." + ze2 + "." + (+Me2 + 1) : rt = ">=" + Fe2 + "." + ze2 + "." + Me2 + " <" + Fe2 + "." + (+ze2 + 1) + ".0" : rt = ">=" + Fe2 + "." + ze2 + "." + Me2 + " <" + (+Fe2 + 1) + ".0.0"), c("caret return", rt), rt;
    });
  }
  function st(pe2, ge2) {
    return c("replaceXRanges", pe2, ge2), pe2.split(/\s+/).map(function(Re2) {
      return ut(Re2, ge2);
    }).join(" ");
  }
  function ut(pe2, ge2) {
    pe2 = pe2.trim();
    var Re2 = ge2.loose ? g2[ae2] : g2[ee2];
    return pe2.replace(Re2, function(Je2, Fe2, ze2, Me2, nt, rt) {
      c("xRange", pe2, Je2, Fe2, ze2, Me2, nt, rt);
      var Tt = fe2(ze2), kt = Tt || fe2(Me2), It = kt || fe2(nt), _t = It;
      return Fe2 === "=" && _t && (Fe2 = ""), Tt ? Fe2 === ">" || Fe2 === "<" ? Je2 = "<0.0.0" : Je2 = "*" : Fe2 && _t ? (kt && (Me2 = 0), nt = 0, Fe2 === ">" ? (Fe2 = ">=", kt ? (ze2 = +ze2 + 1, Me2 = 0, nt = 0) : (Me2 = +Me2 + 1, nt = 0)) : Fe2 === "<=" && (Fe2 = "<", kt ? ze2 = +ze2 + 1 : Me2 = +Me2 + 1), Je2 = Fe2 + ze2 + "." + Me2 + "." + nt) : kt ? Je2 = ">=" + ze2 + ".0.0 <" + (+ze2 + 1) + ".0.0" : It && (Je2 = ">=" + ze2 + "." + Me2 + ".0 <" + ze2 + "." + (+Me2 + 1) + ".0"), c("xRange return", Je2), Je2;
    });
  }
  function yt(pe2, ge2) {
    return c("replaceStars", pe2, ge2), pe2.trim().replace(g2[C2], "");
  }
  function gt(pe2, ge2, Re2, Je2, Fe2, ze2, Me2, nt, rt, Tt, kt, It, _t) {
    return fe2(Re2) ? ge2 = "" : fe2(Je2) ? ge2 = ">=" + Re2 + ".0.0" : fe2(Fe2) ? ge2 = ">=" + Re2 + "." + Je2 + ".0" : ge2 = ">=" + ge2, fe2(rt) ? nt = "" : fe2(Tt) ? nt = "<" + (+rt + 1) + ".0.0" : fe2(kt) ? nt = "<" + rt + "." + (+Tt + 1) + ".0" : It ? nt = "<=" + rt + "." + Tt + "." + kt + "-" + It : nt = "<=" + nt, (ge2 + " " + nt).trim();
  }
  F2.prototype.test = function(pe2) {
    if (!pe2)
      return false;
    typeof pe2 == "string" && (pe2 = new Ie2(pe2, this.options));
    for (var ge2 = 0; ge2 < this.set.length; ge2++)
      if (bt(this.set[ge2], pe2, this.options))
        return true;
    return false;
  };
  function bt(pe2, ge2, Re2) {
    for (var Je2 = 0; Je2 < pe2.length; Je2++)
      if (!pe2[Je2].test(ge2))
        return false;
    if (ge2.prerelease.length && !Re2.includePrerelease) {
      for (Je2 = 0; Je2 < pe2.length; Je2++)
        if (c(pe2[Je2].semver), pe2[Je2].semver !== I2 && pe2[Je2].semver.prerelease.length > 0) {
          var Fe2 = pe2[Je2].semver;
          if (Fe2.major === ge2.major && Fe2.minor === ge2.minor && Fe2.patch === ge2.patch)
            return true;
        }
      return false;
    }
    return true;
  }
  u2.satisfies = St;
  function St(pe2, ge2, Re2) {
    try {
      ge2 = new F2(ge2, Re2);
    } catch {
      return false;
    }
    return ge2.test(pe2);
  }
  u2.maxSatisfying = Et;
  function Et(pe2, ge2, Re2) {
    var Je2 = null, Fe2 = null;
    try {
      var ze2 = new F2(ge2, Re2);
    } catch {
      return null;
    }
    return pe2.forEach(function(Me2) {
      ze2.test(Me2) && (!Je2 || Fe2.compare(Me2) === -1) && (Je2 = Me2, Fe2 = new Ie2(Je2, Re2));
    }), Je2;
  }
  u2.minSatisfying = ct;
  function ct(pe2, ge2, Re2) {
    var Je2 = null, Fe2 = null;
    try {
      var ze2 = new F2(ge2, Re2);
    } catch {
      return null;
    }
    return pe2.forEach(function(Me2) {
      ze2.test(Me2) && (!Je2 || Fe2.compare(Me2) === 1) && (Je2 = Me2, Fe2 = new Ie2(Je2, Re2));
    }), Je2;
  }
  u2.minVersion = Xe2;
  function Xe2(pe2, ge2) {
    pe2 = new F2(pe2, ge2);
    var Re2 = new Ie2("0.0.0");
    if (pe2.test(Re2) || (Re2 = new Ie2("0.0.0-0"), pe2.test(Re2)))
      return Re2;
    Re2 = null;
    for (var Je2 = 0; Je2 < pe2.set.length; ++Je2) {
      var Fe2 = pe2.set[Je2];
      Fe2.forEach(function(ze2) {
        var Me2 = new Ie2(ze2.semver.version);
        switch (ze2.operator) {
          case ">":
            Me2.prerelease.length === 0 ? Me2.patch++ : Me2.prerelease.push(0), Me2.raw = Me2.format();
          case "":
          case ">=":
            (!Re2 || _e(Re2, Me2)) && (Re2 = Me2);
            break;
          case "<":
          case "<=":
            break;
          default:
            throw new Error("Unexpected operation: " + ze2.operator);
        }
      });
    }
    return Re2 && pe2.test(Re2) ? Re2 : null;
  }
  u2.validRange = Ct;
  function Ct(pe2, ge2) {
    try {
      return new F2(pe2, ge2).range || "*";
    } catch {
      return null;
    }
  }
  u2.ltr = Ot;
  function Ot(pe2, ge2, Re2) {
    return Pt(pe2, ge2, "<", Re2);
  }
  u2.gtr = Nt;
  function Nt(pe2, ge2, Re2) {
    return Pt(pe2, ge2, ">", Re2);
  }
  u2.outside = Pt;
  function Pt(pe2, ge2, Re2, Je2) {
    pe2 = new Ie2(pe2, Je2), ge2 = new F2(ge2, Je2);
    var Fe2, ze2, Me2, nt, rt;
    switch (Re2) {
      case ">":
        Fe2 = _e, ze2 = ot, Me2 = ve2, nt = ">", rt = ">=";
        break;
      case "<":
        Fe2 = ve2, ze2 = Qe2, Me2 = _e, nt = "<", rt = "<=";
        break;
      default:
        throw new TypeError('Must provide a hilo val of "<" or ">"');
    }
    if (St(pe2, ge2, Je2))
      return false;
    for (var Tt = 0; Tt < ge2.set.length; ++Tt) {
      var kt = ge2.set[Tt], It = null, _t = null;
      if (kt.forEach(function(Rt) {
        Rt.semver === I2 && (Rt = new Ce2(">=0.0.0")), It = It || Rt, _t = _t || Rt, Fe2(Rt.semver, It.semver, Je2) ? It = Rt : Me2(Rt.semver, _t.semver, Je2) && (_t = Rt);
      }), It.operator === nt || It.operator === rt || (!_t.operator || _t.operator === nt) && ze2(pe2, _t.semver))
        return false;
      if (_t.operator === rt && Me2(pe2, _t.semver))
        return false;
    }
    return true;
  }
  u2.prerelease = wt;
  function wt(pe2, ge2) {
    var Re2 = Q2(pe2, ge2);
    return Re2 && Re2.prerelease.length ? Re2.prerelease : null;
  }
  u2.intersects = At;
  function At(pe2, ge2, Re2) {
    return pe2 = new F2(pe2, Re2), ge2 = new F2(ge2, Re2), pe2.intersects(ge2);
  }
  u2.coerce = Dt;
  function Dt(pe2) {
    if (pe2 instanceof Ie2)
      return pe2;
    if (typeof pe2 != "string")
      return null;
    var ge2 = pe2.match(g2[ye2]);
    return ge2 == null ? null : Q2(ge2[1] + "." + (ge2[2] || "0") + "." + (ge2[3] || "0"));
  }
})(semver$1, semver$1.exports);
var semverExports = semver$1.exports, semver = semverExports, psSupported = semver.satisfies(process.version, "^6.12.0 || >=8.0.0"), JsonWebTokenError = JsonWebTokenError_1, NotBeforeError = NotBeforeError_1, TokenExpiredError = TokenExpiredError_1, decode = decode$1, timespan$1 = timespan$2, PS_SUPPORTED$1 = psSupported, jws$1 = jws$3, PUB_KEY_ALGS = ["RS256", "RS384", "RS512", "ES256", "ES384", "ES512"], RSA_KEY_ALGS = ["RS256", "RS384", "RS512"], HS_ALGS = ["HS256", "HS384", "HS512"];
PS_SUPPORTED$1 && (PUB_KEY_ALGS.splice(3, 0, "PS256", "PS384", "PS512"), RSA_KEY_ALGS.splice(3, 0, "PS256", "PS384", "PS512"));
var verify = function(a92, u2, c, l2) {
  typeof c == "function" && !l2 && (l2 = c, c = {}), c || (c = {}), c = Object.assign({}, c);
  var v2;
  if (l2 ? v2 = l2 : v2 = function(L2, M2) {
    if (L2)
      throw L2;
    return M2;
  }, c.clockTimestamp && typeof c.clockTimestamp != "number")
    return v2(new JsonWebTokenError("clockTimestamp must be a number"));
  if (c.nonce !== void 0 && (typeof c.nonce != "string" || c.nonce.trim() === ""))
    return v2(new JsonWebTokenError("nonce must be a non-empty string"));
  var S2 = c.clockTimestamp || Math.floor(Date.now() / 1e3);
  if (!a92)
    return v2(new JsonWebTokenError("jwt must be provided"));
  if (typeof a92 != "string")
    return v2(new JsonWebTokenError("jwt must be a string"));
  var g2 = a92.split(".");
  if (g2.length !== 3)
    return v2(new JsonWebTokenError("jwt malformed"));
  var E2;
  try {
    E2 = decode(a92, { complete: true });
  } catch (L2) {
    return v2(L2);
  }
  if (!E2)
    return v2(new JsonWebTokenError("invalid token"));
  var _ = E2.header, k;
  if (typeof u2 == "function") {
    if (!l2)
      return v2(new JsonWebTokenError("verify must be called asynchronous if secret or public key is provided as a callback"));
    k = u2;
  } else
    k = function(L2, M2) {
      return M2(null, u2);
    };
  return k(_, function(L2, M2) {
    if (L2)
      return v2(new JsonWebTokenError("error in secret or public key callback: " + L2.message));
    var $ = g2[2].trim() !== "";
    if (!$ && M2)
      return v2(new JsonWebTokenError("jwt signature is required"));
    if ($ && !M2)
      return v2(new JsonWebTokenError("secret or public key must be provided"));
    if (!$ && !c.algorithms && (c.algorithms = ["none"]), c.algorithms || (c.algorithms = ~M2.toString().indexOf("BEGIN CERTIFICATE") || ~M2.toString().indexOf("BEGIN PUBLIC KEY") ? PUB_KEY_ALGS : ~M2.toString().indexOf("BEGIN RSA PUBLIC KEY") ? RSA_KEY_ALGS : HS_ALGS), !~c.algorithms.indexOf(E2.header.alg))
      return v2(new JsonWebTokenError("invalid algorithm"));
    var J2;
    try {
      J2 = jws$1.verify(a92, E2.header.alg, M2);
    } catch (Z2) {
      return v2(Z2);
    }
    if (!J2)
      return v2(new JsonWebTokenError("invalid signature"));
    var V2 = E2.payload;
    if (typeof V2.nbf < "u" && !c.ignoreNotBefore) {
      if (typeof V2.nbf != "number")
        return v2(new JsonWebTokenError("invalid nbf value"));
      if (V2.nbf > S2 + (c.clockTolerance || 0))
        return v2(new NotBeforeError("jwt not active", new Date(V2.nbf * 1e3)));
    }
    if (typeof V2.exp < "u" && !c.ignoreExpiration) {
      if (typeof V2.exp != "number")
        return v2(new JsonWebTokenError("invalid exp value"));
      if (S2 >= V2.exp + (c.clockTolerance || 0))
        return v2(new TokenExpiredError("jwt expired", new Date(V2.exp * 1e3)));
    }
    if (c.audience) {
      var q2 = Array.isArray(c.audience) ? c.audience : [c.audience], G2 = Array.isArray(V2.aud) ? V2.aud : [V2.aud], H2 = G2.some(function(Z2) {
        return q2.some(function(re2) {
          return re2 instanceof RegExp ? re2.test(Z2) : re2 === Z2;
        });
      });
      if (!H2)
        return v2(new JsonWebTokenError("jwt audience invalid. expected: " + q2.join(" or ")));
    }
    if (c.issuer) {
      var B2 = typeof c.issuer == "string" && V2.iss !== c.issuer || Array.isArray(c.issuer) && c.issuer.indexOf(V2.iss) === -1;
      if (B2)
        return v2(new JsonWebTokenError("jwt issuer invalid. expected: " + c.issuer));
    }
    if (c.subject && V2.sub !== c.subject)
      return v2(new JsonWebTokenError("jwt subject invalid. expected: " + c.subject));
    if (c.jwtid && V2.jti !== c.jwtid)
      return v2(new JsonWebTokenError("jwt jwtid invalid. expected: " + c.jwtid));
    if (c.nonce && V2.nonce !== c.nonce)
      return v2(new JsonWebTokenError("jwt nonce invalid. expected: " + c.nonce));
    if (c.maxAge) {
      if (typeof V2.iat != "number")
        return v2(new JsonWebTokenError("iat required when maxAge is specified"));
      var Y2 = timespan$1(c.maxAge, V2.iat);
      if (typeof Y2 > "u")
        return v2(new JsonWebTokenError('"maxAge" should be a number of seconds or string representing a timespan eg: "1d", "20h", 60'));
      if (S2 >= Y2 + (c.clockTolerance || 0))
        return v2(new TokenExpiredError("maxAge exceeded", new Date(Y2 * 1e3)));
    }
    if (c.complete === true) {
      var ne2 = E2.signature;
      return v2(null, { header: _, payload: V2, signature: ne2 });
    }
    return v2(null, V2);
  });
}, INFINITY$2 = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER$2 = 17976931348623157e292, NAN$2 = NaN, argsTag = "[object Arguments]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", stringTag$1 = "[object String]", symbolTag$2 = "[object Symbol]", reTrim$2 = /^\s+|\s+$/g, reIsBadHex$2 = /^[-+]0x[0-9a-f]+$/i, reIsBinary$2 = /^0b[01]+$/i, reIsOctal$2 = /^0o[0-7]+$/i, reIsUint = /^(?:0|[1-9]\d*)$/, freeParseInt$2 = parseInt;
function arrayMap(a92, u2) {
  for (var c = -1, l2 = a92 ? a92.length : 0, v2 = Array(l2); ++c < l2; )
    v2[c] = u2(a92[c], c, a92);
  return v2;
}
function baseFindIndex(a92, u2, c, l2) {
  for (var v2 = a92.length, S2 = c + (l2 ? 1 : -1); l2 ? S2-- : ++S2 < v2; )
    if (u2(a92[S2], S2, a92))
      return S2;
  return -1;
}
function baseIndexOf(a92, u2, c) {
  if (u2 !== u2)
    return baseFindIndex(a92, baseIsNaN, c);
  for (var l2 = c - 1, v2 = a92.length; ++l2 < v2; )
    if (a92[l2] === u2)
      return l2;
  return -1;
}
function baseIsNaN(a92) {
  return a92 !== a92;
}
function baseTimes(a92, u2) {
  for (var c = -1, l2 = Array(a92); ++c < a92; )
    l2[c] = u2(c);
  return l2;
}
function baseValues(a92, u2) {
  return arrayMap(u2, function(c) {
    return a92[c];
  });
}
function overArg$1(a92, u2) {
  return function(c) {
    return a92(u2(c));
  };
}
var objectProto$6 = Object.prototype, hasOwnProperty$1 = objectProto$6.hasOwnProperty, objectToString$6 = objectProto$6.toString, propertyIsEnumerable = objectProto$6.propertyIsEnumerable, nativeKeys = overArg$1(Object.keys, Object), nativeMax = Math.max;
function arrayLikeKeys(a92, u2) {
  var c = isArray$3(a92) || isArguments(a92) ? baseTimes(a92.length, String) : [], l2 = c.length, v2 = !!l2;
  for (var S2 in a92)
    (u2 || hasOwnProperty$1.call(a92, S2)) && !(v2 && (S2 == "length" || isIndex(S2, l2))) && c.push(S2);
  return c;
}
function baseKeys(a92) {
  if (!isPrototype(a92))
    return nativeKeys(a92);
  var u2 = [];
  for (var c in Object(a92))
    hasOwnProperty$1.call(a92, c) && c != "constructor" && u2.push(c);
  return u2;
}
function isIndex(a92, u2) {
  return u2 = u2 ?? MAX_SAFE_INTEGER, !!u2 && (typeof a92 == "number" || reIsUint.test(a92)) && a92 > -1 && a92 % 1 == 0 && a92 < u2;
}
function isPrototype(a92) {
  var u2 = a92 && a92.constructor, c = typeof u2 == "function" && u2.prototype || objectProto$6;
  return a92 === c;
}
function includes$1(a92, u2, c, l2) {
  a92 = isArrayLike(a92) ? a92 : values(a92), c = c && !l2 ? toInteger$2(c) : 0;
  var v2 = a92.length;
  return c < 0 && (c = nativeMax(v2 + c, 0)), isString$3(a92) ? c <= v2 && a92.indexOf(u2, c) > -1 : !!v2 && baseIndexOf(a92, u2, c) > -1;
}
function isArguments(a92) {
  return isArrayLikeObject(a92) && hasOwnProperty$1.call(a92, "callee") && (!propertyIsEnumerable.call(a92, "callee") || objectToString$6.call(a92) == argsTag);
}
var isArray$3 = Array.isArray;
function isArrayLike(a92) {
  return a92 != null && isLength(a92.length) && !isFunction$1(a92);
}
function isArrayLikeObject(a92) {
  return isObjectLike$6(a92) && isArrayLike(a92);
}
function isFunction$1(a92) {
  var u2 = isObject$6(a92) ? objectToString$6.call(a92) : "";
  return u2 == funcTag || u2 == genTag;
}
function isLength(a92) {
  return typeof a92 == "number" && a92 > -1 && a92 % 1 == 0 && a92 <= MAX_SAFE_INTEGER;
}
function isObject$6(a92) {
  var u2 = typeof a92;
  return !!a92 && (u2 == "object" || u2 == "function");
}
function isObjectLike$6(a92) {
  return !!a92 && typeof a92 == "object";
}
function isString$3(a92) {
  return typeof a92 == "string" || !isArray$3(a92) && isObjectLike$6(a92) && objectToString$6.call(a92) == stringTag$1;
}
function isSymbol$2(a92) {
  return typeof a92 == "symbol" || isObjectLike$6(a92) && objectToString$6.call(a92) == symbolTag$2;
}
function toFinite$2(a92) {
  if (!a92)
    return a92 === 0 ? a92 : 0;
  if (a92 = toNumber$2(a92), a92 === INFINITY$2 || a92 === -INFINITY$2) {
    var u2 = a92 < 0 ? -1 : 1;
    return u2 * MAX_INTEGER$2;
  }
  return a92 === a92 ? a92 : 0;
}
function toInteger$2(a92) {
  var u2 = toFinite$2(a92), c = u2 % 1;
  return u2 === u2 ? c ? u2 - c : u2 : 0;
}
function toNumber$2(a92) {
  if (typeof a92 == "number")
    return a92;
  if (isSymbol$2(a92))
    return NAN$2;
  if (isObject$6(a92)) {
    var u2 = typeof a92.valueOf == "function" ? a92.valueOf() : a92;
    a92 = isObject$6(u2) ? u2 + "" : u2;
  }
  if (typeof a92 != "string")
    return a92 === 0 ? a92 : +a92;
  a92 = a92.replace(reTrim$2, "");
  var c = reIsBinary$2.test(a92);
  return c || reIsOctal$2.test(a92) ? freeParseInt$2(a92.slice(2), c ? 2 : 8) : reIsBadHex$2.test(a92) ? NAN$2 : +a92;
}
function keys$1(a92) {
  return isArrayLike(a92) ? arrayLikeKeys(a92) : baseKeys(a92);
}
function values(a92) {
  return a92 ? baseValues(a92, keys$1(a92)) : [];
}
var lodash_includes = includes$1, boolTag = "[object Boolean]", objectProto$5 = Object.prototype, objectToString$5 = objectProto$5.toString;
function isBoolean$1(a92) {
  return a92 === true || a92 === false || isObjectLike$5(a92) && objectToString$5.call(a92) == boolTag;
}
function isObjectLike$5(a92) {
  return !!a92 && typeof a92 == "object";
}
var lodash_isboolean = isBoolean$1, INFINITY$1 = 1 / 0, MAX_INTEGER$1 = 17976931348623157e292, NAN$1 = NaN, symbolTag$1 = "[object Symbol]", reTrim$1 = /^\s+|\s+$/g, reIsBadHex$1 = /^[-+]0x[0-9a-f]+$/i, reIsBinary$1 = /^0b[01]+$/i, reIsOctal$1 = /^0o[0-7]+$/i, freeParseInt$1 = parseInt, objectProto$4 = Object.prototype, objectToString$4 = objectProto$4.toString;
function isInteger$1(a92) {
  return typeof a92 == "number" && a92 == toInteger$1(a92);
}
function isObject$5(a92) {
  var u2 = typeof a92;
  return !!a92 && (u2 == "object" || u2 == "function");
}
function isObjectLike$4(a92) {
  return !!a92 && typeof a92 == "object";
}
function isSymbol$1(a92) {
  return typeof a92 == "symbol" || isObjectLike$4(a92) && objectToString$4.call(a92) == symbolTag$1;
}
function toFinite$1(a92) {
  if (!a92)
    return a92 === 0 ? a92 : 0;
  if (a92 = toNumber$1(a92), a92 === INFINITY$1 || a92 === -INFINITY$1) {
    var u2 = a92 < 0 ? -1 : 1;
    return u2 * MAX_INTEGER$1;
  }
  return a92 === a92 ? a92 : 0;
}
function toInteger$1(a92) {
  var u2 = toFinite$1(a92), c = u2 % 1;
  return u2 === u2 ? c ? u2 - c : u2 : 0;
}
function toNumber$1(a92) {
  if (typeof a92 == "number")
    return a92;
  if (isSymbol$1(a92))
    return NAN$1;
  if (isObject$5(a92)) {
    var u2 = typeof a92.valueOf == "function" ? a92.valueOf() : a92;
    a92 = isObject$5(u2) ? u2 + "" : u2;
  }
  if (typeof a92 != "string")
    return a92 === 0 ? a92 : +a92;
  a92 = a92.replace(reTrim$1, "");
  var c = reIsBinary$1.test(a92);
  return c || reIsOctal$1.test(a92) ? freeParseInt$1(a92.slice(2), c ? 2 : 8) : reIsBadHex$1.test(a92) ? NAN$1 : +a92;
}
var lodash_isinteger = isInteger$1, numberTag = "[object Number]", objectProto$3 = Object.prototype, objectToString$3 = objectProto$3.toString;
function isObjectLike$3(a92) {
  return !!a92 && typeof a92 == "object";
}
function isNumber$2(a92) {
  return typeof a92 == "number" || isObjectLike$3(a92) && objectToString$3.call(a92) == numberTag;
}
var lodash_isnumber = isNumber$2, objectTag = "[object Object]";
function isHostObject(a92) {
  var u2 = false;
  if (a92 != null && typeof a92.toString != "function")
    try {
      u2 = !!(a92 + "");
    } catch {
    }
  return u2;
}
function overArg(a92, u2) {
  return function(c) {
    return a92(u2(c));
  };
}
var funcProto = Function.prototype, objectProto$2 = Object.prototype, funcToString = funcProto.toString, hasOwnProperty = objectProto$2.hasOwnProperty, objectCtorString = funcToString.call(Object), objectToString$2 = objectProto$2.toString, getPrototype = overArg(Object.getPrototypeOf, Object);
function isObjectLike$2(a92) {
  return !!a92 && typeof a92 == "object";
}
function isPlainObject$2(a92) {
  if (!isObjectLike$2(a92) || objectToString$2.call(a92) != objectTag || isHostObject(a92))
    return false;
  var u2 = getPrototype(a92);
  if (u2 === null)
    return true;
  var c = hasOwnProperty.call(u2, "constructor") && u2.constructor;
  return typeof c == "function" && c instanceof c && funcToString.call(c) == objectCtorString;
}
var lodash_isplainobject = isPlainObject$2, stringTag = "[object String]", objectProto$1 = Object.prototype, objectToString$1 = objectProto$1.toString, isArray$2 = Array.isArray;
function isObjectLike$1(a92) {
  return !!a92 && typeof a92 == "object";
}
function isString$2(a92) {
  return typeof a92 == "string" || !isArray$2(a92) && isObjectLike$1(a92) && objectToString$1.call(a92) == stringTag;
}
var lodash_isstring = isString$2, FUNC_ERROR_TEXT = "Expected a function", INFINITY = 1 / 0, MAX_INTEGER = 17976931348623157e292, NAN = NaN, symbolTag = "[object Symbol]", reTrim = /^\s+|\s+$/g, reIsBadHex = /^[-+]0x[0-9a-f]+$/i, reIsBinary = /^0b[01]+$/i, reIsOctal = /^0o[0-7]+$/i, freeParseInt = parseInt, objectProto = Object.prototype, objectToString = objectProto.toString;
function before(a92, u2) {
  var c;
  if (typeof u2 != "function")
    throw new TypeError(FUNC_ERROR_TEXT);
  return a92 = toInteger(a92), function() {
    return --a92 > 0 && (c = u2.apply(this, arguments)), a92 <= 1 && (u2 = void 0), c;
  };
}
function once$2(a92) {
  return before(2, a92);
}
function isObject$4(a92) {
  var u2 = typeof a92;
  return !!a92 && (u2 == "object" || u2 == "function");
}
function isObjectLike(a92) {
  return !!a92 && typeof a92 == "object";
}
function isSymbol(a92) {
  return typeof a92 == "symbol" || isObjectLike(a92) && objectToString.call(a92) == symbolTag;
}
function toFinite(a92) {
  if (!a92)
    return a92 === 0 ? a92 : 0;
  if (a92 = toNumber(a92), a92 === INFINITY || a92 === -INFINITY) {
    var u2 = a92 < 0 ? -1 : 1;
    return u2 * MAX_INTEGER;
  }
  return a92 === a92 ? a92 : 0;
}
function toInteger(a92) {
  var u2 = toFinite(a92), c = u2 % 1;
  return u2 === u2 ? c ? u2 - c : u2 : 0;
}
function toNumber(a92) {
  if (typeof a92 == "number")
    return a92;
  if (isSymbol(a92))
    return NAN;
  if (isObject$4(a92)) {
    var u2 = typeof a92.valueOf == "function" ? a92.valueOf() : a92;
    a92 = isObject$4(u2) ? u2 + "" : u2;
  }
  if (typeof a92 != "string")
    return a92 === 0 ? a92 : +a92;
  a92 = a92.replace(reTrim, "");
  var c = reIsBinary.test(a92);
  return c || reIsOctal.test(a92) ? freeParseInt(a92.slice(2), c ? 2 : 8) : reIsBadHex.test(a92) ? NAN : +a92;
}
var lodash_once = once$2, timespan = timespan$2, PS_SUPPORTED = psSupported, jws = jws$3, includes = lodash_includes, isBoolean = lodash_isboolean, isInteger = lodash_isinteger, isNumber$1 = lodash_isnumber, isPlainObject$1 = lodash_isplainobject, isString$1 = lodash_isstring, once$1 = lodash_once, SUPPORTED_ALGS = ["RS256", "RS384", "RS512", "ES256", "ES384", "ES512", "HS256", "HS384", "HS512", "none"];
PS_SUPPORTED && SUPPORTED_ALGS.splice(3, 0, "PS256", "PS384", "PS512");
var sign_options_schema = { expiresIn: { isValid: function(a92) {
  return isInteger(a92) || isString$1(a92) && a92;
}, message: '"expiresIn" should be a number of seconds or string representing a timespan' }, notBefore: { isValid: function(a92) {
  return isInteger(a92) || isString$1(a92) && a92;
}, message: '"notBefore" should be a number of seconds or string representing a timespan' }, audience: { isValid: function(a92) {
  return isString$1(a92) || Array.isArray(a92);
}, message: '"audience" must be a string or array' }, algorithm: { isValid: includes.bind(null, SUPPORTED_ALGS), message: '"algorithm" must be a valid string enum value' }, header: { isValid: isPlainObject$1, message: '"header" must be an object' }, encoding: { isValid: isString$1, message: '"encoding" must be a string' }, issuer: { isValid: isString$1, message: '"issuer" must be a string' }, subject: { isValid: isString$1, message: '"subject" must be a string' }, jwtid: { isValid: isString$1, message: '"jwtid" must be a string' }, noTimestamp: { isValid: isBoolean, message: '"noTimestamp" must be a boolean' }, keyid: { isValid: isString$1, message: '"keyid" must be a string' }, mutatePayload: { isValid: isBoolean, message: '"mutatePayload" must be a boolean' } }, registered_claims_schema = { iat: { isValid: isNumber$1, message: '"iat" should be a number of seconds' }, exp: { isValid: isNumber$1, message: '"exp" should be a number of seconds' }, nbf: { isValid: isNumber$1, message: '"nbf" should be a number of seconds' } };
function validate(a92, u2, c, l2) {
  if (!isPlainObject$1(c))
    throw new Error('Expected "' + l2 + '" to be a plain object.');
  Object.keys(c).forEach(function(v2) {
    var S2 = a92[v2];
    if (!S2) {
      if (!u2)
        throw new Error('"' + v2 + '" is not allowed in "' + l2 + '"');
      return;
    }
    if (!S2.isValid(c[v2]))
      throw new Error(S2.message);
  });
}
function validateOptions(a92) {
  return validate(sign_options_schema, false, a92, "options");
}
function validatePayload(a92) {
  return validate(registered_claims_schema, true, a92, "payload");
}
var options_to_payload = { audience: "aud", issuer: "iss", subject: "sub", jwtid: "jti" }, options_for_objects = ["expiresIn", "notBefore", "noTimestamp", "audience", "issuer", "subject", "jwtid"], sign = function(a92, u2, c, l2) {
  typeof c == "function" ? (l2 = c, c = {}) : c = c || {};
  var v2 = typeof a92 == "object" && !Buffer.isBuffer(a92), S2 = Object.assign({ alg: c.algorithm || "HS256", typ: v2 ? "JWT" : void 0, kid: c.keyid }, c.header);
  function g2(L2) {
    if (l2)
      return l2(L2);
    throw L2;
  }
  if (!u2 && c.algorithm !== "none")
    return g2(new Error("secretOrPrivateKey must have a value"));
  if (typeof a92 > "u")
    return g2(new Error("payload is required"));
  if (v2) {
    try {
      validatePayload(a92);
    } catch (L2) {
      return g2(L2);
    }
    c.mutatePayload || (a92 = Object.assign({}, a92));
  } else {
    var E2 = options_for_objects.filter(function(L2) {
      return typeof c[L2] < "u";
    });
    if (E2.length > 0)
      return g2(new Error("invalid " + E2.join(",") + " option for " + typeof a92 + " payload"));
  }
  if (typeof a92.exp < "u" && typeof c.expiresIn < "u")
    return g2(new Error('Bad "options.expiresIn" option the payload already has an "exp" property.'));
  if (typeof a92.nbf < "u" && typeof c.notBefore < "u")
    return g2(new Error('Bad "options.notBefore" option the payload already has an "nbf" property.'));
  try {
    validateOptions(c);
  } catch (L2) {
    return g2(L2);
  }
  var _ = a92.iat || Math.floor(Date.now() / 1e3);
  if (c.noTimestamp ? delete a92.iat : v2 && (a92.iat = _), typeof c.notBefore < "u") {
    try {
      a92.nbf = timespan(c.notBefore, _);
    } catch (L2) {
      return g2(L2);
    }
    if (typeof a92.nbf > "u")
      return g2(new Error('"notBefore" should be a number of seconds or string representing a timespan eg: "1d", "20h", 60'));
  }
  if (typeof c.expiresIn < "u" && typeof a92 == "object") {
    try {
      a92.exp = timespan(c.expiresIn, _);
    } catch (L2) {
      return g2(L2);
    }
    if (typeof a92.exp > "u")
      return g2(new Error('"expiresIn" should be a number of seconds or string representing a timespan eg: "1d", "20h", 60'));
  }
  Object.keys(options_to_payload).forEach(function(L2) {
    var M2 = options_to_payload[L2];
    if (typeof c[L2] < "u") {
      if (typeof a92[M2] < "u")
        return g2(new Error('Bad "options.' + L2 + '" option. The payload already has an "' + M2 + '" property.'));
      a92[M2] = c[L2];
    }
  });
  var k = c.encoding || "utf8";
  if (typeof l2 == "function")
    l2 = l2 && once$1(l2), jws.createSign({ header: S2, privateKey: u2, payload: a92, encoding: k }).once("error", l2).once("done", function(L2) {
      l2(null, L2);
    });
  else
    return jws.sign({ header: S2, payload: a92, secret: u2, encoding: k });
}, jsonwebtoken = { decode: decode$1, verify, sign, JsonWebTokenError: JsonWebTokenError_1, NotBeforeError: NotBeforeError_1, TokenExpiredError: TokenExpiredError_1 }, __createBinding = commonjsGlobal$1 && commonjsGlobal$1.__createBinding || (Object.create ? function(a92, u2, c, l2) {
  l2 === void 0 && (l2 = c), Object.defineProperty(a92, l2, { enumerable: true, get: function() {
    return u2[c];
  } });
} : function(a92, u2, c, l2) {
  l2 === void 0 && (l2 = c), a92[l2] = u2[c];
}), __setModuleDefault = commonjsGlobal$1 && commonjsGlobal$1.__setModuleDefault || (Object.create ? function(a92, u2) {
  Object.defineProperty(a92, "default", { enumerable: true, value: u2 });
} : function(a92, u2) {
  a92.default = u2;
}), __importStar = commonjsGlobal$1 && commonjsGlobal$1.__importStar || function(a92) {
  if (a92 && a92.__esModule)
    return a92;
  var u2 = {};
  if (a92 != null)
    for (var c in a92)
      c !== "default" && Object.prototype.hasOwnProperty.call(a92, c) && __createBinding(u2, a92, c);
  return __setModuleDefault(u2, a92), u2;
};
Object.defineProperty(AccessToken$1, "__esModule", { value: true });
AccessToken$1.TokenVerifier = AccessToken$1.AccessToken = void 0;
const jwt = __importStar(jsonwebtoken), defaultTTL = 6 * 60 * 60;
class AccessToken {
  /**
  * Creates a new AccessToken
  * @param apiKey API Key, can be set in env LIVEKIT_API_KEY
  * @param apiSecret Secret, can be set in env LIVEKIT_API_SECRET
  */
  constructor(u2, c, l2) {
    if (u2 || (u2 = define_process_env_default.LIVEKIT_API_KEY), c || (c = define_process_env_default.LIVEKIT_API_SECRET), !u2 || !c)
      throw Error("api-key and api-secret must be set");
    this.apiKey = u2, this.apiSecret = c, this.grants = {}, this.identity = l2 == null ? void 0 : l2.identity, this.ttl = (l2 == null ? void 0 : l2.ttl) || defaultTTL, l2 != null && l2.metadata && (this.metadata = l2.metadata), l2 != null && l2.name && (this.name = l2.name);
  }
  /**
  * Adds a video grant to this token.
  * @param grant
  */
  addGrant(u2) {
    this.grants.video = u2;
  }
  /**
  * Set metadata to be passed to the Participant, used only when joining the room
  */
  set metadata(u2) {
    this.grants.metadata = u2;
  }
  set name(u2) {
    this.grants.name = u2;
  }
  get sha256() {
    return this.grants.sha256;
  }
  set sha256(u2) {
    this.grants.sha256 = u2;
  }
  /**
  * @returns JWT encoded token
  */
  toJwt() {
    var u2;
    const c = { issuer: this.apiKey, expiresIn: this.ttl, notBefore: 0 };
    if (this.identity)
      c.subject = this.identity, c.jwtid = this.identity;
    else if (!((u2 = this.grants.video) === null || u2 === void 0) && u2.roomJoin)
      throw Error("identity is required for join but not set");
    return jwt.sign(this.grants, this.apiSecret, c);
  }
}
AccessToken$1.AccessToken = AccessToken;
class TokenVerifier {
  constructor(u2, c) {
    this.apiKey = u2, this.apiSecret = c;
  }
  verify(u2) {
    const c = jwt.verify(u2, this.apiSecret, { issuer: this.apiKey });
    if (!c)
      throw Error("invalid token");
    return c;
  }
}
AccessToken$1.TokenVerifier = TokenVerifier;
var EgressClient$1 = {}, livekit_egress = {};
(function(a92) {
  var u2 = commonjsGlobal$1 && commonjsGlobal$1.__importDefault || function(P2) {
    return P2 && P2.__esModule ? P2 : { default: P2 };
  };
  Object.defineProperty(a92, "__esModule", { value: true }), a92.AutoTrackEgress = a92.SegmentsInfo = a92.FileInfo = a92.StreamInfo = a92.StreamInfoList = a92.EgressInfo = a92.StopEgressRequest = a92.ListEgressResponse = a92.ListEgressRequest = a92.UpdateStreamRequest = a92.UpdateLayoutRequest = a92.EncodingOptions = a92.StreamOutput = a92.AliOSSUpload = a92.AzureBlobUpload = a92.GCPUpload = a92.S3Upload_MetadataEntry = a92.S3Upload = a92.DirectFileOutput = a92.SegmentedFileOutput = a92.EncodedFileOutput = a92.WebEgressRequest = a92.TrackEgressRequest = a92.TrackCompositeEgressRequest = a92.RoomCompositeEgressRequest = a92.streamInfo_StatusToJSON = a92.streamInfo_StatusFromJSON = a92.StreamInfo_Status = a92.egressStatusToJSON = a92.egressStatusFromJSON = a92.EgressStatus = a92.encodingOptionsPresetToJSON = a92.encodingOptionsPresetFromJSON = a92.EncodingOptionsPreset = a92.videoCodecToJSON = a92.videoCodecFromJSON = a92.VideoCodec = a92.audioCodecToJSON = a92.audioCodecFromJSON = a92.AudioCodec = a92.segmentedFileProtocolToJSON = a92.segmentedFileProtocolFromJSON = a92.SegmentedFileProtocol = a92.streamProtocolToJSON = a92.streamProtocolFromJSON = a92.StreamProtocol = a92.encodedFileTypeToJSON = a92.encodedFileTypeFromJSON = a92.EncodedFileType = a92.protobufPackage = void 0;
  const c = u2(umdExports), l2 = u2(minimal);
  a92.protobufPackage = "livekit";
  var v2;
  (function(P2) {
    P2[P2.DEFAULT_FILETYPE = 0] = "DEFAULT_FILETYPE", P2[P2.MP4 = 1] = "MP4", P2[P2.OGG = 2] = "OGG", P2[P2.UNRECOGNIZED = -1] = "UNRECOGNIZED";
  })(v2 = a92.EncodedFileType || (a92.EncodedFileType = {}));
  function S2(P2) {
    switch (P2) {
      case 0:
      case "DEFAULT_FILETYPE":
        return v2.DEFAULT_FILETYPE;
      case 1:
      case "MP4":
        return v2.MP4;
      case 2:
      case "OGG":
        return v2.OGG;
      case -1:
      case "UNRECOGNIZED":
      default:
        return v2.UNRECOGNIZED;
    }
  }
  a92.encodedFileTypeFromJSON = S2;
  function g2(P2) {
    switch (P2) {
      case v2.DEFAULT_FILETYPE:
        return "DEFAULT_FILETYPE";
      case v2.MP4:
        return "MP4";
      case v2.OGG:
        return "OGG";
      case v2.UNRECOGNIZED:
      default:
        return "UNRECOGNIZED";
    }
  }
  a92.encodedFileTypeToJSON = g2;
  var E2;
  (function(P2) {
    P2[P2.DEFAULT_PROTOCOL = 0] = "DEFAULT_PROTOCOL", P2[P2.RTMP = 1] = "RTMP", P2[P2.UNRECOGNIZED = -1] = "UNRECOGNIZED";
  })(E2 = a92.StreamProtocol || (a92.StreamProtocol = {}));
  function _(P2) {
    switch (P2) {
      case 0:
      case "DEFAULT_PROTOCOL":
        return E2.DEFAULT_PROTOCOL;
      case 1:
      case "RTMP":
        return E2.RTMP;
      case -1:
      case "UNRECOGNIZED":
      default:
        return E2.UNRECOGNIZED;
    }
  }
  a92.streamProtocolFromJSON = _;
  function k(P2) {
    switch (P2) {
      case E2.DEFAULT_PROTOCOL:
        return "DEFAULT_PROTOCOL";
      case E2.RTMP:
        return "RTMP";
      case E2.UNRECOGNIZED:
      default:
        return "UNRECOGNIZED";
    }
  }
  a92.streamProtocolToJSON = k;
  var L2;
  (function(P2) {
    P2[P2.DEFAULT_SEGMENTED_FILE_PROTOCOL = 0] = "DEFAULT_SEGMENTED_FILE_PROTOCOL", P2[P2.HLS_PROTOCOL = 1] = "HLS_PROTOCOL", P2[P2.UNRECOGNIZED = -1] = "UNRECOGNIZED";
  })(L2 = a92.SegmentedFileProtocol || (a92.SegmentedFileProtocol = {}));
  function M2(P2) {
    switch (P2) {
      case 0:
      case "DEFAULT_SEGMENTED_FILE_PROTOCOL":
        return L2.DEFAULT_SEGMENTED_FILE_PROTOCOL;
      case 1:
      case "HLS_PROTOCOL":
        return L2.HLS_PROTOCOL;
      case -1:
      case "UNRECOGNIZED":
      default:
        return L2.UNRECOGNIZED;
    }
  }
  a92.segmentedFileProtocolFromJSON = M2;
  function $(P2) {
    switch (P2) {
      case L2.DEFAULT_SEGMENTED_FILE_PROTOCOL:
        return "DEFAULT_SEGMENTED_FILE_PROTOCOL";
      case L2.HLS_PROTOCOL:
        return "HLS_PROTOCOL";
      case L2.UNRECOGNIZED:
      default:
        return "UNRECOGNIZED";
    }
  }
  a92.segmentedFileProtocolToJSON = $;
  var J2;
  (function(P2) {
    P2[P2.DEFAULT_AC = 0] = "DEFAULT_AC", P2[P2.OPUS = 1] = "OPUS", P2[P2.AAC = 2] = "AAC", P2[P2.UNRECOGNIZED = -1] = "UNRECOGNIZED";
  })(J2 = a92.AudioCodec || (a92.AudioCodec = {}));
  function V2(P2) {
    switch (P2) {
      case 0:
      case "DEFAULT_AC":
        return J2.DEFAULT_AC;
      case 1:
      case "OPUS":
        return J2.OPUS;
      case 2:
      case "AAC":
        return J2.AAC;
      case -1:
      case "UNRECOGNIZED":
      default:
        return J2.UNRECOGNIZED;
    }
  }
  a92.audioCodecFromJSON = V2;
  function q2(P2) {
    switch (P2) {
      case J2.DEFAULT_AC:
        return "DEFAULT_AC";
      case J2.OPUS:
        return "OPUS";
      case J2.AAC:
        return "AAC";
      case J2.UNRECOGNIZED:
      default:
        return "UNRECOGNIZED";
    }
  }
  a92.audioCodecToJSON = q2;
  var G2;
  (function(P2) {
    P2[P2.DEFAULT_VC = 0] = "DEFAULT_VC", P2[P2.H264_BASELINE = 1] = "H264_BASELINE", P2[P2.H264_MAIN = 2] = "H264_MAIN", P2[P2.H264_HIGH = 3] = "H264_HIGH", P2[P2.UNRECOGNIZED = -1] = "UNRECOGNIZED";
  })(G2 = a92.VideoCodec || (a92.VideoCodec = {}));
  function H2(P2) {
    switch (P2) {
      case 0:
      case "DEFAULT_VC":
        return G2.DEFAULT_VC;
      case 1:
      case "H264_BASELINE":
        return G2.H264_BASELINE;
      case 2:
      case "H264_MAIN":
        return G2.H264_MAIN;
      case 3:
      case "H264_HIGH":
        return G2.H264_HIGH;
      case -1:
      case "UNRECOGNIZED":
      default:
        return G2.UNRECOGNIZED;
    }
  }
  a92.videoCodecFromJSON = H2;
  function B2(P2) {
    switch (P2) {
      case G2.DEFAULT_VC:
        return "DEFAULT_VC";
      case G2.H264_BASELINE:
        return "H264_BASELINE";
      case G2.H264_MAIN:
        return "H264_MAIN";
      case G2.H264_HIGH:
        return "H264_HIGH";
      case G2.UNRECOGNIZED:
      default:
        return "UNRECOGNIZED";
    }
  }
  a92.videoCodecToJSON = B2;
  var Y2;
  (function(P2) {
    P2[P2.H264_720P_30 = 0] = "H264_720P_30", P2[P2.H264_720P_60 = 1] = "H264_720P_60", P2[P2.H264_1080P_30 = 2] = "H264_1080P_30", P2[P2.H264_1080P_60 = 3] = "H264_1080P_60", P2[P2.PORTRAIT_H264_720P_30 = 4] = "PORTRAIT_H264_720P_30", P2[P2.PORTRAIT_H264_720P_60 = 5] = "PORTRAIT_H264_720P_60", P2[P2.PORTRAIT_H264_1080P_30 = 6] = "PORTRAIT_H264_1080P_30", P2[P2.PORTRAIT_H264_1080P_60 = 7] = "PORTRAIT_H264_1080P_60", P2[P2.UNRECOGNIZED = -1] = "UNRECOGNIZED";
  })(Y2 = a92.EncodingOptionsPreset || (a92.EncodingOptionsPreset = {}));
  function ne2(P2) {
    switch (P2) {
      case 0:
      case "H264_720P_30":
        return Y2.H264_720P_30;
      case 1:
      case "H264_720P_60":
        return Y2.H264_720P_60;
      case 2:
      case "H264_1080P_30":
        return Y2.H264_1080P_30;
      case 3:
      case "H264_1080P_60":
        return Y2.H264_1080P_60;
      case 4:
      case "PORTRAIT_H264_720P_30":
        return Y2.PORTRAIT_H264_720P_30;
      case 5:
      case "PORTRAIT_H264_720P_60":
        return Y2.PORTRAIT_H264_720P_60;
      case 6:
      case "PORTRAIT_H264_1080P_30":
        return Y2.PORTRAIT_H264_1080P_30;
      case 7:
      case "PORTRAIT_H264_1080P_60":
        return Y2.PORTRAIT_H264_1080P_60;
      case -1:
      case "UNRECOGNIZED":
      default:
        return Y2.UNRECOGNIZED;
    }
  }
  a92.encodingOptionsPresetFromJSON = ne2;
  function Z2(P2) {
    switch (P2) {
      case Y2.H264_720P_30:
        return "H264_720P_30";
      case Y2.H264_720P_60:
        return "H264_720P_60";
      case Y2.H264_1080P_30:
        return "H264_1080P_30";
      case Y2.H264_1080P_60:
        return "H264_1080P_60";
      case Y2.PORTRAIT_H264_720P_30:
        return "PORTRAIT_H264_720P_30";
      case Y2.PORTRAIT_H264_720P_60:
        return "PORTRAIT_H264_720P_60";
      case Y2.PORTRAIT_H264_1080P_30:
        return "PORTRAIT_H264_1080P_30";
      case Y2.PORTRAIT_H264_1080P_60:
        return "PORTRAIT_H264_1080P_60";
      case Y2.UNRECOGNIZED:
      default:
        return "UNRECOGNIZED";
    }
  }
  a92.encodingOptionsPresetToJSON = Z2;
  var re2;
  (function(P2) {
    P2[P2.EGRESS_STARTING = 0] = "EGRESS_STARTING", P2[P2.EGRESS_ACTIVE = 1] = "EGRESS_ACTIVE", P2[P2.EGRESS_ENDING = 2] = "EGRESS_ENDING", P2[P2.EGRESS_COMPLETE = 3] = "EGRESS_COMPLETE", P2[P2.EGRESS_FAILED = 4] = "EGRESS_FAILED", P2[P2.EGRESS_ABORTED = 5] = "EGRESS_ABORTED", P2[P2.EGRESS_LIMIT_REACHED = 6] = "EGRESS_LIMIT_REACHED", P2[P2.UNRECOGNIZED = -1] = "UNRECOGNIZED";
  })(re2 = a92.EgressStatus || (a92.EgressStatus = {}));
  function oe2(P2) {
    switch (P2) {
      case 0:
      case "EGRESS_STARTING":
        return re2.EGRESS_STARTING;
      case 1:
      case "EGRESS_ACTIVE":
        return re2.EGRESS_ACTIVE;
      case 2:
      case "EGRESS_ENDING":
        return re2.EGRESS_ENDING;
      case 3:
      case "EGRESS_COMPLETE":
        return re2.EGRESS_COMPLETE;
      case 4:
      case "EGRESS_FAILED":
        return re2.EGRESS_FAILED;
      case 5:
      case "EGRESS_ABORTED":
        return re2.EGRESS_ABORTED;
      case 6:
      case "EGRESS_LIMIT_REACHED":
        return re2.EGRESS_LIMIT_REACHED;
      case -1:
      case "UNRECOGNIZED":
      default:
        return re2.UNRECOGNIZED;
    }
  }
  a92.egressStatusFromJSON = oe2;
  function de2(P2) {
    switch (P2) {
      case re2.EGRESS_STARTING:
        return "EGRESS_STARTING";
      case re2.EGRESS_ACTIVE:
        return "EGRESS_ACTIVE";
      case re2.EGRESS_ENDING:
        return "EGRESS_ENDING";
      case re2.EGRESS_COMPLETE:
        return "EGRESS_COMPLETE";
      case re2.EGRESS_FAILED:
        return "EGRESS_FAILED";
      case re2.EGRESS_ABORTED:
        return "EGRESS_ABORTED";
      case re2.EGRESS_LIMIT_REACHED:
        return "EGRESS_LIMIT_REACHED";
      case re2.UNRECOGNIZED:
      default:
        return "UNRECOGNIZED";
    }
  }
  a92.egressStatusToJSON = de2;
  var A2;
  (function(P2) {
    P2[P2.ACTIVE = 0] = "ACTIVE", P2[P2.FINISHED = 1] = "FINISHED", P2[P2.FAILED = 2] = "FAILED", P2[P2.UNRECOGNIZED = -1] = "UNRECOGNIZED";
  })(A2 = a92.StreamInfo_Status || (a92.StreamInfo_Status = {}));
  function N2(P2) {
    switch (P2) {
      case 0:
      case "ACTIVE":
        return A2.ACTIVE;
      case 1:
      case "FINISHED":
        return A2.FINISHED;
      case 2:
      case "FAILED":
        return A2.FAILED;
      case -1:
      case "UNRECOGNIZED":
      default:
        return A2.UNRECOGNIZED;
    }
  }
  a92.streamInfo_StatusFromJSON = N2;
  function D2(P2) {
    switch (P2) {
      case A2.ACTIVE:
        return "ACTIVE";
      case A2.FINISHED:
        return "FINISHED";
      case A2.FAILED:
        return "FAILED";
      case A2.UNRECOGNIZED:
      default:
        return "UNRECOGNIZED";
    }
  }
  a92.streamInfo_StatusToJSON = D2;
  function W2() {
    return { roomName: "", layout: "", audioOnly: false, videoOnly: false, customBaseUrl: "", file: void 0, stream: void 0, segments: void 0, preset: void 0, advanced: void 0 };
  }
  a92.RoomCompositeEgressRequest = { encode(P2, X2 = l2.default.Writer.create()) {
    return P2.roomName !== void 0 && P2.roomName !== "" && X2.uint32(10).string(P2.roomName), P2.layout !== void 0 && P2.layout !== "" && X2.uint32(18).string(P2.layout), P2.audioOnly === true && X2.uint32(24).bool(P2.audioOnly), P2.videoOnly === true && X2.uint32(32).bool(P2.videoOnly), P2.customBaseUrl !== void 0 && P2.customBaseUrl !== "" && X2.uint32(42).string(P2.customBaseUrl), P2.file !== void 0 && a92.EncodedFileOutput.encode(P2.file, X2.uint32(50).fork()).ldelim(), P2.stream !== void 0 && a92.StreamOutput.encode(P2.stream, X2.uint32(58).fork()).ldelim(), P2.segments !== void 0 && a92.SegmentedFileOutput.encode(P2.segments, X2.uint32(82).fork()).ldelim(), P2.preset !== void 0 && X2.uint32(64).int32(P2.preset), P2.advanced !== void 0 && a92.EncodingOptions.encode(P2.advanced, X2.uint32(74).fork()).ldelim(), X2;
  }, decode(P2, X2) {
    const ie2 = P2 instanceof l2.default.Reader ? P2 : new l2.default.Reader(P2);
    let Ee2 = X2 === void 0 ? ie2.len : ie2.pos + X2;
    const ue2 = W2();
    for (; ie2.pos < Ee2; ) {
      const O2 = ie2.uint32();
      switch (O2 >>> 3) {
        case 1:
          ue2.roomName = ie2.string();
          break;
        case 2:
          ue2.layout = ie2.string();
          break;
        case 3:
          ue2.audioOnly = ie2.bool();
          break;
        case 4:
          ue2.videoOnly = ie2.bool();
          break;
        case 5:
          ue2.customBaseUrl = ie2.string();
          break;
        case 6:
          ue2.file = a92.EncodedFileOutput.decode(ie2, ie2.uint32());
          break;
        case 7:
          ue2.stream = a92.StreamOutput.decode(ie2, ie2.uint32());
          break;
        case 10:
          ue2.segments = a92.SegmentedFileOutput.decode(ie2, ie2.uint32());
          break;
        case 8:
          ue2.preset = ie2.int32();
          break;
        case 9:
          ue2.advanced = a92.EncodingOptions.decode(ie2, ie2.uint32());
          break;
        default:
          ie2.skipType(O2 & 7);
          break;
      }
    }
    return ue2;
  }, fromJSON(P2) {
    return { roomName: Oe2(P2.roomName) ? String(P2.roomName) : "", layout: Oe2(P2.layout) ? String(P2.layout) : "", audioOnly: Oe2(P2.audioOnly) ? !!P2.audioOnly : false, videoOnly: Oe2(P2.videoOnly) ? !!P2.videoOnly : false, customBaseUrl: Oe2(P2.customBaseUrl) ? String(P2.customBaseUrl) : "", file: Oe2(P2.file) ? a92.EncodedFileOutput.fromJSON(P2.file) : void 0, stream: Oe2(P2.stream) ? a92.StreamOutput.fromJSON(P2.stream) : void 0, segments: Oe2(P2.segments) ? a92.SegmentedFileOutput.fromJSON(P2.segments) : void 0, preset: Oe2(P2.preset) ? ne2(P2.preset) : void 0, advanced: Oe2(P2.advanced) ? a92.EncodingOptions.fromJSON(P2.advanced) : void 0 };
  }, toJSON(P2) {
    const X2 = {};
    return P2.roomName !== void 0 && (X2.roomName = P2.roomName), P2.layout !== void 0 && (X2.layout = P2.layout), P2.audioOnly !== void 0 && (X2.audioOnly = P2.audioOnly), P2.videoOnly !== void 0 && (X2.videoOnly = P2.videoOnly), P2.customBaseUrl !== void 0 && (X2.customBaseUrl = P2.customBaseUrl), P2.file !== void 0 && (X2.file = P2.file ? a92.EncodedFileOutput.toJSON(P2.file) : void 0), P2.stream !== void 0 && (X2.stream = P2.stream ? a92.StreamOutput.toJSON(P2.stream) : void 0), P2.segments !== void 0 && (X2.segments = P2.segments ? a92.SegmentedFileOutput.toJSON(P2.segments) : void 0), P2.preset !== void 0 && (X2.preset = P2.preset !== void 0 ? Z2(P2.preset) : void 0), P2.advanced !== void 0 && (X2.advanced = P2.advanced ? a92.EncodingOptions.toJSON(P2.advanced) : void 0), X2;
  }, fromPartial(P2) {
    var X2, ie2, Ee2, ue2, O2, j;
    const se2 = W2();
    return se2.roomName = (X2 = P2.roomName) !== null && X2 !== void 0 ? X2 : "", se2.layout = (ie2 = P2.layout) !== null && ie2 !== void 0 ? ie2 : "", se2.audioOnly = (Ee2 = P2.audioOnly) !== null && Ee2 !== void 0 ? Ee2 : false, se2.videoOnly = (ue2 = P2.videoOnly) !== null && ue2 !== void 0 ? ue2 : false, se2.customBaseUrl = (O2 = P2.customBaseUrl) !== null && O2 !== void 0 ? O2 : "", se2.file = P2.file !== void 0 && P2.file !== null ? a92.EncodedFileOutput.fromPartial(P2.file) : void 0, se2.stream = P2.stream !== void 0 && P2.stream !== null ? a92.StreamOutput.fromPartial(P2.stream) : void 0, se2.segments = P2.segments !== void 0 && P2.segments !== null ? a92.SegmentedFileOutput.fromPartial(P2.segments) : void 0, se2.preset = (j = P2.preset) !== null && j !== void 0 ? j : void 0, se2.advanced = P2.advanced !== void 0 && P2.advanced !== null ? a92.EncodingOptions.fromPartial(P2.advanced) : void 0, se2;
  } };
  function ee2() {
    return { roomName: "", audioTrackId: "", videoTrackId: "", file: void 0, stream: void 0, segments: void 0, preset: void 0, advanced: void 0 };
  }
  a92.TrackCompositeEgressRequest = { encode(P2, X2 = l2.default.Writer.create()) {
    return P2.roomName !== void 0 && P2.roomName !== "" && X2.uint32(10).string(P2.roomName), P2.audioTrackId !== void 0 && P2.audioTrackId !== "" && X2.uint32(18).string(P2.audioTrackId), P2.videoTrackId !== void 0 && P2.videoTrackId !== "" && X2.uint32(26).string(P2.videoTrackId), P2.file !== void 0 && a92.EncodedFileOutput.encode(P2.file, X2.uint32(34).fork()).ldelim(), P2.stream !== void 0 && a92.StreamOutput.encode(P2.stream, X2.uint32(42).fork()).ldelim(), P2.segments !== void 0 && a92.SegmentedFileOutput.encode(P2.segments, X2.uint32(66).fork()).ldelim(), P2.preset !== void 0 && X2.uint32(48).int32(P2.preset), P2.advanced !== void 0 && a92.EncodingOptions.encode(P2.advanced, X2.uint32(58).fork()).ldelim(), X2;
  }, decode(P2, X2) {
    const ie2 = P2 instanceof l2.default.Reader ? P2 : new l2.default.Reader(P2);
    let Ee2 = X2 === void 0 ? ie2.len : ie2.pos + X2;
    const ue2 = ee2();
    for (; ie2.pos < Ee2; ) {
      const O2 = ie2.uint32();
      switch (O2 >>> 3) {
        case 1:
          ue2.roomName = ie2.string();
          break;
        case 2:
          ue2.audioTrackId = ie2.string();
          break;
        case 3:
          ue2.videoTrackId = ie2.string();
          break;
        case 4:
          ue2.file = a92.EncodedFileOutput.decode(ie2, ie2.uint32());
          break;
        case 5:
          ue2.stream = a92.StreamOutput.decode(ie2, ie2.uint32());
          break;
        case 8:
          ue2.segments = a92.SegmentedFileOutput.decode(ie2, ie2.uint32());
          break;
        case 6:
          ue2.preset = ie2.int32();
          break;
        case 7:
          ue2.advanced = a92.EncodingOptions.decode(ie2, ie2.uint32());
          break;
        default:
          ie2.skipType(O2 & 7);
          break;
      }
    }
    return ue2;
  }, fromJSON(P2) {
    return { roomName: Oe2(P2.roomName) ? String(P2.roomName) : "", audioTrackId: Oe2(P2.audioTrackId) ? String(P2.audioTrackId) : "", videoTrackId: Oe2(P2.videoTrackId) ? String(P2.videoTrackId) : "", file: Oe2(P2.file) ? a92.EncodedFileOutput.fromJSON(P2.file) : void 0, stream: Oe2(P2.stream) ? a92.StreamOutput.fromJSON(P2.stream) : void 0, segments: Oe2(P2.segments) ? a92.SegmentedFileOutput.fromJSON(P2.segments) : void 0, preset: Oe2(P2.preset) ? ne2(P2.preset) : void 0, advanced: Oe2(P2.advanced) ? a92.EncodingOptions.fromJSON(P2.advanced) : void 0 };
  }, toJSON(P2) {
    const X2 = {};
    return P2.roomName !== void 0 && (X2.roomName = P2.roomName), P2.audioTrackId !== void 0 && (X2.audioTrackId = P2.audioTrackId), P2.videoTrackId !== void 0 && (X2.videoTrackId = P2.videoTrackId), P2.file !== void 0 && (X2.file = P2.file ? a92.EncodedFileOutput.toJSON(P2.file) : void 0), P2.stream !== void 0 && (X2.stream = P2.stream ? a92.StreamOutput.toJSON(P2.stream) : void 0), P2.segments !== void 0 && (X2.segments = P2.segments ? a92.SegmentedFileOutput.toJSON(P2.segments) : void 0), P2.preset !== void 0 && (X2.preset = P2.preset !== void 0 ? Z2(P2.preset) : void 0), P2.advanced !== void 0 && (X2.advanced = P2.advanced ? a92.EncodingOptions.toJSON(P2.advanced) : void 0), X2;
  }, fromPartial(P2) {
    var X2, ie2, Ee2, ue2;
    const O2 = ee2();
    return O2.roomName = (X2 = P2.roomName) !== null && X2 !== void 0 ? X2 : "", O2.audioTrackId = (ie2 = P2.audioTrackId) !== null && ie2 !== void 0 ? ie2 : "", O2.videoTrackId = (Ee2 = P2.videoTrackId) !== null && Ee2 !== void 0 ? Ee2 : "", O2.file = P2.file !== void 0 && P2.file !== null ? a92.EncodedFileOutput.fromPartial(P2.file) : void 0, O2.stream = P2.stream !== void 0 && P2.stream !== null ? a92.StreamOutput.fromPartial(P2.stream) : void 0, O2.segments = P2.segments !== void 0 && P2.segments !== null ? a92.SegmentedFileOutput.fromPartial(P2.segments) : void 0, O2.preset = (ue2 = P2.preset) !== null && ue2 !== void 0 ? ue2 : void 0, O2.advanced = P2.advanced !== void 0 && P2.advanced !== null ? a92.EncodingOptions.fromPartial(P2.advanced) : void 0, O2;
  } };
  function ae2() {
    return { roomName: "", trackId: "", file: void 0, websocketUrl: void 0 };
  }
  a92.TrackEgressRequest = { encode(P2, X2 = l2.default.Writer.create()) {
    return P2.roomName !== void 0 && P2.roomName !== "" && X2.uint32(10).string(P2.roomName), P2.trackId !== void 0 && P2.trackId !== "" && X2.uint32(18).string(P2.trackId), P2.file !== void 0 && a92.DirectFileOutput.encode(P2.file, X2.uint32(26).fork()).ldelim(), P2.websocketUrl !== void 0 && X2.uint32(34).string(P2.websocketUrl), X2;
  }, decode(P2, X2) {
    const ie2 = P2 instanceof l2.default.Reader ? P2 : new l2.default.Reader(P2);
    let Ee2 = X2 === void 0 ? ie2.len : ie2.pos + X2;
    const ue2 = ae2();
    for (; ie2.pos < Ee2; ) {
      const O2 = ie2.uint32();
      switch (O2 >>> 3) {
        case 1:
          ue2.roomName = ie2.string();
          break;
        case 2:
          ue2.trackId = ie2.string();
          break;
        case 3:
          ue2.file = a92.DirectFileOutput.decode(ie2, ie2.uint32());
          break;
        case 4:
          ue2.websocketUrl = ie2.string();
          break;
        default:
          ie2.skipType(O2 & 7);
          break;
      }
    }
    return ue2;
  }, fromJSON(P2) {
    return { roomName: Oe2(P2.roomName) ? String(P2.roomName) : "", trackId: Oe2(P2.trackId) ? String(P2.trackId) : "", file: Oe2(P2.file) ? a92.DirectFileOutput.fromJSON(P2.file) : void 0, websocketUrl: Oe2(P2.websocketUrl) ? String(P2.websocketUrl) : void 0 };
  }, toJSON(P2) {
    const X2 = {};
    return P2.roomName !== void 0 && (X2.roomName = P2.roomName), P2.trackId !== void 0 && (X2.trackId = P2.trackId), P2.file !== void 0 && (X2.file = P2.file ? a92.DirectFileOutput.toJSON(P2.file) : void 0), P2.websocketUrl !== void 0 && (X2.websocketUrl = P2.websocketUrl), X2;
  }, fromPartial(P2) {
    var X2, ie2, Ee2;
    const ue2 = ae2();
    return ue2.roomName = (X2 = P2.roomName) !== null && X2 !== void 0 ? X2 : "", ue2.trackId = (ie2 = P2.trackId) !== null && ie2 !== void 0 ? ie2 : "", ue2.file = P2.file !== void 0 && P2.file !== null ? a92.DirectFileOutput.fromPartial(P2.file) : void 0, ue2.websocketUrl = (Ee2 = P2.websocketUrl) !== null && Ee2 !== void 0 ? Ee2 : void 0, ue2;
  } };
  function ye2() {
    return { url: "", audioOnly: false, videoOnly: false, file: void 0, stream: void 0, segments: void 0, preset: void 0, advanced: void 0 };
  }
  a92.WebEgressRequest = { encode(P2, X2 = l2.default.Writer.create()) {
    return P2.url !== void 0 && P2.url !== "" && X2.uint32(10).string(P2.url), P2.audioOnly === true && X2.uint32(16).bool(P2.audioOnly), P2.videoOnly === true && X2.uint32(24).bool(P2.videoOnly), P2.file !== void 0 && a92.EncodedFileOutput.encode(P2.file, X2.uint32(34).fork()).ldelim(), P2.stream !== void 0 && a92.StreamOutput.encode(P2.stream, X2.uint32(42).fork()).ldelim(), P2.segments !== void 0 && a92.SegmentedFileOutput.encode(P2.segments, X2.uint32(50).fork()).ldelim(), P2.preset !== void 0 && X2.uint32(56).int32(P2.preset), P2.advanced !== void 0 && a92.EncodingOptions.encode(P2.advanced, X2.uint32(66).fork()).ldelim(), X2;
  }, decode(P2, X2) {
    const ie2 = P2 instanceof l2.default.Reader ? P2 : new l2.default.Reader(P2);
    let Ee2 = X2 === void 0 ? ie2.len : ie2.pos + X2;
    const ue2 = ye2();
    for (; ie2.pos < Ee2; ) {
      const O2 = ie2.uint32();
      switch (O2 >>> 3) {
        case 1:
          ue2.url = ie2.string();
          break;
        case 2:
          ue2.audioOnly = ie2.bool();
          break;
        case 3:
          ue2.videoOnly = ie2.bool();
          break;
        case 4:
          ue2.file = a92.EncodedFileOutput.decode(ie2, ie2.uint32());
          break;
        case 5:
          ue2.stream = a92.StreamOutput.decode(ie2, ie2.uint32());
          break;
        case 6:
          ue2.segments = a92.SegmentedFileOutput.decode(ie2, ie2.uint32());
          break;
        case 7:
          ue2.preset = ie2.int32();
          break;
        case 8:
          ue2.advanced = a92.EncodingOptions.decode(ie2, ie2.uint32());
          break;
        default:
          ie2.skipType(O2 & 7);
          break;
      }
    }
    return ue2;
  }, fromJSON(P2) {
    return { url: Oe2(P2.url) ? String(P2.url) : "", audioOnly: Oe2(P2.audioOnly) ? !!P2.audioOnly : false, videoOnly: Oe2(P2.videoOnly) ? !!P2.videoOnly : false, file: Oe2(P2.file) ? a92.EncodedFileOutput.fromJSON(P2.file) : void 0, stream: Oe2(P2.stream) ? a92.StreamOutput.fromJSON(P2.stream) : void 0, segments: Oe2(P2.segments) ? a92.SegmentedFileOutput.fromJSON(P2.segments) : void 0, preset: Oe2(P2.preset) ? ne2(P2.preset) : void 0, advanced: Oe2(P2.advanced) ? a92.EncodingOptions.fromJSON(P2.advanced) : void 0 };
  }, toJSON(P2) {
    const X2 = {};
    return P2.url !== void 0 && (X2.url = P2.url), P2.audioOnly !== void 0 && (X2.audioOnly = P2.audioOnly), P2.videoOnly !== void 0 && (X2.videoOnly = P2.videoOnly), P2.file !== void 0 && (X2.file = P2.file ? a92.EncodedFileOutput.toJSON(P2.file) : void 0), P2.stream !== void 0 && (X2.stream = P2.stream ? a92.StreamOutput.toJSON(P2.stream) : void 0), P2.segments !== void 0 && (X2.segments = P2.segments ? a92.SegmentedFileOutput.toJSON(P2.segments) : void 0), P2.preset !== void 0 && (X2.preset = P2.preset !== void 0 ? Z2(P2.preset) : void 0), P2.advanced !== void 0 && (X2.advanced = P2.advanced ? a92.EncodingOptions.toJSON(P2.advanced) : void 0), X2;
  }, fromPartial(P2) {
    var X2, ie2, Ee2, ue2;
    const O2 = ye2();
    return O2.url = (X2 = P2.url) !== null && X2 !== void 0 ? X2 : "", O2.audioOnly = (ie2 = P2.audioOnly) !== null && ie2 !== void 0 ? ie2 : false, O2.videoOnly = (Ee2 = P2.videoOnly) !== null && Ee2 !== void 0 ? Ee2 : false, O2.file = P2.file !== void 0 && P2.file !== null ? a92.EncodedFileOutput.fromPartial(P2.file) : void 0, O2.stream = P2.stream !== void 0 && P2.stream !== null ? a92.StreamOutput.fromPartial(P2.stream) : void 0, O2.segments = P2.segments !== void 0 && P2.segments !== null ? a92.SegmentedFileOutput.fromPartial(P2.segments) : void 0, O2.preset = (ue2 = P2.preset) !== null && ue2 !== void 0 ? ue2 : void 0, O2.advanced = P2.advanced !== void 0 && P2.advanced !== null ? a92.EncodingOptions.fromPartial(P2.advanced) : void 0, O2;
  } };
  function he2() {
    return { fileType: 0, filepath: "", disableManifest: false, s3: void 0, gcp: void 0, azure: void 0, aliOSS: void 0 };
  }
  a92.EncodedFileOutput = { encode(P2, X2 = l2.default.Writer.create()) {
    return P2.fileType !== void 0 && P2.fileType !== 0 && X2.uint32(8).int32(P2.fileType), P2.filepath !== void 0 && P2.filepath !== "" && X2.uint32(18).string(P2.filepath), P2.disableManifest === true && X2.uint32(48).bool(P2.disableManifest), P2.s3 !== void 0 && a92.S3Upload.encode(P2.s3, X2.uint32(26).fork()).ldelim(), P2.gcp !== void 0 && a92.GCPUpload.encode(P2.gcp, X2.uint32(34).fork()).ldelim(), P2.azure !== void 0 && a92.AzureBlobUpload.encode(P2.azure, X2.uint32(42).fork()).ldelim(), P2.aliOSS !== void 0 && a92.AliOSSUpload.encode(P2.aliOSS, X2.uint32(58).fork()).ldelim(), X2;
  }, decode(P2, X2) {
    const ie2 = P2 instanceof l2.default.Reader ? P2 : new l2.default.Reader(P2);
    let Ee2 = X2 === void 0 ? ie2.len : ie2.pos + X2;
    const ue2 = he2();
    for (; ie2.pos < Ee2; ) {
      const O2 = ie2.uint32();
      switch (O2 >>> 3) {
        case 1:
          ue2.fileType = ie2.int32();
          break;
        case 2:
          ue2.filepath = ie2.string();
          break;
        case 6:
          ue2.disableManifest = ie2.bool();
          break;
        case 3:
          ue2.s3 = a92.S3Upload.decode(ie2, ie2.uint32());
          break;
        case 4:
          ue2.gcp = a92.GCPUpload.decode(ie2, ie2.uint32());
          break;
        case 5:
          ue2.azure = a92.AzureBlobUpload.decode(ie2, ie2.uint32());
          break;
        case 7:
          ue2.aliOSS = a92.AliOSSUpload.decode(ie2, ie2.uint32());
          break;
        default:
          ie2.skipType(O2 & 7);
          break;
      }
    }
    return ue2;
  }, fromJSON(P2) {
    return { fileType: Oe2(P2.fileType) ? S2(P2.fileType) : 0, filepath: Oe2(P2.filepath) ? String(P2.filepath) : "", disableManifest: Oe2(P2.disableManifest) ? !!P2.disableManifest : false, s3: Oe2(P2.s3) ? a92.S3Upload.fromJSON(P2.s3) : void 0, gcp: Oe2(P2.gcp) ? a92.GCPUpload.fromJSON(P2.gcp) : void 0, azure: Oe2(P2.azure) ? a92.AzureBlobUpload.fromJSON(P2.azure) : void 0, aliOSS: Oe2(P2.aliOSS) ? a92.AliOSSUpload.fromJSON(P2.aliOSS) : void 0 };
  }, toJSON(P2) {
    const X2 = {};
    return P2.fileType !== void 0 && (X2.fileType = g2(P2.fileType)), P2.filepath !== void 0 && (X2.filepath = P2.filepath), P2.disableManifest !== void 0 && (X2.disableManifest = P2.disableManifest), P2.s3 !== void 0 && (X2.s3 = P2.s3 ? a92.S3Upload.toJSON(P2.s3) : void 0), P2.gcp !== void 0 && (X2.gcp = P2.gcp ? a92.GCPUpload.toJSON(P2.gcp) : void 0), P2.azure !== void 0 && (X2.azure = P2.azure ? a92.AzureBlobUpload.toJSON(P2.azure) : void 0), P2.aliOSS !== void 0 && (X2.aliOSS = P2.aliOSS ? a92.AliOSSUpload.toJSON(P2.aliOSS) : void 0), X2;
  }, fromPartial(P2) {
    var X2, ie2, Ee2;
    const ue2 = he2();
    return ue2.fileType = (X2 = P2.fileType) !== null && X2 !== void 0 ? X2 : 0, ue2.filepath = (ie2 = P2.filepath) !== null && ie2 !== void 0 ? ie2 : "", ue2.disableManifest = (Ee2 = P2.disableManifest) !== null && Ee2 !== void 0 ? Ee2 : false, ue2.s3 = P2.s3 !== void 0 && P2.s3 !== null ? a92.S3Upload.fromPartial(P2.s3) : void 0, ue2.gcp = P2.gcp !== void 0 && P2.gcp !== null ? a92.GCPUpload.fromPartial(P2.gcp) : void 0, ue2.azure = P2.azure !== void 0 && P2.azure !== null ? a92.AzureBlobUpload.fromPartial(P2.azure) : void 0, ue2.aliOSS = P2.aliOSS !== void 0 && P2.aliOSS !== null ? a92.AliOSSUpload.fromPartial(P2.aliOSS) : void 0, ue2;
  } };
  function le2() {
    return { protocol: 0, filenamePrefix: "", playlistName: "", segmentDuration: 0, disableManifest: false, s3: void 0, gcp: void 0, azure: void 0, aliOSS: void 0 };
  }
  a92.SegmentedFileOutput = { encode(P2, X2 = l2.default.Writer.create()) {
    return P2.protocol !== void 0 && P2.protocol !== 0 && X2.uint32(8).int32(P2.protocol), P2.filenamePrefix !== void 0 && P2.filenamePrefix !== "" && X2.uint32(18).string(P2.filenamePrefix), P2.playlistName !== void 0 && P2.playlistName !== "" && X2.uint32(26).string(P2.playlistName), P2.segmentDuration !== void 0 && P2.segmentDuration !== 0 && X2.uint32(32).uint32(P2.segmentDuration), P2.disableManifest === true && X2.uint32(64).bool(P2.disableManifest), P2.s3 !== void 0 && a92.S3Upload.encode(P2.s3, X2.uint32(42).fork()).ldelim(), P2.gcp !== void 0 && a92.GCPUpload.encode(P2.gcp, X2.uint32(50).fork()).ldelim(), P2.azure !== void 0 && a92.AzureBlobUpload.encode(P2.azure, X2.uint32(58).fork()).ldelim(), P2.aliOSS !== void 0 && a92.AliOSSUpload.encode(P2.aliOSS, X2.uint32(74).fork()).ldelim(), X2;
  }, decode(P2, X2) {
    const ie2 = P2 instanceof l2.default.Reader ? P2 : new l2.default.Reader(P2);
    let Ee2 = X2 === void 0 ? ie2.len : ie2.pos + X2;
    const ue2 = le2();
    for (; ie2.pos < Ee2; ) {
      const O2 = ie2.uint32();
      switch (O2 >>> 3) {
        case 1:
          ue2.protocol = ie2.int32();
          break;
        case 2:
          ue2.filenamePrefix = ie2.string();
          break;
        case 3:
          ue2.playlistName = ie2.string();
          break;
        case 4:
          ue2.segmentDuration = ie2.uint32();
          break;
        case 8:
          ue2.disableManifest = ie2.bool();
          break;
        case 5:
          ue2.s3 = a92.S3Upload.decode(ie2, ie2.uint32());
          break;
        case 6:
          ue2.gcp = a92.GCPUpload.decode(ie2, ie2.uint32());
          break;
        case 7:
          ue2.azure = a92.AzureBlobUpload.decode(ie2, ie2.uint32());
          break;
        case 9:
          ue2.aliOSS = a92.AliOSSUpload.decode(ie2, ie2.uint32());
          break;
        default:
          ie2.skipType(O2 & 7);
          break;
      }
    }
    return ue2;
  }, fromJSON(P2) {
    return { protocol: Oe2(P2.protocol) ? M2(P2.protocol) : 0, filenamePrefix: Oe2(P2.filenamePrefix) ? String(P2.filenamePrefix) : "", playlistName: Oe2(P2.playlistName) ? String(P2.playlistName) : "", segmentDuration: Oe2(P2.segmentDuration) ? Number(P2.segmentDuration) : 0, disableManifest: Oe2(P2.disableManifest) ? !!P2.disableManifest : false, s3: Oe2(P2.s3) ? a92.S3Upload.fromJSON(P2.s3) : void 0, gcp: Oe2(P2.gcp) ? a92.GCPUpload.fromJSON(P2.gcp) : void 0, azure: Oe2(P2.azure) ? a92.AzureBlobUpload.fromJSON(P2.azure) : void 0, aliOSS: Oe2(P2.aliOSS) ? a92.AliOSSUpload.fromJSON(P2.aliOSS) : void 0 };
  }, toJSON(P2) {
    const X2 = {};
    return P2.protocol !== void 0 && (X2.protocol = $(P2.protocol)), P2.filenamePrefix !== void 0 && (X2.filenamePrefix = P2.filenamePrefix), P2.playlistName !== void 0 && (X2.playlistName = P2.playlistName), P2.segmentDuration !== void 0 && (X2.segmentDuration = Math.round(P2.segmentDuration)), P2.disableManifest !== void 0 && (X2.disableManifest = P2.disableManifest), P2.s3 !== void 0 && (X2.s3 = P2.s3 ? a92.S3Upload.toJSON(P2.s3) : void 0), P2.gcp !== void 0 && (X2.gcp = P2.gcp ? a92.GCPUpload.toJSON(P2.gcp) : void 0), P2.azure !== void 0 && (X2.azure = P2.azure ? a92.AzureBlobUpload.toJSON(P2.azure) : void 0), P2.aliOSS !== void 0 && (X2.aliOSS = P2.aliOSS ? a92.AliOSSUpload.toJSON(P2.aliOSS) : void 0), X2;
  }, fromPartial(P2) {
    var X2, ie2, Ee2, ue2, O2;
    const j = le2();
    return j.protocol = (X2 = P2.protocol) !== null && X2 !== void 0 ? X2 : 0, j.filenamePrefix = (ie2 = P2.filenamePrefix) !== null && ie2 !== void 0 ? ie2 : "", j.playlistName = (Ee2 = P2.playlistName) !== null && Ee2 !== void 0 ? Ee2 : "", j.segmentDuration = (ue2 = P2.segmentDuration) !== null && ue2 !== void 0 ? ue2 : 0, j.disableManifest = (O2 = P2.disableManifest) !== null && O2 !== void 0 ? O2 : false, j.s3 = P2.s3 !== void 0 && P2.s3 !== null ? a92.S3Upload.fromPartial(P2.s3) : void 0, j.gcp = P2.gcp !== void 0 && P2.gcp !== null ? a92.GCPUpload.fromPartial(P2.gcp) : void 0, j.azure = P2.azure !== void 0 && P2.azure !== null ? a92.AzureBlobUpload.fromPartial(P2.azure) : void 0, j.aliOSS = P2.aliOSS !== void 0 && P2.aliOSS !== null ? a92.AliOSSUpload.fromPartial(P2.aliOSS) : void 0, j;
  } };
  function we2() {
    return { filepath: "", disableManifest: false, s3: void 0, gcp: void 0, azure: void 0, aliOSS: void 0 };
  }
  a92.DirectFileOutput = { encode(P2, X2 = l2.default.Writer.create()) {
    return P2.filepath !== void 0 && P2.filepath !== "" && X2.uint32(10).string(P2.filepath), P2.disableManifest === true && X2.uint32(40).bool(P2.disableManifest), P2.s3 !== void 0 && a92.S3Upload.encode(P2.s3, X2.uint32(18).fork()).ldelim(), P2.gcp !== void 0 && a92.GCPUpload.encode(P2.gcp, X2.uint32(26).fork()).ldelim(), P2.azure !== void 0 && a92.AzureBlobUpload.encode(P2.azure, X2.uint32(34).fork()).ldelim(), P2.aliOSS !== void 0 && a92.AliOSSUpload.encode(P2.aliOSS, X2.uint32(50).fork()).ldelim(), X2;
  }, decode(P2, X2) {
    const ie2 = P2 instanceof l2.default.Reader ? P2 : new l2.default.Reader(P2);
    let Ee2 = X2 === void 0 ? ie2.len : ie2.pos + X2;
    const ue2 = we2();
    for (; ie2.pos < Ee2; ) {
      const O2 = ie2.uint32();
      switch (O2 >>> 3) {
        case 1:
          ue2.filepath = ie2.string();
          break;
        case 5:
          ue2.disableManifest = ie2.bool();
          break;
        case 2:
          ue2.s3 = a92.S3Upload.decode(ie2, ie2.uint32());
          break;
        case 3:
          ue2.gcp = a92.GCPUpload.decode(ie2, ie2.uint32());
          break;
        case 4:
          ue2.azure = a92.AzureBlobUpload.decode(ie2, ie2.uint32());
          break;
        case 6:
          ue2.aliOSS = a92.AliOSSUpload.decode(ie2, ie2.uint32());
          break;
        default:
          ie2.skipType(O2 & 7);
          break;
      }
    }
    return ue2;
  }, fromJSON(P2) {
    return { filepath: Oe2(P2.filepath) ? String(P2.filepath) : "", disableManifest: Oe2(P2.disableManifest) ? !!P2.disableManifest : false, s3: Oe2(P2.s3) ? a92.S3Upload.fromJSON(P2.s3) : void 0, gcp: Oe2(P2.gcp) ? a92.GCPUpload.fromJSON(P2.gcp) : void 0, azure: Oe2(P2.azure) ? a92.AzureBlobUpload.fromJSON(P2.azure) : void 0, aliOSS: Oe2(P2.aliOSS) ? a92.AliOSSUpload.fromJSON(P2.aliOSS) : void 0 };
  }, toJSON(P2) {
    const X2 = {};
    return P2.filepath !== void 0 && (X2.filepath = P2.filepath), P2.disableManifest !== void 0 && (X2.disableManifest = P2.disableManifest), P2.s3 !== void 0 && (X2.s3 = P2.s3 ? a92.S3Upload.toJSON(P2.s3) : void 0), P2.gcp !== void 0 && (X2.gcp = P2.gcp ? a92.GCPUpload.toJSON(P2.gcp) : void 0), P2.azure !== void 0 && (X2.azure = P2.azure ? a92.AzureBlobUpload.toJSON(P2.azure) : void 0), P2.aliOSS !== void 0 && (X2.aliOSS = P2.aliOSS ? a92.AliOSSUpload.toJSON(P2.aliOSS) : void 0), X2;
  }, fromPartial(P2) {
    var X2, ie2;
    const Ee2 = we2();
    return Ee2.filepath = (X2 = P2.filepath) !== null && X2 !== void 0 ? X2 : "", Ee2.disableManifest = (ie2 = P2.disableManifest) !== null && ie2 !== void 0 ? ie2 : false, Ee2.s3 = P2.s3 !== void 0 && P2.s3 !== null ? a92.S3Upload.fromPartial(P2.s3) : void 0, Ee2.gcp = P2.gcp !== void 0 && P2.gcp !== null ? a92.GCPUpload.fromPartial(P2.gcp) : void 0, Ee2.azure = P2.azure !== void 0 && P2.azure !== null ? a92.AzureBlobUpload.fromPartial(P2.azure) : void 0, Ee2.aliOSS = P2.aliOSS !== void 0 && P2.aliOSS !== null ? a92.AliOSSUpload.fromPartial(P2.aliOSS) : void 0, Ee2;
  } };
  function Be2() {
    return { accessKey: "", secret: "", region: "", endpoint: "", bucket: "", forcePathStyle: false, metadata: {}, tagging: "" };
  }
  a92.S3Upload = { encode(P2, X2 = l2.default.Writer.create()) {
    return P2.accessKey !== void 0 && P2.accessKey !== "" && X2.uint32(10).string(P2.accessKey), P2.secret !== void 0 && P2.secret !== "" && X2.uint32(18).string(P2.secret), P2.region !== void 0 && P2.region !== "" && X2.uint32(26).string(P2.region), P2.endpoint !== void 0 && P2.endpoint !== "" && X2.uint32(34).string(P2.endpoint), P2.bucket !== void 0 && P2.bucket !== "" && X2.uint32(42).string(P2.bucket), P2.forcePathStyle === true && X2.uint32(48).bool(P2.forcePathStyle), Object.entries(P2.metadata || {}).forEach(([ie2, Ee2]) => {
      a92.S3Upload_MetadataEntry.encode({ key: ie2, value: Ee2 }, X2.uint32(58).fork()).ldelim();
    }), P2.tagging !== void 0 && P2.tagging !== "" && X2.uint32(66).string(P2.tagging), X2;
  }, decode(P2, X2) {
    const ie2 = P2 instanceof l2.default.Reader ? P2 : new l2.default.Reader(P2);
    let Ee2 = X2 === void 0 ? ie2.len : ie2.pos + X2;
    const ue2 = Be2();
    for (; ie2.pos < Ee2; ) {
      const O2 = ie2.uint32();
      switch (O2 >>> 3) {
        case 1:
          ue2.accessKey = ie2.string();
          break;
        case 2:
          ue2.secret = ie2.string();
          break;
        case 3:
          ue2.region = ie2.string();
          break;
        case 4:
          ue2.endpoint = ie2.string();
          break;
        case 5:
          ue2.bucket = ie2.string();
          break;
        case 6:
          ue2.forcePathStyle = ie2.bool();
          break;
        case 7:
          const j = a92.S3Upload_MetadataEntry.decode(ie2, ie2.uint32());
          j.value !== void 0 && (ue2.metadata[j.key] = j.value);
          break;
        case 8:
          ue2.tagging = ie2.string();
          break;
        default:
          ie2.skipType(O2 & 7);
          break;
      }
    }
    return ue2;
  }, fromJSON(P2) {
    return { accessKey: Oe2(P2.accessKey) ? String(P2.accessKey) : "", secret: Oe2(P2.secret) ? String(P2.secret) : "", region: Oe2(P2.region) ? String(P2.region) : "", endpoint: Oe2(P2.endpoint) ? String(P2.endpoint) : "", bucket: Oe2(P2.bucket) ? String(P2.bucket) : "", forcePathStyle: Oe2(P2.forcePathStyle) ? !!P2.forcePathStyle : false, metadata: tt(P2.metadata) ? Object.entries(P2.metadata).reduce((X2, [ie2, Ee2]) => (X2[ie2] = String(Ee2), X2), {}) : {}, tagging: Oe2(P2.tagging) ? String(P2.tagging) : "" };
  }, toJSON(P2) {
    const X2 = {};
    return P2.accessKey !== void 0 && (X2.accessKey = P2.accessKey), P2.secret !== void 0 && (X2.secret = P2.secret), P2.region !== void 0 && (X2.region = P2.region), P2.endpoint !== void 0 && (X2.endpoint = P2.endpoint), P2.bucket !== void 0 && (X2.bucket = P2.bucket), P2.forcePathStyle !== void 0 && (X2.forcePathStyle = P2.forcePathStyle), X2.metadata = {}, P2.metadata && Object.entries(P2.metadata).forEach(([ie2, Ee2]) => {
      X2.metadata[ie2] = Ee2;
    }), P2.tagging !== void 0 && (X2.tagging = P2.tagging), X2;
  }, fromPartial(P2) {
    var X2, ie2, Ee2, ue2, O2, j, se2, _e;
    const ve2 = Be2();
    return ve2.accessKey = (X2 = P2.accessKey) !== null && X2 !== void 0 ? X2 : "", ve2.secret = (ie2 = P2.secret) !== null && ie2 !== void 0 ? ie2 : "", ve2.region = (Ee2 = P2.region) !== null && Ee2 !== void 0 ? Ee2 : "", ve2.endpoint = (ue2 = P2.endpoint) !== null && ue2 !== void 0 ? ue2 : "", ve2.bucket = (O2 = P2.bucket) !== null && O2 !== void 0 ? O2 : "", ve2.forcePathStyle = (j = P2.forcePathStyle) !== null && j !== void 0 ? j : false, ve2.metadata = Object.entries((se2 = P2.metadata) !== null && se2 !== void 0 ? se2 : {}).reduce((De2, [Ze2, Qe2]) => (Qe2 !== void 0 && (De2[Ze2] = String(Qe2)), De2), {}), ve2.tagging = (_e = P2.tagging) !== null && _e !== void 0 ? _e : "", ve2;
  } };
  function Ne2() {
    return { key: "", value: "" };
  }
  a92.S3Upload_MetadataEntry = { encode(P2, X2 = l2.default.Writer.create()) {
    return P2.key !== "" && X2.uint32(10).string(P2.key), P2.value !== "" && X2.uint32(18).string(P2.value), X2;
  }, decode(P2, X2) {
    const ie2 = P2 instanceof l2.default.Reader ? P2 : new l2.default.Reader(P2);
    let Ee2 = X2 === void 0 ? ie2.len : ie2.pos + X2;
    const ue2 = Ne2();
    for (; ie2.pos < Ee2; ) {
      const O2 = ie2.uint32();
      switch (O2 >>> 3) {
        case 1:
          ue2.key = ie2.string();
          break;
        case 2:
          ue2.value = ie2.string();
          break;
        default:
          ie2.skipType(O2 & 7);
          break;
      }
    }
    return ue2;
  }, fromJSON(P2) {
    return { key: Oe2(P2.key) ? String(P2.key) : "", value: Oe2(P2.value) ? String(P2.value) : "" };
  }, toJSON(P2) {
    const X2 = {};
    return P2.key !== void 0 && (X2.key = P2.key), P2.value !== void 0 && (X2.value = P2.value), X2;
  }, fromPartial(P2) {
    var X2, ie2;
    const Ee2 = Ne2();
    return Ee2.key = (X2 = P2.key) !== null && X2 !== void 0 ? X2 : "", Ee2.value = (ie2 = P2.value) !== null && ie2 !== void 0 ? ie2 : "", Ee2;
  } };
  function Le2() {
    return { credentials: new Uint8Array(), bucket: "" };
  }
  a92.GCPUpload = { encode(P2, X2 = l2.default.Writer.create()) {
    return P2.credentials !== void 0 && P2.credentials.length !== 0 && X2.uint32(10).bytes(P2.credentials), P2.bucket !== void 0 && P2.bucket !== "" && X2.uint32(18).string(P2.bucket), X2;
  }, decode(P2, X2) {
    const ie2 = P2 instanceof l2.default.Reader ? P2 : new l2.default.Reader(P2);
    let Ee2 = X2 === void 0 ? ie2.len : ie2.pos + X2;
    const ue2 = Le2();
    for (; ie2.pos < Ee2; ) {
      const O2 = ie2.uint32();
      switch (O2 >>> 3) {
        case 1:
          ue2.credentials = ie2.bytes();
          break;
        case 2:
          ue2.bucket = ie2.string();
          break;
        default:
          ie2.skipType(O2 & 7);
          break;
      }
    }
    return ue2;
  }, fromJSON(P2) {
    return { credentials: Oe2(P2.credentials) ? at(P2.credentials) : new Uint8Array(), bucket: Oe2(P2.bucket) ? String(P2.bucket) : "" };
  }, toJSON(P2) {
    const X2 = {};
    return P2.credentials !== void 0 && (X2.credentials = Ye2(P2.credentials !== void 0 ? P2.credentials : new Uint8Array())), P2.bucket !== void 0 && (X2.bucket = P2.bucket), X2;
  }, fromPartial(P2) {
    var X2, ie2;
    const Ee2 = Le2();
    return Ee2.credentials = (X2 = P2.credentials) !== null && X2 !== void 0 ? X2 : new Uint8Array(), Ee2.bucket = (ie2 = P2.bucket) !== null && ie2 !== void 0 ? ie2 : "", Ee2;
  } };
  function $e2() {
    return { accountName: "", accountKey: "", containerName: "" };
  }
  a92.AzureBlobUpload = { encode(P2, X2 = l2.default.Writer.create()) {
    return P2.accountName !== void 0 && P2.accountName !== "" && X2.uint32(10).string(P2.accountName), P2.accountKey !== void 0 && P2.accountKey !== "" && X2.uint32(18).string(P2.accountKey), P2.containerName !== void 0 && P2.containerName !== "" && X2.uint32(26).string(P2.containerName), X2;
  }, decode(P2, X2) {
    const ie2 = P2 instanceof l2.default.Reader ? P2 : new l2.default.Reader(P2);
    let Ee2 = X2 === void 0 ? ie2.len : ie2.pos + X2;
    const ue2 = $e2();
    for (; ie2.pos < Ee2; ) {
      const O2 = ie2.uint32();
      switch (O2 >>> 3) {
        case 1:
          ue2.accountName = ie2.string();
          break;
        case 2:
          ue2.accountKey = ie2.string();
          break;
        case 3:
          ue2.containerName = ie2.string();
          break;
        default:
          ie2.skipType(O2 & 7);
          break;
      }
    }
    return ue2;
  }, fromJSON(P2) {
    return { accountName: Oe2(P2.accountName) ? String(P2.accountName) : "", accountKey: Oe2(P2.accountKey) ? String(P2.accountKey) : "", containerName: Oe2(P2.containerName) ? String(P2.containerName) : "" };
  }, toJSON(P2) {
    const X2 = {};
    return P2.accountName !== void 0 && (X2.accountName = P2.accountName), P2.accountKey !== void 0 && (X2.accountKey = P2.accountKey), P2.containerName !== void 0 && (X2.containerName = P2.containerName), X2;
  }, fromPartial(P2) {
    var X2, ie2, Ee2;
    const ue2 = $e2();
    return ue2.accountName = (X2 = P2.accountName) !== null && X2 !== void 0 ? X2 : "", ue2.accountKey = (ie2 = P2.accountKey) !== null && ie2 !== void 0 ? ie2 : "", ue2.containerName = (Ee2 = P2.containerName) !== null && Ee2 !== void 0 ? Ee2 : "", ue2;
  } };
  function Ue2() {
    return { accessKey: "", secret: "", region: "", endpoint: "", bucket: "" };
  }
  a92.AliOSSUpload = { encode(P2, X2 = l2.default.Writer.create()) {
    return P2.accessKey !== void 0 && P2.accessKey !== "" && X2.uint32(10).string(P2.accessKey), P2.secret !== void 0 && P2.secret !== "" && X2.uint32(18).string(P2.secret), P2.region !== void 0 && P2.region !== "" && X2.uint32(26).string(P2.region), P2.endpoint !== void 0 && P2.endpoint !== "" && X2.uint32(34).string(P2.endpoint), P2.bucket !== void 0 && P2.bucket !== "" && X2.uint32(42).string(P2.bucket), X2;
  }, decode(P2, X2) {
    const ie2 = P2 instanceof l2.default.Reader ? P2 : new l2.default.Reader(P2);
    let Ee2 = X2 === void 0 ? ie2.len : ie2.pos + X2;
    const ue2 = Ue2();
    for (; ie2.pos < Ee2; ) {
      const O2 = ie2.uint32();
      switch (O2 >>> 3) {
        case 1:
          ue2.accessKey = ie2.string();
          break;
        case 2:
          ue2.secret = ie2.string();
          break;
        case 3:
          ue2.region = ie2.string();
          break;
        case 4:
          ue2.endpoint = ie2.string();
          break;
        case 5:
          ue2.bucket = ie2.string();
          break;
        default:
          ie2.skipType(O2 & 7);
          break;
      }
    }
    return ue2;
  }, fromJSON(P2) {
    return { accessKey: Oe2(P2.accessKey) ? String(P2.accessKey) : "", secret: Oe2(P2.secret) ? String(P2.secret) : "", region: Oe2(P2.region) ? String(P2.region) : "", endpoint: Oe2(P2.endpoint) ? String(P2.endpoint) : "", bucket: Oe2(P2.bucket) ? String(P2.bucket) : "" };
  }, toJSON(P2) {
    const X2 = {};
    return P2.accessKey !== void 0 && (X2.accessKey = P2.accessKey), P2.secret !== void 0 && (X2.secret = P2.secret), P2.region !== void 0 && (X2.region = P2.region), P2.endpoint !== void 0 && (X2.endpoint = P2.endpoint), P2.bucket !== void 0 && (X2.bucket = P2.bucket), X2;
  }, fromPartial(P2) {
    var X2, ie2, Ee2, ue2, O2;
    const j = Ue2();
    return j.accessKey = (X2 = P2.accessKey) !== null && X2 !== void 0 ? X2 : "", j.secret = (ie2 = P2.secret) !== null && ie2 !== void 0 ? ie2 : "", j.region = (Ee2 = P2.region) !== null && Ee2 !== void 0 ? Ee2 : "", j.endpoint = (ue2 = P2.endpoint) !== null && ue2 !== void 0 ? ue2 : "", j.bucket = (O2 = P2.bucket) !== null && O2 !== void 0 ? O2 : "", j;
  } };
  function Ge2() {
    return { protocol: 0, urls: [] };
  }
  a92.StreamOutput = { encode(P2, X2 = l2.default.Writer.create()) {
    if (P2.protocol !== void 0 && P2.protocol !== 0 && X2.uint32(8).int32(P2.protocol), P2.urls !== void 0 && P2.urls.length !== 0)
      for (const ie2 of P2.urls)
        X2.uint32(18).string(ie2);
    return X2;
  }, decode(P2, X2) {
    const ie2 = P2 instanceof l2.default.Reader ? P2 : new l2.default.Reader(P2);
    let Ee2 = X2 === void 0 ? ie2.len : ie2.pos + X2;
    const ue2 = Ge2();
    for (; ie2.pos < Ee2; ) {
      const O2 = ie2.uint32();
      switch (O2 >>> 3) {
        case 1:
          ue2.protocol = ie2.int32();
          break;
        case 2:
          ue2.urls.push(ie2.string());
          break;
        default:
          ie2.skipType(O2 & 7);
          break;
      }
    }
    return ue2;
  }, fromJSON(P2) {
    return { protocol: Oe2(P2.protocol) ? _(P2.protocol) : 0, urls: Array.isArray(P2 == null ? void 0 : P2.urls) ? P2.urls.map((X2) => String(X2)) : [] };
  }, toJSON(P2) {
    const X2 = {};
    return P2.protocol !== void 0 && (X2.protocol = k(P2.protocol)), P2.urls ? X2.urls = P2.urls.map((ie2) => ie2) : X2.urls = [], X2;
  }, fromPartial(P2) {
    var X2, ie2;
    const Ee2 = Ge2();
    return Ee2.protocol = (X2 = P2.protocol) !== null && X2 !== void 0 ? X2 : 0, Ee2.urls = ((ie2 = P2.urls) === null || ie2 === void 0 ? void 0 : ie2.map((ue2) => ue2)) || [], Ee2;
  } };
  function He2() {
    return { width: 0, height: 0, depth: 0, framerate: 0, audioCodec: 0, audioBitrate: 0, audioFrequency: 0, videoCodec: 0, videoBitrate: 0 };
  }
  a92.EncodingOptions = { encode(P2, X2 = l2.default.Writer.create()) {
    return P2.width !== void 0 && P2.width !== 0 && X2.uint32(8).int32(P2.width), P2.height !== void 0 && P2.height !== 0 && X2.uint32(16).int32(P2.height), P2.depth !== void 0 && P2.depth !== 0 && X2.uint32(24).int32(P2.depth), P2.framerate !== void 0 && P2.framerate !== 0 && X2.uint32(32).int32(P2.framerate), P2.audioCodec !== void 0 && P2.audioCodec !== 0 && X2.uint32(40).int32(P2.audioCodec), P2.audioBitrate !== void 0 && P2.audioBitrate !== 0 && X2.uint32(48).int32(P2.audioBitrate), P2.audioFrequency !== void 0 && P2.audioFrequency !== 0 && X2.uint32(56).int32(P2.audioFrequency), P2.videoCodec !== void 0 && P2.videoCodec !== 0 && X2.uint32(64).int32(P2.videoCodec), P2.videoBitrate !== void 0 && P2.videoBitrate !== 0 && X2.uint32(72).int32(P2.videoBitrate), X2;
  }, decode(P2, X2) {
    const ie2 = P2 instanceof l2.default.Reader ? P2 : new l2.default.Reader(P2);
    let Ee2 = X2 === void 0 ? ie2.len : ie2.pos + X2;
    const ue2 = He2();
    for (; ie2.pos < Ee2; ) {
      const O2 = ie2.uint32();
      switch (O2 >>> 3) {
        case 1:
          ue2.width = ie2.int32();
          break;
        case 2:
          ue2.height = ie2.int32();
          break;
        case 3:
          ue2.depth = ie2.int32();
          break;
        case 4:
          ue2.framerate = ie2.int32();
          break;
        case 5:
          ue2.audioCodec = ie2.int32();
          break;
        case 6:
          ue2.audioBitrate = ie2.int32();
          break;
        case 7:
          ue2.audioFrequency = ie2.int32();
          break;
        case 8:
          ue2.videoCodec = ie2.int32();
          break;
        case 9:
          ue2.videoBitrate = ie2.int32();
          break;
        default:
          ie2.skipType(O2 & 7);
          break;
      }
    }
    return ue2;
  }, fromJSON(P2) {
    return { width: Oe2(P2.width) ? Number(P2.width) : 0, height: Oe2(P2.height) ? Number(P2.height) : 0, depth: Oe2(P2.depth) ? Number(P2.depth) : 0, framerate: Oe2(P2.framerate) ? Number(P2.framerate) : 0, audioCodec: Oe2(P2.audioCodec) ? V2(P2.audioCodec) : 0, audioBitrate: Oe2(P2.audioBitrate) ? Number(P2.audioBitrate) : 0, audioFrequency: Oe2(P2.audioFrequency) ? Number(P2.audioFrequency) : 0, videoCodec: Oe2(P2.videoCodec) ? H2(P2.videoCodec) : 0, videoBitrate: Oe2(P2.videoBitrate) ? Number(P2.videoBitrate) : 0 };
  }, toJSON(P2) {
    const X2 = {};
    return P2.width !== void 0 && (X2.width = Math.round(P2.width)), P2.height !== void 0 && (X2.height = Math.round(P2.height)), P2.depth !== void 0 && (X2.depth = Math.round(P2.depth)), P2.framerate !== void 0 && (X2.framerate = Math.round(P2.framerate)), P2.audioCodec !== void 0 && (X2.audioCodec = q2(P2.audioCodec)), P2.audioBitrate !== void 0 && (X2.audioBitrate = Math.round(P2.audioBitrate)), P2.audioFrequency !== void 0 && (X2.audioFrequency = Math.round(P2.audioFrequency)), P2.videoCodec !== void 0 && (X2.videoCodec = B2(P2.videoCodec)), P2.videoBitrate !== void 0 && (X2.videoBitrate = Math.round(P2.videoBitrate)), X2;
  }, fromPartial(P2) {
    var X2, ie2, Ee2, ue2, O2, j, se2, _e, ve2;
    const De2 = He2();
    return De2.width = (X2 = P2.width) !== null && X2 !== void 0 ? X2 : 0, De2.height = (ie2 = P2.height) !== null && ie2 !== void 0 ? ie2 : 0, De2.depth = (Ee2 = P2.depth) !== null && Ee2 !== void 0 ? Ee2 : 0, De2.framerate = (ue2 = P2.framerate) !== null && ue2 !== void 0 ? ue2 : 0, De2.audioCodec = (O2 = P2.audioCodec) !== null && O2 !== void 0 ? O2 : 0, De2.audioBitrate = (j = P2.audioBitrate) !== null && j !== void 0 ? j : 0, De2.audioFrequency = (se2 = P2.audioFrequency) !== null && se2 !== void 0 ? se2 : 0, De2.videoCodec = (_e = P2.videoCodec) !== null && _e !== void 0 ? _e : 0, De2.videoBitrate = (ve2 = P2.videoBitrate) !== null && ve2 !== void 0 ? ve2 : 0, De2;
  } };
  function Ve2() {
    return { egressId: "", layout: "" };
  }
  a92.UpdateLayoutRequest = { encode(P2, X2 = l2.default.Writer.create()) {
    return P2.egressId !== void 0 && P2.egressId !== "" && X2.uint32(10).string(P2.egressId), P2.layout !== void 0 && P2.layout !== "" && X2.uint32(18).string(P2.layout), X2;
  }, decode(P2, X2) {
    const ie2 = P2 instanceof l2.default.Reader ? P2 : new l2.default.Reader(P2);
    let Ee2 = X2 === void 0 ? ie2.len : ie2.pos + X2;
    const ue2 = Ve2();
    for (; ie2.pos < Ee2; ) {
      const O2 = ie2.uint32();
      switch (O2 >>> 3) {
        case 1:
          ue2.egressId = ie2.string();
          break;
        case 2:
          ue2.layout = ie2.string();
          break;
        default:
          ie2.skipType(O2 & 7);
          break;
      }
    }
    return ue2;
  }, fromJSON(P2) {
    return { egressId: Oe2(P2.egressId) ? String(P2.egressId) : "", layout: Oe2(P2.layout) ? String(P2.layout) : "" };
  }, toJSON(P2) {
    const X2 = {};
    return P2.egressId !== void 0 && (X2.egressId = P2.egressId), P2.layout !== void 0 && (X2.layout = P2.layout), X2;
  }, fromPartial(P2) {
    var X2, ie2;
    const Ee2 = Ve2();
    return Ee2.egressId = (X2 = P2.egressId) !== null && X2 !== void 0 ? X2 : "", Ee2.layout = (ie2 = P2.layout) !== null && ie2 !== void 0 ? ie2 : "", Ee2;
  } };
  function be2() {
    return { egressId: "", addOutputUrls: [], removeOutputUrls: [] };
  }
  a92.UpdateStreamRequest = { encode(P2, X2 = l2.default.Writer.create()) {
    if (P2.egressId !== void 0 && P2.egressId !== "" && X2.uint32(10).string(P2.egressId), P2.addOutputUrls !== void 0 && P2.addOutputUrls.length !== 0)
      for (const ie2 of P2.addOutputUrls)
        X2.uint32(18).string(ie2);
    if (P2.removeOutputUrls !== void 0 && P2.removeOutputUrls.length !== 0)
      for (const ie2 of P2.removeOutputUrls)
        X2.uint32(26).string(ie2);
    return X2;
  }, decode(P2, X2) {
    const ie2 = P2 instanceof l2.default.Reader ? P2 : new l2.default.Reader(P2);
    let Ee2 = X2 === void 0 ? ie2.len : ie2.pos + X2;
    const ue2 = be2();
    for (; ie2.pos < Ee2; ) {
      const O2 = ie2.uint32();
      switch (O2 >>> 3) {
        case 1:
          ue2.egressId = ie2.string();
          break;
        case 2:
          ue2.addOutputUrls.push(ie2.string());
          break;
        case 3:
          ue2.removeOutputUrls.push(ie2.string());
          break;
        default:
          ie2.skipType(O2 & 7);
          break;
      }
    }
    return ue2;
  }, fromJSON(P2) {
    return { egressId: Oe2(P2.egressId) ? String(P2.egressId) : "", addOutputUrls: Array.isArray(P2 == null ? void 0 : P2.addOutputUrls) ? P2.addOutputUrls.map((X2) => String(X2)) : [], removeOutputUrls: Array.isArray(P2 == null ? void 0 : P2.removeOutputUrls) ? P2.removeOutputUrls.map((X2) => String(X2)) : [] };
  }, toJSON(P2) {
    const X2 = {};
    return P2.egressId !== void 0 && (X2.egressId = P2.egressId), P2.addOutputUrls ? X2.addOutputUrls = P2.addOutputUrls.map((ie2) => ie2) : X2.addOutputUrls = [], P2.removeOutputUrls ? X2.removeOutputUrls = P2.removeOutputUrls.map((ie2) => ie2) : X2.removeOutputUrls = [], X2;
  }, fromPartial(P2) {
    var X2, ie2, Ee2;
    const ue2 = be2();
    return ue2.egressId = (X2 = P2.egressId) !== null && X2 !== void 0 ? X2 : "", ue2.addOutputUrls = ((ie2 = P2.addOutputUrls) === null || ie2 === void 0 ? void 0 : ie2.map((O2) => O2)) || [], ue2.removeOutputUrls = ((Ee2 = P2.removeOutputUrls) === null || Ee2 === void 0 ? void 0 : Ee2.map((O2) => O2)) || [], ue2;
  } };
  function Ae2() {
    return { roomName: "" };
  }
  a92.ListEgressRequest = { encode(P2, X2 = l2.default.Writer.create()) {
    return P2.roomName !== void 0 && P2.roomName !== "" && X2.uint32(10).string(P2.roomName), X2;
  }, decode(P2, X2) {
    const ie2 = P2 instanceof l2.default.Reader ? P2 : new l2.default.Reader(P2);
    let Ee2 = X2 === void 0 ? ie2.len : ie2.pos + X2;
    const ue2 = Ae2();
    for (; ie2.pos < Ee2; ) {
      const O2 = ie2.uint32();
      switch (O2 >>> 3) {
        case 1:
          ue2.roomName = ie2.string();
          break;
        default:
          ie2.skipType(O2 & 7);
          break;
      }
    }
    return ue2;
  }, fromJSON(P2) {
    return { roomName: Oe2(P2.roomName) ? String(P2.roomName) : "" };
  }, toJSON(P2) {
    const X2 = {};
    return P2.roomName !== void 0 && (X2.roomName = P2.roomName), X2;
  }, fromPartial(P2) {
    var X2;
    const ie2 = Ae2();
    return ie2.roomName = (X2 = P2.roomName) !== null && X2 !== void 0 ? X2 : "", ie2;
  } };
  function qe2() {
    return { items: [] };
  }
  a92.ListEgressResponse = { encode(P2, X2 = l2.default.Writer.create()) {
    if (P2.items !== void 0 && P2.items.length !== 0)
      for (const ie2 of P2.items)
        a92.EgressInfo.encode(ie2, X2.uint32(10).fork()).ldelim();
    return X2;
  }, decode(P2, X2) {
    const ie2 = P2 instanceof l2.default.Reader ? P2 : new l2.default.Reader(P2);
    let Ee2 = X2 === void 0 ? ie2.len : ie2.pos + X2;
    const ue2 = qe2();
    for (; ie2.pos < Ee2; ) {
      const O2 = ie2.uint32();
      switch (O2 >>> 3) {
        case 1:
          ue2.items.push(a92.EgressInfo.decode(ie2, ie2.uint32()));
          break;
        default:
          ie2.skipType(O2 & 7);
          break;
      }
    }
    return ue2;
  }, fromJSON(P2) {
    return { items: Array.isArray(P2 == null ? void 0 : P2.items) ? P2.items.map((X2) => a92.EgressInfo.fromJSON(X2)) : [] };
  }, toJSON(P2) {
    const X2 = {};
    return P2.items ? X2.items = P2.items.map((ie2) => ie2 ? a92.EgressInfo.toJSON(ie2) : void 0) : X2.items = [], X2;
  }, fromPartial(P2) {
    var X2;
    const ie2 = qe2();
    return ie2.items = ((X2 = P2.items) === null || X2 === void 0 ? void 0 : X2.map((Ee2) => a92.EgressInfo.fromPartial(Ee2))) || [], ie2;
  } };
  function xe2() {
    return { egressId: "" };
  }
  a92.StopEgressRequest = { encode(P2, X2 = l2.default.Writer.create()) {
    return P2.egressId !== void 0 && P2.egressId !== "" && X2.uint32(10).string(P2.egressId), X2;
  }, decode(P2, X2) {
    const ie2 = P2 instanceof l2.default.Reader ? P2 : new l2.default.Reader(P2);
    let Ee2 = X2 === void 0 ? ie2.len : ie2.pos + X2;
    const ue2 = xe2();
    for (; ie2.pos < Ee2; ) {
      const O2 = ie2.uint32();
      switch (O2 >>> 3) {
        case 1:
          ue2.egressId = ie2.string();
          break;
        default:
          ie2.skipType(O2 & 7);
          break;
      }
    }
    return ue2;
  }, fromJSON(P2) {
    return { egressId: Oe2(P2.egressId) ? String(P2.egressId) : "" };
  }, toJSON(P2) {
    const X2 = {};
    return P2.egressId !== void 0 && (X2.egressId = P2.egressId), X2;
  }, fromPartial(P2) {
    var X2;
    const ie2 = xe2();
    return ie2.egressId = (X2 = P2.egressId) !== null && X2 !== void 0 ? X2 : "", ie2;
  } };
  function Pe2() {
    return { egressId: "", roomId: "", roomName: "", status: 0, startedAt: 0, endedAt: 0, error: "", roomComposite: void 0, trackComposite: void 0, track: void 0, web: void 0, stream: void 0, file: void 0, segments: void 0 };
  }
  a92.EgressInfo = { encode(P2, X2 = l2.default.Writer.create()) {
    return P2.egressId !== void 0 && P2.egressId !== "" && X2.uint32(10).string(P2.egressId), P2.roomId !== void 0 && P2.roomId !== "" && X2.uint32(18).string(P2.roomId), P2.roomName !== void 0 && P2.roomName !== "" && X2.uint32(106).string(P2.roomName), P2.status !== void 0 && P2.status !== 0 && X2.uint32(24).int32(P2.status), P2.startedAt !== void 0 && P2.startedAt !== 0 && X2.uint32(80).int64(P2.startedAt), P2.endedAt !== void 0 && P2.endedAt !== 0 && X2.uint32(88).int64(P2.endedAt), P2.error !== void 0 && P2.error !== "" && X2.uint32(74).string(P2.error), P2.roomComposite !== void 0 && a92.RoomCompositeEgressRequest.encode(P2.roomComposite, X2.uint32(34).fork()).ldelim(), P2.trackComposite !== void 0 && a92.TrackCompositeEgressRequest.encode(P2.trackComposite, X2.uint32(42).fork()).ldelim(), P2.track !== void 0 && a92.TrackEgressRequest.encode(P2.track, X2.uint32(50).fork()).ldelim(), P2.web !== void 0 && a92.WebEgressRequest.encode(P2.web, X2.uint32(114).fork()).ldelim(), P2.stream !== void 0 && a92.StreamInfoList.encode(P2.stream, X2.uint32(58).fork()).ldelim(), P2.file !== void 0 && a92.FileInfo.encode(P2.file, X2.uint32(66).fork()).ldelim(), P2.segments !== void 0 && a92.SegmentsInfo.encode(P2.segments, X2.uint32(98).fork()).ldelim(), X2;
  }, decode(P2, X2) {
    const ie2 = P2 instanceof l2.default.Reader ? P2 : new l2.default.Reader(P2);
    let Ee2 = X2 === void 0 ? ie2.len : ie2.pos + X2;
    const ue2 = Pe2();
    for (; ie2.pos < Ee2; ) {
      const O2 = ie2.uint32();
      switch (O2 >>> 3) {
        case 1:
          ue2.egressId = ie2.string();
          break;
        case 2:
          ue2.roomId = ie2.string();
          break;
        case 13:
          ue2.roomName = ie2.string();
          break;
        case 3:
          ue2.status = ie2.int32();
          break;
        case 10:
          ue2.startedAt = je2(ie2.int64());
          break;
        case 11:
          ue2.endedAt = je2(ie2.int64());
          break;
        case 9:
          ue2.error = ie2.string();
          break;
        case 4:
          ue2.roomComposite = a92.RoomCompositeEgressRequest.decode(ie2, ie2.uint32());
          break;
        case 5:
          ue2.trackComposite = a92.TrackCompositeEgressRequest.decode(ie2, ie2.uint32());
          break;
        case 6:
          ue2.track = a92.TrackEgressRequest.decode(ie2, ie2.uint32());
          break;
        case 14:
          ue2.web = a92.WebEgressRequest.decode(ie2, ie2.uint32());
          break;
        case 7:
          ue2.stream = a92.StreamInfoList.decode(ie2, ie2.uint32());
          break;
        case 8:
          ue2.file = a92.FileInfo.decode(ie2, ie2.uint32());
          break;
        case 12:
          ue2.segments = a92.SegmentsInfo.decode(ie2, ie2.uint32());
          break;
        default:
          ie2.skipType(O2 & 7);
          break;
      }
    }
    return ue2;
  }, fromJSON(P2) {
    return { egressId: Oe2(P2.egressId) ? String(P2.egressId) : "", roomId: Oe2(P2.roomId) ? String(P2.roomId) : "", roomName: Oe2(P2.roomName) ? String(P2.roomName) : "", status: Oe2(P2.status) ? oe2(P2.status) : 0, startedAt: Oe2(P2.startedAt) ? Number(P2.startedAt) : 0, endedAt: Oe2(P2.endedAt) ? Number(P2.endedAt) : 0, error: Oe2(P2.error) ? String(P2.error) : "", roomComposite: Oe2(P2.roomComposite) ? a92.RoomCompositeEgressRequest.fromJSON(P2.roomComposite) : void 0, trackComposite: Oe2(P2.trackComposite) ? a92.TrackCompositeEgressRequest.fromJSON(P2.trackComposite) : void 0, track: Oe2(P2.track) ? a92.TrackEgressRequest.fromJSON(P2.track) : void 0, web: Oe2(P2.web) ? a92.WebEgressRequest.fromJSON(P2.web) : void 0, stream: Oe2(P2.stream) ? a92.StreamInfoList.fromJSON(P2.stream) : void 0, file: Oe2(P2.file) ? a92.FileInfo.fromJSON(P2.file) : void 0, segments: Oe2(P2.segments) ? a92.SegmentsInfo.fromJSON(P2.segments) : void 0 };
  }, toJSON(P2) {
    const X2 = {};
    return P2.egressId !== void 0 && (X2.egressId = P2.egressId), P2.roomId !== void 0 && (X2.roomId = P2.roomId), P2.roomName !== void 0 && (X2.roomName = P2.roomName), P2.status !== void 0 && (X2.status = de2(P2.status)), P2.startedAt !== void 0 && (X2.startedAt = Math.round(P2.startedAt)), P2.endedAt !== void 0 && (X2.endedAt = Math.round(P2.endedAt)), P2.error !== void 0 && (X2.error = P2.error), P2.roomComposite !== void 0 && (X2.roomComposite = P2.roomComposite ? a92.RoomCompositeEgressRequest.toJSON(P2.roomComposite) : void 0), P2.trackComposite !== void 0 && (X2.trackComposite = P2.trackComposite ? a92.TrackCompositeEgressRequest.toJSON(P2.trackComposite) : void 0), P2.track !== void 0 && (X2.track = P2.track ? a92.TrackEgressRequest.toJSON(P2.track) : void 0), P2.web !== void 0 && (X2.web = P2.web ? a92.WebEgressRequest.toJSON(P2.web) : void 0), P2.stream !== void 0 && (X2.stream = P2.stream ? a92.StreamInfoList.toJSON(P2.stream) : void 0), P2.file !== void 0 && (X2.file = P2.file ? a92.FileInfo.toJSON(P2.file) : void 0), P2.segments !== void 0 && (X2.segments = P2.segments ? a92.SegmentsInfo.toJSON(P2.segments) : void 0), X2;
  }, fromPartial(P2) {
    var X2, ie2, Ee2, ue2, O2, j, se2;
    const _e = Pe2();
    return _e.egressId = (X2 = P2.egressId) !== null && X2 !== void 0 ? X2 : "", _e.roomId = (ie2 = P2.roomId) !== null && ie2 !== void 0 ? ie2 : "", _e.roomName = (Ee2 = P2.roomName) !== null && Ee2 !== void 0 ? Ee2 : "", _e.status = (ue2 = P2.status) !== null && ue2 !== void 0 ? ue2 : 0, _e.startedAt = (O2 = P2.startedAt) !== null && O2 !== void 0 ? O2 : 0, _e.endedAt = (j = P2.endedAt) !== null && j !== void 0 ? j : 0, _e.error = (se2 = P2.error) !== null && se2 !== void 0 ? se2 : "", _e.roomComposite = P2.roomComposite !== void 0 && P2.roomComposite !== null ? a92.RoomCompositeEgressRequest.fromPartial(P2.roomComposite) : void 0, _e.trackComposite = P2.trackComposite !== void 0 && P2.trackComposite !== null ? a92.TrackCompositeEgressRequest.fromPartial(P2.trackComposite) : void 0, _e.track = P2.track !== void 0 && P2.track !== null ? a92.TrackEgressRequest.fromPartial(P2.track) : void 0, _e.web = P2.web !== void 0 && P2.web !== null ? a92.WebEgressRequest.fromPartial(P2.web) : void 0, _e.stream = P2.stream !== void 0 && P2.stream !== null ? a92.StreamInfoList.fromPartial(P2.stream) : void 0, _e.file = P2.file !== void 0 && P2.file !== null ? a92.FileInfo.fromPartial(P2.file) : void 0, _e.segments = P2.segments !== void 0 && P2.segments !== null ? a92.SegmentsInfo.fromPartial(P2.segments) : void 0, _e;
  } };
  function C2() {
    return { info: [] };
  }
  a92.StreamInfoList = { encode(P2, X2 = l2.default.Writer.create()) {
    if (P2.info !== void 0 && P2.info.length !== 0)
      for (const ie2 of P2.info)
        a92.StreamInfo.encode(ie2, X2.uint32(10).fork()).ldelim();
    return X2;
  }, decode(P2, X2) {
    const ie2 = P2 instanceof l2.default.Reader ? P2 : new l2.default.Reader(P2);
    let Ee2 = X2 === void 0 ? ie2.len : ie2.pos + X2;
    const ue2 = C2();
    for (; ie2.pos < Ee2; ) {
      const O2 = ie2.uint32();
      switch (O2 >>> 3) {
        case 1:
          ue2.info.push(a92.StreamInfo.decode(ie2, ie2.uint32()));
          break;
        default:
          ie2.skipType(O2 & 7);
          break;
      }
    }
    return ue2;
  }, fromJSON(P2) {
    return { info: Array.isArray(P2 == null ? void 0 : P2.info) ? P2.info.map((X2) => a92.StreamInfo.fromJSON(X2)) : [] };
  }, toJSON(P2) {
    const X2 = {};
    return P2.info ? X2.info = P2.info.map((ie2) => ie2 ? a92.StreamInfo.toJSON(ie2) : void 0) : X2.info = [], X2;
  }, fromPartial(P2) {
    var X2;
    const ie2 = C2();
    return ie2.info = ((X2 = P2.info) === null || X2 === void 0 ? void 0 : X2.map((Ee2) => a92.StreamInfo.fromPartial(Ee2))) || [], ie2;
  } };
  function x2() {
    return { url: "", startedAt: 0, endedAt: 0, duration: 0, status: 0 };
  }
  a92.StreamInfo = { encode(P2, X2 = l2.default.Writer.create()) {
    return P2.url !== void 0 && P2.url !== "" && X2.uint32(10).string(P2.url), P2.startedAt !== void 0 && P2.startedAt !== 0 && X2.uint32(16).int64(P2.startedAt), P2.endedAt !== void 0 && P2.endedAt !== 0 && X2.uint32(24).int64(P2.endedAt), P2.duration !== void 0 && P2.duration !== 0 && X2.uint32(32).int64(P2.duration), P2.status !== void 0 && P2.status !== 0 && X2.uint32(40).int32(P2.status), X2;
  }, decode(P2, X2) {
    const ie2 = P2 instanceof l2.default.Reader ? P2 : new l2.default.Reader(P2);
    let Ee2 = X2 === void 0 ? ie2.len : ie2.pos + X2;
    const ue2 = x2();
    for (; ie2.pos < Ee2; ) {
      const O2 = ie2.uint32();
      switch (O2 >>> 3) {
        case 1:
          ue2.url = ie2.string();
          break;
        case 2:
          ue2.startedAt = je2(ie2.int64());
          break;
        case 3:
          ue2.endedAt = je2(ie2.int64());
          break;
        case 4:
          ue2.duration = je2(ie2.int64());
          break;
        case 5:
          ue2.status = ie2.int32();
          break;
        default:
          ie2.skipType(O2 & 7);
          break;
      }
    }
    return ue2;
  }, fromJSON(P2) {
    return { url: Oe2(P2.url) ? String(P2.url) : "", startedAt: Oe2(P2.startedAt) ? Number(P2.startedAt) : 0, endedAt: Oe2(P2.endedAt) ? Number(P2.endedAt) : 0, duration: Oe2(P2.duration) ? Number(P2.duration) : 0, status: Oe2(P2.status) ? N2(P2.status) : 0 };
  }, toJSON(P2) {
    const X2 = {};
    return P2.url !== void 0 && (X2.url = P2.url), P2.startedAt !== void 0 && (X2.startedAt = Math.round(P2.startedAt)), P2.endedAt !== void 0 && (X2.endedAt = Math.round(P2.endedAt)), P2.duration !== void 0 && (X2.duration = Math.round(P2.duration)), P2.status !== void 0 && (X2.status = D2(P2.status)), X2;
  }, fromPartial(P2) {
    var X2, ie2, Ee2, ue2, O2;
    const j = x2();
    return j.url = (X2 = P2.url) !== null && X2 !== void 0 ? X2 : "", j.startedAt = (ie2 = P2.startedAt) !== null && ie2 !== void 0 ? ie2 : 0, j.endedAt = (Ee2 = P2.endedAt) !== null && Ee2 !== void 0 ? Ee2 : 0, j.duration = (ue2 = P2.duration) !== null && ue2 !== void 0 ? ue2 : 0, j.status = (O2 = P2.status) !== null && O2 !== void 0 ? O2 : 0, j;
  } };
  function Q2() {
    return { filename: "", startedAt: 0, endedAt: 0, duration: 0, size: 0, location: "" };
  }
  a92.FileInfo = { encode(P2, X2 = l2.default.Writer.create()) {
    return P2.filename !== void 0 && P2.filename !== "" && X2.uint32(10).string(P2.filename), P2.startedAt !== void 0 && P2.startedAt !== 0 && X2.uint32(16).int64(P2.startedAt), P2.endedAt !== void 0 && P2.endedAt !== 0 && X2.uint32(24).int64(P2.endedAt), P2.duration !== void 0 && P2.duration !== 0 && X2.uint32(48).int64(P2.duration), P2.size !== void 0 && P2.size !== 0 && X2.uint32(32).int64(P2.size), P2.location !== void 0 && P2.location !== "" && X2.uint32(42).string(P2.location), X2;
  }, decode(P2, X2) {
    const ie2 = P2 instanceof l2.default.Reader ? P2 : new l2.default.Reader(P2);
    let Ee2 = X2 === void 0 ? ie2.len : ie2.pos + X2;
    const ue2 = Q2();
    for (; ie2.pos < Ee2; ) {
      const O2 = ie2.uint32();
      switch (O2 >>> 3) {
        case 1:
          ue2.filename = ie2.string();
          break;
        case 2:
          ue2.startedAt = je2(ie2.int64());
          break;
        case 3:
          ue2.endedAt = je2(ie2.int64());
          break;
        case 6:
          ue2.duration = je2(ie2.int64());
          break;
        case 4:
          ue2.size = je2(ie2.int64());
          break;
        case 5:
          ue2.location = ie2.string();
          break;
        default:
          ie2.skipType(O2 & 7);
          break;
      }
    }
    return ue2;
  }, fromJSON(P2) {
    return { filename: Oe2(P2.filename) ? String(P2.filename) : "", startedAt: Oe2(P2.startedAt) ? Number(P2.startedAt) : 0, endedAt: Oe2(P2.endedAt) ? Number(P2.endedAt) : 0, duration: Oe2(P2.duration) ? Number(P2.duration) : 0, size: Oe2(P2.size) ? Number(P2.size) : 0, location: Oe2(P2.location) ? String(P2.location) : "" };
  }, toJSON(P2) {
    const X2 = {};
    return P2.filename !== void 0 && (X2.filename = P2.filename), P2.startedAt !== void 0 && (X2.startedAt = Math.round(P2.startedAt)), P2.endedAt !== void 0 && (X2.endedAt = Math.round(P2.endedAt)), P2.duration !== void 0 && (X2.duration = Math.round(P2.duration)), P2.size !== void 0 && (X2.size = Math.round(P2.size)), P2.location !== void 0 && (X2.location = P2.location), X2;
  }, fromPartial(P2) {
    var X2, ie2, Ee2, ue2, O2, j;
    const se2 = Q2();
    return se2.filename = (X2 = P2.filename) !== null && X2 !== void 0 ? X2 : "", se2.startedAt = (ie2 = P2.startedAt) !== null && ie2 !== void 0 ? ie2 : 0, se2.endedAt = (Ee2 = P2.endedAt) !== null && Ee2 !== void 0 ? Ee2 : 0, se2.duration = (ue2 = P2.duration) !== null && ue2 !== void 0 ? ue2 : 0, se2.size = (O2 = P2.size) !== null && O2 !== void 0 ? O2 : 0, se2.location = (j = P2.location) !== null && j !== void 0 ? j : "", se2;
  } };
  function Se2() {
    return { playlistName: "", duration: 0, size: 0, playlistLocation: "", segmentCount: 0, startedAt: 0, endedAt: 0 };
  }
  a92.SegmentsInfo = { encode(P2, X2 = l2.default.Writer.create()) {
    return P2.playlistName !== void 0 && P2.playlistName !== "" && X2.uint32(10).string(P2.playlistName), P2.duration !== void 0 && P2.duration !== 0 && X2.uint32(16).int64(P2.duration), P2.size !== void 0 && P2.size !== 0 && X2.uint32(24).int64(P2.size), P2.playlistLocation !== void 0 && P2.playlistLocation !== "" && X2.uint32(34).string(P2.playlistLocation), P2.segmentCount !== void 0 && P2.segmentCount !== 0 && X2.uint32(40).int64(P2.segmentCount), P2.startedAt !== void 0 && P2.startedAt !== 0 && X2.uint32(48).int64(P2.startedAt), P2.endedAt !== void 0 && P2.endedAt !== 0 && X2.uint32(56).int64(P2.endedAt), X2;
  }, decode(P2, X2) {
    const ie2 = P2 instanceof l2.default.Reader ? P2 : new l2.default.Reader(P2);
    let Ee2 = X2 === void 0 ? ie2.len : ie2.pos + X2;
    const ue2 = Se2();
    for (; ie2.pos < Ee2; ) {
      const O2 = ie2.uint32();
      switch (O2 >>> 3) {
        case 1:
          ue2.playlistName = ie2.string();
          break;
        case 2:
          ue2.duration = je2(ie2.int64());
          break;
        case 3:
          ue2.size = je2(ie2.int64());
          break;
        case 4:
          ue2.playlistLocation = ie2.string();
          break;
        case 5:
          ue2.segmentCount = je2(ie2.int64());
          break;
        case 6:
          ue2.startedAt = je2(ie2.int64());
          break;
        case 7:
          ue2.endedAt = je2(ie2.int64());
          break;
        default:
          ie2.skipType(O2 & 7);
          break;
      }
    }
    return ue2;
  }, fromJSON(P2) {
    return { playlistName: Oe2(P2.playlistName) ? String(P2.playlistName) : "", duration: Oe2(P2.duration) ? Number(P2.duration) : 0, size: Oe2(P2.size) ? Number(P2.size) : 0, playlistLocation: Oe2(P2.playlistLocation) ? String(P2.playlistLocation) : "", segmentCount: Oe2(P2.segmentCount) ? Number(P2.segmentCount) : 0, startedAt: Oe2(P2.startedAt) ? Number(P2.startedAt) : 0, endedAt: Oe2(P2.endedAt) ? Number(P2.endedAt) : 0 };
  }, toJSON(P2) {
    const X2 = {};
    return P2.playlistName !== void 0 && (X2.playlistName = P2.playlistName), P2.duration !== void 0 && (X2.duration = Math.round(P2.duration)), P2.size !== void 0 && (X2.size = Math.round(P2.size)), P2.playlistLocation !== void 0 && (X2.playlistLocation = P2.playlistLocation), P2.segmentCount !== void 0 && (X2.segmentCount = Math.round(P2.segmentCount)), P2.startedAt !== void 0 && (X2.startedAt = Math.round(P2.startedAt)), P2.endedAt !== void 0 && (X2.endedAt = Math.round(P2.endedAt)), X2;
  }, fromPartial(P2) {
    var X2, ie2, Ee2, ue2, O2, j, se2;
    const _e = Se2();
    return _e.playlistName = (X2 = P2.playlistName) !== null && X2 !== void 0 ? X2 : "", _e.duration = (ie2 = P2.duration) !== null && ie2 !== void 0 ? ie2 : 0, _e.size = (Ee2 = P2.size) !== null && Ee2 !== void 0 ? Ee2 : 0, _e.playlistLocation = (ue2 = P2.playlistLocation) !== null && ue2 !== void 0 ? ue2 : "", _e.segmentCount = (O2 = P2.segmentCount) !== null && O2 !== void 0 ? O2 : 0, _e.startedAt = (j = P2.startedAt) !== null && j !== void 0 ? j : 0, _e.endedAt = (se2 = P2.endedAt) !== null && se2 !== void 0 ? se2 : 0, _e;
  } };
  function me2() {
    return { filepath: "", disableManifest: false, s3: void 0, gcp: void 0, azure: void 0 };
  }
  a92.AutoTrackEgress = { encode(P2, X2 = l2.default.Writer.create()) {
    return P2.filepath !== void 0 && P2.filepath !== "" && X2.uint32(10).string(P2.filepath), P2.disableManifest === true && X2.uint32(40).bool(P2.disableManifest), P2.s3 !== void 0 && a92.S3Upload.encode(P2.s3, X2.uint32(18).fork()).ldelim(), P2.gcp !== void 0 && a92.GCPUpload.encode(P2.gcp, X2.uint32(26).fork()).ldelim(), P2.azure !== void 0 && a92.AzureBlobUpload.encode(P2.azure, X2.uint32(34).fork()).ldelim(), X2;
  }, decode(P2, X2) {
    const ie2 = P2 instanceof l2.default.Reader ? P2 : new l2.default.Reader(P2);
    let Ee2 = X2 === void 0 ? ie2.len : ie2.pos + X2;
    const ue2 = me2();
    for (; ie2.pos < Ee2; ) {
      const O2 = ie2.uint32();
      switch (O2 >>> 3) {
        case 1:
          ue2.filepath = ie2.string();
          break;
        case 5:
          ue2.disableManifest = ie2.bool();
          break;
        case 2:
          ue2.s3 = a92.S3Upload.decode(ie2, ie2.uint32());
          break;
        case 3:
          ue2.gcp = a92.GCPUpload.decode(ie2, ie2.uint32());
          break;
        case 4:
          ue2.azure = a92.AzureBlobUpload.decode(ie2, ie2.uint32());
          break;
        default:
          ie2.skipType(O2 & 7);
          break;
      }
    }
    return ue2;
  }, fromJSON(P2) {
    return { filepath: Oe2(P2.filepath) ? String(P2.filepath) : "", disableManifest: Oe2(P2.disableManifest) ? !!P2.disableManifest : false, s3: Oe2(P2.s3) ? a92.S3Upload.fromJSON(P2.s3) : void 0, gcp: Oe2(P2.gcp) ? a92.GCPUpload.fromJSON(P2.gcp) : void 0, azure: Oe2(P2.azure) ? a92.AzureBlobUpload.fromJSON(P2.azure) : void 0 };
  }, toJSON(P2) {
    const X2 = {};
    return P2.filepath !== void 0 && (X2.filepath = P2.filepath), P2.disableManifest !== void 0 && (X2.disableManifest = P2.disableManifest), P2.s3 !== void 0 && (X2.s3 = P2.s3 ? a92.S3Upload.toJSON(P2.s3) : void 0), P2.gcp !== void 0 && (X2.gcp = P2.gcp ? a92.GCPUpload.toJSON(P2.gcp) : void 0), P2.azure !== void 0 && (X2.azure = P2.azure ? a92.AzureBlobUpload.toJSON(P2.azure) : void 0), X2;
  }, fromPartial(P2) {
    var X2, ie2;
    const Ee2 = me2();
    return Ee2.filepath = (X2 = P2.filepath) !== null && X2 !== void 0 ? X2 : "", Ee2.disableManifest = (ie2 = P2.disableManifest) !== null && ie2 !== void 0 ? ie2 : false, Ee2.s3 = P2.s3 !== void 0 && P2.s3 !== null ? a92.S3Upload.fromPartial(P2.s3) : void 0, Ee2.gcp = P2.gcp !== void 0 && P2.gcp !== null ? a92.GCPUpload.fromPartial(P2.gcp) : void 0, Ee2.azure = P2.azure !== void 0 && P2.azure !== null ? a92.AzureBlobUpload.fromPartial(P2.azure) : void 0, Ee2;
  } };
  var Ie2 = (() => {
    if (typeof Ie2 < "u")
      return Ie2;
    if (typeof self < "u")
      return self;
    if (typeof window < "u")
      return window;
    if (typeof commonjsGlobal$1 < "u")
      return commonjsGlobal$1;
    throw "Unable to locate global object";
  })();
  function at(P2) {
    if (Ie2.Buffer)
      return Uint8Array.from(Ie2.Buffer.from(P2, "base64"));
    {
      const X2 = Ie2.atob(P2), ie2 = new Uint8Array(X2.length);
      for (let Ee2 = 0; Ee2 < X2.length; ++Ee2)
        ie2[Ee2] = X2.charCodeAt(Ee2);
      return ie2;
    }
  }
  function Ye2(P2) {
    if (Ie2.Buffer)
      return Ie2.Buffer.from(P2).toString("base64");
    {
      const X2 = [];
      return P2.forEach((ie2) => {
        X2.push(String.fromCharCode(ie2));
      }), Ie2.btoa(X2.join(""));
    }
  }
  function je2(P2) {
    if (P2.gt(Number.MAX_SAFE_INTEGER))
      throw new Ie2.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    return P2.toNumber();
  }
  l2.default.util.Long !== c.default && (l2.default.util.Long = c.default, l2.default.configure());
  function tt(P2) {
    return typeof P2 == "object" && P2 !== null;
  }
  function Oe2(P2) {
    return P2 != null;
  }
})(livekit_egress);
var ServiceBase$1 = {};
Object.defineProperty(ServiceBase$1, "__esModule", { value: true });
const AccessToken_1$1 = AccessToken$1;
class ServiceBase {
  /**
  * @param apiKey API Key.
  * @param secret API Secret.
  * @param ttl token TTL
  */
  constructor(u2, c, l2) {
    this.apiKey = u2, this.secret = c, this.ttl = l2 || "10m";
  }
  authHeader(u2) {
    const c = new AccessToken_1$1.AccessToken(this.apiKey, this.secret, { ttl: this.ttl });
    return c.addGrant(u2), { Authorization: `Bearer ${c.toJwt()}` };
  }
}
ServiceBase$1.default = ServiceBase;
var TwirpRPC = {}, axios$2 = { exports: {} }, bind$2 = function a51(u2, c) {
  return function() {
    for (var v2 = new Array(arguments.length), S2 = 0; S2 < v2.length; S2++)
      v2[S2] = arguments[S2];
    return u2.apply(c, v2);
  };
}, bind$1 = bind$2, toString = Object.prototype.toString;
function isArray$1(a92) {
  return toString.call(a92) === "[object Array]";
}
function isUndefined(a92) {
  return typeof a92 > "u";
}
function isBuffer(a92) {
  return a92 !== null && !isUndefined(a92) && a92.constructor !== null && !isUndefined(a92.constructor) && typeof a92.constructor.isBuffer == "function" && a92.constructor.isBuffer(a92);
}
function isArrayBuffer(a92) {
  return toString.call(a92) === "[object ArrayBuffer]";
}
function isFormData(a92) {
  return typeof FormData < "u" && a92 instanceof FormData;
}
function isArrayBufferView(a92) {
  var u2;
  return typeof ArrayBuffer < "u" && ArrayBuffer.isView ? u2 = ArrayBuffer.isView(a92) : u2 = a92 && a92.buffer && a92.buffer instanceof ArrayBuffer, u2;
}
function isString(a92) {
  return typeof a92 == "string";
}
function isNumber(a92) {
  return typeof a92 == "number";
}
function isObject$3(a92) {
  return a92 !== null && typeof a92 == "object";
}
function isPlainObject(a92) {
  if (toString.call(a92) !== "[object Object]")
    return false;
  var u2 = Object.getPrototypeOf(a92);
  return u2 === null || u2 === Object.prototype;
}
function isDate(a92) {
  return toString.call(a92) === "[object Date]";
}
function isFile(a92) {
  return toString.call(a92) === "[object File]";
}
function isBlob(a92) {
  return toString.call(a92) === "[object Blob]";
}
function isFunction(a92) {
  return toString.call(a92) === "[object Function]";
}
function isStream(a92) {
  return isObject$3(a92) && isFunction(a92.pipe);
}
function isURLSearchParams(a92) {
  return typeof URLSearchParams < "u" && a92 instanceof URLSearchParams;
}
function trim$1(a92) {
  return a92.trim ? a92.trim() : a92.replace(/^\s+|\s+$/g, "");
}
function isStandardBrowserEnv() {
  return typeof navigator < "u" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS") ? false : typeof window < "u" && typeof document < "u";
}
function forEach(a92, u2) {
  if (!(a92 === null || typeof a92 > "u"))
    if (typeof a92 != "object" && (a92 = [a92]), isArray$1(a92))
      for (var c = 0, l2 = a92.length; c < l2; c++)
        u2.call(null, a92[c], c, a92);
    else
      for (var v2 in a92)
        Object.prototype.hasOwnProperty.call(a92, v2) && u2.call(null, a92[v2], v2, a92);
}
function merge() {
  var a92 = {};
  function u2(v2, S2) {
    isPlainObject(a92[S2]) && isPlainObject(v2) ? a92[S2] = merge(a92[S2], v2) : isPlainObject(v2) ? a92[S2] = merge({}, v2) : isArray$1(v2) ? a92[S2] = v2.slice() : a92[S2] = v2;
  }
  for (var c = 0, l2 = arguments.length; c < l2; c++)
    forEach(arguments[c], u2);
  return a92;
}
function extend(a92, u2, c) {
  return forEach(u2, function(v2, S2) {
    c && typeof v2 == "function" ? a92[S2] = bind$1(v2, c) : a92[S2] = v2;
  }), a92;
}
function stripBOM(a92) {
  return a92.charCodeAt(0) === 65279 && (a92 = a92.slice(1)), a92;
}
var utils$9 = { isArray: isArray$1, isArrayBuffer, isBuffer, isFormData, isArrayBufferView, isString, isNumber, isObject: isObject$3, isPlainObject, isUndefined, isDate, isFile, isBlob, isFunction, isStream, isURLSearchParams, isStandardBrowserEnv, forEach, merge, extend, trim: trim$1, stripBOM }, utils$8 = utils$9;
function encode(a92) {
  return encodeURIComponent(a92).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
}
var buildURL$1 = function a52(u2, c, l2) {
  if (!c)
    return u2;
  var v2;
  if (l2)
    v2 = l2(c);
  else if (utils$8.isURLSearchParams(c))
    v2 = c.toString();
  else {
    var S2 = [];
    utils$8.forEach(c, function(_, k) {
      _ === null || typeof _ > "u" || (utils$8.isArray(_) ? k = k + "[]" : _ = [_], utils$8.forEach(_, function(M2) {
        utils$8.isDate(M2) ? M2 = M2.toISOString() : utils$8.isObject(M2) && (M2 = JSON.stringify(M2)), S2.push(encode(k) + "=" + encode(M2));
      }));
    }), v2 = S2.join("&");
  }
  if (v2) {
    var g2 = u2.indexOf("#");
    g2 !== -1 && (u2 = u2.slice(0, g2)), u2 += (u2.indexOf("?") === -1 ? "?" : "&") + v2;
  }
  return u2;
}, utils$7 = utils$9;
function InterceptorManager$1() {
  this.handlers = [];
}
InterceptorManager$1.prototype.use = function a53(u2, c, l2) {
  return this.handlers.push({ fulfilled: u2, rejected: c, synchronous: l2 ? l2.synchronous : false, runWhen: l2 ? l2.runWhen : null }), this.handlers.length - 1;
};
InterceptorManager$1.prototype.eject = function a54(u2) {
  this.handlers[u2] && (this.handlers[u2] = null);
};
InterceptorManager$1.prototype.forEach = function a55(u2) {
  utils$7.forEach(this.handlers, function(l2) {
    l2 !== null && u2(l2);
  });
};
var InterceptorManager_1 = InterceptorManager$1, utils$6 = utils$9, normalizeHeaderName$1 = function a56(u2, c) {
  utils$6.forEach(u2, function(v2, S2) {
    S2 !== c && S2.toUpperCase() === c.toUpperCase() && (u2[c] = v2, delete u2[S2]);
  });
}, enhanceError$1 = function a57(u2, c, l2, v2, S2) {
  return u2.config = c, l2 && (u2.code = l2), u2.request = v2, u2.response = S2, u2.isAxiosError = true, u2.toJSON = function() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code
    };
  }, u2;
}, createError, hasRequiredCreateError;
function requireCreateError() {
  if (hasRequiredCreateError)
    return createError;
  hasRequiredCreateError = 1;
  var a92 = enhanceError$1;
  return createError = function(c, l2, v2, S2, g2) {
    var E2 = new Error(c);
    return a92(E2, l2, v2, S2, g2);
  }, createError;
}
var settle, hasRequiredSettle;
function requireSettle() {
  if (hasRequiredSettle)
    return settle;
  hasRequiredSettle = 1;
  var a92 = requireCreateError();
  return settle = function(c, l2, v2) {
    var S2 = v2.config.validateStatus;
    !v2.status || !S2 || S2(v2.status) ? c(v2) : l2(a92("Request failed with status code " + v2.status, v2.config, null, v2.request, v2));
  }, settle;
}
var cookies, hasRequiredCookies;
function requireCookies() {
  if (hasRequiredCookies)
    return cookies;
  hasRequiredCookies = 1;
  var a92 = utils$9;
  return cookies = a92.isStandardBrowserEnv() ? (
    // Standard browser envs support document.cookie
    /* @__PURE__ */ function() {
      return { write: function(l2, v2, S2, g2, E2, _) {
        var k = [];
        k.push(l2 + "=" + encodeURIComponent(v2)), a92.isNumber(S2) && k.push("expires=" + new Date(S2).toGMTString()), a92.isString(g2) && k.push("path=" + g2), a92.isString(E2) && k.push("domain=" + E2), _ === true && k.push("secure"), document.cookie = k.join("; ");
      }, read: function(l2) {
        var v2 = document.cookie.match(new RegExp("(^|;\\s*)(" + l2 + ")=([^;]*)"));
        return v2 ? decodeURIComponent(v2[3]) : null;
      }, remove: function(l2) {
        this.write(l2, "", Date.now() - 864e5);
      } };
    }()
  ) : (
    // Non standard browser env (web workers, react-native) lack needed support.
    /* @__PURE__ */ function() {
      return { write: function() {
      }, read: function() {
        return null;
      }, remove: function() {
      } };
    }()
  ), cookies;
}
var isAbsoluteURL, hasRequiredIsAbsoluteURL;
function requireIsAbsoluteURL() {
  return hasRequiredIsAbsoluteURL || (hasRequiredIsAbsoluteURL = 1, isAbsoluteURL = function(u2) {
    return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(u2);
  }), isAbsoluteURL;
}
var combineURLs, hasRequiredCombineURLs;
function requireCombineURLs() {
  return hasRequiredCombineURLs || (hasRequiredCombineURLs = 1, combineURLs = function(u2, c) {
    return c ? u2.replace(/\/+$/, "") + "/" + c.replace(/^\/+/, "") : u2;
  }), combineURLs;
}
var buildFullPath, hasRequiredBuildFullPath;
function requireBuildFullPath() {
  if (hasRequiredBuildFullPath)
    return buildFullPath;
  hasRequiredBuildFullPath = 1;
  var a92 = requireIsAbsoluteURL(), u2 = requireCombineURLs();
  return buildFullPath = function(l2, v2) {
    return l2 && !a92(v2) ? u2(l2, v2) : v2;
  }, buildFullPath;
}
var parseHeaders, hasRequiredParseHeaders;
function requireParseHeaders() {
  if (hasRequiredParseHeaders)
    return parseHeaders;
  hasRequiredParseHeaders = 1;
  var a92 = utils$9, u2 = ["age", "authorization", "content-length", "content-type", "etag", "expires", "from", "host", "if-modified-since", "if-unmodified-since", "last-modified", "location", "max-forwards", "proxy-authorization", "referer", "retry-after", "user-agent"];
  return parseHeaders = function(l2) {
    var v2 = {}, S2, g2, E2;
    return l2 && a92.forEach(l2.split(`
`), function(k) {
      if (E2 = k.indexOf(":"), S2 = a92.trim(k.substr(0, E2)).toLowerCase(), g2 = a92.trim(k.substr(E2 + 1)), S2) {
        if (v2[S2] && u2.indexOf(S2) >= 0)
          return;
        S2 === "set-cookie" ? v2[S2] = (v2[S2] ? v2[S2] : []).concat([g2]) : v2[S2] = v2[S2] ? v2[S2] + ", " + g2 : g2;
      }
    }), v2;
  }, parseHeaders;
}
var isURLSameOrigin, hasRequiredIsURLSameOrigin;
function requireIsURLSameOrigin() {
  if (hasRequiredIsURLSameOrigin)
    return isURLSameOrigin;
  hasRequiredIsURLSameOrigin = 1;
  var a92 = utils$9;
  return isURLSameOrigin = a92.isStandardBrowserEnv() ? (
    // Standard browser envs have full support of the APIs needed to test
    // whether the request URL is of the same origin as current location.
    function() {
      var c = /(msie|trident)/i.test(navigator.userAgent), l2 = document.createElement("a"), v2;
      function S2(g2) {
        var E2 = g2;
        return c && (l2.setAttribute("href", E2), E2 = l2.href), l2.setAttribute("href", E2), { href: l2.href, protocol: l2.protocol ? l2.protocol.replace(/:$/, "") : "", host: l2.host, search: l2.search ? l2.search.replace(/^\?/, "") : "", hash: l2.hash ? l2.hash.replace(/^#/, "") : "", hostname: l2.hostname, port: l2.port, pathname: l2.pathname.charAt(0) === "/" ? l2.pathname : "/" + l2.pathname };
      }
      return v2 = S2(window.location.href), function(E2) {
        var _ = a92.isString(E2) ? S2(E2) : E2;
        return _.protocol === v2.protocol && _.host === v2.host;
      };
    }()
  ) : (
    // Non standard browser envs (web workers, react-native) lack needed support.
    /* @__PURE__ */ function() {
      return function() {
        return true;
      };
    }()
  ), isURLSameOrigin;
}
var xhr, hasRequiredXhr;
function requireXhr() {
  if (hasRequiredXhr)
    return xhr;
  hasRequiredXhr = 1;
  var a92 = utils$9, u2 = requireSettle(), c = requireCookies(), l2 = buildURL$1, v2 = requireBuildFullPath(), S2 = requireParseHeaders(), g2 = requireIsURLSameOrigin(), E2 = requireCreateError();
  return xhr = function(k) {
    return new Promise(function(M2, $) {
      var J2 = k.data, V2 = k.headers, q2 = k.responseType;
      a92.isFormData(J2) && delete V2["Content-Type"];
      var G2 = new XMLHttpRequest();
      if (k.auth) {
        var H2 = k.auth.username || "", B2 = k.auth.password ? unescape(encodeURIComponent(k.auth.password)) : "";
        V2.Authorization = "Basic " + btoa(H2 + ":" + B2);
      }
      var Y2 = v2(k.baseURL, k.url);
      G2.open(k.method.toUpperCase(), l2(Y2, k.params, k.paramsSerializer), true), G2.timeout = k.timeout;
      function ne2() {
        if (G2) {
          var re2 = "getAllResponseHeaders" in G2 ? S2(G2.getAllResponseHeaders()) : null, oe2 = !q2 || q2 === "text" || q2 === "json" ? G2.responseText : G2.response, de2 = { data: oe2, status: G2.status, statusText: G2.statusText, headers: re2, config: k, request: G2 };
          u2(M2, $, de2), G2 = null;
        }
      }
      if ("onloadend" in G2 ? G2.onloadend = ne2 : G2.onreadystatechange = function() {
        !G2 || G2.readyState !== 4 || G2.status === 0 && !(G2.responseURL && G2.responseURL.indexOf("file:") === 0) || setTimeout(ne2);
      }, G2.onabort = function() {
        G2 && ($(E2("Request aborted", k, "ECONNABORTED", G2)), G2 = null);
      }, G2.onerror = function() {
        $(E2("Network Error", k, null, G2)), G2 = null;
      }, G2.ontimeout = function() {
        var oe2 = "timeout of " + k.timeout + "ms exceeded";
        k.timeoutErrorMessage && (oe2 = k.timeoutErrorMessage), $(E2(oe2, k, k.transitional && k.transitional.clarifyTimeoutError ? "ETIMEDOUT" : "ECONNABORTED", G2)), G2 = null;
      }, a92.isStandardBrowserEnv()) {
        var Z2 = (k.withCredentials || g2(Y2)) && k.xsrfCookieName ? c.read(k.xsrfCookieName) : void 0;
        Z2 && (V2[k.xsrfHeaderName] = Z2);
      }
      "setRequestHeader" in G2 && a92.forEach(V2, function(oe2, de2) {
        typeof J2 > "u" && de2.toLowerCase() === "content-type" ? delete V2[de2] : G2.setRequestHeader(de2, oe2);
      }), a92.isUndefined(k.withCredentials) || (G2.withCredentials = !!k.withCredentials), q2 && q2 !== "json" && (G2.responseType = k.responseType), typeof k.onDownloadProgress == "function" && G2.addEventListener("progress", k.onDownloadProgress), typeof k.onUploadProgress == "function" && G2.upload && G2.upload.addEventListener("progress", k.onUploadProgress), k.cancelToken && k.cancelToken.promise.then(function(oe2) {
        G2 && (G2.abort(), $(oe2), G2 = null);
      }), J2 || (J2 = null), G2.send(J2);
    });
  }, xhr;
}
var utils$5 = utils$9, normalizeHeaderName = normalizeHeaderName$1, enhanceError = enhanceError$1, DEFAULT_CONTENT_TYPE = { "Content-Type": "application/x-www-form-urlencoded" };
function setContentTypeIfUnset(a92, u2) {
  !utils$5.isUndefined(a92) && utils$5.isUndefined(a92["Content-Type"]) && (a92["Content-Type"] = u2);
}
function getDefaultAdapter() {
  var a92;
  return (typeof XMLHttpRequest < "u" || typeof process < "u" && Object.prototype.toString.call(process) === "[object process]") && (a92 = requireXhr()), a92;
}
function stringifySafely(a92, u2, c) {
  if (utils$5.isString(a92))
    try {
      return (u2 || JSON.parse)(a92), utils$5.trim(a92);
    } catch (l2) {
      if (l2.name !== "SyntaxError")
        throw l2;
    }
  return (c || JSON.stringify)(a92);
}
var defaults$3 = {
  transitional: { silentJSONParsing: true, forcedJSONParsing: true, clarifyTimeoutError: false },
  adapter: getDefaultAdapter(),
  transformRequest: [function a58(u2, c) {
    return normalizeHeaderName(c, "Accept"), normalizeHeaderName(c, "Content-Type"), utils$5.isFormData(u2) || utils$5.isArrayBuffer(u2) || utils$5.isBuffer(u2) || utils$5.isStream(u2) || utils$5.isFile(u2) || utils$5.isBlob(u2) ? u2 : utils$5.isArrayBufferView(u2) ? u2.buffer : utils$5.isURLSearchParams(u2) ? (setContentTypeIfUnset(c, "application/x-www-form-urlencoded;charset=utf-8"), u2.toString()) : utils$5.isObject(u2) || c && c["Content-Type"] === "application/json" ? (setContentTypeIfUnset(c, "application/json"), stringifySafely(u2)) : u2;
  }],
  transformResponse: [function a59(u2) {
    var c = this.transitional, l2 = c && c.silentJSONParsing, v2 = c && c.forcedJSONParsing, S2 = !l2 && this.responseType === "json";
    if (S2 || v2 && utils$5.isString(u2) && u2.length)
      try {
        return JSON.parse(u2);
      } catch (g2) {
        if (S2)
          throw g2.name === "SyntaxError" ? enhanceError(g2, this, "E_JSON_PARSE") : g2;
      }
    return u2;
  }],
  /**
  * A timeout in milliseconds to abort a request. If set to 0 (default) a
  * timeout is not created.
  */
  timeout: 0,
  xsrfCookieName: "XSRF-TOKEN",
  xsrfHeaderName: "X-XSRF-TOKEN",
  maxContentLength: -1,
  maxBodyLength: -1,
  validateStatus: function a60(u2) {
    return u2 >= 200 && u2 < 300;
  }
};
defaults$3.headers = { common: { Accept: "application/json, text/plain, */*" } };
utils$5.forEach(["delete", "get", "head"], function a61(u2) {
  defaults$3.headers[u2] = {};
});
utils$5.forEach(["post", "put", "patch"], function a62(u2) {
  defaults$3.headers[u2] = utils$5.merge(DEFAULT_CONTENT_TYPE);
});
var defaults_1 = defaults$3, utils$4 = utils$9, defaults$2 = defaults_1, transformData$1 = function a63(u2, c, l2) {
  var v2 = this || defaults$2;
  return utils$4.forEach(l2, function(g2) {
    u2 = g2.call(v2, u2, c);
  }), u2;
}, isCancel$1, hasRequiredIsCancel;
function requireIsCancel() {
  return hasRequiredIsCancel || (hasRequiredIsCancel = 1, isCancel$1 = function(u2) {
    return !!(u2 && u2.__CANCEL__);
  }), isCancel$1;
}
var utils$3 = utils$9, transformData = transformData$1, isCancel = requireIsCancel(), defaults$1 = defaults_1;
function throwIfCancellationRequested(a92) {
  a92.cancelToken && a92.cancelToken.throwIfRequested();
}
var dispatchRequest$1 = function a64(u2) {
  throwIfCancellationRequested(u2), u2.headers = u2.headers || {}, u2.data = transformData.call(u2, u2.data, u2.headers, u2.transformRequest), u2.headers = utils$3.merge(u2.headers.common || {}, u2.headers[u2.method] || {}, u2.headers), utils$3.forEach(["delete", "get", "head", "post", "put", "patch", "common"], function(v2) {
    delete u2.headers[v2];
  });
  var c = u2.adapter || defaults$1.adapter;
  return c(u2).then(function(v2) {
    return throwIfCancellationRequested(u2), v2.data = transformData.call(u2, v2.data, v2.headers, u2.transformResponse), v2;
  }, function(v2) {
    return isCancel(v2) || (throwIfCancellationRequested(u2), v2 && v2.response && (v2.response.data = transformData.call(u2, v2.response.data, v2.response.headers, u2.transformResponse))), Promise.reject(v2);
  });
}, utils$2 = utils$9, mergeConfig$2 = function a65(u2, c) {
  c = c || {};
  var l2 = {}, v2 = ["url", "method", "data"], S2 = ["headers", "auth", "proxy", "params"], g2 = ["baseURL", "transformRequest", "transformResponse", "paramsSerializer", "timeout", "timeoutMessage", "withCredentials", "adapter", "responseType", "xsrfCookieName", "xsrfHeaderName", "onUploadProgress", "onDownloadProgress", "decompress", "maxContentLength", "maxBodyLength", "maxRedirects", "transport", "httpAgent", "httpsAgent", "cancelToken", "socketPath", "responseEncoding"], E2 = ["validateStatus"];
  function _($, J2) {
    return utils$2.isPlainObject($) && utils$2.isPlainObject(J2) ? utils$2.merge($, J2) : utils$2.isPlainObject(J2) ? utils$2.merge({}, J2) : utils$2.isArray(J2) ? J2.slice() : J2;
  }
  function k($) {
    utils$2.isUndefined(c[$]) ? utils$2.isUndefined(u2[$]) || (l2[$] = _(void 0, u2[$])) : l2[$] = _(u2[$], c[$]);
  }
  utils$2.forEach(v2, function(J2) {
    utils$2.isUndefined(c[J2]) || (l2[J2] = _(void 0, c[J2]));
  }), utils$2.forEach(S2, k), utils$2.forEach(g2, function(J2) {
    utils$2.isUndefined(c[J2]) ? utils$2.isUndefined(u2[J2]) || (l2[J2] = _(void 0, u2[J2])) : l2[J2] = _(void 0, c[J2]);
  }), utils$2.forEach(E2, function(J2) {
    J2 in c ? l2[J2] = _(u2[J2], c[J2]) : J2 in u2 && (l2[J2] = _(void 0, u2[J2]));
  });
  var L2 = v2.concat(S2).concat(g2).concat(E2), M2 = Object.keys(u2).concat(Object.keys(c)).filter(function(J2) {
    return L2.indexOf(J2) === -1;
  });
  return utils$2.forEach(M2, k), l2;
};
const name = "axios", version$2 = "0.21.4", description = "Promise based HTTP client for the browser and node.js", main = "index.js", scripts = { test: "grunt test", start: "node ./sandbox/server.js", build: "NODE_ENV=production grunt build", preversion: "npm test", version: "npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json", postversion: "git push && git push --tags", examples: "node ./examples/server.js", coveralls: "cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js", fix: "eslint --fix lib/**/*.js" }, repository = { type: "git", url: "https://github.com/axios/axios.git" }, keywords = ["xhr", "http", "ajax", "promise", "node"], author = "Matt Zabriskie", license = "MIT", bugs = { url: "https://github.com/axios/axios/issues" }, homepage = "https://axios-http.com", devDependencies = { coveralls: "^3.0.0", "es6-promise": "^4.2.4", grunt: "^1.3.0", "grunt-banner": "^0.6.0", "grunt-cli": "^1.2.0", "grunt-contrib-clean": "^1.1.0", "grunt-contrib-watch": "^1.0.0", "grunt-eslint": "^23.0.0", "grunt-karma": "^4.0.0", "grunt-mocha-test": "^0.13.3", "grunt-ts": "^6.0.0-beta.19", "grunt-webpack": "^4.0.2", "istanbul-instrumenter-loader": "^1.0.0", "jasmine-core": "^2.4.1", karma: "^6.3.2", "karma-chrome-launcher": "^3.1.0", "karma-firefox-launcher": "^2.1.0", "karma-jasmine": "^1.1.1", "karma-jasmine-ajax": "^0.1.13", "karma-safari-launcher": "^1.0.0", "karma-sauce-launcher": "^4.3.6", "karma-sinon": "^1.0.5", "karma-sourcemap-loader": "^0.3.8", "karma-webpack": "^4.0.2", "load-grunt-tasks": "^3.5.2", minimist: "^1.2.0", mocha: "^8.2.1", sinon: "^4.5.0", "terser-webpack-plugin": "^4.2.3", typescript: "^4.0.5", "url-search-params": "^0.10.0", webpack: "^4.44.2", "webpack-dev-server": "^3.11.0" }, browser = { "./lib/adapters/http.js": "./lib/adapters/xhr.js" }, jsdelivr = "dist/axios.min.js", unpkg = "dist/axios.min.js", typings = "./index.d.ts", dependencies = { "follow-redirects": "^1.14.0" }, bundlesize = [{ path: "./dist/axios.min.js", threshold: "5kB" }], require$$0 = { name, version: version$2, description, main, scripts, repository, keywords, author, license, bugs, homepage, devDependencies, browser, jsdelivr, unpkg, typings, dependencies, bundlesize };
var pkg = require$$0, validators$1 = {};
["object", "boolean", "number", "function", "string", "symbol"].forEach(function(a92, u2) {
  validators$1[a92] = function(l2) {
    return typeof l2 === a92 || "a" + (u2 < 1 ? "n " : " ") + a92;
  };
});
var deprecatedWarnings = {}, currentVerArr = pkg.version.split(".");
function isOlderVersion(a92, u2) {
  for (var c = u2 ? u2.split(".") : currentVerArr, l2 = a92.split("."), v2 = 0; v2 < 3; v2++) {
    if (c[v2] > l2[v2])
      return true;
    if (c[v2] < l2[v2])
      return false;
  }
  return false;
}
validators$1.transitional = function a66(u2, c, l2) {
  var v2 = c && isOlderVersion(c);
  function S2(g2, E2) {
    return "[Axios v" + pkg.version + "] Transitional option '" + g2 + "'" + E2 + (l2 ? ". " + l2 : "");
  }
  return function(g2, E2, _) {
    if (u2 === false)
      throw new Error(S2(E2, " has been removed in " + c));
    return v2 && !deprecatedWarnings[E2] && (deprecatedWarnings[E2] = true, console.warn(S2(E2, " has been deprecated since v" + c + " and will be removed in the near future"))), u2 ? u2(g2, E2, _) : true;
  };
};
function assertOptions(a92, u2, c) {
  if (typeof a92 != "object")
    throw new TypeError("options must be an object");
  for (var l2 = Object.keys(a92), v2 = l2.length; v2-- > 0; ) {
    var S2 = l2[v2], g2 = u2[S2];
    if (g2) {
      var E2 = a92[S2], _ = E2 === void 0 || g2(E2, S2, a92);
      if (_ !== true)
        throw new TypeError("option " + S2 + " must be " + _);
      continue;
    }
    if (c !== true)
      throw Error("Unknown option " + S2);
  }
}
var validator$1 = { isOlderVersion, assertOptions, validators: validators$1 }, utils$1 = utils$9, buildURL = buildURL$1, InterceptorManager = InterceptorManager_1, dispatchRequest = dispatchRequest$1, mergeConfig$1 = mergeConfig$2, validator = validator$1, validators = validator.validators;
function Axios$1(a92) {
  this.defaults = a92, this.interceptors = { request: new InterceptorManager(), response: new InterceptorManager() };
}
Axios$1.prototype.request = function a67(u2) {
  typeof u2 == "string" ? (u2 = arguments[1] || {}, u2.url = arguments[0]) : u2 = u2 || {}, u2 = mergeConfig$1(this.defaults, u2), u2.method ? u2.method = u2.method.toLowerCase() : this.defaults.method ? u2.method = this.defaults.method.toLowerCase() : u2.method = "get";
  var c = u2.transitional;
  c !== void 0 && validator.assertOptions(c, { silentJSONParsing: validators.transitional(validators.boolean, "1.0.0"), forcedJSONParsing: validators.transitional(validators.boolean, "1.0.0"), clarifyTimeoutError: validators.transitional(validators.boolean, "1.0.0") }, false);
  var l2 = [], v2 = true;
  this.interceptors.request.forEach(function($) {
    typeof $.runWhen == "function" && $.runWhen(u2) === false || (v2 = v2 && $.synchronous, l2.unshift($.fulfilled, $.rejected));
  });
  var S2 = [];
  this.interceptors.response.forEach(function($) {
    S2.push($.fulfilled, $.rejected);
  });
  var g2;
  if (!v2) {
    var E2 = [dispatchRequest, void 0];
    for (Array.prototype.unshift.apply(E2, l2), E2 = E2.concat(S2), g2 = Promise.resolve(u2); E2.length; )
      g2 = g2.then(E2.shift(), E2.shift());
    return g2;
  }
  for (var _ = u2; l2.length; ) {
    var k = l2.shift(), L2 = l2.shift();
    try {
      _ = k(_);
    } catch (M2) {
      L2(M2);
      break;
    }
  }
  try {
    g2 = dispatchRequest(_);
  } catch (M2) {
    return Promise.reject(M2);
  }
  for (; S2.length; )
    g2 = g2.then(S2.shift(), S2.shift());
  return g2;
};
Axios$1.prototype.getUri = function a68(u2) {
  return u2 = mergeConfig$1(this.defaults, u2), buildURL(u2.url, u2.params, u2.paramsSerializer).replace(/^\?/, "");
};
utils$1.forEach(["delete", "get", "head", "options"], function a69(u2) {
  Axios$1.prototype[u2] = function(c, l2) {
    return this.request(mergeConfig$1(l2 || {}, { method: u2, url: c, data: (l2 || {}).data }));
  };
});
utils$1.forEach(["post", "put", "patch"], function a70(u2) {
  Axios$1.prototype[u2] = function(c, l2, v2) {
    return this.request(mergeConfig$1(v2 || {}, { method: u2, url: c, data: l2 }));
  };
});
var Axios_1 = Axios$1, Cancel_1, hasRequiredCancel;
function requireCancel() {
  if (hasRequiredCancel)
    return Cancel_1;
  hasRequiredCancel = 1;
  function a92(u2) {
    this.message = u2;
  }
  return a92.prototype.toString = function() {
    return "Cancel" + (this.message ? ": " + this.message : "");
  }, a92.prototype.__CANCEL__ = true, Cancel_1 = a92, Cancel_1;
}
var CancelToken_1, hasRequiredCancelToken;
function requireCancelToken() {
  if (hasRequiredCancelToken)
    return CancelToken_1;
  hasRequiredCancelToken = 1;
  var a92 = requireCancel();
  function u2(c) {
    if (typeof c != "function")
      throw new TypeError("executor must be a function.");
    var l2;
    this.promise = new Promise(function(g2) {
      l2 = g2;
    });
    var v2 = this;
    c(function(g2) {
      v2.reason || (v2.reason = new a92(g2), l2(v2.reason));
    });
  }
  return u2.prototype.throwIfRequested = function() {
    if (this.reason)
      throw this.reason;
  }, u2.source = function() {
    var l2, v2 = new u2(function(g2) {
      l2 = g2;
    });
    return { token: v2, cancel: l2 };
  }, CancelToken_1 = u2, CancelToken_1;
}
var spread, hasRequiredSpread;
function requireSpread() {
  return hasRequiredSpread || (hasRequiredSpread = 1, spread = function(u2) {
    return function(l2) {
      return u2.apply(null, l2);
    };
  }), spread;
}
var isAxiosError, hasRequiredIsAxiosError;
function requireIsAxiosError() {
  return hasRequiredIsAxiosError || (hasRequiredIsAxiosError = 1, isAxiosError = function(u2) {
    return typeof u2 == "object" && u2.isAxiosError === true;
  }), isAxiosError;
}
var utils = utils$9, bind = bind$2, Axios = Axios_1, mergeConfig = mergeConfig$2, defaults = defaults_1;
function createInstance(a92) {
  var u2 = new Axios(a92), c = bind(Axios.prototype.request, u2);
  return utils.extend(c, Axios.prototype, u2), utils.extend(c, u2), c;
}
var axios$1 = createInstance(defaults);
axios$1.Axios = Axios;
axios$1.create = function a71(u2) {
  return createInstance(mergeConfig(axios$1.defaults, u2));
};
axios$1.Cancel = requireCancel();
axios$1.CancelToken = requireCancelToken();
axios$1.isCancel = requireIsCancel();
axios$1.all = function a72(u2) {
  return Promise.all(u2);
};
axios$1.spread = requireSpread();
axios$1.isAxiosError = requireIsAxiosError();
axios$2.exports = axios$1;
axios$2.exports.default = axios$1;
var axiosExports = axios$2.exports, axios = axiosExports, mapObj$1 = { exports: {} };
const isObject$2 = (a92) => typeof a92 == "object" && a92 !== null, mapObjectSkip = Symbol("skip"), isObjectCustom = (a92) => isObject$2(a92) && !(a92 instanceof RegExp) && !(a92 instanceof Error) && !(a92 instanceof Date), mapObject = (a92, u2, c, l2 = /* @__PURE__ */ new WeakMap()) => {
  if (c = { deep: false, target: {}, ...c }, l2.has(a92))
    return l2.get(a92);
  l2.set(a92, c.target);
  const { target: v2 } = c;
  delete c.target;
  const S2 = (g2) => g2.map((E2) => isObjectCustom(E2) ? mapObject(E2, u2, c, l2) : E2);
  if (Array.isArray(a92))
    return S2(a92);
  for (const [g2, E2] of Object.entries(a92)) {
    const _ = u2(g2, E2, a92);
    if (_ === mapObjectSkip)
      continue;
    let [k, L2, { shouldRecurse: M2 = true } = {}] = _;
    k !== "__proto__" && (c.deep && M2 && isObjectCustom(L2) && (L2 = Array.isArray(L2) ? S2(L2) : mapObject(L2, u2, c, l2)), v2[k] = L2);
  }
  return v2;
};
mapObj$1.exports = (a92, u2, c) => {
  if (!isObject$2(a92))
    throw new TypeError(`Expected an object, got \`${a92}\` (${typeof a92})`);
  return mapObject(a92, u2, c);
};
mapObj$1.exports.mapObjectSkip = mapObjectSkip;
var mapObjExports = mapObj$1.exports, camelcase = { exports: {} };
const UPPERCASE = /[\p{Lu}]/u, LOWERCASE = /[\p{Ll}]/u, LEADING_CAPITAL = /^[\p{Lu}](?![\p{Lu}])/gu, IDENTIFIER = /([\p{Alpha}\p{N}_]|$)/u, SEPARATORS = /[_.\- ]+/, LEADING_SEPARATORS = new RegExp("^" + SEPARATORS.source), SEPARATORS_AND_IDENTIFIER = new RegExp(SEPARATORS.source + IDENTIFIER.source, "gu"), NUMBERS_AND_IDENTIFIER = new RegExp("\\d+" + IDENTIFIER.source, "gu"), preserveCamelCase = (a92, u2, c) => {
  let l2 = false, v2 = false, S2 = false;
  for (let g2 = 0; g2 < a92.length; g2++) {
    const E2 = a92[g2];
    l2 && UPPERCASE.test(E2) ? (a92 = a92.slice(0, g2) + "-" + a92.slice(g2), l2 = false, S2 = v2, v2 = true, g2++) : v2 && S2 && LOWERCASE.test(E2) ? (a92 = a92.slice(0, g2 - 1) + "-" + a92.slice(g2 - 1), S2 = v2, v2 = false, l2 = true) : (l2 = u2(E2) === E2 && c(E2) !== E2, S2 = v2, v2 = c(E2) === E2 && u2(E2) !== E2);
  }
  return a92;
}, preserveConsecutiveUppercase = (a92, u2) => (LEADING_CAPITAL.lastIndex = 0, a92.replace(LEADING_CAPITAL, (c) => u2(c))), postProcess = (a92, u2) => (SEPARATORS_AND_IDENTIFIER.lastIndex = 0, NUMBERS_AND_IDENTIFIER.lastIndex = 0, a92.replace(SEPARATORS_AND_IDENTIFIER, (c, l2) => u2(l2)).replace(NUMBERS_AND_IDENTIFIER, (c) => u2(c))), camelCase$1 = (a92, u2) => {
  if (!(typeof a92 == "string" || Array.isArray(a92)))
    throw new TypeError("Expected the input to be `string | string[]`");
  if (u2 = { pascalCase: false, preserveConsecutiveUppercase: false, ...u2 }, Array.isArray(a92) ? a92 = a92.map((S2) => S2.trim()).filter((S2) => S2.length).join("-") : a92 = a92.trim(), a92.length === 0)
    return "";
  const c = u2.locale === false ? (S2) => S2.toLowerCase() : (S2) => S2.toLocaleLowerCase(u2.locale), l2 = u2.locale === false ? (S2) => S2.toUpperCase() : (S2) => S2.toLocaleUpperCase(u2.locale);
  return a92.length === 1 ? u2.pascalCase ? l2(a92) : c(a92) : (a92 !== c(a92) && (a92 = preserveCamelCase(a92, c, l2)), a92 = a92.replace(LEADING_SEPARATORS, ""), u2.preserveConsecutiveUppercase ? a92 = preserveConsecutiveUppercase(a92, c) : a92 = c(a92), u2.pascalCase && (a92 = l2(a92.charAt(0)) + a92.slice(1)), postProcess(a92, l2));
};
camelcase.exports = camelCase$1;
camelcase.exports.default = camelCase$1;
var camelcaseExports = camelcase.exports;
class QuickLRU {
  constructor(u2 = {}) {
    if (!(u2.maxSize && u2.maxSize > 0))
      throw new TypeError("`maxSize` must be a number greater than 0");
    this.maxSize = u2.maxSize, this.onEviction = u2.onEviction, this.cache = /* @__PURE__ */ new Map(), this.oldCache = /* @__PURE__ */ new Map(), this._size = 0;
  }
  _set(u2, c) {
    if (this.cache.set(u2, c), this._size++, this._size >= this.maxSize) {
      if (this._size = 0, typeof this.onEviction == "function")
        for (const [l2, v2] of this.oldCache.entries())
          this.onEviction(l2, v2);
      this.oldCache = this.cache, this.cache = /* @__PURE__ */ new Map();
    }
  }
  get(u2) {
    if (this.cache.has(u2))
      return this.cache.get(u2);
    if (this.oldCache.has(u2)) {
      const c = this.oldCache.get(u2);
      return this.oldCache.delete(u2), this._set(u2, c), c;
    }
  }
  set(u2, c) {
    return this.cache.has(u2) ? this.cache.set(u2, c) : this._set(u2, c), this;
  }
  has(u2) {
    return this.cache.has(u2) || this.oldCache.has(u2);
  }
  peek(u2) {
    if (this.cache.has(u2))
      return this.cache.get(u2);
    if (this.oldCache.has(u2))
      return this.oldCache.get(u2);
  }
  delete(u2) {
    const c = this.cache.delete(u2);
    return c && this._size--, this.oldCache.delete(u2) || c;
  }
  clear() {
    this.cache.clear(), this.oldCache.clear(), this._size = 0;
  }
  *keys() {
    for (const [u2] of this)
      yield u2;
  }
  *values() {
    for (const [, u2] of this)
      yield u2;
  }
  *[Symbol.iterator]() {
    for (const u2 of this.cache)
      yield u2;
    for (const u2 of this.oldCache) {
      const [c] = u2;
      this.cache.has(c) || (yield u2);
    }
  }
  get size() {
    let u2 = 0;
    for (const c of this.oldCache.keys())
      this.cache.has(c) || u2++;
    return Math.min(this._size + u2, this.maxSize);
  }
}
var quickLru = QuickLRU;
const mapObj = mapObjExports, camelCase = camelcaseExports, QuickLru = quickLru, has$1 = (a92, u2) => a92.some((c) => typeof c == "string" ? c === u2 : (c.lastIndex = 0, c.test(u2))), cache$1 = new QuickLru({ maxSize: 1e5 }), isObject$1 = (a92) => typeof a92 == "object" && a92 !== null && !(a92 instanceof RegExp) && !(a92 instanceof Error) && !(a92 instanceof Date), camelCaseConvert = (a92, u2) => {
  if (!isObject$1(a92))
    return a92;
  u2 = { deep: false, pascalCase: false, ...u2 };
  const { exclude: c, pascalCase: l2, stopPaths: v2, deep: S2 } = u2, g2 = new Set(v2), E2 = (_) => (k, L2) => {
    if (S2 && isObject$1(L2)) {
      const M2 = _ === void 0 ? k : `${_}.${k}`;
      g2.has(M2) || (L2 = mapObj(L2, E2(M2)));
    }
    if (!(c && has$1(c, k))) {
      const M2 = l2 ? `${k}_` : k;
      if (cache$1.has(M2))
        k = cache$1.get(M2);
      else {
        const $ = camelCase(k, { pascalCase: l2, locale: false });
        k.length < 100 && cache$1.set(M2, $), k = $;
      }
    }
    return [k, L2];
  };
  return mapObj(a92, E2(void 0));
};
var camelcaseKeys = (a92, u2) => Array.isArray(a92) ? Object.keys(a92).map((c) => camelCaseConvert(a92[c], u2)) : camelCaseConvert(a92, u2), __importDefault$6 = commonjsGlobal$1 && commonjsGlobal$1.__importDefault || function(a92) {
  return a92 && a92.__esModule ? a92 : { default: a92 };
};
Object.defineProperty(TwirpRPC, "__esModule", { value: true });
TwirpRPC.TwirpRpc = TwirpRPC.livekitPackage = void 0;
const axios_1 = __importDefault$6(axios), camelcase_keys_1 = __importDefault$6(camelcaseKeys), defaultPrefix = "/twirp";
TwirpRPC.livekitPackage = "livekit";
class TwirpRpc {
  constructor(u2, c, l2, v2) {
    this.host = u2, this.pkg = c, this.prefix = l2 || defaultPrefix, this.instance = axios_1.default.create({ baseURL: u2, headers: Object.assign({}, v2 ? { Host: v2 } : {}) });
  }
  request(u2, c, l2, v2) {
    return new Promise((S2, g2) => {
      const E2 = `${this.prefix}/${this.pkg}.${u2}/${c}`;
      this.instance.post(E2, l2, { headers: v2 }).then((_) => {
        S2(camelcase_keys_1.default(_.data, { deep: true }));
      }).catch(g2);
    });
  }
}
TwirpRPC.TwirpRpc = TwirpRpc;
var __awaiter$3 = commonjsGlobal$1 && commonjsGlobal$1.__awaiter || function(a92, u2, c, l2) {
  function v2(S2) {
    return S2 instanceof c ? S2 : new c(function(g2) {
      g2(S2);
    });
  }
  return new (c || (c = Promise))(function(S2, g2) {
    function E2(L2) {
      try {
        k(l2.next(L2));
      } catch (M2) {
        g2(M2);
      }
    }
    function _(L2) {
      try {
        k(l2.throw(L2));
      } catch (M2) {
        g2(M2);
      }
    }
    function k(L2) {
      L2.done ? S2(L2.value) : v2(L2.value).then(E2, _);
    }
    k((l2 = l2.apply(a92, u2 || [])).next());
  });
}, __importDefault$5 = commonjsGlobal$1 && commonjsGlobal$1.__importDefault || function(a92) {
  return a92 && a92.__esModule ? a92 : { default: a92 };
};
Object.defineProperty(EgressClient$1, "__esModule", { value: true });
EgressClient$1.EgressClient = void 0;
const livekit_egress_1$1 = livekit_egress, ServiceBase_1$2 = __importDefault$5(ServiceBase$1), TwirpRPC_1$2 = TwirpRPC, svc$2 = "Egress";
class EgressClient extends ServiceBase_1$2.default {
  /**
  * @param host hostname including protocol. i.e. 'https://cluster.livekit.io'
  * @param apiKey API Key, can be set in env var LIVEKIT_API_KEY
  * @param secret API Secret, can be set in env var LIVEKIT_API_SECRET
  */
  constructor(u2, c, l2) {
    super(c, l2), this.rpc = new TwirpRPC_1$2.TwirpRpc(u2, TwirpRPC_1$2.livekitPackage);
  }
  startRoomCompositeEgress(u2, c, l2, v2, S2, g2, E2) {
    return __awaiter$3(this, void 0, void 0, function* () {
      let _;
      if (l2 !== void 0)
        if (typeof l2 == "string")
          _ = l2;
        else {
          const G2 = l2;
          _ = G2.layout, v2 = G2.encodingOptions, S2 = G2.audioOnly, g2 = G2.videoOnly, E2 = G2.customBaseUrl;
        }
      _ ?? (_ = ""), S2 ?? (S2 = false), g2 ?? (g2 = false), E2 ?? (E2 = "");
      const { file: k, segments: L2, stream: M2, preset: $, advanced: J2 } = this.getOutputParams(c, v2), V2 = livekit_egress_1$1.RoomCompositeEgressRequest.toJSON({ roomName: u2, layout: _, audioOnly: S2, videoOnly: g2, customBaseUrl: E2, file: k, stream: M2, segments: L2, preset: $, advanced: J2 }), q2 = yield this.rpc.request(svc$2, "StartRoomCompositeEgress", V2, this.authHeader({ roomRecord: true }));
      return livekit_egress_1$1.EgressInfo.fromJSON(q2);
    });
  }
  /**
  * @param url url
  * @param output file or stream output
  * @param opts WebOptions
  */
  startWebEgress(u2, c, l2) {
    return __awaiter$3(this, void 0, void 0, function* () {
      const v2 = (l2 == null ? void 0 : l2.audioOnly) || false, S2 = (l2 == null ? void 0 : l2.videoOnly) || false, { file: g2, segments: E2, stream: _, preset: k, advanced: L2 } = this.getOutputParams(c, l2 == null ? void 0 : l2.encodingOptions), M2 = livekit_egress_1$1.WebEgressRequest.toJSON({ url: u2, audioOnly: v2, videoOnly: S2, file: g2, stream: _, segments: E2, preset: k, advanced: L2 }), $ = yield this.rpc.request(svc$2, "StartWebEgress", M2, this.authHeader({ roomRecord: true }));
      return livekit_egress_1$1.EgressInfo.fromJSON($);
    });
  }
  startTrackCompositeEgress(u2, c, l2, v2, S2) {
    return __awaiter$3(this, void 0, void 0, function* () {
      let g2;
      if (l2 !== void 0)
        if (typeof l2 == "string")
          g2 = l2;
        else {
          const V2 = l2;
          g2 = V2.audioTrackId, v2 = V2.videoTrackId, S2 = V2.encodingOptions;
        }
      g2 ?? (g2 = ""), v2 ?? (v2 = "");
      const { file: E2, segments: _, stream: k, preset: L2, advanced: M2 } = this.getOutputParams(c, S2), $ = livekit_egress_1$1.TrackCompositeEgressRequest.toJSON({ roomName: u2, audioTrackId: g2, videoTrackId: v2, file: E2, stream: k, segments: _, preset: L2, advanced: M2 }), J2 = yield this.rpc.request(svc$2, "StartTrackCompositeEgress", $, this.authHeader({ roomRecord: true }));
      return livekit_egress_1$1.EgressInfo.fromJSON(J2);
    });
  }
  getOutputParams(u2, c) {
    let l2, v2, S2, g2, E2;
    return u2.filepath !== void 0 ? l2 = u2 : u2.filenamePrefix !== void 0 ? S2 = u2 : v2 = u2, c && (typeof c == "number" ? g2 = c : E2 = c), { file: l2, segments: S2, stream: v2, preset: g2, advanced: E2 };
  }
  /**
  * @param roomName room name
  * @param output file or websocket output
  * @param trackId track Id
  */
  startTrackEgress(u2, c, l2) {
    return __awaiter$3(this, void 0, void 0, function* () {
      let v2, S2;
      c.filepath !== void 0 ? v2 = c : S2 = c;
      const g2 = livekit_egress_1$1.TrackEgressRequest.toJSON({ roomName: u2, trackId: l2, file: v2, websocketUrl: S2 }), E2 = yield this.rpc.request(svc$2, "StartTrackEgress", g2, this.authHeader({ roomRecord: true }));
      return livekit_egress_1$1.EgressInfo.fromJSON(E2);
    });
  }
  /**
  * @param egressId
  * @param layout
  */
  updateLayout(u2, c) {
    return __awaiter$3(this, void 0, void 0, function* () {
      const l2 = yield this.rpc.request(svc$2, "UpdateLayout", livekit_egress_1$1.UpdateLayoutRequest.toJSON({ egressId: u2, layout: c }), this.authHeader({ roomRecord: true }));
      return livekit_egress_1$1.EgressInfo.fromJSON(l2);
    });
  }
  /**
  * @param egressId
  * @param addOutputUrls
  * @param removeOutputUrls
  */
  updateStream(u2, c, l2) {
    return __awaiter$3(this, void 0, void 0, function* () {
      c ?? (c = []), l2 ?? (l2 = []);
      const v2 = yield this.rpc.request(svc$2, "UpdateStream", livekit_egress_1$1.UpdateStreamRequest.toJSON({ egressId: u2, addOutputUrls: c, removeOutputUrls: l2 }), this.authHeader({ roomRecord: true }));
      return livekit_egress_1$1.EgressInfo.fromJSON(v2);
    });
  }
  /**
  * @param roomName list egress for one room only
  */
  listEgress(u2) {
    var c;
    return __awaiter$3(this, void 0, void 0, function* () {
      u2 ?? (u2 = "");
      const l2 = yield this.rpc.request(svc$2, "ListEgress", livekit_egress_1$1.ListEgressRequest.toJSON({ roomName: u2 }), this.authHeader({ roomRecord: true }));
      return (c = livekit_egress_1$1.ListEgressResponse.fromJSON(l2).items) !== null && c !== void 0 ? c : [];
    });
  }
  /**
  * @param egressId
  */
  stopEgress(u2) {
    return __awaiter$3(this, void 0, void 0, function* () {
      const c = yield this.rpc.request(svc$2, "StopEgress", livekit_egress_1$1.StopEgressRequest.toJSON({ egressId: u2 }), this.authHeader({ roomRecord: true }));
      return livekit_egress_1$1.EgressInfo.fromJSON(c);
    });
  }
}
EgressClient$1.EgressClient = EgressClient;
var grants = {};
Object.defineProperty(grants, "__esModule", { value: true });
var IngressClient$1 = {}, livekit_ingress = {}, livekit_models = {}, timestamp = {}, __importDefault$4 = commonjsGlobal$1 && commonjsGlobal$1.__importDefault || function(a92) {
  return a92 && a92.__esModule ? a92 : { default: a92 };
};
Object.defineProperty(timestamp, "__esModule", { value: true });
timestamp.Timestamp = timestamp.protobufPackage = void 0;
const long_1$1 = __importDefault$4(umdExports), minimal_1$1 = __importDefault$4(minimal);
timestamp.protobufPackage = "google.protobuf";
function createBaseTimestamp() {
  return { seconds: 0, nanos: 0 };
}
timestamp.Timestamp = { encode(a92, u2 = minimal_1$1.default.Writer.create()) {
  return a92.seconds !== 0 && u2.uint32(8).int64(a92.seconds), a92.nanos !== 0 && u2.uint32(16).int32(a92.nanos), u2;
}, decode(a92, u2) {
  const c = a92 instanceof minimal_1$1.default.Reader ? a92 : new minimal_1$1.default.Reader(a92);
  let l2 = u2 === void 0 ? c.len : c.pos + u2;
  const v2 = createBaseTimestamp();
  for (; c.pos < l2; ) {
    const S2 = c.uint32();
    switch (S2 >>> 3) {
      case 1:
        v2.seconds = longToNumber$1(c.int64());
        break;
      case 2:
        v2.nanos = c.int32();
        break;
      default:
        c.skipType(S2 & 7);
        break;
    }
  }
  return v2;
}, fromJSON(a92) {
  return { seconds: isSet$1(a92.seconds) ? Number(a92.seconds) : 0, nanos: isSet$1(a92.nanos) ? Number(a92.nanos) : 0 };
}, toJSON(a92) {
  const u2 = {};
  return a92.seconds !== void 0 && (u2.seconds = Math.round(a92.seconds)), a92.nanos !== void 0 && (u2.nanos = Math.round(a92.nanos)), u2;
}, fromPartial(a92) {
  var u2, c;
  const l2 = createBaseTimestamp();
  return l2.seconds = (u2 = a92.seconds) !== null && u2 !== void 0 ? u2 : 0, l2.nanos = (c = a92.nanos) !== null && c !== void 0 ? c : 0, l2;
} };
var globalThis$2 = (() => {
  if (typeof globalThis$2 < "u")
    return globalThis$2;
  if (typeof self < "u")
    return self;
  if (typeof window < "u")
    return window;
  if (typeof commonjsGlobal$1 < "u")
    return commonjsGlobal$1;
  throw "Unable to locate global object";
})();
function longToNumber$1(a92) {
  if (a92.gt(Number.MAX_SAFE_INTEGER))
    throw new globalThis$2.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  return a92.toNumber();
}
minimal_1$1.default.util.Long !== long_1$1.default && (minimal_1$1.default.util.Long = long_1$1.default, minimal_1$1.default.configure());
function isSet$1(a92) {
  return a92 != null;
}
(function(a92) {
  var u2 = commonjsGlobal$1 && commonjsGlobal$1.__importDefault || function(O2) {
    return O2 && O2.__esModule ? O2 : { default: O2 };
  };
  Object.defineProperty(a92, "__esModule", { value: true }), a92.RTPStats_GapHistogramEntry = a92.RTPStats = a92.DisabledCodecs = a92.VideoConfiguration = a92.ClientConfiguration = a92.ClientInfo = a92.ServerInfo = a92.ParticipantTracks = a92.UserPacket = a92.SpeakerInfo = a92.ActiveSpeakerUpdate = a92.DataPacket = a92.VideoLayer = a92.TrackInfo = a92.SimulcastCodecInfo = a92.ParticipantInfo = a92.ParticipantPermission = a92.Codec = a92.Room = a92.clientInfo_SDKToJSON = a92.clientInfo_SDKFromJSON = a92.ClientInfo_SDK = a92.serverInfo_EditionToJSON = a92.serverInfo_EditionFromJSON = a92.ServerInfo_Edition = a92.dataPacket_KindToJSON = a92.dataPacket_KindFromJSON = a92.DataPacket_Kind = a92.participantInfo_StateToJSON = a92.participantInfo_StateFromJSON = a92.ParticipantInfo_State = a92.disconnectReasonToJSON = a92.disconnectReasonFromJSON = a92.DisconnectReason = a92.clientConfigSettingToJSON = a92.clientConfigSettingFromJSON = a92.ClientConfigSetting = a92.connectionQualityToJSON = a92.connectionQualityFromJSON = a92.ConnectionQuality = a92.videoQualityToJSON = a92.videoQualityFromJSON = a92.VideoQuality = a92.trackSourceToJSON = a92.trackSourceFromJSON = a92.TrackSource = a92.trackTypeToJSON = a92.trackTypeFromJSON = a92.TrackType = a92.protobufPackage = void 0, a92.TimedVersion = void 0;
  const c = u2(umdExports), l2 = u2(minimal), v2 = timestamp;
  a92.protobufPackage = "livekit";
  var S2;
  (function(O2) {
    O2[O2.AUDIO = 0] = "AUDIO", O2[O2.VIDEO = 1] = "VIDEO", O2[O2.DATA = 2] = "DATA", O2[O2.UNRECOGNIZED = -1] = "UNRECOGNIZED";
  })(S2 = a92.TrackType || (a92.TrackType = {}));
  function g2(O2) {
    switch (O2) {
      case 0:
      case "AUDIO":
        return S2.AUDIO;
      case 1:
      case "VIDEO":
        return S2.VIDEO;
      case 2:
      case "DATA":
        return S2.DATA;
      case -1:
      case "UNRECOGNIZED":
      default:
        return S2.UNRECOGNIZED;
    }
  }
  a92.trackTypeFromJSON = g2;
  function E2(O2) {
    switch (O2) {
      case S2.AUDIO:
        return "AUDIO";
      case S2.VIDEO:
        return "VIDEO";
      case S2.DATA:
        return "DATA";
      case S2.UNRECOGNIZED:
      default:
        return "UNRECOGNIZED";
    }
  }
  a92.trackTypeToJSON = E2;
  var _;
  (function(O2) {
    O2[O2.UNKNOWN = 0] = "UNKNOWN", O2[O2.CAMERA = 1] = "CAMERA", O2[O2.MICROPHONE = 2] = "MICROPHONE", O2[O2.SCREEN_SHARE = 3] = "SCREEN_SHARE", O2[O2.SCREEN_SHARE_AUDIO = 4] = "SCREEN_SHARE_AUDIO", O2[O2.UNRECOGNIZED = -1] = "UNRECOGNIZED";
  })(_ = a92.TrackSource || (a92.TrackSource = {}));
  function k(O2) {
    switch (O2) {
      case 0:
      case "UNKNOWN":
        return _.UNKNOWN;
      case 1:
      case "CAMERA":
        return _.CAMERA;
      case 2:
      case "MICROPHONE":
        return _.MICROPHONE;
      case 3:
      case "SCREEN_SHARE":
        return _.SCREEN_SHARE;
      case 4:
      case "SCREEN_SHARE_AUDIO":
        return _.SCREEN_SHARE_AUDIO;
      case -1:
      case "UNRECOGNIZED":
      default:
        return _.UNRECOGNIZED;
    }
  }
  a92.trackSourceFromJSON = k;
  function L2(O2) {
    switch (O2) {
      case _.UNKNOWN:
        return "UNKNOWN";
      case _.CAMERA:
        return "CAMERA";
      case _.MICROPHONE:
        return "MICROPHONE";
      case _.SCREEN_SHARE:
        return "SCREEN_SHARE";
      case _.SCREEN_SHARE_AUDIO:
        return "SCREEN_SHARE_AUDIO";
      case _.UNRECOGNIZED:
      default:
        return "UNRECOGNIZED";
    }
  }
  a92.trackSourceToJSON = L2;
  var M2;
  (function(O2) {
    O2[O2.LOW = 0] = "LOW", O2[O2.MEDIUM = 1] = "MEDIUM", O2[O2.HIGH = 2] = "HIGH", O2[O2.OFF = 3] = "OFF", O2[O2.UNRECOGNIZED = -1] = "UNRECOGNIZED";
  })(M2 = a92.VideoQuality || (a92.VideoQuality = {}));
  function $(O2) {
    switch (O2) {
      case 0:
      case "LOW":
        return M2.LOW;
      case 1:
      case "MEDIUM":
        return M2.MEDIUM;
      case 2:
      case "HIGH":
        return M2.HIGH;
      case 3:
      case "OFF":
        return M2.OFF;
      case -1:
      case "UNRECOGNIZED":
      default:
        return M2.UNRECOGNIZED;
    }
  }
  a92.videoQualityFromJSON = $;
  function J2(O2) {
    switch (O2) {
      case M2.LOW:
        return "LOW";
      case M2.MEDIUM:
        return "MEDIUM";
      case M2.HIGH:
        return "HIGH";
      case M2.OFF:
        return "OFF";
      case M2.UNRECOGNIZED:
      default:
        return "UNRECOGNIZED";
    }
  }
  a92.videoQualityToJSON = J2;
  var V2;
  (function(O2) {
    O2[O2.POOR = 0] = "POOR", O2[O2.GOOD = 1] = "GOOD", O2[O2.EXCELLENT = 2] = "EXCELLENT", O2[O2.UNRECOGNIZED = -1] = "UNRECOGNIZED";
  })(V2 = a92.ConnectionQuality || (a92.ConnectionQuality = {}));
  function q2(O2) {
    switch (O2) {
      case 0:
      case "POOR":
        return V2.POOR;
      case 1:
      case "GOOD":
        return V2.GOOD;
      case 2:
      case "EXCELLENT":
        return V2.EXCELLENT;
      case -1:
      case "UNRECOGNIZED":
      default:
        return V2.UNRECOGNIZED;
    }
  }
  a92.connectionQualityFromJSON = q2;
  function G2(O2) {
    switch (O2) {
      case V2.POOR:
        return "POOR";
      case V2.GOOD:
        return "GOOD";
      case V2.EXCELLENT:
        return "EXCELLENT";
      case V2.UNRECOGNIZED:
      default:
        return "UNRECOGNIZED";
    }
  }
  a92.connectionQualityToJSON = G2;
  var H2;
  (function(O2) {
    O2[O2.UNSET = 0] = "UNSET", O2[O2.DISABLED = 1] = "DISABLED", O2[O2.ENABLED = 2] = "ENABLED", O2[O2.UNRECOGNIZED = -1] = "UNRECOGNIZED";
  })(H2 = a92.ClientConfigSetting || (a92.ClientConfigSetting = {}));
  function B2(O2) {
    switch (O2) {
      case 0:
      case "UNSET":
        return H2.UNSET;
      case 1:
      case "DISABLED":
        return H2.DISABLED;
      case 2:
      case "ENABLED":
        return H2.ENABLED;
      case -1:
      case "UNRECOGNIZED":
      default:
        return H2.UNRECOGNIZED;
    }
  }
  a92.clientConfigSettingFromJSON = B2;
  function Y2(O2) {
    switch (O2) {
      case H2.UNSET:
        return "UNSET";
      case H2.DISABLED:
        return "DISABLED";
      case H2.ENABLED:
        return "ENABLED";
      case H2.UNRECOGNIZED:
      default:
        return "UNRECOGNIZED";
    }
  }
  a92.clientConfigSettingToJSON = Y2;
  var ne2;
  (function(O2) {
    O2[O2.UNKNOWN_REASON = 0] = "UNKNOWN_REASON", O2[O2.CLIENT_INITIATED = 1] = "CLIENT_INITIATED", O2[O2.DUPLICATE_IDENTITY = 2] = "DUPLICATE_IDENTITY", O2[O2.SERVER_SHUTDOWN = 3] = "SERVER_SHUTDOWN", O2[O2.PARTICIPANT_REMOVED = 4] = "PARTICIPANT_REMOVED", O2[O2.ROOM_DELETED = 5] = "ROOM_DELETED", O2[O2.STATE_MISMATCH = 6] = "STATE_MISMATCH", O2[O2.JOIN_FAILURE = 7] = "JOIN_FAILURE", O2[O2.UNRECOGNIZED = -1] = "UNRECOGNIZED";
  })(ne2 = a92.DisconnectReason || (a92.DisconnectReason = {}));
  function Z2(O2) {
    switch (O2) {
      case 0:
      case "UNKNOWN_REASON":
        return ne2.UNKNOWN_REASON;
      case 1:
      case "CLIENT_INITIATED":
        return ne2.CLIENT_INITIATED;
      case 2:
      case "DUPLICATE_IDENTITY":
        return ne2.DUPLICATE_IDENTITY;
      case 3:
      case "SERVER_SHUTDOWN":
        return ne2.SERVER_SHUTDOWN;
      case 4:
      case "PARTICIPANT_REMOVED":
        return ne2.PARTICIPANT_REMOVED;
      case 5:
      case "ROOM_DELETED":
        return ne2.ROOM_DELETED;
      case 6:
      case "STATE_MISMATCH":
        return ne2.STATE_MISMATCH;
      case 7:
      case "JOIN_FAILURE":
        return ne2.JOIN_FAILURE;
      case -1:
      case "UNRECOGNIZED":
      default:
        return ne2.UNRECOGNIZED;
    }
  }
  a92.disconnectReasonFromJSON = Z2;
  function re2(O2) {
    switch (O2) {
      case ne2.UNKNOWN_REASON:
        return "UNKNOWN_REASON";
      case ne2.CLIENT_INITIATED:
        return "CLIENT_INITIATED";
      case ne2.DUPLICATE_IDENTITY:
        return "DUPLICATE_IDENTITY";
      case ne2.SERVER_SHUTDOWN:
        return "SERVER_SHUTDOWN";
      case ne2.PARTICIPANT_REMOVED:
        return "PARTICIPANT_REMOVED";
      case ne2.ROOM_DELETED:
        return "ROOM_DELETED";
      case ne2.STATE_MISMATCH:
        return "STATE_MISMATCH";
      case ne2.JOIN_FAILURE:
        return "JOIN_FAILURE";
      case ne2.UNRECOGNIZED:
      default:
        return "UNRECOGNIZED";
    }
  }
  a92.disconnectReasonToJSON = re2;
  var oe2;
  (function(O2) {
    O2[O2.JOINING = 0] = "JOINING", O2[O2.JOINED = 1] = "JOINED", O2[O2.ACTIVE = 2] = "ACTIVE", O2[O2.DISCONNECTED = 3] = "DISCONNECTED", O2[O2.UNRECOGNIZED = -1] = "UNRECOGNIZED";
  })(oe2 = a92.ParticipantInfo_State || (a92.ParticipantInfo_State = {}));
  function de2(O2) {
    switch (O2) {
      case 0:
      case "JOINING":
        return oe2.JOINING;
      case 1:
      case "JOINED":
        return oe2.JOINED;
      case 2:
      case "ACTIVE":
        return oe2.ACTIVE;
      case 3:
      case "DISCONNECTED":
        return oe2.DISCONNECTED;
      case -1:
      case "UNRECOGNIZED":
      default:
        return oe2.UNRECOGNIZED;
    }
  }
  a92.participantInfo_StateFromJSON = de2;
  function A2(O2) {
    switch (O2) {
      case oe2.JOINING:
        return "JOINING";
      case oe2.JOINED:
        return "JOINED";
      case oe2.ACTIVE:
        return "ACTIVE";
      case oe2.DISCONNECTED:
        return "DISCONNECTED";
      case oe2.UNRECOGNIZED:
      default:
        return "UNRECOGNIZED";
    }
  }
  a92.participantInfo_StateToJSON = A2;
  var N2;
  (function(O2) {
    O2[O2.RELIABLE = 0] = "RELIABLE", O2[O2.LOSSY = 1] = "LOSSY", O2[O2.UNRECOGNIZED = -1] = "UNRECOGNIZED";
  })(N2 = a92.DataPacket_Kind || (a92.DataPacket_Kind = {}));
  function D2(O2) {
    switch (O2) {
      case 0:
      case "RELIABLE":
        return N2.RELIABLE;
      case 1:
      case "LOSSY":
        return N2.LOSSY;
      case -1:
      case "UNRECOGNIZED":
      default:
        return N2.UNRECOGNIZED;
    }
  }
  a92.dataPacket_KindFromJSON = D2;
  function W2(O2) {
    switch (O2) {
      case N2.RELIABLE:
        return "RELIABLE";
      case N2.LOSSY:
        return "LOSSY";
      case N2.UNRECOGNIZED:
      default:
        return "UNRECOGNIZED";
    }
  }
  a92.dataPacket_KindToJSON = W2;
  var ee2;
  (function(O2) {
    O2[O2.Standard = 0] = "Standard", O2[O2.Cloud = 1] = "Cloud", O2[O2.UNRECOGNIZED = -1] = "UNRECOGNIZED";
  })(ee2 = a92.ServerInfo_Edition || (a92.ServerInfo_Edition = {}));
  function ae2(O2) {
    switch (O2) {
      case 0:
      case "Standard":
        return ee2.Standard;
      case 1:
      case "Cloud":
        return ee2.Cloud;
      case -1:
      case "UNRECOGNIZED":
      default:
        return ee2.UNRECOGNIZED;
    }
  }
  a92.serverInfo_EditionFromJSON = ae2;
  function ye2(O2) {
    switch (O2) {
      case ee2.Standard:
        return "Standard";
      case ee2.Cloud:
        return "Cloud";
      case ee2.UNRECOGNIZED:
      default:
        return "UNRECOGNIZED";
    }
  }
  a92.serverInfo_EditionToJSON = ye2;
  var he2;
  (function(O2) {
    O2[O2.UNKNOWN = 0] = "UNKNOWN", O2[O2.JS = 1] = "JS", O2[O2.SWIFT = 2] = "SWIFT", O2[O2.ANDROID = 3] = "ANDROID", O2[O2.FLUTTER = 4] = "FLUTTER", O2[O2.GO = 5] = "GO", O2[O2.UNITY = 6] = "UNITY", O2[O2.UNRECOGNIZED = -1] = "UNRECOGNIZED";
  })(he2 = a92.ClientInfo_SDK || (a92.ClientInfo_SDK = {}));
  function le2(O2) {
    switch (O2) {
      case 0:
      case "UNKNOWN":
        return he2.UNKNOWN;
      case 1:
      case "JS":
        return he2.JS;
      case 2:
      case "SWIFT":
        return he2.SWIFT;
      case 3:
      case "ANDROID":
        return he2.ANDROID;
      case 4:
      case "FLUTTER":
        return he2.FLUTTER;
      case 5:
      case "GO":
        return he2.GO;
      case 6:
      case "UNITY":
        return he2.UNITY;
      case -1:
      case "UNRECOGNIZED":
      default:
        return he2.UNRECOGNIZED;
    }
  }
  a92.clientInfo_SDKFromJSON = le2;
  function we2(O2) {
    switch (O2) {
      case he2.UNKNOWN:
        return "UNKNOWN";
      case he2.JS:
        return "JS";
      case he2.SWIFT:
        return "SWIFT";
      case he2.ANDROID:
        return "ANDROID";
      case he2.FLUTTER:
        return "FLUTTER";
      case he2.GO:
        return "GO";
      case he2.UNITY:
        return "UNITY";
      case he2.UNRECOGNIZED:
      default:
        return "UNRECOGNIZED";
    }
  }
  a92.clientInfo_SDKToJSON = we2;
  function Be2() {
    return { sid: "", name: "", emptyTimeout: 0, maxParticipants: 0, creationTime: 0, turnPassword: "", enabledCodecs: [], metadata: "", numParticipants: 0, activeRecording: false };
  }
  a92.Room = { encode(O2, j = l2.default.Writer.create()) {
    O2.sid !== "" && j.uint32(10).string(O2.sid), O2.name !== "" && j.uint32(18).string(O2.name), O2.emptyTimeout !== 0 && j.uint32(24).uint32(O2.emptyTimeout), O2.maxParticipants !== 0 && j.uint32(32).uint32(O2.maxParticipants), O2.creationTime !== 0 && j.uint32(40).int64(O2.creationTime), O2.turnPassword !== "" && j.uint32(50).string(O2.turnPassword);
    for (const se2 of O2.enabledCodecs)
      a92.Codec.encode(se2, j.uint32(58).fork()).ldelim();
    return O2.metadata !== "" && j.uint32(66).string(O2.metadata), O2.numParticipants !== 0 && j.uint32(72).uint32(O2.numParticipants), O2.activeRecording === true && j.uint32(80).bool(O2.activeRecording), j;
  }, decode(O2, j) {
    const se2 = O2 instanceof l2.default.Reader ? O2 : new l2.default.Reader(O2);
    let _e = j === void 0 ? se2.len : se2.pos + j;
    const ve2 = Be2();
    for (; se2.pos < _e; ) {
      const De2 = se2.uint32();
      switch (De2 >>> 3) {
        case 1:
          ve2.sid = se2.string();
          break;
        case 2:
          ve2.name = se2.string();
          break;
        case 3:
          ve2.emptyTimeout = se2.uint32();
          break;
        case 4:
          ve2.maxParticipants = se2.uint32();
          break;
        case 5:
          ve2.creationTime = ie2(se2.int64());
          break;
        case 6:
          ve2.turnPassword = se2.string();
          break;
        case 7:
          ve2.enabledCodecs.push(a92.Codec.decode(se2, se2.uint32()));
          break;
        case 8:
          ve2.metadata = se2.string();
          break;
        case 9:
          ve2.numParticipants = se2.uint32();
          break;
        case 10:
          ve2.activeRecording = se2.bool();
          break;
        default:
          se2.skipType(De2 & 7);
          break;
      }
    }
    return ve2;
  }, fromJSON(O2) {
    return { sid: ue2(O2.sid) ? String(O2.sid) : "", name: ue2(O2.name) ? String(O2.name) : "", emptyTimeout: ue2(O2.emptyTimeout) ? Number(O2.emptyTimeout) : 0, maxParticipants: ue2(O2.maxParticipants) ? Number(O2.maxParticipants) : 0, creationTime: ue2(O2.creationTime) ? Number(O2.creationTime) : 0, turnPassword: ue2(O2.turnPassword) ? String(O2.turnPassword) : "", enabledCodecs: Array.isArray(O2 == null ? void 0 : O2.enabledCodecs) ? O2.enabledCodecs.map((j) => a92.Codec.fromJSON(j)) : [], metadata: ue2(O2.metadata) ? String(O2.metadata) : "", numParticipants: ue2(O2.numParticipants) ? Number(O2.numParticipants) : 0, activeRecording: ue2(O2.activeRecording) ? !!O2.activeRecording : false };
  }, toJSON(O2) {
    const j = {};
    return O2.sid !== void 0 && (j.sid = O2.sid), O2.name !== void 0 && (j.name = O2.name), O2.emptyTimeout !== void 0 && (j.emptyTimeout = Math.round(O2.emptyTimeout)), O2.maxParticipants !== void 0 && (j.maxParticipants = Math.round(O2.maxParticipants)), O2.creationTime !== void 0 && (j.creationTime = Math.round(O2.creationTime)), O2.turnPassword !== void 0 && (j.turnPassword = O2.turnPassword), O2.enabledCodecs ? j.enabledCodecs = O2.enabledCodecs.map((se2) => se2 ? a92.Codec.toJSON(se2) : void 0) : j.enabledCodecs = [], O2.metadata !== void 0 && (j.metadata = O2.metadata), O2.numParticipants !== void 0 && (j.numParticipants = Math.round(O2.numParticipants)), O2.activeRecording !== void 0 && (j.activeRecording = O2.activeRecording), j;
  }, fromPartial(O2) {
    var j, se2, _e, ve2, De2, Ze2, Qe2, ot, ft, Ce2;
    const I2 = Be2();
    return I2.sid = (j = O2.sid) !== null && j !== void 0 ? j : "", I2.name = (se2 = O2.name) !== null && se2 !== void 0 ? se2 : "", I2.emptyTimeout = (_e = O2.emptyTimeout) !== null && _e !== void 0 ? _e : 0, I2.maxParticipants = (ve2 = O2.maxParticipants) !== null && ve2 !== void 0 ? ve2 : 0, I2.creationTime = (De2 = O2.creationTime) !== null && De2 !== void 0 ? De2 : 0, I2.turnPassword = (Ze2 = O2.turnPassword) !== null && Ze2 !== void 0 ? Ze2 : "", I2.enabledCodecs = ((Qe2 = O2.enabledCodecs) === null || Qe2 === void 0 ? void 0 : Qe2.map((F2) => a92.Codec.fromPartial(F2))) || [], I2.metadata = (ot = O2.metadata) !== null && ot !== void 0 ? ot : "", I2.numParticipants = (ft = O2.numParticipants) !== null && ft !== void 0 ? ft : 0, I2.activeRecording = (Ce2 = O2.activeRecording) !== null && Ce2 !== void 0 ? Ce2 : false, I2;
  } };
  function Ne2() {
    return { mime: "", fmtpLine: "" };
  }
  a92.Codec = { encode(O2, j = l2.default.Writer.create()) {
    return O2.mime !== "" && j.uint32(10).string(O2.mime), O2.fmtpLine !== "" && j.uint32(18).string(O2.fmtpLine), j;
  }, decode(O2, j) {
    const se2 = O2 instanceof l2.default.Reader ? O2 : new l2.default.Reader(O2);
    let _e = j === void 0 ? se2.len : se2.pos + j;
    const ve2 = Ne2();
    for (; se2.pos < _e; ) {
      const De2 = se2.uint32();
      switch (De2 >>> 3) {
        case 1:
          ve2.mime = se2.string();
          break;
        case 2:
          ve2.fmtpLine = se2.string();
          break;
        default:
          se2.skipType(De2 & 7);
          break;
      }
    }
    return ve2;
  }, fromJSON(O2) {
    return { mime: ue2(O2.mime) ? String(O2.mime) : "", fmtpLine: ue2(O2.fmtpLine) ? String(O2.fmtpLine) : "" };
  }, toJSON(O2) {
    const j = {};
    return O2.mime !== void 0 && (j.mime = O2.mime), O2.fmtpLine !== void 0 && (j.fmtpLine = O2.fmtpLine), j;
  }, fromPartial(O2) {
    var j, se2;
    const _e = Ne2();
    return _e.mime = (j = O2.mime) !== null && j !== void 0 ? j : "", _e.fmtpLine = (se2 = O2.fmtpLine) !== null && se2 !== void 0 ? se2 : "", _e;
  } };
  function Le2() {
    return { canSubscribe: false, canPublish: false, canPublishData: false, hidden: false, recorder: false };
  }
  a92.ParticipantPermission = { encode(O2, j = l2.default.Writer.create()) {
    return O2.canSubscribe === true && j.uint32(8).bool(O2.canSubscribe), O2.canPublish === true && j.uint32(16).bool(O2.canPublish), O2.canPublishData === true && j.uint32(24).bool(O2.canPublishData), O2.hidden === true && j.uint32(56).bool(O2.hidden), O2.recorder === true && j.uint32(64).bool(O2.recorder), j;
  }, decode(O2, j) {
    const se2 = O2 instanceof l2.default.Reader ? O2 : new l2.default.Reader(O2);
    let _e = j === void 0 ? se2.len : se2.pos + j;
    const ve2 = Le2();
    for (; se2.pos < _e; ) {
      const De2 = se2.uint32();
      switch (De2 >>> 3) {
        case 1:
          ve2.canSubscribe = se2.bool();
          break;
        case 2:
          ve2.canPublish = se2.bool();
          break;
        case 3:
          ve2.canPublishData = se2.bool();
          break;
        case 7:
          ve2.hidden = se2.bool();
          break;
        case 8:
          ve2.recorder = se2.bool();
          break;
        default:
          se2.skipType(De2 & 7);
          break;
      }
    }
    return ve2;
  }, fromJSON(O2) {
    return { canSubscribe: ue2(O2.canSubscribe) ? !!O2.canSubscribe : false, canPublish: ue2(O2.canPublish) ? !!O2.canPublish : false, canPublishData: ue2(O2.canPublishData) ? !!O2.canPublishData : false, hidden: ue2(O2.hidden) ? !!O2.hidden : false, recorder: ue2(O2.recorder) ? !!O2.recorder : false };
  }, toJSON(O2) {
    const j = {};
    return O2.canSubscribe !== void 0 && (j.canSubscribe = O2.canSubscribe), O2.canPublish !== void 0 && (j.canPublish = O2.canPublish), O2.canPublishData !== void 0 && (j.canPublishData = O2.canPublishData), O2.hidden !== void 0 && (j.hidden = O2.hidden), O2.recorder !== void 0 && (j.recorder = O2.recorder), j;
  }, fromPartial(O2) {
    var j, se2, _e, ve2, De2;
    const Ze2 = Le2();
    return Ze2.canSubscribe = (j = O2.canSubscribe) !== null && j !== void 0 ? j : false, Ze2.canPublish = (se2 = O2.canPublish) !== null && se2 !== void 0 ? se2 : false, Ze2.canPublishData = (_e = O2.canPublishData) !== null && _e !== void 0 ? _e : false, Ze2.hidden = (ve2 = O2.hidden) !== null && ve2 !== void 0 ? ve2 : false, Ze2.recorder = (De2 = O2.recorder) !== null && De2 !== void 0 ? De2 : false, Ze2;
  } };
  function $e2() {
    return { sid: "", identity: "", state: 0, tracks: [], metadata: "", joinedAt: 0, name: "", version: 0, permission: void 0, region: "", isPublisher: false };
  }
  a92.ParticipantInfo = { encode(O2, j = l2.default.Writer.create()) {
    O2.sid !== "" && j.uint32(10).string(O2.sid), O2.identity !== "" && j.uint32(18).string(O2.identity), O2.state !== 0 && j.uint32(24).int32(O2.state);
    for (const se2 of O2.tracks)
      a92.TrackInfo.encode(se2, j.uint32(34).fork()).ldelim();
    return O2.metadata !== "" && j.uint32(42).string(O2.metadata), O2.joinedAt !== 0 && j.uint32(48).int64(O2.joinedAt), O2.name !== "" && j.uint32(74).string(O2.name), O2.version !== 0 && j.uint32(80).uint32(O2.version), O2.permission !== void 0 && a92.ParticipantPermission.encode(O2.permission, j.uint32(90).fork()).ldelim(), O2.region !== "" && j.uint32(98).string(O2.region), O2.isPublisher === true && j.uint32(104).bool(O2.isPublisher), j;
  }, decode(O2, j) {
    const se2 = O2 instanceof l2.default.Reader ? O2 : new l2.default.Reader(O2);
    let _e = j === void 0 ? se2.len : se2.pos + j;
    const ve2 = $e2();
    for (; se2.pos < _e; ) {
      const De2 = se2.uint32();
      switch (De2 >>> 3) {
        case 1:
          ve2.sid = se2.string();
          break;
        case 2:
          ve2.identity = se2.string();
          break;
        case 3:
          ve2.state = se2.int32();
          break;
        case 4:
          ve2.tracks.push(a92.TrackInfo.decode(se2, se2.uint32()));
          break;
        case 5:
          ve2.metadata = se2.string();
          break;
        case 6:
          ve2.joinedAt = ie2(se2.int64());
          break;
        case 9:
          ve2.name = se2.string();
          break;
        case 10:
          ve2.version = se2.uint32();
          break;
        case 11:
          ve2.permission = a92.ParticipantPermission.decode(se2, se2.uint32());
          break;
        case 12:
          ve2.region = se2.string();
          break;
        case 13:
          ve2.isPublisher = se2.bool();
          break;
        default:
          se2.skipType(De2 & 7);
          break;
      }
    }
    return ve2;
  }, fromJSON(O2) {
    return { sid: ue2(O2.sid) ? String(O2.sid) : "", identity: ue2(O2.identity) ? String(O2.identity) : "", state: ue2(O2.state) ? de2(O2.state) : 0, tracks: Array.isArray(O2 == null ? void 0 : O2.tracks) ? O2.tracks.map((j) => a92.TrackInfo.fromJSON(j)) : [], metadata: ue2(O2.metadata) ? String(O2.metadata) : "", joinedAt: ue2(O2.joinedAt) ? Number(O2.joinedAt) : 0, name: ue2(O2.name) ? String(O2.name) : "", version: ue2(O2.version) ? Number(O2.version) : 0, permission: ue2(O2.permission) ? a92.ParticipantPermission.fromJSON(O2.permission) : void 0, region: ue2(O2.region) ? String(O2.region) : "", isPublisher: ue2(O2.isPublisher) ? !!O2.isPublisher : false };
  }, toJSON(O2) {
    const j = {};
    return O2.sid !== void 0 && (j.sid = O2.sid), O2.identity !== void 0 && (j.identity = O2.identity), O2.state !== void 0 && (j.state = A2(O2.state)), O2.tracks ? j.tracks = O2.tracks.map((se2) => se2 ? a92.TrackInfo.toJSON(se2) : void 0) : j.tracks = [], O2.metadata !== void 0 && (j.metadata = O2.metadata), O2.joinedAt !== void 0 && (j.joinedAt = Math.round(O2.joinedAt)), O2.name !== void 0 && (j.name = O2.name), O2.version !== void 0 && (j.version = Math.round(O2.version)), O2.permission !== void 0 && (j.permission = O2.permission ? a92.ParticipantPermission.toJSON(O2.permission) : void 0), O2.region !== void 0 && (j.region = O2.region), O2.isPublisher !== void 0 && (j.isPublisher = O2.isPublisher), j;
  }, fromPartial(O2) {
    var j, se2, _e, ve2, De2, Ze2, Qe2, ot, ft, Ce2;
    const I2 = $e2();
    return I2.sid = (j = O2.sid) !== null && j !== void 0 ? j : "", I2.identity = (se2 = O2.identity) !== null && se2 !== void 0 ? se2 : "", I2.state = (_e = O2.state) !== null && _e !== void 0 ? _e : 0, I2.tracks = ((ve2 = O2.tracks) === null || ve2 === void 0 ? void 0 : ve2.map((F2) => a92.TrackInfo.fromPartial(F2))) || [], I2.metadata = (De2 = O2.metadata) !== null && De2 !== void 0 ? De2 : "", I2.joinedAt = (Ze2 = O2.joinedAt) !== null && Ze2 !== void 0 ? Ze2 : 0, I2.name = (Qe2 = O2.name) !== null && Qe2 !== void 0 ? Qe2 : "", I2.version = (ot = O2.version) !== null && ot !== void 0 ? ot : 0, I2.permission = O2.permission !== void 0 && O2.permission !== null ? a92.ParticipantPermission.fromPartial(O2.permission) : void 0, I2.region = (ft = O2.region) !== null && ft !== void 0 ? ft : "", I2.isPublisher = (Ce2 = O2.isPublisher) !== null && Ce2 !== void 0 ? Ce2 : false, I2;
  } };
  function Ue2() {
    return { mimeType: "", mid: "", cid: "", layers: [] };
  }
  a92.SimulcastCodecInfo = { encode(O2, j = l2.default.Writer.create()) {
    O2.mimeType !== "" && j.uint32(10).string(O2.mimeType), O2.mid !== "" && j.uint32(18).string(O2.mid), O2.cid !== "" && j.uint32(26).string(O2.cid);
    for (const se2 of O2.layers)
      a92.VideoLayer.encode(se2, j.uint32(34).fork()).ldelim();
    return j;
  }, decode(O2, j) {
    const se2 = O2 instanceof l2.default.Reader ? O2 : new l2.default.Reader(O2);
    let _e = j === void 0 ? se2.len : se2.pos + j;
    const ve2 = Ue2();
    for (; se2.pos < _e; ) {
      const De2 = se2.uint32();
      switch (De2 >>> 3) {
        case 1:
          ve2.mimeType = se2.string();
          break;
        case 2:
          ve2.mid = se2.string();
          break;
        case 3:
          ve2.cid = se2.string();
          break;
        case 4:
          ve2.layers.push(a92.VideoLayer.decode(se2, se2.uint32()));
          break;
        default:
          se2.skipType(De2 & 7);
          break;
      }
    }
    return ve2;
  }, fromJSON(O2) {
    return { mimeType: ue2(O2.mimeType) ? String(O2.mimeType) : "", mid: ue2(O2.mid) ? String(O2.mid) : "", cid: ue2(O2.cid) ? String(O2.cid) : "", layers: Array.isArray(O2 == null ? void 0 : O2.layers) ? O2.layers.map((j) => a92.VideoLayer.fromJSON(j)) : [] };
  }, toJSON(O2) {
    const j = {};
    return O2.mimeType !== void 0 && (j.mimeType = O2.mimeType), O2.mid !== void 0 && (j.mid = O2.mid), O2.cid !== void 0 && (j.cid = O2.cid), O2.layers ? j.layers = O2.layers.map((se2) => se2 ? a92.VideoLayer.toJSON(se2) : void 0) : j.layers = [], j;
  }, fromPartial(O2) {
    var j, se2, _e, ve2;
    const De2 = Ue2();
    return De2.mimeType = (j = O2.mimeType) !== null && j !== void 0 ? j : "", De2.mid = (se2 = O2.mid) !== null && se2 !== void 0 ? se2 : "", De2.cid = (_e = O2.cid) !== null && _e !== void 0 ? _e : "", De2.layers = ((ve2 = O2.layers) === null || ve2 === void 0 ? void 0 : ve2.map((Ze2) => a92.VideoLayer.fromPartial(Ze2))) || [], De2;
  } };
  function Ge2() {
    return { sid: "", type: 0, name: "", muted: false, width: 0, height: 0, simulcast: false, disableDtx: false, source: 0, layers: [], mimeType: "", mid: "", codecs: [], stereo: false, disableRed: false };
  }
  a92.TrackInfo = { encode(O2, j = l2.default.Writer.create()) {
    O2.sid !== "" && j.uint32(10).string(O2.sid), O2.type !== 0 && j.uint32(16).int32(O2.type), O2.name !== "" && j.uint32(26).string(O2.name), O2.muted === true && j.uint32(32).bool(O2.muted), O2.width !== 0 && j.uint32(40).uint32(O2.width), O2.height !== 0 && j.uint32(48).uint32(O2.height), O2.simulcast === true && j.uint32(56).bool(O2.simulcast), O2.disableDtx === true && j.uint32(64).bool(O2.disableDtx), O2.source !== 0 && j.uint32(72).int32(O2.source);
    for (const se2 of O2.layers)
      a92.VideoLayer.encode(se2, j.uint32(82).fork()).ldelim();
    O2.mimeType !== "" && j.uint32(90).string(O2.mimeType), O2.mid !== "" && j.uint32(98).string(O2.mid);
    for (const se2 of O2.codecs)
      a92.SimulcastCodecInfo.encode(se2, j.uint32(106).fork()).ldelim();
    return O2.stereo === true && j.uint32(112).bool(O2.stereo), O2.disableRed === true && j.uint32(120).bool(O2.disableRed), j;
  }, decode(O2, j) {
    const se2 = O2 instanceof l2.default.Reader ? O2 : new l2.default.Reader(O2);
    let _e = j === void 0 ? se2.len : se2.pos + j;
    const ve2 = Ge2();
    for (; se2.pos < _e; ) {
      const De2 = se2.uint32();
      switch (De2 >>> 3) {
        case 1:
          ve2.sid = se2.string();
          break;
        case 2:
          ve2.type = se2.int32();
          break;
        case 3:
          ve2.name = se2.string();
          break;
        case 4:
          ve2.muted = se2.bool();
          break;
        case 5:
          ve2.width = se2.uint32();
          break;
        case 6:
          ve2.height = se2.uint32();
          break;
        case 7:
          ve2.simulcast = se2.bool();
          break;
        case 8:
          ve2.disableDtx = se2.bool();
          break;
        case 9:
          ve2.source = se2.int32();
          break;
        case 10:
          ve2.layers.push(a92.VideoLayer.decode(se2, se2.uint32()));
          break;
        case 11:
          ve2.mimeType = se2.string();
          break;
        case 12:
          ve2.mid = se2.string();
          break;
        case 13:
          ve2.codecs.push(a92.SimulcastCodecInfo.decode(se2, se2.uint32()));
          break;
        case 14:
          ve2.stereo = se2.bool();
          break;
        case 15:
          ve2.disableRed = se2.bool();
          break;
        default:
          se2.skipType(De2 & 7);
          break;
      }
    }
    return ve2;
  }, fromJSON(O2) {
    return { sid: ue2(O2.sid) ? String(O2.sid) : "", type: ue2(O2.type) ? g2(O2.type) : 0, name: ue2(O2.name) ? String(O2.name) : "", muted: ue2(O2.muted) ? !!O2.muted : false, width: ue2(O2.width) ? Number(O2.width) : 0, height: ue2(O2.height) ? Number(O2.height) : 0, simulcast: ue2(O2.simulcast) ? !!O2.simulcast : false, disableDtx: ue2(O2.disableDtx) ? !!O2.disableDtx : false, source: ue2(O2.source) ? k(O2.source) : 0, layers: Array.isArray(O2 == null ? void 0 : O2.layers) ? O2.layers.map((j) => a92.VideoLayer.fromJSON(j)) : [], mimeType: ue2(O2.mimeType) ? String(O2.mimeType) : "", mid: ue2(O2.mid) ? String(O2.mid) : "", codecs: Array.isArray(O2 == null ? void 0 : O2.codecs) ? O2.codecs.map((j) => a92.SimulcastCodecInfo.fromJSON(j)) : [], stereo: ue2(O2.stereo) ? !!O2.stereo : false, disableRed: ue2(O2.disableRed) ? !!O2.disableRed : false };
  }, toJSON(O2) {
    const j = {};
    return O2.sid !== void 0 && (j.sid = O2.sid), O2.type !== void 0 && (j.type = E2(O2.type)), O2.name !== void 0 && (j.name = O2.name), O2.muted !== void 0 && (j.muted = O2.muted), O2.width !== void 0 && (j.width = Math.round(O2.width)), O2.height !== void 0 && (j.height = Math.round(O2.height)), O2.simulcast !== void 0 && (j.simulcast = O2.simulcast), O2.disableDtx !== void 0 && (j.disableDtx = O2.disableDtx), O2.source !== void 0 && (j.source = L2(O2.source)), O2.layers ? j.layers = O2.layers.map((se2) => se2 ? a92.VideoLayer.toJSON(se2) : void 0) : j.layers = [], O2.mimeType !== void 0 && (j.mimeType = O2.mimeType), O2.mid !== void 0 && (j.mid = O2.mid), O2.codecs ? j.codecs = O2.codecs.map((se2) => se2 ? a92.SimulcastCodecInfo.toJSON(se2) : void 0) : j.codecs = [], O2.stereo !== void 0 && (j.stereo = O2.stereo), O2.disableRed !== void 0 && (j.disableRed = O2.disableRed), j;
  }, fromPartial(O2) {
    var j, se2, _e, ve2, De2, Ze2, Qe2, ot, ft, Ce2, I2, F2, z2, Te2, fe2;
    const ke2 = Ge2();
    return ke2.sid = (j = O2.sid) !== null && j !== void 0 ? j : "", ke2.type = (se2 = O2.type) !== null && se2 !== void 0 ? se2 : 0, ke2.name = (_e = O2.name) !== null && _e !== void 0 ? _e : "", ke2.muted = (ve2 = O2.muted) !== null && ve2 !== void 0 ? ve2 : false, ke2.width = (De2 = O2.width) !== null && De2 !== void 0 ? De2 : 0, ke2.height = (Ze2 = O2.height) !== null && Ze2 !== void 0 ? Ze2 : 0, ke2.simulcast = (Qe2 = O2.simulcast) !== null && Qe2 !== void 0 ? Qe2 : false, ke2.disableDtx = (ot = O2.disableDtx) !== null && ot !== void 0 ? ot : false, ke2.source = (ft = O2.source) !== null && ft !== void 0 ? ft : 0, ke2.layers = ((Ce2 = O2.layers) === null || Ce2 === void 0 ? void 0 : Ce2.map((it) => a92.VideoLayer.fromPartial(it))) || [], ke2.mimeType = (I2 = O2.mimeType) !== null && I2 !== void 0 ? I2 : "", ke2.mid = (F2 = O2.mid) !== null && F2 !== void 0 ? F2 : "", ke2.codecs = ((z2 = O2.codecs) === null || z2 === void 0 ? void 0 : z2.map((it) => a92.SimulcastCodecInfo.fromPartial(it))) || [], ke2.stereo = (Te2 = O2.stereo) !== null && Te2 !== void 0 ? Te2 : false, ke2.disableRed = (fe2 = O2.disableRed) !== null && fe2 !== void 0 ? fe2 : false, ke2;
  } };
  function He2() {
    return { quality: 0, width: 0, height: 0, bitrate: 0, ssrc: 0 };
  }
  a92.VideoLayer = { encode(O2, j = l2.default.Writer.create()) {
    return O2.quality !== 0 && j.uint32(8).int32(O2.quality), O2.width !== 0 && j.uint32(16).uint32(O2.width), O2.height !== 0 && j.uint32(24).uint32(O2.height), O2.bitrate !== 0 && j.uint32(32).uint32(O2.bitrate), O2.ssrc !== 0 && j.uint32(40).uint32(O2.ssrc), j;
  }, decode(O2, j) {
    const se2 = O2 instanceof l2.default.Reader ? O2 : new l2.default.Reader(O2);
    let _e = j === void 0 ? se2.len : se2.pos + j;
    const ve2 = He2();
    for (; se2.pos < _e; ) {
      const De2 = se2.uint32();
      switch (De2 >>> 3) {
        case 1:
          ve2.quality = se2.int32();
          break;
        case 2:
          ve2.width = se2.uint32();
          break;
        case 3:
          ve2.height = se2.uint32();
          break;
        case 4:
          ve2.bitrate = se2.uint32();
          break;
        case 5:
          ve2.ssrc = se2.uint32();
          break;
        default:
          se2.skipType(De2 & 7);
          break;
      }
    }
    return ve2;
  }, fromJSON(O2) {
    return { quality: ue2(O2.quality) ? $(O2.quality) : 0, width: ue2(O2.width) ? Number(O2.width) : 0, height: ue2(O2.height) ? Number(O2.height) : 0, bitrate: ue2(O2.bitrate) ? Number(O2.bitrate) : 0, ssrc: ue2(O2.ssrc) ? Number(O2.ssrc) : 0 };
  }, toJSON(O2) {
    const j = {};
    return O2.quality !== void 0 && (j.quality = J2(O2.quality)), O2.width !== void 0 && (j.width = Math.round(O2.width)), O2.height !== void 0 && (j.height = Math.round(O2.height)), O2.bitrate !== void 0 && (j.bitrate = Math.round(O2.bitrate)), O2.ssrc !== void 0 && (j.ssrc = Math.round(O2.ssrc)), j;
  }, fromPartial(O2) {
    var j, se2, _e, ve2, De2;
    const Ze2 = He2();
    return Ze2.quality = (j = O2.quality) !== null && j !== void 0 ? j : 0, Ze2.width = (se2 = O2.width) !== null && se2 !== void 0 ? se2 : 0, Ze2.height = (_e = O2.height) !== null && _e !== void 0 ? _e : 0, Ze2.bitrate = (ve2 = O2.bitrate) !== null && ve2 !== void 0 ? ve2 : 0, Ze2.ssrc = (De2 = O2.ssrc) !== null && De2 !== void 0 ? De2 : 0, Ze2;
  } };
  function Ve2() {
    return { kind: 0, user: void 0, speaker: void 0 };
  }
  a92.DataPacket = { encode(O2, j = l2.default.Writer.create()) {
    return O2.kind !== 0 && j.uint32(8).int32(O2.kind), O2.user !== void 0 && a92.UserPacket.encode(O2.user, j.uint32(18).fork()).ldelim(), O2.speaker !== void 0 && a92.ActiveSpeakerUpdate.encode(O2.speaker, j.uint32(26).fork()).ldelim(), j;
  }, decode(O2, j) {
    const se2 = O2 instanceof l2.default.Reader ? O2 : new l2.default.Reader(O2);
    let _e = j === void 0 ? se2.len : se2.pos + j;
    const ve2 = Ve2();
    for (; se2.pos < _e; ) {
      const De2 = se2.uint32();
      switch (De2 >>> 3) {
        case 1:
          ve2.kind = se2.int32();
          break;
        case 2:
          ve2.user = a92.UserPacket.decode(se2, se2.uint32());
          break;
        case 3:
          ve2.speaker = a92.ActiveSpeakerUpdate.decode(se2, se2.uint32());
          break;
        default:
          se2.skipType(De2 & 7);
          break;
      }
    }
    return ve2;
  }, fromJSON(O2) {
    return { kind: ue2(O2.kind) ? D2(O2.kind) : 0, user: ue2(O2.user) ? a92.UserPacket.fromJSON(O2.user) : void 0, speaker: ue2(O2.speaker) ? a92.ActiveSpeakerUpdate.fromJSON(O2.speaker) : void 0 };
  }, toJSON(O2) {
    const j = {};
    return O2.kind !== void 0 && (j.kind = W2(O2.kind)), O2.user !== void 0 && (j.user = O2.user ? a92.UserPacket.toJSON(O2.user) : void 0), O2.speaker !== void 0 && (j.speaker = O2.speaker ? a92.ActiveSpeakerUpdate.toJSON(O2.speaker) : void 0), j;
  }, fromPartial(O2) {
    var j;
    const se2 = Ve2();
    return se2.kind = (j = O2.kind) !== null && j !== void 0 ? j : 0, se2.user = O2.user !== void 0 && O2.user !== null ? a92.UserPacket.fromPartial(O2.user) : void 0, se2.speaker = O2.speaker !== void 0 && O2.speaker !== null ? a92.ActiveSpeakerUpdate.fromPartial(O2.speaker) : void 0, se2;
  } };
  function be2() {
    return { speakers: [] };
  }
  a92.ActiveSpeakerUpdate = { encode(O2, j = l2.default.Writer.create()) {
    for (const se2 of O2.speakers)
      a92.SpeakerInfo.encode(se2, j.uint32(10).fork()).ldelim();
    return j;
  }, decode(O2, j) {
    const se2 = O2 instanceof l2.default.Reader ? O2 : new l2.default.Reader(O2);
    let _e = j === void 0 ? se2.len : se2.pos + j;
    const ve2 = be2();
    for (; se2.pos < _e; ) {
      const De2 = se2.uint32();
      switch (De2 >>> 3) {
        case 1:
          ve2.speakers.push(a92.SpeakerInfo.decode(se2, se2.uint32()));
          break;
        default:
          se2.skipType(De2 & 7);
          break;
      }
    }
    return ve2;
  }, fromJSON(O2) {
    return { speakers: Array.isArray(O2 == null ? void 0 : O2.speakers) ? O2.speakers.map((j) => a92.SpeakerInfo.fromJSON(j)) : [] };
  }, toJSON(O2) {
    const j = {};
    return O2.speakers ? j.speakers = O2.speakers.map((se2) => se2 ? a92.SpeakerInfo.toJSON(se2) : void 0) : j.speakers = [], j;
  }, fromPartial(O2) {
    var j;
    const se2 = be2();
    return se2.speakers = ((j = O2.speakers) === null || j === void 0 ? void 0 : j.map((_e) => a92.SpeakerInfo.fromPartial(_e))) || [], se2;
  } };
  function Ae2() {
    return { sid: "", level: 0, active: false };
  }
  a92.SpeakerInfo = { encode(O2, j = l2.default.Writer.create()) {
    return O2.sid !== "" && j.uint32(10).string(O2.sid), O2.level !== 0 && j.uint32(21).float(O2.level), O2.active === true && j.uint32(24).bool(O2.active), j;
  }, decode(O2, j) {
    const se2 = O2 instanceof l2.default.Reader ? O2 : new l2.default.Reader(O2);
    let _e = j === void 0 ? se2.len : se2.pos + j;
    const ve2 = Ae2();
    for (; se2.pos < _e; ) {
      const De2 = se2.uint32();
      switch (De2 >>> 3) {
        case 1:
          ve2.sid = se2.string();
          break;
        case 2:
          ve2.level = se2.float();
          break;
        case 3:
          ve2.active = se2.bool();
          break;
        default:
          se2.skipType(De2 & 7);
          break;
      }
    }
    return ve2;
  }, fromJSON(O2) {
    return { sid: ue2(O2.sid) ? String(O2.sid) : "", level: ue2(O2.level) ? Number(O2.level) : 0, active: ue2(O2.active) ? !!O2.active : false };
  }, toJSON(O2) {
    const j = {};
    return O2.sid !== void 0 && (j.sid = O2.sid), O2.level !== void 0 && (j.level = O2.level), O2.active !== void 0 && (j.active = O2.active), j;
  }, fromPartial(O2) {
    var j, se2, _e;
    const ve2 = Ae2();
    return ve2.sid = (j = O2.sid) !== null && j !== void 0 ? j : "", ve2.level = (se2 = O2.level) !== null && se2 !== void 0 ? se2 : 0, ve2.active = (_e = O2.active) !== null && _e !== void 0 ? _e : false, ve2;
  } };
  function qe2() {
    return { participantSid: "", payload: new Uint8Array(), destinationSids: [] };
  }
  a92.UserPacket = { encode(O2, j = l2.default.Writer.create()) {
    O2.participantSid !== "" && j.uint32(10).string(O2.participantSid), O2.payload.length !== 0 && j.uint32(18).bytes(O2.payload);
    for (const se2 of O2.destinationSids)
      j.uint32(26).string(se2);
    return j;
  }, decode(O2, j) {
    const se2 = O2 instanceof l2.default.Reader ? O2 : new l2.default.Reader(O2);
    let _e = j === void 0 ? se2.len : se2.pos + j;
    const ve2 = qe2();
    for (; se2.pos < _e; ) {
      const De2 = se2.uint32();
      switch (De2 >>> 3) {
        case 1:
          ve2.participantSid = se2.string();
          break;
        case 2:
          ve2.payload = se2.bytes();
          break;
        case 3:
          ve2.destinationSids.push(se2.string());
          break;
        default:
          se2.skipType(De2 & 7);
          break;
      }
    }
    return ve2;
  }, fromJSON(O2) {
    return { participantSid: ue2(O2.participantSid) ? String(O2.participantSid) : "", payload: ue2(O2.payload) ? je2(O2.payload) : new Uint8Array(), destinationSids: Array.isArray(O2 == null ? void 0 : O2.destinationSids) ? O2.destinationSids.map((j) => String(j)) : [] };
  }, toJSON(O2) {
    const j = {};
    return O2.participantSid !== void 0 && (j.participantSid = O2.participantSid), O2.payload !== void 0 && (j.payload = tt(O2.payload !== void 0 ? O2.payload : new Uint8Array())), O2.destinationSids ? j.destinationSids = O2.destinationSids.map((se2) => se2) : j.destinationSids = [], j;
  }, fromPartial(O2) {
    var j, se2, _e;
    const ve2 = qe2();
    return ve2.participantSid = (j = O2.participantSid) !== null && j !== void 0 ? j : "", ve2.payload = (se2 = O2.payload) !== null && se2 !== void 0 ? se2 : new Uint8Array(), ve2.destinationSids = ((_e = O2.destinationSids) === null || _e === void 0 ? void 0 : _e.map((De2) => De2)) || [], ve2;
  } };
  function xe2() {
    return { participantSid: "", trackSids: [] };
  }
  a92.ParticipantTracks = { encode(O2, j = l2.default.Writer.create()) {
    O2.participantSid !== "" && j.uint32(10).string(O2.participantSid);
    for (const se2 of O2.trackSids)
      j.uint32(18).string(se2);
    return j;
  }, decode(O2, j) {
    const se2 = O2 instanceof l2.default.Reader ? O2 : new l2.default.Reader(O2);
    let _e = j === void 0 ? se2.len : se2.pos + j;
    const ve2 = xe2();
    for (; se2.pos < _e; ) {
      const De2 = se2.uint32();
      switch (De2 >>> 3) {
        case 1:
          ve2.participantSid = se2.string();
          break;
        case 2:
          ve2.trackSids.push(se2.string());
          break;
        default:
          se2.skipType(De2 & 7);
          break;
      }
    }
    return ve2;
  }, fromJSON(O2) {
    return { participantSid: ue2(O2.participantSid) ? String(O2.participantSid) : "", trackSids: Array.isArray(O2 == null ? void 0 : O2.trackSids) ? O2.trackSids.map((j) => String(j)) : [] };
  }, toJSON(O2) {
    const j = {};
    return O2.participantSid !== void 0 && (j.participantSid = O2.participantSid), O2.trackSids ? j.trackSids = O2.trackSids.map((se2) => se2) : j.trackSids = [], j;
  }, fromPartial(O2) {
    var j, se2;
    const _e = xe2();
    return _e.participantSid = (j = O2.participantSid) !== null && j !== void 0 ? j : "", _e.trackSids = ((se2 = O2.trackSids) === null || se2 === void 0 ? void 0 : se2.map((ve2) => ve2)) || [], _e;
  } };
  function Pe2() {
    return { edition: 0, version: "", protocol: 0, region: "", nodeId: "", debugInfo: "" };
  }
  a92.ServerInfo = { encode(O2, j = l2.default.Writer.create()) {
    return O2.edition !== 0 && j.uint32(8).int32(O2.edition), O2.version !== "" && j.uint32(18).string(O2.version), O2.protocol !== 0 && j.uint32(24).int32(O2.protocol), O2.region !== "" && j.uint32(34).string(O2.region), O2.nodeId !== "" && j.uint32(42).string(O2.nodeId), O2.debugInfo !== "" && j.uint32(50).string(O2.debugInfo), j;
  }, decode(O2, j) {
    const se2 = O2 instanceof l2.default.Reader ? O2 : new l2.default.Reader(O2);
    let _e = j === void 0 ? se2.len : se2.pos + j;
    const ve2 = Pe2();
    for (; se2.pos < _e; ) {
      const De2 = se2.uint32();
      switch (De2 >>> 3) {
        case 1:
          ve2.edition = se2.int32();
          break;
        case 2:
          ve2.version = se2.string();
          break;
        case 3:
          ve2.protocol = se2.int32();
          break;
        case 4:
          ve2.region = se2.string();
          break;
        case 5:
          ve2.nodeId = se2.string();
          break;
        case 6:
          ve2.debugInfo = se2.string();
          break;
        default:
          se2.skipType(De2 & 7);
          break;
      }
    }
    return ve2;
  }, fromJSON(O2) {
    return { edition: ue2(O2.edition) ? ae2(O2.edition) : 0, version: ue2(O2.version) ? String(O2.version) : "", protocol: ue2(O2.protocol) ? Number(O2.protocol) : 0, region: ue2(O2.region) ? String(O2.region) : "", nodeId: ue2(O2.nodeId) ? String(O2.nodeId) : "", debugInfo: ue2(O2.debugInfo) ? String(O2.debugInfo) : "" };
  }, toJSON(O2) {
    const j = {};
    return O2.edition !== void 0 && (j.edition = ye2(O2.edition)), O2.version !== void 0 && (j.version = O2.version), O2.protocol !== void 0 && (j.protocol = Math.round(O2.protocol)), O2.region !== void 0 && (j.region = O2.region), O2.nodeId !== void 0 && (j.nodeId = O2.nodeId), O2.debugInfo !== void 0 && (j.debugInfo = O2.debugInfo), j;
  }, fromPartial(O2) {
    var j, se2, _e, ve2, De2, Ze2;
    const Qe2 = Pe2();
    return Qe2.edition = (j = O2.edition) !== null && j !== void 0 ? j : 0, Qe2.version = (se2 = O2.version) !== null && se2 !== void 0 ? se2 : "", Qe2.protocol = (_e = O2.protocol) !== null && _e !== void 0 ? _e : 0, Qe2.region = (ve2 = O2.region) !== null && ve2 !== void 0 ? ve2 : "", Qe2.nodeId = (De2 = O2.nodeId) !== null && De2 !== void 0 ? De2 : "", Qe2.debugInfo = (Ze2 = O2.debugInfo) !== null && Ze2 !== void 0 ? Ze2 : "", Qe2;
  } };
  function C2() {
    return { sdk: 0, version: "", protocol: 0, os: "", osVersion: "", deviceModel: "", browser: "", browserVersion: "", address: "", network: "" };
  }
  a92.ClientInfo = { encode(O2, j = l2.default.Writer.create()) {
    return O2.sdk !== 0 && j.uint32(8).int32(O2.sdk), O2.version !== "" && j.uint32(18).string(O2.version), O2.protocol !== 0 && j.uint32(24).int32(O2.protocol), O2.os !== "" && j.uint32(34).string(O2.os), O2.osVersion !== "" && j.uint32(42).string(O2.osVersion), O2.deviceModel !== "" && j.uint32(50).string(O2.deviceModel), O2.browser !== "" && j.uint32(58).string(O2.browser), O2.browserVersion !== "" && j.uint32(66).string(O2.browserVersion), O2.address !== "" && j.uint32(74).string(O2.address), O2.network !== "" && j.uint32(82).string(O2.network), j;
  }, decode(O2, j) {
    const se2 = O2 instanceof l2.default.Reader ? O2 : new l2.default.Reader(O2);
    let _e = j === void 0 ? se2.len : se2.pos + j;
    const ve2 = C2();
    for (; se2.pos < _e; ) {
      const De2 = se2.uint32();
      switch (De2 >>> 3) {
        case 1:
          ve2.sdk = se2.int32();
          break;
        case 2:
          ve2.version = se2.string();
          break;
        case 3:
          ve2.protocol = se2.int32();
          break;
        case 4:
          ve2.os = se2.string();
          break;
        case 5:
          ve2.osVersion = se2.string();
          break;
        case 6:
          ve2.deviceModel = se2.string();
          break;
        case 7:
          ve2.browser = se2.string();
          break;
        case 8:
          ve2.browserVersion = se2.string();
          break;
        case 9:
          ve2.address = se2.string();
          break;
        case 10:
          ve2.network = se2.string();
          break;
        default:
          se2.skipType(De2 & 7);
          break;
      }
    }
    return ve2;
  }, fromJSON(O2) {
    return { sdk: ue2(O2.sdk) ? le2(O2.sdk) : 0, version: ue2(O2.version) ? String(O2.version) : "", protocol: ue2(O2.protocol) ? Number(O2.protocol) : 0, os: ue2(O2.os) ? String(O2.os) : "", osVersion: ue2(O2.osVersion) ? String(O2.osVersion) : "", deviceModel: ue2(O2.deviceModel) ? String(O2.deviceModel) : "", browser: ue2(O2.browser) ? String(O2.browser) : "", browserVersion: ue2(O2.browserVersion) ? String(O2.browserVersion) : "", address: ue2(O2.address) ? String(O2.address) : "", network: ue2(O2.network) ? String(O2.network) : "" };
  }, toJSON(O2) {
    const j = {};
    return O2.sdk !== void 0 && (j.sdk = we2(O2.sdk)), O2.version !== void 0 && (j.version = O2.version), O2.protocol !== void 0 && (j.protocol = Math.round(O2.protocol)), O2.os !== void 0 && (j.os = O2.os), O2.osVersion !== void 0 && (j.osVersion = O2.osVersion), O2.deviceModel !== void 0 && (j.deviceModel = O2.deviceModel), O2.browser !== void 0 && (j.browser = O2.browser), O2.browserVersion !== void 0 && (j.browserVersion = O2.browserVersion), O2.address !== void 0 && (j.address = O2.address), O2.network !== void 0 && (j.network = O2.network), j;
  }, fromPartial(O2) {
    var j, se2, _e, ve2, De2, Ze2, Qe2, ot, ft, Ce2;
    const I2 = C2();
    return I2.sdk = (j = O2.sdk) !== null && j !== void 0 ? j : 0, I2.version = (se2 = O2.version) !== null && se2 !== void 0 ? se2 : "", I2.protocol = (_e = O2.protocol) !== null && _e !== void 0 ? _e : 0, I2.os = (ve2 = O2.os) !== null && ve2 !== void 0 ? ve2 : "", I2.osVersion = (De2 = O2.osVersion) !== null && De2 !== void 0 ? De2 : "", I2.deviceModel = (Ze2 = O2.deviceModel) !== null && Ze2 !== void 0 ? Ze2 : "", I2.browser = (Qe2 = O2.browser) !== null && Qe2 !== void 0 ? Qe2 : "", I2.browserVersion = (ot = O2.browserVersion) !== null && ot !== void 0 ? ot : "", I2.address = (ft = O2.address) !== null && ft !== void 0 ? ft : "", I2.network = (Ce2 = O2.network) !== null && Ce2 !== void 0 ? Ce2 : "", I2;
  } };
  function x2() {
    return { video: void 0, screen: void 0, resumeConnection: 0, disabledCodecs: void 0, forceRelay: 0 };
  }
  a92.ClientConfiguration = { encode(O2, j = l2.default.Writer.create()) {
    return O2.video !== void 0 && a92.VideoConfiguration.encode(O2.video, j.uint32(10).fork()).ldelim(), O2.screen !== void 0 && a92.VideoConfiguration.encode(O2.screen, j.uint32(18).fork()).ldelim(), O2.resumeConnection !== 0 && j.uint32(24).int32(O2.resumeConnection), O2.disabledCodecs !== void 0 && a92.DisabledCodecs.encode(O2.disabledCodecs, j.uint32(34).fork()).ldelim(), O2.forceRelay !== 0 && j.uint32(40).int32(O2.forceRelay), j;
  }, decode(O2, j) {
    const se2 = O2 instanceof l2.default.Reader ? O2 : new l2.default.Reader(O2);
    let _e = j === void 0 ? se2.len : se2.pos + j;
    const ve2 = x2();
    for (; se2.pos < _e; ) {
      const De2 = se2.uint32();
      switch (De2 >>> 3) {
        case 1:
          ve2.video = a92.VideoConfiguration.decode(se2, se2.uint32());
          break;
        case 2:
          ve2.screen = a92.VideoConfiguration.decode(se2, se2.uint32());
          break;
        case 3:
          ve2.resumeConnection = se2.int32();
          break;
        case 4:
          ve2.disabledCodecs = a92.DisabledCodecs.decode(se2, se2.uint32());
          break;
        case 5:
          ve2.forceRelay = se2.int32();
          break;
        default:
          se2.skipType(De2 & 7);
          break;
      }
    }
    return ve2;
  }, fromJSON(O2) {
    return { video: ue2(O2.video) ? a92.VideoConfiguration.fromJSON(O2.video) : void 0, screen: ue2(O2.screen) ? a92.VideoConfiguration.fromJSON(O2.screen) : void 0, resumeConnection: ue2(O2.resumeConnection) ? B2(O2.resumeConnection) : 0, disabledCodecs: ue2(O2.disabledCodecs) ? a92.DisabledCodecs.fromJSON(O2.disabledCodecs) : void 0, forceRelay: ue2(O2.forceRelay) ? B2(O2.forceRelay) : 0 };
  }, toJSON(O2) {
    const j = {};
    return O2.video !== void 0 && (j.video = O2.video ? a92.VideoConfiguration.toJSON(O2.video) : void 0), O2.screen !== void 0 && (j.screen = O2.screen ? a92.VideoConfiguration.toJSON(O2.screen) : void 0), O2.resumeConnection !== void 0 && (j.resumeConnection = Y2(O2.resumeConnection)), O2.disabledCodecs !== void 0 && (j.disabledCodecs = O2.disabledCodecs ? a92.DisabledCodecs.toJSON(O2.disabledCodecs) : void 0), O2.forceRelay !== void 0 && (j.forceRelay = Y2(O2.forceRelay)), j;
  }, fromPartial(O2) {
    var j, se2;
    const _e = x2();
    return _e.video = O2.video !== void 0 && O2.video !== null ? a92.VideoConfiguration.fromPartial(O2.video) : void 0, _e.screen = O2.screen !== void 0 && O2.screen !== null ? a92.VideoConfiguration.fromPartial(O2.screen) : void 0, _e.resumeConnection = (j = O2.resumeConnection) !== null && j !== void 0 ? j : 0, _e.disabledCodecs = O2.disabledCodecs !== void 0 && O2.disabledCodecs !== null ? a92.DisabledCodecs.fromPartial(O2.disabledCodecs) : void 0, _e.forceRelay = (se2 = O2.forceRelay) !== null && se2 !== void 0 ? se2 : 0, _e;
  } };
  function Q2() {
    return { hardwareEncoder: 0 };
  }
  a92.VideoConfiguration = { encode(O2, j = l2.default.Writer.create()) {
    return O2.hardwareEncoder !== 0 && j.uint32(8).int32(O2.hardwareEncoder), j;
  }, decode(O2, j) {
    const se2 = O2 instanceof l2.default.Reader ? O2 : new l2.default.Reader(O2);
    let _e = j === void 0 ? se2.len : se2.pos + j;
    const ve2 = Q2();
    for (; se2.pos < _e; ) {
      const De2 = se2.uint32();
      switch (De2 >>> 3) {
        case 1:
          ve2.hardwareEncoder = se2.int32();
          break;
        default:
          se2.skipType(De2 & 7);
          break;
      }
    }
    return ve2;
  }, fromJSON(O2) {
    return { hardwareEncoder: ue2(O2.hardwareEncoder) ? B2(O2.hardwareEncoder) : 0 };
  }, toJSON(O2) {
    const j = {};
    return O2.hardwareEncoder !== void 0 && (j.hardwareEncoder = Y2(O2.hardwareEncoder)), j;
  }, fromPartial(O2) {
    var j;
    const se2 = Q2();
    return se2.hardwareEncoder = (j = O2.hardwareEncoder) !== null && j !== void 0 ? j : 0, se2;
  } };
  function Se2() {
    return { codecs: [] };
  }
  a92.DisabledCodecs = { encode(O2, j = l2.default.Writer.create()) {
    for (const se2 of O2.codecs)
      a92.Codec.encode(se2, j.uint32(10).fork()).ldelim();
    return j;
  }, decode(O2, j) {
    const se2 = O2 instanceof l2.default.Reader ? O2 : new l2.default.Reader(O2);
    let _e = j === void 0 ? se2.len : se2.pos + j;
    const ve2 = Se2();
    for (; se2.pos < _e; ) {
      const De2 = se2.uint32();
      switch (De2 >>> 3) {
        case 1:
          ve2.codecs.push(a92.Codec.decode(se2, se2.uint32()));
          break;
        default:
          se2.skipType(De2 & 7);
          break;
      }
    }
    return ve2;
  }, fromJSON(O2) {
    return { codecs: Array.isArray(O2 == null ? void 0 : O2.codecs) ? O2.codecs.map((j) => a92.Codec.fromJSON(j)) : [] };
  }, toJSON(O2) {
    const j = {};
    return O2.codecs ? j.codecs = O2.codecs.map((se2) => se2 ? a92.Codec.toJSON(se2) : void 0) : j.codecs = [], j;
  }, fromPartial(O2) {
    var j;
    const se2 = Se2();
    return se2.codecs = ((j = O2.codecs) === null || j === void 0 ? void 0 : j.map((_e) => a92.Codec.fromPartial(_e))) || [], se2;
  } };
  function me2() {
    return { startTime: void 0, endTime: void 0, duration: 0, packets: 0, packetRate: 0, bytes: 0, headerBytes: 0, bitrate: 0, packetsLost: 0, packetLossRate: 0, packetLossPercentage: 0, packetsDuplicate: 0, packetDuplicateRate: 0, bytesDuplicate: 0, headerBytesDuplicate: 0, bitrateDuplicate: 0, packetsPadding: 0, packetPaddingRate: 0, bytesPadding: 0, headerBytesPadding: 0, bitratePadding: 0, packetsOutOfOrder: 0, frames: 0, frameRate: 0, jitterCurrent: 0, jitterMax: 0, gapHistogram: {}, nacks: 0, nackAcks: 0, nackMisses: 0, nackRepeated: 0, plis: 0, lastPli: void 0, firs: 0, lastFir: void 0, rttCurrent: 0, rttMax: 0, keyFrames: 0, lastKeyFrame: void 0, layerLockPlis: 0, lastLayerLockPli: void 0 };
  }
  a92.RTPStats = { encode(O2, j = l2.default.Writer.create()) {
    return O2.startTime !== void 0 && v2.Timestamp.encode(Oe2(O2.startTime), j.uint32(10).fork()).ldelim(), O2.endTime !== void 0 && v2.Timestamp.encode(Oe2(O2.endTime), j.uint32(18).fork()).ldelim(), O2.duration !== 0 && j.uint32(25).double(O2.duration), O2.packets !== 0 && j.uint32(32).uint32(O2.packets), O2.packetRate !== 0 && j.uint32(41).double(O2.packetRate), O2.bytes !== 0 && j.uint32(48).uint64(O2.bytes), O2.headerBytes !== 0 && j.uint32(312).uint64(O2.headerBytes), O2.bitrate !== 0 && j.uint32(57).double(O2.bitrate), O2.packetsLost !== 0 && j.uint32(64).uint32(O2.packetsLost), O2.packetLossRate !== 0 && j.uint32(73).double(O2.packetLossRate), O2.packetLossPercentage !== 0 && j.uint32(85).float(O2.packetLossPercentage), O2.packetsDuplicate !== 0 && j.uint32(88).uint32(O2.packetsDuplicate), O2.packetDuplicateRate !== 0 && j.uint32(97).double(O2.packetDuplicateRate), O2.bytesDuplicate !== 0 && j.uint32(104).uint64(O2.bytesDuplicate), O2.headerBytesDuplicate !== 0 && j.uint32(320).uint64(O2.headerBytesDuplicate), O2.bitrateDuplicate !== 0 && j.uint32(113).double(O2.bitrateDuplicate), O2.packetsPadding !== 0 && j.uint32(120).uint32(O2.packetsPadding), O2.packetPaddingRate !== 0 && j.uint32(129).double(O2.packetPaddingRate), O2.bytesPadding !== 0 && j.uint32(136).uint64(O2.bytesPadding), O2.headerBytesPadding !== 0 && j.uint32(328).uint64(O2.headerBytesPadding), O2.bitratePadding !== 0 && j.uint32(145).double(O2.bitratePadding), O2.packetsOutOfOrder !== 0 && j.uint32(152).uint32(O2.packetsOutOfOrder), O2.frames !== 0 && j.uint32(160).uint32(O2.frames), O2.frameRate !== 0 && j.uint32(169).double(O2.frameRate), O2.jitterCurrent !== 0 && j.uint32(177).double(O2.jitterCurrent), O2.jitterMax !== 0 && j.uint32(185).double(O2.jitterMax), Object.entries(O2.gapHistogram).forEach(([se2, _e]) => {
      a92.RTPStats_GapHistogramEntry.encode({ key: se2, value: _e }, j.uint32(194).fork()).ldelim();
    }), O2.nacks !== 0 && j.uint32(200).uint32(O2.nacks), O2.nackAcks !== 0 && j.uint32(296).uint32(O2.nackAcks), O2.nackMisses !== 0 && j.uint32(208).uint32(O2.nackMisses), O2.nackRepeated !== 0 && j.uint32(304).uint32(O2.nackRepeated), O2.plis !== 0 && j.uint32(216).uint32(O2.plis), O2.lastPli !== void 0 && v2.Timestamp.encode(Oe2(O2.lastPli), j.uint32(226).fork()).ldelim(), O2.firs !== 0 && j.uint32(232).uint32(O2.firs), O2.lastFir !== void 0 && v2.Timestamp.encode(Oe2(O2.lastFir), j.uint32(242).fork()).ldelim(), O2.rttCurrent !== 0 && j.uint32(248).uint32(O2.rttCurrent), O2.rttMax !== 0 && j.uint32(256).uint32(O2.rttMax), O2.keyFrames !== 0 && j.uint32(264).uint32(O2.keyFrames), O2.lastKeyFrame !== void 0 && v2.Timestamp.encode(Oe2(O2.lastKeyFrame), j.uint32(274).fork()).ldelim(), O2.layerLockPlis !== 0 && j.uint32(280).uint32(O2.layerLockPlis), O2.lastLayerLockPli !== void 0 && v2.Timestamp.encode(Oe2(O2.lastLayerLockPli), j.uint32(290).fork()).ldelim(), j;
  }, decode(O2, j) {
    const se2 = O2 instanceof l2.default.Reader ? O2 : new l2.default.Reader(O2);
    let _e = j === void 0 ? se2.len : se2.pos + j;
    const ve2 = me2();
    for (; se2.pos < _e; ) {
      const De2 = se2.uint32();
      switch (De2 >>> 3) {
        case 1:
          ve2.startTime = P2(v2.Timestamp.decode(se2, se2.uint32()));
          break;
        case 2:
          ve2.endTime = P2(v2.Timestamp.decode(se2, se2.uint32()));
          break;
        case 3:
          ve2.duration = se2.double();
          break;
        case 4:
          ve2.packets = se2.uint32();
          break;
        case 5:
          ve2.packetRate = se2.double();
          break;
        case 6:
          ve2.bytes = ie2(se2.uint64());
          break;
        case 39:
          ve2.headerBytes = ie2(se2.uint64());
          break;
        case 7:
          ve2.bitrate = se2.double();
          break;
        case 8:
          ve2.packetsLost = se2.uint32();
          break;
        case 9:
          ve2.packetLossRate = se2.double();
          break;
        case 10:
          ve2.packetLossPercentage = se2.float();
          break;
        case 11:
          ve2.packetsDuplicate = se2.uint32();
          break;
        case 12:
          ve2.packetDuplicateRate = se2.double();
          break;
        case 13:
          ve2.bytesDuplicate = ie2(se2.uint64());
          break;
        case 40:
          ve2.headerBytesDuplicate = ie2(se2.uint64());
          break;
        case 14:
          ve2.bitrateDuplicate = se2.double();
          break;
        case 15:
          ve2.packetsPadding = se2.uint32();
          break;
        case 16:
          ve2.packetPaddingRate = se2.double();
          break;
        case 17:
          ve2.bytesPadding = ie2(se2.uint64());
          break;
        case 41:
          ve2.headerBytesPadding = ie2(se2.uint64());
          break;
        case 18:
          ve2.bitratePadding = se2.double();
          break;
        case 19:
          ve2.packetsOutOfOrder = se2.uint32();
          break;
        case 20:
          ve2.frames = se2.uint32();
          break;
        case 21:
          ve2.frameRate = se2.double();
          break;
        case 22:
          ve2.jitterCurrent = se2.double();
          break;
        case 23:
          ve2.jitterMax = se2.double();
          break;
        case 24:
          const Ze2 = a92.RTPStats_GapHistogramEntry.decode(se2, se2.uint32());
          Ze2.value !== void 0 && (ve2.gapHistogram[Ze2.key] = Ze2.value);
          break;
        case 25:
          ve2.nacks = se2.uint32();
          break;
        case 37:
          ve2.nackAcks = se2.uint32();
          break;
        case 26:
          ve2.nackMisses = se2.uint32();
          break;
        case 38:
          ve2.nackRepeated = se2.uint32();
          break;
        case 27:
          ve2.plis = se2.uint32();
          break;
        case 28:
          ve2.lastPli = P2(v2.Timestamp.decode(se2, se2.uint32()));
          break;
        case 29:
          ve2.firs = se2.uint32();
          break;
        case 30:
          ve2.lastFir = P2(v2.Timestamp.decode(se2, se2.uint32()));
          break;
        case 31:
          ve2.rttCurrent = se2.uint32();
          break;
        case 32:
          ve2.rttMax = se2.uint32();
          break;
        case 33:
          ve2.keyFrames = se2.uint32();
          break;
        case 34:
          ve2.lastKeyFrame = P2(v2.Timestamp.decode(se2, se2.uint32()));
          break;
        case 35:
          ve2.layerLockPlis = se2.uint32();
          break;
        case 36:
          ve2.lastLayerLockPli = P2(v2.Timestamp.decode(se2, se2.uint32()));
          break;
        default:
          se2.skipType(De2 & 7);
          break;
      }
    }
    return ve2;
  }, fromJSON(O2) {
    return { startTime: ue2(O2.startTime) ? X2(O2.startTime) : void 0, endTime: ue2(O2.endTime) ? X2(O2.endTime) : void 0, duration: ue2(O2.duration) ? Number(O2.duration) : 0, packets: ue2(O2.packets) ? Number(O2.packets) : 0, packetRate: ue2(O2.packetRate) ? Number(O2.packetRate) : 0, bytes: ue2(O2.bytes) ? Number(O2.bytes) : 0, headerBytes: ue2(O2.headerBytes) ? Number(O2.headerBytes) : 0, bitrate: ue2(O2.bitrate) ? Number(O2.bitrate) : 0, packetsLost: ue2(O2.packetsLost) ? Number(O2.packetsLost) : 0, packetLossRate: ue2(O2.packetLossRate) ? Number(O2.packetLossRate) : 0, packetLossPercentage: ue2(O2.packetLossPercentage) ? Number(O2.packetLossPercentage) : 0, packetsDuplicate: ue2(O2.packetsDuplicate) ? Number(O2.packetsDuplicate) : 0, packetDuplicateRate: ue2(O2.packetDuplicateRate) ? Number(O2.packetDuplicateRate) : 0, bytesDuplicate: ue2(O2.bytesDuplicate) ? Number(O2.bytesDuplicate) : 0, headerBytesDuplicate: ue2(O2.headerBytesDuplicate) ? Number(O2.headerBytesDuplicate) : 0, bitrateDuplicate: ue2(O2.bitrateDuplicate) ? Number(O2.bitrateDuplicate) : 0, packetsPadding: ue2(O2.packetsPadding) ? Number(O2.packetsPadding) : 0, packetPaddingRate: ue2(O2.packetPaddingRate) ? Number(O2.packetPaddingRate) : 0, bytesPadding: ue2(O2.bytesPadding) ? Number(O2.bytesPadding) : 0, headerBytesPadding: ue2(O2.headerBytesPadding) ? Number(O2.headerBytesPadding) : 0, bitratePadding: ue2(O2.bitratePadding) ? Number(O2.bitratePadding) : 0, packetsOutOfOrder: ue2(O2.packetsOutOfOrder) ? Number(O2.packetsOutOfOrder) : 0, frames: ue2(O2.frames) ? Number(O2.frames) : 0, frameRate: ue2(O2.frameRate) ? Number(O2.frameRate) : 0, jitterCurrent: ue2(O2.jitterCurrent) ? Number(O2.jitterCurrent) : 0, jitterMax: ue2(O2.jitterMax) ? Number(O2.jitterMax) : 0, gapHistogram: Ee2(O2.gapHistogram) ? Object.entries(O2.gapHistogram).reduce((j, [se2, _e]) => (j[Number(se2)] = Number(_e), j), {}) : {}, nacks: ue2(O2.nacks) ? Number(O2.nacks) : 0, nackAcks: ue2(O2.nackAcks) ? Number(O2.nackAcks) : 0, nackMisses: ue2(O2.nackMisses) ? Number(O2.nackMisses) : 0, nackRepeated: ue2(O2.nackRepeated) ? Number(O2.nackRepeated) : 0, plis: ue2(O2.plis) ? Number(O2.plis) : 0, lastPli: ue2(O2.lastPli) ? X2(O2.lastPli) : void 0, firs: ue2(O2.firs) ? Number(O2.firs) : 0, lastFir: ue2(O2.lastFir) ? X2(O2.lastFir) : void 0, rttCurrent: ue2(O2.rttCurrent) ? Number(O2.rttCurrent) : 0, rttMax: ue2(O2.rttMax) ? Number(O2.rttMax) : 0, keyFrames: ue2(O2.keyFrames) ? Number(O2.keyFrames) : 0, lastKeyFrame: ue2(O2.lastKeyFrame) ? X2(O2.lastKeyFrame) : void 0, layerLockPlis: ue2(O2.layerLockPlis) ? Number(O2.layerLockPlis) : 0, lastLayerLockPli: ue2(O2.lastLayerLockPli) ? X2(O2.lastLayerLockPli) : void 0 };
  }, toJSON(O2) {
    const j = {};
    return O2.startTime !== void 0 && (j.startTime = O2.startTime.toISOString()), O2.endTime !== void 0 && (j.endTime = O2.endTime.toISOString()), O2.duration !== void 0 && (j.duration = O2.duration), O2.packets !== void 0 && (j.packets = Math.round(O2.packets)), O2.packetRate !== void 0 && (j.packetRate = O2.packetRate), O2.bytes !== void 0 && (j.bytes = Math.round(O2.bytes)), O2.headerBytes !== void 0 && (j.headerBytes = Math.round(O2.headerBytes)), O2.bitrate !== void 0 && (j.bitrate = O2.bitrate), O2.packetsLost !== void 0 && (j.packetsLost = Math.round(O2.packetsLost)), O2.packetLossRate !== void 0 && (j.packetLossRate = O2.packetLossRate), O2.packetLossPercentage !== void 0 && (j.packetLossPercentage = O2.packetLossPercentage), O2.packetsDuplicate !== void 0 && (j.packetsDuplicate = Math.round(O2.packetsDuplicate)), O2.packetDuplicateRate !== void 0 && (j.packetDuplicateRate = O2.packetDuplicateRate), O2.bytesDuplicate !== void 0 && (j.bytesDuplicate = Math.round(O2.bytesDuplicate)), O2.headerBytesDuplicate !== void 0 && (j.headerBytesDuplicate = Math.round(O2.headerBytesDuplicate)), O2.bitrateDuplicate !== void 0 && (j.bitrateDuplicate = O2.bitrateDuplicate), O2.packetsPadding !== void 0 && (j.packetsPadding = Math.round(O2.packetsPadding)), O2.packetPaddingRate !== void 0 && (j.packetPaddingRate = O2.packetPaddingRate), O2.bytesPadding !== void 0 && (j.bytesPadding = Math.round(O2.bytesPadding)), O2.headerBytesPadding !== void 0 && (j.headerBytesPadding = Math.round(O2.headerBytesPadding)), O2.bitratePadding !== void 0 && (j.bitratePadding = O2.bitratePadding), O2.packetsOutOfOrder !== void 0 && (j.packetsOutOfOrder = Math.round(O2.packetsOutOfOrder)), O2.frames !== void 0 && (j.frames = Math.round(O2.frames)), O2.frameRate !== void 0 && (j.frameRate = O2.frameRate), O2.jitterCurrent !== void 0 && (j.jitterCurrent = O2.jitterCurrent), O2.jitterMax !== void 0 && (j.jitterMax = O2.jitterMax), j.gapHistogram = {}, O2.gapHistogram && Object.entries(O2.gapHistogram).forEach(([se2, _e]) => {
      j.gapHistogram[se2] = Math.round(_e);
    }), O2.nacks !== void 0 && (j.nacks = Math.round(O2.nacks)), O2.nackAcks !== void 0 && (j.nackAcks = Math.round(O2.nackAcks)), O2.nackMisses !== void 0 && (j.nackMisses = Math.round(O2.nackMisses)), O2.nackRepeated !== void 0 && (j.nackRepeated = Math.round(O2.nackRepeated)), O2.plis !== void 0 && (j.plis = Math.round(O2.plis)), O2.lastPli !== void 0 && (j.lastPli = O2.lastPli.toISOString()), O2.firs !== void 0 && (j.firs = Math.round(O2.firs)), O2.lastFir !== void 0 && (j.lastFir = O2.lastFir.toISOString()), O2.rttCurrent !== void 0 && (j.rttCurrent = Math.round(O2.rttCurrent)), O2.rttMax !== void 0 && (j.rttMax = Math.round(O2.rttMax)), O2.keyFrames !== void 0 && (j.keyFrames = Math.round(O2.keyFrames)), O2.lastKeyFrame !== void 0 && (j.lastKeyFrame = O2.lastKeyFrame.toISOString()), O2.layerLockPlis !== void 0 && (j.layerLockPlis = Math.round(O2.layerLockPlis)), O2.lastLayerLockPli !== void 0 && (j.lastLayerLockPli = O2.lastLayerLockPli.toISOString()), j;
  }, fromPartial(O2) {
    var j, se2, _e, ve2, De2, Ze2, Qe2, ot, ft, Ce2, I2, F2, z2, Te2, fe2, ke2, it, mt, vt, st, ut, yt, gt, bt, St, Et, ct, Xe2, Ct, Ot, Nt, Pt, wt, At, Dt, pe2, ge2, Re2, Je2, Fe2, ze2;
    const Me2 = me2();
    return Me2.startTime = (j = O2.startTime) !== null && j !== void 0 ? j : void 0, Me2.endTime = (se2 = O2.endTime) !== null && se2 !== void 0 ? se2 : void 0, Me2.duration = (_e = O2.duration) !== null && _e !== void 0 ? _e : 0, Me2.packets = (ve2 = O2.packets) !== null && ve2 !== void 0 ? ve2 : 0, Me2.packetRate = (De2 = O2.packetRate) !== null && De2 !== void 0 ? De2 : 0, Me2.bytes = (Ze2 = O2.bytes) !== null && Ze2 !== void 0 ? Ze2 : 0, Me2.headerBytes = (Qe2 = O2.headerBytes) !== null && Qe2 !== void 0 ? Qe2 : 0, Me2.bitrate = (ot = O2.bitrate) !== null && ot !== void 0 ? ot : 0, Me2.packetsLost = (ft = O2.packetsLost) !== null && ft !== void 0 ? ft : 0, Me2.packetLossRate = (Ce2 = O2.packetLossRate) !== null && Ce2 !== void 0 ? Ce2 : 0, Me2.packetLossPercentage = (I2 = O2.packetLossPercentage) !== null && I2 !== void 0 ? I2 : 0, Me2.packetsDuplicate = (F2 = O2.packetsDuplicate) !== null && F2 !== void 0 ? F2 : 0, Me2.packetDuplicateRate = (z2 = O2.packetDuplicateRate) !== null && z2 !== void 0 ? z2 : 0, Me2.bytesDuplicate = (Te2 = O2.bytesDuplicate) !== null && Te2 !== void 0 ? Te2 : 0, Me2.headerBytesDuplicate = (fe2 = O2.headerBytesDuplicate) !== null && fe2 !== void 0 ? fe2 : 0, Me2.bitrateDuplicate = (ke2 = O2.bitrateDuplicate) !== null && ke2 !== void 0 ? ke2 : 0, Me2.packetsPadding = (it = O2.packetsPadding) !== null && it !== void 0 ? it : 0, Me2.packetPaddingRate = (mt = O2.packetPaddingRate) !== null && mt !== void 0 ? mt : 0, Me2.bytesPadding = (vt = O2.bytesPadding) !== null && vt !== void 0 ? vt : 0, Me2.headerBytesPadding = (st = O2.headerBytesPadding) !== null && st !== void 0 ? st : 0, Me2.bitratePadding = (ut = O2.bitratePadding) !== null && ut !== void 0 ? ut : 0, Me2.packetsOutOfOrder = (yt = O2.packetsOutOfOrder) !== null && yt !== void 0 ? yt : 0, Me2.frames = (gt = O2.frames) !== null && gt !== void 0 ? gt : 0, Me2.frameRate = (bt = O2.frameRate) !== null && bt !== void 0 ? bt : 0, Me2.jitterCurrent = (St = O2.jitterCurrent) !== null && St !== void 0 ? St : 0, Me2.jitterMax = (Et = O2.jitterMax) !== null && Et !== void 0 ? Et : 0, Me2.gapHistogram = Object.entries((ct = O2.gapHistogram) !== null && ct !== void 0 ? ct : {}).reduce((nt, [rt, Tt]) => (Tt !== void 0 && (nt[Number(rt)] = Number(Tt)), nt), {}), Me2.nacks = (Xe2 = O2.nacks) !== null && Xe2 !== void 0 ? Xe2 : 0, Me2.nackAcks = (Ct = O2.nackAcks) !== null && Ct !== void 0 ? Ct : 0, Me2.nackMisses = (Ot = O2.nackMisses) !== null && Ot !== void 0 ? Ot : 0, Me2.nackRepeated = (Nt = O2.nackRepeated) !== null && Nt !== void 0 ? Nt : 0, Me2.plis = (Pt = O2.plis) !== null && Pt !== void 0 ? Pt : 0, Me2.lastPli = (wt = O2.lastPli) !== null && wt !== void 0 ? wt : void 0, Me2.firs = (At = O2.firs) !== null && At !== void 0 ? At : 0, Me2.lastFir = (Dt = O2.lastFir) !== null && Dt !== void 0 ? Dt : void 0, Me2.rttCurrent = (pe2 = O2.rttCurrent) !== null && pe2 !== void 0 ? pe2 : 0, Me2.rttMax = (ge2 = O2.rttMax) !== null && ge2 !== void 0 ? ge2 : 0, Me2.keyFrames = (Re2 = O2.keyFrames) !== null && Re2 !== void 0 ? Re2 : 0, Me2.lastKeyFrame = (Je2 = O2.lastKeyFrame) !== null && Je2 !== void 0 ? Je2 : void 0, Me2.layerLockPlis = (Fe2 = O2.layerLockPlis) !== null && Fe2 !== void 0 ? Fe2 : 0, Me2.lastLayerLockPli = (ze2 = O2.lastLayerLockPli) !== null && ze2 !== void 0 ? ze2 : void 0, Me2;
  } };
  function Ie2() {
    return { key: 0, value: 0 };
  }
  a92.RTPStats_GapHistogramEntry = { encode(O2, j = l2.default.Writer.create()) {
    return O2.key !== 0 && j.uint32(8).int32(O2.key), O2.value !== 0 && j.uint32(16).uint32(O2.value), j;
  }, decode(O2, j) {
    const se2 = O2 instanceof l2.default.Reader ? O2 : new l2.default.Reader(O2);
    let _e = j === void 0 ? se2.len : se2.pos + j;
    const ve2 = Ie2();
    for (; se2.pos < _e; ) {
      const De2 = se2.uint32();
      switch (De2 >>> 3) {
        case 1:
          ve2.key = se2.int32();
          break;
        case 2:
          ve2.value = se2.uint32();
          break;
        default:
          se2.skipType(De2 & 7);
          break;
      }
    }
    return ve2;
  }, fromJSON(O2) {
    return { key: ue2(O2.key) ? Number(O2.key) : 0, value: ue2(O2.value) ? Number(O2.value) : 0 };
  }, toJSON(O2) {
    const j = {};
    return O2.key !== void 0 && (j.key = Math.round(O2.key)), O2.value !== void 0 && (j.value = Math.round(O2.value)), j;
  }, fromPartial(O2) {
    var j, se2;
    const _e = Ie2();
    return _e.key = (j = O2.key) !== null && j !== void 0 ? j : 0, _e.value = (se2 = O2.value) !== null && se2 !== void 0 ? se2 : 0, _e;
  } };
  function at() {
    return { unixMicro: 0, ticks: 0 };
  }
  a92.TimedVersion = { encode(O2, j = l2.default.Writer.create()) {
    return O2.unixMicro !== 0 && j.uint32(8).int64(O2.unixMicro), O2.ticks !== 0 && j.uint32(16).int32(O2.ticks), j;
  }, decode(O2, j) {
    const se2 = O2 instanceof l2.default.Reader ? O2 : new l2.default.Reader(O2);
    let _e = j === void 0 ? se2.len : se2.pos + j;
    const ve2 = at();
    for (; se2.pos < _e; ) {
      const De2 = se2.uint32();
      switch (De2 >>> 3) {
        case 1:
          ve2.unixMicro = ie2(se2.int64());
          break;
        case 2:
          ve2.ticks = se2.int32();
          break;
        default:
          se2.skipType(De2 & 7);
          break;
      }
    }
    return ve2;
  }, fromJSON(O2) {
    return { unixMicro: ue2(O2.unixMicro) ? Number(O2.unixMicro) : 0, ticks: ue2(O2.ticks) ? Number(O2.ticks) : 0 };
  }, toJSON(O2) {
    const j = {};
    return O2.unixMicro !== void 0 && (j.unixMicro = Math.round(O2.unixMicro)), O2.ticks !== void 0 && (j.ticks = Math.round(O2.ticks)), j;
  }, fromPartial(O2) {
    var j, se2;
    const _e = at();
    return _e.unixMicro = (j = O2.unixMicro) !== null && j !== void 0 ? j : 0, _e.ticks = (se2 = O2.ticks) !== null && se2 !== void 0 ? se2 : 0, _e;
  } };
  var Ye2 = (() => {
    if (typeof Ye2 < "u")
      return Ye2;
    if (typeof self < "u")
      return self;
    if (typeof window < "u")
      return window;
    if (typeof commonjsGlobal$1 < "u")
      return commonjsGlobal$1;
    throw "Unable to locate global object";
  })();
  function je2(O2) {
    if (Ye2.Buffer)
      return Uint8Array.from(Ye2.Buffer.from(O2, "base64"));
    {
      const j = Ye2.atob(O2), se2 = new Uint8Array(j.length);
      for (let _e = 0; _e < j.length; ++_e)
        se2[_e] = j.charCodeAt(_e);
      return se2;
    }
  }
  function tt(O2) {
    if (Ye2.Buffer)
      return Ye2.Buffer.from(O2).toString("base64");
    {
      const j = [];
      return O2.forEach((se2) => {
        j.push(String.fromCharCode(se2));
      }), Ye2.btoa(j.join(""));
    }
  }
  function Oe2(O2) {
    const j = O2.getTime() / 1e3, se2 = O2.getTime() % 1e3 * 1e6;
    return { seconds: j, nanos: se2 };
  }
  function P2(O2) {
    let j = O2.seconds * 1e3;
    return j += O2.nanos / 1e6, new Date(j);
  }
  function X2(O2) {
    return O2 instanceof Date ? O2 : typeof O2 == "string" ? new Date(O2) : P2(v2.Timestamp.fromJSON(O2));
  }
  function ie2(O2) {
    if (O2.gt(Number.MAX_SAFE_INTEGER))
      throw new Ye2.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    return O2.toNumber();
  }
  l2.default.util.Long !== c.default && (l2.default.util.Long = c.default, l2.default.configure());
  function Ee2(O2) {
    return typeof O2 == "object" && O2 !== null;
  }
  function ue2(O2) {
    return O2 != null;
  }
})(livekit_models);
(function(a92) {
  var u2 = commonjsGlobal$1 && commonjsGlobal$1.__importDefault || function(A2) {
    return A2 && A2.__esModule ? A2 : { default: A2 };
  };
  Object.defineProperty(a92, "__esModule", { value: true }), a92.DeleteIngressRequest = a92.ListIngressResponse = a92.ListIngressRequest = a92.UpdateIngressRequest = a92.InputAudioState = a92.InputVideoState = a92.IngressState = a92.IngressInfo = a92.IngressVideoOptions = a92.IngressAudioOptions = a92.CreateIngressRequest = a92.ingressState_StatusToJSON = a92.ingressState_StatusFromJSON = a92.IngressState_Status = a92.ingressInputToJSON = a92.ingressInputFromJSON = a92.IngressInput = a92.protobufPackage = void 0;
  const c = u2(umdExports), l2 = u2(minimal), v2 = livekit_models;
  a92.protobufPackage = "livekit";
  var S2;
  (function(A2) {
    A2[A2.RTMP_INPUT = 0] = "RTMP_INPUT", A2[A2.UNRECOGNIZED = -1] = "UNRECOGNIZED";
  })(S2 = a92.IngressInput || (a92.IngressInput = {}));
  function g2(A2) {
    switch (A2) {
      case 0:
      case "RTMP_INPUT":
        return S2.RTMP_INPUT;
      case -1:
      case "UNRECOGNIZED":
      default:
        return S2.UNRECOGNIZED;
    }
  }
  a92.ingressInputFromJSON = g2;
  function E2(A2) {
    switch (A2) {
      case S2.RTMP_INPUT:
        return "RTMP_INPUT";
      case S2.UNRECOGNIZED:
      default:
        return "UNRECOGNIZED";
    }
  }
  a92.ingressInputToJSON = E2;
  var _;
  (function(A2) {
    A2[A2.ENDPOINT_INACTIVE = 0] = "ENDPOINT_INACTIVE", A2[A2.ENDPOINT_BUFFERING = 1] = "ENDPOINT_BUFFERING", A2[A2.ENDPOINT_PUBLISHING = 2] = "ENDPOINT_PUBLISHING", A2[A2.ENDPOINT_ERROR = 3] = "ENDPOINT_ERROR", A2[A2.UNRECOGNIZED = -1] = "UNRECOGNIZED";
  })(_ = a92.IngressState_Status || (a92.IngressState_Status = {}));
  function k(A2) {
    switch (A2) {
      case 0:
      case "ENDPOINT_INACTIVE":
        return _.ENDPOINT_INACTIVE;
      case 1:
      case "ENDPOINT_BUFFERING":
        return _.ENDPOINT_BUFFERING;
      case 2:
      case "ENDPOINT_PUBLISHING":
        return _.ENDPOINT_PUBLISHING;
      case 3:
      case "ENDPOINT_ERROR":
        return _.ENDPOINT_ERROR;
      case -1:
      case "UNRECOGNIZED":
      default:
        return _.UNRECOGNIZED;
    }
  }
  a92.ingressState_StatusFromJSON = k;
  function L2(A2) {
    switch (A2) {
      case _.ENDPOINT_INACTIVE:
        return "ENDPOINT_INACTIVE";
      case _.ENDPOINT_BUFFERING:
        return "ENDPOINT_BUFFERING";
      case _.ENDPOINT_PUBLISHING:
        return "ENDPOINT_PUBLISHING";
      case _.ENDPOINT_ERROR:
        return "ENDPOINT_ERROR";
      case _.UNRECOGNIZED:
      default:
        return "UNRECOGNIZED";
    }
  }
  a92.ingressState_StatusToJSON = L2;
  function M2() {
    return { inputType: 0, name: "", roomName: "", participantIdentity: "", participantName: "", audio: void 0, video: void 0 };
  }
  a92.CreateIngressRequest = { encode(A2, N2 = l2.default.Writer.create()) {
    return A2.inputType !== void 0 && A2.inputType !== 0 && N2.uint32(8).int32(A2.inputType), A2.name !== void 0 && A2.name !== "" && N2.uint32(18).string(A2.name), A2.roomName !== void 0 && A2.roomName !== "" && N2.uint32(26).string(A2.roomName), A2.participantIdentity !== void 0 && A2.participantIdentity !== "" && N2.uint32(34).string(A2.participantIdentity), A2.participantName !== void 0 && A2.participantName !== "" && N2.uint32(42).string(A2.participantName), A2.audio !== void 0 && a92.IngressAudioOptions.encode(A2.audio, N2.uint32(50).fork()).ldelim(), A2.video !== void 0 && a92.IngressVideoOptions.encode(A2.video, N2.uint32(58).fork()).ldelim(), N2;
  }, decode(A2, N2) {
    const D2 = A2 instanceof l2.default.Reader ? A2 : new l2.default.Reader(A2);
    let W2 = N2 === void 0 ? D2.len : D2.pos + N2;
    const ee2 = M2();
    for (; D2.pos < W2; ) {
      const ae2 = D2.uint32();
      switch (ae2 >>> 3) {
        case 1:
          ee2.inputType = D2.int32();
          break;
        case 2:
          ee2.name = D2.string();
          break;
        case 3:
          ee2.roomName = D2.string();
          break;
        case 4:
          ee2.participantIdentity = D2.string();
          break;
        case 5:
          ee2.participantName = D2.string();
          break;
        case 6:
          ee2.audio = a92.IngressAudioOptions.decode(D2, D2.uint32());
          break;
        case 7:
          ee2.video = a92.IngressVideoOptions.decode(D2, D2.uint32());
          break;
        default:
          D2.skipType(ae2 & 7);
          break;
      }
    }
    return ee2;
  }, fromJSON(A2) {
    return { inputType: de2(A2.inputType) ? g2(A2.inputType) : 0, name: de2(A2.name) ? String(A2.name) : "", roomName: de2(A2.roomName) ? String(A2.roomName) : "", participantIdentity: de2(A2.participantIdentity) ? String(A2.participantIdentity) : "", participantName: de2(A2.participantName) ? String(A2.participantName) : "", audio: de2(A2.audio) ? a92.IngressAudioOptions.fromJSON(A2.audio) : void 0, video: de2(A2.video) ? a92.IngressVideoOptions.fromJSON(A2.video) : void 0 };
  }, toJSON(A2) {
    const N2 = {};
    return A2.inputType !== void 0 && (N2.inputType = E2(A2.inputType)), A2.name !== void 0 && (N2.name = A2.name), A2.roomName !== void 0 && (N2.roomName = A2.roomName), A2.participantIdentity !== void 0 && (N2.participantIdentity = A2.participantIdentity), A2.participantName !== void 0 && (N2.participantName = A2.participantName), A2.audio !== void 0 && (N2.audio = A2.audio ? a92.IngressAudioOptions.toJSON(A2.audio) : void 0), A2.video !== void 0 && (N2.video = A2.video ? a92.IngressVideoOptions.toJSON(A2.video) : void 0), N2;
  }, fromPartial(A2) {
    var N2, D2, W2, ee2, ae2;
    const ye2 = M2();
    return ye2.inputType = (N2 = A2.inputType) !== null && N2 !== void 0 ? N2 : 0, ye2.name = (D2 = A2.name) !== null && D2 !== void 0 ? D2 : "", ye2.roomName = (W2 = A2.roomName) !== null && W2 !== void 0 ? W2 : "", ye2.participantIdentity = (ee2 = A2.participantIdentity) !== null && ee2 !== void 0 ? ee2 : "", ye2.participantName = (ae2 = A2.participantName) !== null && ae2 !== void 0 ? ae2 : "", ye2.audio = A2.audio !== void 0 && A2.audio !== null ? a92.IngressAudioOptions.fromPartial(A2.audio) : void 0, ye2.video = A2.video !== void 0 && A2.video !== null ? a92.IngressVideoOptions.fromPartial(A2.video) : void 0, ye2;
  } };
  function $() {
    return { name: "", source: 0, mimeType: "", bitrate: 0, disableDtx: false, channels: 0 };
  }
  a92.IngressAudioOptions = { encode(A2, N2 = l2.default.Writer.create()) {
    return A2.name !== void 0 && A2.name !== "" && N2.uint32(10).string(A2.name), A2.source !== void 0 && A2.source !== 0 && N2.uint32(16).int32(A2.source), A2.mimeType !== void 0 && A2.mimeType !== "" && N2.uint32(26).string(A2.mimeType), A2.bitrate !== void 0 && A2.bitrate !== 0 && N2.uint32(32).uint32(A2.bitrate), A2.disableDtx === true && N2.uint32(40).bool(A2.disableDtx), A2.channels !== void 0 && A2.channels !== 0 && N2.uint32(48).uint32(A2.channels), N2;
  }, decode(A2, N2) {
    const D2 = A2 instanceof l2.default.Reader ? A2 : new l2.default.Reader(A2);
    let W2 = N2 === void 0 ? D2.len : D2.pos + N2;
    const ee2 = $();
    for (; D2.pos < W2; ) {
      const ae2 = D2.uint32();
      switch (ae2 >>> 3) {
        case 1:
          ee2.name = D2.string();
          break;
        case 2:
          ee2.source = D2.int32();
          break;
        case 3:
          ee2.mimeType = D2.string();
          break;
        case 4:
          ee2.bitrate = D2.uint32();
          break;
        case 5:
          ee2.disableDtx = D2.bool();
          break;
        case 6:
          ee2.channels = D2.uint32();
          break;
        default:
          D2.skipType(ae2 & 7);
          break;
      }
    }
    return ee2;
  }, fromJSON(A2) {
    return { name: de2(A2.name) ? String(A2.name) : "", source: de2(A2.source) ? v2.trackSourceFromJSON(A2.source) : 0, mimeType: de2(A2.mimeType) ? String(A2.mimeType) : "", bitrate: de2(A2.bitrate) ? Number(A2.bitrate) : 0, disableDtx: de2(A2.disableDtx) ? !!A2.disableDtx : false, channels: de2(A2.channels) ? Number(A2.channels) : 0 };
  }, toJSON(A2) {
    const N2 = {};
    return A2.name !== void 0 && (N2.name = A2.name), A2.source !== void 0 && (N2.source = v2.trackSourceToJSON(A2.source)), A2.mimeType !== void 0 && (N2.mimeType = A2.mimeType), A2.bitrate !== void 0 && (N2.bitrate = Math.round(A2.bitrate)), A2.disableDtx !== void 0 && (N2.disableDtx = A2.disableDtx), A2.channels !== void 0 && (N2.channels = Math.round(A2.channels)), N2;
  }, fromPartial(A2) {
    var N2, D2, W2, ee2, ae2, ye2;
    const he2 = $();
    return he2.name = (N2 = A2.name) !== null && N2 !== void 0 ? N2 : "", he2.source = (D2 = A2.source) !== null && D2 !== void 0 ? D2 : 0, he2.mimeType = (W2 = A2.mimeType) !== null && W2 !== void 0 ? W2 : "", he2.bitrate = (ee2 = A2.bitrate) !== null && ee2 !== void 0 ? ee2 : 0, he2.disableDtx = (ae2 = A2.disableDtx) !== null && ae2 !== void 0 ? ae2 : false, he2.channels = (ye2 = A2.channels) !== null && ye2 !== void 0 ? ye2 : 0, he2;
  } };
  function J2() {
    return { name: "", source: 0, mimeType: "", layers: [] };
  }
  a92.IngressVideoOptions = { encode(A2, N2 = l2.default.Writer.create()) {
    if (A2.name !== void 0 && A2.name !== "" && N2.uint32(10).string(A2.name), A2.source !== void 0 && A2.source !== 0 && N2.uint32(16).int32(A2.source), A2.mimeType !== void 0 && A2.mimeType !== "" && N2.uint32(26).string(A2.mimeType), A2.layers !== void 0 && A2.layers.length !== 0)
      for (const D2 of A2.layers)
        v2.VideoLayer.encode(D2, N2.uint32(34).fork()).ldelim();
    return N2;
  }, decode(A2, N2) {
    const D2 = A2 instanceof l2.default.Reader ? A2 : new l2.default.Reader(A2);
    let W2 = N2 === void 0 ? D2.len : D2.pos + N2;
    const ee2 = J2();
    for (; D2.pos < W2; ) {
      const ae2 = D2.uint32();
      switch (ae2 >>> 3) {
        case 1:
          ee2.name = D2.string();
          break;
        case 2:
          ee2.source = D2.int32();
          break;
        case 3:
          ee2.mimeType = D2.string();
          break;
        case 4:
          ee2.layers.push(v2.VideoLayer.decode(D2, D2.uint32()));
          break;
        default:
          D2.skipType(ae2 & 7);
          break;
      }
    }
    return ee2;
  }, fromJSON(A2) {
    return { name: de2(A2.name) ? String(A2.name) : "", source: de2(A2.source) ? v2.trackSourceFromJSON(A2.source) : 0, mimeType: de2(A2.mimeType) ? String(A2.mimeType) : "", layers: Array.isArray(A2 == null ? void 0 : A2.layers) ? A2.layers.map((N2) => v2.VideoLayer.fromJSON(N2)) : [] };
  }, toJSON(A2) {
    const N2 = {};
    return A2.name !== void 0 && (N2.name = A2.name), A2.source !== void 0 && (N2.source = v2.trackSourceToJSON(A2.source)), A2.mimeType !== void 0 && (N2.mimeType = A2.mimeType), A2.layers ? N2.layers = A2.layers.map((D2) => D2 ? v2.VideoLayer.toJSON(D2) : void 0) : N2.layers = [], N2;
  }, fromPartial(A2) {
    var N2, D2, W2, ee2;
    const ae2 = J2();
    return ae2.name = (N2 = A2.name) !== null && N2 !== void 0 ? N2 : "", ae2.source = (D2 = A2.source) !== null && D2 !== void 0 ? D2 : 0, ae2.mimeType = (W2 = A2.mimeType) !== null && W2 !== void 0 ? W2 : "", ae2.layers = ((ee2 = A2.layers) === null || ee2 === void 0 ? void 0 : ee2.map((ye2) => v2.VideoLayer.fromPartial(ye2))) || [], ae2;
  } };
  function V2() {
    return { ingressId: "", name: "", streamKey: "", url: "", inputType: 0, audio: void 0, video: void 0, roomName: "", participantIdentity: "", participantName: "", reusable: false, state: void 0 };
  }
  a92.IngressInfo = { encode(A2, N2 = l2.default.Writer.create()) {
    return A2.ingressId !== void 0 && A2.ingressId !== "" && N2.uint32(10).string(A2.ingressId), A2.name !== void 0 && A2.name !== "" && N2.uint32(18).string(A2.name), A2.streamKey !== void 0 && A2.streamKey !== "" && N2.uint32(26).string(A2.streamKey), A2.url !== void 0 && A2.url !== "" && N2.uint32(34).string(A2.url), A2.inputType !== void 0 && A2.inputType !== 0 && N2.uint32(40).int32(A2.inputType), A2.audio !== void 0 && a92.IngressAudioOptions.encode(A2.audio, N2.uint32(50).fork()).ldelim(), A2.video !== void 0 && a92.IngressVideoOptions.encode(A2.video, N2.uint32(58).fork()).ldelim(), A2.roomName !== void 0 && A2.roomName !== "" && N2.uint32(66).string(A2.roomName), A2.participantIdentity !== void 0 && A2.participantIdentity !== "" && N2.uint32(74).string(A2.participantIdentity), A2.participantName !== void 0 && A2.participantName !== "" && N2.uint32(82).string(A2.participantName), A2.reusable === true && N2.uint32(88).bool(A2.reusable), A2.state !== void 0 && a92.IngressState.encode(A2.state, N2.uint32(98).fork()).ldelim(), N2;
  }, decode(A2, N2) {
    const D2 = A2 instanceof l2.default.Reader ? A2 : new l2.default.Reader(A2);
    let W2 = N2 === void 0 ? D2.len : D2.pos + N2;
    const ee2 = V2();
    for (; D2.pos < W2; ) {
      const ae2 = D2.uint32();
      switch (ae2 >>> 3) {
        case 1:
          ee2.ingressId = D2.string();
          break;
        case 2:
          ee2.name = D2.string();
          break;
        case 3:
          ee2.streamKey = D2.string();
          break;
        case 4:
          ee2.url = D2.string();
          break;
        case 5:
          ee2.inputType = D2.int32();
          break;
        case 6:
          ee2.audio = a92.IngressAudioOptions.decode(D2, D2.uint32());
          break;
        case 7:
          ee2.video = a92.IngressVideoOptions.decode(D2, D2.uint32());
          break;
        case 8:
          ee2.roomName = D2.string();
          break;
        case 9:
          ee2.participantIdentity = D2.string();
          break;
        case 10:
          ee2.participantName = D2.string();
          break;
        case 11:
          ee2.reusable = D2.bool();
          break;
        case 12:
          ee2.state = a92.IngressState.decode(D2, D2.uint32());
          break;
        default:
          D2.skipType(ae2 & 7);
          break;
      }
    }
    return ee2;
  }, fromJSON(A2) {
    return { ingressId: de2(A2.ingressId) ? String(A2.ingressId) : "", name: de2(A2.name) ? String(A2.name) : "", streamKey: de2(A2.streamKey) ? String(A2.streamKey) : "", url: de2(A2.url) ? String(A2.url) : "", inputType: de2(A2.inputType) ? g2(A2.inputType) : 0, audio: de2(A2.audio) ? a92.IngressAudioOptions.fromJSON(A2.audio) : void 0, video: de2(A2.video) ? a92.IngressVideoOptions.fromJSON(A2.video) : void 0, roomName: de2(A2.roomName) ? String(A2.roomName) : "", participantIdentity: de2(A2.participantIdentity) ? String(A2.participantIdentity) : "", participantName: de2(A2.participantName) ? String(A2.participantName) : "", reusable: de2(A2.reusable) ? !!A2.reusable : false, state: de2(A2.state) ? a92.IngressState.fromJSON(A2.state) : void 0 };
  }, toJSON(A2) {
    const N2 = {};
    return A2.ingressId !== void 0 && (N2.ingressId = A2.ingressId), A2.name !== void 0 && (N2.name = A2.name), A2.streamKey !== void 0 && (N2.streamKey = A2.streamKey), A2.url !== void 0 && (N2.url = A2.url), A2.inputType !== void 0 && (N2.inputType = E2(A2.inputType)), A2.audio !== void 0 && (N2.audio = A2.audio ? a92.IngressAudioOptions.toJSON(A2.audio) : void 0), A2.video !== void 0 && (N2.video = A2.video ? a92.IngressVideoOptions.toJSON(A2.video) : void 0), A2.roomName !== void 0 && (N2.roomName = A2.roomName), A2.participantIdentity !== void 0 && (N2.participantIdentity = A2.participantIdentity), A2.participantName !== void 0 && (N2.participantName = A2.participantName), A2.reusable !== void 0 && (N2.reusable = A2.reusable), A2.state !== void 0 && (N2.state = A2.state ? a92.IngressState.toJSON(A2.state) : void 0), N2;
  }, fromPartial(A2) {
    var N2, D2, W2, ee2, ae2, ye2, he2, le2, we2;
    const Be2 = V2();
    return Be2.ingressId = (N2 = A2.ingressId) !== null && N2 !== void 0 ? N2 : "", Be2.name = (D2 = A2.name) !== null && D2 !== void 0 ? D2 : "", Be2.streamKey = (W2 = A2.streamKey) !== null && W2 !== void 0 ? W2 : "", Be2.url = (ee2 = A2.url) !== null && ee2 !== void 0 ? ee2 : "", Be2.inputType = (ae2 = A2.inputType) !== null && ae2 !== void 0 ? ae2 : 0, Be2.audio = A2.audio !== void 0 && A2.audio !== null ? a92.IngressAudioOptions.fromPartial(A2.audio) : void 0, Be2.video = A2.video !== void 0 && A2.video !== null ? a92.IngressVideoOptions.fromPartial(A2.video) : void 0, Be2.roomName = (ye2 = A2.roomName) !== null && ye2 !== void 0 ? ye2 : "", Be2.participantIdentity = (he2 = A2.participantIdentity) !== null && he2 !== void 0 ? he2 : "", Be2.participantName = (le2 = A2.participantName) !== null && le2 !== void 0 ? le2 : "", Be2.reusable = (we2 = A2.reusable) !== null && we2 !== void 0 ? we2 : false, Be2.state = A2.state !== void 0 && A2.state !== null ? a92.IngressState.fromPartial(A2.state) : void 0, Be2;
  } };
  function q2() {
    return { status: 0, error: "", video: void 0, audio: void 0, roomId: "", startedAt: 0, tracks: [] };
  }
  a92.IngressState = { encode(A2, N2 = l2.default.Writer.create()) {
    if (A2.status !== void 0 && A2.status !== 0 && N2.uint32(8).int32(A2.status), A2.error !== void 0 && A2.error !== "" && N2.uint32(18).string(A2.error), A2.video !== void 0 && a92.InputVideoState.encode(A2.video, N2.uint32(26).fork()).ldelim(), A2.audio !== void 0 && a92.InputAudioState.encode(A2.audio, N2.uint32(34).fork()).ldelim(), A2.roomId !== void 0 && A2.roomId !== "" && N2.uint32(42).string(A2.roomId), A2.startedAt !== void 0 && A2.startedAt !== 0 && N2.uint32(56).int64(A2.startedAt), A2.tracks !== void 0 && A2.tracks.length !== 0)
      for (const D2 of A2.tracks)
        v2.TrackInfo.encode(D2, N2.uint32(50).fork()).ldelim();
    return N2;
  }, decode(A2, N2) {
    const D2 = A2 instanceof l2.default.Reader ? A2 : new l2.default.Reader(A2);
    let W2 = N2 === void 0 ? D2.len : D2.pos + N2;
    const ee2 = q2();
    for (; D2.pos < W2; ) {
      const ae2 = D2.uint32();
      switch (ae2 >>> 3) {
        case 1:
          ee2.status = D2.int32();
          break;
        case 2:
          ee2.error = D2.string();
          break;
        case 3:
          ee2.video = a92.InputVideoState.decode(D2, D2.uint32());
          break;
        case 4:
          ee2.audio = a92.InputAudioState.decode(D2, D2.uint32());
          break;
        case 5:
          ee2.roomId = D2.string();
          break;
        case 7:
          ee2.startedAt = oe2(D2.int64());
          break;
        case 6:
          ee2.tracks.push(v2.TrackInfo.decode(D2, D2.uint32()));
          break;
        default:
          D2.skipType(ae2 & 7);
          break;
      }
    }
    return ee2;
  }, fromJSON(A2) {
    return { status: de2(A2.status) ? k(A2.status) : 0, error: de2(A2.error) ? String(A2.error) : "", video: de2(A2.video) ? a92.InputVideoState.fromJSON(A2.video) : void 0, audio: de2(A2.audio) ? a92.InputAudioState.fromJSON(A2.audio) : void 0, roomId: de2(A2.roomId) ? String(A2.roomId) : "", startedAt: de2(A2.startedAt) ? Number(A2.startedAt) : 0, tracks: Array.isArray(A2 == null ? void 0 : A2.tracks) ? A2.tracks.map((N2) => v2.TrackInfo.fromJSON(N2)) : [] };
  }, toJSON(A2) {
    const N2 = {};
    return A2.status !== void 0 && (N2.status = L2(A2.status)), A2.error !== void 0 && (N2.error = A2.error), A2.video !== void 0 && (N2.video = A2.video ? a92.InputVideoState.toJSON(A2.video) : void 0), A2.audio !== void 0 && (N2.audio = A2.audio ? a92.InputAudioState.toJSON(A2.audio) : void 0), A2.roomId !== void 0 && (N2.roomId = A2.roomId), A2.startedAt !== void 0 && (N2.startedAt = Math.round(A2.startedAt)), A2.tracks ? N2.tracks = A2.tracks.map((D2) => D2 ? v2.TrackInfo.toJSON(D2) : void 0) : N2.tracks = [], N2;
  }, fromPartial(A2) {
    var N2, D2, W2, ee2, ae2;
    const ye2 = q2();
    return ye2.status = (N2 = A2.status) !== null && N2 !== void 0 ? N2 : 0, ye2.error = (D2 = A2.error) !== null && D2 !== void 0 ? D2 : "", ye2.video = A2.video !== void 0 && A2.video !== null ? a92.InputVideoState.fromPartial(A2.video) : void 0, ye2.audio = A2.audio !== void 0 && A2.audio !== null ? a92.InputAudioState.fromPartial(A2.audio) : void 0, ye2.roomId = (W2 = A2.roomId) !== null && W2 !== void 0 ? W2 : "", ye2.startedAt = (ee2 = A2.startedAt) !== null && ee2 !== void 0 ? ee2 : 0, ye2.tracks = ((ae2 = A2.tracks) === null || ae2 === void 0 ? void 0 : ae2.map((he2) => v2.TrackInfo.fromPartial(he2))) || [], ye2;
  } };
  function G2() {
    return { mimeType: 0, width: 0, height: 0, framerate: 0 };
  }
  a92.InputVideoState = { encode(A2, N2 = l2.default.Writer.create()) {
    return A2.mimeType !== void 0 && A2.mimeType !== 0 && N2.uint32(8).uint32(A2.mimeType), A2.width !== void 0 && A2.width !== 0 && N2.uint32(24).uint32(A2.width), A2.height !== void 0 && A2.height !== 0 && N2.uint32(32).uint32(A2.height), A2.framerate !== void 0 && A2.framerate !== 0 && N2.uint32(40).uint32(A2.framerate), N2;
  }, decode(A2, N2) {
    const D2 = A2 instanceof l2.default.Reader ? A2 : new l2.default.Reader(A2);
    let W2 = N2 === void 0 ? D2.len : D2.pos + N2;
    const ee2 = G2();
    for (; D2.pos < W2; ) {
      const ae2 = D2.uint32();
      switch (ae2 >>> 3) {
        case 1:
          ee2.mimeType = D2.uint32();
          break;
        case 3:
          ee2.width = D2.uint32();
          break;
        case 4:
          ee2.height = D2.uint32();
          break;
        case 5:
          ee2.framerate = D2.uint32();
          break;
        default:
          D2.skipType(ae2 & 7);
          break;
      }
    }
    return ee2;
  }, fromJSON(A2) {
    return { mimeType: de2(A2.mimeType) ? Number(A2.mimeType) : 0, width: de2(A2.width) ? Number(A2.width) : 0, height: de2(A2.height) ? Number(A2.height) : 0, framerate: de2(A2.framerate) ? Number(A2.framerate) : 0 };
  }, toJSON(A2) {
    const N2 = {};
    return A2.mimeType !== void 0 && (N2.mimeType = Math.round(A2.mimeType)), A2.width !== void 0 && (N2.width = Math.round(A2.width)), A2.height !== void 0 && (N2.height = Math.round(A2.height)), A2.framerate !== void 0 && (N2.framerate = Math.round(A2.framerate)), N2;
  }, fromPartial(A2) {
    var N2, D2, W2, ee2;
    const ae2 = G2();
    return ae2.mimeType = (N2 = A2.mimeType) !== null && N2 !== void 0 ? N2 : 0, ae2.width = (D2 = A2.width) !== null && D2 !== void 0 ? D2 : 0, ae2.height = (W2 = A2.height) !== null && W2 !== void 0 ? W2 : 0, ae2.framerate = (ee2 = A2.framerate) !== null && ee2 !== void 0 ? ee2 : 0, ae2;
  } };
  function H2() {
    return { mimeType: 0, channels: 0, sampleRate: 0 };
  }
  a92.InputAudioState = { encode(A2, N2 = l2.default.Writer.create()) {
    return A2.mimeType !== void 0 && A2.mimeType !== 0 && N2.uint32(8).uint32(A2.mimeType), A2.channels !== void 0 && A2.channels !== 0 && N2.uint32(24).uint32(A2.channels), A2.sampleRate !== void 0 && A2.sampleRate !== 0 && N2.uint32(32).uint32(A2.sampleRate), N2;
  }, decode(A2, N2) {
    const D2 = A2 instanceof l2.default.Reader ? A2 : new l2.default.Reader(A2);
    let W2 = N2 === void 0 ? D2.len : D2.pos + N2;
    const ee2 = H2();
    for (; D2.pos < W2; ) {
      const ae2 = D2.uint32();
      switch (ae2 >>> 3) {
        case 1:
          ee2.mimeType = D2.uint32();
          break;
        case 3:
          ee2.channels = D2.uint32();
          break;
        case 4:
          ee2.sampleRate = D2.uint32();
          break;
        default:
          D2.skipType(ae2 & 7);
          break;
      }
    }
    return ee2;
  }, fromJSON(A2) {
    return { mimeType: de2(A2.mimeType) ? Number(A2.mimeType) : 0, channels: de2(A2.channels) ? Number(A2.channels) : 0, sampleRate: de2(A2.sampleRate) ? Number(A2.sampleRate) : 0 };
  }, toJSON(A2) {
    const N2 = {};
    return A2.mimeType !== void 0 && (N2.mimeType = Math.round(A2.mimeType)), A2.channels !== void 0 && (N2.channels = Math.round(A2.channels)), A2.sampleRate !== void 0 && (N2.sampleRate = Math.round(A2.sampleRate)), N2;
  }, fromPartial(A2) {
    var N2, D2, W2;
    const ee2 = H2();
    return ee2.mimeType = (N2 = A2.mimeType) !== null && N2 !== void 0 ? N2 : 0, ee2.channels = (D2 = A2.channels) !== null && D2 !== void 0 ? D2 : 0, ee2.sampleRate = (W2 = A2.sampleRate) !== null && W2 !== void 0 ? W2 : 0, ee2;
  } };
  function B2() {
    return { ingressId: "", name: "", roomName: "", participantIdentity: "", participantName: "", audio: void 0, video: void 0 };
  }
  a92.UpdateIngressRequest = { encode(A2, N2 = l2.default.Writer.create()) {
    return A2.ingressId !== void 0 && A2.ingressId !== "" && N2.uint32(10).string(A2.ingressId), A2.name !== void 0 && A2.name !== "" && N2.uint32(18).string(A2.name), A2.roomName !== void 0 && A2.roomName !== "" && N2.uint32(26).string(A2.roomName), A2.participantIdentity !== void 0 && A2.participantIdentity !== "" && N2.uint32(34).string(A2.participantIdentity), A2.participantName !== void 0 && A2.participantName !== "" && N2.uint32(42).string(A2.participantName), A2.audio !== void 0 && a92.IngressAudioOptions.encode(A2.audio, N2.uint32(50).fork()).ldelim(), A2.video !== void 0 && a92.IngressVideoOptions.encode(A2.video, N2.uint32(58).fork()).ldelim(), N2;
  }, decode(A2, N2) {
    const D2 = A2 instanceof l2.default.Reader ? A2 : new l2.default.Reader(A2);
    let W2 = N2 === void 0 ? D2.len : D2.pos + N2;
    const ee2 = B2();
    for (; D2.pos < W2; ) {
      const ae2 = D2.uint32();
      switch (ae2 >>> 3) {
        case 1:
          ee2.ingressId = D2.string();
          break;
        case 2:
          ee2.name = D2.string();
          break;
        case 3:
          ee2.roomName = D2.string();
          break;
        case 4:
          ee2.participantIdentity = D2.string();
          break;
        case 5:
          ee2.participantName = D2.string();
          break;
        case 6:
          ee2.audio = a92.IngressAudioOptions.decode(D2, D2.uint32());
          break;
        case 7:
          ee2.video = a92.IngressVideoOptions.decode(D2, D2.uint32());
          break;
        default:
          D2.skipType(ae2 & 7);
          break;
      }
    }
    return ee2;
  }, fromJSON(A2) {
    return { ingressId: de2(A2.ingressId) ? String(A2.ingressId) : "", name: de2(A2.name) ? String(A2.name) : "", roomName: de2(A2.roomName) ? String(A2.roomName) : "", participantIdentity: de2(A2.participantIdentity) ? String(A2.participantIdentity) : "", participantName: de2(A2.participantName) ? String(A2.participantName) : "", audio: de2(A2.audio) ? a92.IngressAudioOptions.fromJSON(A2.audio) : void 0, video: de2(A2.video) ? a92.IngressVideoOptions.fromJSON(A2.video) : void 0 };
  }, toJSON(A2) {
    const N2 = {};
    return A2.ingressId !== void 0 && (N2.ingressId = A2.ingressId), A2.name !== void 0 && (N2.name = A2.name), A2.roomName !== void 0 && (N2.roomName = A2.roomName), A2.participantIdentity !== void 0 && (N2.participantIdentity = A2.participantIdentity), A2.participantName !== void 0 && (N2.participantName = A2.participantName), A2.audio !== void 0 && (N2.audio = A2.audio ? a92.IngressAudioOptions.toJSON(A2.audio) : void 0), A2.video !== void 0 && (N2.video = A2.video ? a92.IngressVideoOptions.toJSON(A2.video) : void 0), N2;
  }, fromPartial(A2) {
    var N2, D2, W2, ee2, ae2;
    const ye2 = B2();
    return ye2.ingressId = (N2 = A2.ingressId) !== null && N2 !== void 0 ? N2 : "", ye2.name = (D2 = A2.name) !== null && D2 !== void 0 ? D2 : "", ye2.roomName = (W2 = A2.roomName) !== null && W2 !== void 0 ? W2 : "", ye2.participantIdentity = (ee2 = A2.participantIdentity) !== null && ee2 !== void 0 ? ee2 : "", ye2.participantName = (ae2 = A2.participantName) !== null && ae2 !== void 0 ? ae2 : "", ye2.audio = A2.audio !== void 0 && A2.audio !== null ? a92.IngressAudioOptions.fromPartial(A2.audio) : void 0, ye2.video = A2.video !== void 0 && A2.video !== null ? a92.IngressVideoOptions.fromPartial(A2.video) : void 0, ye2;
  } };
  function Y2() {
    return { roomName: "" };
  }
  a92.ListIngressRequest = { encode(A2, N2 = l2.default.Writer.create()) {
    return A2.roomName !== void 0 && A2.roomName !== "" && N2.uint32(10).string(A2.roomName), N2;
  }, decode(A2, N2) {
    const D2 = A2 instanceof l2.default.Reader ? A2 : new l2.default.Reader(A2);
    let W2 = N2 === void 0 ? D2.len : D2.pos + N2;
    const ee2 = Y2();
    for (; D2.pos < W2; ) {
      const ae2 = D2.uint32();
      switch (ae2 >>> 3) {
        case 1:
          ee2.roomName = D2.string();
          break;
        default:
          D2.skipType(ae2 & 7);
          break;
      }
    }
    return ee2;
  }, fromJSON(A2) {
    return { roomName: de2(A2.roomName) ? String(A2.roomName) : "" };
  }, toJSON(A2) {
    const N2 = {};
    return A2.roomName !== void 0 && (N2.roomName = A2.roomName), N2;
  }, fromPartial(A2) {
    var N2;
    const D2 = Y2();
    return D2.roomName = (N2 = A2.roomName) !== null && N2 !== void 0 ? N2 : "", D2;
  } };
  function ne2() {
    return { items: [] };
  }
  a92.ListIngressResponse = { encode(A2, N2 = l2.default.Writer.create()) {
    if (A2.items !== void 0 && A2.items.length !== 0)
      for (const D2 of A2.items)
        a92.IngressInfo.encode(D2, N2.uint32(10).fork()).ldelim();
    return N2;
  }, decode(A2, N2) {
    const D2 = A2 instanceof l2.default.Reader ? A2 : new l2.default.Reader(A2);
    let W2 = N2 === void 0 ? D2.len : D2.pos + N2;
    const ee2 = ne2();
    for (; D2.pos < W2; ) {
      const ae2 = D2.uint32();
      switch (ae2 >>> 3) {
        case 1:
          ee2.items.push(a92.IngressInfo.decode(D2, D2.uint32()));
          break;
        default:
          D2.skipType(ae2 & 7);
          break;
      }
    }
    return ee2;
  }, fromJSON(A2) {
    return { items: Array.isArray(A2 == null ? void 0 : A2.items) ? A2.items.map((N2) => a92.IngressInfo.fromJSON(N2)) : [] };
  }, toJSON(A2) {
    const N2 = {};
    return A2.items ? N2.items = A2.items.map((D2) => D2 ? a92.IngressInfo.toJSON(D2) : void 0) : N2.items = [], N2;
  }, fromPartial(A2) {
    var N2;
    const D2 = ne2();
    return D2.items = ((N2 = A2.items) === null || N2 === void 0 ? void 0 : N2.map((W2) => a92.IngressInfo.fromPartial(W2))) || [], D2;
  } };
  function Z2() {
    return { ingressId: "" };
  }
  a92.DeleteIngressRequest = { encode(A2, N2 = l2.default.Writer.create()) {
    return A2.ingressId !== void 0 && A2.ingressId !== "" && N2.uint32(10).string(A2.ingressId), N2;
  }, decode(A2, N2) {
    const D2 = A2 instanceof l2.default.Reader ? A2 : new l2.default.Reader(A2);
    let W2 = N2 === void 0 ? D2.len : D2.pos + N2;
    const ee2 = Z2();
    for (; D2.pos < W2; ) {
      const ae2 = D2.uint32();
      switch (ae2 >>> 3) {
        case 1:
          ee2.ingressId = D2.string();
          break;
        default:
          D2.skipType(ae2 & 7);
          break;
      }
    }
    return ee2;
  }, fromJSON(A2) {
    return { ingressId: de2(A2.ingressId) ? String(A2.ingressId) : "" };
  }, toJSON(A2) {
    const N2 = {};
    return A2.ingressId !== void 0 && (N2.ingressId = A2.ingressId), N2;
  }, fromPartial(A2) {
    var N2;
    const D2 = Z2();
    return D2.ingressId = (N2 = A2.ingressId) !== null && N2 !== void 0 ? N2 : "", D2;
  } };
  var re2 = (() => {
    if (typeof re2 < "u")
      return re2;
    if (typeof self < "u")
      return self;
    if (typeof window < "u")
      return window;
    if (typeof commonjsGlobal$1 < "u")
      return commonjsGlobal$1;
    throw "Unable to locate global object";
  })();
  function oe2(A2) {
    if (A2.gt(Number.MAX_SAFE_INTEGER))
      throw new re2.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    return A2.toNumber();
  }
  l2.default.util.Long !== c.default && (l2.default.util.Long = c.default, l2.default.configure());
  function de2(A2) {
    return A2 != null;
  }
})(livekit_ingress);
var __awaiter$2 = commonjsGlobal$1 && commonjsGlobal$1.__awaiter || function(a92, u2, c, l2) {
  function v2(S2) {
    return S2 instanceof c ? S2 : new c(function(g2) {
      g2(S2);
    });
  }
  return new (c || (c = Promise))(function(S2, g2) {
    function E2(L2) {
      try {
        k(l2.next(L2));
      } catch (M2) {
        g2(M2);
      }
    }
    function _(L2) {
      try {
        k(l2.throw(L2));
      } catch (M2) {
        g2(M2);
      }
    }
    function k(L2) {
      L2.done ? S2(L2.value) : v2(L2.value).then(E2, _);
    }
    k((l2 = l2.apply(a92, u2 || [])).next());
  });
}, __importDefault$3 = commonjsGlobal$1 && commonjsGlobal$1.__importDefault || function(a92) {
  return a92 && a92.__esModule ? a92 : { default: a92 };
};
Object.defineProperty(IngressClient$1, "__esModule", { value: true });
IngressClient$1.IngressClient = void 0;
const livekit_ingress_1$1 = livekit_ingress, ServiceBase_1$1 = __importDefault$3(ServiceBase$1), TwirpRPC_1$1 = TwirpRPC, svc$1 = "Ingress";
class IngressClient extends ServiceBase_1$1.default {
  /**
  * @param host hostname including protocol. i.e. 'https://cluster.livekit.io'
  * @param apiKey API Key, can be set in env var LIVEKIT_API_KEY
  * @param secret API Secret, can be set in env var LIVEKIT_API_SECRET
  */
  constructor(u2, c, l2) {
    super(c, l2), this.rpc = new TwirpRPC_1$1.TwirpRpc(u2, TwirpRPC_1$1.livekitPackage);
  }
  /**
  * @param inputType protocol for the ingress
  * @param opts CreateIngressOptions
  */
  createIngress(u2, c) {
    return __awaiter$2(this, void 0, void 0, function* () {
      let l2 = "", v2 = "", S2 = "", g2 = "", E2, _;
      c !== void 0 && (l2 = c.name || "", v2 = c.roomName || "", S2 = c.participantName || "", g2 = c.participantIdentity || "", E2 = c.audioParams, _ = c.videoParams);
      const k = livekit_ingress_1$1.CreateIngressRequest.toJSON({ inputType: u2, name: l2, roomName: v2, participantIdentity: g2, participantName: S2, audio: E2, video: _ }), L2 = yield this.rpc.request(svc$1, "CreateIngress", k, this.authHeader({ ingressAdmin: true }));
      return livekit_ingress_1$1.IngressInfo.fromJSON(L2);
    });
  }
  /**
  * @param ingressId ID of the ingress to update
  * @param opts UpdateIngressOptions
  */
  updateIngress(u2, c) {
    return __awaiter$2(this, void 0, void 0, function* () {
      const l2 = c.name || "", v2 = c.roomName || "", S2 = c.participantName || "", g2 = c.participantIdentity || "", E2 = c.audioParams, _ = c.videoParams, k = livekit_ingress_1$1.UpdateIngressRequest.toJSON({ ingressId: u2, name: l2, roomName: v2, participantIdentity: g2, participantName: S2, audio: E2, video: _ }), L2 = yield this.rpc.request(svc$1, "UpdateIngress", k, this.authHeader({ ingressAdmin: true }));
      return livekit_ingress_1$1.IngressInfo.fromJSON(L2);
    });
  }
  /**
  * @param roomName list ingress for one room only
  */
  listIngress(u2) {
    var c;
    return __awaiter$2(this, void 0, void 0, function* () {
      u2 ?? (u2 = "");
      const l2 = yield this.rpc.request(svc$1, "ListIngress", livekit_ingress_1$1.ListIngressRequest.toJSON({ roomName: u2 }), this.authHeader({ ingressAdmin: true }));
      return (c = livekit_ingress_1$1.ListIngressResponse.fromJSON(l2).items) !== null && c !== void 0 ? c : [];
    });
  }
  /**
  * @param ingressId ingress to delete
  */
  deleteIngress(u2) {
    return __awaiter$2(this, void 0, void 0, function* () {
      const c = yield this.rpc.request(svc$1, "DeleteIngress", livekit_ingress_1$1.DeleteIngressRequest.toJSON({ ingressId: u2 }), this.authHeader({ ingressAdmin: true }));
      return livekit_ingress_1$1.IngressInfo.fromJSON(c);
    });
  }
}
IngressClient$1.IngressClient = IngressClient;
var RoomServiceClient$1 = {}, livekit_room = {};
(function(a92) {
  var u2 = commonjsGlobal$1 && commonjsGlobal$1.__importDefault || function(D2) {
    return D2 && D2.__esModule ? D2 : { default: D2 };
  };
  Object.defineProperty(a92, "__esModule", { value: true }), a92.UpdateRoomMetadataRequest = a92.SendDataResponse = a92.SendDataRequest = a92.UpdateSubscriptionsResponse = a92.UpdateSubscriptionsRequest = a92.UpdateParticipantRequest = a92.MuteRoomTrackResponse = a92.MuteRoomTrackRequest = a92.RemoveParticipantResponse = a92.RoomParticipantIdentity = a92.ListParticipantsResponse = a92.ListParticipantsRequest = a92.DeleteRoomResponse = a92.DeleteRoomRequest = a92.ListRoomsResponse = a92.ListRoomsRequest = a92.RoomEgress = a92.CreateRoomRequest = a92.protobufPackage = void 0;
  const c = u2(minimal), l2 = livekit_egress, v2 = livekit_models;
  a92.protobufPackage = "livekit";
  function S2() {
    return { name: "", emptyTimeout: 0, maxParticipants: 0, nodeId: "", metadata: "", egress: void 0 };
  }
  a92.CreateRoomRequest = { encode(D2, W2 = c.default.Writer.create()) {
    return D2.name !== void 0 && D2.name !== "" && W2.uint32(10).string(D2.name), D2.emptyTimeout !== void 0 && D2.emptyTimeout !== 0 && W2.uint32(16).uint32(D2.emptyTimeout), D2.maxParticipants !== void 0 && D2.maxParticipants !== 0 && W2.uint32(24).uint32(D2.maxParticipants), D2.nodeId !== void 0 && D2.nodeId !== "" && W2.uint32(34).string(D2.nodeId), D2.metadata !== void 0 && D2.metadata !== "" && W2.uint32(42).string(D2.metadata), D2.egress !== void 0 && a92.RoomEgress.encode(D2.egress, W2.uint32(50).fork()).ldelim(), W2;
  }, decode(D2, W2) {
    const ee2 = D2 instanceof c.default.Reader ? D2 : new c.default.Reader(D2);
    let ae2 = W2 === void 0 ? ee2.len : ee2.pos + W2;
    const ye2 = S2();
    for (; ee2.pos < ae2; ) {
      const he2 = ee2.uint32();
      switch (he2 >>> 3) {
        case 1:
          ye2.name = ee2.string();
          break;
        case 2:
          ye2.emptyTimeout = ee2.uint32();
          break;
        case 3:
          ye2.maxParticipants = ee2.uint32();
          break;
        case 4:
          ye2.nodeId = ee2.string();
          break;
        case 5:
          ye2.metadata = ee2.string();
          break;
        case 6:
          ye2.egress = a92.RoomEgress.decode(ee2, ee2.uint32());
          break;
        default:
          ee2.skipType(he2 & 7);
          break;
      }
    }
    return ye2;
  }, fromJSON(D2) {
    return { name: N2(D2.name) ? String(D2.name) : "", emptyTimeout: N2(D2.emptyTimeout) ? Number(D2.emptyTimeout) : 0, maxParticipants: N2(D2.maxParticipants) ? Number(D2.maxParticipants) : 0, nodeId: N2(D2.nodeId) ? String(D2.nodeId) : "", metadata: N2(D2.metadata) ? String(D2.metadata) : "", egress: N2(D2.egress) ? a92.RoomEgress.fromJSON(D2.egress) : void 0 };
  }, toJSON(D2) {
    const W2 = {};
    return D2.name !== void 0 && (W2.name = D2.name), D2.emptyTimeout !== void 0 && (W2.emptyTimeout = Math.round(D2.emptyTimeout)), D2.maxParticipants !== void 0 && (W2.maxParticipants = Math.round(D2.maxParticipants)), D2.nodeId !== void 0 && (W2.nodeId = D2.nodeId), D2.metadata !== void 0 && (W2.metadata = D2.metadata), D2.egress !== void 0 && (W2.egress = D2.egress ? a92.RoomEgress.toJSON(D2.egress) : void 0), W2;
  }, fromPartial(D2) {
    var W2, ee2, ae2, ye2, he2;
    const le2 = S2();
    return le2.name = (W2 = D2.name) !== null && W2 !== void 0 ? W2 : "", le2.emptyTimeout = (ee2 = D2.emptyTimeout) !== null && ee2 !== void 0 ? ee2 : 0, le2.maxParticipants = (ae2 = D2.maxParticipants) !== null && ae2 !== void 0 ? ae2 : 0, le2.nodeId = (ye2 = D2.nodeId) !== null && ye2 !== void 0 ? ye2 : "", le2.metadata = (he2 = D2.metadata) !== null && he2 !== void 0 ? he2 : "", le2.egress = D2.egress !== void 0 && D2.egress !== null ? a92.RoomEgress.fromPartial(D2.egress) : void 0, le2;
  } };
  function g2() {
    return { room: void 0, tracks: void 0 };
  }
  a92.RoomEgress = { encode(D2, W2 = c.default.Writer.create()) {
    return D2.room !== void 0 && l2.RoomCompositeEgressRequest.encode(D2.room, W2.uint32(10).fork()).ldelim(), D2.tracks !== void 0 && l2.AutoTrackEgress.encode(D2.tracks, W2.uint32(18).fork()).ldelim(), W2;
  }, decode(D2, W2) {
    const ee2 = D2 instanceof c.default.Reader ? D2 : new c.default.Reader(D2);
    let ae2 = W2 === void 0 ? ee2.len : ee2.pos + W2;
    const ye2 = g2();
    for (; ee2.pos < ae2; ) {
      const he2 = ee2.uint32();
      switch (he2 >>> 3) {
        case 1:
          ye2.room = l2.RoomCompositeEgressRequest.decode(ee2, ee2.uint32());
          break;
        case 2:
          ye2.tracks = l2.AutoTrackEgress.decode(ee2, ee2.uint32());
          break;
        default:
          ee2.skipType(he2 & 7);
          break;
      }
    }
    return ye2;
  }, fromJSON(D2) {
    return { room: N2(D2.room) ? l2.RoomCompositeEgressRequest.fromJSON(D2.room) : void 0, tracks: N2(D2.tracks) ? l2.AutoTrackEgress.fromJSON(D2.tracks) : void 0 };
  }, toJSON(D2) {
    const W2 = {};
    return D2.room !== void 0 && (W2.room = D2.room ? l2.RoomCompositeEgressRequest.toJSON(D2.room) : void 0), D2.tracks !== void 0 && (W2.tracks = D2.tracks ? l2.AutoTrackEgress.toJSON(D2.tracks) : void 0), W2;
  }, fromPartial(D2) {
    const W2 = g2();
    return W2.room = D2.room !== void 0 && D2.room !== null ? l2.RoomCompositeEgressRequest.fromPartial(D2.room) : void 0, W2.tracks = D2.tracks !== void 0 && D2.tracks !== null ? l2.AutoTrackEgress.fromPartial(D2.tracks) : void 0, W2;
  } };
  function E2() {
    return { names: [] };
  }
  a92.ListRoomsRequest = { encode(D2, W2 = c.default.Writer.create()) {
    if (D2.names !== void 0 && D2.names.length !== 0)
      for (const ee2 of D2.names)
        W2.uint32(10).string(ee2);
    return W2;
  }, decode(D2, W2) {
    const ee2 = D2 instanceof c.default.Reader ? D2 : new c.default.Reader(D2);
    let ae2 = W2 === void 0 ? ee2.len : ee2.pos + W2;
    const ye2 = E2();
    for (; ee2.pos < ae2; ) {
      const he2 = ee2.uint32();
      switch (he2 >>> 3) {
        case 1:
          ye2.names.push(ee2.string());
          break;
        default:
          ee2.skipType(he2 & 7);
          break;
      }
    }
    return ye2;
  }, fromJSON(D2) {
    return { names: Array.isArray(D2 == null ? void 0 : D2.names) ? D2.names.map((W2) => String(W2)) : [] };
  }, toJSON(D2) {
    const W2 = {};
    return D2.names ? W2.names = D2.names.map((ee2) => ee2) : W2.names = [], W2;
  }, fromPartial(D2) {
    var W2;
    const ee2 = E2();
    return ee2.names = ((W2 = D2.names) === null || W2 === void 0 ? void 0 : W2.map((ae2) => ae2)) || [], ee2;
  } };
  function _() {
    return { rooms: [] };
  }
  a92.ListRoomsResponse = { encode(D2, W2 = c.default.Writer.create()) {
    if (D2.rooms !== void 0 && D2.rooms.length !== 0)
      for (const ee2 of D2.rooms)
        v2.Room.encode(ee2, W2.uint32(10).fork()).ldelim();
    return W2;
  }, decode(D2, W2) {
    const ee2 = D2 instanceof c.default.Reader ? D2 : new c.default.Reader(D2);
    let ae2 = W2 === void 0 ? ee2.len : ee2.pos + W2;
    const ye2 = _();
    for (; ee2.pos < ae2; ) {
      const he2 = ee2.uint32();
      switch (he2 >>> 3) {
        case 1:
          ye2.rooms.push(v2.Room.decode(ee2, ee2.uint32()));
          break;
        default:
          ee2.skipType(he2 & 7);
          break;
      }
    }
    return ye2;
  }, fromJSON(D2) {
    return { rooms: Array.isArray(D2 == null ? void 0 : D2.rooms) ? D2.rooms.map((W2) => v2.Room.fromJSON(W2)) : [] };
  }, toJSON(D2) {
    const W2 = {};
    return D2.rooms ? W2.rooms = D2.rooms.map((ee2) => ee2 ? v2.Room.toJSON(ee2) : void 0) : W2.rooms = [], W2;
  }, fromPartial(D2) {
    var W2;
    const ee2 = _();
    return ee2.rooms = ((W2 = D2.rooms) === null || W2 === void 0 ? void 0 : W2.map((ae2) => v2.Room.fromPartial(ae2))) || [], ee2;
  } };
  function k() {
    return { room: "" };
  }
  a92.DeleteRoomRequest = { encode(D2, W2 = c.default.Writer.create()) {
    return D2.room !== void 0 && D2.room !== "" && W2.uint32(10).string(D2.room), W2;
  }, decode(D2, W2) {
    const ee2 = D2 instanceof c.default.Reader ? D2 : new c.default.Reader(D2);
    let ae2 = W2 === void 0 ? ee2.len : ee2.pos + W2;
    const ye2 = k();
    for (; ee2.pos < ae2; ) {
      const he2 = ee2.uint32();
      switch (he2 >>> 3) {
        case 1:
          ye2.room = ee2.string();
          break;
        default:
          ee2.skipType(he2 & 7);
          break;
      }
    }
    return ye2;
  }, fromJSON(D2) {
    return { room: N2(D2.room) ? String(D2.room) : "" };
  }, toJSON(D2) {
    const W2 = {};
    return D2.room !== void 0 && (W2.room = D2.room), W2;
  }, fromPartial(D2) {
    var W2;
    const ee2 = k();
    return ee2.room = (W2 = D2.room) !== null && W2 !== void 0 ? W2 : "", ee2;
  } };
  function L2() {
    return {};
  }
  a92.DeleteRoomResponse = { encode(D2, W2 = c.default.Writer.create()) {
    return W2;
  }, decode(D2, W2) {
    const ee2 = D2 instanceof c.default.Reader ? D2 : new c.default.Reader(D2);
    let ae2 = W2 === void 0 ? ee2.len : ee2.pos + W2;
    const ye2 = L2();
    for (; ee2.pos < ae2; ) {
      const he2 = ee2.uint32();
      switch (he2 >>> 3) {
        default:
          ee2.skipType(he2 & 7);
          break;
      }
    }
    return ye2;
  }, fromJSON(D2) {
    return {};
  }, toJSON(D2) {
    return {};
  }, fromPartial(D2) {
    return L2();
  } };
  function M2() {
    return { room: "" };
  }
  a92.ListParticipantsRequest = { encode(D2, W2 = c.default.Writer.create()) {
    return D2.room !== void 0 && D2.room !== "" && W2.uint32(10).string(D2.room), W2;
  }, decode(D2, W2) {
    const ee2 = D2 instanceof c.default.Reader ? D2 : new c.default.Reader(D2);
    let ae2 = W2 === void 0 ? ee2.len : ee2.pos + W2;
    const ye2 = M2();
    for (; ee2.pos < ae2; ) {
      const he2 = ee2.uint32();
      switch (he2 >>> 3) {
        case 1:
          ye2.room = ee2.string();
          break;
        default:
          ee2.skipType(he2 & 7);
          break;
      }
    }
    return ye2;
  }, fromJSON(D2) {
    return { room: N2(D2.room) ? String(D2.room) : "" };
  }, toJSON(D2) {
    const W2 = {};
    return D2.room !== void 0 && (W2.room = D2.room), W2;
  }, fromPartial(D2) {
    var W2;
    const ee2 = M2();
    return ee2.room = (W2 = D2.room) !== null && W2 !== void 0 ? W2 : "", ee2;
  } };
  function $() {
    return { participants: [] };
  }
  a92.ListParticipantsResponse = { encode(D2, W2 = c.default.Writer.create()) {
    if (D2.participants !== void 0 && D2.participants.length !== 0)
      for (const ee2 of D2.participants)
        v2.ParticipantInfo.encode(ee2, W2.uint32(10).fork()).ldelim();
    return W2;
  }, decode(D2, W2) {
    const ee2 = D2 instanceof c.default.Reader ? D2 : new c.default.Reader(D2);
    let ae2 = W2 === void 0 ? ee2.len : ee2.pos + W2;
    const ye2 = $();
    for (; ee2.pos < ae2; ) {
      const he2 = ee2.uint32();
      switch (he2 >>> 3) {
        case 1:
          ye2.participants.push(v2.ParticipantInfo.decode(ee2, ee2.uint32()));
          break;
        default:
          ee2.skipType(he2 & 7);
          break;
      }
    }
    return ye2;
  }, fromJSON(D2) {
    return { participants: Array.isArray(D2 == null ? void 0 : D2.participants) ? D2.participants.map((W2) => v2.ParticipantInfo.fromJSON(W2)) : [] };
  }, toJSON(D2) {
    const W2 = {};
    return D2.participants ? W2.participants = D2.participants.map((ee2) => ee2 ? v2.ParticipantInfo.toJSON(ee2) : void 0) : W2.participants = [], W2;
  }, fromPartial(D2) {
    var W2;
    const ee2 = $();
    return ee2.participants = ((W2 = D2.participants) === null || W2 === void 0 ? void 0 : W2.map((ae2) => v2.ParticipantInfo.fromPartial(ae2))) || [], ee2;
  } };
  function J2() {
    return { room: "", identity: "" };
  }
  a92.RoomParticipantIdentity = { encode(D2, W2 = c.default.Writer.create()) {
    return D2.room !== void 0 && D2.room !== "" && W2.uint32(10).string(D2.room), D2.identity !== void 0 && D2.identity !== "" && W2.uint32(18).string(D2.identity), W2;
  }, decode(D2, W2) {
    const ee2 = D2 instanceof c.default.Reader ? D2 : new c.default.Reader(D2);
    let ae2 = W2 === void 0 ? ee2.len : ee2.pos + W2;
    const ye2 = J2();
    for (; ee2.pos < ae2; ) {
      const he2 = ee2.uint32();
      switch (he2 >>> 3) {
        case 1:
          ye2.room = ee2.string();
          break;
        case 2:
          ye2.identity = ee2.string();
          break;
        default:
          ee2.skipType(he2 & 7);
          break;
      }
    }
    return ye2;
  }, fromJSON(D2) {
    return { room: N2(D2.room) ? String(D2.room) : "", identity: N2(D2.identity) ? String(D2.identity) : "" };
  }, toJSON(D2) {
    const W2 = {};
    return D2.room !== void 0 && (W2.room = D2.room), D2.identity !== void 0 && (W2.identity = D2.identity), W2;
  }, fromPartial(D2) {
    var W2, ee2;
    const ae2 = J2();
    return ae2.room = (W2 = D2.room) !== null && W2 !== void 0 ? W2 : "", ae2.identity = (ee2 = D2.identity) !== null && ee2 !== void 0 ? ee2 : "", ae2;
  } };
  function V2() {
    return {};
  }
  a92.RemoveParticipantResponse = { encode(D2, W2 = c.default.Writer.create()) {
    return W2;
  }, decode(D2, W2) {
    const ee2 = D2 instanceof c.default.Reader ? D2 : new c.default.Reader(D2);
    let ae2 = W2 === void 0 ? ee2.len : ee2.pos + W2;
    const ye2 = V2();
    for (; ee2.pos < ae2; ) {
      const he2 = ee2.uint32();
      switch (he2 >>> 3) {
        default:
          ee2.skipType(he2 & 7);
          break;
      }
    }
    return ye2;
  }, fromJSON(D2) {
    return {};
  }, toJSON(D2) {
    return {};
  }, fromPartial(D2) {
    return V2();
  } };
  function q2() {
    return { room: "", identity: "", trackSid: "", muted: false };
  }
  a92.MuteRoomTrackRequest = { encode(D2, W2 = c.default.Writer.create()) {
    return D2.room !== void 0 && D2.room !== "" && W2.uint32(10).string(D2.room), D2.identity !== void 0 && D2.identity !== "" && W2.uint32(18).string(D2.identity), D2.trackSid !== void 0 && D2.trackSid !== "" && W2.uint32(26).string(D2.trackSid), D2.muted === true && W2.uint32(32).bool(D2.muted), W2;
  }, decode(D2, W2) {
    const ee2 = D2 instanceof c.default.Reader ? D2 : new c.default.Reader(D2);
    let ae2 = W2 === void 0 ? ee2.len : ee2.pos + W2;
    const ye2 = q2();
    for (; ee2.pos < ae2; ) {
      const he2 = ee2.uint32();
      switch (he2 >>> 3) {
        case 1:
          ye2.room = ee2.string();
          break;
        case 2:
          ye2.identity = ee2.string();
          break;
        case 3:
          ye2.trackSid = ee2.string();
          break;
        case 4:
          ye2.muted = ee2.bool();
          break;
        default:
          ee2.skipType(he2 & 7);
          break;
      }
    }
    return ye2;
  }, fromJSON(D2) {
    return { room: N2(D2.room) ? String(D2.room) : "", identity: N2(D2.identity) ? String(D2.identity) : "", trackSid: N2(D2.trackSid) ? String(D2.trackSid) : "", muted: N2(D2.muted) ? !!D2.muted : false };
  }, toJSON(D2) {
    const W2 = {};
    return D2.room !== void 0 && (W2.room = D2.room), D2.identity !== void 0 && (W2.identity = D2.identity), D2.trackSid !== void 0 && (W2.trackSid = D2.trackSid), D2.muted !== void 0 && (W2.muted = D2.muted), W2;
  }, fromPartial(D2) {
    var W2, ee2, ae2, ye2;
    const he2 = q2();
    return he2.room = (W2 = D2.room) !== null && W2 !== void 0 ? W2 : "", he2.identity = (ee2 = D2.identity) !== null && ee2 !== void 0 ? ee2 : "", he2.trackSid = (ae2 = D2.trackSid) !== null && ae2 !== void 0 ? ae2 : "", he2.muted = (ye2 = D2.muted) !== null && ye2 !== void 0 ? ye2 : false, he2;
  } };
  function G2() {
    return { track: void 0 };
  }
  a92.MuteRoomTrackResponse = { encode(D2, W2 = c.default.Writer.create()) {
    return D2.track !== void 0 && v2.TrackInfo.encode(D2.track, W2.uint32(10).fork()).ldelim(), W2;
  }, decode(D2, W2) {
    const ee2 = D2 instanceof c.default.Reader ? D2 : new c.default.Reader(D2);
    let ae2 = W2 === void 0 ? ee2.len : ee2.pos + W2;
    const ye2 = G2();
    for (; ee2.pos < ae2; ) {
      const he2 = ee2.uint32();
      switch (he2 >>> 3) {
        case 1:
          ye2.track = v2.TrackInfo.decode(ee2, ee2.uint32());
          break;
        default:
          ee2.skipType(he2 & 7);
          break;
      }
    }
    return ye2;
  }, fromJSON(D2) {
    return { track: N2(D2.track) ? v2.TrackInfo.fromJSON(D2.track) : void 0 };
  }, toJSON(D2) {
    const W2 = {};
    return D2.track !== void 0 && (W2.track = D2.track ? v2.TrackInfo.toJSON(D2.track) : void 0), W2;
  }, fromPartial(D2) {
    const W2 = G2();
    return W2.track = D2.track !== void 0 && D2.track !== null ? v2.TrackInfo.fromPartial(D2.track) : void 0, W2;
  } };
  function H2() {
    return { room: "", identity: "", metadata: "", permission: void 0, name: "" };
  }
  a92.UpdateParticipantRequest = { encode(D2, W2 = c.default.Writer.create()) {
    return D2.room !== void 0 && D2.room !== "" && W2.uint32(10).string(D2.room), D2.identity !== void 0 && D2.identity !== "" && W2.uint32(18).string(D2.identity), D2.metadata !== void 0 && D2.metadata !== "" && W2.uint32(26).string(D2.metadata), D2.permission !== void 0 && v2.ParticipantPermission.encode(D2.permission, W2.uint32(34).fork()).ldelim(), D2.name !== void 0 && D2.name !== "" && W2.uint32(42).string(D2.name), W2;
  }, decode(D2, W2) {
    const ee2 = D2 instanceof c.default.Reader ? D2 : new c.default.Reader(D2);
    let ae2 = W2 === void 0 ? ee2.len : ee2.pos + W2;
    const ye2 = H2();
    for (; ee2.pos < ae2; ) {
      const he2 = ee2.uint32();
      switch (he2 >>> 3) {
        case 1:
          ye2.room = ee2.string();
          break;
        case 2:
          ye2.identity = ee2.string();
          break;
        case 3:
          ye2.metadata = ee2.string();
          break;
        case 4:
          ye2.permission = v2.ParticipantPermission.decode(ee2, ee2.uint32());
          break;
        case 5:
          ye2.name = ee2.string();
          break;
        default:
          ee2.skipType(he2 & 7);
          break;
      }
    }
    return ye2;
  }, fromJSON(D2) {
    return { room: N2(D2.room) ? String(D2.room) : "", identity: N2(D2.identity) ? String(D2.identity) : "", metadata: N2(D2.metadata) ? String(D2.metadata) : "", permission: N2(D2.permission) ? v2.ParticipantPermission.fromJSON(D2.permission) : void 0, name: N2(D2.name) ? String(D2.name) : "" };
  }, toJSON(D2) {
    const W2 = {};
    return D2.room !== void 0 && (W2.room = D2.room), D2.identity !== void 0 && (W2.identity = D2.identity), D2.metadata !== void 0 && (W2.metadata = D2.metadata), D2.permission !== void 0 && (W2.permission = D2.permission ? v2.ParticipantPermission.toJSON(D2.permission) : void 0), D2.name !== void 0 && (W2.name = D2.name), W2;
  }, fromPartial(D2) {
    var W2, ee2, ae2, ye2;
    const he2 = H2();
    return he2.room = (W2 = D2.room) !== null && W2 !== void 0 ? W2 : "", he2.identity = (ee2 = D2.identity) !== null && ee2 !== void 0 ? ee2 : "", he2.metadata = (ae2 = D2.metadata) !== null && ae2 !== void 0 ? ae2 : "", he2.permission = D2.permission !== void 0 && D2.permission !== null ? v2.ParticipantPermission.fromPartial(D2.permission) : void 0, he2.name = (ye2 = D2.name) !== null && ye2 !== void 0 ? ye2 : "", he2;
  } };
  function B2() {
    return { room: "", identity: "", trackSids: [], subscribe: false, participantTracks: [] };
  }
  a92.UpdateSubscriptionsRequest = { encode(D2, W2 = c.default.Writer.create()) {
    if (D2.room !== void 0 && D2.room !== "" && W2.uint32(10).string(D2.room), D2.identity !== void 0 && D2.identity !== "" && W2.uint32(18).string(D2.identity), D2.trackSids !== void 0 && D2.trackSids.length !== 0)
      for (const ee2 of D2.trackSids)
        W2.uint32(26).string(ee2);
    if (D2.subscribe === true && W2.uint32(32).bool(D2.subscribe), D2.participantTracks !== void 0 && D2.participantTracks.length !== 0)
      for (const ee2 of D2.participantTracks)
        v2.ParticipantTracks.encode(ee2, W2.uint32(42).fork()).ldelim();
    return W2;
  }, decode(D2, W2) {
    const ee2 = D2 instanceof c.default.Reader ? D2 : new c.default.Reader(D2);
    let ae2 = W2 === void 0 ? ee2.len : ee2.pos + W2;
    const ye2 = B2();
    for (; ee2.pos < ae2; ) {
      const he2 = ee2.uint32();
      switch (he2 >>> 3) {
        case 1:
          ye2.room = ee2.string();
          break;
        case 2:
          ye2.identity = ee2.string();
          break;
        case 3:
          ye2.trackSids.push(ee2.string());
          break;
        case 4:
          ye2.subscribe = ee2.bool();
          break;
        case 5:
          ye2.participantTracks.push(v2.ParticipantTracks.decode(ee2, ee2.uint32()));
          break;
        default:
          ee2.skipType(he2 & 7);
          break;
      }
    }
    return ye2;
  }, fromJSON(D2) {
    return { room: N2(D2.room) ? String(D2.room) : "", identity: N2(D2.identity) ? String(D2.identity) : "", trackSids: Array.isArray(D2 == null ? void 0 : D2.trackSids) ? D2.trackSids.map((W2) => String(W2)) : [], subscribe: N2(D2.subscribe) ? !!D2.subscribe : false, participantTracks: Array.isArray(D2 == null ? void 0 : D2.participantTracks) ? D2.participantTracks.map((W2) => v2.ParticipantTracks.fromJSON(W2)) : [] };
  }, toJSON(D2) {
    const W2 = {};
    return D2.room !== void 0 && (W2.room = D2.room), D2.identity !== void 0 && (W2.identity = D2.identity), D2.trackSids ? W2.trackSids = D2.trackSids.map((ee2) => ee2) : W2.trackSids = [], D2.subscribe !== void 0 && (W2.subscribe = D2.subscribe), D2.participantTracks ? W2.participantTracks = D2.participantTracks.map((ee2) => ee2 ? v2.ParticipantTracks.toJSON(ee2) : void 0) : W2.participantTracks = [], W2;
  }, fromPartial(D2) {
    var W2, ee2, ae2, ye2, he2;
    const le2 = B2();
    return le2.room = (W2 = D2.room) !== null && W2 !== void 0 ? W2 : "", le2.identity = (ee2 = D2.identity) !== null && ee2 !== void 0 ? ee2 : "", le2.trackSids = ((ae2 = D2.trackSids) === null || ae2 === void 0 ? void 0 : ae2.map((we2) => we2)) || [], le2.subscribe = (ye2 = D2.subscribe) !== null && ye2 !== void 0 ? ye2 : false, le2.participantTracks = ((he2 = D2.participantTracks) === null || he2 === void 0 ? void 0 : he2.map((we2) => v2.ParticipantTracks.fromPartial(we2))) || [], le2;
  } };
  function Y2() {
    return {};
  }
  a92.UpdateSubscriptionsResponse = { encode(D2, W2 = c.default.Writer.create()) {
    return W2;
  }, decode(D2, W2) {
    const ee2 = D2 instanceof c.default.Reader ? D2 : new c.default.Reader(D2);
    let ae2 = W2 === void 0 ? ee2.len : ee2.pos + W2;
    const ye2 = Y2();
    for (; ee2.pos < ae2; ) {
      const he2 = ee2.uint32();
      switch (he2 >>> 3) {
        default:
          ee2.skipType(he2 & 7);
          break;
      }
    }
    return ye2;
  }, fromJSON(D2) {
    return {};
  }, toJSON(D2) {
    return {};
  }, fromPartial(D2) {
    return Y2();
  } };
  function ne2() {
    return { room: "", data: new Uint8Array(), kind: 0, destinationSids: [] };
  }
  a92.SendDataRequest = { encode(D2, W2 = c.default.Writer.create()) {
    if (D2.room !== void 0 && D2.room !== "" && W2.uint32(10).string(D2.room), D2.data !== void 0 && D2.data.length !== 0 && W2.uint32(18).bytes(D2.data), D2.kind !== void 0 && D2.kind !== 0 && W2.uint32(24).int32(D2.kind), D2.destinationSids !== void 0 && D2.destinationSids.length !== 0)
      for (const ee2 of D2.destinationSids)
        W2.uint32(34).string(ee2);
    return W2;
  }, decode(D2, W2) {
    const ee2 = D2 instanceof c.default.Reader ? D2 : new c.default.Reader(D2);
    let ae2 = W2 === void 0 ? ee2.len : ee2.pos + W2;
    const ye2 = ne2();
    for (; ee2.pos < ae2; ) {
      const he2 = ee2.uint32();
      switch (he2 >>> 3) {
        case 1:
          ye2.room = ee2.string();
          break;
        case 2:
          ye2.data = ee2.bytes();
          break;
        case 3:
          ye2.kind = ee2.int32();
          break;
        case 4:
          ye2.destinationSids.push(ee2.string());
          break;
        default:
          ee2.skipType(he2 & 7);
          break;
      }
    }
    return ye2;
  }, fromJSON(D2) {
    return { room: N2(D2.room) ? String(D2.room) : "", data: N2(D2.data) ? de2(D2.data) : new Uint8Array(), kind: N2(D2.kind) ? v2.dataPacket_KindFromJSON(D2.kind) : 0, destinationSids: Array.isArray(D2 == null ? void 0 : D2.destinationSids) ? D2.destinationSids.map((W2) => String(W2)) : [] };
  }, toJSON(D2) {
    const W2 = {};
    return D2.room !== void 0 && (W2.room = D2.room), D2.data !== void 0 && (W2.data = A2(D2.data !== void 0 ? D2.data : new Uint8Array())), D2.kind !== void 0 && (W2.kind = v2.dataPacket_KindToJSON(D2.kind)), D2.destinationSids ? W2.destinationSids = D2.destinationSids.map((ee2) => ee2) : W2.destinationSids = [], W2;
  }, fromPartial(D2) {
    var W2, ee2, ae2, ye2;
    const he2 = ne2();
    return he2.room = (W2 = D2.room) !== null && W2 !== void 0 ? W2 : "", he2.data = (ee2 = D2.data) !== null && ee2 !== void 0 ? ee2 : new Uint8Array(), he2.kind = (ae2 = D2.kind) !== null && ae2 !== void 0 ? ae2 : 0, he2.destinationSids = ((ye2 = D2.destinationSids) === null || ye2 === void 0 ? void 0 : ye2.map((le2) => le2)) || [], he2;
  } };
  function Z2() {
    return {};
  }
  a92.SendDataResponse = { encode(D2, W2 = c.default.Writer.create()) {
    return W2;
  }, decode(D2, W2) {
    const ee2 = D2 instanceof c.default.Reader ? D2 : new c.default.Reader(D2);
    let ae2 = W2 === void 0 ? ee2.len : ee2.pos + W2;
    const ye2 = Z2();
    for (; ee2.pos < ae2; ) {
      const he2 = ee2.uint32();
      switch (he2 >>> 3) {
        default:
          ee2.skipType(he2 & 7);
          break;
      }
    }
    return ye2;
  }, fromJSON(D2) {
    return {};
  }, toJSON(D2) {
    return {};
  }, fromPartial(D2) {
    return Z2();
  } };
  function re2() {
    return { room: "", metadata: "" };
  }
  a92.UpdateRoomMetadataRequest = { encode(D2, W2 = c.default.Writer.create()) {
    return D2.room !== void 0 && D2.room !== "" && W2.uint32(10).string(D2.room), D2.metadata !== void 0 && D2.metadata !== "" && W2.uint32(18).string(D2.metadata), W2;
  }, decode(D2, W2) {
    const ee2 = D2 instanceof c.default.Reader ? D2 : new c.default.Reader(D2);
    let ae2 = W2 === void 0 ? ee2.len : ee2.pos + W2;
    const ye2 = re2();
    for (; ee2.pos < ae2; ) {
      const he2 = ee2.uint32();
      switch (he2 >>> 3) {
        case 1:
          ye2.room = ee2.string();
          break;
        case 2:
          ye2.metadata = ee2.string();
          break;
        default:
          ee2.skipType(he2 & 7);
          break;
      }
    }
    return ye2;
  }, fromJSON(D2) {
    return { room: N2(D2.room) ? String(D2.room) : "", metadata: N2(D2.metadata) ? String(D2.metadata) : "" };
  }, toJSON(D2) {
    const W2 = {};
    return D2.room !== void 0 && (W2.room = D2.room), D2.metadata !== void 0 && (W2.metadata = D2.metadata), W2;
  }, fromPartial(D2) {
    var W2, ee2;
    const ae2 = re2();
    return ae2.room = (W2 = D2.room) !== null && W2 !== void 0 ? W2 : "", ae2.metadata = (ee2 = D2.metadata) !== null && ee2 !== void 0 ? ee2 : "", ae2;
  } };
  var oe2 = (() => {
    if (typeof oe2 < "u")
      return oe2;
    if (typeof self < "u")
      return self;
    if (typeof window < "u")
      return window;
    if (typeof commonjsGlobal$1 < "u")
      return commonjsGlobal$1;
    throw "Unable to locate global object";
  })();
  function de2(D2) {
    if (oe2.Buffer)
      return Uint8Array.from(oe2.Buffer.from(D2, "base64"));
    {
      const W2 = oe2.atob(D2), ee2 = new Uint8Array(W2.length);
      for (let ae2 = 0; ae2 < W2.length; ++ae2)
        ee2[ae2] = W2.charCodeAt(ae2);
      return ee2;
    }
  }
  function A2(D2) {
    if (oe2.Buffer)
      return oe2.Buffer.from(D2).toString("base64");
    {
      const W2 = [];
      return D2.forEach((ee2) => {
        W2.push(String.fromCharCode(ee2));
      }), oe2.btoa(W2.join(""));
    }
  }
  function N2(D2) {
    return D2 != null;
  }
})(livekit_room);
var __awaiter$1 = commonjsGlobal$1 && commonjsGlobal$1.__awaiter || function(a92, u2, c, l2) {
  function v2(S2) {
    return S2 instanceof c ? S2 : new c(function(g2) {
      g2(S2);
    });
  }
  return new (c || (c = Promise))(function(S2, g2) {
    function E2(L2) {
      try {
        k(l2.next(L2));
      } catch (M2) {
        g2(M2);
      }
    }
    function _(L2) {
      try {
        k(l2.throw(L2));
      } catch (M2) {
        g2(M2);
      }
    }
    function k(L2) {
      L2.done ? S2(L2.value) : v2(L2.value).then(E2, _);
    }
    k((l2 = l2.apply(a92, u2 || [])).next());
  });
}, __importDefault$2 = commonjsGlobal$1 && commonjsGlobal$1.__importDefault || function(a92) {
  return a92 && a92.__esModule ? a92 : { default: a92 };
};
Object.defineProperty(RoomServiceClient$1, "__esModule", { value: true });
RoomServiceClient$1.RoomServiceClient = void 0;
const livekit_models_1$1 = livekit_models, livekit_room_1 = livekit_room, ServiceBase_1 = __importDefault$2(ServiceBase$1), TwirpRPC_1 = TwirpRPC, svc = "RoomService";
class RoomServiceClient extends ServiceBase_1.default {
  /**
  *
  * @param host hostname including protocol. i.e. 'https://cluster.livekit.io'
  * @param apiKey API Key, can be set in env var LIVEKIT_API_KEY
  * @param secret API Secret, can be set in env var LIVEKIT_API_SECRET
  * @param jwt JWT Token, a pregenerated JWT token for authentication.
  * @param hostHeader A host header to send with the request.
  *
  */
  constructor(u2, c, l2, v2, S2) {
    super(c, l2), this.jwt = v2, this.rpc = new TwirpRPC_1.TwirpRpc(u2, TwirpRPC_1.livekitPackage, void 0, S2);
  }
  /**
  * Creates a new room. Explicit room creation is not required, since rooms will
  * be automatically created when the first participant joins. This method can be
  * used to customize room settings.
  * @param options
  */
  createRoom(u2) {
    return __awaiter$1(this, void 0, void 0, function* () {
      const c = yield this.rpc.request(svc, "CreateRoom", livekit_room_1.CreateRoomRequest.toJSON(livekit_room_1.CreateRoomRequest.fromPartial(u2)), this.authHeader({ roomCreate: true }));
      return livekit_models_1$1.Room.fromJSON(c);
    });
  }
  /**
  * List active rooms
  * @param names when undefined or empty, list all rooms.
  *              otherwise returns rooms with matching names
  * @returns
  */
  listRooms(u2) {
    var c;
    return __awaiter$1(this, void 0, void 0, function* () {
      const l2 = yield this.rpc.request(svc, "ListRooms", livekit_room_1.ListRoomsRequest.toJSON({ names: u2 ?? [] }), this.authHeader({ roomList: true }));
      return (c = livekit_room_1.ListRoomsResponse.fromJSON(l2).rooms) !== null && c !== void 0 ? c : [];
    });
  }
  deleteRoom(u2) {
    return __awaiter$1(this, void 0, void 0, function* () {
      yield this.rpc.request(svc, "DeleteRoom", livekit_room_1.DeleteRoomRequest.toJSON({ room: u2 }), this.authHeader({ roomCreate: true }));
    });
  }
  /**
  * Update metadata of a room
  * @param room name of the room
  * @param metadata the new metadata for the room
  */
  updateRoomMetadata(u2, c) {
    return __awaiter$1(this, void 0, void 0, function* () {
      const l2 = yield this.rpc.request(svc, "UpdateRoomMetadata", livekit_room_1.UpdateRoomMetadataRequest.toJSON({ room: u2, metadata: c }), this.authHeader({ roomAdmin: true, room: u2 }));
      return livekit_models_1$1.Room.fromJSON(l2);
    });
  }
  /**
  * List participants in a room
  * @param room name of the room
  */
  listParticipants(u2) {
    var c;
    return __awaiter$1(this, void 0, void 0, function* () {
      const l2 = yield this.rpc.request(svc, "ListParticipants", livekit_room_1.ListParticipantsRequest.toJSON({ room: u2 }), this.authHeader({ roomAdmin: true, room: u2 }));
      return (c = livekit_room_1.ListParticipantsResponse.fromJSON(l2).participants) !== null && c !== void 0 ? c : [];
    });
  }
  /**
  * Get information on a specific participant, including the tracks that participant
  * has published
  * @param room name of the room
  * @param identity identity of the participant to return
  */
  getParticipant(u2, c) {
    return __awaiter$1(this, void 0, void 0, function* () {
      const l2 = yield this.rpc.request(svc, "GetParticipant", livekit_room_1.RoomParticipantIdentity.toJSON({ room: u2, identity: c }), this.authHeader({ roomAdmin: true, room: u2 }));
      return livekit_models_1$1.ParticipantInfo.fromJSON(l2);
    });
  }
  /**
  * Removes a participant in the room. This will disconnect the participant
  * and will emit a Disconnected event for that participant.
  * Even after being removed, the participant can still re-join the room.
  * @param room
  * @param identity
  */
  removeParticipant(u2, c) {
    return __awaiter$1(this, void 0, void 0, function* () {
      yield this.rpc.request(svc, "RemoveParticipant", livekit_room_1.RoomParticipantIdentity.toJSON({ room: u2, identity: c }), this.authHeader({ roomAdmin: true, room: u2 }));
    });
  }
  /**
  * Mutes a track that the participant has published.
  * @param room
  * @param identity
  * @param trackSid sid of the track to be muted
  * @param muted true to mute, false to unmute
  */
  mutePublishedTrack(u2, c, l2, v2) {
    return __awaiter$1(this, void 0, void 0, function* () {
      const S2 = livekit_room_1.MuteRoomTrackRequest.toJSON({ room: u2, identity: c, trackSid: l2, muted: v2 }), g2 = yield this.rpc.request(svc, "MutePublishedTrack", S2, this.authHeader({ roomAdmin: true, room: u2 }));
      return livekit_room_1.MuteRoomTrackResponse.fromJSON(g2).track;
    });
  }
  /**
  * Updates a participant's metadata or permissions
  * @param room
  * @param identity
  * @param metadata optional, metadata to update
  * @param permission optional, new permissions to assign to participant
  * @param name optional, new name for participant
  */
  updateParticipant(u2, c, l2, v2, S2) {
    return __awaiter$1(this, void 0, void 0, function* () {
      const g2 = { room: u2, identity: c, metadata: l2 || "", permission: v2, name: S2 || "" }, E2 = yield this.rpc.request(svc, "UpdateParticipant", livekit_room_1.UpdateParticipantRequest.toJSON(g2), this.authHeader({ roomAdmin: true, room: u2 }));
      return livekit_models_1$1.ParticipantInfo.fromJSON(E2);
    });
  }
  /**
  * Updates a participant's subscription to tracks
  * @param room
  * @param identity
  * @param trackSids
  * @param subscribe true to subscribe, false to unsubscribe
  */
  updateSubscriptions(u2, c, l2, v2) {
    return __awaiter$1(this, void 0, void 0, function* () {
      const S2 = livekit_room_1.UpdateSubscriptionsRequest.toJSON({ room: u2, identity: c, trackSids: l2, subscribe: v2, participantTracks: [] });
      yield this.rpc.request(svc, "UpdateSubscriptions", S2, this.authHeader({ roomAdmin: true, room: u2 }));
    });
  }
  /**
  * Sends data message to participants in the room
  * @param room
  * @param data opaque payload to send
  * @param kind delivery reliability
  * @param destinationSids optional. when empty, message is sent to everyone
  */
  sendData(u2, c, l2, v2 = []) {
    return __awaiter$1(this, void 0, void 0, function* () {
      const S2 = livekit_room_1.SendDataRequest.toJSON({ room: u2, data: c, kind: l2, destinationSids: v2 });
      yield this.rpc.request(svc, "SendData", S2, this.authHeader({ roomAdmin: true, room: u2 }));
    });
  }
  authHeader(u2) {
    return this.jwt ? { Authorization: `Bearer ${this.jwt}` } : super.authHeader(u2);
  }
}
RoomServiceClient$1.RoomServiceClient = RoomServiceClient;
var WebhookReceiver$1 = {}, livekit_webhook = {}, __importDefault$1 = commonjsGlobal$1 && commonjsGlobal$1.__importDefault || function(a92) {
  return a92 && a92.__esModule ? a92 : { default: a92 };
};
Object.defineProperty(livekit_webhook, "__esModule", { value: true });
livekit_webhook.WebhookEvent = livekit_webhook.protobufPackage = void 0;
const long_1 = __importDefault$1(umdExports), minimal_1 = __importDefault$1(minimal), livekit_egress_1 = livekit_egress, livekit_ingress_1 = livekit_ingress, livekit_models_1 = livekit_models;
livekit_webhook.protobufPackage = "livekit";
function createBaseWebhookEvent() {
  return { event: "", room: void 0, participant: void 0, egressInfo: void 0, ingressInfo: void 0, track: void 0, id: "", createdAt: 0 };
}
livekit_webhook.WebhookEvent = { encode(a92, u2 = minimal_1.default.Writer.create()) {
  return a92.event !== void 0 && a92.event !== "" && u2.uint32(10).string(a92.event), a92.room !== void 0 && livekit_models_1.Room.encode(a92.room, u2.uint32(18).fork()).ldelim(), a92.participant !== void 0 && livekit_models_1.ParticipantInfo.encode(a92.participant, u2.uint32(26).fork()).ldelim(), a92.egressInfo !== void 0 && livekit_egress_1.EgressInfo.encode(a92.egressInfo, u2.uint32(74).fork()).ldelim(), a92.ingressInfo !== void 0 && livekit_ingress_1.IngressInfo.encode(a92.ingressInfo, u2.uint32(82).fork()).ldelim(), a92.track !== void 0 && livekit_models_1.TrackInfo.encode(a92.track, u2.uint32(66).fork()).ldelim(), a92.id !== void 0 && a92.id !== "" && u2.uint32(50).string(a92.id), a92.createdAt !== void 0 && a92.createdAt !== 0 && u2.uint32(56).int64(a92.createdAt), u2;
}, decode(a92, u2) {
  const c = a92 instanceof minimal_1.default.Reader ? a92 : new minimal_1.default.Reader(a92);
  let l2 = u2 === void 0 ? c.len : c.pos + u2;
  const v2 = createBaseWebhookEvent();
  for (; c.pos < l2; ) {
    const S2 = c.uint32();
    switch (S2 >>> 3) {
      case 1:
        v2.event = c.string();
        break;
      case 2:
        v2.room = livekit_models_1.Room.decode(c, c.uint32());
        break;
      case 3:
        v2.participant = livekit_models_1.ParticipantInfo.decode(c, c.uint32());
        break;
      case 9:
        v2.egressInfo = livekit_egress_1.EgressInfo.decode(c, c.uint32());
        break;
      case 10:
        v2.ingressInfo = livekit_ingress_1.IngressInfo.decode(c, c.uint32());
        break;
      case 8:
        v2.track = livekit_models_1.TrackInfo.decode(c, c.uint32());
        break;
      case 6:
        v2.id = c.string();
        break;
      case 7:
        v2.createdAt = longToNumber(c.int64());
        break;
      default:
        c.skipType(S2 & 7);
        break;
    }
  }
  return v2;
}, fromJSON(a92) {
  return { event: isSet(a92.event) ? String(a92.event) : "", room: isSet(a92.room) ? livekit_models_1.Room.fromJSON(a92.room) : void 0, participant: isSet(a92.participant) ? livekit_models_1.ParticipantInfo.fromJSON(a92.participant) : void 0, egressInfo: isSet(a92.egressInfo) ? livekit_egress_1.EgressInfo.fromJSON(a92.egressInfo) : void 0, ingressInfo: isSet(a92.ingressInfo) ? livekit_ingress_1.IngressInfo.fromJSON(a92.ingressInfo) : void 0, track: isSet(a92.track) ? livekit_models_1.TrackInfo.fromJSON(a92.track) : void 0, id: isSet(a92.id) ? String(a92.id) : "", createdAt: isSet(a92.createdAt) ? Number(a92.createdAt) : 0 };
}, toJSON(a92) {
  const u2 = {};
  return a92.event !== void 0 && (u2.event = a92.event), a92.room !== void 0 && (u2.room = a92.room ? livekit_models_1.Room.toJSON(a92.room) : void 0), a92.participant !== void 0 && (u2.participant = a92.participant ? livekit_models_1.ParticipantInfo.toJSON(a92.participant) : void 0), a92.egressInfo !== void 0 && (u2.egressInfo = a92.egressInfo ? livekit_egress_1.EgressInfo.toJSON(a92.egressInfo) : void 0), a92.ingressInfo !== void 0 && (u2.ingressInfo = a92.ingressInfo ? livekit_ingress_1.IngressInfo.toJSON(a92.ingressInfo) : void 0), a92.track !== void 0 && (u2.track = a92.track ? livekit_models_1.TrackInfo.toJSON(a92.track) : void 0), a92.id !== void 0 && (u2.id = a92.id), a92.createdAt !== void 0 && (u2.createdAt = Math.round(a92.createdAt)), u2;
}, fromPartial(a92) {
  var u2, c, l2;
  const v2 = createBaseWebhookEvent();
  return v2.event = (u2 = a92.event) !== null && u2 !== void 0 ? u2 : "", v2.room = a92.room !== void 0 && a92.room !== null ? livekit_models_1.Room.fromPartial(a92.room) : void 0, v2.participant = a92.participant !== void 0 && a92.participant !== null ? livekit_models_1.ParticipantInfo.fromPartial(a92.participant) : void 0, v2.egressInfo = a92.egressInfo !== void 0 && a92.egressInfo !== null ? livekit_egress_1.EgressInfo.fromPartial(a92.egressInfo) : void 0, v2.ingressInfo = a92.ingressInfo !== void 0 && a92.ingressInfo !== null ? livekit_ingress_1.IngressInfo.fromPartial(a92.ingressInfo) : void 0, v2.track = a92.track !== void 0 && a92.track !== null ? livekit_models_1.TrackInfo.fromPartial(a92.track) : void 0, v2.id = (c = a92.id) !== null && c !== void 0 ? c : "", v2.createdAt = (l2 = a92.createdAt) !== null && l2 !== void 0 ? l2 : 0, v2;
} };
var globalThis$1 = (() => {
  if (typeof globalThis$1 < "u")
    return globalThis$1;
  if (typeof self < "u")
    return self;
  if (typeof window < "u")
    return window;
  if (typeof commonjsGlobal$1 < "u")
    return commonjsGlobal$1;
  throw "Unable to locate global object";
})();
function longToNumber(a92) {
  if (a92.gt(Number.MAX_SAFE_INTEGER))
    throw new globalThis$1.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  return a92.toNumber();
}
minimal_1.default.util.Long !== long_1.default && (minimal_1.default.util.Long = long_1.default, minimal_1.default.configure());
function isSet(a92) {
  return a92 != null;
}
var __importDefault = commonjsGlobal$1 && commonjsGlobal$1.__importDefault || function(a92) {
  return a92 && a92.__esModule ? a92 : { default: a92 };
};
Object.defineProperty(WebhookReceiver$1, "__esModule", { value: true });
WebhookReceiver$1.WebhookReceiver = WebhookReceiver$1.authorizeHeader = void 0;
const crypto_1 = __importDefault(require$$0$1), AccessToken_1 = AccessToken$1, livekit_webhook_1 = livekit_webhook;
WebhookReceiver$1.authorizeHeader = "Authorize";
class WebhookReceiver {
  constructor(u2, c) {
    this.verifier = new AccessToken_1.TokenVerifier(u2, c);
  }
  /**
  *
  * @param body string of the posted body
  * @param authHeader `Authorization` header from the request
  * @param skipAuth true to skip auth validation
  * @returns
  */
  receive(u2, c, l2 = false) {
    if (!l2) {
      if (!c)
        throw new Error("authorization header is empty");
      const v2 = this.verifier.verify(c), S2 = crypto_1.default.createHash("sha256");
      if (S2.update(u2), v2.sha256 !== S2.digest("base64"))
        throw new Error("sha256 checksum of body does not match");
    }
    return livekit_webhook_1.WebhookEvent.fromJSON(JSON.parse(u2));
  }
}
WebhookReceiver$1.WebhookReceiver = WebhookReceiver;
var livekit_internal = {}, livekit_rtc = {};
(function(a92) {
  var u2 = commonjsGlobal$1 && commonjsGlobal$1.__importDefault || function(C2) {
    return C2 && C2.__esModule ? C2 : { default: C2 };
  };
  Object.defineProperty(a92, "__esModule", { value: true }), a92.SimulateScenario = a92.DataChannelInfo = a92.SyncState = a92.SubscriptionPermissionUpdate = a92.SubscriptionPermission = a92.TrackPermission = a92.SubscribedQualityUpdate = a92.SubscribedCodec = a92.SubscribedQuality = a92.StreamStateUpdate = a92.StreamStateInfo = a92.ConnectionQualityUpdate = a92.ConnectionQualityInfo = a92.RoomUpdate = a92.SpeakersChanged = a92.ICEServer = a92.UpdateVideoLayers = a92.LeaveRequest = a92.UpdateTrackSettings = a92.UpdateSubscription = a92.ParticipantUpdate = a92.SessionDescription = a92.TrackUnpublishedResponse = a92.TrackPublishedResponse = a92.JoinResponse = a92.MuteTrackRequest = a92.TrickleRequest = a92.AddTrackRequest = a92.SimulcastCodec = a92.SignalResponse = a92.SignalRequest = a92.candidateProtocolToJSON = a92.candidateProtocolFromJSON = a92.CandidateProtocol = a92.streamStateToJSON = a92.streamStateFromJSON = a92.StreamState = a92.signalTargetToJSON = a92.signalTargetFromJSON = a92.SignalTarget = a92.protobufPackage = void 0;
  const c = u2(umdExports), l2 = u2(minimal), v2 = livekit_models;
  a92.protobufPackage = "livekit";
  var S2;
  (function(C2) {
    C2[C2.PUBLISHER = 0] = "PUBLISHER", C2[C2.SUBSCRIBER = 1] = "SUBSCRIBER", C2[C2.UNRECOGNIZED = -1] = "UNRECOGNIZED";
  })(S2 = a92.SignalTarget || (a92.SignalTarget = {}));
  function g2(C2) {
    switch (C2) {
      case 0:
      case "PUBLISHER":
        return S2.PUBLISHER;
      case 1:
      case "SUBSCRIBER":
        return S2.SUBSCRIBER;
      case -1:
      case "UNRECOGNIZED":
      default:
        return S2.UNRECOGNIZED;
    }
  }
  a92.signalTargetFromJSON = g2;
  function E2(C2) {
    switch (C2) {
      case S2.PUBLISHER:
        return "PUBLISHER";
      case S2.SUBSCRIBER:
        return "SUBSCRIBER";
      case S2.UNRECOGNIZED:
      default:
        return "UNRECOGNIZED";
    }
  }
  a92.signalTargetToJSON = E2;
  var _;
  (function(C2) {
    C2[C2.ACTIVE = 0] = "ACTIVE", C2[C2.PAUSED = 1] = "PAUSED", C2[C2.UNRECOGNIZED = -1] = "UNRECOGNIZED";
  })(_ = a92.StreamState || (a92.StreamState = {}));
  function k(C2) {
    switch (C2) {
      case 0:
      case "ACTIVE":
        return _.ACTIVE;
      case 1:
      case "PAUSED":
        return _.PAUSED;
      case -1:
      case "UNRECOGNIZED":
      default:
        return _.UNRECOGNIZED;
    }
  }
  a92.streamStateFromJSON = k;
  function L2(C2) {
    switch (C2) {
      case _.ACTIVE:
        return "ACTIVE";
      case _.PAUSED:
        return "PAUSED";
      case _.UNRECOGNIZED:
      default:
        return "UNRECOGNIZED";
    }
  }
  a92.streamStateToJSON = L2;
  var M2;
  (function(C2) {
    C2[C2.UDP = 0] = "UDP", C2[C2.TCP = 1] = "TCP", C2[C2.TLS = 2] = "TLS", C2[C2.UNRECOGNIZED = -1] = "UNRECOGNIZED";
  })(M2 = a92.CandidateProtocol || (a92.CandidateProtocol = {}));
  function $(C2) {
    switch (C2) {
      case 0:
      case "UDP":
        return M2.UDP;
      case 1:
      case "TCP":
        return M2.TCP;
      case 2:
      case "TLS":
        return M2.TLS;
      case -1:
      case "UNRECOGNIZED":
      default:
        return M2.UNRECOGNIZED;
    }
  }
  a92.candidateProtocolFromJSON = $;
  function J2(C2) {
    switch (C2) {
      case M2.UDP:
        return "UDP";
      case M2.TCP:
        return "TCP";
      case M2.TLS:
        return "TLS";
      case M2.UNRECOGNIZED:
      default:
        return "UNRECOGNIZED";
    }
  }
  a92.candidateProtocolToJSON = J2;
  function V2() {
    return { offer: void 0, answer: void 0, trickle: void 0, addTrack: void 0, mute: void 0, subscription: void 0, trackSetting: void 0, leave: void 0, updateLayers: void 0, subscriptionPermission: void 0, syncState: void 0, simulate: void 0, ping: void 0 };
  }
  a92.SignalRequest = { encode(C2, x2 = l2.default.Writer.create()) {
    return C2.offer !== void 0 && a92.SessionDescription.encode(C2.offer, x2.uint32(10).fork()).ldelim(), C2.answer !== void 0 && a92.SessionDescription.encode(C2.answer, x2.uint32(18).fork()).ldelim(), C2.trickle !== void 0 && a92.TrickleRequest.encode(C2.trickle, x2.uint32(26).fork()).ldelim(), C2.addTrack !== void 0 && a92.AddTrackRequest.encode(C2.addTrack, x2.uint32(34).fork()).ldelim(), C2.mute !== void 0 && a92.MuteTrackRequest.encode(C2.mute, x2.uint32(42).fork()).ldelim(), C2.subscription !== void 0 && a92.UpdateSubscription.encode(C2.subscription, x2.uint32(50).fork()).ldelim(), C2.trackSetting !== void 0 && a92.UpdateTrackSettings.encode(C2.trackSetting, x2.uint32(58).fork()).ldelim(), C2.leave !== void 0 && a92.LeaveRequest.encode(C2.leave, x2.uint32(66).fork()).ldelim(), C2.updateLayers !== void 0 && a92.UpdateVideoLayers.encode(C2.updateLayers, x2.uint32(82).fork()).ldelim(), C2.subscriptionPermission !== void 0 && a92.SubscriptionPermission.encode(C2.subscriptionPermission, x2.uint32(90).fork()).ldelim(), C2.syncState !== void 0 && a92.SyncState.encode(C2.syncState, x2.uint32(98).fork()).ldelim(), C2.simulate !== void 0 && a92.SimulateScenario.encode(C2.simulate, x2.uint32(106).fork()).ldelim(), C2.ping !== void 0 && x2.uint32(112).int64(C2.ping), x2;
  }, decode(C2, x2) {
    const Q2 = C2 instanceof l2.default.Reader ? C2 : new l2.default.Reader(C2);
    let Se2 = x2 === void 0 ? Q2.len : Q2.pos + x2;
    const me2 = V2();
    for (; Q2.pos < Se2; ) {
      const Ie2 = Q2.uint32();
      switch (Ie2 >>> 3) {
        case 1:
          me2.offer = a92.SessionDescription.decode(Q2, Q2.uint32());
          break;
        case 2:
          me2.answer = a92.SessionDescription.decode(Q2, Q2.uint32());
          break;
        case 3:
          me2.trickle = a92.TrickleRequest.decode(Q2, Q2.uint32());
          break;
        case 4:
          me2.addTrack = a92.AddTrackRequest.decode(Q2, Q2.uint32());
          break;
        case 5:
          me2.mute = a92.MuteTrackRequest.decode(Q2, Q2.uint32());
          break;
        case 6:
          me2.subscription = a92.UpdateSubscription.decode(Q2, Q2.uint32());
          break;
        case 7:
          me2.trackSetting = a92.UpdateTrackSettings.decode(Q2, Q2.uint32());
          break;
        case 8:
          me2.leave = a92.LeaveRequest.decode(Q2, Q2.uint32());
          break;
        case 10:
          me2.updateLayers = a92.UpdateVideoLayers.decode(Q2, Q2.uint32());
          break;
        case 11:
          me2.subscriptionPermission = a92.SubscriptionPermission.decode(Q2, Q2.uint32());
          break;
        case 12:
          me2.syncState = a92.SyncState.decode(Q2, Q2.uint32());
          break;
        case 13:
          me2.simulate = a92.SimulateScenario.decode(Q2, Q2.uint32());
          break;
        case 14:
          me2.ping = xe2(Q2.int64());
          break;
        default:
          Q2.skipType(Ie2 & 7);
          break;
      }
    }
    return me2;
  }, fromJSON(C2) {
    return { offer: Pe2(C2.offer) ? a92.SessionDescription.fromJSON(C2.offer) : void 0, answer: Pe2(C2.answer) ? a92.SessionDescription.fromJSON(C2.answer) : void 0, trickle: Pe2(C2.trickle) ? a92.TrickleRequest.fromJSON(C2.trickle) : void 0, addTrack: Pe2(C2.addTrack) ? a92.AddTrackRequest.fromJSON(C2.addTrack) : void 0, mute: Pe2(C2.mute) ? a92.MuteTrackRequest.fromJSON(C2.mute) : void 0, subscription: Pe2(C2.subscription) ? a92.UpdateSubscription.fromJSON(C2.subscription) : void 0, trackSetting: Pe2(C2.trackSetting) ? a92.UpdateTrackSettings.fromJSON(C2.trackSetting) : void 0, leave: Pe2(C2.leave) ? a92.LeaveRequest.fromJSON(C2.leave) : void 0, updateLayers: Pe2(C2.updateLayers) ? a92.UpdateVideoLayers.fromJSON(C2.updateLayers) : void 0, subscriptionPermission: Pe2(C2.subscriptionPermission) ? a92.SubscriptionPermission.fromJSON(C2.subscriptionPermission) : void 0, syncState: Pe2(C2.syncState) ? a92.SyncState.fromJSON(C2.syncState) : void 0, simulate: Pe2(C2.simulate) ? a92.SimulateScenario.fromJSON(C2.simulate) : void 0, ping: Pe2(C2.ping) ? Number(C2.ping) : void 0 };
  }, toJSON(C2) {
    const x2 = {};
    return C2.offer !== void 0 && (x2.offer = C2.offer ? a92.SessionDescription.toJSON(C2.offer) : void 0), C2.answer !== void 0 && (x2.answer = C2.answer ? a92.SessionDescription.toJSON(C2.answer) : void 0), C2.trickle !== void 0 && (x2.trickle = C2.trickle ? a92.TrickleRequest.toJSON(C2.trickle) : void 0), C2.addTrack !== void 0 && (x2.addTrack = C2.addTrack ? a92.AddTrackRequest.toJSON(C2.addTrack) : void 0), C2.mute !== void 0 && (x2.mute = C2.mute ? a92.MuteTrackRequest.toJSON(C2.mute) : void 0), C2.subscription !== void 0 && (x2.subscription = C2.subscription ? a92.UpdateSubscription.toJSON(C2.subscription) : void 0), C2.trackSetting !== void 0 && (x2.trackSetting = C2.trackSetting ? a92.UpdateTrackSettings.toJSON(C2.trackSetting) : void 0), C2.leave !== void 0 && (x2.leave = C2.leave ? a92.LeaveRequest.toJSON(C2.leave) : void 0), C2.updateLayers !== void 0 && (x2.updateLayers = C2.updateLayers ? a92.UpdateVideoLayers.toJSON(C2.updateLayers) : void 0), C2.subscriptionPermission !== void 0 && (x2.subscriptionPermission = C2.subscriptionPermission ? a92.SubscriptionPermission.toJSON(C2.subscriptionPermission) : void 0), C2.syncState !== void 0 && (x2.syncState = C2.syncState ? a92.SyncState.toJSON(C2.syncState) : void 0), C2.simulate !== void 0 && (x2.simulate = C2.simulate ? a92.SimulateScenario.toJSON(C2.simulate) : void 0), C2.ping !== void 0 && (x2.ping = Math.round(C2.ping)), x2;
  }, fromPartial(C2) {
    var x2;
    const Q2 = V2();
    return Q2.offer = C2.offer !== void 0 && C2.offer !== null ? a92.SessionDescription.fromPartial(C2.offer) : void 0, Q2.answer = C2.answer !== void 0 && C2.answer !== null ? a92.SessionDescription.fromPartial(C2.answer) : void 0, Q2.trickle = C2.trickle !== void 0 && C2.trickle !== null ? a92.TrickleRequest.fromPartial(C2.trickle) : void 0, Q2.addTrack = C2.addTrack !== void 0 && C2.addTrack !== null ? a92.AddTrackRequest.fromPartial(C2.addTrack) : void 0, Q2.mute = C2.mute !== void 0 && C2.mute !== null ? a92.MuteTrackRequest.fromPartial(C2.mute) : void 0, Q2.subscription = C2.subscription !== void 0 && C2.subscription !== null ? a92.UpdateSubscription.fromPartial(C2.subscription) : void 0, Q2.trackSetting = C2.trackSetting !== void 0 && C2.trackSetting !== null ? a92.UpdateTrackSettings.fromPartial(C2.trackSetting) : void 0, Q2.leave = C2.leave !== void 0 && C2.leave !== null ? a92.LeaveRequest.fromPartial(C2.leave) : void 0, Q2.updateLayers = C2.updateLayers !== void 0 && C2.updateLayers !== null ? a92.UpdateVideoLayers.fromPartial(C2.updateLayers) : void 0, Q2.subscriptionPermission = C2.subscriptionPermission !== void 0 && C2.subscriptionPermission !== null ? a92.SubscriptionPermission.fromPartial(C2.subscriptionPermission) : void 0, Q2.syncState = C2.syncState !== void 0 && C2.syncState !== null ? a92.SyncState.fromPartial(C2.syncState) : void 0, Q2.simulate = C2.simulate !== void 0 && C2.simulate !== null ? a92.SimulateScenario.fromPartial(C2.simulate) : void 0, Q2.ping = (x2 = C2.ping) !== null && x2 !== void 0 ? x2 : void 0, Q2;
  } };
  function q2() {
    return { join: void 0, answer: void 0, offer: void 0, trickle: void 0, update: void 0, trackPublished: void 0, leave: void 0, mute: void 0, speakersChanged: void 0, roomUpdate: void 0, connectionQuality: void 0, streamStateUpdate: void 0, subscribedQualityUpdate: void 0, subscriptionPermissionUpdate: void 0, refreshToken: void 0, trackUnpublished: void 0, pong: void 0 };
  }
  a92.SignalResponse = { encode(C2, x2 = l2.default.Writer.create()) {
    return C2.join !== void 0 && a92.JoinResponse.encode(C2.join, x2.uint32(10).fork()).ldelim(), C2.answer !== void 0 && a92.SessionDescription.encode(C2.answer, x2.uint32(18).fork()).ldelim(), C2.offer !== void 0 && a92.SessionDescription.encode(C2.offer, x2.uint32(26).fork()).ldelim(), C2.trickle !== void 0 && a92.TrickleRequest.encode(C2.trickle, x2.uint32(34).fork()).ldelim(), C2.update !== void 0 && a92.ParticipantUpdate.encode(C2.update, x2.uint32(42).fork()).ldelim(), C2.trackPublished !== void 0 && a92.TrackPublishedResponse.encode(C2.trackPublished, x2.uint32(50).fork()).ldelim(), C2.leave !== void 0 && a92.LeaveRequest.encode(C2.leave, x2.uint32(66).fork()).ldelim(), C2.mute !== void 0 && a92.MuteTrackRequest.encode(C2.mute, x2.uint32(74).fork()).ldelim(), C2.speakersChanged !== void 0 && a92.SpeakersChanged.encode(C2.speakersChanged, x2.uint32(82).fork()).ldelim(), C2.roomUpdate !== void 0 && a92.RoomUpdate.encode(C2.roomUpdate, x2.uint32(90).fork()).ldelim(), C2.connectionQuality !== void 0 && a92.ConnectionQualityUpdate.encode(C2.connectionQuality, x2.uint32(98).fork()).ldelim(), C2.streamStateUpdate !== void 0 && a92.StreamStateUpdate.encode(C2.streamStateUpdate, x2.uint32(106).fork()).ldelim(), C2.subscribedQualityUpdate !== void 0 && a92.SubscribedQualityUpdate.encode(C2.subscribedQualityUpdate, x2.uint32(114).fork()).ldelim(), C2.subscriptionPermissionUpdate !== void 0 && a92.SubscriptionPermissionUpdate.encode(C2.subscriptionPermissionUpdate, x2.uint32(122).fork()).ldelim(), C2.refreshToken !== void 0 && x2.uint32(130).string(C2.refreshToken), C2.trackUnpublished !== void 0 && a92.TrackUnpublishedResponse.encode(C2.trackUnpublished, x2.uint32(138).fork()).ldelim(), C2.pong !== void 0 && x2.uint32(144).int64(C2.pong), x2;
  }, decode(C2, x2) {
    const Q2 = C2 instanceof l2.default.Reader ? C2 : new l2.default.Reader(C2);
    let Se2 = x2 === void 0 ? Q2.len : Q2.pos + x2;
    const me2 = q2();
    for (; Q2.pos < Se2; ) {
      const Ie2 = Q2.uint32();
      switch (Ie2 >>> 3) {
        case 1:
          me2.join = a92.JoinResponse.decode(Q2, Q2.uint32());
          break;
        case 2:
          me2.answer = a92.SessionDescription.decode(Q2, Q2.uint32());
          break;
        case 3:
          me2.offer = a92.SessionDescription.decode(Q2, Q2.uint32());
          break;
        case 4:
          me2.trickle = a92.TrickleRequest.decode(Q2, Q2.uint32());
          break;
        case 5:
          me2.update = a92.ParticipantUpdate.decode(Q2, Q2.uint32());
          break;
        case 6:
          me2.trackPublished = a92.TrackPublishedResponse.decode(Q2, Q2.uint32());
          break;
        case 8:
          me2.leave = a92.LeaveRequest.decode(Q2, Q2.uint32());
          break;
        case 9:
          me2.mute = a92.MuteTrackRequest.decode(Q2, Q2.uint32());
          break;
        case 10:
          me2.speakersChanged = a92.SpeakersChanged.decode(Q2, Q2.uint32());
          break;
        case 11:
          me2.roomUpdate = a92.RoomUpdate.decode(Q2, Q2.uint32());
          break;
        case 12:
          me2.connectionQuality = a92.ConnectionQualityUpdate.decode(Q2, Q2.uint32());
          break;
        case 13:
          me2.streamStateUpdate = a92.StreamStateUpdate.decode(Q2, Q2.uint32());
          break;
        case 14:
          me2.subscribedQualityUpdate = a92.SubscribedQualityUpdate.decode(Q2, Q2.uint32());
          break;
        case 15:
          me2.subscriptionPermissionUpdate = a92.SubscriptionPermissionUpdate.decode(Q2, Q2.uint32());
          break;
        case 16:
          me2.refreshToken = Q2.string();
          break;
        case 17:
          me2.trackUnpublished = a92.TrackUnpublishedResponse.decode(Q2, Q2.uint32());
          break;
        case 18:
          me2.pong = xe2(Q2.int64());
          break;
        default:
          Q2.skipType(Ie2 & 7);
          break;
      }
    }
    return me2;
  }, fromJSON(C2) {
    return { join: Pe2(C2.join) ? a92.JoinResponse.fromJSON(C2.join) : void 0, answer: Pe2(C2.answer) ? a92.SessionDescription.fromJSON(C2.answer) : void 0, offer: Pe2(C2.offer) ? a92.SessionDescription.fromJSON(C2.offer) : void 0, trickle: Pe2(C2.trickle) ? a92.TrickleRequest.fromJSON(C2.trickle) : void 0, update: Pe2(C2.update) ? a92.ParticipantUpdate.fromJSON(C2.update) : void 0, trackPublished: Pe2(C2.trackPublished) ? a92.TrackPublishedResponse.fromJSON(C2.trackPublished) : void 0, leave: Pe2(C2.leave) ? a92.LeaveRequest.fromJSON(C2.leave) : void 0, mute: Pe2(C2.mute) ? a92.MuteTrackRequest.fromJSON(C2.mute) : void 0, speakersChanged: Pe2(C2.speakersChanged) ? a92.SpeakersChanged.fromJSON(C2.speakersChanged) : void 0, roomUpdate: Pe2(C2.roomUpdate) ? a92.RoomUpdate.fromJSON(C2.roomUpdate) : void 0, connectionQuality: Pe2(C2.connectionQuality) ? a92.ConnectionQualityUpdate.fromJSON(C2.connectionQuality) : void 0, streamStateUpdate: Pe2(C2.streamStateUpdate) ? a92.StreamStateUpdate.fromJSON(C2.streamStateUpdate) : void 0, subscribedQualityUpdate: Pe2(C2.subscribedQualityUpdate) ? a92.SubscribedQualityUpdate.fromJSON(C2.subscribedQualityUpdate) : void 0, subscriptionPermissionUpdate: Pe2(C2.subscriptionPermissionUpdate) ? a92.SubscriptionPermissionUpdate.fromJSON(C2.subscriptionPermissionUpdate) : void 0, refreshToken: Pe2(C2.refreshToken) ? String(C2.refreshToken) : void 0, trackUnpublished: Pe2(C2.trackUnpublished) ? a92.TrackUnpublishedResponse.fromJSON(C2.trackUnpublished) : void 0, pong: Pe2(C2.pong) ? Number(C2.pong) : void 0 };
  }, toJSON(C2) {
    const x2 = {};
    return C2.join !== void 0 && (x2.join = C2.join ? a92.JoinResponse.toJSON(C2.join) : void 0), C2.answer !== void 0 && (x2.answer = C2.answer ? a92.SessionDescription.toJSON(C2.answer) : void 0), C2.offer !== void 0 && (x2.offer = C2.offer ? a92.SessionDescription.toJSON(C2.offer) : void 0), C2.trickle !== void 0 && (x2.trickle = C2.trickle ? a92.TrickleRequest.toJSON(C2.trickle) : void 0), C2.update !== void 0 && (x2.update = C2.update ? a92.ParticipantUpdate.toJSON(C2.update) : void 0), C2.trackPublished !== void 0 && (x2.trackPublished = C2.trackPublished ? a92.TrackPublishedResponse.toJSON(C2.trackPublished) : void 0), C2.leave !== void 0 && (x2.leave = C2.leave ? a92.LeaveRequest.toJSON(C2.leave) : void 0), C2.mute !== void 0 && (x2.mute = C2.mute ? a92.MuteTrackRequest.toJSON(C2.mute) : void 0), C2.speakersChanged !== void 0 && (x2.speakersChanged = C2.speakersChanged ? a92.SpeakersChanged.toJSON(C2.speakersChanged) : void 0), C2.roomUpdate !== void 0 && (x2.roomUpdate = C2.roomUpdate ? a92.RoomUpdate.toJSON(C2.roomUpdate) : void 0), C2.connectionQuality !== void 0 && (x2.connectionQuality = C2.connectionQuality ? a92.ConnectionQualityUpdate.toJSON(C2.connectionQuality) : void 0), C2.streamStateUpdate !== void 0 && (x2.streamStateUpdate = C2.streamStateUpdate ? a92.StreamStateUpdate.toJSON(C2.streamStateUpdate) : void 0), C2.subscribedQualityUpdate !== void 0 && (x2.subscribedQualityUpdate = C2.subscribedQualityUpdate ? a92.SubscribedQualityUpdate.toJSON(C2.subscribedQualityUpdate) : void 0), C2.subscriptionPermissionUpdate !== void 0 && (x2.subscriptionPermissionUpdate = C2.subscriptionPermissionUpdate ? a92.SubscriptionPermissionUpdate.toJSON(C2.subscriptionPermissionUpdate) : void 0), C2.refreshToken !== void 0 && (x2.refreshToken = C2.refreshToken), C2.trackUnpublished !== void 0 && (x2.trackUnpublished = C2.trackUnpublished ? a92.TrackUnpublishedResponse.toJSON(C2.trackUnpublished) : void 0), C2.pong !== void 0 && (x2.pong = Math.round(C2.pong)), x2;
  }, fromPartial(C2) {
    var x2, Q2;
    const Se2 = q2();
    return Se2.join = C2.join !== void 0 && C2.join !== null ? a92.JoinResponse.fromPartial(C2.join) : void 0, Se2.answer = C2.answer !== void 0 && C2.answer !== null ? a92.SessionDescription.fromPartial(C2.answer) : void 0, Se2.offer = C2.offer !== void 0 && C2.offer !== null ? a92.SessionDescription.fromPartial(C2.offer) : void 0, Se2.trickle = C2.trickle !== void 0 && C2.trickle !== null ? a92.TrickleRequest.fromPartial(C2.trickle) : void 0, Se2.update = C2.update !== void 0 && C2.update !== null ? a92.ParticipantUpdate.fromPartial(C2.update) : void 0, Se2.trackPublished = C2.trackPublished !== void 0 && C2.trackPublished !== null ? a92.TrackPublishedResponse.fromPartial(C2.trackPublished) : void 0, Se2.leave = C2.leave !== void 0 && C2.leave !== null ? a92.LeaveRequest.fromPartial(C2.leave) : void 0, Se2.mute = C2.mute !== void 0 && C2.mute !== null ? a92.MuteTrackRequest.fromPartial(C2.mute) : void 0, Se2.speakersChanged = C2.speakersChanged !== void 0 && C2.speakersChanged !== null ? a92.SpeakersChanged.fromPartial(C2.speakersChanged) : void 0, Se2.roomUpdate = C2.roomUpdate !== void 0 && C2.roomUpdate !== null ? a92.RoomUpdate.fromPartial(C2.roomUpdate) : void 0, Se2.connectionQuality = C2.connectionQuality !== void 0 && C2.connectionQuality !== null ? a92.ConnectionQualityUpdate.fromPartial(C2.connectionQuality) : void 0, Se2.streamStateUpdate = C2.streamStateUpdate !== void 0 && C2.streamStateUpdate !== null ? a92.StreamStateUpdate.fromPartial(C2.streamStateUpdate) : void 0, Se2.subscribedQualityUpdate = C2.subscribedQualityUpdate !== void 0 && C2.subscribedQualityUpdate !== null ? a92.SubscribedQualityUpdate.fromPartial(C2.subscribedQualityUpdate) : void 0, Se2.subscriptionPermissionUpdate = C2.subscriptionPermissionUpdate !== void 0 && C2.subscriptionPermissionUpdate !== null ? a92.SubscriptionPermissionUpdate.fromPartial(C2.subscriptionPermissionUpdate) : void 0, Se2.refreshToken = (x2 = C2.refreshToken) !== null && x2 !== void 0 ? x2 : void 0, Se2.trackUnpublished = C2.trackUnpublished !== void 0 && C2.trackUnpublished !== null ? a92.TrackUnpublishedResponse.fromPartial(C2.trackUnpublished) : void 0, Se2.pong = (Q2 = C2.pong) !== null && Q2 !== void 0 ? Q2 : void 0, Se2;
  } };
  function G2() {
    return { codec: "", cid: "", enableSimulcastLayers: false };
  }
  a92.SimulcastCodec = { encode(C2, x2 = l2.default.Writer.create()) {
    return C2.codec !== void 0 && C2.codec !== "" && x2.uint32(10).string(C2.codec), C2.cid !== void 0 && C2.cid !== "" && x2.uint32(18).string(C2.cid), C2.enableSimulcastLayers === true && x2.uint32(24).bool(C2.enableSimulcastLayers), x2;
  }, decode(C2, x2) {
    const Q2 = C2 instanceof l2.default.Reader ? C2 : new l2.default.Reader(C2);
    let Se2 = x2 === void 0 ? Q2.len : Q2.pos + x2;
    const me2 = G2();
    for (; Q2.pos < Se2; ) {
      const Ie2 = Q2.uint32();
      switch (Ie2 >>> 3) {
        case 1:
          me2.codec = Q2.string();
          break;
        case 2:
          me2.cid = Q2.string();
          break;
        case 3:
          me2.enableSimulcastLayers = Q2.bool();
          break;
        default:
          Q2.skipType(Ie2 & 7);
          break;
      }
    }
    return me2;
  }, fromJSON(C2) {
    return { codec: Pe2(C2.codec) ? String(C2.codec) : "", cid: Pe2(C2.cid) ? String(C2.cid) : "", enableSimulcastLayers: Pe2(C2.enableSimulcastLayers) ? !!C2.enableSimulcastLayers : false };
  }, toJSON(C2) {
    const x2 = {};
    return C2.codec !== void 0 && (x2.codec = C2.codec), C2.cid !== void 0 && (x2.cid = C2.cid), C2.enableSimulcastLayers !== void 0 && (x2.enableSimulcastLayers = C2.enableSimulcastLayers), x2;
  }, fromPartial(C2) {
    var x2, Q2, Se2;
    const me2 = G2();
    return me2.codec = (x2 = C2.codec) !== null && x2 !== void 0 ? x2 : "", me2.cid = (Q2 = C2.cid) !== null && Q2 !== void 0 ? Q2 : "", me2.enableSimulcastLayers = (Se2 = C2.enableSimulcastLayers) !== null && Se2 !== void 0 ? Se2 : false, me2;
  } };
  function H2() {
    return { cid: "", name: "", type: 0, width: 0, height: 0, muted: false, disableDtx: false, source: 0, layers: [], simulcastCodecs: [], sid: "", stereo: false, disableRed: false };
  }
  a92.AddTrackRequest = { encode(C2, x2 = l2.default.Writer.create()) {
    if (C2.cid !== void 0 && C2.cid !== "" && x2.uint32(10).string(C2.cid), C2.name !== void 0 && C2.name !== "" && x2.uint32(18).string(C2.name), C2.type !== void 0 && C2.type !== 0 && x2.uint32(24).int32(C2.type), C2.width !== void 0 && C2.width !== 0 && x2.uint32(32).uint32(C2.width), C2.height !== void 0 && C2.height !== 0 && x2.uint32(40).uint32(C2.height), C2.muted === true && x2.uint32(48).bool(C2.muted), C2.disableDtx === true && x2.uint32(56).bool(C2.disableDtx), C2.source !== void 0 && C2.source !== 0 && x2.uint32(64).int32(C2.source), C2.layers !== void 0 && C2.layers.length !== 0)
      for (const Q2 of C2.layers)
        v2.VideoLayer.encode(Q2, x2.uint32(74).fork()).ldelim();
    if (C2.simulcastCodecs !== void 0 && C2.simulcastCodecs.length !== 0)
      for (const Q2 of C2.simulcastCodecs)
        a92.SimulcastCodec.encode(Q2, x2.uint32(82).fork()).ldelim();
    return C2.sid !== void 0 && C2.sid !== "" && x2.uint32(90).string(C2.sid), C2.stereo === true && x2.uint32(96).bool(C2.stereo), C2.disableRed === true && x2.uint32(104).bool(C2.disableRed), x2;
  }, decode(C2, x2) {
    const Q2 = C2 instanceof l2.default.Reader ? C2 : new l2.default.Reader(C2);
    let Se2 = x2 === void 0 ? Q2.len : Q2.pos + x2;
    const me2 = H2();
    for (; Q2.pos < Se2; ) {
      const Ie2 = Q2.uint32();
      switch (Ie2 >>> 3) {
        case 1:
          me2.cid = Q2.string();
          break;
        case 2:
          me2.name = Q2.string();
          break;
        case 3:
          me2.type = Q2.int32();
          break;
        case 4:
          me2.width = Q2.uint32();
          break;
        case 5:
          me2.height = Q2.uint32();
          break;
        case 6:
          me2.muted = Q2.bool();
          break;
        case 7:
          me2.disableDtx = Q2.bool();
          break;
        case 8:
          me2.source = Q2.int32();
          break;
        case 9:
          me2.layers.push(v2.VideoLayer.decode(Q2, Q2.uint32()));
          break;
        case 10:
          me2.simulcastCodecs.push(a92.SimulcastCodec.decode(Q2, Q2.uint32()));
          break;
        case 11:
          me2.sid = Q2.string();
          break;
        case 12:
          me2.stereo = Q2.bool();
          break;
        case 13:
          me2.disableRed = Q2.bool();
          break;
        default:
          Q2.skipType(Ie2 & 7);
          break;
      }
    }
    return me2;
  }, fromJSON(C2) {
    return { cid: Pe2(C2.cid) ? String(C2.cid) : "", name: Pe2(C2.name) ? String(C2.name) : "", type: Pe2(C2.type) ? v2.trackTypeFromJSON(C2.type) : 0, width: Pe2(C2.width) ? Number(C2.width) : 0, height: Pe2(C2.height) ? Number(C2.height) : 0, muted: Pe2(C2.muted) ? !!C2.muted : false, disableDtx: Pe2(C2.disableDtx) ? !!C2.disableDtx : false, source: Pe2(C2.source) ? v2.trackSourceFromJSON(C2.source) : 0, layers: Array.isArray(C2 == null ? void 0 : C2.layers) ? C2.layers.map((x2) => v2.VideoLayer.fromJSON(x2)) : [], simulcastCodecs: Array.isArray(C2 == null ? void 0 : C2.simulcastCodecs) ? C2.simulcastCodecs.map((x2) => a92.SimulcastCodec.fromJSON(x2)) : [], sid: Pe2(C2.sid) ? String(C2.sid) : "", stereo: Pe2(C2.stereo) ? !!C2.stereo : false, disableRed: Pe2(C2.disableRed) ? !!C2.disableRed : false };
  }, toJSON(C2) {
    const x2 = {};
    return C2.cid !== void 0 && (x2.cid = C2.cid), C2.name !== void 0 && (x2.name = C2.name), C2.type !== void 0 && (x2.type = v2.trackTypeToJSON(C2.type)), C2.width !== void 0 && (x2.width = Math.round(C2.width)), C2.height !== void 0 && (x2.height = Math.round(C2.height)), C2.muted !== void 0 && (x2.muted = C2.muted), C2.disableDtx !== void 0 && (x2.disableDtx = C2.disableDtx), C2.source !== void 0 && (x2.source = v2.trackSourceToJSON(C2.source)), C2.layers ? x2.layers = C2.layers.map((Q2) => Q2 ? v2.VideoLayer.toJSON(Q2) : void 0) : x2.layers = [], C2.simulcastCodecs ? x2.simulcastCodecs = C2.simulcastCodecs.map((Q2) => Q2 ? a92.SimulcastCodec.toJSON(Q2) : void 0) : x2.simulcastCodecs = [], C2.sid !== void 0 && (x2.sid = C2.sid), C2.stereo !== void 0 && (x2.stereo = C2.stereo), C2.disableRed !== void 0 && (x2.disableRed = C2.disableRed), x2;
  }, fromPartial(C2) {
    var x2, Q2, Se2, me2, Ie2, at, Ye2, je2, tt, Oe2, P2, X2, ie2;
    const Ee2 = H2();
    return Ee2.cid = (x2 = C2.cid) !== null && x2 !== void 0 ? x2 : "", Ee2.name = (Q2 = C2.name) !== null && Q2 !== void 0 ? Q2 : "", Ee2.type = (Se2 = C2.type) !== null && Se2 !== void 0 ? Se2 : 0, Ee2.width = (me2 = C2.width) !== null && me2 !== void 0 ? me2 : 0, Ee2.height = (Ie2 = C2.height) !== null && Ie2 !== void 0 ? Ie2 : 0, Ee2.muted = (at = C2.muted) !== null && at !== void 0 ? at : false, Ee2.disableDtx = (Ye2 = C2.disableDtx) !== null && Ye2 !== void 0 ? Ye2 : false, Ee2.source = (je2 = C2.source) !== null && je2 !== void 0 ? je2 : 0, Ee2.layers = ((tt = C2.layers) === null || tt === void 0 ? void 0 : tt.map((ue2) => v2.VideoLayer.fromPartial(ue2))) || [], Ee2.simulcastCodecs = ((Oe2 = C2.simulcastCodecs) === null || Oe2 === void 0 ? void 0 : Oe2.map((ue2) => a92.SimulcastCodec.fromPartial(ue2))) || [], Ee2.sid = (P2 = C2.sid) !== null && P2 !== void 0 ? P2 : "", Ee2.stereo = (X2 = C2.stereo) !== null && X2 !== void 0 ? X2 : false, Ee2.disableRed = (ie2 = C2.disableRed) !== null && ie2 !== void 0 ? ie2 : false, Ee2;
  } };
  function B2() {
    return { candidateInit: "", target: 0 };
  }
  a92.TrickleRequest = { encode(C2, x2 = l2.default.Writer.create()) {
    return C2.candidateInit !== void 0 && C2.candidateInit !== "" && x2.uint32(10).string(C2.candidateInit), C2.target !== void 0 && C2.target !== 0 && x2.uint32(16).int32(C2.target), x2;
  }, decode(C2, x2) {
    const Q2 = C2 instanceof l2.default.Reader ? C2 : new l2.default.Reader(C2);
    let Se2 = x2 === void 0 ? Q2.len : Q2.pos + x2;
    const me2 = B2();
    for (; Q2.pos < Se2; ) {
      const Ie2 = Q2.uint32();
      switch (Ie2 >>> 3) {
        case 1:
          me2.candidateInit = Q2.string();
          break;
        case 2:
          me2.target = Q2.int32();
          break;
        default:
          Q2.skipType(Ie2 & 7);
          break;
      }
    }
    return me2;
  }, fromJSON(C2) {
    return { candidateInit: Pe2(C2.candidateInit) ? String(C2.candidateInit) : "", target: Pe2(C2.target) ? g2(C2.target) : 0 };
  }, toJSON(C2) {
    const x2 = {};
    return C2.candidateInit !== void 0 && (x2.candidateInit = C2.candidateInit), C2.target !== void 0 && (x2.target = E2(C2.target)), x2;
  }, fromPartial(C2) {
    var x2, Q2;
    const Se2 = B2();
    return Se2.candidateInit = (x2 = C2.candidateInit) !== null && x2 !== void 0 ? x2 : "", Se2.target = (Q2 = C2.target) !== null && Q2 !== void 0 ? Q2 : 0, Se2;
  } };
  function Y2() {
    return { sid: "", muted: false };
  }
  a92.MuteTrackRequest = { encode(C2, x2 = l2.default.Writer.create()) {
    return C2.sid !== void 0 && C2.sid !== "" && x2.uint32(10).string(C2.sid), C2.muted === true && x2.uint32(16).bool(C2.muted), x2;
  }, decode(C2, x2) {
    const Q2 = C2 instanceof l2.default.Reader ? C2 : new l2.default.Reader(C2);
    let Se2 = x2 === void 0 ? Q2.len : Q2.pos + x2;
    const me2 = Y2();
    for (; Q2.pos < Se2; ) {
      const Ie2 = Q2.uint32();
      switch (Ie2 >>> 3) {
        case 1:
          me2.sid = Q2.string();
          break;
        case 2:
          me2.muted = Q2.bool();
          break;
        default:
          Q2.skipType(Ie2 & 7);
          break;
      }
    }
    return me2;
  }, fromJSON(C2) {
    return { sid: Pe2(C2.sid) ? String(C2.sid) : "", muted: Pe2(C2.muted) ? !!C2.muted : false };
  }, toJSON(C2) {
    const x2 = {};
    return C2.sid !== void 0 && (x2.sid = C2.sid), C2.muted !== void 0 && (x2.muted = C2.muted), x2;
  }, fromPartial(C2) {
    var x2, Q2;
    const Se2 = Y2();
    return Se2.sid = (x2 = C2.sid) !== null && x2 !== void 0 ? x2 : "", Se2.muted = (Q2 = C2.muted) !== null && Q2 !== void 0 ? Q2 : false, Se2;
  } };
  function ne2() {
    return { room: void 0, participant: void 0, otherParticipants: [], serverVersion: "", iceServers: [], subscriberPrimary: false, alternativeUrl: "", clientConfiguration: void 0, serverRegion: "", pingTimeout: 0, pingInterval: 0, serverInfo: void 0 };
  }
  a92.JoinResponse = { encode(C2, x2 = l2.default.Writer.create()) {
    if (C2.room !== void 0 && v2.Room.encode(C2.room, x2.uint32(10).fork()).ldelim(), C2.participant !== void 0 && v2.ParticipantInfo.encode(C2.participant, x2.uint32(18).fork()).ldelim(), C2.otherParticipants !== void 0 && C2.otherParticipants.length !== 0)
      for (const Q2 of C2.otherParticipants)
        v2.ParticipantInfo.encode(Q2, x2.uint32(26).fork()).ldelim();
    if (C2.serverVersion !== void 0 && C2.serverVersion !== "" && x2.uint32(34).string(C2.serverVersion), C2.iceServers !== void 0 && C2.iceServers.length !== 0)
      for (const Q2 of C2.iceServers)
        a92.ICEServer.encode(Q2, x2.uint32(42).fork()).ldelim();
    return C2.subscriberPrimary === true && x2.uint32(48).bool(C2.subscriberPrimary), C2.alternativeUrl !== void 0 && C2.alternativeUrl !== "" && x2.uint32(58).string(C2.alternativeUrl), C2.clientConfiguration !== void 0 && v2.ClientConfiguration.encode(C2.clientConfiguration, x2.uint32(66).fork()).ldelim(), C2.serverRegion !== void 0 && C2.serverRegion !== "" && x2.uint32(74).string(C2.serverRegion), C2.pingTimeout !== void 0 && C2.pingTimeout !== 0 && x2.uint32(80).int32(C2.pingTimeout), C2.pingInterval !== void 0 && C2.pingInterval !== 0 && x2.uint32(88).int32(C2.pingInterval), C2.serverInfo !== void 0 && v2.ServerInfo.encode(C2.serverInfo, x2.uint32(98).fork()).ldelim(), x2;
  }, decode(C2, x2) {
    const Q2 = C2 instanceof l2.default.Reader ? C2 : new l2.default.Reader(C2);
    let Se2 = x2 === void 0 ? Q2.len : Q2.pos + x2;
    const me2 = ne2();
    for (; Q2.pos < Se2; ) {
      const Ie2 = Q2.uint32();
      switch (Ie2 >>> 3) {
        case 1:
          me2.room = v2.Room.decode(Q2, Q2.uint32());
          break;
        case 2:
          me2.participant = v2.ParticipantInfo.decode(Q2, Q2.uint32());
          break;
        case 3:
          me2.otherParticipants.push(v2.ParticipantInfo.decode(Q2, Q2.uint32()));
          break;
        case 4:
          me2.serverVersion = Q2.string();
          break;
        case 5:
          me2.iceServers.push(a92.ICEServer.decode(Q2, Q2.uint32()));
          break;
        case 6:
          me2.subscriberPrimary = Q2.bool();
          break;
        case 7:
          me2.alternativeUrl = Q2.string();
          break;
        case 8:
          me2.clientConfiguration = v2.ClientConfiguration.decode(Q2, Q2.uint32());
          break;
        case 9:
          me2.serverRegion = Q2.string();
          break;
        case 10:
          me2.pingTimeout = Q2.int32();
          break;
        case 11:
          me2.pingInterval = Q2.int32();
          break;
        case 12:
          me2.serverInfo = v2.ServerInfo.decode(Q2, Q2.uint32());
          break;
        default:
          Q2.skipType(Ie2 & 7);
          break;
      }
    }
    return me2;
  }, fromJSON(C2) {
    return { room: Pe2(C2.room) ? v2.Room.fromJSON(C2.room) : void 0, participant: Pe2(C2.participant) ? v2.ParticipantInfo.fromJSON(C2.participant) : void 0, otherParticipants: Array.isArray(C2 == null ? void 0 : C2.otherParticipants) ? C2.otherParticipants.map((x2) => v2.ParticipantInfo.fromJSON(x2)) : [], serverVersion: Pe2(C2.serverVersion) ? String(C2.serverVersion) : "", iceServers: Array.isArray(C2 == null ? void 0 : C2.iceServers) ? C2.iceServers.map((x2) => a92.ICEServer.fromJSON(x2)) : [], subscriberPrimary: Pe2(C2.subscriberPrimary) ? !!C2.subscriberPrimary : false, alternativeUrl: Pe2(C2.alternativeUrl) ? String(C2.alternativeUrl) : "", clientConfiguration: Pe2(C2.clientConfiguration) ? v2.ClientConfiguration.fromJSON(C2.clientConfiguration) : void 0, serverRegion: Pe2(C2.serverRegion) ? String(C2.serverRegion) : "", pingTimeout: Pe2(C2.pingTimeout) ? Number(C2.pingTimeout) : 0, pingInterval: Pe2(C2.pingInterval) ? Number(C2.pingInterval) : 0, serverInfo: Pe2(C2.serverInfo) ? v2.ServerInfo.fromJSON(C2.serverInfo) : void 0 };
  }, toJSON(C2) {
    const x2 = {};
    return C2.room !== void 0 && (x2.room = C2.room ? v2.Room.toJSON(C2.room) : void 0), C2.participant !== void 0 && (x2.participant = C2.participant ? v2.ParticipantInfo.toJSON(C2.participant) : void 0), C2.otherParticipants ? x2.otherParticipants = C2.otherParticipants.map((Q2) => Q2 ? v2.ParticipantInfo.toJSON(Q2) : void 0) : x2.otherParticipants = [], C2.serverVersion !== void 0 && (x2.serverVersion = C2.serverVersion), C2.iceServers ? x2.iceServers = C2.iceServers.map((Q2) => Q2 ? a92.ICEServer.toJSON(Q2) : void 0) : x2.iceServers = [], C2.subscriberPrimary !== void 0 && (x2.subscriberPrimary = C2.subscriberPrimary), C2.alternativeUrl !== void 0 && (x2.alternativeUrl = C2.alternativeUrl), C2.clientConfiguration !== void 0 && (x2.clientConfiguration = C2.clientConfiguration ? v2.ClientConfiguration.toJSON(C2.clientConfiguration) : void 0), C2.serverRegion !== void 0 && (x2.serverRegion = C2.serverRegion), C2.pingTimeout !== void 0 && (x2.pingTimeout = Math.round(C2.pingTimeout)), C2.pingInterval !== void 0 && (x2.pingInterval = Math.round(C2.pingInterval)), C2.serverInfo !== void 0 && (x2.serverInfo = C2.serverInfo ? v2.ServerInfo.toJSON(C2.serverInfo) : void 0), x2;
  }, fromPartial(C2) {
    var x2, Q2, Se2, me2, Ie2, at, Ye2, je2;
    const tt = ne2();
    return tt.room = C2.room !== void 0 && C2.room !== null ? v2.Room.fromPartial(C2.room) : void 0, tt.participant = C2.participant !== void 0 && C2.participant !== null ? v2.ParticipantInfo.fromPartial(C2.participant) : void 0, tt.otherParticipants = ((x2 = C2.otherParticipants) === null || x2 === void 0 ? void 0 : x2.map((Oe2) => v2.ParticipantInfo.fromPartial(Oe2))) || [], tt.serverVersion = (Q2 = C2.serverVersion) !== null && Q2 !== void 0 ? Q2 : "", tt.iceServers = ((Se2 = C2.iceServers) === null || Se2 === void 0 ? void 0 : Se2.map((Oe2) => a92.ICEServer.fromPartial(Oe2))) || [], tt.subscriberPrimary = (me2 = C2.subscriberPrimary) !== null && me2 !== void 0 ? me2 : false, tt.alternativeUrl = (Ie2 = C2.alternativeUrl) !== null && Ie2 !== void 0 ? Ie2 : "", tt.clientConfiguration = C2.clientConfiguration !== void 0 && C2.clientConfiguration !== null ? v2.ClientConfiguration.fromPartial(C2.clientConfiguration) : void 0, tt.serverRegion = (at = C2.serverRegion) !== null && at !== void 0 ? at : "", tt.pingTimeout = (Ye2 = C2.pingTimeout) !== null && Ye2 !== void 0 ? Ye2 : 0, tt.pingInterval = (je2 = C2.pingInterval) !== null && je2 !== void 0 ? je2 : 0, tt.serverInfo = C2.serverInfo !== void 0 && C2.serverInfo !== null ? v2.ServerInfo.fromPartial(C2.serverInfo) : void 0, tt;
  } };
  function Z2() {
    return { cid: "", track: void 0 };
  }
  a92.TrackPublishedResponse = { encode(C2, x2 = l2.default.Writer.create()) {
    return C2.cid !== void 0 && C2.cid !== "" && x2.uint32(10).string(C2.cid), C2.track !== void 0 && v2.TrackInfo.encode(C2.track, x2.uint32(18).fork()).ldelim(), x2;
  }, decode(C2, x2) {
    const Q2 = C2 instanceof l2.default.Reader ? C2 : new l2.default.Reader(C2);
    let Se2 = x2 === void 0 ? Q2.len : Q2.pos + x2;
    const me2 = Z2();
    for (; Q2.pos < Se2; ) {
      const Ie2 = Q2.uint32();
      switch (Ie2 >>> 3) {
        case 1:
          me2.cid = Q2.string();
          break;
        case 2:
          me2.track = v2.TrackInfo.decode(Q2, Q2.uint32());
          break;
        default:
          Q2.skipType(Ie2 & 7);
          break;
      }
    }
    return me2;
  }, fromJSON(C2) {
    return { cid: Pe2(C2.cid) ? String(C2.cid) : "", track: Pe2(C2.track) ? v2.TrackInfo.fromJSON(C2.track) : void 0 };
  }, toJSON(C2) {
    const x2 = {};
    return C2.cid !== void 0 && (x2.cid = C2.cid), C2.track !== void 0 && (x2.track = C2.track ? v2.TrackInfo.toJSON(C2.track) : void 0), x2;
  }, fromPartial(C2) {
    var x2;
    const Q2 = Z2();
    return Q2.cid = (x2 = C2.cid) !== null && x2 !== void 0 ? x2 : "", Q2.track = C2.track !== void 0 && C2.track !== null ? v2.TrackInfo.fromPartial(C2.track) : void 0, Q2;
  } };
  function re2() {
    return { trackSid: "" };
  }
  a92.TrackUnpublishedResponse = { encode(C2, x2 = l2.default.Writer.create()) {
    return C2.trackSid !== void 0 && C2.trackSid !== "" && x2.uint32(10).string(C2.trackSid), x2;
  }, decode(C2, x2) {
    const Q2 = C2 instanceof l2.default.Reader ? C2 : new l2.default.Reader(C2);
    let Se2 = x2 === void 0 ? Q2.len : Q2.pos + x2;
    const me2 = re2();
    for (; Q2.pos < Se2; ) {
      const Ie2 = Q2.uint32();
      switch (Ie2 >>> 3) {
        case 1:
          me2.trackSid = Q2.string();
          break;
        default:
          Q2.skipType(Ie2 & 7);
          break;
      }
    }
    return me2;
  }, fromJSON(C2) {
    return { trackSid: Pe2(C2.trackSid) ? String(C2.trackSid) : "" };
  }, toJSON(C2) {
    const x2 = {};
    return C2.trackSid !== void 0 && (x2.trackSid = C2.trackSid), x2;
  }, fromPartial(C2) {
    var x2;
    const Q2 = re2();
    return Q2.trackSid = (x2 = C2.trackSid) !== null && x2 !== void 0 ? x2 : "", Q2;
  } };
  function oe2() {
    return { type: "", sdp: "" };
  }
  a92.SessionDescription = { encode(C2, x2 = l2.default.Writer.create()) {
    return C2.type !== void 0 && C2.type !== "" && x2.uint32(10).string(C2.type), C2.sdp !== void 0 && C2.sdp !== "" && x2.uint32(18).string(C2.sdp), x2;
  }, decode(C2, x2) {
    const Q2 = C2 instanceof l2.default.Reader ? C2 : new l2.default.Reader(C2);
    let Se2 = x2 === void 0 ? Q2.len : Q2.pos + x2;
    const me2 = oe2();
    for (; Q2.pos < Se2; ) {
      const Ie2 = Q2.uint32();
      switch (Ie2 >>> 3) {
        case 1:
          me2.type = Q2.string();
          break;
        case 2:
          me2.sdp = Q2.string();
          break;
        default:
          Q2.skipType(Ie2 & 7);
          break;
      }
    }
    return me2;
  }, fromJSON(C2) {
    return { type: Pe2(C2.type) ? String(C2.type) : "", sdp: Pe2(C2.sdp) ? String(C2.sdp) : "" };
  }, toJSON(C2) {
    const x2 = {};
    return C2.type !== void 0 && (x2.type = C2.type), C2.sdp !== void 0 && (x2.sdp = C2.sdp), x2;
  }, fromPartial(C2) {
    var x2, Q2;
    const Se2 = oe2();
    return Se2.type = (x2 = C2.type) !== null && x2 !== void 0 ? x2 : "", Se2.sdp = (Q2 = C2.sdp) !== null && Q2 !== void 0 ? Q2 : "", Se2;
  } };
  function de2() {
    return { participants: [] };
  }
  a92.ParticipantUpdate = { encode(C2, x2 = l2.default.Writer.create()) {
    if (C2.participants !== void 0 && C2.participants.length !== 0)
      for (const Q2 of C2.participants)
        v2.ParticipantInfo.encode(Q2, x2.uint32(10).fork()).ldelim();
    return x2;
  }, decode(C2, x2) {
    const Q2 = C2 instanceof l2.default.Reader ? C2 : new l2.default.Reader(C2);
    let Se2 = x2 === void 0 ? Q2.len : Q2.pos + x2;
    const me2 = de2();
    for (; Q2.pos < Se2; ) {
      const Ie2 = Q2.uint32();
      switch (Ie2 >>> 3) {
        case 1:
          me2.participants.push(v2.ParticipantInfo.decode(Q2, Q2.uint32()));
          break;
        default:
          Q2.skipType(Ie2 & 7);
          break;
      }
    }
    return me2;
  }, fromJSON(C2) {
    return { participants: Array.isArray(C2 == null ? void 0 : C2.participants) ? C2.participants.map((x2) => v2.ParticipantInfo.fromJSON(x2)) : [] };
  }, toJSON(C2) {
    const x2 = {};
    return C2.participants ? x2.participants = C2.participants.map((Q2) => Q2 ? v2.ParticipantInfo.toJSON(Q2) : void 0) : x2.participants = [], x2;
  }, fromPartial(C2) {
    var x2;
    const Q2 = de2();
    return Q2.participants = ((x2 = C2.participants) === null || x2 === void 0 ? void 0 : x2.map((Se2) => v2.ParticipantInfo.fromPartial(Se2))) || [], Q2;
  } };
  function A2() {
    return { trackSids: [], subscribe: false, participantTracks: [] };
  }
  a92.UpdateSubscription = { encode(C2, x2 = l2.default.Writer.create()) {
    if (C2.trackSids !== void 0 && C2.trackSids.length !== 0)
      for (const Q2 of C2.trackSids)
        x2.uint32(10).string(Q2);
    if (C2.subscribe === true && x2.uint32(16).bool(C2.subscribe), C2.participantTracks !== void 0 && C2.participantTracks.length !== 0)
      for (const Q2 of C2.participantTracks)
        v2.ParticipantTracks.encode(Q2, x2.uint32(26).fork()).ldelim();
    return x2;
  }, decode(C2, x2) {
    const Q2 = C2 instanceof l2.default.Reader ? C2 : new l2.default.Reader(C2);
    let Se2 = x2 === void 0 ? Q2.len : Q2.pos + x2;
    const me2 = A2();
    for (; Q2.pos < Se2; ) {
      const Ie2 = Q2.uint32();
      switch (Ie2 >>> 3) {
        case 1:
          me2.trackSids.push(Q2.string());
          break;
        case 2:
          me2.subscribe = Q2.bool();
          break;
        case 3:
          me2.participantTracks.push(v2.ParticipantTracks.decode(Q2, Q2.uint32()));
          break;
        default:
          Q2.skipType(Ie2 & 7);
          break;
      }
    }
    return me2;
  }, fromJSON(C2) {
    return { trackSids: Array.isArray(C2 == null ? void 0 : C2.trackSids) ? C2.trackSids.map((x2) => String(x2)) : [], subscribe: Pe2(C2.subscribe) ? !!C2.subscribe : false, participantTracks: Array.isArray(C2 == null ? void 0 : C2.participantTracks) ? C2.participantTracks.map((x2) => v2.ParticipantTracks.fromJSON(x2)) : [] };
  }, toJSON(C2) {
    const x2 = {};
    return C2.trackSids ? x2.trackSids = C2.trackSids.map((Q2) => Q2) : x2.trackSids = [], C2.subscribe !== void 0 && (x2.subscribe = C2.subscribe), C2.participantTracks ? x2.participantTracks = C2.participantTracks.map((Q2) => Q2 ? v2.ParticipantTracks.toJSON(Q2) : void 0) : x2.participantTracks = [], x2;
  }, fromPartial(C2) {
    var x2, Q2, Se2;
    const me2 = A2();
    return me2.trackSids = ((x2 = C2.trackSids) === null || x2 === void 0 ? void 0 : x2.map((Ie2) => Ie2)) || [], me2.subscribe = (Q2 = C2.subscribe) !== null && Q2 !== void 0 ? Q2 : false, me2.participantTracks = ((Se2 = C2.participantTracks) === null || Se2 === void 0 ? void 0 : Se2.map((Ie2) => v2.ParticipantTracks.fromPartial(Ie2))) || [], me2;
  } };
  function N2() {
    return { trackSids: [], disabled: false, quality: 0, width: 0, height: 0, fps: 0 };
  }
  a92.UpdateTrackSettings = { encode(C2, x2 = l2.default.Writer.create()) {
    if (C2.trackSids !== void 0 && C2.trackSids.length !== 0)
      for (const Q2 of C2.trackSids)
        x2.uint32(10).string(Q2);
    return C2.disabled === true && x2.uint32(24).bool(C2.disabled), C2.quality !== void 0 && C2.quality !== 0 && x2.uint32(32).int32(C2.quality), C2.width !== void 0 && C2.width !== 0 && x2.uint32(40).uint32(C2.width), C2.height !== void 0 && C2.height !== 0 && x2.uint32(48).uint32(C2.height), C2.fps !== void 0 && C2.fps !== 0 && x2.uint32(56).uint32(C2.fps), x2;
  }, decode(C2, x2) {
    const Q2 = C2 instanceof l2.default.Reader ? C2 : new l2.default.Reader(C2);
    let Se2 = x2 === void 0 ? Q2.len : Q2.pos + x2;
    const me2 = N2();
    for (; Q2.pos < Se2; ) {
      const Ie2 = Q2.uint32();
      switch (Ie2 >>> 3) {
        case 1:
          me2.trackSids.push(Q2.string());
          break;
        case 3:
          me2.disabled = Q2.bool();
          break;
        case 4:
          me2.quality = Q2.int32();
          break;
        case 5:
          me2.width = Q2.uint32();
          break;
        case 6:
          me2.height = Q2.uint32();
          break;
        case 7:
          me2.fps = Q2.uint32();
          break;
        default:
          Q2.skipType(Ie2 & 7);
          break;
      }
    }
    return me2;
  }, fromJSON(C2) {
    return { trackSids: Array.isArray(C2 == null ? void 0 : C2.trackSids) ? C2.trackSids.map((x2) => String(x2)) : [], disabled: Pe2(C2.disabled) ? !!C2.disabled : false, quality: Pe2(C2.quality) ? v2.videoQualityFromJSON(C2.quality) : 0, width: Pe2(C2.width) ? Number(C2.width) : 0, height: Pe2(C2.height) ? Number(C2.height) : 0, fps: Pe2(C2.fps) ? Number(C2.fps) : 0 };
  }, toJSON(C2) {
    const x2 = {};
    return C2.trackSids ? x2.trackSids = C2.trackSids.map((Q2) => Q2) : x2.trackSids = [], C2.disabled !== void 0 && (x2.disabled = C2.disabled), C2.quality !== void 0 && (x2.quality = v2.videoQualityToJSON(C2.quality)), C2.width !== void 0 && (x2.width = Math.round(C2.width)), C2.height !== void 0 && (x2.height = Math.round(C2.height)), C2.fps !== void 0 && (x2.fps = Math.round(C2.fps)), x2;
  }, fromPartial(C2) {
    var x2, Q2, Se2, me2, Ie2, at;
    const Ye2 = N2();
    return Ye2.trackSids = ((x2 = C2.trackSids) === null || x2 === void 0 ? void 0 : x2.map((je2) => je2)) || [], Ye2.disabled = (Q2 = C2.disabled) !== null && Q2 !== void 0 ? Q2 : false, Ye2.quality = (Se2 = C2.quality) !== null && Se2 !== void 0 ? Se2 : 0, Ye2.width = (me2 = C2.width) !== null && me2 !== void 0 ? me2 : 0, Ye2.height = (Ie2 = C2.height) !== null && Ie2 !== void 0 ? Ie2 : 0, Ye2.fps = (at = C2.fps) !== null && at !== void 0 ? at : 0, Ye2;
  } };
  function D2() {
    return { canReconnect: false, reason: 0 };
  }
  a92.LeaveRequest = { encode(C2, x2 = l2.default.Writer.create()) {
    return C2.canReconnect === true && x2.uint32(8).bool(C2.canReconnect), C2.reason !== void 0 && C2.reason !== 0 && x2.uint32(16).int32(C2.reason), x2;
  }, decode(C2, x2) {
    const Q2 = C2 instanceof l2.default.Reader ? C2 : new l2.default.Reader(C2);
    let Se2 = x2 === void 0 ? Q2.len : Q2.pos + x2;
    const me2 = D2();
    for (; Q2.pos < Se2; ) {
      const Ie2 = Q2.uint32();
      switch (Ie2 >>> 3) {
        case 1:
          me2.canReconnect = Q2.bool();
          break;
        case 2:
          me2.reason = Q2.int32();
          break;
        default:
          Q2.skipType(Ie2 & 7);
          break;
      }
    }
    return me2;
  }, fromJSON(C2) {
    return { canReconnect: Pe2(C2.canReconnect) ? !!C2.canReconnect : false, reason: Pe2(C2.reason) ? v2.disconnectReasonFromJSON(C2.reason) : 0 };
  }, toJSON(C2) {
    const x2 = {};
    return C2.canReconnect !== void 0 && (x2.canReconnect = C2.canReconnect), C2.reason !== void 0 && (x2.reason = v2.disconnectReasonToJSON(C2.reason)), x2;
  }, fromPartial(C2) {
    var x2, Q2;
    const Se2 = D2();
    return Se2.canReconnect = (x2 = C2.canReconnect) !== null && x2 !== void 0 ? x2 : false, Se2.reason = (Q2 = C2.reason) !== null && Q2 !== void 0 ? Q2 : 0, Se2;
  } };
  function W2() {
    return { trackSid: "", layers: [] };
  }
  a92.UpdateVideoLayers = { encode(C2, x2 = l2.default.Writer.create()) {
    if (C2.trackSid !== void 0 && C2.trackSid !== "" && x2.uint32(10).string(C2.trackSid), C2.layers !== void 0 && C2.layers.length !== 0)
      for (const Q2 of C2.layers)
        v2.VideoLayer.encode(Q2, x2.uint32(18).fork()).ldelim();
    return x2;
  }, decode(C2, x2) {
    const Q2 = C2 instanceof l2.default.Reader ? C2 : new l2.default.Reader(C2);
    let Se2 = x2 === void 0 ? Q2.len : Q2.pos + x2;
    const me2 = W2();
    for (; Q2.pos < Se2; ) {
      const Ie2 = Q2.uint32();
      switch (Ie2 >>> 3) {
        case 1:
          me2.trackSid = Q2.string();
          break;
        case 2:
          me2.layers.push(v2.VideoLayer.decode(Q2, Q2.uint32()));
          break;
        default:
          Q2.skipType(Ie2 & 7);
          break;
      }
    }
    return me2;
  }, fromJSON(C2) {
    return { trackSid: Pe2(C2.trackSid) ? String(C2.trackSid) : "", layers: Array.isArray(C2 == null ? void 0 : C2.layers) ? C2.layers.map((x2) => v2.VideoLayer.fromJSON(x2)) : [] };
  }, toJSON(C2) {
    const x2 = {};
    return C2.trackSid !== void 0 && (x2.trackSid = C2.trackSid), C2.layers ? x2.layers = C2.layers.map((Q2) => Q2 ? v2.VideoLayer.toJSON(Q2) : void 0) : x2.layers = [], x2;
  }, fromPartial(C2) {
    var x2, Q2;
    const Se2 = W2();
    return Se2.trackSid = (x2 = C2.trackSid) !== null && x2 !== void 0 ? x2 : "", Se2.layers = ((Q2 = C2.layers) === null || Q2 === void 0 ? void 0 : Q2.map((me2) => v2.VideoLayer.fromPartial(me2))) || [], Se2;
  } };
  function ee2() {
    return { urls: [], username: "", credential: "" };
  }
  a92.ICEServer = { encode(C2, x2 = l2.default.Writer.create()) {
    if (C2.urls !== void 0 && C2.urls.length !== 0)
      for (const Q2 of C2.urls)
        x2.uint32(10).string(Q2);
    return C2.username !== void 0 && C2.username !== "" && x2.uint32(18).string(C2.username), C2.credential !== void 0 && C2.credential !== "" && x2.uint32(26).string(C2.credential), x2;
  }, decode(C2, x2) {
    const Q2 = C2 instanceof l2.default.Reader ? C2 : new l2.default.Reader(C2);
    let Se2 = x2 === void 0 ? Q2.len : Q2.pos + x2;
    const me2 = ee2();
    for (; Q2.pos < Se2; ) {
      const Ie2 = Q2.uint32();
      switch (Ie2 >>> 3) {
        case 1:
          me2.urls.push(Q2.string());
          break;
        case 2:
          me2.username = Q2.string();
          break;
        case 3:
          me2.credential = Q2.string();
          break;
        default:
          Q2.skipType(Ie2 & 7);
          break;
      }
    }
    return me2;
  }, fromJSON(C2) {
    return { urls: Array.isArray(C2 == null ? void 0 : C2.urls) ? C2.urls.map((x2) => String(x2)) : [], username: Pe2(C2.username) ? String(C2.username) : "", credential: Pe2(C2.credential) ? String(C2.credential) : "" };
  }, toJSON(C2) {
    const x2 = {};
    return C2.urls ? x2.urls = C2.urls.map((Q2) => Q2) : x2.urls = [], C2.username !== void 0 && (x2.username = C2.username), C2.credential !== void 0 && (x2.credential = C2.credential), x2;
  }, fromPartial(C2) {
    var x2, Q2, Se2;
    const me2 = ee2();
    return me2.urls = ((x2 = C2.urls) === null || x2 === void 0 ? void 0 : x2.map((Ie2) => Ie2)) || [], me2.username = (Q2 = C2.username) !== null && Q2 !== void 0 ? Q2 : "", me2.credential = (Se2 = C2.credential) !== null && Se2 !== void 0 ? Se2 : "", me2;
  } };
  function ae2() {
    return { speakers: [] };
  }
  a92.SpeakersChanged = { encode(C2, x2 = l2.default.Writer.create()) {
    if (C2.speakers !== void 0 && C2.speakers.length !== 0)
      for (const Q2 of C2.speakers)
        v2.SpeakerInfo.encode(Q2, x2.uint32(10).fork()).ldelim();
    return x2;
  }, decode(C2, x2) {
    const Q2 = C2 instanceof l2.default.Reader ? C2 : new l2.default.Reader(C2);
    let Se2 = x2 === void 0 ? Q2.len : Q2.pos + x2;
    const me2 = ae2();
    for (; Q2.pos < Se2; ) {
      const Ie2 = Q2.uint32();
      switch (Ie2 >>> 3) {
        case 1:
          me2.speakers.push(v2.SpeakerInfo.decode(Q2, Q2.uint32()));
          break;
        default:
          Q2.skipType(Ie2 & 7);
          break;
      }
    }
    return me2;
  }, fromJSON(C2) {
    return { speakers: Array.isArray(C2 == null ? void 0 : C2.speakers) ? C2.speakers.map((x2) => v2.SpeakerInfo.fromJSON(x2)) : [] };
  }, toJSON(C2) {
    const x2 = {};
    return C2.speakers ? x2.speakers = C2.speakers.map((Q2) => Q2 ? v2.SpeakerInfo.toJSON(Q2) : void 0) : x2.speakers = [], x2;
  }, fromPartial(C2) {
    var x2;
    const Q2 = ae2();
    return Q2.speakers = ((x2 = C2.speakers) === null || x2 === void 0 ? void 0 : x2.map((Se2) => v2.SpeakerInfo.fromPartial(Se2))) || [], Q2;
  } };
  function ye2() {
    return { room: void 0 };
  }
  a92.RoomUpdate = { encode(C2, x2 = l2.default.Writer.create()) {
    return C2.room !== void 0 && v2.Room.encode(C2.room, x2.uint32(10).fork()).ldelim(), x2;
  }, decode(C2, x2) {
    const Q2 = C2 instanceof l2.default.Reader ? C2 : new l2.default.Reader(C2);
    let Se2 = x2 === void 0 ? Q2.len : Q2.pos + x2;
    const me2 = ye2();
    for (; Q2.pos < Se2; ) {
      const Ie2 = Q2.uint32();
      switch (Ie2 >>> 3) {
        case 1:
          me2.room = v2.Room.decode(Q2, Q2.uint32());
          break;
        default:
          Q2.skipType(Ie2 & 7);
          break;
      }
    }
    return me2;
  }, fromJSON(C2) {
    return { room: Pe2(C2.room) ? v2.Room.fromJSON(C2.room) : void 0 };
  }, toJSON(C2) {
    const x2 = {};
    return C2.room !== void 0 && (x2.room = C2.room ? v2.Room.toJSON(C2.room) : void 0), x2;
  }, fromPartial(C2) {
    const x2 = ye2();
    return x2.room = C2.room !== void 0 && C2.room !== null ? v2.Room.fromPartial(C2.room) : void 0, x2;
  } };
  function he2() {
    return { participantSid: "", quality: 0, score: 0 };
  }
  a92.ConnectionQualityInfo = { encode(C2, x2 = l2.default.Writer.create()) {
    return C2.participantSid !== void 0 && C2.participantSid !== "" && x2.uint32(10).string(C2.participantSid), C2.quality !== void 0 && C2.quality !== 0 && x2.uint32(16).int32(C2.quality), C2.score !== void 0 && C2.score !== 0 && x2.uint32(29).float(C2.score), x2;
  }, decode(C2, x2) {
    const Q2 = C2 instanceof l2.default.Reader ? C2 : new l2.default.Reader(C2);
    let Se2 = x2 === void 0 ? Q2.len : Q2.pos + x2;
    const me2 = he2();
    for (; Q2.pos < Se2; ) {
      const Ie2 = Q2.uint32();
      switch (Ie2 >>> 3) {
        case 1:
          me2.participantSid = Q2.string();
          break;
        case 2:
          me2.quality = Q2.int32();
          break;
        case 3:
          me2.score = Q2.float();
          break;
        default:
          Q2.skipType(Ie2 & 7);
          break;
      }
    }
    return me2;
  }, fromJSON(C2) {
    return { participantSid: Pe2(C2.participantSid) ? String(C2.participantSid) : "", quality: Pe2(C2.quality) ? v2.connectionQualityFromJSON(C2.quality) : 0, score: Pe2(C2.score) ? Number(C2.score) : 0 };
  }, toJSON(C2) {
    const x2 = {};
    return C2.participantSid !== void 0 && (x2.participantSid = C2.participantSid), C2.quality !== void 0 && (x2.quality = v2.connectionQualityToJSON(C2.quality)), C2.score !== void 0 && (x2.score = C2.score), x2;
  }, fromPartial(C2) {
    var x2, Q2, Se2;
    const me2 = he2();
    return me2.participantSid = (x2 = C2.participantSid) !== null && x2 !== void 0 ? x2 : "", me2.quality = (Q2 = C2.quality) !== null && Q2 !== void 0 ? Q2 : 0, me2.score = (Se2 = C2.score) !== null && Se2 !== void 0 ? Se2 : 0, me2;
  } };
  function le2() {
    return { updates: [] };
  }
  a92.ConnectionQualityUpdate = { encode(C2, x2 = l2.default.Writer.create()) {
    if (C2.updates !== void 0 && C2.updates.length !== 0)
      for (const Q2 of C2.updates)
        a92.ConnectionQualityInfo.encode(Q2, x2.uint32(10).fork()).ldelim();
    return x2;
  }, decode(C2, x2) {
    const Q2 = C2 instanceof l2.default.Reader ? C2 : new l2.default.Reader(C2);
    let Se2 = x2 === void 0 ? Q2.len : Q2.pos + x2;
    const me2 = le2();
    for (; Q2.pos < Se2; ) {
      const Ie2 = Q2.uint32();
      switch (Ie2 >>> 3) {
        case 1:
          me2.updates.push(a92.ConnectionQualityInfo.decode(Q2, Q2.uint32()));
          break;
        default:
          Q2.skipType(Ie2 & 7);
          break;
      }
    }
    return me2;
  }, fromJSON(C2) {
    return { updates: Array.isArray(C2 == null ? void 0 : C2.updates) ? C2.updates.map((x2) => a92.ConnectionQualityInfo.fromJSON(x2)) : [] };
  }, toJSON(C2) {
    const x2 = {};
    return C2.updates ? x2.updates = C2.updates.map((Q2) => Q2 ? a92.ConnectionQualityInfo.toJSON(Q2) : void 0) : x2.updates = [], x2;
  }, fromPartial(C2) {
    var x2;
    const Q2 = le2();
    return Q2.updates = ((x2 = C2.updates) === null || x2 === void 0 ? void 0 : x2.map((Se2) => a92.ConnectionQualityInfo.fromPartial(Se2))) || [], Q2;
  } };
  function we2() {
    return { participantSid: "", trackSid: "", state: 0 };
  }
  a92.StreamStateInfo = { encode(C2, x2 = l2.default.Writer.create()) {
    return C2.participantSid !== void 0 && C2.participantSid !== "" && x2.uint32(10).string(C2.participantSid), C2.trackSid !== void 0 && C2.trackSid !== "" && x2.uint32(18).string(C2.trackSid), C2.state !== void 0 && C2.state !== 0 && x2.uint32(24).int32(C2.state), x2;
  }, decode(C2, x2) {
    const Q2 = C2 instanceof l2.default.Reader ? C2 : new l2.default.Reader(C2);
    let Se2 = x2 === void 0 ? Q2.len : Q2.pos + x2;
    const me2 = we2();
    for (; Q2.pos < Se2; ) {
      const Ie2 = Q2.uint32();
      switch (Ie2 >>> 3) {
        case 1:
          me2.participantSid = Q2.string();
          break;
        case 2:
          me2.trackSid = Q2.string();
          break;
        case 3:
          me2.state = Q2.int32();
          break;
        default:
          Q2.skipType(Ie2 & 7);
          break;
      }
    }
    return me2;
  }, fromJSON(C2) {
    return { participantSid: Pe2(C2.participantSid) ? String(C2.participantSid) : "", trackSid: Pe2(C2.trackSid) ? String(C2.trackSid) : "", state: Pe2(C2.state) ? k(C2.state) : 0 };
  }, toJSON(C2) {
    const x2 = {};
    return C2.participantSid !== void 0 && (x2.participantSid = C2.participantSid), C2.trackSid !== void 0 && (x2.trackSid = C2.trackSid), C2.state !== void 0 && (x2.state = L2(C2.state)), x2;
  }, fromPartial(C2) {
    var x2, Q2, Se2;
    const me2 = we2();
    return me2.participantSid = (x2 = C2.participantSid) !== null && x2 !== void 0 ? x2 : "", me2.trackSid = (Q2 = C2.trackSid) !== null && Q2 !== void 0 ? Q2 : "", me2.state = (Se2 = C2.state) !== null && Se2 !== void 0 ? Se2 : 0, me2;
  } };
  function Be2() {
    return { streamStates: [] };
  }
  a92.StreamStateUpdate = { encode(C2, x2 = l2.default.Writer.create()) {
    if (C2.streamStates !== void 0 && C2.streamStates.length !== 0)
      for (const Q2 of C2.streamStates)
        a92.StreamStateInfo.encode(Q2, x2.uint32(10).fork()).ldelim();
    return x2;
  }, decode(C2, x2) {
    const Q2 = C2 instanceof l2.default.Reader ? C2 : new l2.default.Reader(C2);
    let Se2 = x2 === void 0 ? Q2.len : Q2.pos + x2;
    const me2 = Be2();
    for (; Q2.pos < Se2; ) {
      const Ie2 = Q2.uint32();
      switch (Ie2 >>> 3) {
        case 1:
          me2.streamStates.push(a92.StreamStateInfo.decode(Q2, Q2.uint32()));
          break;
        default:
          Q2.skipType(Ie2 & 7);
          break;
      }
    }
    return me2;
  }, fromJSON(C2) {
    return { streamStates: Array.isArray(C2 == null ? void 0 : C2.streamStates) ? C2.streamStates.map((x2) => a92.StreamStateInfo.fromJSON(x2)) : [] };
  }, toJSON(C2) {
    const x2 = {};
    return C2.streamStates ? x2.streamStates = C2.streamStates.map((Q2) => Q2 ? a92.StreamStateInfo.toJSON(Q2) : void 0) : x2.streamStates = [], x2;
  }, fromPartial(C2) {
    var x2;
    const Q2 = Be2();
    return Q2.streamStates = ((x2 = C2.streamStates) === null || x2 === void 0 ? void 0 : x2.map((Se2) => a92.StreamStateInfo.fromPartial(Se2))) || [], Q2;
  } };
  function Ne2() {
    return { quality: 0, enabled: false };
  }
  a92.SubscribedQuality = { encode(C2, x2 = l2.default.Writer.create()) {
    return C2.quality !== void 0 && C2.quality !== 0 && x2.uint32(8).int32(C2.quality), C2.enabled === true && x2.uint32(16).bool(C2.enabled), x2;
  }, decode(C2, x2) {
    const Q2 = C2 instanceof l2.default.Reader ? C2 : new l2.default.Reader(C2);
    let Se2 = x2 === void 0 ? Q2.len : Q2.pos + x2;
    const me2 = Ne2();
    for (; Q2.pos < Se2; ) {
      const Ie2 = Q2.uint32();
      switch (Ie2 >>> 3) {
        case 1:
          me2.quality = Q2.int32();
          break;
        case 2:
          me2.enabled = Q2.bool();
          break;
        default:
          Q2.skipType(Ie2 & 7);
          break;
      }
    }
    return me2;
  }, fromJSON(C2) {
    return { quality: Pe2(C2.quality) ? v2.videoQualityFromJSON(C2.quality) : 0, enabled: Pe2(C2.enabled) ? !!C2.enabled : false };
  }, toJSON(C2) {
    const x2 = {};
    return C2.quality !== void 0 && (x2.quality = v2.videoQualityToJSON(C2.quality)), C2.enabled !== void 0 && (x2.enabled = C2.enabled), x2;
  }, fromPartial(C2) {
    var x2, Q2;
    const Se2 = Ne2();
    return Se2.quality = (x2 = C2.quality) !== null && x2 !== void 0 ? x2 : 0, Se2.enabled = (Q2 = C2.enabled) !== null && Q2 !== void 0 ? Q2 : false, Se2;
  } };
  function Le2() {
    return { codec: "", qualities: [] };
  }
  a92.SubscribedCodec = { encode(C2, x2 = l2.default.Writer.create()) {
    if (C2.codec !== void 0 && C2.codec !== "" && x2.uint32(10).string(C2.codec), C2.qualities !== void 0 && C2.qualities.length !== 0)
      for (const Q2 of C2.qualities)
        a92.SubscribedQuality.encode(Q2, x2.uint32(18).fork()).ldelim();
    return x2;
  }, decode(C2, x2) {
    const Q2 = C2 instanceof l2.default.Reader ? C2 : new l2.default.Reader(C2);
    let Se2 = x2 === void 0 ? Q2.len : Q2.pos + x2;
    const me2 = Le2();
    for (; Q2.pos < Se2; ) {
      const Ie2 = Q2.uint32();
      switch (Ie2 >>> 3) {
        case 1:
          me2.codec = Q2.string();
          break;
        case 2:
          me2.qualities.push(a92.SubscribedQuality.decode(Q2, Q2.uint32()));
          break;
        default:
          Q2.skipType(Ie2 & 7);
          break;
      }
    }
    return me2;
  }, fromJSON(C2) {
    return { codec: Pe2(C2.codec) ? String(C2.codec) : "", qualities: Array.isArray(C2 == null ? void 0 : C2.qualities) ? C2.qualities.map((x2) => a92.SubscribedQuality.fromJSON(x2)) : [] };
  }, toJSON(C2) {
    const x2 = {};
    return C2.codec !== void 0 && (x2.codec = C2.codec), C2.qualities ? x2.qualities = C2.qualities.map((Q2) => Q2 ? a92.SubscribedQuality.toJSON(Q2) : void 0) : x2.qualities = [], x2;
  }, fromPartial(C2) {
    var x2, Q2;
    const Se2 = Le2();
    return Se2.codec = (x2 = C2.codec) !== null && x2 !== void 0 ? x2 : "", Se2.qualities = ((Q2 = C2.qualities) === null || Q2 === void 0 ? void 0 : Q2.map((me2) => a92.SubscribedQuality.fromPartial(me2))) || [], Se2;
  } };
  function $e2() {
    return { trackSid: "", subscribedQualities: [], subscribedCodecs: [] };
  }
  a92.SubscribedQualityUpdate = { encode(C2, x2 = l2.default.Writer.create()) {
    if (C2.trackSid !== void 0 && C2.trackSid !== "" && x2.uint32(10).string(C2.trackSid), C2.subscribedQualities !== void 0 && C2.subscribedQualities.length !== 0)
      for (const Q2 of C2.subscribedQualities)
        a92.SubscribedQuality.encode(Q2, x2.uint32(18).fork()).ldelim();
    if (C2.subscribedCodecs !== void 0 && C2.subscribedCodecs.length !== 0)
      for (const Q2 of C2.subscribedCodecs)
        a92.SubscribedCodec.encode(Q2, x2.uint32(26).fork()).ldelim();
    return x2;
  }, decode(C2, x2) {
    const Q2 = C2 instanceof l2.default.Reader ? C2 : new l2.default.Reader(C2);
    let Se2 = x2 === void 0 ? Q2.len : Q2.pos + x2;
    const me2 = $e2();
    for (; Q2.pos < Se2; ) {
      const Ie2 = Q2.uint32();
      switch (Ie2 >>> 3) {
        case 1:
          me2.trackSid = Q2.string();
          break;
        case 2:
          me2.subscribedQualities.push(a92.SubscribedQuality.decode(Q2, Q2.uint32()));
          break;
        case 3:
          me2.subscribedCodecs.push(a92.SubscribedCodec.decode(Q2, Q2.uint32()));
          break;
        default:
          Q2.skipType(Ie2 & 7);
          break;
      }
    }
    return me2;
  }, fromJSON(C2) {
    return { trackSid: Pe2(C2.trackSid) ? String(C2.trackSid) : "", subscribedQualities: Array.isArray(C2 == null ? void 0 : C2.subscribedQualities) ? C2.subscribedQualities.map((x2) => a92.SubscribedQuality.fromJSON(x2)) : [], subscribedCodecs: Array.isArray(C2 == null ? void 0 : C2.subscribedCodecs) ? C2.subscribedCodecs.map((x2) => a92.SubscribedCodec.fromJSON(x2)) : [] };
  }, toJSON(C2) {
    const x2 = {};
    return C2.trackSid !== void 0 && (x2.trackSid = C2.trackSid), C2.subscribedQualities ? x2.subscribedQualities = C2.subscribedQualities.map((Q2) => Q2 ? a92.SubscribedQuality.toJSON(Q2) : void 0) : x2.subscribedQualities = [], C2.subscribedCodecs ? x2.subscribedCodecs = C2.subscribedCodecs.map((Q2) => Q2 ? a92.SubscribedCodec.toJSON(Q2) : void 0) : x2.subscribedCodecs = [], x2;
  }, fromPartial(C2) {
    var x2, Q2, Se2;
    const me2 = $e2();
    return me2.trackSid = (x2 = C2.trackSid) !== null && x2 !== void 0 ? x2 : "", me2.subscribedQualities = ((Q2 = C2.subscribedQualities) === null || Q2 === void 0 ? void 0 : Q2.map((Ie2) => a92.SubscribedQuality.fromPartial(Ie2))) || [], me2.subscribedCodecs = ((Se2 = C2.subscribedCodecs) === null || Se2 === void 0 ? void 0 : Se2.map((Ie2) => a92.SubscribedCodec.fromPartial(Ie2))) || [], me2;
  } };
  function Ue2() {
    return { participantSid: "", allTracks: false, trackSids: [], participantIdentity: "" };
  }
  a92.TrackPermission = { encode(C2, x2 = l2.default.Writer.create()) {
    if (C2.participantSid !== void 0 && C2.participantSid !== "" && x2.uint32(10).string(C2.participantSid), C2.allTracks === true && x2.uint32(16).bool(C2.allTracks), C2.trackSids !== void 0 && C2.trackSids.length !== 0)
      for (const Q2 of C2.trackSids)
        x2.uint32(26).string(Q2);
    return C2.participantIdentity !== void 0 && C2.participantIdentity !== "" && x2.uint32(34).string(C2.participantIdentity), x2;
  }, decode(C2, x2) {
    const Q2 = C2 instanceof l2.default.Reader ? C2 : new l2.default.Reader(C2);
    let Se2 = x2 === void 0 ? Q2.len : Q2.pos + x2;
    const me2 = Ue2();
    for (; Q2.pos < Se2; ) {
      const Ie2 = Q2.uint32();
      switch (Ie2 >>> 3) {
        case 1:
          me2.participantSid = Q2.string();
          break;
        case 2:
          me2.allTracks = Q2.bool();
          break;
        case 3:
          me2.trackSids.push(Q2.string());
          break;
        case 4:
          me2.participantIdentity = Q2.string();
          break;
        default:
          Q2.skipType(Ie2 & 7);
          break;
      }
    }
    return me2;
  }, fromJSON(C2) {
    return { participantSid: Pe2(C2.participantSid) ? String(C2.participantSid) : "", allTracks: Pe2(C2.allTracks) ? !!C2.allTracks : false, trackSids: Array.isArray(C2 == null ? void 0 : C2.trackSids) ? C2.trackSids.map((x2) => String(x2)) : [], participantIdentity: Pe2(C2.participantIdentity) ? String(C2.participantIdentity) : "" };
  }, toJSON(C2) {
    const x2 = {};
    return C2.participantSid !== void 0 && (x2.participantSid = C2.participantSid), C2.allTracks !== void 0 && (x2.allTracks = C2.allTracks), C2.trackSids ? x2.trackSids = C2.trackSids.map((Q2) => Q2) : x2.trackSids = [], C2.participantIdentity !== void 0 && (x2.participantIdentity = C2.participantIdentity), x2;
  }, fromPartial(C2) {
    var x2, Q2, Se2, me2;
    const Ie2 = Ue2();
    return Ie2.participantSid = (x2 = C2.participantSid) !== null && x2 !== void 0 ? x2 : "", Ie2.allTracks = (Q2 = C2.allTracks) !== null && Q2 !== void 0 ? Q2 : false, Ie2.trackSids = ((Se2 = C2.trackSids) === null || Se2 === void 0 ? void 0 : Se2.map((at) => at)) || [], Ie2.participantIdentity = (me2 = C2.participantIdentity) !== null && me2 !== void 0 ? me2 : "", Ie2;
  } };
  function Ge2() {
    return { allParticipants: false, trackPermissions: [] };
  }
  a92.SubscriptionPermission = { encode(C2, x2 = l2.default.Writer.create()) {
    if (C2.allParticipants === true && x2.uint32(8).bool(C2.allParticipants), C2.trackPermissions !== void 0 && C2.trackPermissions.length !== 0)
      for (const Q2 of C2.trackPermissions)
        a92.TrackPermission.encode(Q2, x2.uint32(18).fork()).ldelim();
    return x2;
  }, decode(C2, x2) {
    const Q2 = C2 instanceof l2.default.Reader ? C2 : new l2.default.Reader(C2);
    let Se2 = x2 === void 0 ? Q2.len : Q2.pos + x2;
    const me2 = Ge2();
    for (; Q2.pos < Se2; ) {
      const Ie2 = Q2.uint32();
      switch (Ie2 >>> 3) {
        case 1:
          me2.allParticipants = Q2.bool();
          break;
        case 2:
          me2.trackPermissions.push(a92.TrackPermission.decode(Q2, Q2.uint32()));
          break;
        default:
          Q2.skipType(Ie2 & 7);
          break;
      }
    }
    return me2;
  }, fromJSON(C2) {
    return { allParticipants: Pe2(C2.allParticipants) ? !!C2.allParticipants : false, trackPermissions: Array.isArray(C2 == null ? void 0 : C2.trackPermissions) ? C2.trackPermissions.map((x2) => a92.TrackPermission.fromJSON(x2)) : [] };
  }, toJSON(C2) {
    const x2 = {};
    return C2.allParticipants !== void 0 && (x2.allParticipants = C2.allParticipants), C2.trackPermissions ? x2.trackPermissions = C2.trackPermissions.map((Q2) => Q2 ? a92.TrackPermission.toJSON(Q2) : void 0) : x2.trackPermissions = [], x2;
  }, fromPartial(C2) {
    var x2, Q2;
    const Se2 = Ge2();
    return Se2.allParticipants = (x2 = C2.allParticipants) !== null && x2 !== void 0 ? x2 : false, Se2.trackPermissions = ((Q2 = C2.trackPermissions) === null || Q2 === void 0 ? void 0 : Q2.map((me2) => a92.TrackPermission.fromPartial(me2))) || [], Se2;
  } };
  function He2() {
    return { participantSid: "", trackSid: "", allowed: false };
  }
  a92.SubscriptionPermissionUpdate = { encode(C2, x2 = l2.default.Writer.create()) {
    return C2.participantSid !== void 0 && C2.participantSid !== "" && x2.uint32(10).string(C2.participantSid), C2.trackSid !== void 0 && C2.trackSid !== "" && x2.uint32(18).string(C2.trackSid), C2.allowed === true && x2.uint32(24).bool(C2.allowed), x2;
  }, decode(C2, x2) {
    const Q2 = C2 instanceof l2.default.Reader ? C2 : new l2.default.Reader(C2);
    let Se2 = x2 === void 0 ? Q2.len : Q2.pos + x2;
    const me2 = He2();
    for (; Q2.pos < Se2; ) {
      const Ie2 = Q2.uint32();
      switch (Ie2 >>> 3) {
        case 1:
          me2.participantSid = Q2.string();
          break;
        case 2:
          me2.trackSid = Q2.string();
          break;
        case 3:
          me2.allowed = Q2.bool();
          break;
        default:
          Q2.skipType(Ie2 & 7);
          break;
      }
    }
    return me2;
  }, fromJSON(C2) {
    return { participantSid: Pe2(C2.participantSid) ? String(C2.participantSid) : "", trackSid: Pe2(C2.trackSid) ? String(C2.trackSid) : "", allowed: Pe2(C2.allowed) ? !!C2.allowed : false };
  }, toJSON(C2) {
    const x2 = {};
    return C2.participantSid !== void 0 && (x2.participantSid = C2.participantSid), C2.trackSid !== void 0 && (x2.trackSid = C2.trackSid), C2.allowed !== void 0 && (x2.allowed = C2.allowed), x2;
  }, fromPartial(C2) {
    var x2, Q2, Se2;
    const me2 = He2();
    return me2.participantSid = (x2 = C2.participantSid) !== null && x2 !== void 0 ? x2 : "", me2.trackSid = (Q2 = C2.trackSid) !== null && Q2 !== void 0 ? Q2 : "", me2.allowed = (Se2 = C2.allowed) !== null && Se2 !== void 0 ? Se2 : false, me2;
  } };
  function Ve2() {
    return { answer: void 0, subscription: void 0, publishTracks: [], dataChannels: [], offer: void 0 };
  }
  a92.SyncState = { encode(C2, x2 = l2.default.Writer.create()) {
    if (C2.answer !== void 0 && a92.SessionDescription.encode(C2.answer, x2.uint32(10).fork()).ldelim(), C2.subscription !== void 0 && a92.UpdateSubscription.encode(C2.subscription, x2.uint32(18).fork()).ldelim(), C2.publishTracks !== void 0 && C2.publishTracks.length !== 0)
      for (const Q2 of C2.publishTracks)
        a92.TrackPublishedResponse.encode(Q2, x2.uint32(26).fork()).ldelim();
    if (C2.dataChannels !== void 0 && C2.dataChannels.length !== 0)
      for (const Q2 of C2.dataChannels)
        a92.DataChannelInfo.encode(Q2, x2.uint32(34).fork()).ldelim();
    return C2.offer !== void 0 && a92.SessionDescription.encode(C2.offer, x2.uint32(42).fork()).ldelim(), x2;
  }, decode(C2, x2) {
    const Q2 = C2 instanceof l2.default.Reader ? C2 : new l2.default.Reader(C2);
    let Se2 = x2 === void 0 ? Q2.len : Q2.pos + x2;
    const me2 = Ve2();
    for (; Q2.pos < Se2; ) {
      const Ie2 = Q2.uint32();
      switch (Ie2 >>> 3) {
        case 1:
          me2.answer = a92.SessionDescription.decode(Q2, Q2.uint32());
          break;
        case 2:
          me2.subscription = a92.UpdateSubscription.decode(Q2, Q2.uint32());
          break;
        case 3:
          me2.publishTracks.push(a92.TrackPublishedResponse.decode(Q2, Q2.uint32()));
          break;
        case 4:
          me2.dataChannels.push(a92.DataChannelInfo.decode(Q2, Q2.uint32()));
          break;
        case 5:
          me2.offer = a92.SessionDescription.decode(Q2, Q2.uint32());
          break;
        default:
          Q2.skipType(Ie2 & 7);
          break;
      }
    }
    return me2;
  }, fromJSON(C2) {
    return { answer: Pe2(C2.answer) ? a92.SessionDescription.fromJSON(C2.answer) : void 0, subscription: Pe2(C2.subscription) ? a92.UpdateSubscription.fromJSON(C2.subscription) : void 0, publishTracks: Array.isArray(C2 == null ? void 0 : C2.publishTracks) ? C2.publishTracks.map((x2) => a92.TrackPublishedResponse.fromJSON(x2)) : [], dataChannels: Array.isArray(C2 == null ? void 0 : C2.dataChannels) ? C2.dataChannels.map((x2) => a92.DataChannelInfo.fromJSON(x2)) : [], offer: Pe2(C2.offer) ? a92.SessionDescription.fromJSON(C2.offer) : void 0 };
  }, toJSON(C2) {
    const x2 = {};
    return C2.answer !== void 0 && (x2.answer = C2.answer ? a92.SessionDescription.toJSON(C2.answer) : void 0), C2.subscription !== void 0 && (x2.subscription = C2.subscription ? a92.UpdateSubscription.toJSON(C2.subscription) : void 0), C2.publishTracks ? x2.publishTracks = C2.publishTracks.map((Q2) => Q2 ? a92.TrackPublishedResponse.toJSON(Q2) : void 0) : x2.publishTracks = [], C2.dataChannels ? x2.dataChannels = C2.dataChannels.map((Q2) => Q2 ? a92.DataChannelInfo.toJSON(Q2) : void 0) : x2.dataChannels = [], C2.offer !== void 0 && (x2.offer = C2.offer ? a92.SessionDescription.toJSON(C2.offer) : void 0), x2;
  }, fromPartial(C2) {
    var x2, Q2;
    const Se2 = Ve2();
    return Se2.answer = C2.answer !== void 0 && C2.answer !== null ? a92.SessionDescription.fromPartial(C2.answer) : void 0, Se2.subscription = C2.subscription !== void 0 && C2.subscription !== null ? a92.UpdateSubscription.fromPartial(C2.subscription) : void 0, Se2.publishTracks = ((x2 = C2.publishTracks) === null || x2 === void 0 ? void 0 : x2.map((me2) => a92.TrackPublishedResponse.fromPartial(me2))) || [], Se2.dataChannels = ((Q2 = C2.dataChannels) === null || Q2 === void 0 ? void 0 : Q2.map((me2) => a92.DataChannelInfo.fromPartial(me2))) || [], Se2.offer = C2.offer !== void 0 && C2.offer !== null ? a92.SessionDescription.fromPartial(C2.offer) : void 0, Se2;
  } };
  function be2() {
    return { label: "", id: 0, target: 0 };
  }
  a92.DataChannelInfo = { encode(C2, x2 = l2.default.Writer.create()) {
    return C2.label !== void 0 && C2.label !== "" && x2.uint32(10).string(C2.label), C2.id !== void 0 && C2.id !== 0 && x2.uint32(16).uint32(C2.id), C2.target !== void 0 && C2.target !== 0 && x2.uint32(24).int32(C2.target), x2;
  }, decode(C2, x2) {
    const Q2 = C2 instanceof l2.default.Reader ? C2 : new l2.default.Reader(C2);
    let Se2 = x2 === void 0 ? Q2.len : Q2.pos + x2;
    const me2 = be2();
    for (; Q2.pos < Se2; ) {
      const Ie2 = Q2.uint32();
      switch (Ie2 >>> 3) {
        case 1:
          me2.label = Q2.string();
          break;
        case 2:
          me2.id = Q2.uint32();
          break;
        case 3:
          me2.target = Q2.int32();
          break;
        default:
          Q2.skipType(Ie2 & 7);
          break;
      }
    }
    return me2;
  }, fromJSON(C2) {
    return { label: Pe2(C2.label) ? String(C2.label) : "", id: Pe2(C2.id) ? Number(C2.id) : 0, target: Pe2(C2.target) ? g2(C2.target) : 0 };
  }, toJSON(C2) {
    const x2 = {};
    return C2.label !== void 0 && (x2.label = C2.label), C2.id !== void 0 && (x2.id = Math.round(C2.id)), C2.target !== void 0 && (x2.target = E2(C2.target)), x2;
  }, fromPartial(C2) {
    var x2, Q2, Se2;
    const me2 = be2();
    return me2.label = (x2 = C2.label) !== null && x2 !== void 0 ? x2 : "", me2.id = (Q2 = C2.id) !== null && Q2 !== void 0 ? Q2 : 0, me2.target = (Se2 = C2.target) !== null && Se2 !== void 0 ? Se2 : 0, me2;
  } };
  function Ae2() {
    return { speakerUpdate: void 0, nodeFailure: void 0, migration: void 0, serverLeave: void 0, switchCandidateProtocol: void 0 };
  }
  a92.SimulateScenario = { encode(C2, x2 = l2.default.Writer.create()) {
    return C2.speakerUpdate !== void 0 && x2.uint32(8).int32(C2.speakerUpdate), C2.nodeFailure !== void 0 && x2.uint32(16).bool(C2.nodeFailure), C2.migration !== void 0 && x2.uint32(24).bool(C2.migration), C2.serverLeave !== void 0 && x2.uint32(32).bool(C2.serverLeave), C2.switchCandidateProtocol !== void 0 && x2.uint32(40).int32(C2.switchCandidateProtocol), x2;
  }, decode(C2, x2) {
    const Q2 = C2 instanceof l2.default.Reader ? C2 : new l2.default.Reader(C2);
    let Se2 = x2 === void 0 ? Q2.len : Q2.pos + x2;
    const me2 = Ae2();
    for (; Q2.pos < Se2; ) {
      const Ie2 = Q2.uint32();
      switch (Ie2 >>> 3) {
        case 1:
          me2.speakerUpdate = Q2.int32();
          break;
        case 2:
          me2.nodeFailure = Q2.bool();
          break;
        case 3:
          me2.migration = Q2.bool();
          break;
        case 4:
          me2.serverLeave = Q2.bool();
          break;
        case 5:
          me2.switchCandidateProtocol = Q2.int32();
          break;
        default:
          Q2.skipType(Ie2 & 7);
          break;
      }
    }
    return me2;
  }, fromJSON(C2) {
    return { speakerUpdate: Pe2(C2.speakerUpdate) ? Number(C2.speakerUpdate) : void 0, nodeFailure: Pe2(C2.nodeFailure) ? !!C2.nodeFailure : void 0, migration: Pe2(C2.migration) ? !!C2.migration : void 0, serverLeave: Pe2(C2.serverLeave) ? !!C2.serverLeave : void 0, switchCandidateProtocol: Pe2(C2.switchCandidateProtocol) ? $(C2.switchCandidateProtocol) : void 0 };
  }, toJSON(C2) {
    const x2 = {};
    return C2.speakerUpdate !== void 0 && (x2.speakerUpdate = Math.round(C2.speakerUpdate)), C2.nodeFailure !== void 0 && (x2.nodeFailure = C2.nodeFailure), C2.migration !== void 0 && (x2.migration = C2.migration), C2.serverLeave !== void 0 && (x2.serverLeave = C2.serverLeave), C2.switchCandidateProtocol !== void 0 && (x2.switchCandidateProtocol = C2.switchCandidateProtocol !== void 0 ? J2(C2.switchCandidateProtocol) : void 0), x2;
  }, fromPartial(C2) {
    var x2, Q2, Se2, me2, Ie2;
    const at = Ae2();
    return at.speakerUpdate = (x2 = C2.speakerUpdate) !== null && x2 !== void 0 ? x2 : void 0, at.nodeFailure = (Q2 = C2.nodeFailure) !== null && Q2 !== void 0 ? Q2 : void 0, at.migration = (Se2 = C2.migration) !== null && Se2 !== void 0 ? Se2 : void 0, at.serverLeave = (me2 = C2.serverLeave) !== null && me2 !== void 0 ? me2 : void 0, at.switchCandidateProtocol = (Ie2 = C2.switchCandidateProtocol) !== null && Ie2 !== void 0 ? Ie2 : void 0, at;
  } };
  var qe2 = (() => {
    if (typeof qe2 < "u")
      return qe2;
    if (typeof self < "u")
      return self;
    if (typeof window < "u")
      return window;
    if (typeof commonjsGlobal$1 < "u")
      return commonjsGlobal$1;
    throw "Unable to locate global object";
  })();
  function xe2(C2) {
    if (C2.gt(Number.MAX_SAFE_INTEGER))
      throw new qe2.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    return C2.toNumber();
  }
  l2.default.util.Long !== c.default && (l2.default.util.Long = c.default, l2.default.configure());
  function Pe2(C2) {
    return C2 != null;
  }
})(livekit_rtc);
(function(a92) {
  var u2 = commonjsGlobal$1 && commonjsGlobal$1.__importDefault || function(N2) {
    return N2 && N2.__esModule ? N2 : { default: N2 };
  };
  Object.defineProperty(a92, "__esModule", { value: true }), a92.RoomInternal = a92.KeepAlive = a92.RemoveParticipant = a92.EndSession = a92.StartSession = a92.SignalNodeMessage = a92.RTCNodeMessage = a92.NodeStats = a92.Node = a92.nodeStateToJSON = a92.nodeStateFromJSON = a92.NodeState = a92.nodeTypeToJSON = a92.nodeTypeFromJSON = a92.NodeType = a92.protobufPackage = void 0;
  const c = u2(umdExports), l2 = u2(minimal), v2 = livekit_egress, S2 = livekit_models, g2 = livekit_room, E2 = livekit_rtc;
  a92.protobufPackage = "livekit";
  var _;
  (function(N2) {
    N2[N2.SERVER = 0] = "SERVER", N2[N2.CONTROLLER = 1] = "CONTROLLER", N2[N2.MEDIA = 2] = "MEDIA", N2[N2.TURN = 4] = "TURN", N2[N2.UNRECOGNIZED = -1] = "UNRECOGNIZED";
  })(_ = a92.NodeType || (a92.NodeType = {}));
  function k(N2) {
    switch (N2) {
      case 0:
      case "SERVER":
        return _.SERVER;
      case 1:
      case "CONTROLLER":
        return _.CONTROLLER;
      case 2:
      case "MEDIA":
        return _.MEDIA;
      case 4:
      case "TURN":
        return _.TURN;
      case -1:
      case "UNRECOGNIZED":
      default:
        return _.UNRECOGNIZED;
    }
  }
  a92.nodeTypeFromJSON = k;
  function L2(N2) {
    switch (N2) {
      case _.SERVER:
        return "SERVER";
      case _.CONTROLLER:
        return "CONTROLLER";
      case _.MEDIA:
        return "MEDIA";
      case _.TURN:
        return "TURN";
      case _.UNRECOGNIZED:
      default:
        return "UNRECOGNIZED";
    }
  }
  a92.nodeTypeToJSON = L2;
  var M2;
  (function(N2) {
    N2[N2.STARTING_UP = 0] = "STARTING_UP", N2[N2.SERVING = 1] = "SERVING", N2[N2.SHUTTING_DOWN = 2] = "SHUTTING_DOWN", N2[N2.UNRECOGNIZED = -1] = "UNRECOGNIZED";
  })(M2 = a92.NodeState || (a92.NodeState = {}));
  function $(N2) {
    switch (N2) {
      case 0:
      case "STARTING_UP":
        return M2.STARTING_UP;
      case 1:
      case "SERVING":
        return M2.SERVING;
      case 2:
      case "SHUTTING_DOWN":
        return M2.SHUTTING_DOWN;
      case -1:
      case "UNRECOGNIZED":
      default:
        return M2.UNRECOGNIZED;
    }
  }
  a92.nodeStateFromJSON = $;
  function J2(N2) {
    switch (N2) {
      case M2.STARTING_UP:
        return "STARTING_UP";
      case M2.SERVING:
        return "SERVING";
      case M2.SHUTTING_DOWN:
        return "SHUTTING_DOWN";
      case M2.UNRECOGNIZED:
      default:
        return "UNRECOGNIZED";
    }
  }
  a92.nodeStateToJSON = J2;
  function V2() {
    return { id: "", ip: "", numCpus: 0, stats: void 0, type: 0, state: 0, region: "" };
  }
  a92.Node = { encode(N2, D2 = l2.default.Writer.create()) {
    return N2.id !== void 0 && N2.id !== "" && D2.uint32(10).string(N2.id), N2.ip !== void 0 && N2.ip !== "" && D2.uint32(18).string(N2.ip), N2.numCpus !== void 0 && N2.numCpus !== 0 && D2.uint32(24).uint32(N2.numCpus), N2.stats !== void 0 && a92.NodeStats.encode(N2.stats, D2.uint32(34).fork()).ldelim(), N2.type !== void 0 && N2.type !== 0 && D2.uint32(40).int32(N2.type), N2.state !== void 0 && N2.state !== 0 && D2.uint32(48).int32(N2.state), N2.region !== void 0 && N2.region !== "" && D2.uint32(58).string(N2.region), D2;
  }, decode(N2, D2) {
    const W2 = N2 instanceof l2.default.Reader ? N2 : new l2.default.Reader(N2);
    let ee2 = D2 === void 0 ? W2.len : W2.pos + D2;
    const ae2 = V2();
    for (; W2.pos < ee2; ) {
      const ye2 = W2.uint32();
      switch (ye2 >>> 3) {
        case 1:
          ae2.id = W2.string();
          break;
        case 2:
          ae2.ip = W2.string();
          break;
        case 3:
          ae2.numCpus = W2.uint32();
          break;
        case 4:
          ae2.stats = a92.NodeStats.decode(W2, W2.uint32());
          break;
        case 5:
          ae2.type = W2.int32();
          break;
        case 6:
          ae2.state = W2.int32();
          break;
        case 7:
          ae2.region = W2.string();
          break;
        default:
          W2.skipType(ye2 & 7);
          break;
      }
    }
    return ae2;
  }, fromJSON(N2) {
    return { id: A2(N2.id) ? String(N2.id) : "", ip: A2(N2.ip) ? String(N2.ip) : "", numCpus: A2(N2.numCpus) ? Number(N2.numCpus) : 0, stats: A2(N2.stats) ? a92.NodeStats.fromJSON(N2.stats) : void 0, type: A2(N2.type) ? k(N2.type) : 0, state: A2(N2.state) ? $(N2.state) : 0, region: A2(N2.region) ? String(N2.region) : "" };
  }, toJSON(N2) {
    const D2 = {};
    return N2.id !== void 0 && (D2.id = N2.id), N2.ip !== void 0 && (D2.ip = N2.ip), N2.numCpus !== void 0 && (D2.numCpus = Math.round(N2.numCpus)), N2.stats !== void 0 && (D2.stats = N2.stats ? a92.NodeStats.toJSON(N2.stats) : void 0), N2.type !== void 0 && (D2.type = L2(N2.type)), N2.state !== void 0 && (D2.state = J2(N2.state)), N2.region !== void 0 && (D2.region = N2.region), D2;
  }, fromPartial(N2) {
    var D2, W2, ee2, ae2, ye2, he2;
    const le2 = V2();
    return le2.id = (D2 = N2.id) !== null && D2 !== void 0 ? D2 : "", le2.ip = (W2 = N2.ip) !== null && W2 !== void 0 ? W2 : "", le2.numCpus = (ee2 = N2.numCpus) !== null && ee2 !== void 0 ? ee2 : 0, le2.stats = N2.stats !== void 0 && N2.stats !== null ? a92.NodeStats.fromPartial(N2.stats) : void 0, le2.type = (ae2 = N2.type) !== null && ae2 !== void 0 ? ae2 : 0, le2.state = (ye2 = N2.state) !== null && ye2 !== void 0 ? ye2 : 0, le2.region = (he2 = N2.region) !== null && he2 !== void 0 ? he2 : "", le2;
  } };
  function q2() {
    return { startedAt: 0, updatedAt: 0, numRooms: 0, numClients: 0, numTracksIn: 0, numTracksOut: 0, bytesIn: 0, bytesOut: 0, packetsIn: 0, packetsOut: 0, nackTotal: 0, bytesInPerSec: 0, bytesOutPerSec: 0, packetsInPerSec: 0, packetsOutPerSec: 0, nackPerSec: 0, numCpus: 0, loadAvgLast1min: 0, loadAvgLast5min: 0, loadAvgLast15min: 0, cpuLoad: 0, memoryLoad: 0, sysPacketsOut: 0, sysPacketsDropped: 0, sysPacketsOutPerSec: 0, sysPacketsDroppedPerSec: 0, sysPacketsDroppedPctPerSec: 0, retransmitBytesOut: 0, retransmitPacketsOut: 0, retransmitBytesOutPerSec: 0, retransmitPacketsOutPerSec: 0, participantJoin: 0, participantJoinPerSec: 0 };
  }
  a92.NodeStats = { encode(N2, D2 = l2.default.Writer.create()) {
    return N2.startedAt !== void 0 && N2.startedAt !== 0 && D2.uint32(8).int64(N2.startedAt), N2.updatedAt !== void 0 && N2.updatedAt !== 0 && D2.uint32(16).int64(N2.updatedAt), N2.numRooms !== void 0 && N2.numRooms !== 0 && D2.uint32(24).int32(N2.numRooms), N2.numClients !== void 0 && N2.numClients !== 0 && D2.uint32(32).int32(N2.numClients), N2.numTracksIn !== void 0 && N2.numTracksIn !== 0 && D2.uint32(40).int32(N2.numTracksIn), N2.numTracksOut !== void 0 && N2.numTracksOut !== 0 && D2.uint32(48).int32(N2.numTracksOut), N2.bytesIn !== void 0 && N2.bytesIn !== 0 && D2.uint32(56).uint64(N2.bytesIn), N2.bytesOut !== void 0 && N2.bytesOut !== 0 && D2.uint32(64).uint64(N2.bytesOut), N2.packetsIn !== void 0 && N2.packetsIn !== 0 && D2.uint32(72).uint64(N2.packetsIn), N2.packetsOut !== void 0 && N2.packetsOut !== 0 && D2.uint32(80).uint64(N2.packetsOut), N2.nackTotal !== void 0 && N2.nackTotal !== 0 && D2.uint32(88).uint64(N2.nackTotal), N2.bytesInPerSec !== void 0 && N2.bytesInPerSec !== 0 && D2.uint32(101).float(N2.bytesInPerSec), N2.bytesOutPerSec !== void 0 && N2.bytesOutPerSec !== 0 && D2.uint32(109).float(N2.bytesOutPerSec), N2.packetsInPerSec !== void 0 && N2.packetsInPerSec !== 0 && D2.uint32(117).float(N2.packetsInPerSec), N2.packetsOutPerSec !== void 0 && N2.packetsOutPerSec !== 0 && D2.uint32(125).float(N2.packetsOutPerSec), N2.nackPerSec !== void 0 && N2.nackPerSec !== 0 && D2.uint32(133).float(N2.nackPerSec), N2.numCpus !== void 0 && N2.numCpus !== 0 && D2.uint32(136).uint32(N2.numCpus), N2.loadAvgLast1min !== void 0 && N2.loadAvgLast1min !== 0 && D2.uint32(149).float(N2.loadAvgLast1min), N2.loadAvgLast5min !== void 0 && N2.loadAvgLast5min !== 0 && D2.uint32(157).float(N2.loadAvgLast5min), N2.loadAvgLast15min !== void 0 && N2.loadAvgLast15min !== 0 && D2.uint32(165).float(N2.loadAvgLast15min), N2.cpuLoad !== void 0 && N2.cpuLoad !== 0 && D2.uint32(173).float(N2.cpuLoad), N2.memoryLoad !== void 0 && N2.memoryLoad !== 0 && D2.uint32(269).float(N2.memoryLoad), N2.sysPacketsOut !== void 0 && N2.sysPacketsOut !== 0 && D2.uint32(224).uint32(N2.sysPacketsOut), N2.sysPacketsDropped !== void 0 && N2.sysPacketsDropped !== 0 && D2.uint32(232).uint32(N2.sysPacketsDropped), N2.sysPacketsOutPerSec !== void 0 && N2.sysPacketsOutPerSec !== 0 && D2.uint32(245).float(N2.sysPacketsOutPerSec), N2.sysPacketsDroppedPerSec !== void 0 && N2.sysPacketsDroppedPerSec !== 0 && D2.uint32(253).float(N2.sysPacketsDroppedPerSec), N2.sysPacketsDroppedPctPerSec !== void 0 && N2.sysPacketsDroppedPctPerSec !== 0 && D2.uint32(261).float(N2.sysPacketsDroppedPctPerSec), N2.retransmitBytesOut !== void 0 && N2.retransmitBytesOut !== 0 && D2.uint32(176).uint64(N2.retransmitBytesOut), N2.retransmitPacketsOut !== void 0 && N2.retransmitPacketsOut !== 0 && D2.uint32(184).uint64(N2.retransmitPacketsOut), N2.retransmitBytesOutPerSec !== void 0 && N2.retransmitBytesOutPerSec !== 0 && D2.uint32(197).float(N2.retransmitBytesOutPerSec), N2.retransmitPacketsOutPerSec !== void 0 && N2.retransmitPacketsOutPerSec !== 0 && D2.uint32(205).float(N2.retransmitPacketsOutPerSec), N2.participantJoin !== void 0 && N2.participantJoin !== 0 && D2.uint32(208).uint64(N2.participantJoin), N2.participantJoinPerSec !== void 0 && N2.participantJoinPerSec !== 0 && D2.uint32(221).float(N2.participantJoinPerSec), D2;
  }, decode(N2, D2) {
    const W2 = N2 instanceof l2.default.Reader ? N2 : new l2.default.Reader(N2);
    let ee2 = D2 === void 0 ? W2.len : W2.pos + D2;
    const ae2 = q2();
    for (; W2.pos < ee2; ) {
      const ye2 = W2.uint32();
      switch (ye2 >>> 3) {
        case 1:
          ae2.startedAt = de2(W2.int64());
          break;
        case 2:
          ae2.updatedAt = de2(W2.int64());
          break;
        case 3:
          ae2.numRooms = W2.int32();
          break;
        case 4:
          ae2.numClients = W2.int32();
          break;
        case 5:
          ae2.numTracksIn = W2.int32();
          break;
        case 6:
          ae2.numTracksOut = W2.int32();
          break;
        case 7:
          ae2.bytesIn = de2(W2.uint64());
          break;
        case 8:
          ae2.bytesOut = de2(W2.uint64());
          break;
        case 9:
          ae2.packetsIn = de2(W2.uint64());
          break;
        case 10:
          ae2.packetsOut = de2(W2.uint64());
          break;
        case 11:
          ae2.nackTotal = de2(W2.uint64());
          break;
        case 12:
          ae2.bytesInPerSec = W2.float();
          break;
        case 13:
          ae2.bytesOutPerSec = W2.float();
          break;
        case 14:
          ae2.packetsInPerSec = W2.float();
          break;
        case 15:
          ae2.packetsOutPerSec = W2.float();
          break;
        case 16:
          ae2.nackPerSec = W2.float();
          break;
        case 17:
          ae2.numCpus = W2.uint32();
          break;
        case 18:
          ae2.loadAvgLast1min = W2.float();
          break;
        case 19:
          ae2.loadAvgLast5min = W2.float();
          break;
        case 20:
          ae2.loadAvgLast15min = W2.float();
          break;
        case 21:
          ae2.cpuLoad = W2.float();
          break;
        case 33:
          ae2.memoryLoad = W2.float();
          break;
        case 28:
          ae2.sysPacketsOut = W2.uint32();
          break;
        case 29:
          ae2.sysPacketsDropped = W2.uint32();
          break;
        case 30:
          ae2.sysPacketsOutPerSec = W2.float();
          break;
        case 31:
          ae2.sysPacketsDroppedPerSec = W2.float();
          break;
        case 32:
          ae2.sysPacketsDroppedPctPerSec = W2.float();
          break;
        case 22:
          ae2.retransmitBytesOut = de2(W2.uint64());
          break;
        case 23:
          ae2.retransmitPacketsOut = de2(W2.uint64());
          break;
        case 24:
          ae2.retransmitBytesOutPerSec = W2.float();
          break;
        case 25:
          ae2.retransmitPacketsOutPerSec = W2.float();
          break;
        case 26:
          ae2.participantJoin = de2(W2.uint64());
          break;
        case 27:
          ae2.participantJoinPerSec = W2.float();
          break;
        default:
          W2.skipType(ye2 & 7);
          break;
      }
    }
    return ae2;
  }, fromJSON(N2) {
    return { startedAt: A2(N2.startedAt) ? Number(N2.startedAt) : 0, updatedAt: A2(N2.updatedAt) ? Number(N2.updatedAt) : 0, numRooms: A2(N2.numRooms) ? Number(N2.numRooms) : 0, numClients: A2(N2.numClients) ? Number(N2.numClients) : 0, numTracksIn: A2(N2.numTracksIn) ? Number(N2.numTracksIn) : 0, numTracksOut: A2(N2.numTracksOut) ? Number(N2.numTracksOut) : 0, bytesIn: A2(N2.bytesIn) ? Number(N2.bytesIn) : 0, bytesOut: A2(N2.bytesOut) ? Number(N2.bytesOut) : 0, packetsIn: A2(N2.packetsIn) ? Number(N2.packetsIn) : 0, packetsOut: A2(N2.packetsOut) ? Number(N2.packetsOut) : 0, nackTotal: A2(N2.nackTotal) ? Number(N2.nackTotal) : 0, bytesInPerSec: A2(N2.bytesInPerSec) ? Number(N2.bytesInPerSec) : 0, bytesOutPerSec: A2(N2.bytesOutPerSec) ? Number(N2.bytesOutPerSec) : 0, packetsInPerSec: A2(N2.packetsInPerSec) ? Number(N2.packetsInPerSec) : 0, packetsOutPerSec: A2(N2.packetsOutPerSec) ? Number(N2.packetsOutPerSec) : 0, nackPerSec: A2(N2.nackPerSec) ? Number(N2.nackPerSec) : 0, numCpus: A2(N2.numCpus) ? Number(N2.numCpus) : 0, loadAvgLast1min: A2(N2.loadAvgLast1min) ? Number(N2.loadAvgLast1min) : 0, loadAvgLast5min: A2(N2.loadAvgLast5min) ? Number(N2.loadAvgLast5min) : 0, loadAvgLast15min: A2(N2.loadAvgLast15min) ? Number(N2.loadAvgLast15min) : 0, cpuLoad: A2(N2.cpuLoad) ? Number(N2.cpuLoad) : 0, memoryLoad: A2(N2.memoryLoad) ? Number(N2.memoryLoad) : 0, sysPacketsOut: A2(N2.sysPacketsOut) ? Number(N2.sysPacketsOut) : 0, sysPacketsDropped: A2(N2.sysPacketsDropped) ? Number(N2.sysPacketsDropped) : 0, sysPacketsOutPerSec: A2(N2.sysPacketsOutPerSec) ? Number(N2.sysPacketsOutPerSec) : 0, sysPacketsDroppedPerSec: A2(N2.sysPacketsDroppedPerSec) ? Number(N2.sysPacketsDroppedPerSec) : 0, sysPacketsDroppedPctPerSec: A2(N2.sysPacketsDroppedPctPerSec) ? Number(N2.sysPacketsDroppedPctPerSec) : 0, retransmitBytesOut: A2(N2.retransmitBytesOut) ? Number(N2.retransmitBytesOut) : 0, retransmitPacketsOut: A2(N2.retransmitPacketsOut) ? Number(N2.retransmitPacketsOut) : 0, retransmitBytesOutPerSec: A2(N2.retransmitBytesOutPerSec) ? Number(N2.retransmitBytesOutPerSec) : 0, retransmitPacketsOutPerSec: A2(N2.retransmitPacketsOutPerSec) ? Number(N2.retransmitPacketsOutPerSec) : 0, participantJoin: A2(N2.participantJoin) ? Number(N2.participantJoin) : 0, participantJoinPerSec: A2(N2.participantJoinPerSec) ? Number(N2.participantJoinPerSec) : 0 };
  }, toJSON(N2) {
    const D2 = {};
    return N2.startedAt !== void 0 && (D2.startedAt = Math.round(N2.startedAt)), N2.updatedAt !== void 0 && (D2.updatedAt = Math.round(N2.updatedAt)), N2.numRooms !== void 0 && (D2.numRooms = Math.round(N2.numRooms)), N2.numClients !== void 0 && (D2.numClients = Math.round(N2.numClients)), N2.numTracksIn !== void 0 && (D2.numTracksIn = Math.round(N2.numTracksIn)), N2.numTracksOut !== void 0 && (D2.numTracksOut = Math.round(N2.numTracksOut)), N2.bytesIn !== void 0 && (D2.bytesIn = Math.round(N2.bytesIn)), N2.bytesOut !== void 0 && (D2.bytesOut = Math.round(N2.bytesOut)), N2.packetsIn !== void 0 && (D2.packetsIn = Math.round(N2.packetsIn)), N2.packetsOut !== void 0 && (D2.packetsOut = Math.round(N2.packetsOut)), N2.nackTotal !== void 0 && (D2.nackTotal = Math.round(N2.nackTotal)), N2.bytesInPerSec !== void 0 && (D2.bytesInPerSec = N2.bytesInPerSec), N2.bytesOutPerSec !== void 0 && (D2.bytesOutPerSec = N2.bytesOutPerSec), N2.packetsInPerSec !== void 0 && (D2.packetsInPerSec = N2.packetsInPerSec), N2.packetsOutPerSec !== void 0 && (D2.packetsOutPerSec = N2.packetsOutPerSec), N2.nackPerSec !== void 0 && (D2.nackPerSec = N2.nackPerSec), N2.numCpus !== void 0 && (D2.numCpus = Math.round(N2.numCpus)), N2.loadAvgLast1min !== void 0 && (D2.loadAvgLast1min = N2.loadAvgLast1min), N2.loadAvgLast5min !== void 0 && (D2.loadAvgLast5min = N2.loadAvgLast5min), N2.loadAvgLast15min !== void 0 && (D2.loadAvgLast15min = N2.loadAvgLast15min), N2.cpuLoad !== void 0 && (D2.cpuLoad = N2.cpuLoad), N2.memoryLoad !== void 0 && (D2.memoryLoad = N2.memoryLoad), N2.sysPacketsOut !== void 0 && (D2.sysPacketsOut = Math.round(N2.sysPacketsOut)), N2.sysPacketsDropped !== void 0 && (D2.sysPacketsDropped = Math.round(N2.sysPacketsDropped)), N2.sysPacketsOutPerSec !== void 0 && (D2.sysPacketsOutPerSec = N2.sysPacketsOutPerSec), N2.sysPacketsDroppedPerSec !== void 0 && (D2.sysPacketsDroppedPerSec = N2.sysPacketsDroppedPerSec), N2.sysPacketsDroppedPctPerSec !== void 0 && (D2.sysPacketsDroppedPctPerSec = N2.sysPacketsDroppedPctPerSec), N2.retransmitBytesOut !== void 0 && (D2.retransmitBytesOut = Math.round(N2.retransmitBytesOut)), N2.retransmitPacketsOut !== void 0 && (D2.retransmitPacketsOut = Math.round(N2.retransmitPacketsOut)), N2.retransmitBytesOutPerSec !== void 0 && (D2.retransmitBytesOutPerSec = N2.retransmitBytesOutPerSec), N2.retransmitPacketsOutPerSec !== void 0 && (D2.retransmitPacketsOutPerSec = N2.retransmitPacketsOutPerSec), N2.participantJoin !== void 0 && (D2.participantJoin = Math.round(N2.participantJoin)), N2.participantJoinPerSec !== void 0 && (D2.participantJoinPerSec = N2.participantJoinPerSec), D2;
  }, fromPartial(N2) {
    var D2, W2, ee2, ae2, ye2, he2, le2, we2, Be2, Ne2, Le2, $e2, Ue2, Ge2, He2, Ve2, be2, Ae2, qe2, xe2, Pe2, C2, x2, Q2, Se2, me2, Ie2, at, Ye2, je2, tt, Oe2, P2;
    const X2 = q2();
    return X2.startedAt = (D2 = N2.startedAt) !== null && D2 !== void 0 ? D2 : 0, X2.updatedAt = (W2 = N2.updatedAt) !== null && W2 !== void 0 ? W2 : 0, X2.numRooms = (ee2 = N2.numRooms) !== null && ee2 !== void 0 ? ee2 : 0, X2.numClients = (ae2 = N2.numClients) !== null && ae2 !== void 0 ? ae2 : 0, X2.numTracksIn = (ye2 = N2.numTracksIn) !== null && ye2 !== void 0 ? ye2 : 0, X2.numTracksOut = (he2 = N2.numTracksOut) !== null && he2 !== void 0 ? he2 : 0, X2.bytesIn = (le2 = N2.bytesIn) !== null && le2 !== void 0 ? le2 : 0, X2.bytesOut = (we2 = N2.bytesOut) !== null && we2 !== void 0 ? we2 : 0, X2.packetsIn = (Be2 = N2.packetsIn) !== null && Be2 !== void 0 ? Be2 : 0, X2.packetsOut = (Ne2 = N2.packetsOut) !== null && Ne2 !== void 0 ? Ne2 : 0, X2.nackTotal = (Le2 = N2.nackTotal) !== null && Le2 !== void 0 ? Le2 : 0, X2.bytesInPerSec = ($e2 = N2.bytesInPerSec) !== null && $e2 !== void 0 ? $e2 : 0, X2.bytesOutPerSec = (Ue2 = N2.bytesOutPerSec) !== null && Ue2 !== void 0 ? Ue2 : 0, X2.packetsInPerSec = (Ge2 = N2.packetsInPerSec) !== null && Ge2 !== void 0 ? Ge2 : 0, X2.packetsOutPerSec = (He2 = N2.packetsOutPerSec) !== null && He2 !== void 0 ? He2 : 0, X2.nackPerSec = (Ve2 = N2.nackPerSec) !== null && Ve2 !== void 0 ? Ve2 : 0, X2.numCpus = (be2 = N2.numCpus) !== null && be2 !== void 0 ? be2 : 0, X2.loadAvgLast1min = (Ae2 = N2.loadAvgLast1min) !== null && Ae2 !== void 0 ? Ae2 : 0, X2.loadAvgLast5min = (qe2 = N2.loadAvgLast5min) !== null && qe2 !== void 0 ? qe2 : 0, X2.loadAvgLast15min = (xe2 = N2.loadAvgLast15min) !== null && xe2 !== void 0 ? xe2 : 0, X2.cpuLoad = (Pe2 = N2.cpuLoad) !== null && Pe2 !== void 0 ? Pe2 : 0, X2.memoryLoad = (C2 = N2.memoryLoad) !== null && C2 !== void 0 ? C2 : 0, X2.sysPacketsOut = (x2 = N2.sysPacketsOut) !== null && x2 !== void 0 ? x2 : 0, X2.sysPacketsDropped = (Q2 = N2.sysPacketsDropped) !== null && Q2 !== void 0 ? Q2 : 0, X2.sysPacketsOutPerSec = (Se2 = N2.sysPacketsOutPerSec) !== null && Se2 !== void 0 ? Se2 : 0, X2.sysPacketsDroppedPerSec = (me2 = N2.sysPacketsDroppedPerSec) !== null && me2 !== void 0 ? me2 : 0, X2.sysPacketsDroppedPctPerSec = (Ie2 = N2.sysPacketsDroppedPctPerSec) !== null && Ie2 !== void 0 ? Ie2 : 0, X2.retransmitBytesOut = (at = N2.retransmitBytesOut) !== null && at !== void 0 ? at : 0, X2.retransmitPacketsOut = (Ye2 = N2.retransmitPacketsOut) !== null && Ye2 !== void 0 ? Ye2 : 0, X2.retransmitBytesOutPerSec = (je2 = N2.retransmitBytesOutPerSec) !== null && je2 !== void 0 ? je2 : 0, X2.retransmitPacketsOutPerSec = (tt = N2.retransmitPacketsOutPerSec) !== null && tt !== void 0 ? tt : 0, X2.participantJoin = (Oe2 = N2.participantJoin) !== null && Oe2 !== void 0 ? Oe2 : 0, X2.participantJoinPerSec = (P2 = N2.participantJoinPerSec) !== null && P2 !== void 0 ? P2 : 0, X2;
  } };
  function G2() {
    return { participantKey: "", senderTime: 0, connectionId: "", startSession: void 0, request: void 0, removeParticipant: void 0, muteTrack: void 0, updateParticipant: void 0, deleteRoom: void 0, updateSubscriptions: void 0, sendData: void 0, updateRoomMetadata: void 0, keepAlive: void 0 };
  }
  a92.RTCNodeMessage = { encode(N2, D2 = l2.default.Writer.create()) {
    return N2.participantKey !== void 0 && N2.participantKey !== "" && D2.uint32(10).string(N2.participantKey), N2.senderTime !== void 0 && N2.senderTime !== 0 && D2.uint32(88).int64(N2.senderTime), N2.connectionId !== void 0 && N2.connectionId !== "" && D2.uint32(106).string(N2.connectionId), N2.startSession !== void 0 && a92.StartSession.encode(N2.startSession, D2.uint32(18).fork()).ldelim(), N2.request !== void 0 && E2.SignalRequest.encode(N2.request, D2.uint32(26).fork()).ldelim(), N2.removeParticipant !== void 0 && g2.RoomParticipantIdentity.encode(N2.removeParticipant, D2.uint32(34).fork()).ldelim(), N2.muteTrack !== void 0 && g2.MuteRoomTrackRequest.encode(N2.muteTrack, D2.uint32(42).fork()).ldelim(), N2.updateParticipant !== void 0 && g2.UpdateParticipantRequest.encode(N2.updateParticipant, D2.uint32(50).fork()).ldelim(), N2.deleteRoom !== void 0 && g2.DeleteRoomRequest.encode(N2.deleteRoom, D2.uint32(58).fork()).ldelim(), N2.updateSubscriptions !== void 0 && g2.UpdateSubscriptionsRequest.encode(N2.updateSubscriptions, D2.uint32(66).fork()).ldelim(), N2.sendData !== void 0 && g2.SendDataRequest.encode(N2.sendData, D2.uint32(74).fork()).ldelim(), N2.updateRoomMetadata !== void 0 && g2.UpdateRoomMetadataRequest.encode(N2.updateRoomMetadata, D2.uint32(82).fork()).ldelim(), N2.keepAlive !== void 0 && a92.KeepAlive.encode(N2.keepAlive, D2.uint32(98).fork()).ldelim(), D2;
  }, decode(N2, D2) {
    const W2 = N2 instanceof l2.default.Reader ? N2 : new l2.default.Reader(N2);
    let ee2 = D2 === void 0 ? W2.len : W2.pos + D2;
    const ae2 = G2();
    for (; W2.pos < ee2; ) {
      const ye2 = W2.uint32();
      switch (ye2 >>> 3) {
        case 1:
          ae2.participantKey = W2.string();
          break;
        case 11:
          ae2.senderTime = de2(W2.int64());
          break;
        case 13:
          ae2.connectionId = W2.string();
          break;
        case 2:
          ae2.startSession = a92.StartSession.decode(W2, W2.uint32());
          break;
        case 3:
          ae2.request = E2.SignalRequest.decode(W2, W2.uint32());
          break;
        case 4:
          ae2.removeParticipant = g2.RoomParticipantIdentity.decode(W2, W2.uint32());
          break;
        case 5:
          ae2.muteTrack = g2.MuteRoomTrackRequest.decode(W2, W2.uint32());
          break;
        case 6:
          ae2.updateParticipant = g2.UpdateParticipantRequest.decode(W2, W2.uint32());
          break;
        case 7:
          ae2.deleteRoom = g2.DeleteRoomRequest.decode(W2, W2.uint32());
          break;
        case 8:
          ae2.updateSubscriptions = g2.UpdateSubscriptionsRequest.decode(W2, W2.uint32());
          break;
        case 9:
          ae2.sendData = g2.SendDataRequest.decode(W2, W2.uint32());
          break;
        case 10:
          ae2.updateRoomMetadata = g2.UpdateRoomMetadataRequest.decode(W2, W2.uint32());
          break;
        case 12:
          ae2.keepAlive = a92.KeepAlive.decode(W2, W2.uint32());
          break;
        default:
          W2.skipType(ye2 & 7);
          break;
      }
    }
    return ae2;
  }, fromJSON(N2) {
    return { participantKey: A2(N2.participantKey) ? String(N2.participantKey) : "", senderTime: A2(N2.senderTime) ? Number(N2.senderTime) : 0, connectionId: A2(N2.connectionId) ? String(N2.connectionId) : "", startSession: A2(N2.startSession) ? a92.StartSession.fromJSON(N2.startSession) : void 0, request: A2(N2.request) ? E2.SignalRequest.fromJSON(N2.request) : void 0, removeParticipant: A2(N2.removeParticipant) ? g2.RoomParticipantIdentity.fromJSON(N2.removeParticipant) : void 0, muteTrack: A2(N2.muteTrack) ? g2.MuteRoomTrackRequest.fromJSON(N2.muteTrack) : void 0, updateParticipant: A2(N2.updateParticipant) ? g2.UpdateParticipantRequest.fromJSON(N2.updateParticipant) : void 0, deleteRoom: A2(N2.deleteRoom) ? g2.DeleteRoomRequest.fromJSON(N2.deleteRoom) : void 0, updateSubscriptions: A2(N2.updateSubscriptions) ? g2.UpdateSubscriptionsRequest.fromJSON(N2.updateSubscriptions) : void 0, sendData: A2(N2.sendData) ? g2.SendDataRequest.fromJSON(N2.sendData) : void 0, updateRoomMetadata: A2(N2.updateRoomMetadata) ? g2.UpdateRoomMetadataRequest.fromJSON(N2.updateRoomMetadata) : void 0, keepAlive: A2(N2.keepAlive) ? a92.KeepAlive.fromJSON(N2.keepAlive) : void 0 };
  }, toJSON(N2) {
    const D2 = {};
    return N2.participantKey !== void 0 && (D2.participantKey = N2.participantKey), N2.senderTime !== void 0 && (D2.senderTime = Math.round(N2.senderTime)), N2.connectionId !== void 0 && (D2.connectionId = N2.connectionId), N2.startSession !== void 0 && (D2.startSession = N2.startSession ? a92.StartSession.toJSON(N2.startSession) : void 0), N2.request !== void 0 && (D2.request = N2.request ? E2.SignalRequest.toJSON(N2.request) : void 0), N2.removeParticipant !== void 0 && (D2.removeParticipant = N2.removeParticipant ? g2.RoomParticipantIdentity.toJSON(N2.removeParticipant) : void 0), N2.muteTrack !== void 0 && (D2.muteTrack = N2.muteTrack ? g2.MuteRoomTrackRequest.toJSON(N2.muteTrack) : void 0), N2.updateParticipant !== void 0 && (D2.updateParticipant = N2.updateParticipant ? g2.UpdateParticipantRequest.toJSON(N2.updateParticipant) : void 0), N2.deleteRoom !== void 0 && (D2.deleteRoom = N2.deleteRoom ? g2.DeleteRoomRequest.toJSON(N2.deleteRoom) : void 0), N2.updateSubscriptions !== void 0 && (D2.updateSubscriptions = N2.updateSubscriptions ? g2.UpdateSubscriptionsRequest.toJSON(N2.updateSubscriptions) : void 0), N2.sendData !== void 0 && (D2.sendData = N2.sendData ? g2.SendDataRequest.toJSON(N2.sendData) : void 0), N2.updateRoomMetadata !== void 0 && (D2.updateRoomMetadata = N2.updateRoomMetadata ? g2.UpdateRoomMetadataRequest.toJSON(N2.updateRoomMetadata) : void 0), N2.keepAlive !== void 0 && (D2.keepAlive = N2.keepAlive ? a92.KeepAlive.toJSON(N2.keepAlive) : void 0), D2;
  }, fromPartial(N2) {
    var D2, W2, ee2;
    const ae2 = G2();
    return ae2.participantKey = (D2 = N2.participantKey) !== null && D2 !== void 0 ? D2 : "", ae2.senderTime = (W2 = N2.senderTime) !== null && W2 !== void 0 ? W2 : 0, ae2.connectionId = (ee2 = N2.connectionId) !== null && ee2 !== void 0 ? ee2 : "", ae2.startSession = N2.startSession !== void 0 && N2.startSession !== null ? a92.StartSession.fromPartial(N2.startSession) : void 0, ae2.request = N2.request !== void 0 && N2.request !== null ? E2.SignalRequest.fromPartial(N2.request) : void 0, ae2.removeParticipant = N2.removeParticipant !== void 0 && N2.removeParticipant !== null ? g2.RoomParticipantIdentity.fromPartial(N2.removeParticipant) : void 0, ae2.muteTrack = N2.muteTrack !== void 0 && N2.muteTrack !== null ? g2.MuteRoomTrackRequest.fromPartial(N2.muteTrack) : void 0, ae2.updateParticipant = N2.updateParticipant !== void 0 && N2.updateParticipant !== null ? g2.UpdateParticipantRequest.fromPartial(N2.updateParticipant) : void 0, ae2.deleteRoom = N2.deleteRoom !== void 0 && N2.deleteRoom !== null ? g2.DeleteRoomRequest.fromPartial(N2.deleteRoom) : void 0, ae2.updateSubscriptions = N2.updateSubscriptions !== void 0 && N2.updateSubscriptions !== null ? g2.UpdateSubscriptionsRequest.fromPartial(N2.updateSubscriptions) : void 0, ae2.sendData = N2.sendData !== void 0 && N2.sendData !== null ? g2.SendDataRequest.fromPartial(N2.sendData) : void 0, ae2.updateRoomMetadata = N2.updateRoomMetadata !== void 0 && N2.updateRoomMetadata !== null ? g2.UpdateRoomMetadataRequest.fromPartial(N2.updateRoomMetadata) : void 0, ae2.keepAlive = N2.keepAlive !== void 0 && N2.keepAlive !== null ? a92.KeepAlive.fromPartial(N2.keepAlive) : void 0, ae2;
  } };
  function H2() {
    return { connectionId: "", response: void 0, endSession: void 0 };
  }
  a92.SignalNodeMessage = { encode(N2, D2 = l2.default.Writer.create()) {
    return N2.connectionId !== void 0 && N2.connectionId !== "" && D2.uint32(10).string(N2.connectionId), N2.response !== void 0 && E2.SignalResponse.encode(N2.response, D2.uint32(18).fork()).ldelim(), N2.endSession !== void 0 && a92.EndSession.encode(N2.endSession, D2.uint32(26).fork()).ldelim(), D2;
  }, decode(N2, D2) {
    const W2 = N2 instanceof l2.default.Reader ? N2 : new l2.default.Reader(N2);
    let ee2 = D2 === void 0 ? W2.len : W2.pos + D2;
    const ae2 = H2();
    for (; W2.pos < ee2; ) {
      const ye2 = W2.uint32();
      switch (ye2 >>> 3) {
        case 1:
          ae2.connectionId = W2.string();
          break;
        case 2:
          ae2.response = E2.SignalResponse.decode(W2, W2.uint32());
          break;
        case 3:
          ae2.endSession = a92.EndSession.decode(W2, W2.uint32());
          break;
        default:
          W2.skipType(ye2 & 7);
          break;
      }
    }
    return ae2;
  }, fromJSON(N2) {
    return { connectionId: A2(N2.connectionId) ? String(N2.connectionId) : "", response: A2(N2.response) ? E2.SignalResponse.fromJSON(N2.response) : void 0, endSession: A2(N2.endSession) ? a92.EndSession.fromJSON(N2.endSession) : void 0 };
  }, toJSON(N2) {
    const D2 = {};
    return N2.connectionId !== void 0 && (D2.connectionId = N2.connectionId), N2.response !== void 0 && (D2.response = N2.response ? E2.SignalResponse.toJSON(N2.response) : void 0), N2.endSession !== void 0 && (D2.endSession = N2.endSession ? a92.EndSession.toJSON(N2.endSession) : void 0), D2;
  }, fromPartial(N2) {
    var D2;
    const W2 = H2();
    return W2.connectionId = (D2 = N2.connectionId) !== null && D2 !== void 0 ? D2 : "", W2.response = N2.response !== void 0 && N2.response !== null ? E2.SignalResponse.fromPartial(N2.response) : void 0, W2.endSession = N2.endSession !== void 0 && N2.endSession !== null ? a92.EndSession.fromPartial(N2.endSession) : void 0, W2;
  } };
  function B2() {
    return { roomName: "", identity: "", connectionId: "", reconnect: false, autoSubscribe: false, hidden: false, client: void 0, recorder: false, name: "", grantsJson: "", adaptiveStream: false, participantId: "" };
  }
  a92.StartSession = { encode(N2, D2 = l2.default.Writer.create()) {
    return N2.roomName !== void 0 && N2.roomName !== "" && D2.uint32(10).string(N2.roomName), N2.identity !== void 0 && N2.identity !== "" && D2.uint32(18).string(N2.identity), N2.connectionId !== void 0 && N2.connectionId !== "" && D2.uint32(26).string(N2.connectionId), N2.reconnect === true && D2.uint32(32).bool(N2.reconnect), N2.autoSubscribe === true && D2.uint32(72).bool(N2.autoSubscribe), N2.hidden === true && D2.uint32(80).bool(N2.hidden), N2.client !== void 0 && S2.ClientInfo.encode(N2.client, D2.uint32(90).fork()).ldelim(), N2.recorder === true && D2.uint32(96).bool(N2.recorder), N2.name !== void 0 && N2.name !== "" && D2.uint32(106).string(N2.name), N2.grantsJson !== void 0 && N2.grantsJson !== "" && D2.uint32(114).string(N2.grantsJson), N2.adaptiveStream === true && D2.uint32(120).bool(N2.adaptiveStream), N2.participantId !== void 0 && N2.participantId !== "" && D2.uint32(130).string(N2.participantId), D2;
  }, decode(N2, D2) {
    const W2 = N2 instanceof l2.default.Reader ? N2 : new l2.default.Reader(N2);
    let ee2 = D2 === void 0 ? W2.len : W2.pos + D2;
    const ae2 = B2();
    for (; W2.pos < ee2; ) {
      const ye2 = W2.uint32();
      switch (ye2 >>> 3) {
        case 1:
          ae2.roomName = W2.string();
          break;
        case 2:
          ae2.identity = W2.string();
          break;
        case 3:
          ae2.connectionId = W2.string();
          break;
        case 4:
          ae2.reconnect = W2.bool();
          break;
        case 9:
          ae2.autoSubscribe = W2.bool();
          break;
        case 10:
          ae2.hidden = W2.bool();
          break;
        case 11:
          ae2.client = S2.ClientInfo.decode(W2, W2.uint32());
          break;
        case 12:
          ae2.recorder = W2.bool();
          break;
        case 13:
          ae2.name = W2.string();
          break;
        case 14:
          ae2.grantsJson = W2.string();
          break;
        case 15:
          ae2.adaptiveStream = W2.bool();
          break;
        case 16:
          ae2.participantId = W2.string();
          break;
        default:
          W2.skipType(ye2 & 7);
          break;
      }
    }
    return ae2;
  }, fromJSON(N2) {
    return { roomName: A2(N2.roomName) ? String(N2.roomName) : "", identity: A2(N2.identity) ? String(N2.identity) : "", connectionId: A2(N2.connectionId) ? String(N2.connectionId) : "", reconnect: A2(N2.reconnect) ? !!N2.reconnect : false, autoSubscribe: A2(N2.autoSubscribe) ? !!N2.autoSubscribe : false, hidden: A2(N2.hidden) ? !!N2.hidden : false, client: A2(N2.client) ? S2.ClientInfo.fromJSON(N2.client) : void 0, recorder: A2(N2.recorder) ? !!N2.recorder : false, name: A2(N2.name) ? String(N2.name) : "", grantsJson: A2(N2.grantsJson) ? String(N2.grantsJson) : "", adaptiveStream: A2(N2.adaptiveStream) ? !!N2.adaptiveStream : false, participantId: A2(N2.participantId) ? String(N2.participantId) : "" };
  }, toJSON(N2) {
    const D2 = {};
    return N2.roomName !== void 0 && (D2.roomName = N2.roomName), N2.identity !== void 0 && (D2.identity = N2.identity), N2.connectionId !== void 0 && (D2.connectionId = N2.connectionId), N2.reconnect !== void 0 && (D2.reconnect = N2.reconnect), N2.autoSubscribe !== void 0 && (D2.autoSubscribe = N2.autoSubscribe), N2.hidden !== void 0 && (D2.hidden = N2.hidden), N2.client !== void 0 && (D2.client = N2.client ? S2.ClientInfo.toJSON(N2.client) : void 0), N2.recorder !== void 0 && (D2.recorder = N2.recorder), N2.name !== void 0 && (D2.name = N2.name), N2.grantsJson !== void 0 && (D2.grantsJson = N2.grantsJson), N2.adaptiveStream !== void 0 && (D2.adaptiveStream = N2.adaptiveStream), N2.participantId !== void 0 && (D2.participantId = N2.participantId), D2;
  }, fromPartial(N2) {
    var D2, W2, ee2, ae2, ye2, he2, le2, we2, Be2, Ne2, Le2;
    const $e2 = B2();
    return $e2.roomName = (D2 = N2.roomName) !== null && D2 !== void 0 ? D2 : "", $e2.identity = (W2 = N2.identity) !== null && W2 !== void 0 ? W2 : "", $e2.connectionId = (ee2 = N2.connectionId) !== null && ee2 !== void 0 ? ee2 : "", $e2.reconnect = (ae2 = N2.reconnect) !== null && ae2 !== void 0 ? ae2 : false, $e2.autoSubscribe = (ye2 = N2.autoSubscribe) !== null && ye2 !== void 0 ? ye2 : false, $e2.hidden = (he2 = N2.hidden) !== null && he2 !== void 0 ? he2 : false, $e2.client = N2.client !== void 0 && N2.client !== null ? S2.ClientInfo.fromPartial(N2.client) : void 0, $e2.recorder = (le2 = N2.recorder) !== null && le2 !== void 0 ? le2 : false, $e2.name = (we2 = N2.name) !== null && we2 !== void 0 ? we2 : "", $e2.grantsJson = (Be2 = N2.grantsJson) !== null && Be2 !== void 0 ? Be2 : "", $e2.adaptiveStream = (Ne2 = N2.adaptiveStream) !== null && Ne2 !== void 0 ? Ne2 : false, $e2.participantId = (Le2 = N2.participantId) !== null && Le2 !== void 0 ? Le2 : "", $e2;
  } };
  function Y2() {
    return {};
  }
  a92.EndSession = { encode(N2, D2 = l2.default.Writer.create()) {
    return D2;
  }, decode(N2, D2) {
    const W2 = N2 instanceof l2.default.Reader ? N2 : new l2.default.Reader(N2);
    let ee2 = D2 === void 0 ? W2.len : W2.pos + D2;
    const ae2 = Y2();
    for (; W2.pos < ee2; ) {
      const ye2 = W2.uint32();
      switch (ye2 >>> 3) {
        default:
          W2.skipType(ye2 & 7);
          break;
      }
    }
    return ae2;
  }, fromJSON(N2) {
    return {};
  }, toJSON(N2) {
    return {};
  }, fromPartial(N2) {
    return Y2();
  } };
  function ne2() {
    return { participantId: "" };
  }
  a92.RemoveParticipant = { encode(N2, D2 = l2.default.Writer.create()) {
    return N2.participantId !== void 0 && N2.participantId !== "" && D2.uint32(10).string(N2.participantId), D2;
  }, decode(N2, D2) {
    const W2 = N2 instanceof l2.default.Reader ? N2 : new l2.default.Reader(N2);
    let ee2 = D2 === void 0 ? W2.len : W2.pos + D2;
    const ae2 = ne2();
    for (; W2.pos < ee2; ) {
      const ye2 = W2.uint32();
      switch (ye2 >>> 3) {
        case 1:
          ae2.participantId = W2.string();
          break;
        default:
          W2.skipType(ye2 & 7);
          break;
      }
    }
    return ae2;
  }, fromJSON(N2) {
    return { participantId: A2(N2.participantId) ? String(N2.participantId) : "" };
  }, toJSON(N2) {
    const D2 = {};
    return N2.participantId !== void 0 && (D2.participantId = N2.participantId), D2;
  }, fromPartial(N2) {
    var D2;
    const W2 = ne2();
    return W2.participantId = (D2 = N2.participantId) !== null && D2 !== void 0 ? D2 : "", W2;
  } };
  function Z2() {
    return {};
  }
  a92.KeepAlive = { encode(N2, D2 = l2.default.Writer.create()) {
    return D2;
  }, decode(N2, D2) {
    const W2 = N2 instanceof l2.default.Reader ? N2 : new l2.default.Reader(N2);
    let ee2 = D2 === void 0 ? W2.len : W2.pos + D2;
    const ae2 = Z2();
    for (; W2.pos < ee2; ) {
      const ye2 = W2.uint32();
      switch (ye2 >>> 3) {
        default:
          W2.skipType(ye2 & 7);
          break;
      }
    }
    return ae2;
  }, fromJSON(N2) {
    return {};
  }, toJSON(N2) {
    return {};
  }, fromPartial(N2) {
    return Z2();
  } };
  function re2() {
    return { trackEgress: void 0 };
  }
  a92.RoomInternal = { encode(N2, D2 = l2.default.Writer.create()) {
    return N2.trackEgress !== void 0 && v2.AutoTrackEgress.encode(N2.trackEgress, D2.uint32(10).fork()).ldelim(), D2;
  }, decode(N2, D2) {
    const W2 = N2 instanceof l2.default.Reader ? N2 : new l2.default.Reader(N2);
    let ee2 = D2 === void 0 ? W2.len : W2.pos + D2;
    const ae2 = re2();
    for (; W2.pos < ee2; ) {
      const ye2 = W2.uint32();
      switch (ye2 >>> 3) {
        case 1:
          ae2.trackEgress = v2.AutoTrackEgress.decode(W2, W2.uint32());
          break;
        default:
          W2.skipType(ye2 & 7);
          break;
      }
    }
    return ae2;
  }, fromJSON(N2) {
    return { trackEgress: A2(N2.trackEgress) ? v2.AutoTrackEgress.fromJSON(N2.trackEgress) : void 0 };
  }, toJSON(N2) {
    const D2 = {};
    return N2.trackEgress !== void 0 && (D2.trackEgress = N2.trackEgress ? v2.AutoTrackEgress.toJSON(N2.trackEgress) : void 0), D2;
  }, fromPartial(N2) {
    const D2 = re2();
    return D2.trackEgress = N2.trackEgress !== void 0 && N2.trackEgress !== null ? v2.AutoTrackEgress.fromPartial(N2.trackEgress) : void 0, D2;
  } };
  var oe2 = (() => {
    if (typeof oe2 < "u")
      return oe2;
    if (typeof self < "u")
      return self;
    if (typeof window < "u")
      return window;
    if (typeof commonjsGlobal$1 < "u")
      return commonjsGlobal$1;
    throw "Unable to locate global object";
  })();
  function de2(N2) {
    if (N2.gt(Number.MAX_SAFE_INTEGER))
      throw new oe2.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    return N2.toNumber();
  }
  l2.default.util.Long !== c.default && (l2.default.util.Long = c.default, l2.default.configure());
  function A2(N2) {
    return N2 != null;
  }
})(livekit_internal);
(function(a92) {
  var u2 = commonjsGlobal$1 && commonjsGlobal$1.__createBinding || (Object.create ? function(_, k, L2, M2) {
    M2 === void 0 && (M2 = L2), Object.defineProperty(_, M2, { enumerable: true, get: function() {
      return k[L2];
    } });
  } : function(_, k, L2, M2) {
    M2 === void 0 && (M2 = L2), _[M2] = k[L2];
  }), c = commonjsGlobal$1 && commonjsGlobal$1.__setModuleDefault || (Object.create ? function(_, k) {
    Object.defineProperty(_, "default", { enumerable: true, value: k });
  } : function(_, k) {
    _.default = k;
  }), l2 = commonjsGlobal$1 && commonjsGlobal$1.__exportStar || function(_, k) {
    for (var L2 in _)
      L2 !== "default" && !Object.prototype.hasOwnProperty.call(k, L2) && u2(k, _, L2);
  }, v2 = commonjsGlobal$1 && commonjsGlobal$1.__importStar || function(_) {
    if (_ && _.__esModule)
      return _;
    var k = {};
    if (_ != null)
      for (var L2 in _)
        L2 !== "default" && Object.prototype.hasOwnProperty.call(_, L2) && u2(k, _, L2);
    return c(k, _), k;
  };
  Object.defineProperty(a92, "__esModule", { value: true }), a92.LivekitInternal = a92.TrackType = a92.TrackInfo = a92.Room = a92.ParticipantPermission = a92.ParticipantInfo_State = a92.ParticipantInfo = a92.DataPacket_Kind = a92.IngressVideoOptions = a92.IngressState = a92.IngressInput = a92.IngressInfo = a92.IngressAudioOptions = a92.StreamProtocol = a92.StreamOutput = a92.SegmentedFileProtocol = a92.SegmentedFileOutput = a92.EncodingOptionsPreset = a92.EncodingOptions = a92.EncodedFileType = a92.EncodedFileOutput = a92.EgressInfo = a92.DirectFileOutput = void 0, l2(AccessToken$1, a92), l2(EgressClient$1, a92), l2(grants, a92), l2(IngressClient$1, a92);
  var S2 = livekit_egress;
  Object.defineProperty(a92, "DirectFileOutput", { enumerable: true, get: function() {
    return S2.DirectFileOutput;
  } }), Object.defineProperty(a92, "EgressInfo", { enumerable: true, get: function() {
    return S2.EgressInfo;
  } }), Object.defineProperty(a92, "EncodedFileOutput", { enumerable: true, get: function() {
    return S2.EncodedFileOutput;
  } }), Object.defineProperty(a92, "EncodedFileType", { enumerable: true, get: function() {
    return S2.EncodedFileType;
  } }), Object.defineProperty(a92, "EncodingOptions", { enumerable: true, get: function() {
    return S2.EncodingOptions;
  } }), Object.defineProperty(a92, "EncodingOptionsPreset", { enumerable: true, get: function() {
    return S2.EncodingOptionsPreset;
  } }), Object.defineProperty(a92, "SegmentedFileOutput", { enumerable: true, get: function() {
    return S2.SegmentedFileOutput;
  } }), Object.defineProperty(a92, "SegmentedFileProtocol", { enumerable: true, get: function() {
    return S2.SegmentedFileProtocol;
  } }), Object.defineProperty(a92, "StreamOutput", { enumerable: true, get: function() {
    return S2.StreamOutput;
  } }), Object.defineProperty(a92, "StreamProtocol", { enumerable: true, get: function() {
    return S2.StreamProtocol;
  } });
  var g2 = livekit_ingress;
  Object.defineProperty(a92, "IngressAudioOptions", { enumerable: true, get: function() {
    return g2.IngressAudioOptions;
  } }), Object.defineProperty(a92, "IngressInfo", { enumerable: true, get: function() {
    return g2.IngressInfo;
  } }), Object.defineProperty(a92, "IngressInput", { enumerable: true, get: function() {
    return g2.IngressInput;
  } }), Object.defineProperty(a92, "IngressState", { enumerable: true, get: function() {
    return g2.IngressState;
  } }), Object.defineProperty(a92, "IngressVideoOptions", { enumerable: true, get: function() {
    return g2.IngressVideoOptions;
  } });
  var E2 = livekit_models;
  Object.defineProperty(a92, "DataPacket_Kind", { enumerable: true, get: function() {
    return E2.DataPacket_Kind;
  } }), Object.defineProperty(a92, "ParticipantInfo", { enumerable: true, get: function() {
    return E2.ParticipantInfo;
  } }), Object.defineProperty(a92, "ParticipantInfo_State", { enumerable: true, get: function() {
    return E2.ParticipantInfo_State;
  } }), Object.defineProperty(a92, "ParticipantPermission", { enumerable: true, get: function() {
    return E2.ParticipantPermission;
  } }), Object.defineProperty(a92, "Room", { enumerable: true, get: function() {
    return E2.Room;
  } }), Object.defineProperty(a92, "TrackInfo", { enumerable: true, get: function() {
    return E2.TrackInfo;
  } }), Object.defineProperty(a92, "TrackType", { enumerable: true, get: function() {
    return E2.TrackType;
  } }), l2(RoomServiceClient$1, a92), l2(WebhookReceiver$1, a92), a92.LivekitInternal = v2(livekit_internal);
})(dist);
class InvalidTokenError extends Error {
}
InvalidTokenError.prototype.name = "InvalidTokenError";
function b64DecodeUnicode(a92) {
  return decodeURIComponent(atob(a92).replace(/(.)/g, (u2, c) => {
    let l2 = c.charCodeAt(0).toString(16).toUpperCase();
    return l2.length < 2 && (l2 = "0" + l2), "%" + l2;
  }));
}
function base64UrlDecode(a92) {
  let u2 = a92.replace(/-/g, "+").replace(/_/g, "/");
  switch (u2.length % 4) {
    case 0:
      break;
    case 2:
      u2 += "==";
      break;
    case 3:
      u2 += "=";
      break;
    default:
      throw new Error("base64 string is not of the correct length");
  }
  try {
    return b64DecodeUnicode(u2);
  } catch {
    return atob(u2);
  }
}
function jwtDecode(a92, u2) {
  if (typeof a92 != "string")
    throw new InvalidTokenError("Invalid token specified: must be a string");
  u2 || (u2 = {});
  const c = u2.header === true ? 0 : 1, l2 = a92.split(".")[c];
  if (typeof l2 != "string")
    throw new InvalidTokenError(`Invalid token specified: missing part #${c + 1}`);
  let v2;
  try {
    v2 = base64UrlDecode(l2);
  } catch (S2) {
    throw new InvalidTokenError(`Invalid token specified: invalid base64 for part #${c + 1} (${S2.message})`);
  }
  try {
    return JSON.parse(v2);
  } catch (S2) {
    throw new InvalidTokenError(`Invalid token specified: invalid json for part #${c + 1} (${S2.message})`);
  }
}
function _mergeNamespaces(a92, u2) {
  return u2.forEach(function(c) {
    c && typeof c != "string" && !Array.isArray(c) && Object.keys(c).forEach(function(l2) {
      if (l2 !== "default" && !(l2 in a92)) {
        var v2 = Object.getOwnPropertyDescriptor(c, l2);
        Object.defineProperty(a92, l2, v2.get ? v2 : { enumerable: true, get: function() {
          return c[l2];
        } });
      }
    });
  }), Object.freeze(a92);
}
var commonjsGlobal = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
function getDefaultExportFromCjs(a92) {
  return a92 && a92.__esModule && Object.prototype.hasOwnProperty.call(a92, "default") ? a92.default : a92;
}
var loglevel = { exports: {} };
(function(a92) {
  (function(u2, c) {
    a92.exports ? a92.exports = c() : u2.log = c();
  })(commonjsGlobal, function() {
    var u2 = function() {
    }, c = "undefined", l2 = typeof window !== c && typeof window.navigator !== c && /Trident\/|MSIE /.test(window.navigator.userAgent), v2 = ["trace", "debug", "info", "warn", "error"];
    function S2(q2, G2) {
      var H2 = q2[G2];
      if (typeof H2.bind == "function")
        return H2.bind(q2);
      try {
        return Function.prototype.bind.call(H2, q2);
      } catch {
        return function() {
          return Function.prototype.apply.apply(H2, [q2, arguments]);
        };
      }
    }
    function g2() {
      console.log && (console.log.apply ? console.log.apply(console, arguments) : Function.prototype.apply.apply(console.log, [console, arguments])), console.trace && console.trace();
    }
    function E2(q2) {
      return q2 === "debug" && (q2 = "log"), typeof console === c ? false : q2 === "trace" && l2 ? g2 : console[q2] !== void 0 ? S2(console, q2) : console.log !== void 0 ? S2(console, "log") : u2;
    }
    function _(q2, G2) {
      for (var H2 = 0; H2 < v2.length; H2++) {
        var B2 = v2[H2];
        this[B2] = H2 < q2 ? u2 : this.methodFactory(B2, q2, G2);
      }
      this.log = this.debug;
    }
    function k(q2, G2, H2) {
      return function() {
        typeof console !== c && (_.call(this, G2, H2), this[q2].apply(this, arguments));
      };
    }
    function L2(q2, G2, H2) {
      return E2(q2) || k.apply(this, arguments);
    }
    function M2(q2, G2, H2) {
      var B2 = this, Y2;
      G2 = G2 ?? "WARN";
      var ne2 = "loglevel";
      typeof q2 == "string" ? ne2 += ":" + q2 : typeof q2 == "symbol" && (ne2 = void 0);
      function Z2(A2) {
        var N2 = (v2[A2] || "silent").toUpperCase();
        if (!(typeof window === c || !ne2)) {
          try {
            window.localStorage[ne2] = N2;
            return;
          } catch {
          }
          try {
            window.document.cookie = encodeURIComponent(ne2) + "=" + N2 + ";";
          } catch {
          }
        }
      }
      function re2() {
        var A2;
        if (!(typeof window === c || !ne2)) {
          try {
            A2 = window.localStorage[ne2];
          } catch {
          }
          if (typeof A2 === c)
            try {
              var N2 = window.document.cookie, D2 = N2.indexOf(encodeURIComponent(ne2) + "=");
              D2 !== -1 && (A2 = /^([^;]+)/.exec(N2.slice(D2))[1]);
            } catch {
            }
          return B2.levels[A2] === void 0 && (A2 = void 0), A2;
        }
      }
      function oe2() {
        if (!(typeof window === c || !ne2)) {
          try {
            window.localStorage.removeItem(ne2);
            return;
          } catch {
          }
          try {
            window.document.cookie = encodeURIComponent(ne2) + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC";
          } catch {
          }
        }
      }
      B2.name = q2, B2.levels = { TRACE: 0, DEBUG: 1, INFO: 2, WARN: 3, ERROR: 4, SILENT: 5 }, B2.methodFactory = H2 || L2, B2.getLevel = function() {
        return Y2;
      }, B2.setLevel = function(A2, N2) {
        if (typeof A2 == "string" && B2.levels[A2.toUpperCase()] !== void 0 && (A2 = B2.levels[A2.toUpperCase()]), typeof A2 == "number" && A2 >= 0 && A2 <= B2.levels.SILENT) {
          if (Y2 = A2, N2 !== false && Z2(A2), _.call(B2, A2, q2), typeof console === c && A2 < B2.levels.SILENT)
            return "No console available for logging";
        } else
          throw "log.setLevel() called with invalid level: " + A2;
      }, B2.setDefaultLevel = function(A2) {
        G2 = A2, re2() || B2.setLevel(A2, false);
      }, B2.resetLevel = function() {
        B2.setLevel(G2, false), oe2();
      }, B2.enableAll = function(A2) {
        B2.setLevel(B2.levels.TRACE, A2);
      }, B2.disableAll = function(A2) {
        B2.setLevel(B2.levels.SILENT, A2);
      };
      var de2 = re2();
      de2 == null && (de2 = G2), B2.setLevel(de2, false);
    }
    var $ = new M2(), J2 = {};
    $.getLogger = function(G2) {
      if (typeof G2 != "symbol" && typeof G2 != "string" || G2 === "")
        throw new TypeError("You must supply a name when creating a logger.");
      var H2 = J2[G2];
      return H2 || (H2 = J2[G2] = new M2(G2, $.getLevel(), $.methodFactory)), H2;
    };
    var V2 = typeof window !== c ? window.log : void 0;
    return $.noConflict = function() {
      return typeof window !== c && window.log === $ && (window.log = V2), $;
    }, $.getLoggers = function() {
      return J2;
    }, $.default = $, $;
  });
})(loglevel);
var loglevelExports = loglevel.exports, LogLevel;
(function(a92) {
  a92[a92.trace = 0] = "trace", a92[a92.debug = 1] = "debug", a92[a92.info = 2] = "info", a92[a92.warn = 3] = "warn", a92[a92.error = 4] = "error", a92[a92.silent = 5] = "silent";
})(LogLevel || (LogLevel = {}));
var LoggerNames;
(function(a92) {
  a92.Default = "livekit", a92.Room = "livekit-room", a92.Participant = "livekit-participant", a92.Track = "livekit-track", a92.Publication = "livekit-track-publication", a92.Engine = "livekit-engine", a92.Signal = "livekit-signal", a92.PCManager = "livekit-pc-manager", a92.PCTransport = "livekit-pc-transport", a92.E2EE = "lk-e2ee";
})(LoggerNames || (LoggerNames = {}));
let livekitLogger = loglevelExports.getLogger("livekit");
livekitLogger.setDefaultLevel(LogLevel.info);
function getLogger(a92) {
  const u2 = loglevelExports.getLogger(a92);
  return u2.setDefaultLevel(livekitLogger.getLevel()), u2;
}
function setLogLevel(a92, u2) {
  u2 && loglevelExports.getLogger(u2).setLevel(a92);
  for (const c of Object.entries(loglevelExports.getLoggers()).filter((l2) => {
    let [v2] = l2;
    return v2.startsWith("livekit");
  }).map((l2) => {
    let [, v2] = l2;
    return v2;
  }))
    c.setLevel(a92);
}
loglevelExports.getLogger("lk-e2ee");
function assert(a92, u2) {
  if (!a92)
    throw new Error(u2);
}
const FLOAT32_MAX = 34028234663852886e22, FLOAT32_MIN = -34028234663852886e22, UINT32_MAX = 4294967295, INT32_MAX = 2147483647, INT32_MIN = -2147483648;
function assertInt32(a92) {
  if (typeof a92 != "number")
    throw new Error("invalid int 32: " + typeof a92);
  if (!Number.isInteger(a92) || a92 > INT32_MAX || a92 < INT32_MIN)
    throw new Error("invalid int 32: " + a92);
}
function assertUInt32(a92) {
  if (typeof a92 != "number")
    throw new Error("invalid uint 32: " + typeof a92);
  if (!Number.isInteger(a92) || a92 > UINT32_MAX || a92 < 0)
    throw new Error("invalid uint 32: " + a92);
}
function assertFloat32(a92) {
  if (typeof a92 != "number")
    throw new Error("invalid float 32: " + typeof a92);
  if (Number.isFinite(a92) && (a92 > FLOAT32_MAX || a92 < FLOAT32_MIN))
    throw new Error("invalid float 32: " + a92);
}
const enumTypeSymbol = Symbol("@bufbuild/protobuf/enum-type");
function getEnumType(a92) {
  const u2 = a92[enumTypeSymbol];
  return assert(u2, "missing enum type on enum object"), u2;
}
function setEnumType(a92, u2, c, l2) {
  a92[enumTypeSymbol] = makeEnumType(u2, c.map((v2) => ({ no: v2.no, name: v2.name, localName: a92[v2.no] })));
}
function makeEnumType(a92, u2, c) {
  const l2 = /* @__PURE__ */ Object.create(null), v2 = /* @__PURE__ */ Object.create(null), S2 = [];
  for (const g2 of u2) {
    const E2 = normalizeEnumValue(g2);
    S2.push(E2), l2[g2.name] = E2, v2[g2.no] = E2;
  }
  return {
    typeName: a92,
    values: S2,
    // We do not surface options at this time
    // options: opt?.options ?? Object.create(null),
    findName(g2) {
      return l2[g2];
    },
    findNumber(g2) {
      return v2[g2];
    }
  };
}
function makeEnum(a92, u2, c) {
  const l2 = {};
  for (const v2 of u2) {
    const S2 = normalizeEnumValue(v2);
    l2[S2.localName] = S2.no, l2[S2.no] = S2.localName;
  }
  return setEnumType(l2, a92, u2), l2;
}
function normalizeEnumValue(a92) {
  return "localName" in a92 ? a92 : Object.assign(Object.assign({}, a92), { localName: a92.name });
}
class Message {
  /**
  * Compare with a message of the same type.
  */
  equals(u2) {
    return this.getType().runtime.util.equals(this.getType(), this, u2);
  }
  /**
  * Create a deep copy.
  */
  clone() {
    return this.getType().runtime.util.clone(this);
  }
  /**
  * Parse from binary data, merging fields.
  *
  * Repeated fields are appended. Map entries are added, overwriting
  * existing keys.
  *
  * If a message field is already present, it will be merged with the
  * new data.
  */
  fromBinary(u2, c) {
    const l2 = this.getType(), v2 = l2.runtime.bin, S2 = v2.makeReadOptions(c);
    return v2.readMessage(this, S2.readerFactory(u2), u2.byteLength, S2), this;
  }
  /**
  * Parse a message from a JSON value.
  */
  fromJson(u2, c) {
    const l2 = this.getType(), v2 = l2.runtime.json, S2 = v2.makeReadOptions(c);
    return v2.readMessage(l2, u2, S2, this), this;
  }
  /**
  * Parse a message from a JSON string.
  */
  fromJsonString(u2, c) {
    let l2;
    try {
      l2 = JSON.parse(u2);
    } catch (v2) {
      throw new Error("cannot decode ".concat(this.getType().typeName, " from JSON: ").concat(v2 instanceof Error ? v2.message : String(v2)));
    }
    return this.fromJson(l2, c);
  }
  /**
  * Serialize the message to binary data.
  */
  toBinary(u2) {
    const c = this.getType(), l2 = c.runtime.bin, v2 = l2.makeWriteOptions(u2), S2 = v2.writerFactory();
    return l2.writeMessage(this, S2, v2), S2.finish();
  }
  /**
  * Serialize the message to a JSON value, a JavaScript value that can be
  * passed to JSON.stringify().
  */
  toJson(u2) {
    const c = this.getType(), l2 = c.runtime.json, v2 = l2.makeWriteOptions(u2);
    return l2.writeMessage(this, v2);
  }
  /**
  * Serialize the message to a JSON string.
  */
  toJsonString(u2) {
    var c;
    const l2 = this.toJson(u2);
    return JSON.stringify(l2, null, (c = u2 == null ? void 0 : u2.prettySpaces) !== null && c !== void 0 ? c : 0);
  }
  /**
  * Override for serialization behavior. This will be invoked when calling
  * JSON.stringify on this message (i.e. JSON.stringify(msg)).
  *
  * Note that this will not serialize google.protobuf.Any with a packed
  * message because the protobuf JSON format specifies that it needs to be
  * unpacked, and this is only possible with a type registry to look up the
  * message type.  As a result, attempting to serialize a message with this
  * type will throw an Error.
  *
  * This method is protected because you should not need to invoke it
  * directly -- instead use JSON.stringify or toJsonString for
  * stringified JSON.  Alternatively, if actual JSON is desired, you should
  * use toJson.
  */
  toJSON() {
    return this.toJson({ emitDefaultValues: true });
  }
  /**
  * Retrieve the MessageType of this message - a singleton that represents
  * the protobuf message declaration and provides metadata for reflection-
  * based operations.
  */
  getType() {
    return Object.getPrototypeOf(this).constructor;
  }
}
function makeMessageType(a92, u2, c, l2) {
  var v2;
  const S2 = (v2 = l2 == null ? void 0 : l2.localName) !== null && v2 !== void 0 ? v2 : u2.substring(u2.lastIndexOf(".") + 1), g2 = { [S2]: function(E2) {
    a92.util.initFields(this), a92.util.initPartial(E2, this);
  } }[S2];
  return Object.setPrototypeOf(g2.prototype, new Message()), Object.assign(g2, { runtime: a92, typeName: u2, fields: a92.util.newFieldList(c), fromBinary(E2, _) {
    return new g2().fromBinary(E2, _);
  }, fromJson(E2, _) {
    return new g2().fromJson(E2, _);
  }, fromJsonString(E2, _) {
    return new g2().fromJsonString(E2, _);
  }, equals(E2, _) {
    return a92.util.equals(g2, E2, _);
  } }), g2;
}
function makeProtoRuntime(a92, u2, c, l2) {
  return { syntax: a92, json: u2, bin: c, util: l2, makeMessageType(v2, S2, g2) {
    return makeMessageType(this, v2, S2, g2);
  }, makeEnum, makeEnumType, getEnumType };
}
var ScalarType;
(function(a92) {
  a92[a92.DOUBLE = 1] = "DOUBLE", a92[a92.FLOAT = 2] = "FLOAT", a92[a92.INT64 = 3] = "INT64", a92[a92.UINT64 = 4] = "UINT64", a92[a92.INT32 = 5] = "INT32", a92[a92.FIXED64 = 6] = "FIXED64", a92[a92.FIXED32 = 7] = "FIXED32", a92[a92.BOOL = 8] = "BOOL", a92[a92.STRING = 9] = "STRING", a92[a92.BYTES = 12] = "BYTES", a92[a92.UINT32 = 13] = "UINT32", a92[a92.SFIXED32 = 15] = "SFIXED32", a92[a92.SFIXED64 = 16] = "SFIXED64", a92[a92.SINT32 = 17] = "SINT32", a92[a92.SINT64 = 18] = "SINT64";
})(ScalarType || (ScalarType = {}));
var LongType;
(function(a92) {
  a92[a92.BIGINT = 0] = "BIGINT", a92[a92.STRING = 1] = "STRING";
})(LongType || (LongType = {}));
function varint64read() {
  let a92 = 0, u2 = 0;
  for (let l2 = 0; l2 < 28; l2 += 7) {
    let v2 = this.buf[this.pos++];
    if (a92 |= (v2 & 127) << l2, !(v2 & 128))
      return this.assertBounds(), [a92, u2];
  }
  let c = this.buf[this.pos++];
  if (a92 |= (c & 15) << 28, u2 = (c & 112) >> 4, !(c & 128))
    return this.assertBounds(), [a92, u2];
  for (let l2 = 3; l2 <= 31; l2 += 7) {
    let v2 = this.buf[this.pos++];
    if (u2 |= (v2 & 127) << l2, !(v2 & 128))
      return this.assertBounds(), [a92, u2];
  }
  throw new Error("invalid varint");
}
function varint64write(a92, u2, c) {
  for (let S2 = 0; S2 < 28; S2 = S2 + 7) {
    const g2 = a92 >>> S2, E2 = !(!(g2 >>> 7) && u2 == 0), _ = (E2 ? g2 | 128 : g2) & 255;
    if (c.push(_), !E2)
      return;
  }
  const l2 = a92 >>> 28 & 15 | (u2 & 7) << 4, v2 = !!(u2 >> 3);
  if (c.push((v2 ? l2 | 128 : l2) & 255), !!v2) {
    for (let S2 = 3; S2 < 31; S2 = S2 + 7) {
      const g2 = u2 >>> S2, E2 = !!(g2 >>> 7), _ = (E2 ? g2 | 128 : g2) & 255;
      if (c.push(_), !E2)
        return;
    }
    c.push(u2 >>> 31 & 1);
  }
}
const TWO_PWR_32_DBL = 4294967296;
function int64FromString(a92) {
  const u2 = a92[0] === "-";
  u2 && (a92 = a92.slice(1));
  const c = 1e6;
  let l2 = 0, v2 = 0;
  function S2(g2, E2) {
    const _ = Number(a92.slice(g2, E2));
    v2 *= c, l2 = l2 * c + _, l2 >= TWO_PWR_32_DBL && (v2 = v2 + (l2 / TWO_PWR_32_DBL | 0), l2 = l2 % TWO_PWR_32_DBL);
  }
  return S2(-24, -18), S2(-18, -12), S2(-12, -6), S2(-6), u2 ? negate(l2, v2) : newBits(l2, v2);
}
function int64ToString(a92, u2) {
  let c = newBits(a92, u2);
  const l2 = c.hi & 2147483648;
  l2 && (c = negate(c.lo, c.hi));
  const v2 = uInt64ToString(c.lo, c.hi);
  return l2 ? "-" + v2 : v2;
}
function uInt64ToString(a92, u2) {
  if ({ lo: a92, hi: u2 } = toUnsigned(a92, u2), u2 <= 2097151)
    return String(TWO_PWR_32_DBL * u2 + a92);
  const c = a92 & 16777215, l2 = (a92 >>> 24 | u2 << 8) & 16777215, v2 = u2 >> 16 & 65535;
  let S2 = c + l2 * 6777216 + v2 * 6710656, g2 = l2 + v2 * 8147497, E2 = v2 * 2;
  const _ = 1e7;
  return S2 >= _ && (g2 += Math.floor(S2 / _), S2 %= _), g2 >= _ && (E2 += Math.floor(g2 / _), g2 %= _), E2.toString() + decimalFrom1e7WithLeadingZeros(g2) + decimalFrom1e7WithLeadingZeros(S2);
}
function toUnsigned(a92, u2) {
  return { lo: a92 >>> 0, hi: u2 >>> 0 };
}
function newBits(a92, u2) {
  return { lo: a92 | 0, hi: u2 | 0 };
}
function negate(a92, u2) {
  return u2 = ~u2, a92 ? a92 = ~a92 + 1 : u2 += 1, newBits(a92, u2);
}
const decimalFrom1e7WithLeadingZeros = (a92) => {
  const u2 = String(a92);
  return "0000000".slice(u2.length) + u2;
};
function varint32write(a92, u2) {
  if (a92 >= 0) {
    for (; a92 > 127; )
      u2.push(a92 & 127 | 128), a92 = a92 >>> 7;
    u2.push(a92);
  } else {
    for (let c = 0; c < 9; c++)
      u2.push(a92 & 127 | 128), a92 = a92 >> 7;
    u2.push(1);
  }
}
function varint32read() {
  let a92 = this.buf[this.pos++], u2 = a92 & 127;
  if (!(a92 & 128))
    return this.assertBounds(), u2;
  if (a92 = this.buf[this.pos++], u2 |= (a92 & 127) << 7, !(a92 & 128))
    return this.assertBounds(), u2;
  if (a92 = this.buf[this.pos++], u2 |= (a92 & 127) << 14, !(a92 & 128))
    return this.assertBounds(), u2;
  if (a92 = this.buf[this.pos++], u2 |= (a92 & 127) << 21, !(a92 & 128))
    return this.assertBounds(), u2;
  a92 = this.buf[this.pos++], u2 |= (a92 & 15) << 28;
  for (let c = 5; a92 & 128 && c < 10; c++)
    a92 = this.buf[this.pos++];
  if (a92 & 128)
    throw new Error("invalid varint");
  return this.assertBounds(), u2 >>> 0;
}
function makeInt64Support() {
  const a92 = new DataView(new ArrayBuffer(8));
  if (typeof BigInt == "function" && typeof a92.getBigInt64 == "function" && typeof a92.getBigUint64 == "function" && typeof a92.setBigInt64 == "function" && typeof a92.setBigUint64 == "function" && (typeof process != "object" || typeof define_process_env_default != "object" || define_process_env_default.BUF_BIGINT_DISABLE !== "1")) {
    const v2 = BigInt("-9223372036854775808"), S2 = BigInt("9223372036854775807"), g2 = BigInt("0"), E2 = BigInt("18446744073709551615");
    return { zero: BigInt(0), supported: true, parse(_) {
      const k = typeof _ == "bigint" ? _ : BigInt(_);
      if (k > S2 || k < v2)
        throw new Error("int64 invalid: ".concat(_));
      return k;
    }, uParse(_) {
      const k = typeof _ == "bigint" ? _ : BigInt(_);
      if (k > E2 || k < g2)
        throw new Error("uint64 invalid: ".concat(_));
      return k;
    }, enc(_) {
      return a92.setBigInt64(0, this.parse(_), true), { lo: a92.getInt32(0, true), hi: a92.getInt32(4, true) };
    }, uEnc(_) {
      return a92.setBigInt64(0, this.uParse(_), true), { lo: a92.getInt32(0, true), hi: a92.getInt32(4, true) };
    }, dec(_, k) {
      return a92.setInt32(0, _, true), a92.setInt32(4, k, true), a92.getBigInt64(0, true);
    }, uDec(_, k) {
      return a92.setInt32(0, _, true), a92.setInt32(4, k, true), a92.getBigUint64(0, true);
    } };
  }
  const c = (v2) => assert(/^-?[0-9]+$/.test(v2), "int64 invalid: ".concat(v2)), l2 = (v2) => assert(/^[0-9]+$/.test(v2), "uint64 invalid: ".concat(v2));
  return { zero: "0", supported: false, parse(v2) {
    return typeof v2 != "string" && (v2 = v2.toString()), c(v2), v2;
  }, uParse(v2) {
    return typeof v2 != "string" && (v2 = v2.toString()), l2(v2), v2;
  }, enc(v2) {
    return typeof v2 != "string" && (v2 = v2.toString()), c(v2), int64FromString(v2);
  }, uEnc(v2) {
    return typeof v2 != "string" && (v2 = v2.toString()), l2(v2), int64FromString(v2);
  }, dec(v2, S2) {
    return int64ToString(v2, S2);
  }, uDec(v2, S2) {
    return uInt64ToString(v2, S2);
  } };
}
const protoInt64 = makeInt64Support();
var WireType;
(function(a92) {
  a92[a92.Varint = 0] = "Varint", a92[a92.Bit64 = 1] = "Bit64", a92[a92.LengthDelimited = 2] = "LengthDelimited", a92[a92.StartGroup = 3] = "StartGroup", a92[a92.EndGroup = 4] = "EndGroup", a92[a92.Bit32 = 5] = "Bit32";
})(WireType || (WireType = {}));
class BinaryWriter {
  constructor(u2) {
    this.stack = [], this.textEncoder = u2 ?? new TextEncoder(), this.chunks = [], this.buf = [];
  }
  /**
  * Return all bytes written and reset this writer.
  */
  finish() {
    this.chunks.push(new Uint8Array(this.buf));
    let u2 = 0;
    for (let v2 = 0; v2 < this.chunks.length; v2++)
      u2 += this.chunks[v2].length;
    let c = new Uint8Array(u2), l2 = 0;
    for (let v2 = 0; v2 < this.chunks.length; v2++)
      c.set(this.chunks[v2], l2), l2 += this.chunks[v2].length;
    return this.chunks = [], c;
  }
  /**
  * Start a new fork for length-delimited data like a message
  * or a packed repeated field.
  *
  * Must be joined later with `join()`.
  */
  fork() {
    return this.stack.push({ chunks: this.chunks, buf: this.buf }), this.chunks = [], this.buf = [], this;
  }
  /**
  * Join the last fork. Write its length and bytes, then
  * return to the previous state.
  */
  join() {
    let u2 = this.finish(), c = this.stack.pop();
    if (!c)
      throw new Error("invalid state, fork stack empty");
    return this.chunks = c.chunks, this.buf = c.buf, this.uint32(u2.byteLength), this.raw(u2);
  }
  /**
  * Writes a tag (field number and wire type).
  *
  * Equivalent to `uint32( (fieldNo << 3 | type) >>> 0 )`.
  *
  * Generated code should compute the tag ahead of time and call `uint32()`.
  */
  tag(u2, c) {
    return this.uint32((u2 << 3 | c) >>> 0);
  }
  /**
  * Write a chunk of raw bytes.
  */
  raw(u2) {
    return this.buf.length && (this.chunks.push(new Uint8Array(this.buf)), this.buf = []), this.chunks.push(u2), this;
  }
  /**
  * Write a `uint32` value, an unsigned 32 bit varint.
  */
  uint32(u2) {
    for (assertUInt32(u2); u2 > 127; )
      this.buf.push(u2 & 127 | 128), u2 = u2 >>> 7;
    return this.buf.push(u2), this;
  }
  /**
  * Write a `int32` value, a signed 32 bit varint.
  */
  int32(u2) {
    return assertInt32(u2), varint32write(u2, this.buf), this;
  }
  /**
  * Write a `bool` value, a variant.
  */
  bool(u2) {
    return this.buf.push(u2 ? 1 : 0), this;
  }
  /**
  * Write a `bytes` value, length-delimited arbitrary data.
  */
  bytes(u2) {
    return this.uint32(u2.byteLength), this.raw(u2);
  }
  /**
  * Write a `string` value, length-delimited data converted to UTF-8 text.
  */
  string(u2) {
    let c = this.textEncoder.encode(u2);
    return this.uint32(c.byteLength), this.raw(c);
  }
  /**
  * Write a `float` value, 32-bit floating point number.
  */
  float(u2) {
    assertFloat32(u2);
    let c = new Uint8Array(4);
    return new DataView(c.buffer).setFloat32(0, u2, true), this.raw(c);
  }
  /**
  * Write a `double` value, a 64-bit floating point number.
  */
  double(u2) {
    let c = new Uint8Array(8);
    return new DataView(c.buffer).setFloat64(0, u2, true), this.raw(c);
  }
  /**
  * Write a `fixed32` value, an unsigned, fixed-length 32-bit integer.
  */
  fixed32(u2) {
    assertUInt32(u2);
    let c = new Uint8Array(4);
    return new DataView(c.buffer).setUint32(0, u2, true), this.raw(c);
  }
  /**
  * Write a `sfixed32` value, a signed, fixed-length 32-bit integer.
  */
  sfixed32(u2) {
    assertInt32(u2);
    let c = new Uint8Array(4);
    return new DataView(c.buffer).setInt32(0, u2, true), this.raw(c);
  }
  /**
  * Write a `sint32` value, a signed, zigzag-encoded 32-bit varint.
  */
  sint32(u2) {
    return assertInt32(u2), u2 = (u2 << 1 ^ u2 >> 31) >>> 0, varint32write(u2, this.buf), this;
  }
  /**
  * Write a `fixed64` value, a signed, fixed-length 64-bit integer.
  */
  sfixed64(u2) {
    let c = new Uint8Array(8), l2 = new DataView(c.buffer), v2 = protoInt64.enc(u2);
    return l2.setInt32(0, v2.lo, true), l2.setInt32(4, v2.hi, true), this.raw(c);
  }
  /**
  * Write a `fixed64` value, an unsigned, fixed-length 64 bit integer.
  */
  fixed64(u2) {
    let c = new Uint8Array(8), l2 = new DataView(c.buffer), v2 = protoInt64.uEnc(u2);
    return l2.setInt32(0, v2.lo, true), l2.setInt32(4, v2.hi, true), this.raw(c);
  }
  /**
  * Write a `int64` value, a signed 64-bit varint.
  */
  int64(u2) {
    let c = protoInt64.enc(u2);
    return varint64write(c.lo, c.hi, this.buf), this;
  }
  /**
  * Write a `sint64` value, a signed, zig-zag-encoded 64-bit varint.
  */
  sint64(u2) {
    let c = protoInt64.enc(u2), l2 = c.hi >> 31, v2 = c.lo << 1 ^ l2, S2 = (c.hi << 1 | c.lo >>> 31) ^ l2;
    return varint64write(v2, S2, this.buf), this;
  }
  /**
  * Write a `uint64` value, an unsigned 64-bit varint.
  */
  uint64(u2) {
    let c = protoInt64.uEnc(u2);
    return varint64write(c.lo, c.hi, this.buf), this;
  }
}
class BinaryReader {
  constructor(u2, c) {
    this.varint64 = varint64read, this.uint32 = varint32read, this.buf = u2, this.len = u2.length, this.pos = 0, this.view = new DataView(u2.buffer, u2.byteOffset, u2.byteLength), this.textDecoder = c ?? new TextDecoder();
  }
  /**
  * Reads a tag - field number and wire type.
  */
  tag() {
    let u2 = this.uint32(), c = u2 >>> 3, l2 = u2 & 7;
    if (c <= 0 || l2 < 0 || l2 > 5)
      throw new Error("illegal tag: field no " + c + " wire type " + l2);
    return [c, l2];
  }
  /**
  * Skip one element on the wire and return the skipped data.
  * Supports WireType.StartGroup since v2.0.0-alpha.23.
  */
  skip(u2) {
    let c = this.pos;
    switch (u2) {
      case WireType.Varint:
        for (; this.buf[this.pos++] & 128; )
          ;
        break;
      case WireType.Bit64:
        this.pos += 4;
      case WireType.Bit32:
        this.pos += 4;
        break;
      case WireType.LengthDelimited:
        let l2 = this.uint32();
        this.pos += l2;
        break;
      case WireType.StartGroup:
        let v2;
        for (; (v2 = this.tag()[1]) !== WireType.EndGroup; )
          this.skip(v2);
        break;
      default:
        throw new Error("cant skip wire type " + u2);
    }
    return this.assertBounds(), this.buf.subarray(c, this.pos);
  }
  /**
  * Throws error if position in byte array is out of range.
  */
  assertBounds() {
    if (this.pos > this.len)
      throw new RangeError("premature EOF");
  }
  /**
  * Read a `int32` field, a signed 32 bit varint.
  */
  int32() {
    return this.uint32() | 0;
  }
  /**
  * Read a `sint32` field, a signed, zigzag-encoded 32-bit varint.
  */
  sint32() {
    let u2 = this.uint32();
    return u2 >>> 1 ^ -(u2 & 1);
  }
  /**
  * Read a `int64` field, a signed 64-bit varint.
  */
  int64() {
    return protoInt64.dec(...this.varint64());
  }
  /**
  * Read a `uint64` field, an unsigned 64-bit varint.
  */
  uint64() {
    return protoInt64.uDec(...this.varint64());
  }
  /**
  * Read a `sint64` field, a signed, zig-zag-encoded 64-bit varint.
  */
  sint64() {
    let [u2, c] = this.varint64(), l2 = -(u2 & 1);
    return u2 = (u2 >>> 1 | (c & 1) << 31) ^ l2, c = c >>> 1 ^ l2, protoInt64.dec(u2, c);
  }
  /**
  * Read a `bool` field, a variant.
  */
  bool() {
    let [u2, c] = this.varint64();
    return u2 !== 0 || c !== 0;
  }
  /**
  * Read a `fixed32` field, an unsigned, fixed-length 32-bit integer.
  */
  fixed32() {
    return this.view.getUint32((this.pos += 4) - 4, true);
  }
  /**
  * Read a `sfixed32` field, a signed, fixed-length 32-bit integer.
  */
  sfixed32() {
    return this.view.getInt32((this.pos += 4) - 4, true);
  }
  /**
  * Read a `fixed64` field, an unsigned, fixed-length 64 bit integer.
  */
  fixed64() {
    return protoInt64.uDec(this.sfixed32(), this.sfixed32());
  }
  /**
  * Read a `fixed64` field, a signed, fixed-length 64-bit integer.
  */
  sfixed64() {
    return protoInt64.dec(this.sfixed32(), this.sfixed32());
  }
  /**
  * Read a `float` field, 32-bit floating point number.
  */
  float() {
    return this.view.getFloat32((this.pos += 4) - 4, true);
  }
  /**
  * Read a `double` field, a 64-bit floating point number.
  */
  double() {
    return this.view.getFloat64((this.pos += 8) - 8, true);
  }
  /**
  * Read a `bytes` field, length-delimited arbitrary data.
  */
  bytes() {
    let u2 = this.uint32(), c = this.pos;
    return this.pos += u2, this.assertBounds(), this.buf.subarray(c, c + u2);
  }
  /**
  * Read a `string` field, length-delimited data converted to UTF-8 text.
  */
  string() {
    return this.textDecoder.decode(this.bytes());
  }
}
function wrapField(a92, u2) {
  return u2 instanceof Message || !a92.fieldWrapper ? u2 : a92.fieldWrapper.wrapField(u2);
}
ScalarType.DOUBLE, ScalarType.FLOAT, ScalarType.INT64, ScalarType.UINT64, ScalarType.INT32, ScalarType.UINT32, ScalarType.BOOL, ScalarType.STRING, ScalarType.BYTES;
function scalarEquals(a92, u2, c) {
  if (u2 === c)
    return true;
  if (a92 == ScalarType.BYTES) {
    if (!(u2 instanceof Uint8Array) || !(c instanceof Uint8Array) || u2.length !== c.length)
      return false;
    for (let l2 = 0; l2 < u2.length; l2++)
      if (u2[l2] !== c[l2])
        return false;
    return true;
  }
  switch (a92) {
    case ScalarType.UINT64:
    case ScalarType.FIXED64:
    case ScalarType.INT64:
    case ScalarType.SFIXED64:
    case ScalarType.SINT64:
      return u2 == c;
  }
  return false;
}
function scalarDefaultValue(a92, u2) {
  switch (a92) {
    case ScalarType.BOOL:
      return false;
    case ScalarType.UINT64:
    case ScalarType.FIXED64:
    case ScalarType.INT64:
    case ScalarType.SFIXED64:
    case ScalarType.SINT64:
      return u2 == 0 ? protoInt64.zero : "0";
    case ScalarType.DOUBLE:
    case ScalarType.FLOAT:
      return 0;
    case ScalarType.BYTES:
      return new Uint8Array(0);
    case ScalarType.STRING:
      return "";
    default:
      return 0;
  }
}
function scalarTypeInfo(a92, u2) {
  const c = u2 === void 0;
  let l2 = WireType.Varint, v2 = u2 === 0;
  switch (a92) {
    case ScalarType.STRING:
      v2 = c || !u2.length, l2 = WireType.LengthDelimited;
      break;
    case ScalarType.BOOL:
      v2 = u2 === false;
      break;
    case ScalarType.DOUBLE:
      l2 = WireType.Bit64;
      break;
    case ScalarType.FLOAT:
      l2 = WireType.Bit32;
      break;
    case ScalarType.INT64:
      v2 = c || u2 == 0;
      break;
    case ScalarType.UINT64:
      v2 = c || u2 == 0;
      break;
    case ScalarType.FIXED64:
      v2 = c || u2 == 0, l2 = WireType.Bit64;
      break;
    case ScalarType.BYTES:
      v2 = c || !u2.byteLength, l2 = WireType.LengthDelimited;
      break;
    case ScalarType.FIXED32:
      l2 = WireType.Bit32;
      break;
    case ScalarType.SFIXED32:
      l2 = WireType.Bit32;
      break;
    case ScalarType.SFIXED64:
      v2 = c || u2 == 0, l2 = WireType.Bit64;
      break;
    case ScalarType.SINT64:
      v2 = c || u2 == 0;
      break;
  }
  const S2 = ScalarType[a92].toLowerCase();
  return [l2, S2, c || v2];
}
const unknownFieldsSymbol = Symbol("@bufbuild/protobuf/unknown-fields"), readDefaults = { readUnknownFields: true, readerFactory: (a92) => new BinaryReader(a92) }, writeDefaults = { writeUnknownFields: true, writerFactory: () => new BinaryWriter() };
function makeReadOptions$1(a92) {
  return a92 ? Object.assign(Object.assign({}, readDefaults), a92) : readDefaults;
}
function makeWriteOptions$1(a92) {
  return a92 ? Object.assign(Object.assign({}, writeDefaults), a92) : writeDefaults;
}
function makeBinaryFormatCommon() {
  return { makeReadOptions: makeReadOptions$1, makeWriteOptions: makeWriteOptions$1, listUnknownFields(a92) {
    var u2;
    return (u2 = a92[unknownFieldsSymbol]) !== null && u2 !== void 0 ? u2 : [];
  }, discardUnknownFields(a92) {
    delete a92[unknownFieldsSymbol];
  }, writeUnknownFields(a92, u2) {
    const l2 = a92[unknownFieldsSymbol];
    if (l2)
      for (const v2 of l2)
        u2.tag(v2.no, v2.wireType).raw(v2.data);
  }, onUnknownField(a92, u2, c, l2) {
    const v2 = a92;
    Array.isArray(v2[unknownFieldsSymbol]) || (v2[unknownFieldsSymbol] = []), v2[unknownFieldsSymbol].push({ no: u2, wireType: c, data: l2 });
  }, readMessage(a92, u2, c, l2) {
    const v2 = a92.getType(), S2 = c === void 0 ? u2.len : u2.pos + c;
    for (; u2.pos < S2; ) {
      const [g2, E2] = u2.tag(), _ = v2.fields.find(g2);
      if (!_) {
        const $ = u2.skip(E2);
        l2.readUnknownFields && this.onUnknownField(a92, g2, E2, $);
        continue;
      }
      let k = a92, L2 = _.repeated, M2 = _.localName;
      switch (_.oneof && (k = k[_.oneof.localName], k.case != M2 && delete k.value, k.case = M2, M2 = "value"), _.kind) {
        case "scalar":
        case "enum":
          const $ = _.kind == "enum" ? ScalarType.INT32 : _.T;
          let J2 = readScalar$1;
          if (_.kind == "scalar" && _.L > 0 && (J2 = readScalarLTString), L2) {
            let H2 = k[M2];
            if (E2 == WireType.LengthDelimited && $ != ScalarType.STRING && $ != ScalarType.BYTES) {
              let B2 = u2.uint32() + u2.pos;
              for (; u2.pos < B2; )
                H2.push(J2(u2, $));
            } else
              H2.push(J2(u2, $));
          } else
            k[M2] = J2(u2, $);
          break;
        case "message":
          const V2 = _.T;
          L2 ? k[M2].push(readMessageField(u2, new V2(), l2)) : k[M2] instanceof Message ? readMessageField(u2, k[M2], l2) : (k[M2] = readMessageField(u2, new V2(), l2), V2.fieldWrapper && !_.oneof && !_.repeated && (k[M2] = V2.fieldWrapper.unwrapField(k[M2])));
          break;
        case "map":
          let [q2, G2] = readMapEntry(_, u2, l2);
          k[M2][q2] = G2;
          break;
      }
    }
  } };
}
function readMessageField(a92, u2, c) {
  return u2.getType().runtime.bin.readMessage(u2, a92, a92.uint32(), c), u2;
}
function readMapEntry(a92, u2, c) {
  const l2 = u2.uint32(), v2 = u2.pos + l2;
  let S2, g2;
  for (; u2.pos < v2; ) {
    let [E2] = u2.tag();
    switch (E2) {
      case 1:
        S2 = readScalar$1(u2, a92.K);
        break;
      case 2:
        switch (a92.V.kind) {
          case "scalar":
            g2 = readScalar$1(u2, a92.V.T);
            break;
          case "enum":
            g2 = u2.int32();
            break;
          case "message":
            g2 = readMessageField(u2, new a92.V.T(), c);
            break;
        }
        break;
    }
  }
  if (S2 === void 0) {
    let E2 = scalarDefaultValue(a92.K, LongType.BIGINT);
    S2 = a92.K == ScalarType.BOOL ? E2.toString() : E2;
  }
  if (typeof S2 != "string" && typeof S2 != "number" && (S2 = S2.toString()), g2 === void 0)
    switch (a92.V.kind) {
      case "scalar":
        g2 = scalarDefaultValue(a92.V.T, LongType.BIGINT);
        break;
      case "enum":
        g2 = 0;
        break;
      case "message":
        g2 = new a92.V.T();
        break;
    }
  return [S2, g2];
}
function readScalarLTString(a92, u2) {
  const c = readScalar$1(a92, u2);
  return typeof c == "bigint" ? c.toString() : c;
}
function readScalar$1(a92, u2) {
  switch (u2) {
    case ScalarType.STRING:
      return a92.string();
    case ScalarType.BOOL:
      return a92.bool();
    case ScalarType.DOUBLE:
      return a92.double();
    case ScalarType.FLOAT:
      return a92.float();
    case ScalarType.INT32:
      return a92.int32();
    case ScalarType.INT64:
      return a92.int64();
    case ScalarType.UINT64:
      return a92.uint64();
    case ScalarType.FIXED64:
      return a92.fixed64();
    case ScalarType.BYTES:
      return a92.bytes();
    case ScalarType.FIXED32:
      return a92.fixed32();
    case ScalarType.SFIXED32:
      return a92.sfixed32();
    case ScalarType.SFIXED64:
      return a92.sfixed64();
    case ScalarType.SINT64:
      return a92.sint64();
    case ScalarType.UINT32:
      return a92.uint32();
    case ScalarType.SINT32:
      return a92.sint32();
  }
}
function writeMapEntry(a92, u2, c, l2, v2) {
  a92.tag(c.no, WireType.LengthDelimited), a92.fork();
  let S2 = l2;
  switch (c.K) {
    case ScalarType.INT32:
    case ScalarType.FIXED32:
    case ScalarType.UINT32:
    case ScalarType.SFIXED32:
    case ScalarType.SINT32:
      S2 = Number.parseInt(l2);
      break;
    case ScalarType.BOOL:
      assert(l2 == "true" || l2 == "false"), S2 = l2 == "true";
      break;
  }
  switch (writeScalar$1(a92, c.K, 1, S2, true), c.V.kind) {
    case "scalar":
      writeScalar$1(a92, c.V.T, 2, v2, true);
      break;
    case "enum":
      writeScalar$1(a92, ScalarType.INT32, 2, v2, true);
      break;
    case "message":
      writeMessageField(a92, u2, c.V.T, 2, v2);
      break;
  }
  a92.join();
}
function writeMessageField(a92, u2, c, l2, v2) {
  if (v2 !== void 0) {
    const S2 = wrapField(c, v2);
    a92.tag(l2, WireType.LengthDelimited).bytes(S2.toBinary(u2));
  }
}
function writeScalar$1(a92, u2, c, l2, v2) {
  let [S2, g2, E2] = scalarTypeInfo(u2, l2);
  (!E2 || v2) && a92.tag(c, S2)[g2](l2);
}
function writePacked(a92, u2, c, l2) {
  if (!l2.length)
    return;
  a92.tag(c, WireType.LengthDelimited).fork();
  let [, v2] = scalarTypeInfo(u2);
  for (let S2 = 0; S2 < l2.length; S2++)
    a92[v2](l2[S2]);
  a92.join();
}
function makeBinaryFormatProto3() {
  return Object.assign(Object.assign({}, makeBinaryFormatCommon()), { writeMessage(a92, u2, c) {
    const l2 = a92.getType();
    for (const v2 of l2.fields.byNumber()) {
      let S2, g2 = v2.repeated, E2 = v2.localName;
      if (v2.oneof) {
        const _ = a92[v2.oneof.localName];
        if (_.case !== E2)
          continue;
        S2 = _.value;
      } else
        S2 = a92[E2];
      switch (v2.kind) {
        case "scalar":
        case "enum":
          let _ = v2.kind == "enum" ? ScalarType.INT32 : v2.T;
          if (g2) {
            if (v2.packed)
              writePacked(u2, _, v2.no, S2);
            else
              for (const k of S2)
                writeScalar$1(u2, _, v2.no, k, true);
          } else
            S2 !== void 0 && writeScalar$1(u2, _, v2.no, S2, !!v2.oneof || v2.opt);
          break;
        case "message":
          if (g2)
            for (const k of S2)
              writeMessageField(u2, c, v2.T, v2.no, k);
          else
            writeMessageField(u2, c, v2.T, v2.no, S2);
          break;
        case "map":
          for (const [k, L2] of Object.entries(S2))
            writeMapEntry(u2, c, v2, k, L2);
          break;
      }
    }
    return c.writeUnknownFields && this.writeUnknownFields(a92, u2), u2;
  } });
}
let encTable = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split(""), decTable = [];
for (let a92 = 0; a92 < encTable.length; a92++)
  decTable[encTable[a92].charCodeAt(0)] = a92;
decTable[45] = encTable.indexOf("+");
decTable[95] = encTable.indexOf("/");
const protoBase64 = {
  /**
  * Decodes a base64 string to a byte array.
  *
  * - ignores white-space, including line breaks and tabs
  * - allows inner padding (can decode concatenated base64 strings)
  * - does not require padding
  * - understands base64url encoding:
  *   "-" instead of "+",
  *   "_" instead of "/",
  *   no padding
  */
  dec(a92) {
    let u2 = a92.length * 3 / 4;
    a92[a92.length - 2] == "=" ? u2 -= 2 : a92[a92.length - 1] == "=" && (u2 -= 1);
    let c = new Uint8Array(u2), l2 = 0, v2 = 0, S2, g2 = 0;
    for (let E2 = 0; E2 < a92.length; E2++) {
      if (S2 = decTable[a92.charCodeAt(E2)], S2 === void 0)
        switch (a92[E2]) {
          case "=":
            v2 = 0;
          case `
`:
          case "\r":
          case "	":
          case " ":
            continue;
          default:
            throw Error("invalid base64 string.");
        }
      switch (v2) {
        case 0:
          g2 = S2, v2 = 1;
          break;
        case 1:
          c[l2++] = g2 << 2 | (S2 & 48) >> 4, g2 = S2, v2 = 2;
          break;
        case 2:
          c[l2++] = (g2 & 15) << 4 | (S2 & 60) >> 2, g2 = S2, v2 = 3;
          break;
        case 3:
          c[l2++] = (g2 & 3) << 6 | S2, v2 = 0;
          break;
      }
    }
    if (v2 == 1)
      throw Error("invalid base64 string.");
    return c.subarray(0, l2);
  },
  /**
  * Encode a byte array to a base64 string.
  */
  enc(a92) {
    let u2 = "", c = 0, l2, v2 = 0;
    for (let S2 = 0; S2 < a92.length; S2++)
      switch (l2 = a92[S2], c) {
        case 0:
          u2 += encTable[l2 >> 2], v2 = (l2 & 3) << 4, c = 1;
          break;
        case 1:
          u2 += encTable[v2 | l2 >> 4], v2 = (l2 & 15) << 2, c = 2;
          break;
        case 2:
          u2 += encTable[v2 | l2 >> 6], u2 += encTable[l2 & 63], c = 0;
          break;
      }
    return c && (u2 += encTable[v2], u2 += "=", c == 1 && (u2 += "=")), u2;
  }
}, jsonReadDefaults = { ignoreUnknownFields: false }, jsonWriteDefaults = { emitDefaultValues: false, enumAsInteger: false, useProtoFieldName: false, prettySpaces: 0 };
function makeReadOptions(a92) {
  return a92 ? Object.assign(Object.assign({}, jsonReadDefaults), a92) : jsonReadDefaults;
}
function makeWriteOptions(a92) {
  return a92 ? Object.assign(Object.assign({}, jsonWriteDefaults), a92) : jsonWriteDefaults;
}
function makeJsonFormatCommon(a92) {
  const u2 = a92(writeEnum, writeScalar);
  return { makeReadOptions, makeWriteOptions, readMessage(c, l2, v2, S2) {
    if (l2 == null || Array.isArray(l2) || typeof l2 != "object")
      throw new Error("cannot decode message ".concat(c.typeName, " from JSON: ").concat(this.debug(l2)));
    S2 = S2 ?? new c();
    const g2 = {};
    for (const [E2, _] of Object.entries(l2)) {
      const k = c.fields.findJsonName(E2);
      if (!k) {
        if (!v2.ignoreUnknownFields)
          throw new Error("cannot decode message ".concat(c.typeName, ' from JSON: key "').concat(E2, '" is unknown'));
        continue;
      }
      let L2 = k.localName, M2 = S2;
      if (k.oneof) {
        if (_ === null && k.kind == "scalar")
          continue;
        const $ = g2[k.oneof.localName];
        if ($)
          throw new Error("cannot decode message ".concat(c.typeName, ' from JSON: multiple keys for oneof "').concat(k.oneof.name, '" present: "').concat($, '", "').concat(E2, '"'));
        g2[k.oneof.localName] = E2, M2 = M2[k.oneof.localName] = { case: L2 }, L2 = "value";
      }
      if (k.repeated) {
        if (_ === null)
          continue;
        if (!Array.isArray(_))
          throw new Error("cannot decode field ".concat(c.typeName, ".").concat(k.name, " from JSON: ").concat(this.debug(_)));
        const $ = M2[L2];
        for (const J2 of _) {
          if (J2 === null)
            throw new Error("cannot decode field ".concat(c.typeName, ".").concat(k.name, " from JSON: ").concat(this.debug(J2)));
          let V2;
          switch (k.kind) {
            case "message":
              V2 = k.T.fromJson(J2, v2);
              break;
            case "enum":
              if (V2 = readEnum(k.T, J2, v2.ignoreUnknownFields), V2 === void 0)
                continue;
              break;
            case "scalar":
              try {
                V2 = readScalar(k.T, J2, k.L);
              } catch (q2) {
                let G2 = "cannot decode field ".concat(c.typeName, ".").concat(k.name, " from JSON: ").concat(this.debug(J2));
                throw q2 instanceof Error && q2.message.length > 0 && (G2 += ": ".concat(q2.message)), new Error(G2);
              }
              break;
          }
          $.push(V2);
        }
      } else if (k.kind == "map") {
        if (_ === null)
          continue;
        if (Array.isArray(_) || typeof _ != "object")
          throw new Error("cannot decode field ".concat(c.typeName, ".").concat(k.name, " from JSON: ").concat(this.debug(_)));
        const $ = M2[L2];
        for (const [J2, V2] of Object.entries(_)) {
          if (V2 === null)
            throw new Error("cannot decode field ".concat(c.typeName, ".").concat(k.name, " from JSON: map value null"));
          let q2;
          switch (k.V.kind) {
            case "message":
              q2 = k.V.T.fromJson(V2, v2);
              break;
            case "enum":
              if (q2 = readEnum(k.V.T, V2, v2.ignoreUnknownFields), q2 === void 0)
                continue;
              break;
            case "scalar":
              try {
                q2 = readScalar(k.V.T, V2, LongType.BIGINT);
              } catch (G2) {
                let H2 = "cannot decode map value for field ".concat(c.typeName, ".").concat(k.name, " from JSON: ").concat(this.debug(_));
                throw G2 instanceof Error && G2.message.length > 0 && (H2 += ": ".concat(G2.message)), new Error(H2);
              }
              break;
          }
          try {
            $[readScalar(k.K, k.K == ScalarType.BOOL ? J2 == "true" ? true : J2 == "false" ? false : J2 : J2, LongType.BIGINT).toString()] = q2;
          } catch (G2) {
            let H2 = "cannot decode map key for field ".concat(c.typeName, ".").concat(k.name, " from JSON: ").concat(this.debug(_));
            throw G2 instanceof Error && G2.message.length > 0 && (H2 += ": ".concat(G2.message)), new Error(H2);
          }
        }
      } else
        switch (k.kind) {
          case "message":
            const $ = k.T;
            if (_ === null && $.typeName != "google.protobuf.Value") {
              if (k.oneof)
                throw new Error("cannot decode field ".concat(c.typeName, ".").concat(k.name, ' from JSON: null is invalid for oneof field "').concat(E2, '"'));
              continue;
            }
            M2[L2] instanceof Message ? M2[L2].fromJson(_, v2) : (M2[L2] = $.fromJson(_, v2), $.fieldWrapper && !k.oneof && (M2[L2] = $.fieldWrapper.unwrapField(M2[L2])));
            break;
          case "enum":
            const J2 = readEnum(k.T, _, v2.ignoreUnknownFields);
            J2 !== void 0 && (M2[L2] = J2);
            break;
          case "scalar":
            try {
              M2[L2] = readScalar(k.T, _, k.L);
            } catch (V2) {
              let q2 = "cannot decode field ".concat(c.typeName, ".").concat(k.name, " from JSON: ").concat(this.debug(_));
              throw V2 instanceof Error && V2.message.length > 0 && (q2 += ": ".concat(V2.message)), new Error(q2);
            }
            break;
        }
    }
    return S2;
  }, writeMessage(c, l2) {
    const v2 = c.getType(), S2 = {};
    let g2;
    try {
      for (const E2 of v2.fields.byMember()) {
        let _;
        if (E2.kind == "oneof") {
          const k = c[E2.localName];
          if (k.value === void 0)
            continue;
          if (g2 = E2.findField(k.case), !g2)
            throw "oneof case not found: " + k.case;
          _ = u2(g2, k.value, l2);
        } else
          g2 = E2, _ = u2(g2, c[g2.localName], l2);
        _ !== void 0 && (S2[l2.useProtoFieldName ? g2.name : g2.jsonName] = _);
      }
    } catch (E2) {
      const _ = g2 ? "cannot encode field ".concat(v2.typeName, ".").concat(g2.name, " to JSON") : "cannot encode message ".concat(v2.typeName, " to JSON"), k = E2 instanceof Error ? E2.message : String(E2);
      throw new Error(_ + (k.length > 0 ? ": ".concat(k) : ""));
    }
    return S2;
  }, readScalar, writeScalar, debug: debugJsonValue };
}
function debugJsonValue(a92) {
  if (a92 === null)
    return "null";
  switch (typeof a92) {
    case "object":
      return Array.isArray(a92) ? "array" : "object";
    case "string":
      return a92.length > 100 ? "string" : '"'.concat(a92.split('"').join('\\"'), '"');
    default:
      return String(a92);
  }
}
function readScalar(a92, u2, c) {
  switch (a92) {
    case ScalarType.DOUBLE:
    case ScalarType.FLOAT:
      if (u2 === null)
        return 0;
      if (u2 === "NaN")
        return Number.NaN;
      if (u2 === "Infinity")
        return Number.POSITIVE_INFINITY;
      if (u2 === "-Infinity")
        return Number.NEGATIVE_INFINITY;
      if (u2 === "" || typeof u2 == "string" && u2.trim().length !== u2.length || typeof u2 != "string" && typeof u2 != "number")
        break;
      const l2 = Number(u2);
      if (Number.isNaN(l2) || !Number.isFinite(l2))
        break;
      return a92 == ScalarType.FLOAT && assertFloat32(l2), l2;
    case ScalarType.INT32:
    case ScalarType.FIXED32:
    case ScalarType.SFIXED32:
    case ScalarType.SINT32:
    case ScalarType.UINT32:
      if (u2 === null)
        return 0;
      let v2;
      if (typeof u2 == "number" ? v2 = u2 : typeof u2 == "string" && u2.length > 0 && u2.trim().length === u2.length && (v2 = Number(u2)), v2 === void 0)
        break;
      return a92 == ScalarType.UINT32 ? assertUInt32(v2) : assertInt32(v2), v2;
    case ScalarType.INT64:
    case ScalarType.SFIXED64:
    case ScalarType.SINT64:
      if (u2 === null)
        return protoInt64.zero;
      if (typeof u2 != "number" && typeof u2 != "string")
        break;
      const S2 = protoInt64.parse(u2);
      return c ? S2.toString() : S2;
    case ScalarType.FIXED64:
    case ScalarType.UINT64:
      if (u2 === null)
        return protoInt64.zero;
      if (typeof u2 != "number" && typeof u2 != "string")
        break;
      const g2 = protoInt64.uParse(u2);
      return c ? g2.toString() : g2;
    case ScalarType.BOOL:
      if (u2 === null)
        return false;
      if (typeof u2 != "boolean")
        break;
      return u2;
    case ScalarType.STRING:
      if (u2 === null)
        return "";
      if (typeof u2 != "string")
        break;
      try {
        encodeURIComponent(u2);
      } catch {
        throw new Error("invalid UTF8");
      }
      return u2;
    case ScalarType.BYTES:
      if (u2 === null || u2 === "")
        return new Uint8Array(0);
      if (typeof u2 != "string")
        break;
      return protoBase64.dec(u2);
  }
  throw new Error();
}
function readEnum(a92, u2, c) {
  if (u2 === null)
    return 0;
  switch (typeof u2) {
    case "number":
      if (Number.isInteger(u2))
        return u2;
      break;
    case "string":
      const l2 = a92.findName(u2);
      if (l2 || c)
        return l2 == null ? void 0 : l2.no;
      break;
  }
  throw new Error("cannot decode enum ".concat(a92.typeName, " from JSON: ").concat(debugJsonValue(u2)));
}
function writeEnum(a92, u2, c, l2) {
  var v2;
  if (u2 === void 0)
    return u2;
  if (u2 === 0 && !c)
    return;
  if (l2)
    return u2;
  if (a92.typeName == "google.protobuf.NullValue")
    return null;
  const S2 = a92.findNumber(u2);
  return (v2 = S2 == null ? void 0 : S2.name) !== null && v2 !== void 0 ? v2 : u2;
}
function writeScalar(a92, u2, c) {
  if (u2 !== void 0)
    switch (a92) {
      case ScalarType.INT32:
      case ScalarType.SFIXED32:
      case ScalarType.SINT32:
      case ScalarType.FIXED32:
      case ScalarType.UINT32:
        return assert(typeof u2 == "number"), u2 != 0 || c ? u2 : void 0;
      case ScalarType.FLOAT:
      case ScalarType.DOUBLE:
        return assert(typeof u2 == "number"), Number.isNaN(u2) ? "NaN" : u2 === Number.POSITIVE_INFINITY ? "Infinity" : u2 === Number.NEGATIVE_INFINITY ? "-Infinity" : u2 !== 0 || c ? u2 : void 0;
      case ScalarType.STRING:
        return assert(typeof u2 == "string"), u2.length > 0 || c ? u2 : void 0;
      case ScalarType.BOOL:
        return assert(typeof u2 == "boolean"), u2 || c ? u2 : void 0;
      case ScalarType.UINT64:
      case ScalarType.FIXED64:
      case ScalarType.INT64:
      case ScalarType.SFIXED64:
      case ScalarType.SINT64:
        return assert(typeof u2 == "bigint" || typeof u2 == "string" || typeof u2 == "number"), c || u2 != 0 ? u2.toString(10) : void 0;
      case ScalarType.BYTES:
        return assert(u2 instanceof Uint8Array), c || u2.byteLength > 0 ? protoBase64.enc(u2) : void 0;
    }
}
function makeJsonFormatProto3() {
  return makeJsonFormatCommon((a92, u2) => function(l2, v2, S2) {
    if (l2.kind == "map") {
      const g2 = {};
      switch (l2.V.kind) {
        case "scalar":
          for (const [_, k] of Object.entries(v2)) {
            const L2 = u2(l2.V.T, k, true);
            assert(L2 !== void 0), g2[_.toString()] = L2;
          }
          break;
        case "message":
          for (const [_, k] of Object.entries(v2))
            g2[_.toString()] = k.toJson(S2);
          break;
        case "enum":
          const E2 = l2.V.T;
          for (const [_, k] of Object.entries(v2)) {
            assert(k === void 0 || typeof k == "number");
            const L2 = a92(E2, k, true, S2.enumAsInteger);
            assert(L2 !== void 0), g2[_.toString()] = L2;
          }
          break;
      }
      return S2.emitDefaultValues || Object.keys(g2).length > 0 ? g2 : void 0;
    } else if (l2.repeated) {
      const g2 = [];
      switch (l2.kind) {
        case "scalar":
          for (let E2 = 0; E2 < v2.length; E2++)
            g2.push(u2(l2.T, v2[E2], true));
          break;
        case "enum":
          for (let E2 = 0; E2 < v2.length; E2++)
            g2.push(a92(l2.T, v2[E2], true, S2.enumAsInteger));
          break;
        case "message":
          for (let E2 = 0; E2 < v2.length; E2++)
            g2.push(wrapField(l2.T, v2[E2]).toJson(S2));
          break;
      }
      return S2.emitDefaultValues || g2.length > 0 ? g2 : void 0;
    } else
      switch (l2.kind) {
        case "scalar":
          return u2(l2.T, v2, !!l2.oneof || l2.opt || S2.emitDefaultValues);
        case "enum":
          return a92(l2.T, v2, !!l2.oneof || l2.opt || S2.emitDefaultValues, S2.enumAsInteger);
        case "message":
          return v2 !== void 0 ? wrapField(l2.T, v2).toJson(S2) : void 0;
      }
  });
}
function makeUtilCommon() {
  return { setEnumType, initPartial(a92, u2) {
    if (a92 === void 0)
      return;
    const c = u2.getType();
    for (const l2 of c.fields.byMember()) {
      const v2 = l2.localName, S2 = u2, g2 = a92;
      if (g2[v2] !== void 0)
        switch (l2.kind) {
          case "oneof":
            const E2 = g2[v2].case;
            if (E2 === void 0)
              continue;
            const _ = l2.findField(E2);
            let k = g2[v2].value;
            _ && _.kind == "message" && !(k instanceof _.T) ? k = new _.T(k) : _ && _.kind === "scalar" && _.T === ScalarType.BYTES && (k = toU8Arr(k)), S2[v2] = { case: E2, value: k };
            break;
          case "scalar":
          case "enum":
            let L2 = g2[v2];
            l2.T === ScalarType.BYTES && (L2 = l2.repeated ? L2.map(toU8Arr) : toU8Arr(L2)), S2[v2] = L2;
            break;
          case "map":
            switch (l2.V.kind) {
              case "scalar":
              case "enum":
                if (l2.V.T === ScalarType.BYTES)
                  for (const [J2, V2] of Object.entries(g2[v2]))
                    S2[v2][J2] = toU8Arr(V2);
                else
                  Object.assign(S2[v2], g2[v2]);
                break;
              case "message":
                const $ = l2.V.T;
                for (const J2 of Object.keys(g2[v2])) {
                  let V2 = g2[v2][J2];
                  $.fieldWrapper || (V2 = new $(V2)), S2[v2][J2] = V2;
                }
                break;
            }
            break;
          case "message":
            const M2 = l2.T;
            if (l2.repeated)
              S2[v2] = g2[v2].map(($) => $ instanceof M2 ? $ : new M2($));
            else if (g2[v2] !== void 0) {
              const $ = g2[v2];
              M2.fieldWrapper ? (
                /* We can't use BytesValue.typeName as that will create a circular import */
                M2.typeName === "google.protobuf.BytesValue" ? S2[v2] = toU8Arr($) : S2[v2] = $
              ) : S2[v2] = $ instanceof M2 ? $ : new M2($);
            }
            break;
        }
    }
  }, equals(a92, u2, c) {
    return u2 === c ? true : !u2 || !c ? false : a92.fields.byMember().every((l2) => {
      const v2 = u2[l2.localName], S2 = c[l2.localName];
      if (l2.repeated) {
        if (v2.length !== S2.length)
          return false;
        switch (l2.kind) {
          case "message":
            return v2.every((g2, E2) => l2.T.equals(g2, S2[E2]));
          case "scalar":
            return v2.every((g2, E2) => scalarEquals(l2.T, g2, S2[E2]));
          case "enum":
            return v2.every((g2, E2) => scalarEquals(ScalarType.INT32, g2, S2[E2]));
        }
        throw new Error("repeated cannot contain ".concat(l2.kind));
      }
      switch (l2.kind) {
        case "message":
          return l2.T.equals(v2, S2);
        case "enum":
          return scalarEquals(ScalarType.INT32, v2, S2);
        case "scalar":
          return scalarEquals(l2.T, v2, S2);
        case "oneof":
          if (v2.case !== S2.case)
            return false;
          const g2 = l2.findField(v2.case);
          if (g2 === void 0)
            return true;
          switch (g2.kind) {
            case "message":
              return g2.T.equals(v2.value, S2.value);
            case "enum":
              return scalarEquals(ScalarType.INT32, v2.value, S2.value);
            case "scalar":
              return scalarEquals(g2.T, v2.value, S2.value);
          }
          throw new Error("oneof cannot contain ".concat(g2.kind));
        case "map":
          const E2 = Object.keys(v2).concat(Object.keys(S2));
          switch (l2.V.kind) {
            case "message":
              const _ = l2.V.T;
              return E2.every((L2) => _.equals(v2[L2], S2[L2]));
            case "enum":
              return E2.every((L2) => scalarEquals(ScalarType.INT32, v2[L2], S2[L2]));
            case "scalar":
              const k = l2.V.T;
              return E2.every((L2) => scalarEquals(k, v2[L2], S2[L2]));
          }
          break;
      }
    });
  }, clone(a92) {
    const u2 = a92.getType(), c = new u2(), l2 = c;
    for (const v2 of u2.fields.byMember()) {
      const S2 = a92[v2.localName];
      let g2;
      if (v2.repeated)
        g2 = S2.map(cloneSingularField);
      else if (v2.kind == "map") {
        g2 = l2[v2.localName];
        for (const [E2, _] of Object.entries(S2))
          g2[E2] = cloneSingularField(_);
      } else
        v2.kind == "oneof" ? g2 = v2.findField(S2.case) ? { case: S2.case, value: cloneSingularField(S2.value) } : { case: void 0 } : g2 = cloneSingularField(S2);
      l2[v2.localName] = g2;
    }
    return c;
  } };
}
function cloneSingularField(a92) {
  if (a92 === void 0)
    return a92;
  if (a92 instanceof Message)
    return a92.clone();
  if (a92 instanceof Uint8Array) {
    const u2 = new Uint8Array(a92.byteLength);
    return u2.set(a92), u2;
  }
  return a92;
}
function toU8Arr(a92) {
  return a92 instanceof Uint8Array ? a92 : new Uint8Array(a92);
}
class InternalFieldList {
  constructor(u2, c) {
    this._fields = u2, this._normalizer = c;
  }
  findJsonName(u2) {
    if (!this.jsonNames) {
      const c = {};
      for (const l2 of this.list())
        c[l2.jsonName] = c[l2.name] = l2;
      this.jsonNames = c;
    }
    return this.jsonNames[u2];
  }
  find(u2) {
    if (!this.numbers) {
      const c = {};
      for (const l2 of this.list())
        c[l2.no] = l2;
      this.numbers = c;
    }
    return this.numbers[u2];
  }
  list() {
    return this.all || (this.all = this._normalizer(this._fields)), this.all;
  }
  byNumber() {
    return this.numbersAsc || (this.numbersAsc = this.list().concat().sort((u2, c) => u2.no - c.no)), this.numbersAsc;
  }
  byMember() {
    if (!this.members) {
      this.members = [];
      const u2 = this.members;
      let c;
      for (const l2 of this.list())
        l2.oneof ? l2.oneof !== c && (c = l2.oneof, u2.push(c)) : u2.push(l2);
    }
    return this.members;
  }
}
function localFieldName(a92, u2) {
  const c = protoCamelCase(a92);
  return u2 ? c : safeObjectProperty(safeMessageProperty(c));
}
function localOneofName(a92) {
  return localFieldName(a92, false);
}
const fieldJsonName = protoCamelCase;
function protoCamelCase(a92) {
  let u2 = false;
  const c = [];
  for (let l2 = 0; l2 < a92.length; l2++) {
    let v2 = a92.charAt(l2);
    switch (v2) {
      case "_":
        u2 = true;
        break;
      case "0":
      case "1":
      case "2":
      case "3":
      case "4":
      case "5":
      case "6":
      case "7":
      case "8":
      case "9":
        c.push(v2), u2 = false;
        break;
      default:
        u2 && (u2 = false, v2 = v2.toUpperCase()), c.push(v2);
        break;
    }
  }
  return c.join("");
}
const reservedObjectProperties = /* @__PURE__ */ new Set([
  // names reserved by JavaScript
  "constructor",
  "toString",
  "toJSON",
  "valueOf"
]), reservedMessageProperties = /* @__PURE__ */ new Set([
  // names reserved by the runtime
  "getType",
  "clone",
  "equals",
  "fromBinary",
  "fromJson",
  "fromJsonString",
  "toBinary",
  "toJson",
  "toJsonString",
  // names reserved by the runtime for the future
  "toObject"
]), fallback = (a92) => "".concat(a92, "$"), safeMessageProperty = (a92) => reservedMessageProperties.has(a92) ? fallback(a92) : a92, safeObjectProperty = (a92) => reservedObjectProperties.has(a92) ? fallback(a92) : a92;
class InternalOneofInfo {
  constructor(u2) {
    this.kind = "oneof", this.repeated = false, this.packed = false, this.opt = false, this.default = void 0, this.fields = [], this.name = u2, this.localName = localOneofName(u2);
  }
  addField(u2) {
    assert(u2.oneof === this, "field ".concat(u2.name, " not one of ").concat(this.name)), this.fields.push(u2);
  }
  findField(u2) {
    if (!this._lookup) {
      this._lookup = /* @__PURE__ */ Object.create(null);
      for (let c = 0; c < this.fields.length; c++)
        this._lookup[this.fields[c].localName] = this.fields[c];
    }
    return this._lookup[u2];
  }
}
const proto3 = makeProtoRuntime("proto3", makeJsonFormatProto3(), makeBinaryFormatProto3(), Object.assign(Object.assign({}, makeUtilCommon()), { newFieldList(a92) {
  return new InternalFieldList(a92, normalizeFieldInfosProto3);
}, initFields(a92) {
  for (const u2 of a92.getType().fields.byMember()) {
    if (u2.opt)
      continue;
    const c = u2.localName, l2 = a92;
    if (u2.repeated) {
      l2[c] = [];
      continue;
    }
    switch (u2.kind) {
      case "oneof":
        l2[c] = { case: void 0 };
        break;
      case "enum":
        l2[c] = 0;
        break;
      case "map":
        l2[c] = {};
        break;
      case "scalar":
        l2[c] = scalarDefaultValue(u2.T, u2.L);
        break;
    }
  }
} }));
function normalizeFieldInfosProto3(a92) {
  var u2, c, l2, v2;
  const S2 = [];
  let g2;
  for (const E2 of typeof a92 == "function" ? a92() : a92) {
    const _ = E2;
    if (_.localName = localFieldName(E2.name, E2.oneof !== void 0), _.jsonName = (u2 = E2.jsonName) !== null && u2 !== void 0 ? u2 : fieldJsonName(E2.name), _.repeated = (c = E2.repeated) !== null && c !== void 0 ? c : false, E2.kind == "scalar" && (_.L = (l2 = E2.L) !== null && l2 !== void 0 ? l2 : LongType.BIGINT), _.packed = (v2 = E2.packed) !== null && v2 !== void 0 ? v2 : E2.kind == "enum" || E2.kind == "scalar" && E2.T != ScalarType.BYTES && E2.T != ScalarType.STRING, E2.oneof !== void 0) {
      const k = typeof E2.oneof == "string" ? E2.oneof : E2.oneof.name;
      (!g2 || g2.name != k) && (g2 = new InternalOneofInfo(k)), _.oneof = g2, g2.addField(_);
    }
    S2.push(_);
  }
  return S2;
}
class Timestamp extends Message {
  constructor(u2) {
    super(), this.seconds = protoInt64.zero, this.nanos = 0, proto3.util.initPartial(u2, this);
  }
  fromJson(u2, c) {
    if (typeof u2 != "string")
      throw new Error("cannot decode google.protobuf.Timestamp from JSON: ".concat(proto3.json.debug(u2)));
    const l2 = u2.match(/^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})(?:Z|\.([0-9]{3,9})Z|([+-][0-9][0-9]:[0-9][0-9]))$/);
    if (!l2)
      throw new Error("cannot decode google.protobuf.Timestamp from JSON: invalid RFC 3339 string");
    const v2 = Date.parse(l2[1] + "-" + l2[2] + "-" + l2[3] + "T" + l2[4] + ":" + l2[5] + ":" + l2[6] + (l2[8] ? l2[8] : "Z"));
    if (Number.isNaN(v2))
      throw new Error("cannot decode google.protobuf.Timestamp from JSON: invalid RFC 3339 string");
    if (v2 < Date.parse("0001-01-01T00:00:00Z") || v2 > Date.parse("9999-12-31T23:59:59Z"))
      throw new Error("cannot decode message google.protobuf.Timestamp from JSON: must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive");
    return this.seconds = protoInt64.parse(v2 / 1e3), this.nanos = 0, l2[7] && (this.nanos = parseInt("1" + l2[7] + "0".repeat(9 - l2[7].length)) - 1e9), this;
  }
  toJson(u2) {
    const c = Number(this.seconds) * 1e3;
    if (c < Date.parse("0001-01-01T00:00:00Z") || c > Date.parse("9999-12-31T23:59:59Z"))
      throw new Error("cannot encode google.protobuf.Timestamp to JSON: must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive");
    if (this.nanos < 0)
      throw new Error("cannot encode google.protobuf.Timestamp to JSON: nanos must not be negative");
    let l2 = "Z";
    if (this.nanos > 0) {
      const v2 = (this.nanos + 1e9).toString().substring(1);
      v2.substring(3) === "000000" ? l2 = "." + v2.substring(0, 3) + "Z" : v2.substring(6) === "000" ? l2 = "." + v2.substring(0, 6) + "Z" : l2 = "." + v2 + "Z";
    }
    return new Date(c).toISOString().replace(".000Z", l2);
  }
  toDate() {
    return new Date(Number(this.seconds) * 1e3 + Math.ceil(this.nanos / 1e6));
  }
  static now() {
    return Timestamp.fromDate(/* @__PURE__ */ new Date());
  }
  static fromDate(u2) {
    const c = u2.getTime();
    return new Timestamp({ seconds: protoInt64.parse(Math.floor(c / 1e3)), nanos: c % 1e3 * 1e6 });
  }
  static fromBinary(u2, c) {
    return new Timestamp().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new Timestamp().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new Timestamp().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(Timestamp, u2, c);
  }
}
Timestamp.runtime = proto3;
Timestamp.typeName = "google.protobuf.Timestamp";
Timestamp.fields = proto3.util.newFieldList(() => [{
  no: 1,
  name: "seconds",
  kind: "scalar",
  T: 3
  /* ScalarType.INT64 */
}, {
  no: 2,
  name: "nanos",
  kind: "scalar",
  T: 5
  /* ScalarType.INT32 */
}]);
var AudioCodec$1;
(function(a92) {
  a92[a92.DEFAULT_AC = 0] = "DEFAULT_AC", a92[a92.OPUS = 1] = "OPUS", a92[a92.AAC = 2] = "AAC";
})(AudioCodec$1 || (AudioCodec$1 = {}));
proto3.util.setEnumType(AudioCodec$1, "livekit.AudioCodec", [{ no: 0, name: "DEFAULT_AC" }, { no: 1, name: "OPUS" }, { no: 2, name: "AAC" }]);
var VideoCodec$1;
(function(a92) {
  a92[a92.DEFAULT_VC = 0] = "DEFAULT_VC", a92[a92.H264_BASELINE = 1] = "H264_BASELINE", a92[a92.H264_MAIN = 2] = "H264_MAIN", a92[a92.H264_HIGH = 3] = "H264_HIGH", a92[a92.VP8 = 4] = "VP8";
})(VideoCodec$1 || (VideoCodec$1 = {}));
proto3.util.setEnumType(VideoCodec$1, "livekit.VideoCodec", [{ no: 0, name: "DEFAULT_VC" }, { no: 1, name: "H264_BASELINE" }, { no: 2, name: "H264_MAIN" }, { no: 3, name: "H264_HIGH" }, { no: 4, name: "VP8" }]);
var ImageCodec;
(function(a92) {
  a92[a92.IC_DEFAULT = 0] = "IC_DEFAULT", a92[a92.IC_JPEG = 1] = "IC_JPEG";
})(ImageCodec || (ImageCodec = {}));
proto3.util.setEnumType(ImageCodec, "livekit.ImageCodec", [{ no: 0, name: "IC_DEFAULT" }, { no: 1, name: "IC_JPEG" }]);
var TrackType;
(function(a92) {
  a92[a92.AUDIO = 0] = "AUDIO", a92[a92.VIDEO = 1] = "VIDEO", a92[a92.DATA = 2] = "DATA";
})(TrackType || (TrackType = {}));
proto3.util.setEnumType(TrackType, "livekit.TrackType", [{ no: 0, name: "AUDIO" }, { no: 1, name: "VIDEO" }, { no: 2, name: "DATA" }]);
var TrackSource;
(function(a92) {
  a92[a92.UNKNOWN = 0] = "UNKNOWN", a92[a92.CAMERA = 1] = "CAMERA", a92[a92.MICROPHONE = 2] = "MICROPHONE", a92[a92.SCREEN_SHARE = 3] = "SCREEN_SHARE", a92[a92.SCREEN_SHARE_AUDIO = 4] = "SCREEN_SHARE_AUDIO";
})(TrackSource || (TrackSource = {}));
proto3.util.setEnumType(TrackSource, "livekit.TrackSource", [{ no: 0, name: "UNKNOWN" }, { no: 1, name: "CAMERA" }, { no: 2, name: "MICROPHONE" }, { no: 3, name: "SCREEN_SHARE" }, { no: 4, name: "SCREEN_SHARE_AUDIO" }]);
var VideoQuality$1;
(function(a92) {
  a92[a92.LOW = 0] = "LOW", a92[a92.MEDIUM = 1] = "MEDIUM", a92[a92.HIGH = 2] = "HIGH", a92[a92.OFF = 3] = "OFF";
})(VideoQuality$1 || (VideoQuality$1 = {}));
proto3.util.setEnumType(VideoQuality$1, "livekit.VideoQuality", [{ no: 0, name: "LOW" }, { no: 1, name: "MEDIUM" }, { no: 2, name: "HIGH" }, { no: 3, name: "OFF" }]);
var ConnectionQuality$1;
(function(a92) {
  a92[a92.POOR = 0] = "POOR", a92[a92.GOOD = 1] = "GOOD", a92[a92.EXCELLENT = 2] = "EXCELLENT", a92[a92.LOST = 3] = "LOST";
})(ConnectionQuality$1 || (ConnectionQuality$1 = {}));
proto3.util.setEnumType(ConnectionQuality$1, "livekit.ConnectionQuality", [{ no: 0, name: "POOR" }, { no: 1, name: "GOOD" }, { no: 2, name: "EXCELLENT" }, { no: 3, name: "LOST" }]);
var ClientConfigSetting;
(function(a92) {
  a92[a92.UNSET = 0] = "UNSET", a92[a92.DISABLED = 1] = "DISABLED", a92[a92.ENABLED = 2] = "ENABLED";
})(ClientConfigSetting || (ClientConfigSetting = {}));
proto3.util.setEnumType(ClientConfigSetting, "livekit.ClientConfigSetting", [{ no: 0, name: "UNSET" }, { no: 1, name: "DISABLED" }, { no: 2, name: "ENABLED" }]);
var DisconnectReason;
(function(a92) {
  a92[a92.UNKNOWN_REASON = 0] = "UNKNOWN_REASON", a92[a92.CLIENT_INITIATED = 1] = "CLIENT_INITIATED", a92[a92.DUPLICATE_IDENTITY = 2] = "DUPLICATE_IDENTITY", a92[a92.SERVER_SHUTDOWN = 3] = "SERVER_SHUTDOWN", a92[a92.PARTICIPANT_REMOVED = 4] = "PARTICIPANT_REMOVED", a92[a92.ROOM_DELETED = 5] = "ROOM_DELETED", a92[a92.STATE_MISMATCH = 6] = "STATE_MISMATCH", a92[a92.JOIN_FAILURE = 7] = "JOIN_FAILURE", a92[a92.MIGRATION = 8] = "MIGRATION", a92[a92.SIGNAL_CLOSE = 9] = "SIGNAL_CLOSE";
})(DisconnectReason || (DisconnectReason = {}));
proto3.util.setEnumType(DisconnectReason, "livekit.DisconnectReason", [{ no: 0, name: "UNKNOWN_REASON" }, { no: 1, name: "CLIENT_INITIATED" }, { no: 2, name: "DUPLICATE_IDENTITY" }, { no: 3, name: "SERVER_SHUTDOWN" }, { no: 4, name: "PARTICIPANT_REMOVED" }, { no: 5, name: "ROOM_DELETED" }, { no: 6, name: "STATE_MISMATCH" }, { no: 7, name: "JOIN_FAILURE" }, { no: 8, name: "MIGRATION" }, { no: 9, name: "SIGNAL_CLOSE" }]);
var ReconnectReason;
(function(a92) {
  a92[a92.RR_UNKNOWN = 0] = "RR_UNKNOWN", a92[a92.RR_SIGNAL_DISCONNECTED = 1] = "RR_SIGNAL_DISCONNECTED", a92[a92.RR_PUBLISHER_FAILED = 2] = "RR_PUBLISHER_FAILED", a92[a92.RR_SUBSCRIBER_FAILED = 3] = "RR_SUBSCRIBER_FAILED", a92[a92.RR_SWITCH_CANDIDATE = 4] = "RR_SWITCH_CANDIDATE";
})(ReconnectReason || (ReconnectReason = {}));
proto3.util.setEnumType(ReconnectReason, "livekit.ReconnectReason", [{ no: 0, name: "RR_UNKNOWN" }, { no: 1, name: "RR_SIGNAL_DISCONNECTED" }, { no: 2, name: "RR_PUBLISHER_FAILED" }, { no: 3, name: "RR_SUBSCRIBER_FAILED" }, { no: 4, name: "RR_SWITCH_CANDIDATE" }]);
var SubscriptionError;
(function(a92) {
  a92[a92.SE_UNKNOWN = 0] = "SE_UNKNOWN", a92[a92.SE_CODEC_UNSUPPORTED = 1] = "SE_CODEC_UNSUPPORTED", a92[a92.SE_TRACK_NOTFOUND = 2] = "SE_TRACK_NOTFOUND";
})(SubscriptionError || (SubscriptionError = {}));
proto3.util.setEnumType(SubscriptionError, "livekit.SubscriptionError", [{ no: 0, name: "SE_UNKNOWN" }, { no: 1, name: "SE_CODEC_UNSUPPORTED" }, { no: 2, name: "SE_TRACK_NOTFOUND" }]);
let Room$1 = class Lt extends Message {
  constructor(u2) {
    super(), this.sid = "", this.name = "", this.emptyTimeout = 0, this.maxParticipants = 0, this.creationTime = protoInt64.zero, this.turnPassword = "", this.enabledCodecs = [], this.metadata = "", this.numParticipants = 0, this.numPublishers = 0, this.activeRecording = false, proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new Lt().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new Lt().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new Lt().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(Lt, u2, c);
  }
};
Room$1.runtime = proto3;
Room$1.typeName = "livekit.Room";
Room$1.fields = proto3.util.newFieldList(() => [{
  no: 1,
  name: "sid",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, {
  no: 2,
  name: "name",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, {
  no: 3,
  name: "empty_timeout",
  kind: "scalar",
  T: 13
  /* ScalarType.UINT32 */
}, {
  no: 4,
  name: "max_participants",
  kind: "scalar",
  T: 13
  /* ScalarType.UINT32 */
}, {
  no: 5,
  name: "creation_time",
  kind: "scalar",
  T: 3
  /* ScalarType.INT64 */
}, {
  no: 6,
  name: "turn_password",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, { no: 7, name: "enabled_codecs", kind: "message", T: Codec, repeated: true }, {
  no: 8,
  name: "metadata",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, {
  no: 9,
  name: "num_participants",
  kind: "scalar",
  T: 13
  /* ScalarType.UINT32 */
}, {
  no: 11,
  name: "num_publishers",
  kind: "scalar",
  T: 13
  /* ScalarType.UINT32 */
}, {
  no: 10,
  name: "active_recording",
  kind: "scalar",
  T: 8
  /* ScalarType.BOOL */
}, { no: 13, name: "version", kind: "message", T: TimedVersion }]);
class Codec extends Message {
  constructor(u2) {
    super(), this.mime = "", this.fmtpLine = "", proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new Codec().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new Codec().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new Codec().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(Codec, u2, c);
  }
}
Codec.runtime = proto3;
Codec.typeName = "livekit.Codec";
Codec.fields = proto3.util.newFieldList(() => [{
  no: 1,
  name: "mime",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, {
  no: 2,
  name: "fmtp_line",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}]);
class PlayoutDelay extends Message {
  constructor(u2) {
    super(), this.enabled = false, this.min = 0, this.max = 0, proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new PlayoutDelay().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new PlayoutDelay().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new PlayoutDelay().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(PlayoutDelay, u2, c);
  }
}
PlayoutDelay.runtime = proto3;
PlayoutDelay.typeName = "livekit.PlayoutDelay";
PlayoutDelay.fields = proto3.util.newFieldList(() => [{
  no: 1,
  name: "enabled",
  kind: "scalar",
  T: 8
  /* ScalarType.BOOL */
}, {
  no: 2,
  name: "min",
  kind: "scalar",
  T: 13
  /* ScalarType.UINT32 */
}, {
  no: 3,
  name: "max",
  kind: "scalar",
  T: 13
  /* ScalarType.UINT32 */
}]);
class ParticipantPermission extends Message {
  constructor(u2) {
    super(), this.canSubscribe = false, this.canPublish = false, this.canPublishData = false, this.canPublishSources = [], this.hidden = false, this.recorder = false, this.canUpdateMetadata = false, this.agent = false, proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new ParticipantPermission().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new ParticipantPermission().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new ParticipantPermission().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(ParticipantPermission, u2, c);
  }
}
ParticipantPermission.runtime = proto3;
ParticipantPermission.typeName = "livekit.ParticipantPermission";
ParticipantPermission.fields = proto3.util.newFieldList(() => [{
  no: 1,
  name: "can_subscribe",
  kind: "scalar",
  T: 8
  /* ScalarType.BOOL */
}, {
  no: 2,
  name: "can_publish",
  kind: "scalar",
  T: 8
  /* ScalarType.BOOL */
}, {
  no: 3,
  name: "can_publish_data",
  kind: "scalar",
  T: 8
  /* ScalarType.BOOL */
}, { no: 9, name: "can_publish_sources", kind: "enum", T: proto3.getEnumType(TrackSource), repeated: true }, {
  no: 7,
  name: "hidden",
  kind: "scalar",
  T: 8
  /* ScalarType.BOOL */
}, {
  no: 8,
  name: "recorder",
  kind: "scalar",
  T: 8
  /* ScalarType.BOOL */
}, {
  no: 10,
  name: "can_update_metadata",
  kind: "scalar",
  T: 8
  /* ScalarType.BOOL */
}, {
  no: 11,
  name: "agent",
  kind: "scalar",
  T: 8
  /* ScalarType.BOOL */
}]);
class ParticipantInfo extends Message {
  constructor(u2) {
    super(), this.sid = "", this.identity = "", this.state = ParticipantInfo_State.JOINING, this.tracks = [], this.metadata = "", this.joinedAt = protoInt64.zero, this.name = "", this.version = 0, this.region = "", this.isPublisher = false, this.kind = ParticipantInfo_Kind.STANDARD, proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new ParticipantInfo().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new ParticipantInfo().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new ParticipantInfo().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(ParticipantInfo, u2, c);
  }
}
ParticipantInfo.runtime = proto3;
ParticipantInfo.typeName = "livekit.ParticipantInfo";
ParticipantInfo.fields = proto3.util.newFieldList(() => [{
  no: 1,
  name: "sid",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, {
  no: 2,
  name: "identity",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, { no: 3, name: "state", kind: "enum", T: proto3.getEnumType(ParticipantInfo_State) }, { no: 4, name: "tracks", kind: "message", T: TrackInfo, repeated: true }, {
  no: 5,
  name: "metadata",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, {
  no: 6,
  name: "joined_at",
  kind: "scalar",
  T: 3
  /* ScalarType.INT64 */
}, {
  no: 9,
  name: "name",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, {
  no: 10,
  name: "version",
  kind: "scalar",
  T: 13
  /* ScalarType.UINT32 */
}, { no: 11, name: "permission", kind: "message", T: ParticipantPermission }, {
  no: 12,
  name: "region",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, {
  no: 13,
  name: "is_publisher",
  kind: "scalar",
  T: 8
  /* ScalarType.BOOL */
}, { no: 14, name: "kind", kind: "enum", T: proto3.getEnumType(ParticipantInfo_Kind) }]);
var ParticipantInfo_State;
(function(a92) {
  a92[a92.JOINING = 0] = "JOINING", a92[a92.JOINED = 1] = "JOINED", a92[a92.ACTIVE = 2] = "ACTIVE", a92[a92.DISCONNECTED = 3] = "DISCONNECTED";
})(ParticipantInfo_State || (ParticipantInfo_State = {}));
proto3.util.setEnumType(ParticipantInfo_State, "livekit.ParticipantInfo.State", [{ no: 0, name: "JOINING" }, { no: 1, name: "JOINED" }, { no: 2, name: "ACTIVE" }, { no: 3, name: "DISCONNECTED" }]);
var ParticipantInfo_Kind;
(function(a92) {
  a92[a92.STANDARD = 0] = "STANDARD", a92[a92.INGRESS = 1] = "INGRESS", a92[a92.EGRESS = 2] = "EGRESS", a92[a92.SIP = 3] = "SIP", a92[a92.AGENT = 4] = "AGENT";
})(ParticipantInfo_Kind || (ParticipantInfo_Kind = {}));
proto3.util.setEnumType(ParticipantInfo_Kind, "livekit.ParticipantInfo.Kind", [{ no: 0, name: "STANDARD" }, { no: 1, name: "INGRESS" }, { no: 2, name: "EGRESS" }, { no: 3, name: "SIP" }, { no: 4, name: "AGENT" }]);
class Encryption extends Message {
  constructor(u2) {
    super(), proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new Encryption().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new Encryption().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new Encryption().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(Encryption, u2, c);
  }
}
Encryption.runtime = proto3;
Encryption.typeName = "livekit.Encryption";
Encryption.fields = proto3.util.newFieldList(() => []);
var Encryption_Type;
(function(a92) {
  a92[a92.NONE = 0] = "NONE", a92[a92.GCM = 1] = "GCM", a92[a92.CUSTOM = 2] = "CUSTOM";
})(Encryption_Type || (Encryption_Type = {}));
proto3.util.setEnumType(Encryption_Type, "livekit.Encryption.Type", [{ no: 0, name: "NONE" }, { no: 1, name: "GCM" }, { no: 2, name: "CUSTOM" }]);
class SimulcastCodecInfo extends Message {
  constructor(u2) {
    super(), this.mimeType = "", this.mid = "", this.cid = "", this.layers = [], proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new SimulcastCodecInfo().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new SimulcastCodecInfo().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new SimulcastCodecInfo().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(SimulcastCodecInfo, u2, c);
  }
}
SimulcastCodecInfo.runtime = proto3;
SimulcastCodecInfo.typeName = "livekit.SimulcastCodecInfo";
SimulcastCodecInfo.fields = proto3.util.newFieldList(() => [{
  no: 1,
  name: "mime_type",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, {
  no: 2,
  name: "mid",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, {
  no: 3,
  name: "cid",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, { no: 4, name: "layers", kind: "message", T: VideoLayer, repeated: true }]);
class TrackInfo extends Message {
  constructor(u2) {
    super(), this.sid = "", this.type = TrackType.AUDIO, this.name = "", this.muted = false, this.width = 0, this.height = 0, this.simulcast = false, this.disableDtx = false, this.source = TrackSource.UNKNOWN, this.layers = [], this.mimeType = "", this.mid = "", this.codecs = [], this.stereo = false, this.disableRed = false, this.encryption = Encryption_Type.NONE, this.stream = "", proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new TrackInfo().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new TrackInfo().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new TrackInfo().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(TrackInfo, u2, c);
  }
}
TrackInfo.runtime = proto3;
TrackInfo.typeName = "livekit.TrackInfo";
TrackInfo.fields = proto3.util.newFieldList(() => [{
  no: 1,
  name: "sid",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(TrackType) }, {
  no: 3,
  name: "name",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, {
  no: 4,
  name: "muted",
  kind: "scalar",
  T: 8
  /* ScalarType.BOOL */
}, {
  no: 5,
  name: "width",
  kind: "scalar",
  T: 13
  /* ScalarType.UINT32 */
}, {
  no: 6,
  name: "height",
  kind: "scalar",
  T: 13
  /* ScalarType.UINT32 */
}, {
  no: 7,
  name: "simulcast",
  kind: "scalar",
  T: 8
  /* ScalarType.BOOL */
}, {
  no: 8,
  name: "disable_dtx",
  kind: "scalar",
  T: 8
  /* ScalarType.BOOL */
}, { no: 9, name: "source", kind: "enum", T: proto3.getEnumType(TrackSource) }, { no: 10, name: "layers", kind: "message", T: VideoLayer, repeated: true }, {
  no: 11,
  name: "mime_type",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, {
  no: 12,
  name: "mid",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, { no: 13, name: "codecs", kind: "message", T: SimulcastCodecInfo, repeated: true }, {
  no: 14,
  name: "stereo",
  kind: "scalar",
  T: 8
  /* ScalarType.BOOL */
}, {
  no: 15,
  name: "disable_red",
  kind: "scalar",
  T: 8
  /* ScalarType.BOOL */
}, { no: 16, name: "encryption", kind: "enum", T: proto3.getEnumType(Encryption_Type) }, {
  no: 17,
  name: "stream",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, { no: 18, name: "version", kind: "message", T: TimedVersion }]);
class VideoLayer extends Message {
  constructor(u2) {
    super(), this.quality = VideoQuality$1.LOW, this.width = 0, this.height = 0, this.bitrate = 0, this.ssrc = 0, proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new VideoLayer().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new VideoLayer().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new VideoLayer().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(VideoLayer, u2, c);
  }
}
VideoLayer.runtime = proto3;
VideoLayer.typeName = "livekit.VideoLayer";
VideoLayer.fields = proto3.util.newFieldList(() => [{ no: 1, name: "quality", kind: "enum", T: proto3.getEnumType(VideoQuality$1) }, {
  no: 2,
  name: "width",
  kind: "scalar",
  T: 13
  /* ScalarType.UINT32 */
}, {
  no: 3,
  name: "height",
  kind: "scalar",
  T: 13
  /* ScalarType.UINT32 */
}, {
  no: 4,
  name: "bitrate",
  kind: "scalar",
  T: 13
  /* ScalarType.UINT32 */
}, {
  no: 5,
  name: "ssrc",
  kind: "scalar",
  T: 13
  /* ScalarType.UINT32 */
}]);
class DataPacket extends Message {
  constructor(u2) {
    super(), this.kind = DataPacket_Kind.RELIABLE, this.value = { case: void 0 }, proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new DataPacket().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new DataPacket().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new DataPacket().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(DataPacket, u2, c);
  }
}
DataPacket.runtime = proto3;
DataPacket.typeName = "livekit.DataPacket";
DataPacket.fields = proto3.util.newFieldList(() => [{ no: 1, name: "kind", kind: "enum", T: proto3.getEnumType(DataPacket_Kind) }, { no: 2, name: "user", kind: "message", T: UserPacket, oneof: "value" }, { no: 3, name: "speaker", kind: "message", T: ActiveSpeakerUpdate, oneof: "value" }]);
var DataPacket_Kind;
(function(a92) {
  a92[a92.RELIABLE = 0] = "RELIABLE", a92[a92.LOSSY = 1] = "LOSSY";
})(DataPacket_Kind || (DataPacket_Kind = {}));
proto3.util.setEnumType(DataPacket_Kind, "livekit.DataPacket.Kind", [{ no: 0, name: "RELIABLE" }, { no: 1, name: "LOSSY" }]);
class ActiveSpeakerUpdate extends Message {
  constructor(u2) {
    super(), this.speakers = [], proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new ActiveSpeakerUpdate().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new ActiveSpeakerUpdate().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new ActiveSpeakerUpdate().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(ActiveSpeakerUpdate, u2, c);
  }
}
ActiveSpeakerUpdate.runtime = proto3;
ActiveSpeakerUpdate.typeName = "livekit.ActiveSpeakerUpdate";
ActiveSpeakerUpdate.fields = proto3.util.newFieldList(() => [{ no: 1, name: "speakers", kind: "message", T: SpeakerInfo, repeated: true }]);
class SpeakerInfo extends Message {
  constructor(u2) {
    super(), this.sid = "", this.level = 0, this.active = false, proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new SpeakerInfo().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new SpeakerInfo().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new SpeakerInfo().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(SpeakerInfo, u2, c);
  }
}
SpeakerInfo.runtime = proto3;
SpeakerInfo.typeName = "livekit.SpeakerInfo";
SpeakerInfo.fields = proto3.util.newFieldList(() => [{
  no: 1,
  name: "sid",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, {
  no: 2,
  name: "level",
  kind: "scalar",
  T: 2
  /* ScalarType.FLOAT */
}, {
  no: 3,
  name: "active",
  kind: "scalar",
  T: 8
  /* ScalarType.BOOL */
}]);
class UserPacket extends Message {
  constructor(u2) {
    super(), this.participantSid = "", this.participantIdentity = "", this.payload = new Uint8Array(0), this.destinationSids = [], this.destinationIdentities = [], proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new UserPacket().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new UserPacket().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new UserPacket().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(UserPacket, u2, c);
  }
}
UserPacket.runtime = proto3;
UserPacket.typeName = "livekit.UserPacket";
UserPacket.fields = proto3.util.newFieldList(() => [{
  no: 1,
  name: "participant_sid",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, {
  no: 5,
  name: "participant_identity",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, {
  no: 2,
  name: "payload",
  kind: "scalar",
  T: 12
  /* ScalarType.BYTES */
}, { no: 3, name: "destination_sids", kind: "scalar", T: 9, repeated: true }, { no: 6, name: "destination_identities", kind: "scalar", T: 9, repeated: true }, { no: 4, name: "topic", kind: "scalar", T: 9, opt: true }]);
class ParticipantTracks extends Message {
  constructor(u2) {
    super(), this.participantSid = "", this.trackSids = [], proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new ParticipantTracks().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new ParticipantTracks().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new ParticipantTracks().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(ParticipantTracks, u2, c);
  }
}
ParticipantTracks.runtime = proto3;
ParticipantTracks.typeName = "livekit.ParticipantTracks";
ParticipantTracks.fields = proto3.util.newFieldList(() => [{
  no: 1,
  name: "participant_sid",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, { no: 2, name: "track_sids", kind: "scalar", T: 9, repeated: true }]);
class ServerInfo extends Message {
  constructor(u2) {
    super(), this.edition = ServerInfo_Edition.Standard, this.version = "", this.protocol = 0, this.region = "", this.nodeId = "", this.debugInfo = "", proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new ServerInfo().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new ServerInfo().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new ServerInfo().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(ServerInfo, u2, c);
  }
}
ServerInfo.runtime = proto3;
ServerInfo.typeName = "livekit.ServerInfo";
ServerInfo.fields = proto3.util.newFieldList(() => [{ no: 1, name: "edition", kind: "enum", T: proto3.getEnumType(ServerInfo_Edition) }, {
  no: 2,
  name: "version",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, {
  no: 3,
  name: "protocol",
  kind: "scalar",
  T: 5
  /* ScalarType.INT32 */
}, {
  no: 4,
  name: "region",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, {
  no: 5,
  name: "node_id",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, {
  no: 6,
  name: "debug_info",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}]);
var ServerInfo_Edition;
(function(a92) {
  a92[a92.Standard = 0] = "Standard", a92[a92.Cloud = 1] = "Cloud";
})(ServerInfo_Edition || (ServerInfo_Edition = {}));
proto3.util.setEnumType(ServerInfo_Edition, "livekit.ServerInfo.Edition", [{ no: 0, name: "Standard" }, { no: 1, name: "Cloud" }]);
class ClientInfo extends Message {
  constructor(u2) {
    super(), this.sdk = ClientInfo_SDK.UNKNOWN, this.version = "", this.protocol = 0, this.os = "", this.osVersion = "", this.deviceModel = "", this.browser = "", this.browserVersion = "", this.address = "", this.network = "", proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new ClientInfo().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new ClientInfo().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new ClientInfo().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(ClientInfo, u2, c);
  }
}
ClientInfo.runtime = proto3;
ClientInfo.typeName = "livekit.ClientInfo";
ClientInfo.fields = proto3.util.newFieldList(() => [{ no: 1, name: "sdk", kind: "enum", T: proto3.getEnumType(ClientInfo_SDK) }, {
  no: 2,
  name: "version",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, {
  no: 3,
  name: "protocol",
  kind: "scalar",
  T: 5
  /* ScalarType.INT32 */
}, {
  no: 4,
  name: "os",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, {
  no: 5,
  name: "os_version",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, {
  no: 6,
  name: "device_model",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, {
  no: 7,
  name: "browser",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, {
  no: 8,
  name: "browser_version",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, {
  no: 9,
  name: "address",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, {
  no: 10,
  name: "network",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}]);
var ClientInfo_SDK;
(function(a92) {
  a92[a92.UNKNOWN = 0] = "UNKNOWN", a92[a92.JS = 1] = "JS", a92[a92.SWIFT = 2] = "SWIFT", a92[a92.ANDROID = 3] = "ANDROID", a92[a92.FLUTTER = 4] = "FLUTTER", a92[a92.GO = 5] = "GO", a92[a92.UNITY = 6] = "UNITY", a92[a92.REACT_NATIVE = 7] = "REACT_NATIVE", a92[a92.RUST = 8] = "RUST", a92[a92.PYTHON = 9] = "PYTHON", a92[a92.CPP = 10] = "CPP";
})(ClientInfo_SDK || (ClientInfo_SDK = {}));
proto3.util.setEnumType(ClientInfo_SDK, "livekit.ClientInfo.SDK", [{ no: 0, name: "UNKNOWN" }, { no: 1, name: "JS" }, { no: 2, name: "SWIFT" }, { no: 3, name: "ANDROID" }, { no: 4, name: "FLUTTER" }, { no: 5, name: "GO" }, { no: 6, name: "UNITY" }, { no: 7, name: "REACT_NATIVE" }, { no: 8, name: "RUST" }, { no: 9, name: "PYTHON" }, { no: 10, name: "CPP" }]);
class ClientConfiguration extends Message {
  constructor(u2) {
    super(), this.resumeConnection = ClientConfigSetting.UNSET, this.forceRelay = ClientConfigSetting.UNSET, proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new ClientConfiguration().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new ClientConfiguration().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new ClientConfiguration().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(ClientConfiguration, u2, c);
  }
}
ClientConfiguration.runtime = proto3;
ClientConfiguration.typeName = "livekit.ClientConfiguration";
ClientConfiguration.fields = proto3.util.newFieldList(() => [{ no: 1, name: "video", kind: "message", T: VideoConfiguration }, { no: 2, name: "screen", kind: "message", T: VideoConfiguration }, { no: 3, name: "resume_connection", kind: "enum", T: proto3.getEnumType(ClientConfigSetting) }, { no: 4, name: "disabled_codecs", kind: "message", T: DisabledCodecs }, { no: 5, name: "force_relay", kind: "enum", T: proto3.getEnumType(ClientConfigSetting) }]);
class VideoConfiguration extends Message {
  constructor(u2) {
    super(), this.hardwareEncoder = ClientConfigSetting.UNSET, proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new VideoConfiguration().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new VideoConfiguration().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new VideoConfiguration().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(VideoConfiguration, u2, c);
  }
}
VideoConfiguration.runtime = proto3;
VideoConfiguration.typeName = "livekit.VideoConfiguration";
VideoConfiguration.fields = proto3.util.newFieldList(() => [{ no: 1, name: "hardware_encoder", kind: "enum", T: proto3.getEnumType(ClientConfigSetting) }]);
class DisabledCodecs extends Message {
  constructor(u2) {
    super(), this.codecs = [], this.publish = [], proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new DisabledCodecs().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new DisabledCodecs().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new DisabledCodecs().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(DisabledCodecs, u2, c);
  }
}
DisabledCodecs.runtime = proto3;
DisabledCodecs.typeName = "livekit.DisabledCodecs";
DisabledCodecs.fields = proto3.util.newFieldList(() => [{ no: 1, name: "codecs", kind: "message", T: Codec, repeated: true }, { no: 2, name: "publish", kind: "message", T: Codec, repeated: true }]);
class RTPDrift extends Message {
  constructor(u2) {
    super(), this.duration = 0, this.startTimestamp = protoInt64.zero, this.endTimestamp = protoInt64.zero, this.rtpClockTicks = protoInt64.zero, this.driftSamples = protoInt64.zero, this.driftMs = 0, this.clockRate = 0, proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new RTPDrift().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new RTPDrift().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new RTPDrift().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(RTPDrift, u2, c);
  }
}
RTPDrift.runtime = proto3;
RTPDrift.typeName = "livekit.RTPDrift";
RTPDrift.fields = proto3.util.newFieldList(() => [{ no: 1, name: "start_time", kind: "message", T: Timestamp }, { no: 2, name: "end_time", kind: "message", T: Timestamp }, {
  no: 3,
  name: "duration",
  kind: "scalar",
  T: 1
  /* ScalarType.DOUBLE */
}, {
  no: 4,
  name: "start_timestamp",
  kind: "scalar",
  T: 4
  /* ScalarType.UINT64 */
}, {
  no: 5,
  name: "end_timestamp",
  kind: "scalar",
  T: 4
  /* ScalarType.UINT64 */
}, {
  no: 6,
  name: "rtp_clock_ticks",
  kind: "scalar",
  T: 4
  /* ScalarType.UINT64 */
}, {
  no: 7,
  name: "drift_samples",
  kind: "scalar",
  T: 3
  /* ScalarType.INT64 */
}, {
  no: 8,
  name: "drift_ms",
  kind: "scalar",
  T: 1
  /* ScalarType.DOUBLE */
}, {
  no: 9,
  name: "clock_rate",
  kind: "scalar",
  T: 1
  /* ScalarType.DOUBLE */
}]);
class RTPStats extends Message {
  constructor(u2) {
    super(), this.duration = 0, this.packets = 0, this.packetRate = 0, this.bytes = protoInt64.zero, this.headerBytes = protoInt64.zero, this.bitrate = 0, this.packetsLost = 0, this.packetLossRate = 0, this.packetLossPercentage = 0, this.packetsDuplicate = 0, this.packetDuplicateRate = 0, this.bytesDuplicate = protoInt64.zero, this.headerBytesDuplicate = protoInt64.zero, this.bitrateDuplicate = 0, this.packetsPadding = 0, this.packetPaddingRate = 0, this.bytesPadding = protoInt64.zero, this.headerBytesPadding = protoInt64.zero, this.bitratePadding = 0, this.packetsOutOfOrder = 0, this.frames = 0, this.frameRate = 0, this.jitterCurrent = 0, this.jitterMax = 0, this.gapHistogram = {}, this.nacks = 0, this.nackAcks = 0, this.nackMisses = 0, this.nackRepeated = 0, this.plis = 0, this.firs = 0, this.rttCurrent = 0, this.rttMax = 0, this.keyFrames = 0, this.layerLockPlis = 0, proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new RTPStats().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new RTPStats().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new RTPStats().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(RTPStats, u2, c);
  }
}
RTPStats.runtime = proto3;
RTPStats.typeName = "livekit.RTPStats";
RTPStats.fields = proto3.util.newFieldList(() => [{ no: 1, name: "start_time", kind: "message", T: Timestamp }, { no: 2, name: "end_time", kind: "message", T: Timestamp }, {
  no: 3,
  name: "duration",
  kind: "scalar",
  T: 1
  /* ScalarType.DOUBLE */
}, {
  no: 4,
  name: "packets",
  kind: "scalar",
  T: 13
  /* ScalarType.UINT32 */
}, {
  no: 5,
  name: "packet_rate",
  kind: "scalar",
  T: 1
  /* ScalarType.DOUBLE */
}, {
  no: 6,
  name: "bytes",
  kind: "scalar",
  T: 4
  /* ScalarType.UINT64 */
}, {
  no: 39,
  name: "header_bytes",
  kind: "scalar",
  T: 4
  /* ScalarType.UINT64 */
}, {
  no: 7,
  name: "bitrate",
  kind: "scalar",
  T: 1
  /* ScalarType.DOUBLE */
}, {
  no: 8,
  name: "packets_lost",
  kind: "scalar",
  T: 13
  /* ScalarType.UINT32 */
}, {
  no: 9,
  name: "packet_loss_rate",
  kind: "scalar",
  T: 1
  /* ScalarType.DOUBLE */
}, {
  no: 10,
  name: "packet_loss_percentage",
  kind: "scalar",
  T: 2
  /* ScalarType.FLOAT */
}, {
  no: 11,
  name: "packets_duplicate",
  kind: "scalar",
  T: 13
  /* ScalarType.UINT32 */
}, {
  no: 12,
  name: "packet_duplicate_rate",
  kind: "scalar",
  T: 1
  /* ScalarType.DOUBLE */
}, {
  no: 13,
  name: "bytes_duplicate",
  kind: "scalar",
  T: 4
  /* ScalarType.UINT64 */
}, {
  no: 40,
  name: "header_bytes_duplicate",
  kind: "scalar",
  T: 4
  /* ScalarType.UINT64 */
}, {
  no: 14,
  name: "bitrate_duplicate",
  kind: "scalar",
  T: 1
  /* ScalarType.DOUBLE */
}, {
  no: 15,
  name: "packets_padding",
  kind: "scalar",
  T: 13
  /* ScalarType.UINT32 */
}, {
  no: 16,
  name: "packet_padding_rate",
  kind: "scalar",
  T: 1
  /* ScalarType.DOUBLE */
}, {
  no: 17,
  name: "bytes_padding",
  kind: "scalar",
  T: 4
  /* ScalarType.UINT64 */
}, {
  no: 41,
  name: "header_bytes_padding",
  kind: "scalar",
  T: 4
  /* ScalarType.UINT64 */
}, {
  no: 18,
  name: "bitrate_padding",
  kind: "scalar",
  T: 1
  /* ScalarType.DOUBLE */
}, {
  no: 19,
  name: "packets_out_of_order",
  kind: "scalar",
  T: 13
  /* ScalarType.UINT32 */
}, {
  no: 20,
  name: "frames",
  kind: "scalar",
  T: 13
  /* ScalarType.UINT32 */
}, {
  no: 21,
  name: "frame_rate",
  kind: "scalar",
  T: 1
  /* ScalarType.DOUBLE */
}, {
  no: 22,
  name: "jitter_current",
  kind: "scalar",
  T: 1
  /* ScalarType.DOUBLE */
}, {
  no: 23,
  name: "jitter_max",
  kind: "scalar",
  T: 1
  /* ScalarType.DOUBLE */
}, { no: 24, name: "gap_histogram", kind: "map", K: 5, V: {
  kind: "scalar",
  T: 13
  /* ScalarType.UINT32 */
} }, {
  no: 25,
  name: "nacks",
  kind: "scalar",
  T: 13
  /* ScalarType.UINT32 */
}, {
  no: 37,
  name: "nack_acks",
  kind: "scalar",
  T: 13
  /* ScalarType.UINT32 */
}, {
  no: 26,
  name: "nack_misses",
  kind: "scalar",
  T: 13
  /* ScalarType.UINT32 */
}, {
  no: 38,
  name: "nack_repeated",
  kind: "scalar",
  T: 13
  /* ScalarType.UINT32 */
}, {
  no: 27,
  name: "plis",
  kind: "scalar",
  T: 13
  /* ScalarType.UINT32 */
}, { no: 28, name: "last_pli", kind: "message", T: Timestamp }, {
  no: 29,
  name: "firs",
  kind: "scalar",
  T: 13
  /* ScalarType.UINT32 */
}, { no: 30, name: "last_fir", kind: "message", T: Timestamp }, {
  no: 31,
  name: "rtt_current",
  kind: "scalar",
  T: 13
  /* ScalarType.UINT32 */
}, {
  no: 32,
  name: "rtt_max",
  kind: "scalar",
  T: 13
  /* ScalarType.UINT32 */
}, {
  no: 33,
  name: "key_frames",
  kind: "scalar",
  T: 13
  /* ScalarType.UINT32 */
}, { no: 34, name: "last_key_frame", kind: "message", T: Timestamp }, {
  no: 35,
  name: "layer_lock_plis",
  kind: "scalar",
  T: 13
  /* ScalarType.UINT32 */
}, { no: 36, name: "last_layer_lock_pli", kind: "message", T: Timestamp }, { no: 44, name: "packet_drift", kind: "message", T: RTPDrift }, { no: 45, name: "report_drift", kind: "message", T: RTPDrift }]);
class TimedVersion extends Message {
  constructor(u2) {
    super(), this.unixMicro = protoInt64.zero, this.ticks = 0, proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new TimedVersion().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new TimedVersion().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new TimedVersion().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(TimedVersion, u2, c);
  }
}
TimedVersion.runtime = proto3;
TimedVersion.typeName = "livekit.TimedVersion";
TimedVersion.fields = proto3.util.newFieldList(() => [{
  no: 1,
  name: "unix_micro",
  kind: "scalar",
  T: 3
  /* ScalarType.INT64 */
}, {
  no: 2,
  name: "ticks",
  kind: "scalar",
  T: 5
  /* ScalarType.INT32 */
}]);
const maxRetryDelay = 7e3, DEFAULT_RETRY_DELAYS_IN_MS = [0, 300, 2 * 2 * 300, 3 * 3 * 300, 4 * 4 * 300, maxRetryDelay, maxRetryDelay, maxRetryDelay, maxRetryDelay, maxRetryDelay];
class DefaultReconnectPolicy {
  constructor(u2) {
    this._retryDelays = u2 !== void 0 ? [...u2] : DEFAULT_RETRY_DELAYS_IN_MS;
  }
  nextRetryDelayInMs(u2) {
    if (u2.retryCount >= this._retryDelays.length)
      return null;
    const c = this._retryDelays[u2.retryCount];
    return u2.retryCount <= 1 ? c : c + Math.random() * 1e3;
  }
}
function __awaiter(a92, u2, c, l2) {
  function v2(S2) {
    return S2 instanceof c ? S2 : new c(function(g2) {
      g2(S2);
    });
  }
  return new (c || (c = Promise))(function(S2, g2) {
    function E2(L2) {
      try {
        k(l2.next(L2));
      } catch (M2) {
        g2(M2);
      }
    }
    function _(L2) {
      try {
        k(l2.throw(L2));
      } catch (M2) {
        g2(M2);
      }
    }
    function k(L2) {
      L2.done ? S2(L2.value) : v2(L2.value).then(E2, _);
    }
    k((l2 = l2.apply(a92, u2 || [])).next());
  });
}
function __values(a92) {
  var u2 = typeof Symbol == "function" && Symbol.iterator, c = u2 && a92[u2], l2 = 0;
  if (c)
    return c.call(a92);
  if (a92 && typeof a92.length == "number")
    return { next: function() {
      return a92 && l2 >= a92.length && (a92 = void 0), { value: a92 && a92[l2++], done: !a92 };
    } };
  throw new TypeError(u2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __asyncValues(a92) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var u2 = a92[Symbol.asyncIterator], c;
  return u2 ? u2.call(a92) : (a92 = typeof __values == "function" ? __values(a92) : a92[Symbol.iterator](), c = {}, l2("next"), l2("throw"), l2("return"), c[Symbol.asyncIterator] = function() {
    return this;
  }, c);
  function l2(S2) {
    c[S2] = a92[S2] && function(g2) {
      return new Promise(function(E2, _) {
        g2 = a92[S2](g2), v2(E2, _, g2.done, g2.value);
      });
    };
  }
  function v2(S2, g2, E2, _) {
    Promise.resolve(_).then(function(k) {
      S2({ value: k, done: E2 });
    }, g2);
  }
}
typeof SuppressedError == "function" && SuppressedError;
var events = { exports: {} }, R = typeof Reflect == "object" ? Reflect : null, ReflectApply = R && typeof R.apply == "function" ? R.apply : function a73(u2, c, l2) {
  return Function.prototype.apply.call(u2, c, l2);
}, ReflectOwnKeys;
R && typeof R.ownKeys == "function" ? ReflectOwnKeys = R.ownKeys : Object.getOwnPropertySymbols ? ReflectOwnKeys = function(u2) {
  return Object.getOwnPropertyNames(u2).concat(Object.getOwnPropertySymbols(u2));
} : ReflectOwnKeys = function(u2) {
  return Object.getOwnPropertyNames(u2);
};
function ProcessEmitWarning(a92) {
  console && console.warn && console.warn(a92);
}
var NumberIsNaN = Number.isNaN || function a74(u2) {
  return u2 !== u2;
};
function EventEmitter() {
  EventEmitter.init.call(this);
}
events.exports = EventEmitter;
events.exports.once = once;
EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = void 0;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = void 0;
var defaultMaxListeners = 10;
function checkListener(a92) {
  if (typeof a92 != "function")
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof a92);
}
Object.defineProperty(EventEmitter, "defaultMaxListeners", { enumerable: true, get: function() {
  return defaultMaxListeners;
}, set: function(a92) {
  if (typeof a92 != "number" || a92 < 0 || NumberIsNaN(a92))
    throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + a92 + ".");
  defaultMaxListeners = a92;
} });
EventEmitter.init = function() {
  (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) && (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;
};
EventEmitter.prototype.setMaxListeners = function a75(u2) {
  if (typeof u2 != "number" || u2 < 0 || NumberIsNaN(u2))
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + u2 + ".");
  return this._maxListeners = u2, this;
};
function _getMaxListeners(a92) {
  return a92._maxListeners === void 0 ? EventEmitter.defaultMaxListeners : a92._maxListeners;
}
EventEmitter.prototype.getMaxListeners = function a76() {
  return _getMaxListeners(this);
};
EventEmitter.prototype.emit = function a77(u2) {
  for (var c = [], l2 = 1; l2 < arguments.length; l2++)
    c.push(arguments[l2]);
  var v2 = u2 === "error", S2 = this._events;
  if (S2 !== void 0)
    v2 = v2 && S2.error === void 0;
  else if (!v2)
    return false;
  if (v2) {
    var g2;
    if (c.length > 0 && (g2 = c[0]), g2 instanceof Error)
      throw g2;
    var E2 = new Error("Unhandled error." + (g2 ? " (" + g2.message + ")" : ""));
    throw E2.context = g2, E2;
  }
  var _ = S2[u2];
  if (_ === void 0)
    return false;
  if (typeof _ == "function")
    ReflectApply(_, this, c);
  else
    for (var k = _.length, L2 = arrayClone(_, k), l2 = 0; l2 < k; ++l2)
      ReflectApply(L2[l2], this, c);
  return true;
};
function _addListener(a92, u2, c, l2) {
  var v2, S2, g2;
  if (checkListener(c), S2 = a92._events, S2 === void 0 ? (S2 = a92._events = /* @__PURE__ */ Object.create(null), a92._eventsCount = 0) : (S2.newListener !== void 0 && (a92.emit("newListener", u2, c.listener ? c.listener : c), S2 = a92._events), g2 = S2[u2]), g2 === void 0)
    g2 = S2[u2] = c, ++a92._eventsCount;
  else if (typeof g2 == "function" ? g2 = S2[u2] = l2 ? [c, g2] : [g2, c] : l2 ? g2.unshift(c) : g2.push(c), v2 = _getMaxListeners(a92), v2 > 0 && g2.length > v2 && !g2.warned) {
    g2.warned = true;
    var E2 = new Error("Possible EventEmitter memory leak detected. " + g2.length + " " + String(u2) + " listeners added. Use emitter.setMaxListeners() to increase limit");
    E2.name = "MaxListenersExceededWarning", E2.emitter = a92, E2.type = u2, E2.count = g2.length, ProcessEmitWarning(E2);
  }
  return a92;
}
EventEmitter.prototype.addListener = function a78(u2, c) {
  return _addListener(this, u2, c, false);
};
EventEmitter.prototype.on = EventEmitter.prototype.addListener;
EventEmitter.prototype.prependListener = function a79(u2, c) {
  return _addListener(this, u2, c, true);
};
function onceWrapper() {
  if (!this.fired)
    return this.target.removeListener(this.type, this.wrapFn), this.fired = true, arguments.length === 0 ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);
}
function _onceWrap(a92, u2, c) {
  var l2 = { fired: false, wrapFn: void 0, target: a92, type: u2, listener: c }, v2 = onceWrapper.bind(l2);
  return v2.listener = c, l2.wrapFn = v2, v2;
}
EventEmitter.prototype.once = function a80(u2, c) {
  return checkListener(c), this.on(u2, _onceWrap(this, u2, c)), this;
};
EventEmitter.prototype.prependOnceListener = function a81(u2, c) {
  return checkListener(c), this.prependListener(u2, _onceWrap(this, u2, c)), this;
};
EventEmitter.prototype.removeListener = function a82(u2, c) {
  var l2, v2, S2, g2, E2;
  if (checkListener(c), v2 = this._events, v2 === void 0)
    return this;
  if (l2 = v2[u2], l2 === void 0)
    return this;
  if (l2 === c || l2.listener === c)
    --this._eventsCount === 0 ? this._events = /* @__PURE__ */ Object.create(null) : (delete v2[u2], v2.removeListener && this.emit("removeListener", u2, l2.listener || c));
  else if (typeof l2 != "function") {
    for (S2 = -1, g2 = l2.length - 1; g2 >= 0; g2--)
      if (l2[g2] === c || l2[g2].listener === c) {
        E2 = l2[g2].listener, S2 = g2;
        break;
      }
    if (S2 < 0)
      return this;
    S2 === 0 ? l2.shift() : spliceOne(l2, S2), l2.length === 1 && (v2[u2] = l2[0]), v2.removeListener !== void 0 && this.emit("removeListener", u2, E2 || c);
  }
  return this;
};
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.removeAllListeners = function a83(u2) {
  var c, l2, v2;
  if (l2 = this._events, l2 === void 0)
    return this;
  if (l2.removeListener === void 0)
    return arguments.length === 0 ? (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0) : l2[u2] !== void 0 && (--this._eventsCount === 0 ? this._events = /* @__PURE__ */ Object.create(null) : delete l2[u2]), this;
  if (arguments.length === 0) {
    var S2 = Object.keys(l2), g2;
    for (v2 = 0; v2 < S2.length; ++v2)
      g2 = S2[v2], g2 !== "removeListener" && this.removeAllListeners(g2);
    return this.removeAllListeners("removeListener"), this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0, this;
  }
  if (c = l2[u2], typeof c == "function")
    this.removeListener(u2, c);
  else if (c !== void 0)
    for (v2 = c.length - 1; v2 >= 0; v2--)
      this.removeListener(u2, c[v2]);
  return this;
};
function _listeners(a92, u2, c) {
  var l2 = a92._events;
  if (l2 === void 0)
    return [];
  var v2 = l2[u2];
  return v2 === void 0 ? [] : typeof v2 == "function" ? c ? [v2.listener || v2] : [v2] : c ? unwrapListeners(v2) : arrayClone(v2, v2.length);
}
EventEmitter.prototype.listeners = function a84(u2) {
  return _listeners(this, u2, true);
};
EventEmitter.prototype.rawListeners = function a85(u2) {
  return _listeners(this, u2, false);
};
EventEmitter.listenerCount = function(a92, u2) {
  return typeof a92.listenerCount == "function" ? a92.listenerCount(u2) : listenerCount.call(a92, u2);
};
EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(a92) {
  var u2 = this._events;
  if (u2 !== void 0) {
    var c = u2[a92];
    if (typeof c == "function")
      return 1;
    if (c !== void 0)
      return c.length;
  }
  return 0;
}
EventEmitter.prototype.eventNames = function a86() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};
function arrayClone(a92, u2) {
  for (var c = new Array(u2), l2 = 0; l2 < u2; ++l2)
    c[l2] = a92[l2];
  return c;
}
function spliceOne(a92, u2) {
  for (; u2 + 1 < a92.length; u2++)
    a92[u2] = a92[u2 + 1];
  a92.pop();
}
function unwrapListeners(a92) {
  for (var u2 = new Array(a92.length), c = 0; c < u2.length; ++c)
    u2[c] = a92[c].listener || a92[c];
  return u2;
}
function once(a92, u2) {
  return new Promise(function(c, l2) {
    function v2(g2) {
      a92.removeListener(u2, S2), l2(g2);
    }
    function S2() {
      typeof a92.removeListener == "function" && a92.removeListener("error", v2), c([].slice.call(arguments));
    }
    eventTargetAgnosticAddListener(a92, u2, S2, { once: true }), u2 !== "error" && addErrorHandlerIfEventEmitter(a92, v2, { once: true });
  });
}
function addErrorHandlerIfEventEmitter(a92, u2, c) {
  typeof a92.on == "function" && eventTargetAgnosticAddListener(a92, "error", u2, c);
}
function eventTargetAgnosticAddListener(a92, u2, c, l2) {
  if (typeof a92.on == "function")
    l2.once ? a92.once(u2, c) : a92.on(u2, c);
  else if (typeof a92.addEventListener == "function")
    a92.addEventListener(u2, function v2(S2) {
      l2.once && a92.removeEventListener(u2, v2), c(S2);
    });
  else
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof a92);
}
var eventsExports = events.exports;
let logDisabled_ = true, deprecationWarnings_ = true;
function extractVersion(a92, u2, c) {
  const l2 = a92.match(u2);
  return l2 && l2.length >= c && parseInt(l2[c], 10);
}
function wrapPeerConnectionEvent(a92, u2, c) {
  if (!a92.RTCPeerConnection)
    return;
  const l2 = a92.RTCPeerConnection.prototype, v2 = l2.addEventListener;
  l2.addEventListener = function(g2, E2) {
    if (g2 !== u2)
      return v2.apply(this, arguments);
    const _ = (k) => {
      const L2 = c(k);
      L2 && (E2.handleEvent ? E2.handleEvent(L2) : E2(L2));
    };
    return this._eventMap = this._eventMap || {}, this._eventMap[u2] || (this._eventMap[u2] = /* @__PURE__ */ new Map()), this._eventMap[u2].set(E2, _), v2.apply(this, [g2, _]);
  };
  const S2 = l2.removeEventListener;
  l2.removeEventListener = function(g2, E2) {
    if (g2 !== u2 || !this._eventMap || !this._eventMap[u2])
      return S2.apply(this, arguments);
    if (!this._eventMap[u2].has(E2))
      return S2.apply(this, arguments);
    const _ = this._eventMap[u2].get(E2);
    return this._eventMap[u2].delete(E2), this._eventMap[u2].size === 0 && delete this._eventMap[u2], Object.keys(this._eventMap).length === 0 && delete this._eventMap, S2.apply(this, [g2, _]);
  }, Object.defineProperty(l2, "on" + u2, { get() {
    return this["_on" + u2];
  }, set(g2) {
    this["_on" + u2] && (this.removeEventListener(u2, this["_on" + u2]), delete this["_on" + u2]), g2 && this.addEventListener(u2, this["_on" + u2] = g2);
  }, enumerable: true, configurable: true });
}
function disableLog(a92) {
  return typeof a92 != "boolean" ? new Error("Argument type: " + typeof a92 + ". Please use a boolean.") : (logDisabled_ = a92, a92 ? "adapter.js logging disabled" : "adapter.js logging enabled");
}
function disableWarnings(a92) {
  return typeof a92 != "boolean" ? new Error("Argument type: " + typeof a92 + ". Please use a boolean.") : (deprecationWarnings_ = !a92, "adapter.js deprecation warnings " + (a92 ? "disabled" : "enabled"));
}
function log() {
  if (typeof window == "object") {
    if (logDisabled_)
      return;
    typeof console < "u" && typeof console.log == "function" && console.log.apply(console, arguments);
  }
}
function deprecated(a92, u2) {
  deprecationWarnings_ && console.warn(a92 + " is deprecated, please use " + u2 + " instead.");
}
function detectBrowser(a92) {
  const u2 = { browser: null, version: null };
  if (typeof a92 > "u" || !a92.navigator || !a92.navigator.userAgent)
    return u2.browser = "Not a browser.", u2;
  const { navigator: c } = a92;
  if (c.mozGetUserMedia)
    u2.browser = "firefox", u2.version = extractVersion(c.userAgent, /Firefox\/(\d+)\./, 1);
  else if (c.webkitGetUserMedia || a92.isSecureContext === false && a92.webkitRTCPeerConnection)
    u2.browser = "chrome", u2.version = extractVersion(c.userAgent, /Chrom(e|ium)\/(\d+)\./, 2);
  else if (a92.RTCPeerConnection && c.userAgent.match(/AppleWebKit\/(\d+)\./))
    u2.browser = "safari", u2.version = extractVersion(c.userAgent, /AppleWebKit\/(\d+)\./, 1), u2.supportsUnifiedPlan = a92.RTCRtpTransceiver && "currentDirection" in a92.RTCRtpTransceiver.prototype;
  else
    return u2.browser = "Not a supported browser.", u2;
  return u2;
}
function isObject(a92) {
  return Object.prototype.toString.call(a92) === "[object Object]";
}
function compactObject(a92) {
  return isObject(a92) ? Object.keys(a92).reduce(function(u2, c) {
    const l2 = isObject(a92[c]), v2 = l2 ? compactObject(a92[c]) : a92[c], S2 = l2 && !Object.keys(v2).length;
    return v2 === void 0 || S2 ? u2 : Object.assign(u2, { [c]: v2 });
  }, {}) : a92;
}
function walkStats(a92, u2, c) {
  !u2 || c.has(u2.id) || (c.set(u2.id, u2), Object.keys(u2).forEach((l2) => {
    l2.endsWith("Id") ? walkStats(a92, a92.get(u2[l2]), c) : l2.endsWith("Ids") && u2[l2].forEach((v2) => {
      walkStats(a92, a92.get(v2), c);
    });
  }));
}
function filterStats(a92, u2, c) {
  const l2 = c ? "outbound-rtp" : "inbound-rtp", v2 = /* @__PURE__ */ new Map();
  if (u2 === null)
    return v2;
  const S2 = [];
  return a92.forEach((g2) => {
    g2.type === "track" && g2.trackIdentifier === u2.id && S2.push(g2);
  }), S2.forEach((g2) => {
    a92.forEach((E2) => {
      E2.type === l2 && E2.trackId === g2.id && walkStats(a92, E2, v2);
    });
  }), v2;
}
const logging = log;
function shimGetUserMedia$2(a92, u2) {
  const c = a92 && a92.navigator;
  if (!c.mediaDevices)
    return;
  const l2 = function(E2) {
    if (typeof E2 != "object" || E2.mandatory || E2.optional)
      return E2;
    const _ = {};
    return Object.keys(E2).forEach((k) => {
      if (k === "require" || k === "advanced" || k === "mediaSource")
        return;
      const L2 = typeof E2[k] == "object" ? E2[k] : { ideal: E2[k] };
      L2.exact !== void 0 && typeof L2.exact == "number" && (L2.min = L2.max = L2.exact);
      const M2 = function($, J2) {
        return $ ? $ + J2.charAt(0).toUpperCase() + J2.slice(1) : J2 === "deviceId" ? "sourceId" : J2;
      };
      if (L2.ideal !== void 0) {
        _.optional = _.optional || [];
        let $ = {};
        typeof L2.ideal == "number" ? ($[M2("min", k)] = L2.ideal, _.optional.push($), $ = {}, $[M2("max", k)] = L2.ideal, _.optional.push($)) : ($[M2("", k)] = L2.ideal, _.optional.push($));
      }
      L2.exact !== void 0 && typeof L2.exact != "number" ? (_.mandatory = _.mandatory || {}, _.mandatory[M2("", k)] = L2.exact) : ["min", "max"].forEach(($) => {
        L2[$] !== void 0 && (_.mandatory = _.mandatory || {}, _.mandatory[M2($, k)] = L2[$]);
      });
    }), E2.advanced && (_.optional = (_.optional || []).concat(E2.advanced)), _;
  }, v2 = function(E2, _) {
    if (u2.version >= 61)
      return _(E2);
    if (E2 = JSON.parse(JSON.stringify(E2)), E2 && typeof E2.audio == "object") {
      const k = function(L2, M2, $) {
        M2 in L2 && !($ in L2) && (L2[$] = L2[M2], delete L2[M2]);
      };
      E2 = JSON.parse(JSON.stringify(E2)), k(E2.audio, "autoGainControl", "googAutoGainControl"), k(E2.audio, "noiseSuppression", "googNoiseSuppression"), E2.audio = l2(E2.audio);
    }
    if (E2 && typeof E2.video == "object") {
      let k = E2.video.facingMode;
      k = k && (typeof k == "object" ? k : { ideal: k });
      const L2 = u2.version < 66;
      if (k && (k.exact === "user" || k.exact === "environment" || k.ideal === "user" || k.ideal === "environment") && !(c.mediaDevices.getSupportedConstraints && c.mediaDevices.getSupportedConstraints().facingMode && !L2)) {
        delete E2.video.facingMode;
        let M2;
        if (k.exact === "environment" || k.ideal === "environment" ? M2 = ["back", "rear"] : (k.exact === "user" || k.ideal === "user") && (M2 = ["front"]), M2)
          return c.mediaDevices.enumerateDevices().then(($) => {
            $ = $.filter((V2) => V2.kind === "videoinput");
            let J2 = $.find((V2) => M2.some((q2) => V2.label.toLowerCase().includes(q2)));
            return !J2 && $.length && M2.includes("back") && (J2 = $[$.length - 1]), J2 && (E2.video.deviceId = k.exact ? { exact: J2.deviceId } : { ideal: J2.deviceId }), E2.video = l2(E2.video), logging("chrome: " + JSON.stringify(E2)), _(E2);
          });
      }
      E2.video = l2(E2.video);
    }
    return logging("chrome: " + JSON.stringify(E2)), _(E2);
  }, S2 = function(E2) {
    return u2.version >= 64 ? E2 : { name: { PermissionDeniedError: "NotAllowedError", PermissionDismissedError: "NotAllowedError", InvalidStateError: "NotAllowedError", DevicesNotFoundError: "NotFoundError", ConstraintNotSatisfiedError: "OverconstrainedError", TrackStartError: "NotReadableError", MediaDeviceFailedDueToShutdown: "NotAllowedError", MediaDeviceKillSwitchOn: "NotAllowedError", TabCaptureError: "AbortError", ScreenCaptureError: "AbortError", DeviceCaptureError: "AbortError" }[E2.name] || E2.name, message: E2.message, constraint: E2.constraint || E2.constraintName, toString() {
      return this.name + (this.message && ": ") + this.message;
    } };
  }, g2 = function(E2, _, k) {
    v2(E2, (L2) => {
      c.webkitGetUserMedia(L2, _, (M2) => {
        k && k(S2(M2));
      });
    });
  };
  if (c.getUserMedia = g2.bind(c), c.mediaDevices.getUserMedia) {
    const E2 = c.mediaDevices.getUserMedia.bind(c.mediaDevices);
    c.mediaDevices.getUserMedia = function(_) {
      return v2(_, (k) => E2(k).then((L2) => {
        if (k.audio && !L2.getAudioTracks().length || k.video && !L2.getVideoTracks().length)
          throw L2.getTracks().forEach((M2) => {
            M2.stop();
          }), new DOMException("", "NotFoundError");
        return L2;
      }, (L2) => Promise.reject(S2(L2))));
    };
  }
}
function shimGetDisplayMedia$1(a92, u2) {
  if (!(a92.navigator.mediaDevices && "getDisplayMedia" in a92.navigator.mediaDevices) && a92.navigator.mediaDevices) {
    if (typeof u2 != "function") {
      console.error("shimGetDisplayMedia: getSourceId argument is not a function");
      return;
    }
    a92.navigator.mediaDevices.getDisplayMedia = function(l2) {
      return u2(l2).then((v2) => {
        const S2 = l2.video && l2.video.width, g2 = l2.video && l2.video.height, E2 = l2.video && l2.video.frameRate;
        return l2.video = { mandatory: { chromeMediaSource: "desktop", chromeMediaSourceId: v2, maxFrameRate: E2 || 3 } }, S2 && (l2.video.mandatory.maxWidth = S2), g2 && (l2.video.mandatory.maxHeight = g2), a92.navigator.mediaDevices.getUserMedia(l2);
      });
    };
  }
}
function shimMediaStream(a92) {
  a92.MediaStream = a92.MediaStream || a92.webkitMediaStream;
}
function shimOnTrack$1(a92) {
  if (typeof a92 == "object" && a92.RTCPeerConnection && !("ontrack" in a92.RTCPeerConnection.prototype)) {
    Object.defineProperty(a92.RTCPeerConnection.prototype, "ontrack", { get() {
      return this._ontrack;
    }, set(c) {
      this._ontrack && this.removeEventListener("track", this._ontrack), this.addEventListener("track", this._ontrack = c);
    }, enumerable: true, configurable: true });
    const u2 = a92.RTCPeerConnection.prototype.setRemoteDescription;
    a92.RTCPeerConnection.prototype.setRemoteDescription = function() {
      return this._ontrackpoly || (this._ontrackpoly = (l2) => {
        l2.stream.addEventListener("addtrack", (v2) => {
          let S2;
          a92.RTCPeerConnection.prototype.getReceivers ? S2 = this.getReceivers().find((E2) => E2.track && E2.track.id === v2.track.id) : S2 = { track: v2.track };
          const g2 = new Event("track");
          g2.track = v2.track, g2.receiver = S2, g2.transceiver = { receiver: S2 }, g2.streams = [l2.stream], this.dispatchEvent(g2);
        }), l2.stream.getTracks().forEach((v2) => {
          let S2;
          a92.RTCPeerConnection.prototype.getReceivers ? S2 = this.getReceivers().find((E2) => E2.track && E2.track.id === v2.id) : S2 = { track: v2 };
          const g2 = new Event("track");
          g2.track = v2, g2.receiver = S2, g2.transceiver = { receiver: S2 }, g2.streams = [l2.stream], this.dispatchEvent(g2);
        });
      }, this.addEventListener("addstream", this._ontrackpoly)), u2.apply(this, arguments);
    };
  } else
    wrapPeerConnectionEvent(a92, "track", (u2) => (u2.transceiver || Object.defineProperty(u2, "transceiver", { value: { receiver: u2.receiver } }), u2));
}
function shimGetSendersWithDtmf(a92) {
  if (typeof a92 == "object" && a92.RTCPeerConnection && !("getSenders" in a92.RTCPeerConnection.prototype) && "createDTMFSender" in a92.RTCPeerConnection.prototype) {
    const u2 = function(v2, S2) {
      return { track: S2, get dtmf() {
        return this._dtmf === void 0 && (S2.kind === "audio" ? this._dtmf = v2.createDTMFSender(S2) : this._dtmf = null), this._dtmf;
      }, _pc: v2 };
    };
    if (!a92.RTCPeerConnection.prototype.getSenders) {
      a92.RTCPeerConnection.prototype.getSenders = function() {
        return this._senders = this._senders || [], this._senders.slice();
      };
      const v2 = a92.RTCPeerConnection.prototype.addTrack;
      a92.RTCPeerConnection.prototype.addTrack = function(E2, _) {
        let k = v2.apply(this, arguments);
        return k || (k = u2(this, E2), this._senders.push(k)), k;
      };
      const S2 = a92.RTCPeerConnection.prototype.removeTrack;
      a92.RTCPeerConnection.prototype.removeTrack = function(E2) {
        S2.apply(this, arguments);
        const _ = this._senders.indexOf(E2);
        _ !== -1 && this._senders.splice(_, 1);
      };
    }
    const c = a92.RTCPeerConnection.prototype.addStream;
    a92.RTCPeerConnection.prototype.addStream = function(S2) {
      this._senders = this._senders || [], c.apply(this, [S2]), S2.getTracks().forEach((g2) => {
        this._senders.push(u2(this, g2));
      });
    };
    const l2 = a92.RTCPeerConnection.prototype.removeStream;
    a92.RTCPeerConnection.prototype.removeStream = function(S2) {
      this._senders = this._senders || [], l2.apply(this, [S2]), S2.getTracks().forEach((g2) => {
        const E2 = this._senders.find((_) => _.track === g2);
        E2 && this._senders.splice(this._senders.indexOf(E2), 1);
      });
    };
  } else if (typeof a92 == "object" && a92.RTCPeerConnection && "getSenders" in a92.RTCPeerConnection.prototype && "createDTMFSender" in a92.RTCPeerConnection.prototype && a92.RTCRtpSender && !("dtmf" in a92.RTCRtpSender.prototype)) {
    const u2 = a92.RTCPeerConnection.prototype.getSenders;
    a92.RTCPeerConnection.prototype.getSenders = function() {
      const l2 = u2.apply(this, []);
      return l2.forEach((v2) => v2._pc = this), l2;
    }, Object.defineProperty(a92.RTCRtpSender.prototype, "dtmf", { get() {
      return this._dtmf === void 0 && (this.track.kind === "audio" ? this._dtmf = this._pc.createDTMFSender(this.track) : this._dtmf = null), this._dtmf;
    } });
  }
}
function shimGetStats(a92) {
  if (!a92.RTCPeerConnection)
    return;
  const u2 = a92.RTCPeerConnection.prototype.getStats;
  a92.RTCPeerConnection.prototype.getStats = function() {
    const [l2, v2, S2] = arguments;
    if (arguments.length > 0 && typeof l2 == "function")
      return u2.apply(this, arguments);
    if (u2.length === 0 && (arguments.length === 0 || typeof l2 != "function"))
      return u2.apply(this, []);
    const g2 = function(_) {
      const k = {};
      return _.result().forEach((M2) => {
        const $ = { id: M2.id, timestamp: M2.timestamp, type: { localcandidate: "local-candidate", remotecandidate: "remote-candidate" }[M2.type] || M2.type };
        M2.names().forEach((J2) => {
          $[J2] = M2.stat(J2);
        }), k[$.id] = $;
      }), k;
    }, E2 = function(_) {
      return new Map(Object.keys(_).map((k) => [k, _[k]]));
    };
    if (arguments.length >= 2) {
      const _ = function(k) {
        v2(E2(g2(k)));
      };
      return u2.apply(this, [_, l2]);
    }
    return new Promise((_, k) => {
      u2.apply(this, [function(L2) {
        _(E2(g2(L2)));
      }, k]);
    }).then(v2, S2);
  };
}
function shimSenderReceiverGetStats(a92) {
  if (!(typeof a92 == "object" && a92.RTCPeerConnection && a92.RTCRtpSender && a92.RTCRtpReceiver))
    return;
  if (!("getStats" in a92.RTCRtpSender.prototype)) {
    const c = a92.RTCPeerConnection.prototype.getSenders;
    c && (a92.RTCPeerConnection.prototype.getSenders = function() {
      const S2 = c.apply(this, []);
      return S2.forEach((g2) => g2._pc = this), S2;
    });
    const l2 = a92.RTCPeerConnection.prototype.addTrack;
    l2 && (a92.RTCPeerConnection.prototype.addTrack = function() {
      const S2 = l2.apply(this, arguments);
      return S2._pc = this, S2;
    }), a92.RTCRtpSender.prototype.getStats = function() {
      const S2 = this;
      return this._pc.getStats().then((g2) => (
        /* Note: this will include stats of all senders that
        *   send a track with the same id as sender.track as
        *   it is not possible to identify the RTCRtpSender.
        */
        filterStats(g2, S2.track, true)
      ));
    };
  }
  if (!("getStats" in a92.RTCRtpReceiver.prototype)) {
    const c = a92.RTCPeerConnection.prototype.getReceivers;
    c && (a92.RTCPeerConnection.prototype.getReceivers = function() {
      const v2 = c.apply(this, []);
      return v2.forEach((S2) => S2._pc = this), v2;
    }), wrapPeerConnectionEvent(a92, "track", (l2) => (l2.receiver._pc = l2.srcElement, l2)), a92.RTCRtpReceiver.prototype.getStats = function() {
      const v2 = this;
      return this._pc.getStats().then((S2) => filterStats(S2, v2.track, false));
    };
  }
  if (!("getStats" in a92.RTCRtpSender.prototype && "getStats" in a92.RTCRtpReceiver.prototype))
    return;
  const u2 = a92.RTCPeerConnection.prototype.getStats;
  a92.RTCPeerConnection.prototype.getStats = function() {
    if (arguments.length > 0 && arguments[0] instanceof a92.MediaStreamTrack) {
      const l2 = arguments[0];
      let v2, S2, g2;
      return this.getSenders().forEach((E2) => {
        E2.track === l2 && (v2 ? g2 = true : v2 = E2);
      }), this.getReceivers().forEach((E2) => (E2.track === l2 && (S2 ? g2 = true : S2 = E2), E2.track === l2)), g2 || v2 && S2 ? Promise.reject(new DOMException("There are more than one sender or receiver for the track.", "InvalidAccessError")) : v2 ? v2.getStats() : S2 ? S2.getStats() : Promise.reject(new DOMException("There is no sender or receiver for the track.", "InvalidAccessError"));
    }
    return u2.apply(this, arguments);
  };
}
function shimAddTrackRemoveTrackWithNative(a92) {
  a92.RTCPeerConnection.prototype.getLocalStreams = function() {
    return this._shimmedLocalStreams = this._shimmedLocalStreams || {}, Object.keys(this._shimmedLocalStreams).map((g2) => this._shimmedLocalStreams[g2][0]);
  };
  const u2 = a92.RTCPeerConnection.prototype.addTrack;
  a92.RTCPeerConnection.prototype.addTrack = function(g2, E2) {
    if (!E2)
      return u2.apply(this, arguments);
    this._shimmedLocalStreams = this._shimmedLocalStreams || {};
    const _ = u2.apply(this, arguments);
    return this._shimmedLocalStreams[E2.id] ? this._shimmedLocalStreams[E2.id].indexOf(_) === -1 && this._shimmedLocalStreams[E2.id].push(_) : this._shimmedLocalStreams[E2.id] = [E2, _], _;
  };
  const c = a92.RTCPeerConnection.prototype.addStream;
  a92.RTCPeerConnection.prototype.addStream = function(g2) {
    this._shimmedLocalStreams = this._shimmedLocalStreams || {}, g2.getTracks().forEach((k) => {
      if (this.getSenders().find((M2) => M2.track === k))
        throw new DOMException("Track already exists.", "InvalidAccessError");
    });
    const E2 = this.getSenders();
    c.apply(this, arguments);
    const _ = this.getSenders().filter((k) => E2.indexOf(k) === -1);
    this._shimmedLocalStreams[g2.id] = [g2].concat(_);
  };
  const l2 = a92.RTCPeerConnection.prototype.removeStream;
  a92.RTCPeerConnection.prototype.removeStream = function(g2) {
    return this._shimmedLocalStreams = this._shimmedLocalStreams || {}, delete this._shimmedLocalStreams[g2.id], l2.apply(this, arguments);
  };
  const v2 = a92.RTCPeerConnection.prototype.removeTrack;
  a92.RTCPeerConnection.prototype.removeTrack = function(g2) {
    return this._shimmedLocalStreams = this._shimmedLocalStreams || {}, g2 && Object.keys(this._shimmedLocalStreams).forEach((E2) => {
      const _ = this._shimmedLocalStreams[E2].indexOf(g2);
      _ !== -1 && this._shimmedLocalStreams[E2].splice(_, 1), this._shimmedLocalStreams[E2].length === 1 && delete this._shimmedLocalStreams[E2];
    }), v2.apply(this, arguments);
  };
}
function shimAddTrackRemoveTrack(a92, u2) {
  if (!a92.RTCPeerConnection)
    return;
  if (a92.RTCPeerConnection.prototype.addTrack && u2.version >= 65)
    return shimAddTrackRemoveTrackWithNative(a92);
  const c = a92.RTCPeerConnection.prototype.getLocalStreams;
  a92.RTCPeerConnection.prototype.getLocalStreams = function() {
    const L2 = c.apply(this);
    return this._reverseStreams = this._reverseStreams || {}, L2.map((M2) => this._reverseStreams[M2.id]);
  };
  const l2 = a92.RTCPeerConnection.prototype.addStream;
  a92.RTCPeerConnection.prototype.addStream = function(L2) {
    if (this._streams = this._streams || {}, this._reverseStreams = this._reverseStreams || {}, L2.getTracks().forEach((M2) => {
      if (this.getSenders().find((J2) => J2.track === M2))
        throw new DOMException("Track already exists.", "InvalidAccessError");
    }), !this._reverseStreams[L2.id]) {
      const M2 = new a92.MediaStream(L2.getTracks());
      this._streams[L2.id] = M2, this._reverseStreams[M2.id] = L2, L2 = M2;
    }
    l2.apply(this, [L2]);
  };
  const v2 = a92.RTCPeerConnection.prototype.removeStream;
  a92.RTCPeerConnection.prototype.removeStream = function(L2) {
    this._streams = this._streams || {}, this._reverseStreams = this._reverseStreams || {}, v2.apply(this, [this._streams[L2.id] || L2]), delete this._reverseStreams[this._streams[L2.id] ? this._streams[L2.id].id : L2.id], delete this._streams[L2.id];
  }, a92.RTCPeerConnection.prototype.addTrack = function(L2, M2) {
    if (this.signalingState === "closed")
      throw new DOMException("The RTCPeerConnection's signalingState is 'closed'.", "InvalidStateError");
    const $ = [].slice.call(arguments, 1);
    if ($.length !== 1 || !$[0].getTracks().find((q2) => q2 === L2))
      throw new DOMException("The adapter.js addTrack polyfill only supports a single  stream which is associated with the specified track.", "NotSupportedError");
    if (this.getSenders().find((q2) => q2.track === L2))
      throw new DOMException("Track already exists.", "InvalidAccessError");
    this._streams = this._streams || {}, this._reverseStreams = this._reverseStreams || {};
    const V2 = this._streams[M2.id];
    if (V2)
      V2.addTrack(L2), Promise.resolve().then(() => {
        this.dispatchEvent(new Event("negotiationneeded"));
      });
    else {
      const q2 = new a92.MediaStream([L2]);
      this._streams[M2.id] = q2, this._reverseStreams[q2.id] = M2, this.addStream(q2);
    }
    return this.getSenders().find((q2) => q2.track === L2);
  };
  function S2(k, L2) {
    let M2 = L2.sdp;
    return Object.keys(k._reverseStreams || []).forEach(($) => {
      const J2 = k._reverseStreams[$], V2 = k._streams[J2.id];
      M2 = M2.replace(new RegExp(V2.id, "g"), J2.id);
    }), new RTCSessionDescription({ type: L2.type, sdp: M2 });
  }
  function g2(k, L2) {
    let M2 = L2.sdp;
    return Object.keys(k._reverseStreams || []).forEach(($) => {
      const J2 = k._reverseStreams[$], V2 = k._streams[J2.id];
      M2 = M2.replace(new RegExp(J2.id, "g"), V2.id);
    }), new RTCSessionDescription({ type: L2.type, sdp: M2 });
  }
  ["createOffer", "createAnswer"].forEach(function(k) {
    const L2 = a92.RTCPeerConnection.prototype[k], M2 = { [k]() {
      const $ = arguments;
      return arguments.length && typeof arguments[0] == "function" ? L2.apply(this, [(V2) => {
        const q2 = S2(this, V2);
        $[0].apply(null, [q2]);
      }, (V2) => {
        $[1] && $[1].apply(null, V2);
      }, arguments[2]]) : L2.apply(this, arguments).then((V2) => S2(this, V2));
    } };
    a92.RTCPeerConnection.prototype[k] = M2[k];
  });
  const E2 = a92.RTCPeerConnection.prototype.setLocalDescription;
  a92.RTCPeerConnection.prototype.setLocalDescription = function() {
    return !arguments.length || !arguments[0].type ? E2.apply(this, arguments) : (arguments[0] = g2(this, arguments[0]), E2.apply(this, arguments));
  };
  const _ = Object.getOwnPropertyDescriptor(a92.RTCPeerConnection.prototype, "localDescription");
  Object.defineProperty(a92.RTCPeerConnection.prototype, "localDescription", { get() {
    const k = _.get.apply(this);
    return k.type === "" ? k : S2(this, k);
  } }), a92.RTCPeerConnection.prototype.removeTrack = function(L2) {
    if (this.signalingState === "closed")
      throw new DOMException("The RTCPeerConnection's signalingState is 'closed'.", "InvalidStateError");
    if (!L2._pc)
      throw new DOMException("Argument 1 of RTCPeerConnection.removeTrack does not implement interface RTCRtpSender.", "TypeError");
    if (!(L2._pc === this))
      throw new DOMException("Sender was not created by this connection.", "InvalidAccessError");
    this._streams = this._streams || {};
    let $;
    Object.keys(this._streams).forEach((J2) => {
      this._streams[J2].getTracks().find((q2) => L2.track === q2) && ($ = this._streams[J2]);
    }), $ && ($.getTracks().length === 1 ? this.removeStream(this._reverseStreams[$.id]) : $.removeTrack(L2.track), this.dispatchEvent(new Event("negotiationneeded")));
  };
}
function shimPeerConnection$1(a92, u2) {
  !a92.RTCPeerConnection && a92.webkitRTCPeerConnection && (a92.RTCPeerConnection = a92.webkitRTCPeerConnection), a92.RTCPeerConnection && u2.version < 53 && ["setLocalDescription", "setRemoteDescription", "addIceCandidate"].forEach(function(c) {
    const l2 = a92.RTCPeerConnection.prototype[c], v2 = { [c]() {
      return arguments[0] = new (c === "addIceCandidate" ? a92.RTCIceCandidate : a92.RTCSessionDescription)(arguments[0]), l2.apply(this, arguments);
    } };
    a92.RTCPeerConnection.prototype[c] = v2[c];
  });
}
function fixNegotiationNeeded(a92, u2) {
  wrapPeerConnectionEvent(a92, "negotiationneeded", (c) => {
    const l2 = c.target;
    if (!((u2.version < 72 || l2.getConfiguration && l2.getConfiguration().sdpSemantics === "plan-b") && l2.signalingState !== "stable"))
      return c;
  });
}
var chromeShim = /* @__PURE__ */ Object.freeze({ __proto__: null, fixNegotiationNeeded, shimAddTrackRemoveTrack, shimAddTrackRemoveTrackWithNative, shimGetDisplayMedia: shimGetDisplayMedia$1, shimGetSendersWithDtmf, shimGetStats, shimGetUserMedia: shimGetUserMedia$2, shimMediaStream, shimOnTrack: shimOnTrack$1, shimPeerConnection: shimPeerConnection$1, shimSenderReceiverGetStats });
function shimGetUserMedia$1(a92, u2) {
  const c = a92 && a92.navigator, l2 = a92 && a92.MediaStreamTrack;
  if (c.getUserMedia = function(v2, S2, g2) {
    deprecated("navigator.getUserMedia", "navigator.mediaDevices.getUserMedia"), c.mediaDevices.getUserMedia(v2).then(S2, g2);
  }, !(u2.version > 55 && "autoGainControl" in c.mediaDevices.getSupportedConstraints())) {
    const v2 = function(g2, E2, _) {
      E2 in g2 && !(_ in g2) && (g2[_] = g2[E2], delete g2[E2]);
    }, S2 = c.mediaDevices.getUserMedia.bind(c.mediaDevices);
    if (c.mediaDevices.getUserMedia = function(g2) {
      return typeof g2 == "object" && typeof g2.audio == "object" && (g2 = JSON.parse(JSON.stringify(g2)), v2(g2.audio, "autoGainControl", "mozAutoGainControl"), v2(g2.audio, "noiseSuppression", "mozNoiseSuppression")), S2(g2);
    }, l2 && l2.prototype.getSettings) {
      const g2 = l2.prototype.getSettings;
      l2.prototype.getSettings = function() {
        const E2 = g2.apply(this, arguments);
        return v2(E2, "mozAutoGainControl", "autoGainControl"), v2(E2, "mozNoiseSuppression", "noiseSuppression"), E2;
      };
    }
    if (l2 && l2.prototype.applyConstraints) {
      const g2 = l2.prototype.applyConstraints;
      l2.prototype.applyConstraints = function(E2) {
        return this.kind === "audio" && typeof E2 == "object" && (E2 = JSON.parse(JSON.stringify(E2)), v2(E2, "autoGainControl", "mozAutoGainControl"), v2(E2, "noiseSuppression", "mozNoiseSuppression")), g2.apply(this, [E2]);
      };
    }
  }
}
function shimGetDisplayMedia(a92, u2) {
  a92.navigator.mediaDevices && "getDisplayMedia" in a92.navigator.mediaDevices || a92.navigator.mediaDevices && (a92.navigator.mediaDevices.getDisplayMedia = function(l2) {
    if (!(l2 && l2.video)) {
      const v2 = new DOMException("getDisplayMedia without video constraints is undefined");
      return v2.name = "NotFoundError", v2.code = 8, Promise.reject(v2);
    }
    return l2.video === true ? l2.video = { mediaSource: u2 } : l2.video.mediaSource = u2, a92.navigator.mediaDevices.getUserMedia(l2);
  });
}
function shimOnTrack(a92) {
  typeof a92 == "object" && a92.RTCTrackEvent && "receiver" in a92.RTCTrackEvent.prototype && !("transceiver" in a92.RTCTrackEvent.prototype) && Object.defineProperty(a92.RTCTrackEvent.prototype, "transceiver", { get() {
    return { receiver: this.receiver };
  } });
}
function shimPeerConnection(a92, u2) {
  if (typeof a92 != "object" || !(a92.RTCPeerConnection || a92.mozRTCPeerConnection))
    return;
  !a92.RTCPeerConnection && a92.mozRTCPeerConnection && (a92.RTCPeerConnection = a92.mozRTCPeerConnection), u2.version < 53 && ["setLocalDescription", "setRemoteDescription", "addIceCandidate"].forEach(function(v2) {
    const S2 = a92.RTCPeerConnection.prototype[v2], g2 = { [v2]() {
      return arguments[0] = new (v2 === "addIceCandidate" ? a92.RTCIceCandidate : a92.RTCSessionDescription)(arguments[0]), S2.apply(this, arguments);
    } };
    a92.RTCPeerConnection.prototype[v2] = g2[v2];
  });
  const c = { inboundrtp: "inbound-rtp", outboundrtp: "outbound-rtp", candidatepair: "candidate-pair", localcandidate: "local-candidate", remotecandidate: "remote-candidate" }, l2 = a92.RTCPeerConnection.prototype.getStats;
  a92.RTCPeerConnection.prototype.getStats = function() {
    const [S2, g2, E2] = arguments;
    return l2.apply(this, [S2 || null]).then((_) => {
      if (u2.version < 53 && !g2)
        try {
          _.forEach((k) => {
            k.type = c[k.type] || k.type;
          });
        } catch (k) {
          if (k.name !== "TypeError")
            throw k;
          _.forEach((L2, M2) => {
            _.set(M2, Object.assign({}, L2, { type: c[L2.type] || L2.type }));
          });
        }
      return _;
    }).then(g2, E2);
  };
}
function shimSenderGetStats(a92) {
  if (!(typeof a92 == "object" && a92.RTCPeerConnection && a92.RTCRtpSender) || a92.RTCRtpSender && "getStats" in a92.RTCRtpSender.prototype)
    return;
  const u2 = a92.RTCPeerConnection.prototype.getSenders;
  u2 && (a92.RTCPeerConnection.prototype.getSenders = function() {
    const v2 = u2.apply(this, []);
    return v2.forEach((S2) => S2._pc = this), v2;
  });
  const c = a92.RTCPeerConnection.prototype.addTrack;
  c && (a92.RTCPeerConnection.prototype.addTrack = function() {
    const v2 = c.apply(this, arguments);
    return v2._pc = this, v2;
  }), a92.RTCRtpSender.prototype.getStats = function() {
    return this.track ? this._pc.getStats(this.track) : Promise.resolve(/* @__PURE__ */ new Map());
  };
}
function shimReceiverGetStats(a92) {
  if (!(typeof a92 == "object" && a92.RTCPeerConnection && a92.RTCRtpSender) || a92.RTCRtpSender && "getStats" in a92.RTCRtpReceiver.prototype)
    return;
  const u2 = a92.RTCPeerConnection.prototype.getReceivers;
  u2 && (a92.RTCPeerConnection.prototype.getReceivers = function() {
    const l2 = u2.apply(this, []);
    return l2.forEach((v2) => v2._pc = this), l2;
  }), wrapPeerConnectionEvent(a92, "track", (c) => (c.receiver._pc = c.srcElement, c)), a92.RTCRtpReceiver.prototype.getStats = function() {
    return this._pc.getStats(this.track);
  };
}
function shimRemoveStream(a92) {
  !a92.RTCPeerConnection || "removeStream" in a92.RTCPeerConnection.prototype || (a92.RTCPeerConnection.prototype.removeStream = function(c) {
    deprecated("removeStream", "removeTrack"), this.getSenders().forEach((l2) => {
      l2.track && c.getTracks().includes(l2.track) && this.removeTrack(l2);
    });
  });
}
function shimRTCDataChannel(a92) {
  a92.DataChannel && !a92.RTCDataChannel && (a92.RTCDataChannel = a92.DataChannel);
}
function shimAddTransceiver(a92) {
  if (!(typeof a92 == "object" && a92.RTCPeerConnection))
    return;
  const u2 = a92.RTCPeerConnection.prototype.addTransceiver;
  u2 && (a92.RTCPeerConnection.prototype.addTransceiver = function() {
    this.setParametersPromises = [];
    let l2 = arguments[1] && arguments[1].sendEncodings;
    l2 === void 0 && (l2 = []), l2 = [...l2];
    const v2 = l2.length > 0;
    v2 && l2.forEach((g2) => {
      if ("rid" in g2 && !/^[a-z0-9]{0,16}$/i.test(g2.rid))
        throw new TypeError("Invalid RID value provided.");
      if ("scaleResolutionDownBy" in g2 && !(parseFloat(g2.scaleResolutionDownBy) >= 1))
        throw new RangeError("scale_resolution_down_by must be >= 1.0");
      if ("maxFramerate" in g2 && !(parseFloat(g2.maxFramerate) >= 0))
        throw new RangeError("max_framerate must be >= 0.0");
    });
    const S2 = u2.apply(this, arguments);
    if (v2) {
      const { sender: g2 } = S2, E2 = g2.getParameters();
      (!("encodings" in E2) || // Avoid being fooled by patched getParameters() below.
      E2.encodings.length === 1 && Object.keys(E2.encodings[0]).length === 0) && (E2.encodings = l2, g2.sendEncodings = l2, this.setParametersPromises.push(g2.setParameters(E2).then(() => {
        delete g2.sendEncodings;
      }).catch(() => {
        delete g2.sendEncodings;
      })));
    }
    return S2;
  });
}
function shimGetParameters(a92) {
  if (!(typeof a92 == "object" && a92.RTCRtpSender))
    return;
  const u2 = a92.RTCRtpSender.prototype.getParameters;
  u2 && (a92.RTCRtpSender.prototype.getParameters = function() {
    const l2 = u2.apply(this, arguments);
    return "encodings" in l2 || (l2.encodings = [].concat(this.sendEncodings || [{}])), l2;
  });
}
function shimCreateOffer(a92) {
  if (!(typeof a92 == "object" && a92.RTCPeerConnection))
    return;
  const u2 = a92.RTCPeerConnection.prototype.createOffer;
  a92.RTCPeerConnection.prototype.createOffer = function() {
    return this.setParametersPromises && this.setParametersPromises.length ? Promise.all(this.setParametersPromises).then(() => u2.apply(this, arguments)).finally(() => {
      this.setParametersPromises = [];
    }) : u2.apply(this, arguments);
  };
}
function shimCreateAnswer(a92) {
  if (!(typeof a92 == "object" && a92.RTCPeerConnection))
    return;
  const u2 = a92.RTCPeerConnection.prototype.createAnswer;
  a92.RTCPeerConnection.prototype.createAnswer = function() {
    return this.setParametersPromises && this.setParametersPromises.length ? Promise.all(this.setParametersPromises).then(() => u2.apply(this, arguments)).finally(() => {
      this.setParametersPromises = [];
    }) : u2.apply(this, arguments);
  };
}
var firefoxShim = /* @__PURE__ */ Object.freeze({ __proto__: null, shimAddTransceiver, shimCreateAnswer, shimCreateOffer, shimGetDisplayMedia, shimGetParameters, shimGetUserMedia: shimGetUserMedia$1, shimOnTrack, shimPeerConnection, shimRTCDataChannel, shimReceiverGetStats, shimRemoveStream, shimSenderGetStats });
function shimLocalStreamsAPI(a92) {
  if (!(typeof a92 != "object" || !a92.RTCPeerConnection)) {
    if ("getLocalStreams" in a92.RTCPeerConnection.prototype || (a92.RTCPeerConnection.prototype.getLocalStreams = function() {
      return this._localStreams || (this._localStreams = []), this._localStreams;
    }), !("addStream" in a92.RTCPeerConnection.prototype)) {
      const u2 = a92.RTCPeerConnection.prototype.addTrack;
      a92.RTCPeerConnection.prototype.addStream = function(l2) {
        this._localStreams || (this._localStreams = []), this._localStreams.includes(l2) || this._localStreams.push(l2), l2.getAudioTracks().forEach((v2) => u2.call(this, v2, l2)), l2.getVideoTracks().forEach((v2) => u2.call(this, v2, l2));
      }, a92.RTCPeerConnection.prototype.addTrack = function(l2) {
        for (var v2 = arguments.length, S2 = new Array(v2 > 1 ? v2 - 1 : 0), g2 = 1; g2 < v2; g2++)
          S2[g2 - 1] = arguments[g2];
        return S2 && S2.forEach((E2) => {
          this._localStreams ? this._localStreams.includes(E2) || this._localStreams.push(E2) : this._localStreams = [E2];
        }), u2.apply(this, arguments);
      };
    }
    "removeStream" in a92.RTCPeerConnection.prototype || (a92.RTCPeerConnection.prototype.removeStream = function(c) {
      this._localStreams || (this._localStreams = []);
      const l2 = this._localStreams.indexOf(c);
      if (l2 === -1)
        return;
      this._localStreams.splice(l2, 1);
      const v2 = c.getTracks();
      this.getSenders().forEach((S2) => {
        v2.includes(S2.track) && this.removeTrack(S2);
      });
    });
  }
}
function shimRemoteStreamsAPI(a92) {
  if (!(typeof a92 != "object" || !a92.RTCPeerConnection) && ("getRemoteStreams" in a92.RTCPeerConnection.prototype || (a92.RTCPeerConnection.prototype.getRemoteStreams = function() {
    return this._remoteStreams ? this._remoteStreams : [];
  }), !("onaddstream" in a92.RTCPeerConnection.prototype))) {
    Object.defineProperty(a92.RTCPeerConnection.prototype, "onaddstream", { get() {
      return this._onaddstream;
    }, set(c) {
      this._onaddstream && (this.removeEventListener("addstream", this._onaddstream), this.removeEventListener("track", this._onaddstreampoly)), this.addEventListener("addstream", this._onaddstream = c), this.addEventListener("track", this._onaddstreampoly = (l2) => {
        l2.streams.forEach((v2) => {
          if (this._remoteStreams || (this._remoteStreams = []), this._remoteStreams.includes(v2))
            return;
          this._remoteStreams.push(v2);
          const S2 = new Event("addstream");
          S2.stream = v2, this.dispatchEvent(S2);
        });
      });
    } });
    const u2 = a92.RTCPeerConnection.prototype.setRemoteDescription;
    a92.RTCPeerConnection.prototype.setRemoteDescription = function() {
      const l2 = this;
      return this._onaddstreampoly || this.addEventListener("track", this._onaddstreampoly = function(v2) {
        v2.streams.forEach((S2) => {
          if (l2._remoteStreams || (l2._remoteStreams = []), l2._remoteStreams.indexOf(S2) >= 0)
            return;
          l2._remoteStreams.push(S2);
          const g2 = new Event("addstream");
          g2.stream = S2, l2.dispatchEvent(g2);
        });
      }), u2.apply(l2, arguments);
    };
  }
}
function shimCallbacksAPI(a92) {
  if (typeof a92 != "object" || !a92.RTCPeerConnection)
    return;
  const u2 = a92.RTCPeerConnection.prototype, c = u2.createOffer, l2 = u2.createAnswer, v2 = u2.setLocalDescription, S2 = u2.setRemoteDescription, g2 = u2.addIceCandidate;
  u2.createOffer = function(k, L2) {
    const M2 = arguments.length >= 2 ? arguments[2] : arguments[0], $ = c.apply(this, [M2]);
    return L2 ? ($.then(k, L2), Promise.resolve()) : $;
  }, u2.createAnswer = function(k, L2) {
    const M2 = arguments.length >= 2 ? arguments[2] : arguments[0], $ = l2.apply(this, [M2]);
    return L2 ? ($.then(k, L2), Promise.resolve()) : $;
  };
  let E2 = function(_, k, L2) {
    const M2 = v2.apply(this, [_]);
    return L2 ? (M2.then(k, L2), Promise.resolve()) : M2;
  };
  u2.setLocalDescription = E2, E2 = function(_, k, L2) {
    const M2 = S2.apply(this, [_]);
    return L2 ? (M2.then(k, L2), Promise.resolve()) : M2;
  }, u2.setRemoteDescription = E2, E2 = function(_, k, L2) {
    const M2 = g2.apply(this, [_]);
    return L2 ? (M2.then(k, L2), Promise.resolve()) : M2;
  }, u2.addIceCandidate = E2;
}
function shimGetUserMedia(a92) {
  const u2 = a92 && a92.navigator;
  if (u2.mediaDevices && u2.mediaDevices.getUserMedia) {
    const c = u2.mediaDevices, l2 = c.getUserMedia.bind(c);
    u2.mediaDevices.getUserMedia = (v2) => l2(shimConstraints(v2));
  }
  !u2.getUserMedia && u2.mediaDevices && u2.mediaDevices.getUserMedia && (u2.getUserMedia = (function(l2, v2, S2) {
    u2.mediaDevices.getUserMedia(l2).then(v2, S2);
  }).bind(u2));
}
function shimConstraints(a92) {
  return a92 && a92.video !== void 0 ? Object.assign({}, a92, { video: compactObject(a92.video) }) : a92;
}
function shimRTCIceServerUrls(a92) {
  if (!a92.RTCPeerConnection)
    return;
  const u2 = a92.RTCPeerConnection;
  a92.RTCPeerConnection = function(l2, v2) {
    if (l2 && l2.iceServers) {
      const S2 = [];
      for (let g2 = 0; g2 < l2.iceServers.length; g2++) {
        let E2 = l2.iceServers[g2];
        E2.urls === void 0 && E2.url ? (deprecated("RTCIceServer.url", "RTCIceServer.urls"), E2 = JSON.parse(JSON.stringify(E2)), E2.urls = E2.url, delete E2.url, S2.push(E2)) : S2.push(l2.iceServers[g2]);
      }
      l2.iceServers = S2;
    }
    return new u2(l2, v2);
  }, a92.RTCPeerConnection.prototype = u2.prototype, "generateCertificate" in u2 && Object.defineProperty(a92.RTCPeerConnection, "generateCertificate", { get() {
    return u2.generateCertificate;
  } });
}
function shimTrackEventTransceiver(a92) {
  typeof a92 == "object" && a92.RTCTrackEvent && "receiver" in a92.RTCTrackEvent.prototype && !("transceiver" in a92.RTCTrackEvent.prototype) && Object.defineProperty(a92.RTCTrackEvent.prototype, "transceiver", { get() {
    return { receiver: this.receiver };
  } });
}
function shimCreateOfferLegacy(a92) {
  const u2 = a92.RTCPeerConnection.prototype.createOffer;
  a92.RTCPeerConnection.prototype.createOffer = function(l2) {
    if (l2) {
      typeof l2.offerToReceiveAudio < "u" && (l2.offerToReceiveAudio = !!l2.offerToReceiveAudio);
      const v2 = this.getTransceivers().find((g2) => g2.receiver.track.kind === "audio");
      l2.offerToReceiveAudio === false && v2 ? v2.direction === "sendrecv" ? v2.setDirection ? v2.setDirection("sendonly") : v2.direction = "sendonly" : v2.direction === "recvonly" && (v2.setDirection ? v2.setDirection("inactive") : v2.direction = "inactive") : l2.offerToReceiveAudio === true && !v2 && this.addTransceiver("audio", { direction: "recvonly" }), typeof l2.offerToReceiveVideo < "u" && (l2.offerToReceiveVideo = !!l2.offerToReceiveVideo);
      const S2 = this.getTransceivers().find((g2) => g2.receiver.track.kind === "video");
      l2.offerToReceiveVideo === false && S2 ? S2.direction === "sendrecv" ? S2.setDirection ? S2.setDirection("sendonly") : S2.direction = "sendonly" : S2.direction === "recvonly" && (S2.setDirection ? S2.setDirection("inactive") : S2.direction = "inactive") : l2.offerToReceiveVideo === true && !S2 && this.addTransceiver("video", { direction: "recvonly" });
    }
    return u2.apply(this, arguments);
  };
}
function shimAudioContext(a92) {
  typeof a92 != "object" || a92.AudioContext || (a92.AudioContext = a92.webkitAudioContext);
}
var safariShim = /* @__PURE__ */ Object.freeze({ __proto__: null, shimAudioContext, shimCallbacksAPI, shimConstraints, shimCreateOfferLegacy, shimGetUserMedia, shimLocalStreamsAPI, shimRTCIceServerUrls, shimRemoteStreamsAPI, shimTrackEventTransceiver }), sdp$1 = { exports: {} };
(function(a92) {
  const u2 = {};
  u2.generateIdentifier = function() {
    return Math.random().toString(36).substring(2, 12);
  }, u2.localCName = u2.generateIdentifier(), u2.splitLines = function(c) {
    return c.trim().split(`
`).map((l2) => l2.trim());
  }, u2.splitSections = function(c) {
    return c.split(`
m=`).map((v2, S2) => (S2 > 0 ? "m=" + v2 : v2).trim() + `\r
`);
  }, u2.getDescription = function(c) {
    const l2 = u2.splitSections(c);
    return l2 && l2[0];
  }, u2.getMediaSections = function(c) {
    const l2 = u2.splitSections(c);
    return l2.shift(), l2;
  }, u2.matchPrefix = function(c, l2) {
    return u2.splitLines(c).filter((v2) => v2.indexOf(l2) === 0);
  }, u2.parseCandidate = function(c) {
    let l2;
    c.indexOf("a=candidate:") === 0 ? l2 = c.substring(12).split(" ") : l2 = c.substring(10).split(" ");
    const v2 = {
      foundation: l2[0],
      component: { 1: "rtp", 2: "rtcp" }[l2[1]] || l2[1],
      protocol: l2[2].toLowerCase(),
      priority: parseInt(l2[3], 10),
      ip: l2[4],
      address: l2[4],
      // address is an alias for ip.
      port: parseInt(l2[5], 10),
      // skip parts[6] == 'typ'
      type: l2[7]
    };
    for (let S2 = 8; S2 < l2.length; S2 += 2)
      switch (l2[S2]) {
        case "raddr":
          v2.relatedAddress = l2[S2 + 1];
          break;
        case "rport":
          v2.relatedPort = parseInt(l2[S2 + 1], 10);
          break;
        case "tcptype":
          v2.tcpType = l2[S2 + 1];
          break;
        case "ufrag":
          v2.ufrag = l2[S2 + 1], v2.usernameFragment = l2[S2 + 1];
          break;
        default:
          v2[l2[S2]] === void 0 && (v2[l2[S2]] = l2[S2 + 1]);
          break;
      }
    return v2;
  }, u2.writeCandidate = function(c) {
    const l2 = [];
    l2.push(c.foundation);
    const v2 = c.component;
    v2 === "rtp" ? l2.push(1) : v2 === "rtcp" ? l2.push(2) : l2.push(v2), l2.push(c.protocol.toUpperCase()), l2.push(c.priority), l2.push(c.address || c.ip), l2.push(c.port);
    const S2 = c.type;
    return l2.push("typ"), l2.push(S2), S2 !== "host" && c.relatedAddress && c.relatedPort && (l2.push("raddr"), l2.push(c.relatedAddress), l2.push("rport"), l2.push(c.relatedPort)), c.tcpType && c.protocol.toLowerCase() === "tcp" && (l2.push("tcptype"), l2.push(c.tcpType)), (c.usernameFragment || c.ufrag) && (l2.push("ufrag"), l2.push(c.usernameFragment || c.ufrag)), "candidate:" + l2.join(" ");
  }, u2.parseIceOptions = function(c) {
    return c.substring(14).split(" ");
  }, u2.parseRtpMap = function(c) {
    let l2 = c.substring(9).split(" ");
    const v2 = {
      payloadType: parseInt(l2.shift(), 10)
      // was: id
    };
    return l2 = l2[0].split("/"), v2.name = l2[0], v2.clockRate = parseInt(l2[1], 10), v2.channels = l2.length === 3 ? parseInt(l2[2], 10) : 1, v2.numChannels = v2.channels, v2;
  }, u2.writeRtpMap = function(c) {
    let l2 = c.payloadType;
    c.preferredPayloadType !== void 0 && (l2 = c.preferredPayloadType);
    const v2 = c.channels || c.numChannels || 1;
    return "a=rtpmap:" + l2 + " " + c.name + "/" + c.clockRate + (v2 !== 1 ? "/" + v2 : "") + `\r
`;
  }, u2.parseExtmap = function(c) {
    const l2 = c.substring(9).split(" ");
    return { id: parseInt(l2[0], 10), direction: l2[0].indexOf("/") > 0 ? l2[0].split("/")[1] : "sendrecv", uri: l2[1], attributes: l2.slice(2).join(" ") };
  }, u2.writeExtmap = function(c) {
    return "a=extmap:" + (c.id || c.preferredId) + (c.direction && c.direction !== "sendrecv" ? "/" + c.direction : "") + " " + c.uri + (c.attributes ? " " + c.attributes : "") + `\r
`;
  }, u2.parseFmtp = function(c) {
    const l2 = {};
    let v2;
    const S2 = c.substring(c.indexOf(" ") + 1).split(";");
    for (let g2 = 0; g2 < S2.length; g2++)
      v2 = S2[g2].trim().split("="), l2[v2[0].trim()] = v2[1];
    return l2;
  }, u2.writeFmtp = function(c) {
    let l2 = "", v2 = c.payloadType;
    if (c.preferredPayloadType !== void 0 && (v2 = c.preferredPayloadType), c.parameters && Object.keys(c.parameters).length) {
      const S2 = [];
      Object.keys(c.parameters).forEach((g2) => {
        c.parameters[g2] !== void 0 ? S2.push(g2 + "=" + c.parameters[g2]) : S2.push(g2);
      }), l2 += "a=fmtp:" + v2 + " " + S2.join(";") + `\r
`;
    }
    return l2;
  }, u2.parseRtcpFb = function(c) {
    const l2 = c.substring(c.indexOf(" ") + 1).split(" ");
    return { type: l2.shift(), parameter: l2.join(" ") };
  }, u2.writeRtcpFb = function(c) {
    let l2 = "", v2 = c.payloadType;
    return c.preferredPayloadType !== void 0 && (v2 = c.preferredPayloadType), c.rtcpFeedback && c.rtcpFeedback.length && c.rtcpFeedback.forEach((S2) => {
      l2 += "a=rtcp-fb:" + v2 + " " + S2.type + (S2.parameter && S2.parameter.length ? " " + S2.parameter : "") + `\r
`;
    }), l2;
  }, u2.parseSsrcMedia = function(c) {
    const l2 = c.indexOf(" "), v2 = { ssrc: parseInt(c.substring(7, l2), 10) }, S2 = c.indexOf(":", l2);
    return S2 > -1 ? (v2.attribute = c.substring(l2 + 1, S2), v2.value = c.substring(S2 + 1)) : v2.attribute = c.substring(l2 + 1), v2;
  }, u2.parseSsrcGroup = function(c) {
    const l2 = c.substring(13).split(" ");
    return { semantics: l2.shift(), ssrcs: l2.map((v2) => parseInt(v2, 10)) };
  }, u2.getMid = function(c) {
    const l2 = u2.matchPrefix(c, "a=mid:")[0];
    if (l2)
      return l2.substring(6);
  }, u2.parseFingerprint = function(c) {
    const l2 = c.substring(14).split(" ");
    return {
      algorithm: l2[0].toLowerCase(),
      // algorithm is case-sensitive in Edge.
      value: l2[1].toUpperCase()
      // the definition is upper-case in RFC 4572.
    };
  }, u2.getDtlsParameters = function(c, l2) {
    return { role: "auto", fingerprints: u2.matchPrefix(c + l2, "a=fingerprint:").map(u2.parseFingerprint) };
  }, u2.writeDtlsParameters = function(c, l2) {
    let v2 = "a=setup:" + l2 + `\r
`;
    return c.fingerprints.forEach((S2) => {
      v2 += "a=fingerprint:" + S2.algorithm + " " + S2.value + `\r
`;
    }), v2;
  }, u2.parseCryptoLine = function(c) {
    const l2 = c.substring(9).split(" ");
    return { tag: parseInt(l2[0], 10), cryptoSuite: l2[1], keyParams: l2[2], sessionParams: l2.slice(3) };
  }, u2.writeCryptoLine = function(c) {
    return "a=crypto:" + c.tag + " " + c.cryptoSuite + " " + (typeof c.keyParams == "object" ? u2.writeCryptoKeyParams(c.keyParams) : c.keyParams) + (c.sessionParams ? " " + c.sessionParams.join(" ") : "") + `\r
`;
  }, u2.parseCryptoKeyParams = function(c) {
    if (c.indexOf("inline:") !== 0)
      return null;
    const l2 = c.substring(7).split("|");
    return { keyMethod: "inline", keySalt: l2[0], lifeTime: l2[1], mkiValue: l2[2] ? l2[2].split(":")[0] : void 0, mkiLength: l2[2] ? l2[2].split(":")[1] : void 0 };
  }, u2.writeCryptoKeyParams = function(c) {
    return c.keyMethod + ":" + c.keySalt + (c.lifeTime ? "|" + c.lifeTime : "") + (c.mkiValue && c.mkiLength ? "|" + c.mkiValue + ":" + c.mkiLength : "");
  }, u2.getCryptoParameters = function(c, l2) {
    return u2.matchPrefix(c + l2, "a=crypto:").map(u2.parseCryptoLine);
  }, u2.getIceParameters = function(c, l2) {
    const v2 = u2.matchPrefix(c + l2, "a=ice-ufrag:")[0], S2 = u2.matchPrefix(c + l2, "a=ice-pwd:")[0];
    return v2 && S2 ? { usernameFragment: v2.substring(12), password: S2.substring(10) } : null;
  }, u2.writeIceParameters = function(c) {
    let l2 = "a=ice-ufrag:" + c.usernameFragment + `\r
a=ice-pwd:` + c.password + `\r
`;
    return c.iceLite && (l2 += `a=ice-lite\r
`), l2;
  }, u2.parseRtpParameters = function(c) {
    const l2 = { codecs: [], headerExtensions: [], fecMechanisms: [], rtcp: [] }, S2 = u2.splitLines(c)[0].split(" ");
    l2.profile = S2[2];
    for (let E2 = 3; E2 < S2.length; E2++) {
      const _ = S2[E2], k = u2.matchPrefix(c, "a=rtpmap:" + _ + " ")[0];
      if (k) {
        const L2 = u2.parseRtpMap(k), M2 = u2.matchPrefix(c, "a=fmtp:" + _ + " ");
        switch (L2.parameters = M2.length ? u2.parseFmtp(M2[0]) : {}, L2.rtcpFeedback = u2.matchPrefix(c, "a=rtcp-fb:" + _ + " ").map(u2.parseRtcpFb), l2.codecs.push(L2), L2.name.toUpperCase()) {
          case "RED":
          case "ULPFEC":
            l2.fecMechanisms.push(L2.name.toUpperCase());
            break;
        }
      }
    }
    u2.matchPrefix(c, "a=extmap:").forEach((E2) => {
      l2.headerExtensions.push(u2.parseExtmap(E2));
    });
    const g2 = u2.matchPrefix(c, "a=rtcp-fb:* ").map(u2.parseRtcpFb);
    return l2.codecs.forEach((E2) => {
      g2.forEach((_) => {
        E2.rtcpFeedback.find((L2) => L2.type === _.type && L2.parameter === _.parameter) || E2.rtcpFeedback.push(_);
      });
    }), l2;
  }, u2.writeRtpDescription = function(c, l2) {
    let v2 = "";
    v2 += "m=" + c + " ", v2 += l2.codecs.length > 0 ? "9" : "0", v2 += " " + (l2.profile || "UDP/TLS/RTP/SAVPF") + " ", v2 += l2.codecs.map((g2) => g2.preferredPayloadType !== void 0 ? g2.preferredPayloadType : g2.payloadType).join(" ") + `\r
`, v2 += `c=IN IP4 0.0.0.0\r
`, v2 += `a=rtcp:9 IN IP4 0.0.0.0\r
`, l2.codecs.forEach((g2) => {
      v2 += u2.writeRtpMap(g2), v2 += u2.writeFmtp(g2), v2 += u2.writeRtcpFb(g2);
    });
    let S2 = 0;
    return l2.codecs.forEach((g2) => {
      g2.maxptime > S2 && (S2 = g2.maxptime);
    }), S2 > 0 && (v2 += "a=maxptime:" + S2 + `\r
`), l2.headerExtensions && l2.headerExtensions.forEach((g2) => {
      v2 += u2.writeExtmap(g2);
    }), v2;
  }, u2.parseRtpEncodingParameters = function(c) {
    const l2 = [], v2 = u2.parseRtpParameters(c), S2 = v2.fecMechanisms.indexOf("RED") !== -1, g2 = v2.fecMechanisms.indexOf("ULPFEC") !== -1, E2 = u2.matchPrefix(c, "a=ssrc:").map(($) => u2.parseSsrcMedia($)).filter(($) => $.attribute === "cname"), _ = E2.length > 0 && E2[0].ssrc;
    let k;
    const L2 = u2.matchPrefix(c, "a=ssrc-group:FID").map(($) => $.substring(17).split(" ").map((V2) => parseInt(V2, 10)));
    L2.length > 0 && L2[0].length > 1 && L2[0][0] === _ && (k = L2[0][1]), v2.codecs.forEach(($) => {
      if ($.name.toUpperCase() === "RTX" && $.parameters.apt) {
        let J2 = { ssrc: _, codecPayloadType: parseInt($.parameters.apt, 10) };
        _ && k && (J2.rtx = { ssrc: k }), l2.push(J2), S2 && (J2 = JSON.parse(JSON.stringify(J2)), J2.fec = { ssrc: _, mechanism: g2 ? "red+ulpfec" : "red" }, l2.push(J2));
      }
    }), l2.length === 0 && _ && l2.push({ ssrc: _ });
    let M2 = u2.matchPrefix(c, "b=");
    return M2.length && (M2[0].indexOf("b=TIAS:") === 0 ? M2 = parseInt(M2[0].substring(7), 10) : M2[0].indexOf("b=AS:") === 0 ? M2 = parseInt(M2[0].substring(5), 10) * 1e3 * 0.95 - 50 * 40 * 8 : M2 = void 0, l2.forEach(($) => {
      $.maxBitrate = M2;
    })), l2;
  }, u2.parseRtcpParameters = function(c) {
    const l2 = {}, v2 = u2.matchPrefix(c, "a=ssrc:").map((E2) => u2.parseSsrcMedia(E2)).filter((E2) => E2.attribute === "cname")[0];
    v2 && (l2.cname = v2.value, l2.ssrc = v2.ssrc);
    const S2 = u2.matchPrefix(c, "a=rtcp-rsize");
    l2.reducedSize = S2.length > 0, l2.compound = S2.length === 0;
    const g2 = u2.matchPrefix(c, "a=rtcp-mux");
    return l2.mux = g2.length > 0, l2;
  }, u2.writeRtcpParameters = function(c) {
    let l2 = "";
    return c.reducedSize && (l2 += `a=rtcp-rsize\r
`), c.mux && (l2 += `a=rtcp-mux\r
`), c.ssrc !== void 0 && c.cname && (l2 += "a=ssrc:" + c.ssrc + " cname:" + c.cname + `\r
`), l2;
  }, u2.parseMsid = function(c) {
    let l2;
    const v2 = u2.matchPrefix(c, "a=msid:");
    if (v2.length === 1)
      return l2 = v2[0].substring(7).split(" "), { stream: l2[0], track: l2[1] };
    const S2 = u2.matchPrefix(c, "a=ssrc:").map((g2) => u2.parseSsrcMedia(g2)).filter((g2) => g2.attribute === "msid");
    if (S2.length > 0)
      return l2 = S2[0].value.split(" "), { stream: l2[0], track: l2[1] };
  }, u2.parseSctpDescription = function(c) {
    const l2 = u2.parseMLine(c), v2 = u2.matchPrefix(c, "a=max-message-size:");
    let S2;
    v2.length > 0 && (S2 = parseInt(v2[0].substring(19), 10)), isNaN(S2) && (S2 = 65536);
    const g2 = u2.matchPrefix(c, "a=sctp-port:");
    if (g2.length > 0)
      return { port: parseInt(g2[0].substring(12), 10), protocol: l2.fmt, maxMessageSize: S2 };
    const E2 = u2.matchPrefix(c, "a=sctpmap:");
    if (E2.length > 0) {
      const _ = E2[0].substring(10).split(" ");
      return { port: parseInt(_[0], 10), protocol: _[1], maxMessageSize: S2 };
    }
  }, u2.writeSctpDescription = function(c, l2) {
    let v2 = [];
    return c.protocol !== "DTLS/SCTP" ? v2 = ["m=" + c.kind + " 9 " + c.protocol + " " + l2.protocol + `\r
`, `c=IN IP4 0.0.0.0\r
`, "a=sctp-port:" + l2.port + `\r
`] : v2 = ["m=" + c.kind + " 9 " + c.protocol + " " + l2.port + `\r
`, `c=IN IP4 0.0.0.0\r
`, "a=sctpmap:" + l2.port + " " + l2.protocol + ` 65535\r
`], l2.maxMessageSize !== void 0 && v2.push("a=max-message-size:" + l2.maxMessageSize + `\r
`), v2.join("");
  }, u2.generateSessionId = function() {
    return Math.random().toString().substr(2, 22);
  }, u2.writeSessionBoilerplate = function(c, l2, v2) {
    let S2;
    const g2 = l2 !== void 0 ? l2 : 2;
    return c ? S2 = c : S2 = u2.generateSessionId(), `v=0\r
o=` + (v2 || "thisisadapterortc") + " " + S2 + " " + g2 + ` IN IP4 127.0.0.1\r
s=-\r
t=0 0\r
`;
  }, u2.getDirection = function(c, l2) {
    const v2 = u2.splitLines(c);
    for (let S2 = 0; S2 < v2.length; S2++)
      switch (v2[S2]) {
        case "a=sendrecv":
        case "a=sendonly":
        case "a=recvonly":
        case "a=inactive":
          return v2[S2].substring(2);
      }
    return l2 ? u2.getDirection(l2) : "sendrecv";
  }, u2.getKind = function(c) {
    return u2.splitLines(c)[0].split(" ")[0].substring(2);
  }, u2.isRejected = function(c) {
    return c.split(" ", 2)[1] === "0";
  }, u2.parseMLine = function(c) {
    const v2 = u2.splitLines(c)[0].substring(2).split(" ");
    return { kind: v2[0], port: parseInt(v2[1], 10), protocol: v2[2], fmt: v2.slice(3).join(" ") };
  }, u2.parseOLine = function(c) {
    const v2 = u2.matchPrefix(c, "o=")[0].substring(2).split(" ");
    return { username: v2[0], sessionId: v2[1], sessionVersion: parseInt(v2[2], 10), netType: v2[3], addressType: v2[4], address: v2[5] };
  }, u2.isValidSDP = function(c) {
    if (typeof c != "string" || c.length === 0)
      return false;
    const l2 = u2.splitLines(c);
    for (let v2 = 0; v2 < l2.length; v2++)
      if (l2[v2].length < 2 || l2[v2].charAt(1) !== "=")
        return false;
    return true;
  }, a92.exports = u2;
})(sdp$1);
var sdpExports = sdp$1.exports, SDPUtils = /* @__PURE__ */ getDefaultExportFromCjs(sdpExports), sdp = /* @__PURE__ */ _mergeNamespaces({ __proto__: null, default: SDPUtils }, [sdpExports]);
function shimRTCIceCandidate(a92) {
  if (!a92.RTCIceCandidate || a92.RTCIceCandidate && "foundation" in a92.RTCIceCandidate.prototype)
    return;
  const u2 = a92.RTCIceCandidate;
  a92.RTCIceCandidate = function(l2) {
    if (typeof l2 == "object" && l2.candidate && l2.candidate.indexOf("a=") === 0 && (l2 = JSON.parse(JSON.stringify(l2)), l2.candidate = l2.candidate.substring(2)), l2.candidate && l2.candidate.length) {
      const v2 = new u2(l2), S2 = SDPUtils.parseCandidate(l2.candidate);
      for (const g2 in S2)
        g2 in v2 || Object.defineProperty(v2, g2, { value: S2[g2] });
      return v2.toJSON = function() {
        return { candidate: v2.candidate, sdpMid: v2.sdpMid, sdpMLineIndex: v2.sdpMLineIndex, usernameFragment: v2.usernameFragment };
      }, v2;
    }
    return new u2(l2);
  }, a92.RTCIceCandidate.prototype = u2.prototype, wrapPeerConnectionEvent(a92, "icecandidate", (c) => (c.candidate && Object.defineProperty(c, "candidate", { value: new a92.RTCIceCandidate(c.candidate), writable: "false" }), c));
}
function shimRTCIceCandidateRelayProtocol(a92) {
  !a92.RTCIceCandidate || a92.RTCIceCandidate && "relayProtocol" in a92.RTCIceCandidate.prototype || wrapPeerConnectionEvent(a92, "icecandidate", (u2) => {
    if (u2.candidate) {
      const c = SDPUtils.parseCandidate(u2.candidate.candidate);
      c.type === "relay" && (u2.candidate.relayProtocol = { 0: "tls", 1: "tcp", 2: "udp" }[c.priority >> 24]);
    }
    return u2;
  });
}
function shimMaxMessageSize(a92, u2) {
  if (!a92.RTCPeerConnection)
    return;
  "sctp" in a92.RTCPeerConnection.prototype || Object.defineProperty(a92.RTCPeerConnection.prototype, "sctp", { get() {
    return typeof this._sctp > "u" ? null : this._sctp;
  } });
  const c = function(E2) {
    if (!E2 || !E2.sdp)
      return false;
    const _ = SDPUtils.splitSections(E2.sdp);
    return _.shift(), _.some((k) => {
      const L2 = SDPUtils.parseMLine(k);
      return L2 && L2.kind === "application" && L2.protocol.indexOf("SCTP") !== -1;
    });
  }, l2 = function(E2) {
    const _ = E2.sdp.match(/mozilla...THIS_IS_SDPARTA-(\d+)/);
    if (_ === null || _.length < 2)
      return -1;
    const k = parseInt(_[1], 10);
    return k !== k ? -1 : k;
  }, v2 = function(E2) {
    let _ = 65536;
    return u2.browser === "firefox" && (u2.version < 57 ? E2 === -1 ? _ = 16384 : _ = 2147483637 : u2.version < 60 ? _ = u2.version === 57 ? 65535 : 65536 : _ = 2147483637), _;
  }, S2 = function(E2, _) {
    let k = 65536;
    u2.browser === "firefox" && u2.version === 57 && (k = 65535);
    const L2 = SDPUtils.matchPrefix(E2.sdp, "a=max-message-size:");
    return L2.length > 0 ? k = parseInt(L2[0].substring(19), 10) : u2.browser === "firefox" && _ !== -1 && (k = 2147483637), k;
  }, g2 = a92.RTCPeerConnection.prototype.setRemoteDescription;
  a92.RTCPeerConnection.prototype.setRemoteDescription = function() {
    if (this._sctp = null, u2.browser === "chrome" && u2.version >= 76) {
      const { sdpSemantics: _ } = this.getConfiguration();
      _ === "plan-b" && Object.defineProperty(this, "sctp", { get() {
        return typeof this._sctp > "u" ? null : this._sctp;
      }, enumerable: true, configurable: true });
    }
    if (c(arguments[0])) {
      const _ = l2(arguments[0]), k = v2(_), L2 = S2(arguments[0], _);
      let M2;
      k === 0 && L2 === 0 ? M2 = Number.POSITIVE_INFINITY : k === 0 || L2 === 0 ? M2 = Math.max(k, L2) : M2 = Math.min(k, L2);
      const $ = {};
      Object.defineProperty($, "maxMessageSize", { get() {
        return M2;
      } }), this._sctp = $;
    }
    return g2.apply(this, arguments);
  };
}
function shimSendThrowTypeError(a92) {
  if (!(a92.RTCPeerConnection && "createDataChannel" in a92.RTCPeerConnection.prototype))
    return;
  function u2(l2, v2) {
    const S2 = l2.send;
    l2.send = function() {
      const E2 = arguments[0], _ = E2.length || E2.size || E2.byteLength;
      if (l2.readyState === "open" && v2.sctp && _ > v2.sctp.maxMessageSize)
        throw new TypeError("Message too large (can send a maximum of " + v2.sctp.maxMessageSize + " bytes)");
      return S2.apply(l2, arguments);
    };
  }
  const c = a92.RTCPeerConnection.prototype.createDataChannel;
  a92.RTCPeerConnection.prototype.createDataChannel = function() {
    const v2 = c.apply(this, arguments);
    return u2(v2, this), v2;
  }, wrapPeerConnectionEvent(a92, "datachannel", (l2) => (u2(l2.channel, l2.target), l2));
}
function shimConnectionState(a92) {
  if (!a92.RTCPeerConnection || "connectionState" in a92.RTCPeerConnection.prototype)
    return;
  const u2 = a92.RTCPeerConnection.prototype;
  Object.defineProperty(u2, "connectionState", { get() {
    return { completed: "connected", checking: "connecting" }[this.iceConnectionState] || this.iceConnectionState;
  }, enumerable: true, configurable: true }), Object.defineProperty(u2, "onconnectionstatechange", { get() {
    return this._onconnectionstatechange || null;
  }, set(c) {
    this._onconnectionstatechange && (this.removeEventListener("connectionstatechange", this._onconnectionstatechange), delete this._onconnectionstatechange), c && this.addEventListener("connectionstatechange", this._onconnectionstatechange = c);
  }, enumerable: true, configurable: true }), ["setLocalDescription", "setRemoteDescription"].forEach((c) => {
    const l2 = u2[c];
    u2[c] = function() {
      return this._connectionstatechangepoly || (this._connectionstatechangepoly = (v2) => {
        const S2 = v2.target;
        if (S2._lastConnectionState !== S2.connectionState) {
          S2._lastConnectionState = S2.connectionState;
          const g2 = new Event("connectionstatechange", v2);
          S2.dispatchEvent(g2);
        }
        return v2;
      }, this.addEventListener("iceconnectionstatechange", this._connectionstatechangepoly)), l2.apply(this, arguments);
    };
  });
}
function removeExtmapAllowMixed(a92, u2) {
  if (!a92.RTCPeerConnection || u2.browser === "chrome" && u2.version >= 71 || u2.browser === "safari" && u2.version >= 605)
    return;
  const c = a92.RTCPeerConnection.prototype.setRemoteDescription;
  a92.RTCPeerConnection.prototype.setRemoteDescription = function(v2) {
    if (v2 && v2.sdp && v2.sdp.indexOf(`
a=extmap-allow-mixed`) !== -1) {
      const S2 = v2.sdp.split(`
`).filter((g2) => g2.trim() !== "a=extmap-allow-mixed").join(`
`);
      a92.RTCSessionDescription && v2 instanceof a92.RTCSessionDescription ? arguments[0] = new a92.RTCSessionDescription({ type: v2.type, sdp: S2 }) : v2.sdp = S2;
    }
    return c.apply(this, arguments);
  };
}
function shimAddIceCandidateNullOrEmpty(a92, u2) {
  if (!(a92.RTCPeerConnection && a92.RTCPeerConnection.prototype))
    return;
  const c = a92.RTCPeerConnection.prototype.addIceCandidate;
  !c || c.length === 0 || (a92.RTCPeerConnection.prototype.addIceCandidate = function() {
    return arguments[0] ? (u2.browser === "chrome" && u2.version < 78 || u2.browser === "firefox" && u2.version < 68 || u2.browser === "safari") && arguments[0] && arguments[0].candidate === "" ? Promise.resolve() : c.apply(this, arguments) : (arguments[1] && arguments[1].apply(null), Promise.resolve());
  });
}
function shimParameterlessSetLocalDescription(a92, u2) {
  if (!(a92.RTCPeerConnection && a92.RTCPeerConnection.prototype))
    return;
  const c = a92.RTCPeerConnection.prototype.setLocalDescription;
  !c || c.length === 0 || (a92.RTCPeerConnection.prototype.setLocalDescription = function() {
    let v2 = arguments[0] || {};
    if (typeof v2 != "object" || v2.type && v2.sdp)
      return c.apply(this, arguments);
    if (v2 = { type: v2.type, sdp: v2.sdp }, !v2.type)
      switch (this.signalingState) {
        case "stable":
        case "have-local-offer":
        case "have-remote-pranswer":
          v2.type = "offer";
          break;
        default:
          v2.type = "answer";
          break;
      }
    return v2.sdp || v2.type !== "offer" && v2.type !== "answer" ? c.apply(this, [v2]) : (v2.type === "offer" ? this.createOffer : this.createAnswer).apply(this).then((g2) => c.apply(this, [g2]));
  });
}
var commonShim = /* @__PURE__ */ Object.freeze({ __proto__: null, removeExtmapAllowMixed, shimAddIceCandidateNullOrEmpty, shimConnectionState, shimMaxMessageSize, shimParameterlessSetLocalDescription, shimRTCIceCandidate, shimRTCIceCandidateRelayProtocol, shimSendThrowTypeError });
function adapterFactory() {
  let { window: a92 } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, u2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : { shimChrome: true, shimFirefox: true, shimSafari: true };
  const c = log, l2 = detectBrowser(a92), v2 = {
    browserDetails: l2,
    commonShim,
    extractVersion,
    disableLog,
    disableWarnings,
    // Expose sdp as a convenience. For production apps include directly.
    sdp
  };
  switch (l2.browser) {
    case "chrome":
      if (!chromeShim || !shimPeerConnection$1 || !u2.shimChrome)
        return c("Chrome shim is not included in this adapter release."), v2;
      if (l2.version === null)
        return c("Chrome shim can not determine version, not shimming."), v2;
      c("adapter.js shimming chrome."), v2.browserShim = chromeShim, shimAddIceCandidateNullOrEmpty(a92, l2), shimParameterlessSetLocalDescription(a92), shimGetUserMedia$2(a92, l2), shimMediaStream(a92), shimPeerConnection$1(a92, l2), shimOnTrack$1(a92), shimAddTrackRemoveTrack(a92, l2), shimGetSendersWithDtmf(a92), shimGetStats(a92), shimSenderReceiverGetStats(a92), fixNegotiationNeeded(a92, l2), shimRTCIceCandidate(a92), shimRTCIceCandidateRelayProtocol(a92), shimConnectionState(a92), shimMaxMessageSize(a92, l2), shimSendThrowTypeError(a92), removeExtmapAllowMixed(a92, l2);
      break;
    case "firefox":
      if (!firefoxShim || !shimPeerConnection || !u2.shimFirefox)
        return c("Firefox shim is not included in this adapter release."), v2;
      c("adapter.js shimming firefox."), v2.browserShim = firefoxShim, shimAddIceCandidateNullOrEmpty(a92, l2), shimParameterlessSetLocalDescription(a92), shimGetUserMedia$1(a92, l2), shimPeerConnection(a92, l2), shimOnTrack(a92), shimRemoveStream(a92), shimSenderGetStats(a92), shimReceiverGetStats(a92), shimRTCDataChannel(a92), shimAddTransceiver(a92), shimGetParameters(a92), shimCreateOffer(a92), shimCreateAnswer(a92), shimRTCIceCandidate(a92), shimConnectionState(a92), shimMaxMessageSize(a92, l2), shimSendThrowTypeError(a92);
      break;
    case "safari":
      if (!safariShim || !u2.shimSafari)
        return c("Safari shim is not included in this adapter release."), v2;
      c("adapter.js shimming safari."), v2.browserShim = safariShim, shimAddIceCandidateNullOrEmpty(a92, l2), shimParameterlessSetLocalDescription(a92), shimRTCIceServerUrls(a92), shimCreateOfferLegacy(a92), shimCallbacksAPI(a92), shimLocalStreamsAPI(a92), shimRemoteStreamsAPI(a92), shimTrackEventTransceiver(a92), shimGetUserMedia(a92), shimAudioContext(a92), shimRTCIceCandidate(a92), shimRTCIceCandidateRelayProtocol(a92), shimMaxMessageSize(a92, l2), shimSendThrowTypeError(a92), removeExtmapAllowMixed(a92, l2);
      break;
    default:
      c("Unsupported browser!");
      break;
  }
  return v2;
}
adapterFactory({ window: typeof window > "u" ? void 0 : window });
const DECRYPTION_FAILURE_TOLERANCE = 10, E2EE_FLAG = "lk_e2ee", SALT = "LKFrameEncryptionKey", KEY_PROVIDER_DEFAULTS = { sharedKey: false, ratchetSalt: SALT, ratchetWindowSize: 8, failureTolerance: DECRYPTION_FAILURE_TOLERANCE };
var KeyProviderEvent;
(function(a92) {
  a92.SetKey = "setKey", a92.RatchetRequest = "ratchetRequest", a92.KeyRatcheted = "keyRatcheted";
})(KeyProviderEvent || (KeyProviderEvent = {}));
var KeyHandlerEvent;
(function(a92) {
  a92.KeyRatcheted = "keyRatcheted";
})(KeyHandlerEvent || (KeyHandlerEvent = {}));
var EncryptionEvent;
(function(a92) {
  a92.ParticipantEncryptionStatusChanged = "participantEncryptionStatusChanged", a92.EncryptionError = "encryptionError";
})(EncryptionEvent || (EncryptionEvent = {}));
var CryptorEvent;
(function(a92) {
  a92.Error = "cryptorError";
})(CryptorEvent || (CryptorEvent = {}));
function isE2EESupported() {
  return isInsertableStreamSupported() || isScriptTransformSupported();
}
function isScriptTransformSupported() {
  return typeof window.RTCRtpScriptTransform < "u";
}
function isInsertableStreamSupported() {
  return typeof window.RTCRtpSender < "u" && // @ts-ignore
  typeof window.RTCRtpSender.prototype.createEncodedStreams < "u";
}
class BaseKeyProvider extends eventsExports.EventEmitter {
  constructor() {
    let u2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    super(), this.onKeyRatcheted = (c, l2) => {
      livekitLogger.debug("key ratcheted event received", { material: c, keyIndex: l2 });
    }, this.keyInfoMap = /* @__PURE__ */ new Map(), this.options = Object.assign(Object.assign({}, KEY_PROVIDER_DEFAULTS), u2), this.on(KeyProviderEvent.KeyRatcheted, this.onKeyRatcheted);
  }
  /**
  * callback to invoke once a key has been set for a participant
  * @param key
  * @param participantIdentity
  * @param keyIndex
  */
  onSetEncryptionKey(u2, c, l2) {
    const v2 = { key: u2, participantIdentity: c, keyIndex: l2 };
    this.keyInfoMap.set("".concat(c ?? "shared", "-").concat(l2 ?? 0), v2), this.emit(KeyProviderEvent.SetKey, v2);
  }
  getKeys() {
    return Array.from(this.keyInfoMap.values());
  }
  getOptions() {
    return this.options;
  }
  ratchetKey(u2, c) {
    this.emit(KeyProviderEvent.RatchetRequest, u2, c);
  }
}
class LivekitError extends Error {
  constructor(u2, c) {
    super(c || "an error has occured"), this.code = u2;
  }
}
class ConnectionError extends LivekitError {
  constructor(u2, c, l2) {
    super(1, u2), this.status = l2, this.reason = c;
  }
}
class DeviceUnsupportedError extends LivekitError {
  constructor(u2) {
    super(21, u2 ?? "device is unsupported");
  }
}
class TrackInvalidError extends LivekitError {
  constructor(u2) {
    super(20, u2 ?? "track is invalid");
  }
}
class UnsupportedServer extends LivekitError {
  constructor(u2) {
    super(10, u2 ?? "unsupported server");
  }
}
class UnexpectedConnectionState extends LivekitError {
  constructor(u2) {
    super(12, u2 ?? "unexpected connection state");
  }
}
class NegotiationError extends LivekitError {
  constructor(u2) {
    super(13, u2 ?? "unable to negotiate");
  }
}
var MediaDeviceFailure;
(function(a92) {
  a92.PermissionDenied = "PermissionDenied", a92.NotFound = "NotFound", a92.DeviceInUse = "DeviceInUse", a92.Other = "Other";
})(MediaDeviceFailure || (MediaDeviceFailure = {}));
(function(a92) {
  function u2(c) {
    if (c && "name" in c)
      return c.name === "NotFoundError" || c.name === "DevicesNotFoundError" ? a92.NotFound : c.name === "NotAllowedError" || c.name === "PermissionDeniedError" ? a92.PermissionDenied : c.name === "NotReadableError" || c.name === "TrackStartError" ? a92.DeviceInUse : a92.Other;
  }
  a92.getFailure = u2;
})(MediaDeviceFailure || (MediaDeviceFailure = {}));
var RoomEvent;
(function(a92) {
  a92.Connected = "connected", a92.Reconnecting = "reconnecting", a92.Reconnected = "reconnected", a92.Disconnected = "disconnected", a92.ConnectionStateChanged = "connectionStateChanged", a92.MediaDevicesChanged = "mediaDevicesChanged", a92.ParticipantConnected = "participantConnected", a92.ParticipantDisconnected = "participantDisconnected", a92.TrackPublished = "trackPublished", a92.TrackSubscribed = "trackSubscribed", a92.TrackSubscriptionFailed = "trackSubscriptionFailed", a92.TrackUnpublished = "trackUnpublished", a92.TrackUnsubscribed = "trackUnsubscribed", a92.TrackMuted = "trackMuted", a92.TrackUnmuted = "trackUnmuted", a92.LocalTrackPublished = "localTrackPublished", a92.LocalTrackUnpublished = "localTrackUnpublished", a92.LocalAudioSilenceDetected = "localAudioSilenceDetected", a92.ActiveSpeakersChanged = "activeSpeakersChanged", a92.ParticipantMetadataChanged = "participantMetadataChanged", a92.ParticipantNameChanged = "participantNameChanged", a92.RoomMetadataChanged = "roomMetadataChanged", a92.DataReceived = "dataReceived", a92.ConnectionQualityChanged = "connectionQualityChanged", a92.TrackStreamStateChanged = "trackStreamStateChanged", a92.TrackSubscriptionPermissionChanged = "trackSubscriptionPermissionChanged", a92.TrackSubscriptionStatusChanged = "trackSubscriptionStatusChanged", a92.AudioPlaybackStatusChanged = "audioPlaybackChanged", a92.VideoPlaybackStatusChanged = "videoPlaybackChanged", a92.MediaDevicesError = "mediaDevicesError", a92.ParticipantPermissionsChanged = "participantPermissionsChanged", a92.SignalConnected = "signalConnected", a92.RecordingStatusChanged = "recordingStatusChanged", a92.ParticipantEncryptionStatusChanged = "participantEncryptionStatusChanged", a92.EncryptionError = "encryptionError", a92.DCBufferStatusChanged = "dcBufferStatusChanged", a92.ActiveDeviceChanged = "activeDeviceChanged";
})(RoomEvent || (RoomEvent = {}));
var ParticipantEvent;
(function(a92) {
  a92.TrackPublished = "trackPublished", a92.TrackSubscribed = "trackSubscribed", a92.TrackSubscriptionFailed = "trackSubscriptionFailed", a92.TrackUnpublished = "trackUnpublished", a92.TrackUnsubscribed = "trackUnsubscribed", a92.TrackMuted = "trackMuted", a92.TrackUnmuted = "trackUnmuted", a92.LocalTrackPublished = "localTrackPublished", a92.LocalTrackUnpublished = "localTrackUnpublished", a92.ParticipantMetadataChanged = "participantMetadataChanged", a92.ParticipantNameChanged = "participantNameChanged", a92.DataReceived = "dataReceived", a92.IsSpeakingChanged = "isSpeakingChanged", a92.ConnectionQualityChanged = "connectionQualityChanged", a92.TrackStreamStateChanged = "trackStreamStateChanged", a92.TrackSubscriptionPermissionChanged = "trackSubscriptionPermissionChanged", a92.TrackSubscriptionStatusChanged = "trackSubscriptionStatusChanged", a92.MediaDevicesError = "mediaDevicesError", a92.AudioStreamAcquired = "audioStreamAcquired", a92.ParticipantPermissionsChanged = "participantPermissionsChanged", a92.PCTrackAdded = "pcTrackAdded";
})(ParticipantEvent || (ParticipantEvent = {}));
var EngineEvent;
(function(a92) {
  a92.TransportsCreated = "transportsCreated", a92.Connected = "connected", a92.Disconnected = "disconnected", a92.Resuming = "resuming", a92.Resumed = "resumed", a92.Restarting = "restarting", a92.Restarted = "restarted", a92.SignalResumed = "signalResumed", a92.SignalRestarted = "signalRestarted", a92.Closing = "closing", a92.MediaTrackAdded = "mediaTrackAdded", a92.ActiveSpeakersUpdate = "activeSpeakersUpdate", a92.DataPacketReceived = "dataPacketReceived", a92.RTPVideoMapUpdate = "rtpVideoMapUpdate", a92.DCBufferStatusChanged = "dcBufferStatusChanged", a92.ParticipantUpdate = "participantUpdate", a92.RoomUpdate = "roomUpdate", a92.SpeakersChanged = "speakersChanged", a92.StreamStateChanged = "streamStateChanged", a92.ConnectionQualityUpdate = "connectionQualityUpdate", a92.SubscriptionError = "subscriptionError", a92.SubscriptionPermissionUpdate = "subscriptionPermissionUpdate", a92.RemoteMute = "remoteMute", a92.SubscribedQualityUpdate = "subscribedQualityUpdate", a92.LocalTrackUnpublished = "localTrackUnpublished";
})(EngineEvent || (EngineEvent = {}));
var TrackEvent;
(function(a92) {
  a92.Message = "message", a92.Muted = "muted", a92.Unmuted = "unmuted", a92.Restarted = "restarted", a92.Ended = "ended", a92.Subscribed = "subscribed", a92.Unsubscribed = "unsubscribed", a92.UpdateSettings = "updateSettings", a92.UpdateSubscription = "updateSubscription", a92.AudioPlaybackStarted = "audioPlaybackStarted", a92.AudioPlaybackFailed = "audioPlaybackFailed", a92.AudioSilenceDetected = "audioSilenceDetected", a92.VisibilityChanged = "visibilityChanged", a92.VideoDimensionsChanged = "videoDimensionsChanged", a92.VideoPlaybackStarted = "videoPlaybackStarted", a92.VideoPlaybackFailed = "videoPlaybackFailed", a92.ElementAttached = "elementAttached", a92.ElementDetached = "elementDetached", a92.UpstreamPaused = "upstreamPaused", a92.UpstreamResumed = "upstreamResumed", a92.SubscriptionPermissionChanged = "subscriptionPermissionChanged", a92.SubscriptionStatusChanged = "subscriptionStatusChanged", a92.SubscriptionFailed = "subscriptionFailed";
})(TrackEvent || (TrackEvent = {}));
function r(a92, u2, c) {
  var l2, v2, S2;
  u2 === void 0 && (u2 = 50), c === void 0 && (c = {});
  var g2 = (l2 = c.isImmediate) != null && l2, E2 = (v2 = c.callback) != null && v2, _ = c.maxWait, k = Date.now(), L2 = [];
  function M2() {
    if (_ !== void 0) {
      var J2 = Date.now() - k;
      if (J2 + u2 >= _)
        return _ - J2;
    }
    return u2;
  }
  var $ = function() {
    var J2 = [].slice.call(arguments), V2 = this;
    return new Promise(function(q2, G2) {
      var H2 = g2 && S2 === void 0;
      if (S2 !== void 0 && clearTimeout(S2), S2 = setTimeout(function() {
        if (S2 = void 0, k = Date.now(), !g2) {
          var Y2 = a92.apply(V2, J2);
          E2 && E2(Y2), L2.forEach(function(ne2) {
            return (0, ne2.resolve)(Y2);
          }), L2 = [];
        }
      }, M2()), H2) {
        var B2 = a92.apply(V2, J2);
        return E2 && E2(B2), q2(B2);
      }
      L2.push({ resolve: q2, reject: G2 });
    });
  };
  return $.cancel = function(J2) {
    S2 !== void 0 && clearTimeout(S2), L2.forEach(function(V2) {
      return (0, V2.reject)(J2);
    }), L2 = [];
  }, $;
}
const commonVersionIdentifier = /version\/(\d+(\.?_?\d+)+)/i;
let browserDetails;
function getBrowser(a92) {
  let u2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
  if (typeof a92 > "u" && typeof navigator > "u")
    return;
  const c = (a92 ?? navigator.userAgent).toLowerCase();
  if (browserDetails === void 0 || u2) {
    const l2 = browsersList.find((v2) => {
      let { test: S2 } = v2;
      return S2.test(c);
    });
    browserDetails = l2 == null ? void 0 : l2.describe(c);
  }
  return browserDetails;
}
const browsersList = [
  { test: /firefox|iceweasel|fxios/i, describe(a92) {
    return { name: "Firefox", version: getMatch(/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i, a92), os: a92.toLowerCase().includes("fxios") ? "iOS" : void 0 };
  } },
  { test: /chrom|crios|crmo/i, describe(a92) {
    return { name: "Chrome", version: getMatch(/(?:chrome|chromium|crios|crmo)\/(\d+(\.?_?\d+)+)/i, a92), os: a92.toLowerCase().includes("crios") ? "iOS" : void 0 };
  } },
  /* Safari */
  { test: /safari|applewebkit/i, describe(a92) {
    return { name: "Safari", version: getMatch(commonVersionIdentifier, a92), os: a92.includes("mobile/") ? "iOS" : "macOS" };
  } }
];
function getMatch(a92, u2) {
  let c = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
  const l2 = u2.match(a92);
  return l2 && l2.length >= c && l2[c] || "";
}
var version$1 = "2.0.1";
const version = version$1, protocolVersion = 12;
class CriticalTimers {
}
CriticalTimers.setTimeout = function() {
  return setTimeout(...arguments);
};
CriticalTimers.setInterval = function() {
  return setInterval(...arguments);
};
CriticalTimers.clearTimeout = function() {
  return clearTimeout(...arguments);
};
CriticalTimers.clearInterval = function() {
  return clearInterval(...arguments);
};
class VideoPreset {
  constructor(u2, c, l2, v2, S2) {
    this.width = u2, this.height = c, this.encoding = { maxBitrate: l2, maxFramerate: v2, priority: S2 };
  }
  get resolution() {
    return { width: this.width, height: this.height, frameRate: this.encoding.maxFramerate, aspectRatio: this.width / this.height };
  }
}
const backupCodecs = ["vp8", "h264"], videoCodecs = ["vp8", "h264", "vp9", "av1"];
function isBackupCodec(a92) {
  return !!backupCodecs.find((u2) => u2 === a92);
}
var AudioPresets;
(function(a92) {
  a92.telephone = { maxBitrate: 12e3 }, a92.speech = { maxBitrate: 2e4 }, a92.music = { maxBitrate: 32e3 }, a92.musicStereo = { maxBitrate: 48e3 }, a92.musicHighQuality = { maxBitrate: 64e3 }, a92.musicHighQualityStereo = { maxBitrate: 96e3 };
})(AudioPresets || (AudioPresets = {}));
const VideoPresets = { h90: new VideoPreset(160, 90, 9e4, 20), h180: new VideoPreset(320, 180, 16e4, 20), h216: new VideoPreset(384, 216, 18e4, 20), h360: new VideoPreset(640, 360, 45e4, 20), h540: new VideoPreset(960, 540, 8e5, 25), h720: new VideoPreset(1280, 720, 17e5, 30), h1080: new VideoPreset(1920, 1080, 3e6, 30), h1440: new VideoPreset(2560, 1440, 5e6, 30), h2160: new VideoPreset(3840, 2160, 8e6, 30) }, VideoPresets43 = { h120: new VideoPreset(160, 120, 7e4, 20), h180: new VideoPreset(240, 180, 125e3, 20), h240: new VideoPreset(320, 240, 14e4, 20), h360: new VideoPreset(480, 360, 33e4, 20), h480: new VideoPreset(640, 480, 5e5, 20), h540: new VideoPreset(720, 540, 6e5, 25), h720: new VideoPreset(960, 720, 13e5, 30), h1080: new VideoPreset(1440, 1080, 23e5, 30), h1440: new VideoPreset(1920, 1440, 38e5, 30) }, ScreenSharePresets = {
  h360fps3: new VideoPreset(640, 360, 2e5, 3, "medium"),
  h360fps15: new VideoPreset(640, 360, 4e5, 15, "medium"),
  h720fps5: new VideoPreset(1280, 720, 8e5, 5, "medium"),
  h720fps15: new VideoPreset(1280, 720, 15e5, 15, "medium"),
  h720fps30: new VideoPreset(1280, 720, 2e6, 30, "medium"),
  h1080fps15: new VideoPreset(1920, 1080, 25e5, 15, "medium"),
  h1080fps30: new VideoPreset(1920, 1080, 5e6, 30, "medium"),
  // original resolution, without resizing
  original: new VideoPreset(0, 0, 7e6, 30, "medium")
};
var SignalTarget;
(function(a92) {
  a92[a92.PUBLISHER = 0] = "PUBLISHER", a92[a92.SUBSCRIBER = 1] = "SUBSCRIBER";
})(SignalTarget || (SignalTarget = {}));
proto3.util.setEnumType(SignalTarget, "livekit.SignalTarget", [{ no: 0, name: "PUBLISHER" }, { no: 1, name: "SUBSCRIBER" }]);
var StreamState;
(function(a92) {
  a92[a92.ACTIVE = 0] = "ACTIVE", a92[a92.PAUSED = 1] = "PAUSED";
})(StreamState || (StreamState = {}));
proto3.util.setEnumType(StreamState, "livekit.StreamState", [{ no: 0, name: "ACTIVE" }, { no: 1, name: "PAUSED" }]);
var CandidateProtocol;
(function(a92) {
  a92[a92.UDP = 0] = "UDP", a92[a92.TCP = 1] = "TCP", a92[a92.TLS = 2] = "TLS";
})(CandidateProtocol || (CandidateProtocol = {}));
proto3.util.setEnumType(CandidateProtocol, "livekit.CandidateProtocol", [{ no: 0, name: "UDP" }, { no: 1, name: "TCP" }, { no: 2, name: "TLS" }]);
class SignalRequest extends Message {
  constructor(u2) {
    super(), this.message = { case: void 0 }, proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new SignalRequest().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new SignalRequest().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new SignalRequest().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(SignalRequest, u2, c);
  }
}
SignalRequest.runtime = proto3;
SignalRequest.typeName = "livekit.SignalRequest";
SignalRequest.fields = proto3.util.newFieldList(() => [{ no: 1, name: "offer", kind: "message", T: SessionDescription, oneof: "message" }, { no: 2, name: "answer", kind: "message", T: SessionDescription, oneof: "message" }, { no: 3, name: "trickle", kind: "message", T: TrickleRequest, oneof: "message" }, { no: 4, name: "add_track", kind: "message", T: AddTrackRequest, oneof: "message" }, { no: 5, name: "mute", kind: "message", T: MuteTrackRequest, oneof: "message" }, { no: 6, name: "subscription", kind: "message", T: UpdateSubscription, oneof: "message" }, { no: 7, name: "track_setting", kind: "message", T: UpdateTrackSettings, oneof: "message" }, { no: 8, name: "leave", kind: "message", T: LeaveRequest, oneof: "message" }, { no: 10, name: "update_layers", kind: "message", T: UpdateVideoLayers, oneof: "message" }, { no: 11, name: "subscription_permission", kind: "message", T: SubscriptionPermission, oneof: "message" }, { no: 12, name: "sync_state", kind: "message", T: SyncState, oneof: "message" }, { no: 13, name: "simulate", kind: "message", T: SimulateScenario, oneof: "message" }, { no: 14, name: "ping", kind: "scalar", T: 3, oneof: "message" }, { no: 15, name: "update_metadata", kind: "message", T: UpdateParticipantMetadata, oneof: "message" }, { no: 16, name: "ping_req", kind: "message", T: Ping, oneof: "message" }]);
class SignalResponse extends Message {
  constructor(u2) {
    super(), this.message = { case: void 0 }, proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new SignalResponse().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new SignalResponse().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new SignalResponse().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(SignalResponse, u2, c);
  }
}
SignalResponse.runtime = proto3;
SignalResponse.typeName = "livekit.SignalResponse";
SignalResponse.fields = proto3.util.newFieldList(() => [{ no: 1, name: "join", kind: "message", T: JoinResponse, oneof: "message" }, { no: 2, name: "answer", kind: "message", T: SessionDescription, oneof: "message" }, { no: 3, name: "offer", kind: "message", T: SessionDescription, oneof: "message" }, { no: 4, name: "trickle", kind: "message", T: TrickleRequest, oneof: "message" }, { no: 5, name: "update", kind: "message", T: ParticipantUpdate, oneof: "message" }, { no: 6, name: "track_published", kind: "message", T: TrackPublishedResponse, oneof: "message" }, { no: 8, name: "leave", kind: "message", T: LeaveRequest, oneof: "message" }, { no: 9, name: "mute", kind: "message", T: MuteTrackRequest, oneof: "message" }, { no: 10, name: "speakers_changed", kind: "message", T: SpeakersChanged, oneof: "message" }, { no: 11, name: "room_update", kind: "message", T: RoomUpdate, oneof: "message" }, { no: 12, name: "connection_quality", kind: "message", T: ConnectionQualityUpdate, oneof: "message" }, { no: 13, name: "stream_state_update", kind: "message", T: StreamStateUpdate, oneof: "message" }, { no: 14, name: "subscribed_quality_update", kind: "message", T: SubscribedQualityUpdate, oneof: "message" }, { no: 15, name: "subscription_permission_update", kind: "message", T: SubscriptionPermissionUpdate, oneof: "message" }, { no: 16, name: "refresh_token", kind: "scalar", T: 9, oneof: "message" }, { no: 17, name: "track_unpublished", kind: "message", T: TrackUnpublishedResponse, oneof: "message" }, { no: 18, name: "pong", kind: "scalar", T: 3, oneof: "message" }, { no: 19, name: "reconnect", kind: "message", T: ReconnectResponse, oneof: "message" }, { no: 20, name: "pong_resp", kind: "message", T: Pong, oneof: "message" }, { no: 21, name: "subscription_response", kind: "message", T: SubscriptionResponse, oneof: "message" }]);
class SimulcastCodec extends Message {
  constructor(u2) {
    super(), this.codec = "", this.cid = "", proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new SimulcastCodec().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new SimulcastCodec().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new SimulcastCodec().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(SimulcastCodec, u2, c);
  }
}
SimulcastCodec.runtime = proto3;
SimulcastCodec.typeName = "livekit.SimulcastCodec";
SimulcastCodec.fields = proto3.util.newFieldList(() => [{
  no: 1,
  name: "codec",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, {
  no: 2,
  name: "cid",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}]);
class AddTrackRequest extends Message {
  constructor(u2) {
    super(), this.cid = "", this.name = "", this.type = TrackType.AUDIO, this.width = 0, this.height = 0, this.muted = false, this.disableDtx = false, this.source = TrackSource.UNKNOWN, this.layers = [], this.simulcastCodecs = [], this.sid = "", this.stereo = false, this.disableRed = false, this.encryption = Encryption_Type.NONE, this.stream = "", proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new AddTrackRequest().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new AddTrackRequest().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new AddTrackRequest().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(AddTrackRequest, u2, c);
  }
}
AddTrackRequest.runtime = proto3;
AddTrackRequest.typeName = "livekit.AddTrackRequest";
AddTrackRequest.fields = proto3.util.newFieldList(() => [{
  no: 1,
  name: "cid",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, {
  no: 2,
  name: "name",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, { no: 3, name: "type", kind: "enum", T: proto3.getEnumType(TrackType) }, {
  no: 4,
  name: "width",
  kind: "scalar",
  T: 13
  /* ScalarType.UINT32 */
}, {
  no: 5,
  name: "height",
  kind: "scalar",
  T: 13
  /* ScalarType.UINT32 */
}, {
  no: 6,
  name: "muted",
  kind: "scalar",
  T: 8
  /* ScalarType.BOOL */
}, {
  no: 7,
  name: "disable_dtx",
  kind: "scalar",
  T: 8
  /* ScalarType.BOOL */
}, { no: 8, name: "source", kind: "enum", T: proto3.getEnumType(TrackSource) }, { no: 9, name: "layers", kind: "message", T: VideoLayer, repeated: true }, { no: 10, name: "simulcast_codecs", kind: "message", T: SimulcastCodec, repeated: true }, {
  no: 11,
  name: "sid",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, {
  no: 12,
  name: "stereo",
  kind: "scalar",
  T: 8
  /* ScalarType.BOOL */
}, {
  no: 13,
  name: "disable_red",
  kind: "scalar",
  T: 8
  /* ScalarType.BOOL */
}, { no: 14, name: "encryption", kind: "enum", T: proto3.getEnumType(Encryption_Type) }, {
  no: 15,
  name: "stream",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}]);
class TrickleRequest extends Message {
  constructor(u2) {
    super(), this.candidateInit = "", this.target = SignalTarget.PUBLISHER, proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new TrickleRequest().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new TrickleRequest().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new TrickleRequest().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(TrickleRequest, u2, c);
  }
}
TrickleRequest.runtime = proto3;
TrickleRequest.typeName = "livekit.TrickleRequest";
TrickleRequest.fields = proto3.util.newFieldList(() => [{
  no: 1,
  name: "candidateInit",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, { no: 2, name: "target", kind: "enum", T: proto3.getEnumType(SignalTarget) }]);
class MuteTrackRequest extends Message {
  constructor(u2) {
    super(), this.sid = "", this.muted = false, proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new MuteTrackRequest().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new MuteTrackRequest().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new MuteTrackRequest().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(MuteTrackRequest, u2, c);
  }
}
MuteTrackRequest.runtime = proto3;
MuteTrackRequest.typeName = "livekit.MuteTrackRequest";
MuteTrackRequest.fields = proto3.util.newFieldList(() => [{
  no: 1,
  name: "sid",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, {
  no: 2,
  name: "muted",
  kind: "scalar",
  T: 8
  /* ScalarType.BOOL */
}]);
class JoinResponse extends Message {
  constructor(u2) {
    super(), this.otherParticipants = [], this.serverVersion = "", this.iceServers = [], this.subscriberPrimary = false, this.alternativeUrl = "", this.serverRegion = "", this.pingTimeout = 0, this.pingInterval = 0, this.sifTrailer = new Uint8Array(0), proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new JoinResponse().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new JoinResponse().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new JoinResponse().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(JoinResponse, u2, c);
  }
}
JoinResponse.runtime = proto3;
JoinResponse.typeName = "livekit.JoinResponse";
JoinResponse.fields = proto3.util.newFieldList(() => [{ no: 1, name: "room", kind: "message", T: Room$1 }, { no: 2, name: "participant", kind: "message", T: ParticipantInfo }, { no: 3, name: "other_participants", kind: "message", T: ParticipantInfo, repeated: true }, {
  no: 4,
  name: "server_version",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, { no: 5, name: "ice_servers", kind: "message", T: ICEServer, repeated: true }, {
  no: 6,
  name: "subscriber_primary",
  kind: "scalar",
  T: 8
  /* ScalarType.BOOL */
}, {
  no: 7,
  name: "alternative_url",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, { no: 8, name: "client_configuration", kind: "message", T: ClientConfiguration }, {
  no: 9,
  name: "server_region",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, {
  no: 10,
  name: "ping_timeout",
  kind: "scalar",
  T: 5
  /* ScalarType.INT32 */
}, {
  no: 11,
  name: "ping_interval",
  kind: "scalar",
  T: 5
  /* ScalarType.INT32 */
}, { no: 12, name: "server_info", kind: "message", T: ServerInfo }, {
  no: 13,
  name: "sif_trailer",
  kind: "scalar",
  T: 12
  /* ScalarType.BYTES */
}]);
class ReconnectResponse extends Message {
  constructor(u2) {
    super(), this.iceServers = [], proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new ReconnectResponse().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new ReconnectResponse().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new ReconnectResponse().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(ReconnectResponse, u2, c);
  }
}
ReconnectResponse.runtime = proto3;
ReconnectResponse.typeName = "livekit.ReconnectResponse";
ReconnectResponse.fields = proto3.util.newFieldList(() => [{ no: 1, name: "ice_servers", kind: "message", T: ICEServer, repeated: true }, { no: 2, name: "client_configuration", kind: "message", T: ClientConfiguration }]);
class TrackPublishedResponse extends Message {
  constructor(u2) {
    super(), this.cid = "", proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new TrackPublishedResponse().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new TrackPublishedResponse().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new TrackPublishedResponse().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(TrackPublishedResponse, u2, c);
  }
}
TrackPublishedResponse.runtime = proto3;
TrackPublishedResponse.typeName = "livekit.TrackPublishedResponse";
TrackPublishedResponse.fields = proto3.util.newFieldList(() => [{
  no: 1,
  name: "cid",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, { no: 2, name: "track", kind: "message", T: TrackInfo }]);
class TrackUnpublishedResponse extends Message {
  constructor(u2) {
    super(), this.trackSid = "", proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new TrackUnpublishedResponse().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new TrackUnpublishedResponse().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new TrackUnpublishedResponse().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(TrackUnpublishedResponse, u2, c);
  }
}
TrackUnpublishedResponse.runtime = proto3;
TrackUnpublishedResponse.typeName = "livekit.TrackUnpublishedResponse";
TrackUnpublishedResponse.fields = proto3.util.newFieldList(() => [{
  no: 1,
  name: "track_sid",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}]);
class SessionDescription extends Message {
  constructor(u2) {
    super(), this.type = "", this.sdp = "", proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new SessionDescription().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new SessionDescription().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new SessionDescription().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(SessionDescription, u2, c);
  }
}
SessionDescription.runtime = proto3;
SessionDescription.typeName = "livekit.SessionDescription";
SessionDescription.fields = proto3.util.newFieldList(() => [{
  no: 1,
  name: "type",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, {
  no: 2,
  name: "sdp",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}]);
class ParticipantUpdate extends Message {
  constructor(u2) {
    super(), this.participants = [], proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new ParticipantUpdate().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new ParticipantUpdate().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new ParticipantUpdate().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(ParticipantUpdate, u2, c);
  }
}
ParticipantUpdate.runtime = proto3;
ParticipantUpdate.typeName = "livekit.ParticipantUpdate";
ParticipantUpdate.fields = proto3.util.newFieldList(() => [{ no: 1, name: "participants", kind: "message", T: ParticipantInfo, repeated: true }]);
class UpdateSubscription extends Message {
  constructor(u2) {
    super(), this.trackSids = [], this.subscribe = false, this.participantTracks = [], proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new UpdateSubscription().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new UpdateSubscription().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new UpdateSubscription().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(UpdateSubscription, u2, c);
  }
}
UpdateSubscription.runtime = proto3;
UpdateSubscription.typeName = "livekit.UpdateSubscription";
UpdateSubscription.fields = proto3.util.newFieldList(() => [{ no: 1, name: "track_sids", kind: "scalar", T: 9, repeated: true }, {
  no: 2,
  name: "subscribe",
  kind: "scalar",
  T: 8
  /* ScalarType.BOOL */
}, { no: 3, name: "participant_tracks", kind: "message", T: ParticipantTracks, repeated: true }]);
class UpdateTrackSettings extends Message {
  constructor(u2) {
    super(), this.trackSids = [], this.disabled = false, this.quality = VideoQuality$1.LOW, this.width = 0, this.height = 0, this.fps = 0, this.priority = 0, proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new UpdateTrackSettings().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new UpdateTrackSettings().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new UpdateTrackSettings().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(UpdateTrackSettings, u2, c);
  }
}
UpdateTrackSettings.runtime = proto3;
UpdateTrackSettings.typeName = "livekit.UpdateTrackSettings";
UpdateTrackSettings.fields = proto3.util.newFieldList(() => [{ no: 1, name: "track_sids", kind: "scalar", T: 9, repeated: true }, {
  no: 3,
  name: "disabled",
  kind: "scalar",
  T: 8
  /* ScalarType.BOOL */
}, { no: 4, name: "quality", kind: "enum", T: proto3.getEnumType(VideoQuality$1) }, {
  no: 5,
  name: "width",
  kind: "scalar",
  T: 13
  /* ScalarType.UINT32 */
}, {
  no: 6,
  name: "height",
  kind: "scalar",
  T: 13
  /* ScalarType.UINT32 */
}, {
  no: 7,
  name: "fps",
  kind: "scalar",
  T: 13
  /* ScalarType.UINT32 */
}, {
  no: 8,
  name: "priority",
  kind: "scalar",
  T: 13
  /* ScalarType.UINT32 */
}]);
class LeaveRequest extends Message {
  constructor(u2) {
    super(), this.canReconnect = false, this.reason = DisconnectReason.UNKNOWN_REASON, this.action = LeaveRequest_Action.DISCONNECT, proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new LeaveRequest().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new LeaveRequest().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new LeaveRequest().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(LeaveRequest, u2, c);
  }
}
LeaveRequest.runtime = proto3;
LeaveRequest.typeName = "livekit.LeaveRequest";
LeaveRequest.fields = proto3.util.newFieldList(() => [{
  no: 1,
  name: "can_reconnect",
  kind: "scalar",
  T: 8
  /* ScalarType.BOOL */
}, { no: 2, name: "reason", kind: "enum", T: proto3.getEnumType(DisconnectReason) }, { no: 3, name: "action", kind: "enum", T: proto3.getEnumType(LeaveRequest_Action) }, { no: 4, name: "regions", kind: "message", T: RegionSettings }]);
var LeaveRequest_Action;
(function(a92) {
  a92[a92.DISCONNECT = 0] = "DISCONNECT", a92[a92.RESUME = 1] = "RESUME", a92[a92.RECONNECT = 2] = "RECONNECT";
})(LeaveRequest_Action || (LeaveRequest_Action = {}));
proto3.util.setEnumType(LeaveRequest_Action, "livekit.LeaveRequest.Action", [{ no: 0, name: "DISCONNECT" }, { no: 1, name: "RESUME" }, { no: 2, name: "RECONNECT" }]);
class UpdateVideoLayers extends Message {
  constructor(u2) {
    super(), this.trackSid = "", this.layers = [], proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new UpdateVideoLayers().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new UpdateVideoLayers().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new UpdateVideoLayers().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(UpdateVideoLayers, u2, c);
  }
}
UpdateVideoLayers.runtime = proto3;
UpdateVideoLayers.typeName = "livekit.UpdateVideoLayers";
UpdateVideoLayers.fields = proto3.util.newFieldList(() => [{
  no: 1,
  name: "track_sid",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, { no: 2, name: "layers", kind: "message", T: VideoLayer, repeated: true }]);
class UpdateParticipantMetadata extends Message {
  constructor(u2) {
    super(), this.metadata = "", this.name = "", proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new UpdateParticipantMetadata().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new UpdateParticipantMetadata().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new UpdateParticipantMetadata().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(UpdateParticipantMetadata, u2, c);
  }
}
UpdateParticipantMetadata.runtime = proto3;
UpdateParticipantMetadata.typeName = "livekit.UpdateParticipantMetadata";
UpdateParticipantMetadata.fields = proto3.util.newFieldList(() => [{
  no: 1,
  name: "metadata",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, {
  no: 2,
  name: "name",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}]);
class ICEServer extends Message {
  constructor(u2) {
    super(), this.urls = [], this.username = "", this.credential = "", proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new ICEServer().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new ICEServer().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new ICEServer().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(ICEServer, u2, c);
  }
}
ICEServer.runtime = proto3;
ICEServer.typeName = "livekit.ICEServer";
ICEServer.fields = proto3.util.newFieldList(() => [{ no: 1, name: "urls", kind: "scalar", T: 9, repeated: true }, {
  no: 2,
  name: "username",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, {
  no: 3,
  name: "credential",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}]);
class SpeakersChanged extends Message {
  constructor(u2) {
    super(), this.speakers = [], proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new SpeakersChanged().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new SpeakersChanged().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new SpeakersChanged().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(SpeakersChanged, u2, c);
  }
}
SpeakersChanged.runtime = proto3;
SpeakersChanged.typeName = "livekit.SpeakersChanged";
SpeakersChanged.fields = proto3.util.newFieldList(() => [{ no: 1, name: "speakers", kind: "message", T: SpeakerInfo, repeated: true }]);
class RoomUpdate extends Message {
  constructor(u2) {
    super(), proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new RoomUpdate().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new RoomUpdate().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new RoomUpdate().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(RoomUpdate, u2, c);
  }
}
RoomUpdate.runtime = proto3;
RoomUpdate.typeName = "livekit.RoomUpdate";
RoomUpdate.fields = proto3.util.newFieldList(() => [{ no: 1, name: "room", kind: "message", T: Room$1 }]);
class ConnectionQualityInfo extends Message {
  constructor(u2) {
    super(), this.participantSid = "", this.quality = ConnectionQuality$1.POOR, this.score = 0, proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new ConnectionQualityInfo().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new ConnectionQualityInfo().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new ConnectionQualityInfo().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(ConnectionQualityInfo, u2, c);
  }
}
ConnectionQualityInfo.runtime = proto3;
ConnectionQualityInfo.typeName = "livekit.ConnectionQualityInfo";
ConnectionQualityInfo.fields = proto3.util.newFieldList(() => [{
  no: 1,
  name: "participant_sid",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, { no: 2, name: "quality", kind: "enum", T: proto3.getEnumType(ConnectionQuality$1) }, {
  no: 3,
  name: "score",
  kind: "scalar",
  T: 2
  /* ScalarType.FLOAT */
}]);
class ConnectionQualityUpdate extends Message {
  constructor(u2) {
    super(), this.updates = [], proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new ConnectionQualityUpdate().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new ConnectionQualityUpdate().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new ConnectionQualityUpdate().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(ConnectionQualityUpdate, u2, c);
  }
}
ConnectionQualityUpdate.runtime = proto3;
ConnectionQualityUpdate.typeName = "livekit.ConnectionQualityUpdate";
ConnectionQualityUpdate.fields = proto3.util.newFieldList(() => [{ no: 1, name: "updates", kind: "message", T: ConnectionQualityInfo, repeated: true }]);
class StreamStateInfo extends Message {
  constructor(u2) {
    super(), this.participantSid = "", this.trackSid = "", this.state = StreamState.ACTIVE, proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new StreamStateInfo().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new StreamStateInfo().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new StreamStateInfo().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(StreamStateInfo, u2, c);
  }
}
StreamStateInfo.runtime = proto3;
StreamStateInfo.typeName = "livekit.StreamStateInfo";
StreamStateInfo.fields = proto3.util.newFieldList(() => [{
  no: 1,
  name: "participant_sid",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, {
  no: 2,
  name: "track_sid",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, { no: 3, name: "state", kind: "enum", T: proto3.getEnumType(StreamState) }]);
class StreamStateUpdate extends Message {
  constructor(u2) {
    super(), this.streamStates = [], proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new StreamStateUpdate().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new StreamStateUpdate().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new StreamStateUpdate().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(StreamStateUpdate, u2, c);
  }
}
StreamStateUpdate.runtime = proto3;
StreamStateUpdate.typeName = "livekit.StreamStateUpdate";
StreamStateUpdate.fields = proto3.util.newFieldList(() => [{ no: 1, name: "stream_states", kind: "message", T: StreamStateInfo, repeated: true }]);
class SubscribedQuality extends Message {
  constructor(u2) {
    super(), this.quality = VideoQuality$1.LOW, this.enabled = false, proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new SubscribedQuality().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new SubscribedQuality().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new SubscribedQuality().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(SubscribedQuality, u2, c);
  }
}
SubscribedQuality.runtime = proto3;
SubscribedQuality.typeName = "livekit.SubscribedQuality";
SubscribedQuality.fields = proto3.util.newFieldList(() => [{ no: 1, name: "quality", kind: "enum", T: proto3.getEnumType(VideoQuality$1) }, {
  no: 2,
  name: "enabled",
  kind: "scalar",
  T: 8
  /* ScalarType.BOOL */
}]);
class SubscribedCodec extends Message {
  constructor(u2) {
    super(), this.codec = "", this.qualities = [], proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new SubscribedCodec().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new SubscribedCodec().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new SubscribedCodec().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(SubscribedCodec, u2, c);
  }
}
SubscribedCodec.runtime = proto3;
SubscribedCodec.typeName = "livekit.SubscribedCodec";
SubscribedCodec.fields = proto3.util.newFieldList(() => [{
  no: 1,
  name: "codec",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, { no: 2, name: "qualities", kind: "message", T: SubscribedQuality, repeated: true }]);
class SubscribedQualityUpdate extends Message {
  constructor(u2) {
    super(), this.trackSid = "", this.subscribedQualities = [], this.subscribedCodecs = [], proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new SubscribedQualityUpdate().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new SubscribedQualityUpdate().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new SubscribedQualityUpdate().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(SubscribedQualityUpdate, u2, c);
  }
}
SubscribedQualityUpdate.runtime = proto3;
SubscribedQualityUpdate.typeName = "livekit.SubscribedQualityUpdate";
SubscribedQualityUpdate.fields = proto3.util.newFieldList(() => [{
  no: 1,
  name: "track_sid",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, { no: 2, name: "subscribed_qualities", kind: "message", T: SubscribedQuality, repeated: true }, { no: 3, name: "subscribed_codecs", kind: "message", T: SubscribedCodec, repeated: true }]);
class TrackPermission extends Message {
  constructor(u2) {
    super(), this.participantSid = "", this.allTracks = false, this.trackSids = [], this.participantIdentity = "", proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new TrackPermission().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new TrackPermission().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new TrackPermission().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(TrackPermission, u2, c);
  }
}
TrackPermission.runtime = proto3;
TrackPermission.typeName = "livekit.TrackPermission";
TrackPermission.fields = proto3.util.newFieldList(() => [{
  no: 1,
  name: "participant_sid",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, {
  no: 2,
  name: "all_tracks",
  kind: "scalar",
  T: 8
  /* ScalarType.BOOL */
}, { no: 3, name: "track_sids", kind: "scalar", T: 9, repeated: true }, {
  no: 4,
  name: "participant_identity",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}]);
class SubscriptionPermission extends Message {
  constructor(u2) {
    super(), this.allParticipants = false, this.trackPermissions = [], proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new SubscriptionPermission().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new SubscriptionPermission().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new SubscriptionPermission().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(SubscriptionPermission, u2, c);
  }
}
SubscriptionPermission.runtime = proto3;
SubscriptionPermission.typeName = "livekit.SubscriptionPermission";
SubscriptionPermission.fields = proto3.util.newFieldList(() => [{
  no: 1,
  name: "all_participants",
  kind: "scalar",
  T: 8
  /* ScalarType.BOOL */
}, { no: 2, name: "track_permissions", kind: "message", T: TrackPermission, repeated: true }]);
class SubscriptionPermissionUpdate extends Message {
  constructor(u2) {
    super(), this.participantSid = "", this.trackSid = "", this.allowed = false, proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new SubscriptionPermissionUpdate().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new SubscriptionPermissionUpdate().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new SubscriptionPermissionUpdate().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(SubscriptionPermissionUpdate, u2, c);
  }
}
SubscriptionPermissionUpdate.runtime = proto3;
SubscriptionPermissionUpdate.typeName = "livekit.SubscriptionPermissionUpdate";
SubscriptionPermissionUpdate.fields = proto3.util.newFieldList(() => [{
  no: 1,
  name: "participant_sid",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, {
  no: 2,
  name: "track_sid",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, {
  no: 3,
  name: "allowed",
  kind: "scalar",
  T: 8
  /* ScalarType.BOOL */
}]);
class SyncState extends Message {
  constructor(u2) {
    super(), this.publishTracks = [], this.dataChannels = [], this.trackSidsDisabled = [], proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new SyncState().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new SyncState().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new SyncState().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(SyncState, u2, c);
  }
}
SyncState.runtime = proto3;
SyncState.typeName = "livekit.SyncState";
SyncState.fields = proto3.util.newFieldList(() => [{ no: 1, name: "answer", kind: "message", T: SessionDescription }, { no: 2, name: "subscription", kind: "message", T: UpdateSubscription }, { no: 3, name: "publish_tracks", kind: "message", T: TrackPublishedResponse, repeated: true }, { no: 4, name: "data_channels", kind: "message", T: DataChannelInfo, repeated: true }, { no: 5, name: "offer", kind: "message", T: SessionDescription }, { no: 6, name: "track_sids_disabled", kind: "scalar", T: 9, repeated: true }]);
class DataChannelInfo extends Message {
  constructor(u2) {
    super(), this.label = "", this.id = 0, this.target = SignalTarget.PUBLISHER, proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new DataChannelInfo().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new DataChannelInfo().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new DataChannelInfo().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(DataChannelInfo, u2, c);
  }
}
DataChannelInfo.runtime = proto3;
DataChannelInfo.typeName = "livekit.DataChannelInfo";
DataChannelInfo.fields = proto3.util.newFieldList(() => [{
  no: 1,
  name: "label",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, {
  no: 2,
  name: "id",
  kind: "scalar",
  T: 13
  /* ScalarType.UINT32 */
}, { no: 3, name: "target", kind: "enum", T: proto3.getEnumType(SignalTarget) }]);
class SimulateScenario extends Message {
  constructor(u2) {
    super(), this.scenario = { case: void 0 }, proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new SimulateScenario().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new SimulateScenario().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new SimulateScenario().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(SimulateScenario, u2, c);
  }
}
SimulateScenario.runtime = proto3;
SimulateScenario.typeName = "livekit.SimulateScenario";
SimulateScenario.fields = proto3.util.newFieldList(() => [{ no: 1, name: "speaker_update", kind: "scalar", T: 5, oneof: "scenario" }, { no: 2, name: "node_failure", kind: "scalar", T: 8, oneof: "scenario" }, { no: 3, name: "migration", kind: "scalar", T: 8, oneof: "scenario" }, { no: 4, name: "server_leave", kind: "scalar", T: 8, oneof: "scenario" }, { no: 5, name: "switch_candidate_protocol", kind: "enum", T: proto3.getEnumType(CandidateProtocol), oneof: "scenario" }, { no: 6, name: "subscriber_bandwidth", kind: "scalar", T: 3, oneof: "scenario" }, { no: 7, name: "disconnect_signal_on_resume", kind: "scalar", T: 8, oneof: "scenario" }, { no: 8, name: "disconnect_signal_on_resume_no_messages", kind: "scalar", T: 8, oneof: "scenario" }]);
class Ping extends Message {
  constructor(u2) {
    super(), this.timestamp = protoInt64.zero, this.rtt = protoInt64.zero, proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new Ping().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new Ping().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new Ping().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(Ping, u2, c);
  }
}
Ping.runtime = proto3;
Ping.typeName = "livekit.Ping";
Ping.fields = proto3.util.newFieldList(() => [{
  no: 1,
  name: "timestamp",
  kind: "scalar",
  T: 3
  /* ScalarType.INT64 */
}, {
  no: 2,
  name: "rtt",
  kind: "scalar",
  T: 3
  /* ScalarType.INT64 */
}]);
class Pong extends Message {
  constructor(u2) {
    super(), this.lastPingTimestamp = protoInt64.zero, this.timestamp = protoInt64.zero, proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new Pong().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new Pong().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new Pong().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(Pong, u2, c);
  }
}
Pong.runtime = proto3;
Pong.typeName = "livekit.Pong";
Pong.fields = proto3.util.newFieldList(() => [{
  no: 1,
  name: "last_ping_timestamp",
  kind: "scalar",
  T: 3
  /* ScalarType.INT64 */
}, {
  no: 2,
  name: "timestamp",
  kind: "scalar",
  T: 3
  /* ScalarType.INT64 */
}]);
class RegionSettings extends Message {
  constructor(u2) {
    super(), this.regions = [], proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new RegionSettings().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new RegionSettings().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new RegionSettings().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(RegionSettings, u2, c);
  }
}
RegionSettings.runtime = proto3;
RegionSettings.typeName = "livekit.RegionSettings";
RegionSettings.fields = proto3.util.newFieldList(() => [{ no: 1, name: "regions", kind: "message", T: RegionInfo, repeated: true }]);
class RegionInfo extends Message {
  constructor(u2) {
    super(), this.region = "", this.url = "", this.distance = protoInt64.zero, proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new RegionInfo().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new RegionInfo().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new RegionInfo().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(RegionInfo, u2, c);
  }
}
RegionInfo.runtime = proto3;
RegionInfo.typeName = "livekit.RegionInfo";
RegionInfo.fields = proto3.util.newFieldList(() => [{
  no: 1,
  name: "region",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, {
  no: 2,
  name: "url",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, {
  no: 3,
  name: "distance",
  kind: "scalar",
  T: 3
  /* ScalarType.INT64 */
}]);
class SubscriptionResponse extends Message {
  constructor(u2) {
    super(), this.trackSid = "", this.err = SubscriptionError.SE_UNKNOWN, proto3.util.initPartial(u2, this);
  }
  static fromBinary(u2, c) {
    return new SubscriptionResponse().fromBinary(u2, c);
  }
  static fromJson(u2, c) {
    return new SubscriptionResponse().fromJson(u2, c);
  }
  static fromJsonString(u2, c) {
    return new SubscriptionResponse().fromJsonString(u2, c);
  }
  static equals(u2, c) {
    return proto3.util.equals(SubscriptionResponse, u2, c);
  }
}
SubscriptionResponse.runtime = proto3;
SubscriptionResponse.typeName = "livekit.SubscriptionResponse";
SubscriptionResponse.fields = proto3.util.newFieldList(() => [{
  no: 1,
  name: "track_sid",
  kind: "scalar",
  T: 9
  /* ScalarType.STRING */
}, { no: 2, name: "err", kind: "enum", T: proto3.getEnumType(SubscriptionError) }]);
function cloneDeep(a92) {
  if (!(typeof a92 > "u"))
    return typeof structuredClone == "function" ? structuredClone(a92) : JSON.parse(JSON.stringify(a92));
}
const BACKGROUND_REACTION_DELAY = 5e3, recycledElements = [];
var VideoQuality;
(function(a92) {
  a92[a92.LOW = 0] = "LOW", a92[a92.MEDIUM = 1] = "MEDIUM", a92[a92.HIGH = 2] = "HIGH";
})(VideoQuality || (VideoQuality = {}));
class Track extends eventsExports.EventEmitter {
  constructor(u2, c) {
    let l2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var v2;
    super(), this.attachedElements = [], this.isMuted = false, this.streamState = Track.StreamState.Active, this.isInBackground = false, this._currentBitrate = 0, this.log = livekitLogger, this.appVisibilityChangedListener = () => {
      this.backgroundTimeout && clearTimeout(this.backgroundTimeout), document.visibilityState === "hidden" ? this.backgroundTimeout = setTimeout(() => this.handleAppVisibilityChanged(), BACKGROUND_REACTION_DELAY) : this.handleAppVisibilityChanged();
    }, this.log = getLogger((v2 = l2.loggerName) !== null && v2 !== void 0 ? v2 : LoggerNames.Track), this.loggerContextCb = l2.loggerContextCb, this.setMaxListeners(100), this.kind = c, this._mediaStreamTrack = u2, this._mediaStreamID = u2.id, this.source = Track.Source.Unknown;
  }
  get logContext() {
    var u2;
    return Object.assign(Object.assign({}, (u2 = this.loggerContextCb) === null || u2 === void 0 ? void 0 : u2.call(this)), getLogContextFromTrack(this));
  }
  /** current receive bits per second */
  get currentBitrate() {
    return this._currentBitrate;
  }
  get mediaStreamTrack() {
    return this._mediaStreamTrack;
  }
  /**
  * @internal
  * used for keep mediaStream's first id, since it's id might change
  * if we disable/enable a track
  */
  get mediaStreamID() {
    return this._mediaStreamID;
  }
  attach(u2) {
    let c = "audio";
    this.kind === Track.Kind.Video && (c = "video"), this.attachedElements.length === 0 && Track.Kind.Video && this.addAppVisibilityListener(), u2 || (c === "audio" && (recycledElements.forEach((S2) => {
      S2.parentElement === null && !u2 && (u2 = S2);
    }), u2 && recycledElements.splice(recycledElements.indexOf(u2), 1)), u2 || (u2 = document.createElement(c))), this.attachedElements.includes(u2) || this.attachedElements.push(u2), attachToElement(this.mediaStreamTrack, u2);
    const l2 = u2.srcObject.getTracks(), v2 = l2.some((S2) => S2.kind === "audio");
    return u2.play().then(() => {
      this.emit(v2 ? TrackEvent.AudioPlaybackStarted : TrackEvent.VideoPlaybackStarted);
    }).catch((S2) => {
      S2.name === "NotAllowedError" ? this.emit(v2 ? TrackEvent.AudioPlaybackFailed : TrackEvent.VideoPlaybackFailed, S2) : S2.name === "AbortError" ? livekitLogger.debug("".concat(v2 ? "audio" : "video", " playback aborted, likely due to new play request")) : livekitLogger.warn("could not playback ".concat(v2 ? "audio" : "video"), S2), v2 && u2 && l2.some((g2) => g2.kind === "video") && S2.name === "NotAllowedError" && (u2.muted = true, u2.play().catch(() => {
      }));
    }), this.emit(TrackEvent.ElementAttached, u2), u2;
  }
  detach(u2) {
    try {
      if (u2) {
        detachTrack(this.mediaStreamTrack, u2);
        const l2 = this.attachedElements.indexOf(u2);
        return l2 >= 0 && (this.attachedElements.splice(l2, 1), this.recycleElement(u2), this.emit(TrackEvent.ElementDetached, u2)), u2;
      }
      const c = [];
      return this.attachedElements.forEach((l2) => {
        detachTrack(this.mediaStreamTrack, l2), c.push(l2), this.recycleElement(l2), this.emit(TrackEvent.ElementDetached, l2);
      }), this.attachedElements = [], c;
    } finally {
      this.attachedElements.length === 0 && this.removeAppVisibilityListener();
    }
  }
  stop() {
    this.stopMonitor(), this._mediaStreamTrack.stop();
  }
  enable() {
    this._mediaStreamTrack.enabled = true;
  }
  disable() {
    this._mediaStreamTrack.enabled = false;
  }
  /* @internal */
  stopMonitor() {
    this.monitorInterval && clearInterval(this.monitorInterval);
  }
  /** @internal */
  updateLoggerOptions(u2) {
    u2.loggerName && (this.log = getLogger(u2.loggerName)), u2.loggerContextCb && (this.loggerContextCb = u2.loggerContextCb);
  }
  recycleElement(u2) {
    if (u2 instanceof HTMLAudioElement) {
      let c = true;
      u2.pause(), recycledElements.forEach((l2) => {
        l2.parentElement || (c = false);
      }), c && recycledElements.push(u2);
    }
  }
  handleAppVisibilityChanged() {
    return __awaiter(this, void 0, void 0, function* () {
      this.isInBackground = document.visibilityState === "hidden";
    });
  }
  addAppVisibilityListener() {
    isWeb() ? (this.isInBackground = document.visibilityState === "hidden", document.addEventListener("visibilitychange", this.appVisibilityChangedListener)) : this.isInBackground = false;
  }
  removeAppVisibilityListener() {
    isWeb() && document.removeEventListener("visibilitychange", this.appVisibilityChangedListener);
  }
}
function attachToElement(a92, u2) {
  let c;
  u2.srcObject instanceof MediaStream ? c = u2.srcObject : c = new MediaStream();
  let l2;
  a92.kind === "audio" ? l2 = c.getAudioTracks() : l2 = c.getVideoTracks(), l2.includes(a92) || (l2.forEach((v2) => {
    c.removeTrack(v2);
  }), c.addTrack(a92)), (!isSafari() || !(u2 instanceof HTMLVideoElement)) && (u2.autoplay = true), u2.muted = c.getAudioTracks().length === 0, u2 instanceof HTMLVideoElement && (u2.playsInline = true), u2.srcObject !== c && (u2.srcObject = c, (isSafari() || isFireFox()) && u2 instanceof HTMLVideoElement && setTimeout(() => {
    u2.srcObject = c, u2.play().catch(() => {
    });
  }, 0));
}
function detachTrack(a92, u2) {
  if (u2.srcObject instanceof MediaStream) {
    const c = u2.srcObject;
    c.removeTrack(a92), c.getTracks().length > 0 ? u2.srcObject = c : u2.srcObject = null;
  }
}
(function(a92) {
  let u2;
  (function(k) {
    k.Audio = "audio", k.Video = "video", k.Unknown = "unknown";
  })(u2 = a92.Kind || (a92.Kind = {}));
  let c;
  (function(k) {
    k.Camera = "camera", k.Microphone = "microphone", k.ScreenShare = "screen_share", k.ScreenShareAudio = "screen_share_audio", k.Unknown = "unknown";
  })(c = a92.Source || (a92.Source = {}));
  let l2;
  (function(k) {
    k.Active = "active", k.Paused = "paused", k.Unknown = "unknown";
  })(l2 = a92.StreamState || (a92.StreamState = {}));
  function v2(k) {
    switch (k) {
      case u2.Audio:
        return TrackType.AUDIO;
      case u2.Video:
        return TrackType.VIDEO;
      default:
        return TrackType.DATA;
    }
  }
  a92.kindToProto = v2;
  function S2(k) {
    switch (k) {
      case TrackType.AUDIO:
        return u2.Audio;
      case TrackType.VIDEO:
        return u2.Video;
      default:
        return u2.Unknown;
    }
  }
  a92.kindFromProto = S2;
  function g2(k) {
    switch (k) {
      case c.Camera:
        return TrackSource.CAMERA;
      case c.Microphone:
        return TrackSource.MICROPHONE;
      case c.ScreenShare:
        return TrackSource.SCREEN_SHARE;
      case c.ScreenShareAudio:
        return TrackSource.SCREEN_SHARE_AUDIO;
      default:
        return TrackSource.UNKNOWN;
    }
  }
  a92.sourceToProto = g2;
  function E2(k) {
    switch (k) {
      case TrackSource.CAMERA:
        return c.Camera;
      case TrackSource.MICROPHONE:
        return c.Microphone;
      case TrackSource.SCREEN_SHARE:
        return c.ScreenShare;
      case TrackSource.SCREEN_SHARE_AUDIO:
        return c.ScreenShareAudio;
      default:
        return c.Unknown;
    }
  }
  a92.sourceFromProto = E2;
  function _(k) {
    switch (k) {
      case StreamState.ACTIVE:
        return l2.Active;
      case StreamState.PAUSED:
        return l2.Paused;
      default:
        return l2.Unknown;
    }
  }
  a92.streamStateFromProto = _;
})(Track || (Track = {}));
function mergeDefaultOptions(a92, u2, c) {
  var l2;
  const v2 = (l2 = cloneDeep(a92)) !== null && l2 !== void 0 ? l2 : {};
  return v2.audio === true && (v2.audio = {}), v2.video === true && (v2.video = {}), v2.audio && mergeObjectWithoutOverwriting(v2.audio, u2), v2.video && mergeObjectWithoutOverwriting(v2.video, c), v2;
}
function mergeObjectWithoutOverwriting(a92, u2) {
  return Object.keys(u2).forEach((c) => {
    a92[c] === void 0 && (a92[c] = u2[c]);
  }), a92;
}
function constraintsForOptions(a92) {
  const u2 = {};
  if (a92.video) {
    if (typeof a92.video == "object") {
      const c = {}, l2 = c, v2 = a92.video;
      Object.keys(v2).forEach((S2) => {
        switch (S2) {
          case "resolution":
            mergeObjectWithoutOverwriting(l2, v2.resolution);
            break;
          default:
            l2[S2] = v2[S2];
        }
      }), u2.video = c;
    } else
      u2.video = a92.video;
  } else
    u2.video = false;
  return a92.audio ? typeof a92.audio == "object" ? u2.audio = a92.audio : u2.audio = true : u2.audio = false, u2;
}
function detectSilence(a92) {
  let u2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 200;
  return __awaiter(this, void 0, void 0, function* () {
    const c = getNewAudioContext();
    if (c) {
      const l2 = c.createAnalyser();
      l2.fftSize = 2048;
      const v2 = l2.frequencyBinCount, S2 = new Uint8Array(v2);
      c.createMediaStreamSource(new MediaStream([a92.mediaStreamTrack])).connect(l2), yield sleep(u2), l2.getByteTimeDomainData(S2);
      const E2 = S2.some((_) => _ !== 128 && _ !== 0);
      return c.close(), !E2;
    }
    return false;
  });
}
function getNewAudioContext() {
  const a92 = (
    // @ts-ignore
    typeof window < "u" && (window.AudioContext || window.webkitAudioContext)
  );
  if (a92)
    return new a92({ latencyHint: "interactive" });
}
function sourceToKind(a92) {
  return a92 === Track.Source.Microphone ? "audioinput" : a92 === Track.Source.Camera ? "videoinput" : void 0;
}
function screenCaptureToDisplayMediaStreamOptions(a92) {
  var u2, c;
  let l2 = (u2 = a92.video) !== null && u2 !== void 0 ? u2 : true;
  return a92.resolution && a92.resolution.width > 0 && a92.resolution.height > 0 && (l2 = typeof l2 == "boolean" ? {} : l2, isSafari() ? l2 = Object.assign(Object.assign({}, l2), { width: { max: a92.resolution.width }, height: { max: a92.resolution.height }, frameRate: a92.resolution.frameRate }) : l2 = Object.assign(Object.assign({}, l2), { width: { ideal: a92.resolution.width }, height: { ideal: a92.resolution.height }, frameRate: a92.resolution.frameRate })), {
    audio: (c = a92.audio) !== null && c !== void 0 ? c : false,
    video: l2,
    // @ts-expect-error support for experimental display media features
    controller: a92.controller,
    selfBrowserSurface: a92.selfBrowserSurface,
    surfaceSwitching: a92.surfaceSwitching,
    systemAudio: a92.systemAudio
  };
}
function mimeTypeToVideoCodecString(a92) {
  const u2 = a92.split("/")[1].toLowerCase();
  if (!videoCodecs.includes(u2))
    throw Error("Video codec not supported: ".concat(u2));
  return u2;
}
function getTrackPublicationInfo(a92) {
  const u2 = [];
  return a92.forEach((c) => {
    c.track !== void 0 && u2.push(new TrackPublishedResponse({ cid: c.track.mediaStreamID, track: c.trackInfo }));
  }), u2;
}
function getLogContextFromTrack(a92) {
  return a92 instanceof Track ? { trackSid: a92.sid, trackSource: a92.source, trackMuted: a92.isMuted, trackEnabled: a92.mediaStreamTrack.enabled, trackKind: a92.kind } : { trackSid: a92.trackSid, trackName: a92.trackName, track: a92.track ? getLogContextFromTrack(a92.track) : void 0, trackEnabled: a92.isEnabled, trackEncrypted: a92.isEncrypted, trackMimeType: a92.mimeType };
}
const separator = "|", ddExtensionURI = "https://aomediacodec.github.io/av1-rtp-spec/#dependency-descriptor-rtp-header-extension";
function unpackStreamId(a92) {
  const u2 = a92.split(separator);
  return u2.length > 1 ? [u2[0], a92.substr(u2[0].length + 1)] : [a92, ""];
}
function sleep(a92) {
  return __awaiter(this, void 0, void 0, function* () {
    return new Promise((u2) => CriticalTimers.setTimeout(u2, a92));
  });
}
function supportsTransceiver() {
  return "addTransceiver" in RTCPeerConnection.prototype;
}
function supportsAddTrack() {
  return "addTrack" in RTCPeerConnection.prototype;
}
function supportsAV1() {
  if (!("getCapabilities" in RTCRtpSender) || isSafari())
    return false;
  const a92 = RTCRtpSender.getCapabilities("video");
  let u2 = false;
  if (a92) {
    for (const c of a92.codecs)
      if (c.mimeType === "video/AV1") {
        u2 = true;
        break;
      }
  }
  return u2;
}
function supportsVP9() {
  if (!("getCapabilities" in RTCRtpSender) || isFireFox())
    return false;
  if (isSafari()) {
    const c = getBrowser();
    if (c != null && c.version && compareVersions(c.version, "16") < 0)
      return false;
  }
  const a92 = RTCRtpSender.getCapabilities("video");
  let u2 = false;
  if (a92) {
    for (const c of a92.codecs)
      if (c.mimeType === "video/VP9") {
        u2 = true;
        break;
      }
  }
  return u2;
}
function isSVCCodec(a92) {
  return a92 === "av1" || a92 === "vp9";
}
function supportsSetSinkId(a92) {
  return document ? (a92 || (a92 = document.createElement("audio")), "setSinkId" in a92) : false;
}
const setCodecPreferencesVersions = { Chrome: "100", Safari: "15", Firefox: "100" };
function supportsSetCodecPreferences(a92) {
  if (!isWeb() || !("setCodecPreferences" in a92))
    return false;
  const u2 = getBrowser();
  if (!(u2 != null && u2.name) || !u2.version)
    return false;
  const c = setCodecPreferencesVersions[u2.name];
  return c ? compareVersions(u2.version, c) >= 0 : false;
}
function isFireFox() {
  var a92;
  return ((a92 = getBrowser()) === null || a92 === void 0 ? void 0 : a92.name) === "Firefox";
}
function isSafari() {
  var a92;
  return ((a92 = getBrowser()) === null || a92 === void 0 ? void 0 : a92.name) === "Safari";
}
function isSafari17() {
  const a92 = getBrowser();
  return (a92 == null ? void 0 : a92.name) === "Safari" && a92.version.startsWith("17.");
}
function isMobile() {
  return isWeb() ? /Tablet|iPad|Mobile|Android|BlackBerry/.test(navigator.userAgent) : false;
}
function isWeb() {
  return typeof document < "u";
}
function isReactNative() {
  return navigator.product == "ReactNative";
}
function isCloud(a92) {
  return a92.hostname.endsWith(".livekit.cloud") || a92.hostname.endsWith(".livekit.run");
}
function getLKReactNativeInfo() {
  if (global && global.LiveKitReactNativeGlobal)
    return global.LiveKitReactNativeGlobal;
}
function getReactNativeOs() {
  if (!isReactNative())
    return;
  let a92 = getLKReactNativeInfo();
  if (a92)
    return a92.platform;
}
function getDevicePixelRatio() {
  if (isWeb())
    return window.devicePixelRatio;
  if (isReactNative()) {
    let a92 = getLKReactNativeInfo();
    if (a92)
      return a92.devicePixelRatio;
  }
  return 1;
}
function compareVersions(a92, u2) {
  const c = a92.split("."), l2 = u2.split("."), v2 = Math.min(c.length, l2.length);
  for (let S2 = 0; S2 < v2; ++S2) {
    const g2 = parseInt(c[S2], 10), E2 = parseInt(l2[S2], 10);
    if (g2 > E2)
      return 1;
    if (g2 < E2)
      return -1;
    if (S2 === v2 - 1 && g2 === E2)
      return 0;
  }
  return a92 === "" && u2 !== "" ? -1 : u2 === "" ? 1 : c.length == l2.length ? 0 : c.length < l2.length ? -1 : 1;
}
function roDispatchCallback(a92) {
  for (const u2 of a92)
    u2.target.handleResize(u2);
}
function ioDispatchCallback(a92) {
  for (const u2 of a92)
    u2.target.handleVisibilityChanged(u2);
}
let resizeObserver = null;
const getResizeObserver = () => (resizeObserver || (resizeObserver = new ResizeObserver(roDispatchCallback)), resizeObserver);
let intersectionObserver = null;
const getIntersectionObserver = () => (intersectionObserver || (intersectionObserver = new IntersectionObserver(ioDispatchCallback, { root: null, rootMargin: "0px" })), intersectionObserver);
function getClientInfo() {
  var a92;
  const u2 = new ClientInfo({ sdk: ClientInfo_SDK.JS, protocol: protocolVersion, version });
  return isReactNative() && (u2.os = (a92 = getReactNativeOs()) !== null && a92 !== void 0 ? a92 : ""), u2;
}
function createDummyVideoStreamTrack() {
  let a92 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 16, u2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 16, c = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false, l2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
  const v2 = document.createElement("canvas");
  v2.width = a92, v2.height = u2;
  const S2 = v2.getContext("2d");
  S2 == null || S2.fillRect(0, 0, v2.width, v2.height), l2 && S2 && (S2.beginPath(), S2.arc(a92 / 2, u2 / 2, 50, 0, Math.PI * 2, true), S2.closePath(), S2.fillStyle = "grey", S2.fill());
  const g2 = v2.captureStream(), [E2] = g2.getTracks();
  if (!E2)
    throw Error("Could not get empty media stream video track");
  return E2.enabled = c, E2;
}
let emptyAudioStreamTrack;
function getEmptyAudioStreamTrack() {
  if (!emptyAudioStreamTrack) {
    const a92 = new AudioContext(), u2 = a92.createOscillator(), c = a92.createGain();
    c.gain.setValueAtTime(0, 0);
    const l2 = a92.createMediaStreamDestination();
    if (u2.connect(c), c.connect(l2), u2.start(), [emptyAudioStreamTrack] = l2.stream.getAudioTracks(), !emptyAudioStreamTrack)
      throw Error("Could not get empty media stream audio track");
    emptyAudioStreamTrack.enabled = false;
  }
  return emptyAudioStreamTrack.clone();
}
class Future {
  constructor(u2, c) {
    this.onFinally = c, this.promise = new Promise((l2, v2) => __awaiter(this, void 0, void 0, function* () {
      this.resolve = l2, this.reject = v2, u2 && (yield u2(l2, v2));
    })).finally(() => {
      var l2;
      return (l2 = this.onFinally) === null || l2 === void 0 ? void 0 : l2.call(this);
    });
  }
}
class Mutex {
  constructor() {
    this._locking = Promise.resolve(), this._locks = 0;
  }
  isLocked() {
    return this._locks > 0;
  }
  lock() {
    this._locks += 1;
    let u2;
    const c = new Promise((v2) => u2 = () => {
      this._locks -= 1, v2();
    }), l2 = this._locking.then(() => u2);
    return this._locking = this._locking.then(() => c), l2;
  }
}
function isVideoCodec(a92) {
  return videoCodecs.includes(a92);
}
function unwrapConstraint(a92) {
  if (typeof a92 == "string")
    return a92;
  if (Array.isArray(a92))
    return a92[0];
  if (a92.exact)
    return Array.isArray(a92.exact) ? a92.exact[0] : a92.exact;
  if (a92.ideal)
    return Array.isArray(a92.ideal) ? a92.ideal[0] : a92.ideal;
  throw Error("could not unwrap constraint");
}
function toWebsocketUrl(a92) {
  return a92.startsWith("http") ? a92.replace(/^(http)/, "ws") : a92;
}
function toHttpUrl(a92) {
  return a92.startsWith("ws") ? a92.replace(/^(ws)/, "http") : a92;
}
const defaultId = "default";
class DeviceManager {
  static getInstance() {
    return this.instance === void 0 && (this.instance = new DeviceManager()), this.instance;
  }
  getDevices(u2) {
    let c = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    var l2;
    return __awaiter(this, void 0, void 0, function* () {
      if (((l2 = DeviceManager.userMediaPromiseMap) === null || l2 === void 0 ? void 0 : l2.size) > 0) {
        livekitLogger.debug("awaiting getUserMedia promise");
        try {
          u2 ? yield DeviceManager.userMediaPromiseMap.get(u2) : yield Promise.all(DeviceManager.userMediaPromiseMap.values());
        } catch {
          livekitLogger.warn("error waiting for media permissons");
        }
      }
      let v2 = yield navigator.mediaDevices.enumerateDevices();
      if (c && // for safari we need to skip this check, as otherwise it will re-acquire user media and fail on iOS https://bugs.webkit.org/show_bug.cgi?id=179363
      !(isSafari() && this.hasDeviceInUse(u2)) && (v2.length === 0 || v2.some((g2) => {
        const E2 = g2.label === "", _ = u2 ? g2.kind === u2 : true;
        return E2 && _;
      }))) {
        const g2 = { video: u2 !== "audioinput" && u2 !== "audiooutput", audio: u2 !== "videoinput" }, E2 = yield navigator.mediaDevices.getUserMedia(g2);
        v2 = yield navigator.mediaDevices.enumerateDevices(), E2.getTracks().forEach((_) => {
          _.stop();
        });
      }
      return u2 && (v2 = v2.filter((S2) => S2.kind === u2)), v2;
    });
  }
  normalizeDeviceId(u2, c, l2) {
    return __awaiter(this, void 0, void 0, function* () {
      if (c !== defaultId)
        return c;
      const S2 = (yield this.getDevices(u2)).find((g2) => g2.groupId === l2 && g2.deviceId !== defaultId);
      return S2 == null ? void 0 : S2.deviceId;
    });
  }
  hasDeviceInUse(u2) {
    return u2 ? DeviceManager.userMediaPromiseMap.has(u2) : DeviceManager.userMediaPromiseMap.size > 0;
  }
}
DeviceManager.mediaDeviceKinds = ["audioinput", "audiooutput", "videoinput"];
DeviceManager.userMediaPromiseMap = /* @__PURE__ */ new Map();
const defaultDimensionsTimeout = 1e3;
class LocalTrack extends Track {
  get constraints() {
    return this._constraints;
  }
  /**
  *
  * @param mediaTrack
  * @param kind
  * @param constraints MediaTrackConstraints that are being used when restarting or reacquiring tracks
  * @param userProvidedTrack Signals to the SDK whether or not the mediaTrack should be managed (i.e. released and reacquired) internally by the SDK
  */
  constructor(u2, c, l2) {
    let v2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false, S2 = arguments.length > 4 ? arguments[4] : void 0;
    super(u2, c, S2), this._isUpstreamPaused = false, this.handleTrackMuteEvent = () => this.debouncedTrackMuteHandler().catch(() => this.log.debug("track mute bounce got cancelled by an unmute event", this.logContext)), this.debouncedTrackMuteHandler = r(() => __awaiter(this, void 0, void 0, function* () {
      yield this.pauseUpstream();
    }), 5e3), this.handleTrackUnmuteEvent = () => __awaiter(this, void 0, void 0, function* () {
      this.debouncedTrackMuteHandler.cancel("unmute"), yield this.resumeUpstream();
    }), this.handleEnded = () => {
      this.isInBackground && (this.reacquireTrack = true), this._mediaStreamTrack.removeEventListener("mute", this.handleTrackMuteEvent), this._mediaStreamTrack.removeEventListener("unmute", this.handleTrackUnmuteEvent), this.emit(TrackEvent.Ended, this);
    }, this.reacquireTrack = false, this.providedByUser = v2, this.muteLock = new Mutex(), this.pauseUpstreamLock = new Mutex(), this.processorLock = new Mutex(), this.setMediaStreamTrack(u2, true), this._constraints = u2.getConstraints(), l2 && (this._constraints = l2);
  }
  get id() {
    return this._mediaStreamTrack.id;
  }
  get dimensions() {
    if (this.kind !== Track.Kind.Video)
      return;
    const { width: u2, height: c } = this._mediaStreamTrack.getSettings();
    if (u2 && c)
      return { width: u2, height: c };
  }
  get isUpstreamPaused() {
    return this._isUpstreamPaused;
  }
  get isUserProvided() {
    return this.providedByUser;
  }
  get mediaStreamTrack() {
    var u2, c;
    return (c = (u2 = this.processor) === null || u2 === void 0 ? void 0 : u2.processedTrack) !== null && c !== void 0 ? c : this._mediaStreamTrack;
  }
  setMediaStreamTrack(u2, c) {
    return __awaiter(this, void 0, void 0, function* () {
      if (u2 === this._mediaStreamTrack && !c)
        return;
      this._mediaStreamTrack && (this.attachedElements.forEach((v2) => {
        detachTrack(this._mediaStreamTrack, v2);
      }), this.debouncedTrackMuteHandler.cancel("new-track"), this._mediaStreamTrack.removeEventListener("ended", this.handleEnded), this._mediaStreamTrack.removeEventListener("mute", this.handleTrackMuteEvent), this._mediaStreamTrack.removeEventListener("unmute", this.handleTrackUnmuteEvent)), this.mediaStream = new MediaStream([u2]), u2 && (u2.addEventListener("ended", this.handleEnded), u2.addEventListener("mute", this.handleTrackMuteEvent), u2.addEventListener("unmute", this.handleTrackUnmuteEvent), this._constraints = u2.getConstraints());
      let l2;
      if (this.processor && u2 && this.processorElement) {
        if (this.log.debug("restarting processor", this.logContext), this.kind === "unknown")
          throw TypeError("cannot set processor on track of unknown kind");
        attachToElement(u2, this.processorElement), this.processorElement.muted = true, yield this.processor.restart({ track: u2, kind: this.kind, element: this.processorElement }), l2 = this.processor.processedTrack;
      }
      this.sender && (yield this.sender.replaceTrack(l2 ?? u2)), !this.providedByUser && this._mediaStreamTrack !== u2 && this._mediaStreamTrack.stop(), this._mediaStreamTrack = u2, u2 && (this._mediaStreamTrack.enabled = !this.isMuted, yield this.resumeUpstream(), this.attachedElements.forEach((v2) => {
        attachToElement(l2 ?? u2, v2);
      }));
    });
  }
  waitForDimensions() {
    let u2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : defaultDimensionsTimeout;
    var c;
    return __awaiter(this, void 0, void 0, function* () {
      if (this.kind === Track.Kind.Audio)
        throw new Error("cannot get dimensions for audio tracks");
      ((c = getBrowser()) === null || c === void 0 ? void 0 : c.os) === "iOS" && (yield sleep(10));
      const l2 = Date.now();
      for (; Date.now() - l2 < u2; ) {
        const v2 = this.dimensions;
        if (v2)
          return v2;
        yield sleep(50);
      }
      throw new TrackInvalidError("unable to get track dimensions after timeout");
    });
  }
  /**
  * @returns DeviceID of the device that is currently being used for this track
  */
  getDeviceId() {
    return __awaiter(this, void 0, void 0, function* () {
      if (this.source === Track.Source.ScreenShare)
        return;
      const { deviceId: u2, groupId: c } = this._mediaStreamTrack.getSettings(), l2 = this.kind === Track.Kind.Audio ? "audioinput" : "videoinput";
      return DeviceManager.getInstance().normalizeDeviceId(l2, u2, c);
    });
  }
  mute() {
    return __awaiter(this, void 0, void 0, function* () {
      return this.setTrackMuted(true), this;
    });
  }
  unmute() {
    return __awaiter(this, void 0, void 0, function* () {
      return this.setTrackMuted(false), this;
    });
  }
  replaceTrack(u2) {
    let c = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    return __awaiter(this, void 0, void 0, function* () {
      if (!this.sender)
        throw new TrackInvalidError("unable to replace an unpublished track");
      return this.log.debug("replace MediaStreamTrack", this.logContext), yield this.setMediaStreamTrack(u2), this.providedByUser = c, this.processor && (yield this.stopProcessor()), this;
    });
  }
  restart(u2) {
    return __awaiter(this, void 0, void 0, function* () {
      u2 || (u2 = this._constraints), this.log.debug("restarting track with constraints", Object.assign(Object.assign({}, this.logContext), { constraints: u2 }));
      const c = { audio: false, video: false };
      this.kind === Track.Kind.Video ? c.video = u2 : c.audio = u2, this.attachedElements.forEach((S2) => {
        detachTrack(this.mediaStreamTrack, S2);
      }), this._mediaStreamTrack.removeEventListener("ended", this.handleEnded), this._mediaStreamTrack.stop();
      const v2 = (yield navigator.mediaDevices.getUserMedia(c)).getTracks()[0];
      return v2.addEventListener("ended", this.handleEnded), this.log.debug("re-acquired MediaStreamTrack", this.logContext), yield this.setMediaStreamTrack(v2), this._constraints = u2, this.emit(TrackEvent.Restarted, this), this;
    });
  }
  setTrackMuted(u2) {
    this.log.debug("setting ".concat(this.kind, " track ").concat(u2 ? "muted" : "unmuted"), this.logContext), !(this.isMuted === u2 && this._mediaStreamTrack.enabled !== u2) && (this.isMuted = u2, this._mediaStreamTrack.enabled = !u2, this.emit(u2 ? TrackEvent.Muted : TrackEvent.Unmuted, this));
  }
  get needsReAcquisition() {
    return this._mediaStreamTrack.readyState !== "live" || this._mediaStreamTrack.muted || !this._mediaStreamTrack.enabled || this.reacquireTrack;
  }
  handleAppVisibilityChanged() {
    const u2 = Object.create(null, { handleAppVisibilityChanged: { get: () => super.handleAppVisibilityChanged } });
    return __awaiter(this, void 0, void 0, function* () {
      yield u2.handleAppVisibilityChanged.call(this), isMobile() && (this.log.debug("visibility changed, is in Background: ".concat(this.isInBackground), this.logContext), !this.isInBackground && this.needsReAcquisition && !this.isUserProvided && !this.isMuted && (this.log.debug("track needs to be reacquired, restarting ".concat(this.source), this.logContext), yield this.restart(), this.reacquireTrack = false));
    });
  }
  stop() {
    var u2;
    super.stop(), this._mediaStreamTrack.removeEventListener("ended", this.handleEnded), this._mediaStreamTrack.removeEventListener("mute", this.handleTrackMuteEvent), this._mediaStreamTrack.removeEventListener("unmute", this.handleTrackUnmuteEvent), (u2 = this.processor) === null || u2 === void 0 || u2.destroy(), this.processor = void 0;
  }
  /**
  * pauses publishing to the server without disabling the local MediaStreamTrack
  * this is used to display a user's own video locally while pausing publishing to
  * the server.
  * this API is unsupported on Safari < 12 due to a bug
  **/
  pauseUpstream() {
    return __awaiter(this, void 0, void 0, function* () {
      const u2 = yield this.pauseUpstreamLock.lock();
      try {
        if (this._isUpstreamPaused === true)
          return;
        if (!this.sender) {
          this.log.warn("unable to pause upstream for an unpublished track", this.logContext);
          return;
        }
        this._isUpstreamPaused = true, this.emit(TrackEvent.UpstreamPaused, this);
        const c = getBrowser();
        if ((c == null ? void 0 : c.name) === "Safari" && compareVersions(c.version, "12.0") < 0)
          throw new DeviceUnsupportedError("pauseUpstream is not supported on Safari < 12.");
        yield this.sender.replaceTrack(null);
      } finally {
        u2();
      }
    });
  }
  resumeUpstream() {
    return __awaiter(this, void 0, void 0, function* () {
      const u2 = yield this.pauseUpstreamLock.lock();
      try {
        if (this._isUpstreamPaused === false)
          return;
        if (!this.sender) {
          this.log.warn("unable to resume upstream for an unpublished track", this.logContext);
          return;
        }
        this._isUpstreamPaused = false, this.emit(TrackEvent.UpstreamResumed, this), yield this.sender.replaceTrack(this._mediaStreamTrack);
      } finally {
        u2();
      }
    });
  }
  /**
  * Gets the RTCStatsReport for the LocalTrack's underlying RTCRtpSender
  * See https://developer.mozilla.org/en-US/docs/Web/API/RTCStatsReport
  *
  * @returns Promise<RTCStatsReport> | undefined
  */
  getRTCStatsReport() {
    var u2;
    return __awaiter(this, void 0, void 0, function* () {
      return !((u2 = this.sender) === null || u2 === void 0) && u2.getStats ? yield this.sender.getStats() : void 0;
    });
  }
  /**
  * Sets a processor on this track.
  * See https://github.com/livekit/track-processors-js for example usage
  *
  * @experimental
  *
  * @param processor
  * @param showProcessedStreamLocally
  * @returns
  */
  setProcessor(u2) {
    let c = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    var l2, v2;
    return __awaiter(this, void 0, void 0, function* () {
      const S2 = yield this.processorLock.lock();
      try {
        if (this.log.debug("setting up processor", this.logContext), this.processor && (yield this.stopProcessor()), this.kind === "unknown")
          throw TypeError("cannot set processor on track of unknown kind");
        this.processorElement = (l2 = this.processorElement) !== null && l2 !== void 0 ? l2 : document.createElement(this.kind), attachToElement(this._mediaStreamTrack, this.processorElement), this.processorElement.muted = true, this.processorElement.play().catch((E2) => this.log.error("failed to play processor element", Object.assign(Object.assign({}, this.logContext), { error: E2 })));
        const g2 = { kind: this.kind, track: this._mediaStreamTrack, element: this.processorElement };
        if (yield u2.init(g2), this.processor = u2, this.processor.processedTrack) {
          for (const E2 of this.attachedElements)
            E2 !== this.processorElement && c && (detachTrack(this._mediaStreamTrack, E2), attachToElement(this.processor.processedTrack, E2));
          yield (v2 = this.sender) === null || v2 === void 0 ? void 0 : v2.replaceTrack(this.processor.processedTrack);
        }
      } finally {
        S2();
      }
    });
  }
  getProcessor() {
    return this.processor;
  }
  /**
  * Stops the track processor
  * See https://github.com/livekit/track-processors-js for example usage
  *
  * @experimental
  * @returns
  */
  stopProcessor() {
    var u2, c;
    return __awaiter(this, void 0, void 0, function* () {
      this.processor && (this.log.debug("stopping processor", this.logContext), (u2 = this.processor.processedTrack) === null || u2 === void 0 || u2.stop(), yield this.processor.destroy(), this.processor = void 0, (c = this.processorElement) === null || c === void 0 || c.remove(), this.processorElement = void 0, yield this.restart());
    });
  }
}
class E2EEManager extends eventsExports.EventEmitter {
  constructor(u2) {
    super(), this.onWorkerMessage = (c) => {
      var l2, v2;
      const { kind: S2, data: g2 } = c.data;
      switch (S2) {
        case "error":
          livekitLogger.error(g2.error.message), this.emit(EncryptionEvent.EncryptionError, g2.error);
          break;
        case "initAck":
          g2.enabled && this.keyProvider.getKeys().forEach((E2) => {
            this.postKey(E2);
          });
          break;
        case "enable":
          if (this.encryptionEnabled !== g2.enabled && g2.participantIdentity === ((l2 = this.room) === null || l2 === void 0 ? void 0 : l2.localParticipant.identity))
            this.emit(EncryptionEvent.ParticipantEncryptionStatusChanged, g2.enabled, this.room.localParticipant), this.encryptionEnabled = g2.enabled;
          else if (g2.participantIdentity) {
            const E2 = (v2 = this.room) === null || v2 === void 0 ? void 0 : v2.getParticipantByIdentity(g2.participantIdentity);
            if (!E2)
              throw TypeError("couldn't set encryption status, participant not found".concat(g2.participantIdentity));
            this.emit(EncryptionEvent.ParticipantEncryptionStatusChanged, g2.enabled, E2);
          }
          this.encryptionEnabled && this.keyProvider.getKeys().forEach((E2) => {
            this.postKey(E2);
          });
          break;
        case "ratchetKey":
          this.keyProvider.emit(KeyProviderEvent.KeyRatcheted, g2.material, g2.keyIndex);
          break;
      }
    }, this.onWorkerError = (c) => {
      livekitLogger.error("e2ee worker encountered an error:", { error: c.error }), this.emit(EncryptionEvent.EncryptionError, c.error);
    }, this.keyProvider = u2.keyProvider, this.worker = u2.worker, this.encryptionEnabled = false;
  }
  /**
  * @internal
  */
  setup(u2) {
    if (!isE2EESupported())
      throw new DeviceUnsupportedError("tried to setup end-to-end encryption on an unsupported browser");
    if (livekitLogger.info("setting up e2ee"), u2 !== this.room) {
      this.room = u2, this.setupEventListeners(u2, this.keyProvider);
      const c = { kind: "init", data: { keyProviderOptions: this.keyProvider.getOptions() } };
      this.worker && (livekitLogger.info("initializing worker", { worker: this.worker }), this.worker.onmessage = this.onWorkerMessage, this.worker.onerror = this.onWorkerError, this.worker.postMessage(c));
    }
  }
  /**
  * @internal
  */
  setParticipantCryptorEnabled(u2, c) {
    livekitLogger.debug("set e2ee to ".concat(u2, " for participant ").concat(c)), this.postEnable(u2, c);
  }
  /**
  * @internal
  */
  setSifTrailer(u2) {
    !u2 || u2.length === 0 ? livekitLogger.warn("ignoring server sent trailer as it's empty") : this.postSifTrailer(u2);
  }
  setupEngine(u2) {
    u2.on(EngineEvent.RTPVideoMapUpdate, (c) => {
      this.postRTPMap(c);
    });
  }
  setupEventListeners(u2, c) {
    u2.on(RoomEvent.TrackPublished, (l2, v2) => this.setParticipantCryptorEnabled(l2.trackInfo.encryption !== Encryption_Type.NONE, v2.identity)), u2.on(RoomEvent.ConnectionStateChanged, (l2) => {
      l2 === ConnectionState.Connected && u2.remoteParticipants.forEach((v2) => {
        v2.trackPublications.forEach((S2) => {
          this.setParticipantCryptorEnabled(S2.trackInfo.encryption !== Encryption_Type.NONE, v2.identity);
        });
      });
    }).on(RoomEvent.TrackUnsubscribed, (l2, v2, S2) => {
      var g2;
      const E2 = { kind: "removeTransform", data: { participantIdentity: S2.identity, trackId: l2.mediaStreamID } };
      (g2 = this.worker) === null || g2 === void 0 || g2.postMessage(E2);
    }).on(RoomEvent.TrackSubscribed, (l2, v2, S2) => {
      this.setupE2EEReceiver(l2, S2.identity, v2.trackInfo);
    }).on(RoomEvent.SignalConnected, () => {
      if (!this.room)
        throw new TypeError("expected room to be present on signal connect");
      this.setParticipantCryptorEnabled(this.room.localParticipant.isE2EEEnabled, this.room.localParticipant.identity), c.getKeys().forEach((l2) => {
        this.postKey(l2);
      });
    }), u2.localParticipant.on(ParticipantEvent.LocalTrackPublished, (l2) => __awaiter(this, void 0, void 0, function* () {
      this.setupE2EESender(l2.track, l2.track.sender);
    })), c.on(KeyProviderEvent.SetKey, (l2) => this.postKey(l2)).on(KeyProviderEvent.RatchetRequest, (l2, v2) => this.postRatchetRequest(l2, v2));
  }
  postRatchetRequest(u2, c) {
    if (!this.worker)
      throw Error("could not ratchet key, worker is missing");
    const l2 = { kind: "ratchetRequest", data: { participantIdentity: u2, keyIndex: c } };
    this.worker.postMessage(l2);
  }
  postKey(u2) {
    let { key: c, participantIdentity: l2, keyIndex: v2 } = u2;
    var S2;
    if (!this.worker)
      throw Error("could not set key, worker is missing");
    const g2 = { kind: "setKey", data: { participantIdentity: l2, isPublisher: l2 === ((S2 = this.room) === null || S2 === void 0 ? void 0 : S2.localParticipant.identity), key: c, keyIndex: v2 } };
    this.worker.postMessage(g2);
  }
  postEnable(u2, c) {
    if (this.worker) {
      const l2 = { kind: "enable", data: { enabled: u2, participantIdentity: c } };
      this.worker.postMessage(l2);
    } else
      throw new ReferenceError("failed to enable e2ee, worker is not ready");
  }
  postRTPMap(u2) {
    var c;
    if (!this.worker)
      throw TypeError("could not post rtp map, worker is missing");
    if (!(!((c = this.room) === null || c === void 0) && c.localParticipant.identity))
      throw TypeError("could not post rtp map, local participant identity is missing");
    const l2 = { kind: "setRTPMap", data: { map: u2, participantIdentity: this.room.localParticipant.identity } };
    this.worker.postMessage(l2);
  }
  postSifTrailer(u2) {
    if (!this.worker)
      throw Error("could not post SIF trailer, worker is missing");
    const c = { kind: "setSifTrailer", data: { trailer: u2 } };
    this.worker.postMessage(c);
  }
  setupE2EEReceiver(u2, c, l2) {
    if (u2.receiver) {
      if (!(l2 != null && l2.mimeType) || l2.mimeType === "")
        throw new TypeError("MimeType missing from trackInfo, cannot set up E2EE cryptor");
      this.handleReceiver(u2.receiver, u2.mediaStreamID, c, u2.kind === "video" ? mimeTypeToVideoCodecString(l2.mimeType) : void 0);
    }
  }
  setupE2EESender(u2, c) {
    if (!(u2 instanceof LocalTrack) || !c) {
      c || livekitLogger.warn("early return because sender is not ready");
      return;
    }
    this.handleSender(c, u2.mediaStreamID, void 0);
  }
  /**
  * Handles the given {@code RTCRtpReceiver} by creating a {@code TransformStream} which will inject
  * a frame decoder.
  *
  */
  handleReceiver(u2, c, l2, v2) {
    return __awaiter(this, void 0, void 0, function* () {
      if (this.worker) {
        if (isScriptTransformSupported()) {
          const S2 = { kind: "decode", participantIdentity: l2, trackId: c, codec: v2 };
          u2.transform = new RTCRtpScriptTransform(this.worker, S2);
        } else {
          if (E2EE_FLAG in u2 && v2) {
            const _ = { kind: "updateCodec", data: { trackId: c, codec: v2, participantIdentity: l2 } };
            this.worker.postMessage(_);
            return;
          }
          let S2 = u2.writableStream, g2 = u2.readableStream;
          if (!S2 || !g2) {
            const _ = u2.createEncodedStreams();
            u2.writableStream = _.writable, S2 = _.writable, u2.readableStream = _.readable, g2 = _.readable;
          }
          const E2 = { kind: "decode", data: { readableStream: g2, writableStream: S2, trackId: c, codec: v2, participantIdentity: l2 } };
          this.worker.postMessage(E2, [g2, S2]);
        }
        u2[E2EE_FLAG] = true;
      }
    });
  }
  /**
  * Handles the given {@code RTCRtpSender} by creating a {@code TransformStream} which will inject
  * a frame encoder.
  *
  */
  handleSender(u2, c, l2) {
    var v2;
    if (!(E2EE_FLAG in u2 || !this.worker)) {
      if (!(!((v2 = this.room) === null || v2 === void 0) && v2.localParticipant.identity) || this.room.localParticipant.identity === "")
        throw TypeError("local identity needs to be known in order to set up encrypted sender");
      if (isScriptTransformSupported()) {
        livekitLogger.info("initialize script transform");
        const S2 = { kind: "encode", participantIdentity: this.room.localParticipant.identity, trackId: c, codec: l2 };
        u2.transform = new RTCRtpScriptTransform(this.worker, S2);
      } else {
        livekitLogger.info("initialize encoded streams");
        const S2 = u2.createEncodedStreams(), g2 = { kind: "encode", data: { readableStream: S2.readable, writableStream: S2.writable, codec: l2, trackId: c, participantIdentity: this.room.localParticipant.identity } };
        this.worker.postMessage(g2, [S2.readable, S2.writable]);
      }
      u2[E2EE_FLAG] = true;
    }
  }
}
var QueueTaskStatus;
(function(a92) {
  a92[a92.WAITING = 0] = "WAITING", a92[a92.RUNNING = 1] = "RUNNING", a92[a92.COMPLETED = 2] = "COMPLETED";
})(QueueTaskStatus || (QueueTaskStatus = {}));
class AsyncQueue {
  constructor() {
    this.pendingTasks = /* @__PURE__ */ new Map(), this.taskMutex = new Mutex(), this.nextTaskIndex = 0;
  }
  run(u2) {
    return __awaiter(this, void 0, void 0, function* () {
      const c = { id: this.nextTaskIndex++, enqueuedAt: Date.now(), status: QueueTaskStatus.WAITING };
      this.pendingTasks.set(c.id, c);
      const l2 = yield this.taskMutex.lock();
      try {
        return c.executedAt = Date.now(), c.status = QueueTaskStatus.RUNNING, yield u2();
      } finally {
        c.status = QueueTaskStatus.COMPLETED, this.pendingTasks.delete(c.id), l2();
      }
    });
  }
  flush() {
    return __awaiter(this, void 0, void 0, function* () {
      return this.run(() => __awaiter(this, void 0, void 0, function* () {
      }));
    });
  }
  snapshot() {
    return Array.from(this.pendingTasks.values());
  }
}
const passThroughQueueSignals = ["syncState", "trickle", "offer", "answer", "simulate", "leave"];
function canPassThroughQueue(a92) {
  const u2 = passThroughQueueSignals.indexOf(a92.case) >= 0;
  return livekitLogger.trace("request allowed to bypass queue:", { canPass: u2, req: a92 }), u2;
}
var SignalConnectionState;
(function(a92) {
  a92[a92.CONNECTING = 0] = "CONNECTING", a92[a92.CONNECTED = 1] = "CONNECTED", a92[a92.RECONNECTING = 2] = "RECONNECTING", a92[a92.DISCONNECTING = 3] = "DISCONNECTING", a92[a92.DISCONNECTED = 4] = "DISCONNECTED";
})(SignalConnectionState || (SignalConnectionState = {}));
class SignalClient {
  get currentState() {
    return this.state;
  }
  get isDisconnected() {
    return this.state === SignalConnectionState.DISCONNECTING || this.state === SignalConnectionState.DISCONNECTED;
  }
  get isEstablishingConnection() {
    return this.state === SignalConnectionState.CONNECTING || this.state === SignalConnectionState.RECONNECTING;
  }
  constructor() {
    let u2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false, c = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var l2;
    this.rtt = 0, this.state = SignalConnectionState.DISCONNECTED, this.log = livekitLogger, this.resetCallbacks = () => {
      this.onAnswer = void 0, this.onLeave = void 0, this.onLocalTrackPublished = void 0, this.onLocalTrackUnpublished = void 0, this.onNegotiateRequested = void 0, this.onOffer = void 0, this.onRemoteMuteChanged = void 0, this.onSubscribedQualityUpdate = void 0, this.onTokenRefresh = void 0, this.onTrickle = void 0, this.onClose = void 0;
    }, this.log = getLogger((l2 = c.loggerName) !== null && l2 !== void 0 ? l2 : LoggerNames.Signal), this.loggerContextCb = c.loggerContextCb, this.useJSON = u2, this.requestQueue = new AsyncQueue(), this.queuedRequests = [], this.closingLock = new Mutex(), this.connectionLock = new Mutex(), this.state = SignalConnectionState.DISCONNECTED;
  }
  get logContext() {
    var u2, c;
    return (c = (u2 = this.loggerContextCb) === null || u2 === void 0 ? void 0 : u2.call(this)) !== null && c !== void 0 ? c : {};
  }
  join(u2, c, l2, v2) {
    return __awaiter(this, void 0, void 0, function* () {
      return this.state = SignalConnectionState.CONNECTING, this.options = l2, yield this.connect(u2, c, l2, v2);
    });
  }
  reconnect(u2, c, l2, v2) {
    return __awaiter(this, void 0, void 0, function* () {
      if (!this.options) {
        this.log.warn("attempted to reconnect without signal options being set, ignoring", this.logContext);
        return;
      }
      return this.state = SignalConnectionState.RECONNECTING, this.clearPingInterval(), yield this.connect(u2, c, Object.assign(Object.assign({}, this.options), { reconnect: true, sid: l2, reconnectReason: v2 }));
    });
  }
  connect(u2, c, l2, v2) {
    this.connectOptions = l2, u2 = toWebsocketUrl(u2), u2 = u2.replace(/\/$/, ""), u2 += "/rtc";
    const S2 = getClientInfo(), g2 = createConnectionParams(c, S2, l2);
    return new Promise((E2, _) => __awaiter(this, void 0, void 0, function* () {
      const k = yield this.connectionLock.lock();
      try {
        const L2 = () => __awaiter(this, void 0, void 0, function* () {
          this.close(), clearTimeout(M2), _(new ConnectionError("room connection has been cancelled (signal)"));
        }), M2 = setTimeout(() => {
          this.close(), _(new ConnectionError("room connection has timed out (signal)"));
        }, l2.websocketTimeout);
        v2 != null && v2.aborted && L2(), v2 == null || v2.addEventListener("abort", L2), this.log.debug("connecting to ".concat(u2 + g2), this.logContext), this.ws && (yield this.close(false)), this.ws = new WebSocket(u2 + g2), this.ws.binaryType = "arraybuffer", this.ws.onopen = () => {
          clearTimeout(M2);
        }, this.ws.onerror = ($) => __awaiter(this, void 0, void 0, function* () {
          if (this.state !== SignalConnectionState.CONNECTED) {
            clearTimeout(M2);
            try {
              const J2 = yield fetch("http".concat(u2.substring(2), "/validate").concat(g2));
              if (J2.status.toFixed(0).startsWith("4")) {
                const V2 = yield J2.text();
                _(new ConnectionError(V2, 0, J2.status));
              } else
                _(new ConnectionError("Internal error", 2, J2.status));
            } catch {
              _(new ConnectionError(
                "server was not reachable",
                1
                /* ConnectionErrorReason.ServerUnreachable */
              ));
            }
            return;
          }
          this.handleWSError($);
        }), this.ws.onmessage = ($) => __awaiter(this, void 0, void 0, function* () {
          var J2, V2, q2, G2;
          let H2;
          if (typeof $.data == "string") {
            const B2 = JSON.parse($.data);
            H2 = SignalResponse.fromJson(B2);
          } else if ($.data instanceof ArrayBuffer)
            H2 = SignalResponse.fromBinary(new Uint8Array($.data));
          else {
            this.log.error("could not decode websocket message: ".concat(typeof $.data), this.logContext);
            return;
          }
          if (this.state !== SignalConnectionState.CONNECTED) {
            let B2 = false;
            if (((J2 = H2.message) === null || J2 === void 0 ? void 0 : J2.case) === "join" ? (this.state = SignalConnectionState.CONNECTED, v2 == null || v2.removeEventListener("abort", L2), this.pingTimeoutDuration = H2.message.value.pingTimeout, this.pingIntervalDuration = H2.message.value.pingInterval, this.pingTimeoutDuration && this.pingTimeoutDuration > 0 && (this.log.debug("ping config", Object.assign(Object.assign({}, this.logContext), { timeout: this.pingTimeoutDuration, interval: this.pingIntervalDuration })), this.startPingInterval()), E2(H2.message.value)) : this.state === SignalConnectionState.RECONNECTING && H2.message.case !== "leave" ? (this.state = SignalConnectionState.CONNECTED, v2 == null || v2.removeEventListener("abort", L2), this.startPingInterval(), ((V2 = H2.message) === null || V2 === void 0 ? void 0 : V2.case) === "reconnect" ? E2((q2 = H2.message) === null || q2 === void 0 ? void 0 : q2.value) : (E2(), B2 = true)) : this.isEstablishingConnection && H2.message.case === "leave" ? _(new ConnectionError(
              "Received leave request while trying to (re)connect",
              4
              /* ConnectionErrorReason.LeaveRequest */
            )) : l2.reconnect || _(new ConnectionError("did not receive join response, got ".concat((G2 = H2.message) === null || G2 === void 0 ? void 0 : G2.case, " instead"))), !B2)
              return;
          }
          this.signalLatency && (yield sleep(this.signalLatency)), this.handleSignalResponse(H2);
        }), this.ws.onclose = ($) => {
          this.isEstablishingConnection && _(new ConnectionError("Websocket got closed during a (re)connection attempt")), this.log.warn("websocket closed", Object.assign(Object.assign({}, this.logContext), { reason: $.reason, code: $.code, wasClean: $.wasClean, state: this.state })), this.handleOnClose($.reason);
        };
      } finally {
        k();
      }
    }));
  }
  close() {
    let u2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
    return __awaiter(this, void 0, void 0, function* () {
      const c = yield this.closingLock.lock();
      try {
        if (u2 && (this.state = SignalConnectionState.DISCONNECTING), this.ws) {
          this.ws.onmessage = null, this.ws.onopen = null, this.ws.onclose = null;
          const l2 = new Promise((v2) => {
            this.ws ? this.ws.onclose = () => {
              v2();
            } : v2();
          });
          this.ws.readyState < this.ws.CLOSING && (this.ws.close(), yield Promise.race([l2, sleep(250)])), this.ws = void 0;
        }
      } finally {
        u2 && (this.state = SignalConnectionState.DISCONNECTED), this.clearPingInterval(), c();
      }
    });
  }
  // initial offer after joining
  sendOffer(u2) {
    this.log.debug("sending offer", Object.assign(Object.assign({}, this.logContext), { offerSdp: u2.sdp })), this.sendRequest({ case: "offer", value: toProtoSessionDescription(u2) });
  }
  // answer a server-initiated offer
  sendAnswer(u2) {
    return this.log.debug("sending answer", Object.assign(Object.assign({}, this.logContext), { answerSdp: u2.sdp })), this.sendRequest({ case: "answer", value: toProtoSessionDescription(u2) });
  }
  sendIceCandidate(u2, c) {
    return this.log.trace("sending ice candidate", Object.assign(Object.assign({}, this.logContext), { candidate: u2 })), this.sendRequest({ case: "trickle", value: new TrickleRequest({ candidateInit: JSON.stringify(u2), target: c }) });
  }
  sendMuteTrack(u2, c) {
    return this.sendRequest({ case: "mute", value: new MuteTrackRequest({ sid: u2, muted: c }) });
  }
  sendAddTrack(u2) {
    return this.sendRequest({ case: "addTrack", value: u2 });
  }
  sendUpdateLocalMetadata(u2, c) {
    return this.sendRequest({ case: "updateMetadata", value: new UpdateParticipantMetadata({ metadata: u2, name: c }) });
  }
  sendUpdateTrackSettings(u2) {
    this.sendRequest({ case: "trackSetting", value: u2 });
  }
  sendUpdateSubscription(u2) {
    return this.sendRequest({ case: "subscription", value: u2 });
  }
  sendSyncState(u2) {
    return this.sendRequest({ case: "syncState", value: u2 });
  }
  sendUpdateVideoLayers(u2, c) {
    return this.sendRequest({ case: "updateLayers", value: new UpdateVideoLayers({ trackSid: u2, layers: c }) });
  }
  sendUpdateSubscriptionPermissions(u2, c) {
    return this.sendRequest({ case: "subscriptionPermission", value: new SubscriptionPermission({ allParticipants: u2, trackPermissions: c }) });
  }
  sendSimulateScenario(u2) {
    return this.sendRequest({ case: "simulate", value: u2 });
  }
  sendPing() {
    return Promise.all([this.sendRequest({ case: "ping", value: protoInt64.parse(Date.now()) }), this.sendRequest({ case: "pingReq", value: new Ping({ timestamp: protoInt64.parse(Date.now()), rtt: protoInt64.parse(this.rtt) }) })]);
  }
  sendLeave() {
    return this.sendRequest({ case: "leave", value: new LeaveRequest({ canReconnect: false, reason: DisconnectReason.CLIENT_INITIATED }) });
  }
  sendRequest(u2) {
    let c = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    return __awaiter(this, void 0, void 0, function* () {
      if (!c && !canPassThroughQueue(u2) && this.state === SignalConnectionState.RECONNECTING) {
        this.queuedRequests.push(() => __awaiter(this, void 0, void 0, function* () {
          yield this.sendRequest(u2, true);
        }));
        return;
      }
      if (c || (yield this.requestQueue.flush()), this.signalLatency && (yield sleep(this.signalLatency)), !this.ws || this.ws.readyState !== this.ws.OPEN) {
        this.log.error("cannot send signal request before connected, type: ".concat(u2 == null ? void 0 : u2.case), this.logContext);
        return;
      }
      const v2 = new SignalRequest({ message: u2 });
      try {
        this.useJSON ? this.ws.send(v2.toJsonString()) : this.ws.send(v2.toBinary());
      } catch (S2) {
        this.log.error("error sending signal message", Object.assign(Object.assign({}, this.logContext), { error: S2 }));
      }
    });
  }
  handleSignalResponse(u2) {
    var c, l2;
    const v2 = u2.message;
    if (v2 == null) {
      this.log.debug("received unsupported message", this.logContext);
      return;
    }
    let S2 = false;
    if (v2.case === "answer") {
      const g2 = fromProtoSessionDescription(v2.value);
      this.onAnswer && this.onAnswer(g2);
    } else if (v2.case === "offer") {
      const g2 = fromProtoSessionDescription(v2.value);
      this.onOffer && this.onOffer(g2);
    } else if (v2.case === "trickle") {
      const g2 = JSON.parse(v2.value.candidateInit);
      this.onTrickle && this.onTrickle(g2, v2.value.target);
    } else
      v2.case === "update" ? this.onParticipantUpdate && this.onParticipantUpdate((c = v2.value.participants) !== null && c !== void 0 ? c : []) : v2.case === "trackPublished" ? this.onLocalTrackPublished && this.onLocalTrackPublished(v2.value) : v2.case === "speakersChanged" ? this.onSpeakersChanged && this.onSpeakersChanged((l2 = v2.value.speakers) !== null && l2 !== void 0 ? l2 : []) : v2.case === "leave" ? this.onLeave && this.onLeave(v2.value) : v2.case === "mute" ? this.onRemoteMuteChanged && this.onRemoteMuteChanged(v2.value.sid, v2.value.muted) : v2.case === "roomUpdate" ? this.onRoomUpdate && v2.value.room && this.onRoomUpdate(v2.value.room) : v2.case === "connectionQuality" ? this.onConnectionQuality && this.onConnectionQuality(v2.value) : v2.case === "streamStateUpdate" ? this.onStreamStateUpdate && this.onStreamStateUpdate(v2.value) : v2.case === "subscribedQualityUpdate" ? this.onSubscribedQualityUpdate && this.onSubscribedQualityUpdate(v2.value) : v2.case === "subscriptionPermissionUpdate" ? this.onSubscriptionPermissionUpdate && this.onSubscriptionPermissionUpdate(v2.value) : v2.case === "refreshToken" ? this.onTokenRefresh && this.onTokenRefresh(v2.value) : v2.case === "trackUnpublished" ? this.onLocalTrackUnpublished && this.onLocalTrackUnpublished(v2.value) : v2.case === "subscriptionResponse" ? this.onSubscriptionError && this.onSubscriptionError(v2.value) : v2.case === "pong" || (v2.case === "pongResp" ? (this.rtt = Date.now() - Number.parseInt(v2.value.lastPingTimestamp.toString()), this.resetPingTimeout(), S2 = true) : this.log.debug("unsupported message", Object.assign(Object.assign({}, this.logContext), { msgCase: v2.case })));
    S2 || this.resetPingTimeout();
  }
  setReconnected() {
    for (; this.queuedRequests.length > 0; ) {
      const u2 = this.queuedRequests.shift();
      u2 && this.requestQueue.run(u2);
    }
  }
  handleOnClose(u2) {
    return __awaiter(this, void 0, void 0, function* () {
      if (this.state === SignalConnectionState.DISCONNECTED)
        return;
      const c = this.onClose;
      yield this.close(), this.log.debug("websocket connection closed: ".concat(u2), Object.assign(Object.assign({}, this.logContext), { reason: u2 })), c && c(u2);
    });
  }
  handleWSError(u2) {
    this.log.error("websocket error", Object.assign(Object.assign({}, this.logContext), { error: u2 }));
  }
  /**
  * Resets the ping timeout and starts a new timeout.
  * Call this after receiving a pong message
  */
  resetPingTimeout() {
    if (this.clearPingTimeout(), !this.pingTimeoutDuration) {
      this.log.warn("ping timeout duration not set", this.logContext);
      return;
    }
    this.pingTimeout = CriticalTimers.setTimeout(() => {
      this.log.warn("ping timeout triggered. last pong received at: ".concat(new Date(Date.now() - this.pingTimeoutDuration * 1e3).toUTCString()), this.logContext), this.handleOnClose("ping timeout");
    }, this.pingTimeoutDuration * 1e3);
  }
  /**
  * Clears ping timeout (does not start a new timeout)
  */
  clearPingTimeout() {
    this.pingTimeout && CriticalTimers.clearTimeout(this.pingTimeout);
  }
  startPingInterval() {
    if (this.clearPingInterval(), this.resetPingTimeout(), !this.pingIntervalDuration) {
      this.log.warn("ping interval duration not set", this.logContext);
      return;
    }
    this.log.debug("start ping interval", this.logContext), this.pingInterval = CriticalTimers.setInterval(() => {
      this.sendPing();
    }, this.pingIntervalDuration * 1e3);
  }
  clearPingInterval() {
    this.log.debug("clearing ping interval", this.logContext), this.clearPingTimeout(), this.pingInterval && CriticalTimers.clearInterval(this.pingInterval);
  }
}
function fromProtoSessionDescription(a92) {
  const u2 = { type: "offer", sdp: a92.sdp };
  switch (a92.type) {
    case "answer":
    case "offer":
    case "pranswer":
    case "rollback":
      u2.type = a92.type;
      break;
  }
  return u2;
}
function toProtoSessionDescription(a92) {
  return new SessionDescription({ sdp: a92.sdp, type: a92.type });
}
function createConnectionParams(a92, u2, c) {
  var l2;
  const v2 = new URLSearchParams();
  return v2.set("access_token", a92), c.reconnect && (v2.set("reconnect", "1"), c.sid && v2.set("sid", c.sid)), v2.set("auto_subscribe", c.autoSubscribe ? "1" : "0"), v2.set("sdk", isReactNative() ? "reactnative" : "js"), v2.set("version", u2.version), v2.set("protocol", u2.protocol.toString()), u2.deviceModel && v2.set("device_model", u2.deviceModel), u2.os && v2.set("os", u2.os), u2.osVersion && v2.set("os_version", u2.osVersion), u2.browser && v2.set("browser", u2.browser), u2.browserVersion && v2.set("browser_version", u2.browserVersion), c.adaptiveStream && v2.set("adaptive_stream", "1"), c.reconnectReason && v2.set("reconnect_reason", c.reconnectReason.toString()), !((l2 = navigator.connection) === null || l2 === void 0) && l2.type && v2.set("network", navigator.connection.type), "?".concat(v2.toString());
}
var parser$1 = {}, grammar$2 = { exports: {} }, grammar$1 = grammar$2.exports = {
  v: [{ name: "version", reg: /^(\d*)$/ }],
  o: [{
    // o=- 20518 0 IN IP4 203.0.113.1
    // NB: sessionId will be a String in most cases because it is huge
    name: "origin",
    reg: /^(\S*) (\d*) (\d*) (\S*) IP(\d) (\S*)/,
    names: ["username", "sessionId", "sessionVersion", "netType", "ipVer", "address"],
    format: "%s %s %d %s IP%d %s"
  }],
  // default parsing of these only (though some of these feel outdated)
  s: [{ name: "name" }],
  i: [{ name: "description" }],
  u: [{ name: "uri" }],
  e: [{ name: "email" }],
  p: [{ name: "phone" }],
  z: [{ name: "timezones" }],
  // TODO: this one can actually be parsed properly...
  r: [{ name: "repeats" }],
  // TODO: this one can also be parsed properly
  // k: [{}], // outdated thing ignored
  t: [{
    // t=0 0
    name: "timing",
    reg: /^(\d*) (\d*)/,
    names: ["start", "stop"],
    format: "%d %d"
  }],
  c: [{
    // c=IN IP4 10.47.197.26
    name: "connection",
    reg: /^IN IP(\d) (\S*)/,
    names: ["version", "ip"],
    format: "IN IP%d %s"
  }],
  b: [{
    // b=AS:4000
    push: "bandwidth",
    reg: /^(TIAS|AS|CT|RR|RS):(\d*)/,
    names: ["type", "limit"],
    format: "%s:%s"
  }],
  m: [{
    // m=video 51744 RTP/AVP 126 97 98 34 31
    // NB: special - pushes to session
    // TODO: rtp/fmtp should be filtered by the payloads found here?
    reg: /^(\w*) (\d*) ([\w/]*)(?: (.*))?/,
    names: ["type", "port", "protocol", "payloads"],
    format: "%s %d %s %s"
  }],
  a: [
    {
      // a=rtpmap:110 opus/48000/2
      push: "rtp",
      reg: /^rtpmap:(\d*) ([\w\-.]*)(?:\s*\/(\d*)(?:\s*\/(\S*))?)?/,
      names: ["payload", "codec", "rate", "encoding"],
      format: function(a92) {
        return a92.encoding ? "rtpmap:%d %s/%s/%s" : a92.rate ? "rtpmap:%d %s/%s" : "rtpmap:%d %s";
      }
    },
    {
      // a=fmtp:108 profile-level-id=24;object=23;bitrate=64000
      // a=fmtp:111 minptime=10; useinbandfec=1
      push: "fmtp",
      reg: /^fmtp:(\d*) ([\S| ]*)/,
      names: ["payload", "config"],
      format: "fmtp:%d %s"
    },
    {
      // a=control:streamid=0
      name: "control",
      reg: /^control:(.*)/,
      format: "control:%s"
    },
    {
      // a=rtcp:65179 IN IP4 193.84.77.194
      name: "rtcp",
      reg: /^rtcp:(\d*)(?: (\S*) IP(\d) (\S*))?/,
      names: ["port", "netType", "ipVer", "address"],
      format: function(a92) {
        return a92.address != null ? "rtcp:%d %s IP%d %s" : "rtcp:%d";
      }
    },
    {
      // a=rtcp-fb:98 trr-int 100
      push: "rtcpFbTrrInt",
      reg: /^rtcp-fb:(\*|\d*) trr-int (\d*)/,
      names: ["payload", "value"],
      format: "rtcp-fb:%s trr-int %d"
    },
    {
      // a=rtcp-fb:98 nack rpsi
      push: "rtcpFb",
      reg: /^rtcp-fb:(\*|\d*) ([\w-_]*)(?: ([\w-_]*))?/,
      names: ["payload", "type", "subtype"],
      format: function(a92) {
        return a92.subtype != null ? "rtcp-fb:%s %s %s" : "rtcp-fb:%s %s";
      }
    },
    {
      // a=extmap:2 urn:ietf:params:rtp-hdrext:toffset
      // a=extmap:1/recvonly URI-gps-string
      // a=extmap:3 urn:ietf:params:rtp-hdrext:encrypt urn:ietf:params:rtp-hdrext:smpte-tc 25@600/24
      push: "ext",
      reg: /^extmap:(\d+)(?:\/(\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\S*)(?: (\S*))?/,
      names: ["value", "direction", "encrypt-uri", "uri", "config"],
      format: function(a92) {
        return "extmap:%d" + (a92.direction ? "/%s" : "%v") + (a92["encrypt-uri"] ? " %s" : "%v") + " %s" + (a92.config ? " %s" : "");
      }
    },
    {
      // a=extmap-allow-mixed
      name: "extmapAllowMixed",
      reg: /^(extmap-allow-mixed)/
    },
    {
      // a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32
      push: "crypto",
      reg: /^crypto:(\d*) ([\w_]*) (\S*)(?: (\S*))?/,
      names: ["id", "suite", "config", "sessionConfig"],
      format: function(a92) {
        return a92.sessionConfig != null ? "crypto:%d %s %s %s" : "crypto:%d %s %s";
      }
    },
    {
      // a=setup:actpass
      name: "setup",
      reg: /^setup:(\w*)/,
      format: "setup:%s"
    },
    {
      // a=connection:new
      name: "connectionType",
      reg: /^connection:(new|existing)/,
      format: "connection:%s"
    },
    {
      // a=mid:1
      name: "mid",
      reg: /^mid:([^\s]*)/,
      format: "mid:%s"
    },
    {
      // a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a
      name: "msid",
      reg: /^msid:(.*)/,
      format: "msid:%s"
    },
    {
      // a=ptime:20
      name: "ptime",
      reg: /^ptime:(\d*(?:\.\d*)*)/,
      format: "ptime:%d"
    },
    {
      // a=maxptime:60
      name: "maxptime",
      reg: /^maxptime:(\d*(?:\.\d*)*)/,
      format: "maxptime:%d"
    },
    {
      // a=sendrecv
      name: "direction",
      reg: /^(sendrecv|recvonly|sendonly|inactive)/
    },
    {
      // a=ice-lite
      name: "icelite",
      reg: /^(ice-lite)/
    },
    {
      // a=ice-ufrag:F7gI
      name: "iceUfrag",
      reg: /^ice-ufrag:(\S*)/,
      format: "ice-ufrag:%s"
    },
    {
      // a=ice-pwd:x9cml/YzichV2+XlhiMu8g
      name: "icePwd",
      reg: /^ice-pwd:(\S*)/,
      format: "ice-pwd:%s"
    },
    {
      // a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33
      name: "fingerprint",
      reg: /^fingerprint:(\S*) (\S*)/,
      names: ["type", "hash"],
      format: "fingerprint:%s %s"
    },
    {
      // a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host
      // a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10
      // a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10
      // a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10
      // a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10
      push: "candidates",
      reg: /^candidate:(\S*) (\d*) (\S*) (\d*) (\S*) (\d*) typ (\S*)(?: raddr (\S*) rport (\d*))?(?: tcptype (\S*))?(?: generation (\d*))?(?: network-id (\d*))?(?: network-cost (\d*))?/,
      names: ["foundation", "component", "transport", "priority", "ip", "port", "type", "raddr", "rport", "tcptype", "generation", "network-id", "network-cost"],
      format: function(a92) {
        var u2 = "candidate:%s %d %s %d %s %d typ %s";
        return u2 += a92.raddr != null ? " raddr %s rport %d" : "%v%v", u2 += a92.tcptype != null ? " tcptype %s" : "%v", a92.generation != null && (u2 += " generation %d"), u2 += a92["network-id"] != null ? " network-id %d" : "%v", u2 += a92["network-cost"] != null ? " network-cost %d" : "%v", u2;
      }
    },
    {
      // a=end-of-candidates (keep after the candidates line for readability)
      name: "endOfCandidates",
      reg: /^(end-of-candidates)/
    },
    {
      // a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...
      name: "remoteCandidates",
      reg: /^remote-candidates:(.*)/,
      format: "remote-candidates:%s"
    },
    {
      // a=ice-options:google-ice
      name: "iceOptions",
      reg: /^ice-options:(\S*)/,
      format: "ice-options:%s"
    },
    {
      // a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1
      push: "ssrcs",
      reg: /^ssrc:(\d*) ([\w_-]*)(?::(.*))?/,
      names: ["id", "attribute", "value"],
      format: function(a92) {
        var u2 = "ssrc:%d";
        return a92.attribute != null && (u2 += " %s", a92.value != null && (u2 += ":%s")), u2;
      }
    },
    {
      // a=ssrc-group:FEC 1 2
      // a=ssrc-group:FEC-FR 3004364195 1080772241
      push: "ssrcGroups",
      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E
      reg: /^ssrc-group:([\x21\x23\x24\x25\x26\x27\x2A\x2B\x2D\x2E\w]*) (.*)/,
      names: ["semantics", "ssrcs"],
      format: "ssrc-group:%s %s"
    },
    {
      // a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV
      name: "msidSemantic",
      reg: /^msid-semantic:\s?(\w*) (\S*)/,
      names: ["semantic", "token"],
      format: "msid-semantic: %s %s"
      // space after ':' is not accidental
    },
    {
      // a=group:BUNDLE audio video
      push: "groups",
      reg: /^group:(\w*) (.*)/,
      names: ["type", "mids"],
      format: "group:%s %s"
    },
    {
      // a=rtcp-mux
      name: "rtcpMux",
      reg: /^(rtcp-mux)/
    },
    {
      // a=rtcp-rsize
      name: "rtcpRsize",
      reg: /^(rtcp-rsize)/
    },
    {
      // a=sctpmap:5000 webrtc-datachannel 1024
      name: "sctpmap",
      reg: /^sctpmap:([\w_/]*) (\S*)(?: (\S*))?/,
      names: ["sctpmapNumber", "app", "maxMessageSize"],
      format: function(a92) {
        return a92.maxMessageSize != null ? "sctpmap:%s %s %s" : "sctpmap:%s %s";
      }
    },
    {
      // a=x-google-flag:conference
      name: "xGoogleFlag",
      reg: /^x-google-flag:([^\s]*)/,
      format: "x-google-flag:%s"
    },
    {
      // a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0
      push: "rids",
      reg: /^rid:([\d\w]+) (\w+)(?: ([\S| ]*))?/,
      names: ["id", "direction", "params"],
      format: function(a92) {
        return a92.params ? "rid:%s %s %s" : "rid:%s %s";
      }
    },
    {
      // a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]
      // a=imageattr:* send [x=800,y=640] recv *
      // a=imageattr:100 recv [x=320,y=240]
      push: "imageattrs",
      reg: new RegExp(
        // a=imageattr:97
        "^imageattr:(\\d+|\\*)[\\s\\t]+(send|recv)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*)(?:[\\s\\t]+(recv|send)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*))?"
      ),
      names: ["pt", "dir1", "attrs1", "dir2", "attrs2"],
      format: function(a92) {
        return "imageattr:%s %s %s" + (a92.dir2 ? " %s %s" : "");
      }
    },
    {
      // a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8
      // a=simulcast:recv 1;4,5 send 6;7
      name: "simulcast",
      reg: new RegExp(
        // a=simulcast:
        "^simulcast:(send|recv) ([a-zA-Z0-9\\-_~;,]+)(?:\\s?(send|recv) ([a-zA-Z0-9\\-_~;,]+))?$"
      ),
      names: ["dir1", "list1", "dir2", "list2"],
      format: function(a92) {
        return "simulcast:%s %s" + (a92.dir2 ? " %s %s" : "");
      }
    },
    {
      // old simulcast draft 03 (implemented by Firefox)
      //   https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03
      // a=simulcast: recv pt=97;98 send pt=97
      // a=simulcast: send rid=5;6;7 paused=6,7
      name: "simulcast_03",
      reg: /^simulcast:[\s\t]+([\S+\s\t]+)$/,
      names: ["value"],
      format: "simulcast: %s"
    },
    {
      // a=framerate:25
      // a=framerate:29.97
      name: "framerate",
      reg: /^framerate:(\d+(?:$|\.\d+))/,
      format: "framerate:%s"
    },
    {
      // RFC4570
      // a=source-filter: incl IN IP4 239.5.2.31 10.1.15.5
      name: "sourceFilter",
      reg: /^source-filter: *(excl|incl) (\S*) (IP4|IP6|\*) (\S*) (.*)/,
      names: ["filterMode", "netType", "addressTypes", "destAddress", "srcList"],
      format: "source-filter: %s %s %s %s %s"
    },
    {
      // a=bundle-only
      name: "bundleOnly",
      reg: /^(bundle-only)/
    },
    {
      // a=label:1
      name: "label",
      reg: /^label:(.+)/,
      format: "label:%s"
    },
    {
      // RFC version 26 for SCTP over DTLS
      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-5
      name: "sctpPort",
      reg: /^sctp-port:(\d+)$/,
      format: "sctp-port:%s"
    },
    {
      // RFC version 26 for SCTP over DTLS
      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-6
      name: "maxMessageSize",
      reg: /^max-message-size:(\d+)$/,
      format: "max-message-size:%s"
    },
    {
      // RFC7273
      // a=ts-refclk:ptp=IEEE1588-2008:39-A7-94-FF-FE-07-CB-D0:37
      push: "tsRefClocks",
      reg: /^ts-refclk:([^\s=]*)(?:=(\S*))?/,
      names: ["clksrc", "clksrcExt"],
      format: function(a92) {
        return "ts-refclk:%s" + (a92.clksrcExt != null ? "=%s" : "");
      }
    },
    {
      // RFC7273
      // a=mediaclk:direct=963214424
      name: "mediaClk",
      reg: /^mediaclk:(?:id=(\S*))? *([^\s=]*)(?:=(\S*))?(?: *rate=(\d+)\/(\d+))?/,
      names: ["id", "mediaClockName", "mediaClockValue", "rateNumerator", "rateDenominator"],
      format: function(a92) {
        var u2 = "mediaclk:";
        return u2 += a92.id != null ? "id=%s %s" : "%v%s", u2 += a92.mediaClockValue != null ? "=%s" : "", u2 += a92.rateNumerator != null ? " rate=%s" : "", u2 += a92.rateDenominator != null ? "/%s" : "", u2;
      }
    },
    {
      // a=keywds:keywords
      name: "keywords",
      reg: /^keywds:(.+)$/,
      format: "keywds:%s"
    },
    {
      // a=content:main
      name: "content",
      reg: /^content:(.+)/,
      format: "content:%s"
    },
    // BFCP https://tools.ietf.org/html/rfc4583
    {
      // a=floorctrl:c-s
      name: "bfcpFloorCtrl",
      reg: /^floorctrl:(c-only|s-only|c-s)/,
      format: "floorctrl:%s"
    },
    {
      // a=confid:1
      name: "bfcpConfId",
      reg: /^confid:(\d+)/,
      format: "confid:%s"
    },
    {
      // a=userid:1
      name: "bfcpUserId",
      reg: /^userid:(\d+)/,
      format: "userid:%s"
    },
    {
      // a=floorid:1
      name: "bfcpFloorId",
      reg: /^floorid:(.+) (?:m-stream|mstrm):(.+)/,
      names: ["id", "mStream"],
      format: "floorid:%s mstrm:%s"
    },
    {
      // any a= that we don't understand is kept verbatim on media.invalid
      push: "invalid",
      names: ["value"]
    }
  ]
};
Object.keys(grammar$1).forEach(function(a92) {
  var u2 = grammar$1[a92];
  u2.forEach(function(c) {
    c.reg || (c.reg = /(.*)/), c.format || (c.format = "%s");
  });
});
var grammarExports = grammar$2.exports;
(function(a92) {
  var u2 = function(E2) {
    return String(Number(E2)) === E2 ? Number(E2) : E2;
  }, c = function(E2, _, k, L2) {
    if (L2 && !k)
      _[L2] = u2(E2[1]);
    else
      for (var M2 = 0; M2 < k.length; M2 += 1)
        E2[M2 + 1] != null && (_[k[M2]] = u2(E2[M2 + 1]));
  }, l2 = function(E2, _, k) {
    var L2 = E2.name && E2.names;
    E2.push && !_[E2.push] ? _[E2.push] = [] : L2 && !_[E2.name] && (_[E2.name] = {});
    var M2 = E2.push ? {} : (
      // blank object that will be pushed
      L2 ? _[E2.name] : _
    );
    c(k.match(E2.reg), M2, E2.names, E2.name), E2.push && _[E2.push].push(M2);
  }, v2 = grammarExports, S2 = RegExp.prototype.test.bind(/^([a-z])=(.*)/);
  a92.parse = function(E2) {
    var _ = {}, k = [], L2 = _;
    return E2.split(/(\r\n|\r|\n)/).filter(S2).forEach(function(M2) {
      var $ = M2[0], J2 = M2.slice(2);
      $ === "m" && (k.push({ rtp: [], fmtp: [] }), L2 = k[k.length - 1]);
      for (var V2 = 0; V2 < (v2[$] || []).length; V2 += 1) {
        var q2 = v2[$][V2];
        if (q2.reg.test(J2))
          return l2(q2, L2, J2);
      }
    }), _.media = k, _;
  };
  var g2 = function(E2, _) {
    var k = _.split(/=(.+)/, 2);
    return k.length === 2 ? E2[k[0]] = u2(k[1]) : k.length === 1 && _.length > 1 && (E2[k[0]] = void 0), E2;
  };
  a92.parseParams = function(E2) {
    return E2.split(/;\s?/).reduce(g2, {});
  }, a92.parseFmtpConfig = a92.parseParams, a92.parsePayloads = function(E2) {
    return E2.toString().split(" ").map(Number);
  }, a92.parseRemoteCandidates = function(E2) {
    for (var _ = [], k = E2.split(" ").map(u2), L2 = 0; L2 < k.length; L2 += 3)
      _.push({ component: k[L2], ip: k[L2 + 1], port: k[L2 + 2] });
    return _;
  }, a92.parseImageAttributes = function(E2) {
    return E2.split(" ").map(function(_) {
      return _.substring(1, _.length - 1).split(",").reduce(g2, {});
    });
  }, a92.parseSimulcastStreamList = function(E2) {
    return E2.split(";").map(function(_) {
      return _.split(",").map(function(k) {
        var L2, M2 = false;
        return k[0] !== "~" ? L2 = u2(k) : (L2 = u2(k.substring(1, k.length)), M2 = true), { scid: L2, paused: M2 };
      });
    });
  };
})(parser$1);
var grammar = grammarExports, formatRegExp = /%[sdv%]/g, format = function(a92) {
  var u2 = 1, c = arguments, l2 = c.length;
  return a92.replace(formatRegExp, function(v2) {
    if (u2 >= l2)
      return v2;
    var S2 = c[u2];
    switch (u2 += 1, v2) {
      case "%%":
        return "%";
      case "%s":
        return String(S2);
      case "%d":
        return Number(S2);
      case "%v":
        return "";
    }
  });
}, makeLine = function(a92, u2, c) {
  var l2 = u2.format instanceof Function ? u2.format(u2.push ? c : c[u2.name]) : u2.format, v2 = [a92 + "=" + l2];
  if (u2.names)
    for (var S2 = 0; S2 < u2.names.length; S2 += 1) {
      var g2 = u2.names[S2];
      u2.name ? v2.push(c[u2.name][g2]) : v2.push(c[u2.names[S2]]);
    }
  else
    v2.push(c[u2.name]);
  return format.apply(null, v2);
}, defaultOuterOrder = ["v", "o", "s", "i", "u", "e", "p", "c", "b", "t", "r", "z", "a"], defaultInnerOrder = ["i", "c", "b", "a"], writer$1 = function(a92, u2) {
  u2 = u2 || {}, a92.version == null && (a92.version = 0), a92.name == null && (a92.name = " "), a92.media.forEach(function(S2) {
    S2.payloads == null && (S2.payloads = "");
  });
  var c = u2.outerOrder || defaultOuterOrder, l2 = u2.innerOrder || defaultInnerOrder, v2 = [];
  return c.forEach(function(S2) {
    grammar[S2].forEach(function(g2) {
      g2.name in a92 && a92[g2.name] != null ? v2.push(makeLine(S2, g2, a92)) : g2.push in a92 && a92[g2.push] != null && a92[g2.push].forEach(function(E2) {
        v2.push(makeLine(S2, g2, E2));
      });
    });
  }), a92.media.forEach(function(S2) {
    v2.push(makeLine("m", grammar.m[0], S2)), l2.forEach(function(g2) {
      grammar[g2].forEach(function(E2) {
        E2.name in S2 && S2[E2.name] != null ? v2.push(makeLine(g2, E2, S2)) : E2.push in S2 && S2[E2.push] != null && S2[E2.push].forEach(function(_) {
          v2.push(makeLine(g2, E2, _));
        });
      });
    });
  }), v2.join(`\r
`) + `\r
`;
}, parser = parser$1, writer = writer$1, write = writer, parse$1 = parser.parse;
const startBitrateForSVC = 0.7, PCEvents = { NegotiationStarted: "negotiationStarted", NegotiationComplete: "negotiationComplete", RTPVideoPayloadTypes: "rtpVideoPayloadTypes" };
class PCTransport extends eventsExports.EventEmitter {
  get pc() {
    return this._pc || (this._pc = this.createPC()), this._pc;
  }
  constructor(u2) {
    let c = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var l2;
    super(), this.log = livekitLogger, this.pendingCandidates = [], this.restartingIce = false, this.renegotiate = false, this.trackBitrates = [], this.remoteStereoMids = [], this.remoteNackMids = [], this.negotiate = r((v2) => __awaiter(this, void 0, void 0, function* () {
      this.emit(PCEvents.NegotiationStarted);
      try {
        yield this.createAndSendOffer();
      } catch (S2) {
        if (v2)
          v2(S2);
        else
          throw S2;
      }
    }), 100), this.close = () => {
      this._pc && (this._pc.close(), this._pc.onconnectionstatechange = null, this._pc.oniceconnectionstatechange = null, this._pc.onicegatheringstatechange = null, this._pc.ondatachannel = null, this._pc.onnegotiationneeded = null, this._pc.onsignalingstatechange = null, this._pc.onicecandidate = null, this._pc.ondatachannel = null, this._pc.ontrack = null, this._pc.onconnectionstatechange = null, this._pc.oniceconnectionstatechange = null, this._pc = null);
    }, this.log = getLogger((l2 = c.loggerName) !== null && l2 !== void 0 ? l2 : LoggerNames.PCTransport), this.loggerOptions = c, this.config = u2, this._pc = this.createPC();
  }
  createPC() {
    const u2 = new RTCPeerConnection(this.config);
    return u2.onicecandidate = (c) => {
      var l2;
      c.candidate && ((l2 = this.onIceCandidate) === null || l2 === void 0 || l2.call(this, c.candidate));
    }, u2.onicecandidateerror = (c) => {
      var l2;
      (l2 = this.onIceCandidateError) === null || l2 === void 0 || l2.call(this, c);
    }, u2.oniceconnectionstatechange = () => {
      var c;
      (c = this.onIceConnectionStateChange) === null || c === void 0 || c.call(this, u2.iceConnectionState);
    }, u2.onsignalingstatechange = () => {
      var c;
      (c = this.onSignalingStatechange) === null || c === void 0 || c.call(this, u2.signalingState);
    }, u2.onconnectionstatechange = () => {
      var c;
      (c = this.onConnectionStateChange) === null || c === void 0 || c.call(this, u2.connectionState);
    }, u2.ondatachannel = (c) => {
      var l2;
      (l2 = this.onDataChannel) === null || l2 === void 0 || l2.call(this, c);
    }, u2.ontrack = (c) => {
      var l2;
      (l2 = this.onTrack) === null || l2 === void 0 || l2.call(this, c);
    }, u2;
  }
  get logContext() {
    var u2, c;
    return Object.assign({}, (c = (u2 = this.loggerOptions).loggerContextCb) === null || c === void 0 ? void 0 : c.call(u2));
  }
  get isICEConnected() {
    return this._pc !== null && (this.pc.iceConnectionState === "connected" || this.pc.iceConnectionState === "completed");
  }
  addIceCandidate(u2) {
    return __awaiter(this, void 0, void 0, function* () {
      if (this.pc.remoteDescription && !this.restartingIce)
        return this.pc.addIceCandidate(u2);
      this.pendingCandidates.push(u2);
    });
  }
  setRemoteDescription(u2) {
    var c;
    return __awaiter(this, void 0, void 0, function* () {
      let l2;
      if (u2.type === "offer") {
        let { stereoMids: v2, nackMids: S2 } = extractStereoAndNackAudioFromOffer(u2);
        this.remoteStereoMids = v2, this.remoteNackMids = S2;
      } else if (u2.type === "answer") {
        const v2 = parse$1((c = u2.sdp) !== null && c !== void 0 ? c : "");
        v2.media.forEach((S2) => {
          S2.type === "audio" && this.trackBitrates.some((g2) => {
            if (!g2.transceiver || S2.mid != g2.transceiver.mid)
              return false;
            let E2 = 0;
            if (S2.rtp.some((k) => k.codec.toUpperCase() === g2.codec.toUpperCase() ? (E2 = k.payload, true) : false), E2 === 0)
              return true;
            let _ = false;
            for (const k of S2.fmtp)
              if (k.payload === E2) {
                k.config = k.config.split(";").filter((L2) => !L2.includes("maxaveragebitrate")).join(";"), g2.maxbr > 0 && (k.config += ";maxaveragebitrate=".concat(g2.maxbr * 1e3)), _ = true;
                break;
              }
            return _ || g2.maxbr > 0 && S2.fmtp.push({ payload: E2, config: "maxaveragebitrate=".concat(g2.maxbr * 1e3) }), true;
          });
        }), l2 = write(v2);
      }
      yield this.setMungedSDP(u2, l2, true), this.pendingCandidates.forEach((v2) => {
        this.pc.addIceCandidate(v2);
      }), this.pendingCandidates = [], this.restartingIce = false, this.renegotiate ? (this.renegotiate = false, yield this.createAndSendOffer()) : u2.type === "answer" && (this.emit(PCEvents.NegotiationComplete), u2.sdp && parse$1(u2.sdp).media.forEach((S2) => {
        S2.type === "video" && this.emit(PCEvents.RTPVideoPayloadTypes, S2.rtp);
      }));
    });
  }
  createAndSendOffer(u2) {
    var c;
    return __awaiter(this, void 0, void 0, function* () {
      if (this.onOffer === void 0)
        return;
      if (u2 != null && u2.iceRestart && (this.log.debug("restarting ICE", this.logContext), this.restartingIce = true), this._pc && this._pc.signalingState === "have-local-offer") {
        const S2 = this._pc.remoteDescription;
        if (u2 != null && u2.iceRestart && S2)
          yield this._pc.setRemoteDescription(S2);
        else {
          this.renegotiate = true;
          return;
        }
      } else if (!this._pc || this._pc.signalingState === "closed") {
        this.log.warn("could not createOffer with closed peer connection", this.logContext);
        return;
      }
      this.log.debug("starting to negotiate", this.logContext);
      const l2 = yield this.pc.createOffer(u2), v2 = parse$1((c = l2.sdp) !== null && c !== void 0 ? c : "");
      v2.media.forEach((S2) => {
        S2.type === "audio" ? ensureAudioNackAndStereo(S2, [], []) : S2.type === "video" && (ensureVideoDDExtensionForSVC(S2), this.trackBitrates.some((g2) => {
          if (!S2.msid || !g2.cid || !S2.msid.includes(g2.cid))
            return false;
          let E2 = 0;
          if (S2.rtp.some((k) => k.codec.toUpperCase() === g2.codec.toUpperCase() ? (E2 = k.payload, true) : false), E2 === 0)
            return true;
          let _ = false;
          for (const k of S2.fmtp)
            if (k.payload === E2) {
              k.config.includes("x-google-start-bitrate") || (k.config += ";x-google-start-bitrate=".concat(Math.round(g2.maxbr * startBitrateForSVC))), k.config.includes("x-google-max-bitrate") || (k.config += ";x-google-max-bitrate=".concat(g2.maxbr)), _ = true;
              break;
            }
          return _ || S2.fmtp.push({ payload: E2, config: "x-google-start-bitrate=".concat(Math.round(g2.maxbr * startBitrateForSVC), ";x-google-max-bitrate=").concat(g2.maxbr) }), true;
        }));
      }), yield this.setMungedSDP(l2, write(v2)), this.onOffer(l2);
    });
  }
  createAndSetAnswer() {
    var u2;
    return __awaiter(this, void 0, void 0, function* () {
      const c = yield this.pc.createAnswer(), l2 = parse$1((u2 = c.sdp) !== null && u2 !== void 0 ? u2 : "");
      return l2.media.forEach((v2) => {
        v2.type === "audio" && ensureAudioNackAndStereo(v2, this.remoteStereoMids, this.remoteNackMids);
      }), yield this.setMungedSDP(c, write(l2)), c;
    });
  }
  createDataChannel(u2, c) {
    return this.pc.createDataChannel(u2, c);
  }
  addTransceiver(u2, c) {
    return this.pc.addTransceiver(u2, c);
  }
  addTrack(u2) {
    if (!this._pc)
      throw new UnexpectedConnectionState("PC closed, cannot add track");
    return this._pc.addTrack(u2);
  }
  setTrackCodecBitrate(u2) {
    this.trackBitrates.push(u2);
  }
  setConfiguration(u2) {
    var c;
    if (!this._pc)
      throw new UnexpectedConnectionState("PC closed, cannot configure");
    return (c = this._pc) === null || c === void 0 ? void 0 : c.setConfiguration(u2);
  }
  canRemoveTrack() {
    var u2;
    return !!(!((u2 = this._pc) === null || u2 === void 0) && u2.removeTrack);
  }
  removeTrack(u2) {
    var c;
    return (c = this._pc) === null || c === void 0 ? void 0 : c.removeTrack(u2);
  }
  getConnectionState() {
    var u2, c;
    return (c = (u2 = this._pc) === null || u2 === void 0 ? void 0 : u2.connectionState) !== null && c !== void 0 ? c : "closed";
  }
  getICEConnectionState() {
    var u2, c;
    return (c = (u2 = this._pc) === null || u2 === void 0 ? void 0 : u2.iceConnectionState) !== null && c !== void 0 ? c : "closed";
  }
  getSignallingState() {
    var u2, c;
    return (c = (u2 = this._pc) === null || u2 === void 0 ? void 0 : u2.signalingState) !== null && c !== void 0 ? c : "closed";
  }
  getTransceivers() {
    var u2, c;
    return (c = (u2 = this._pc) === null || u2 === void 0 ? void 0 : u2.getTransceivers()) !== null && c !== void 0 ? c : [];
  }
  getSenders() {
    var u2, c;
    return (c = (u2 = this._pc) === null || u2 === void 0 ? void 0 : u2.getSenders()) !== null && c !== void 0 ? c : [];
  }
  getLocalDescription() {
    var u2;
    return (u2 = this._pc) === null || u2 === void 0 ? void 0 : u2.localDescription;
  }
  getRemoteDescription() {
    var u2;
    return (u2 = this.pc) === null || u2 === void 0 ? void 0 : u2.remoteDescription;
  }
  getStats() {
    return this.pc.getStats();
  }
  getConnectedAddress() {
    var u2;
    return __awaiter(this, void 0, void 0, function* () {
      if (!this._pc)
        return;
      let c = "";
      const l2 = /* @__PURE__ */ new Map(), v2 = /* @__PURE__ */ new Map();
      if ((yield this._pc.getStats()).forEach((E2) => {
        switch (E2.type) {
          case "transport":
            c = E2.selectedCandidatePairId;
            break;
          case "candidate-pair":
            c === "" && E2.selected && (c = E2.id), l2.set(E2.id, E2);
            break;
          case "remote-candidate":
            v2.set(E2.id, "".concat(E2.address, ":").concat(E2.port));
            break;
        }
      }), c === "")
        return;
      const g2 = (u2 = l2.get(c)) === null || u2 === void 0 ? void 0 : u2.remoteCandidateId;
      if (g2 !== void 0)
        return v2.get(g2);
    });
  }
  setMungedSDP(u2, c, l2) {
    return __awaiter(this, void 0, void 0, function* () {
      if (c) {
        const v2 = u2.sdp;
        u2.sdp = c;
        try {
          this.log.debug("setting munged ".concat(l2 ? "remote" : "local", " description"), this.logContext), l2 ? yield this.pc.setRemoteDescription(u2) : yield this.pc.setLocalDescription(u2);
          return;
        } catch (S2) {
          this.log.warn("not able to set ".concat(u2.type, ", falling back to unmodified sdp"), Object.assign(Object.assign({}, this.logContext), { error: S2, sdp: c })), u2.sdp = v2;
        }
      }
      try {
        l2 ? yield this.pc.setRemoteDescription(u2) : yield this.pc.setLocalDescription(u2);
      } catch (v2) {
        let S2 = "unknown error";
        v2 instanceof Error ? S2 = v2.message : typeof v2 == "string" && (S2 = v2);
        const g2 = { error: S2, sdp: u2.sdp };
        throw !l2 && this.pc.remoteDescription && (g2.remoteSdp = this.pc.remoteDescription), this.log.error("unable to set ".concat(u2.type), Object.assign(Object.assign({}, this.logContext), { fields: g2 })), new NegotiationError(S2);
      }
    });
  }
}
function ensureAudioNackAndStereo(a92, u2, c) {
  let l2 = 0;
  a92.rtp.some((v2) => v2.codec === "opus" ? (l2 = v2.payload, true) : false), l2 > 0 && (a92.rtcpFb || (a92.rtcpFb = []), c.includes(a92.mid) && !a92.rtcpFb.some((v2) => v2.payload === l2 && v2.type === "nack") && a92.rtcpFb.push({ payload: l2, type: "nack" }), u2.includes(a92.mid) && a92.fmtp.some((v2) => v2.payload === l2 ? (v2.config.includes("stereo=1") || (v2.config += ";stereo=1"), true) : false));
}
function ensureVideoDDExtensionForSVC(a92) {
  var u2, c, l2, v2;
  const S2 = (c = (u2 = a92.rtp[0]) === null || u2 === void 0 ? void 0 : u2.codec) === null || c === void 0 ? void 0 : c.toLowerCase();
  if (!isSVCCodec(S2))
    return;
  let g2 = 0;
  ((l2 = a92.ext) === null || l2 === void 0 ? void 0 : l2.some((_) => _.uri === ddExtensionURI ? true : (_.value > g2 && (g2 = _.value), false))) || (v2 = a92.ext) === null || v2 === void 0 || v2.push({ value: g2 + 1, uri: ddExtensionURI });
}
function extractStereoAndNackAudioFromOffer(a92) {
  var u2;
  const c = [], l2 = [], v2 = parse$1((u2 = a92.sdp) !== null && u2 !== void 0 ? u2 : "");
  let S2 = 0;
  return v2.media.forEach((g2) => {
    var E2;
    g2.type === "audio" && (g2.rtp.some((_) => _.codec === "opus" ? (S2 = _.payload, true) : false), !((E2 = g2.rtcpFb) === null || E2 === void 0) && E2.some((_) => _.payload === S2 && _.type === "nack") && l2.push(g2.mid), g2.fmtp.some((_) => _.payload === S2 ? (_.config.includes("sprop-stereo=1") && c.push(g2.mid), true) : false));
  }), { stereoMids: c, nackMids: l2 };
}
const defaultVideoCodec = "vp8", publishDefaults = { audioPreset: AudioPresets.music, dtx: true, red: true, forceStereo: false, simulcast: true, screenShareEncoding: ScreenSharePresets.h1080fps15.encoding, stopMicTrackOnMute: false, videoCodec: defaultVideoCodec, backupCodec: true }, audioDefaults = { autoGainControl: true, echoCancellation: true, noiseSuppression: true }, videoDefaults = { resolution: VideoPresets.h720.resolution }, roomOptionDefaults = { adaptiveStream: false, dynacast: false, stopLocalTrackOnUnpublish: true, reconnectPolicy: new DefaultReconnectPolicy(), disconnectOnPageLeave: true, webAudioMix: true }, roomConnectOptionDefaults = { autoSubscribe: true, maxRetries: 1, peerConnectionTimeout: 15e3, websocketTimeout: 15e3 };
var PCTransportState;
(function(a92) {
  a92[a92.NEW = 0] = "NEW", a92[a92.CONNECTING = 1] = "CONNECTING", a92[a92.CONNECTED = 2] = "CONNECTED", a92[a92.FAILED = 3] = "FAILED", a92[a92.CLOSING = 4] = "CLOSING", a92[a92.CLOSED = 5] = "CLOSED";
})(PCTransportState || (PCTransportState = {}));
class PCTransportManager {
  get needsPublisher() {
    return this.isPublisherConnectionRequired;
  }
  get needsSubscriber() {
    return this.isSubscriberConnectionRequired;
  }
  get currentState() {
    return this.state;
  }
  constructor(u2, c, l2) {
    var v2;
    this.peerConnectionTimeout = roomConnectOptionDefaults.peerConnectionTimeout, this.log = livekitLogger, this.updateState = () => {
      var S2;
      const g2 = this.state, E2 = this.requiredTransports.map((_) => _.getConnectionState());
      E2.every((_) => _ === "connected") ? this.state = PCTransportState.CONNECTED : E2.some((_) => _ === "failed") ? this.state = PCTransportState.FAILED : E2.some((_) => _ === "connecting") ? this.state = PCTransportState.CONNECTING : E2.every((_) => _ === "closed") ? this.state = PCTransportState.CLOSED : E2.some((_) => _ === "closed") ? this.state = PCTransportState.CLOSING : E2.every((_) => _ === "new") && (this.state = PCTransportState.NEW), g2 !== this.state && (this.log.debug("pc state change: from ".concat(PCTransportState[g2], " to ").concat(PCTransportState[this.state]), this.logContext), (S2 = this.onStateChange) === null || S2 === void 0 || S2.call(this, this.state, this.publisher.getConnectionState(), this.subscriber.getConnectionState()));
    }, this.log = getLogger((v2 = l2.loggerName) !== null && v2 !== void 0 ? v2 : LoggerNames.PCManager), this.loggerOptions = l2, this.isPublisherConnectionRequired = !c, this.isSubscriberConnectionRequired = c, this.publisher = new PCTransport(u2, l2), this.subscriber = new PCTransport(u2, l2), this.publisher.onConnectionStateChange = this.updateState, this.subscriber.onConnectionStateChange = this.updateState, this.publisher.onIceConnectionStateChange = this.updateState, this.subscriber.onIceConnectionStateChange = this.updateState, this.publisher.onSignalingStatechange = this.updateState, this.subscriber.onSignalingStatechange = this.updateState, this.publisher.onIceCandidate = (S2) => {
      var g2;
      (g2 = this.onIceCandidate) === null || g2 === void 0 || g2.call(this, S2, SignalTarget.PUBLISHER);
    }, this.subscriber.onIceCandidate = (S2) => {
      var g2;
      (g2 = this.onIceCandidate) === null || g2 === void 0 || g2.call(this, S2, SignalTarget.SUBSCRIBER);
    }, this.subscriber.onDataChannel = (S2) => {
      var g2;
      (g2 = this.onDataChannel) === null || g2 === void 0 || g2.call(this, S2);
    }, this.subscriber.onTrack = (S2) => {
      var g2;
      (g2 = this.onTrack) === null || g2 === void 0 || g2.call(this, S2);
    }, this.publisher.onOffer = (S2) => {
      var g2;
      (g2 = this.onPublisherOffer) === null || g2 === void 0 || g2.call(this, S2);
    }, this.state = PCTransportState.NEW, this.connectionLock = new Mutex();
  }
  get logContext() {
    var u2, c;
    return Object.assign({}, (c = (u2 = this.loggerOptions).loggerContextCb) === null || c === void 0 ? void 0 : c.call(u2));
  }
  requirePublisher() {
    let u2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
    this.isPublisherConnectionRequired = u2, this.updateState();
  }
  requireSubscriber() {
    let u2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
    this.isSubscriberConnectionRequired = u2, this.updateState();
  }
  createAndSendPublisherOffer(u2) {
    return this.publisher.createAndSendOffer(u2);
  }
  setPublisherAnswer(u2) {
    return this.publisher.setRemoteDescription(u2);
  }
  removeTrack(u2) {
    return this.publisher.removeTrack(u2);
  }
  close() {
    return __awaiter(this, void 0, void 0, function* () {
      if (this.publisher && this.publisher.getSignallingState() !== "closed") {
        const u2 = this.publisher;
        for (const c of u2.getSenders())
          try {
            u2.canRemoveTrack() && u2.removeTrack(c);
          } catch (l2) {
            this.log.warn("could not removeTrack", Object.assign(Object.assign({}, this.logContext), { error: l2 }));
          }
      }
      yield Promise.all([this.publisher.close(), this.subscriber.close()]), this.updateState();
    });
  }
  triggerIceRestart() {
    return __awaiter(this, void 0, void 0, function* () {
      this.subscriber.restartingIce = true, this.needsPublisher && (yield this.createAndSendPublisherOffer({ iceRestart: true }));
    });
  }
  addIceCandidate(u2, c) {
    return __awaiter(this, void 0, void 0, function* () {
      c === SignalTarget.PUBLISHER ? yield this.publisher.addIceCandidate(u2) : yield this.subscriber.addIceCandidate(u2);
    });
  }
  createSubscriberAnswerFromOffer(u2) {
    return __awaiter(this, void 0, void 0, function* () {
      return this.log.debug("received server offer", Object.assign(Object.assign({}, this.logContext), { RTCSdpType: u2.type, sdp: u2.sdp, signalingState: this.subscriber.getSignallingState().toString() })), yield this.subscriber.setRemoteDescription(u2), yield this.subscriber.createAndSetAnswer();
    });
  }
  updateConfiguration(u2, c) {
    this.publisher.setConfiguration(u2), this.subscriber.setConfiguration(u2), c && this.triggerIceRestart();
  }
  ensurePCTransportConnection(u2, c) {
    var l2;
    return __awaiter(this, void 0, void 0, function* () {
      const v2 = yield this.connectionLock.lock();
      try {
        this.isPublisherConnectionRequired && this.publisher.getConnectionState() !== "connected" && this.publisher.getConnectionState() !== "connecting" && (this.log.debug("negotiation required, start negotiating", this.logContext), this.publisher.negotiate()), yield Promise.all((l2 = this.requiredTransports) === null || l2 === void 0 ? void 0 : l2.map((S2) => this.ensureTransportConnected(S2, u2, c)));
      } finally {
        v2();
      }
    });
  }
  negotiate(u2) {
    return __awaiter(this, void 0, void 0, function* () {
      return new Promise((c, l2) => __awaiter(this, void 0, void 0, function* () {
        const v2 = setTimeout(() => {
          l2("negotiation timed out");
        }, this.peerConnectionTimeout), S2 = () => {
          clearTimeout(v2), l2("negotiation aborted");
        };
        u2.signal.addEventListener("abort", S2), this.publisher.once(PCEvents.NegotiationStarted, () => {
          u2.signal.aborted || this.publisher.once(PCEvents.NegotiationComplete, () => {
            clearTimeout(v2), c();
          });
        }), yield this.publisher.negotiate((g2) => {
          clearTimeout(v2), l2(g2);
        });
      }));
    });
  }
  addPublisherTransceiver(u2, c) {
    return this.publisher.addTransceiver(u2, c);
  }
  addPublisherTrack(u2) {
    return this.publisher.addTrack(u2);
  }
  createPublisherDataChannel(u2, c) {
    return this.publisher.createDataChannel(u2, c);
  }
  /**
  * Returns the first required transport's address if no explicit target is specified
  */
  getConnectedAddress(u2) {
    return u2 === SignalTarget.PUBLISHER ? this.publisher.getConnectedAddress() : u2 === SignalTarget.SUBSCRIBER ? this.publisher.getConnectedAddress() : this.requiredTransports[0].getConnectedAddress();
  }
  get requiredTransports() {
    const u2 = [];
    return this.isPublisherConnectionRequired && u2.push(this.publisher), this.isSubscriberConnectionRequired && u2.push(this.subscriber), u2;
  }
  ensureTransportConnected(u2, c) {
    let l2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.peerConnectionTimeout;
    return __awaiter(this, void 0, void 0, function* () {
      if (u2.getConnectionState() !== "connected")
        return new Promise((S2, g2) => __awaiter(this, void 0, void 0, function* () {
          const E2 = () => {
            this.log.warn("abort transport connection", this.logContext), CriticalTimers.clearTimeout(_), g2(new ConnectionError(
              "room connection has been cancelled",
              3
              /* ConnectionErrorReason.Cancelled */
            ));
          };
          c != null && c.signal.aborted && E2(), c == null || c.signal.addEventListener("abort", E2);
          const _ = CriticalTimers.setTimeout(() => {
            c == null || c.signal.removeEventListener("abort", E2), g2(new ConnectionError("could not establish pc connection"));
          }, l2);
          for (; this.state !== PCTransportState.CONNECTED; )
            if (yield sleep(50), c != null && c.signal.aborted) {
              g2(new ConnectionError(
                "room connection has been cancelled",
                3
                /* ConnectionErrorReason.Cancelled */
              ));
              return;
            }
          CriticalTimers.clearTimeout(_), c == null || c.signal.removeEventListener("abort", E2), S2();
        }));
    });
  }
}
const lossyDataChannel = "_lossy", reliableDataChannel = "_reliable", minReconnectWait = 2 * 1e3, leaveReconnect = "leave-reconnect";
var PCState;
(function(a92) {
  a92[a92.New = 0] = "New", a92[a92.Connected = 1] = "Connected", a92[a92.Disconnected = 2] = "Disconnected", a92[a92.Reconnecting = 3] = "Reconnecting", a92[a92.Closed = 4] = "Closed";
})(PCState || (PCState = {}));
class RTCEngine extends eventsExports.EventEmitter {
  get isClosed() {
    return this._isClosed;
  }
  get pendingReconnect() {
    return !!this.reconnectTimeout;
  }
  constructor(u2) {
    var c;
    super(), this.options = u2, this.rtcConfig = {}, this.peerConnectionTimeout = roomConnectOptionDefaults.peerConnectionTimeout, this.fullReconnectOnNext = false, this.subscriberPrimary = false, this.pcState = PCState.New, this._isClosed = true, this.pendingTrackResolvers = {}, this.reconnectAttempts = 0, this.reconnectStart = 0, this.attemptingReconnect = false, this.joinAttempts = 0, this.maxJoinAttempts = 1, this.shouldFailNext = false, this.log = livekitLogger, this.handleDataChannel = (l2) => {
      let { channel: v2 } = l2;
      return __awaiter(this, void 0, void 0, function* () {
        if (v2) {
          if (v2.label === reliableDataChannel)
            this.reliableDCSub = v2;
          else if (v2.label === lossyDataChannel)
            this.lossyDCSub = v2;
          else
            return;
          this.log.debug("on data channel ".concat(v2.id, ", ").concat(v2.label), this.logContext), v2.onmessage = this.handleDataMessage;
        }
      });
    }, this.handleDataMessage = (l2) => __awaiter(this, void 0, void 0, function* () {
      var v2, S2;
      const g2 = yield this.dataProcessLock.lock();
      try {
        let E2;
        if (l2.data instanceof ArrayBuffer)
          E2 = l2.data;
        else if (l2.data instanceof Blob)
          E2 = yield l2.data.arrayBuffer();
        else {
          this.log.error("unsupported data type", Object.assign(Object.assign({}, this.logContext), { data: l2.data }));
          return;
        }
        const _ = DataPacket.fromBinary(new Uint8Array(E2));
        ((v2 = _.value) === null || v2 === void 0 ? void 0 : v2.case) === "speaker" ? this.emit(EngineEvent.ActiveSpeakersUpdate, _.value.value.speakers) : ((S2 = _.value) === null || S2 === void 0 ? void 0 : S2.case) === "user" && this.emit(EngineEvent.DataPacketReceived, _.value.value, _.kind);
      } finally {
        g2();
      }
    }), this.handleDataError = (l2) => {
      const S2 = l2.currentTarget.maxRetransmits === 0 ? "lossy" : "reliable";
      if (l2 instanceof ErrorEvent && l2.error) {
        const { error: g2 } = l2.error;
        this.log.error("DataChannel error on ".concat(S2, ": ").concat(l2.message), Object.assign(Object.assign({}, this.logContext), { error: g2 }));
      } else
        this.log.error("Unknown DataChannel error on ".concat(S2), Object.assign(Object.assign({}, this.logContext), { event: l2 }));
    }, this.handleBufferedAmountLow = (l2) => {
      const S2 = l2.currentTarget.maxRetransmits === 0 ? DataPacket_Kind.LOSSY : DataPacket_Kind.RELIABLE;
      this.updateAndEmitDCBufferStatus(S2);
    }, this.handleDisconnect = (l2, v2) => {
      if (this._isClosed)
        return;
      this.log.warn("".concat(l2, " disconnected"), this.logContext), this.reconnectAttempts === 0 && (this.reconnectStart = Date.now());
      const S2 = (_) => {
        this.log.warn("could not recover connection after ".concat(this.reconnectAttempts, " attempts, ").concat(_, "ms. giving up"), this.logContext), this.emit(EngineEvent.Disconnected), this.close();
      }, g2 = Date.now() - this.reconnectStart;
      let E2 = this.getNextRetryDelay({ elapsedMs: g2, retryCount: this.reconnectAttempts });
      if (E2 === null) {
        S2(g2);
        return;
      }
      l2 === leaveReconnect && (E2 = 0), this.log.debug("reconnecting in ".concat(E2, "ms"), this.logContext), this.clearReconnectTimeout(), this.token && this.regionUrlProvider && this.regionUrlProvider.updateToken(this.token), this.reconnectTimeout = CriticalTimers.setTimeout(() => this.attemptReconnect(v2).finally(() => this.reconnectTimeout = void 0), E2);
    }, this.waitForRestarted = () => new Promise((l2, v2) => {
      this.pcState === PCState.Connected && l2();
      const S2 = () => {
        this.off(EngineEvent.Disconnected, g2), l2();
      }, g2 = () => {
        this.off(EngineEvent.Restarted, S2), v2();
      };
      this.once(EngineEvent.Restarted, S2), this.once(EngineEvent.Disconnected, g2);
    }), this.updateAndEmitDCBufferStatus = (l2) => {
      const v2 = this.isBufferStatusLow(l2);
      typeof v2 < "u" && v2 !== this.dcBufferStatus.get(l2) && (this.dcBufferStatus.set(l2, v2), this.emit(EngineEvent.DCBufferStatusChanged, v2, l2));
    }, this.isBufferStatusLow = (l2) => {
      const v2 = this.dataChannelForKind(l2);
      if (v2)
        return v2.bufferedAmount <= v2.bufferedAmountLowThreshold;
    }, this.handleBrowserOnLine = () => {
      this.client.currentState === SignalConnectionState.RECONNECTING && (this.clearReconnectTimeout(), this.attemptReconnect(ReconnectReason.RR_SIGNAL_DISCONNECTED));
    }, this.log = getLogger((c = u2.loggerName) !== null && c !== void 0 ? c : LoggerNames.Engine), this.loggerOptions = { loggerName: u2.loggerName, loggerContextCb: () => this.logContext }, this.client = new SignalClient(void 0, this.loggerOptions), this.client.signalLatency = this.options.expSignalLatency, this.reconnectPolicy = this.options.reconnectPolicy, this.registerOnLineListener(), this.closingLock = new Mutex(), this.dataProcessLock = new Mutex(), this.dcBufferStatus = /* @__PURE__ */ new Map([[DataPacket_Kind.LOSSY, true], [DataPacket_Kind.RELIABLE, true]]), this.client.onParticipantUpdate = (l2) => this.emit(EngineEvent.ParticipantUpdate, l2), this.client.onConnectionQuality = (l2) => this.emit(EngineEvent.ConnectionQualityUpdate, l2), this.client.onRoomUpdate = (l2) => this.emit(EngineEvent.RoomUpdate, l2), this.client.onSubscriptionError = (l2) => this.emit(EngineEvent.SubscriptionError, l2), this.client.onSubscriptionPermissionUpdate = (l2) => this.emit(EngineEvent.SubscriptionPermissionUpdate, l2), this.client.onSpeakersChanged = (l2) => this.emit(EngineEvent.SpeakersChanged, l2), this.client.onStreamStateUpdate = (l2) => this.emit(EngineEvent.StreamStateChanged, l2);
  }
  /** @internal */
  get logContext() {
    var u2, c, l2, v2, S2, g2;
    return { room: (c = (u2 = this.latestJoinResponse) === null || u2 === void 0 ? void 0 : u2.room) === null || c === void 0 ? void 0 : c.name, roomSid: (v2 = (l2 = this.latestJoinResponse) === null || l2 === void 0 ? void 0 : l2.room) === null || v2 === void 0 ? void 0 : v2.sid, identity: (g2 = (S2 = this.latestJoinResponse) === null || S2 === void 0 ? void 0 : S2.participant) === null || g2 === void 0 ? void 0 : g2.identity };
  }
  join(u2, c, l2, v2) {
    return __awaiter(this, void 0, void 0, function* () {
      this.url = u2, this.token = c, this.signalOpts = l2, this.maxJoinAttempts = l2.maxRetries;
      try {
        this.joinAttempts += 1, this.setupSignalClientCallbacks();
        const S2 = yield this.client.join(u2, c, l2, v2);
        return this._isClosed = false, this.latestJoinResponse = S2, this.subscriberPrimary = S2.subscriberPrimary, this.pcManager || (yield this.configure(S2)), this.subscriberPrimary || this.negotiate(), this.clientConfiguration = S2.clientConfiguration, S2;
      } catch (S2) {
        if (S2 instanceof ConnectionError && S2.reason === 1 && (this.log.warn("Couldn't connect to server, attempt ".concat(this.joinAttempts, " of ").concat(this.maxJoinAttempts), this.logContext), this.joinAttempts < this.maxJoinAttempts))
          return this.join(u2, c, l2, v2);
        throw S2;
      }
    });
  }
  close() {
    return __awaiter(this, void 0, void 0, function* () {
      const u2 = yield this.closingLock.lock();
      if (this.isClosed) {
        u2();
        return;
      }
      try {
        this._isClosed = true, this.emit(EngineEvent.Closing), this.removeAllListeners(), this.deregisterOnLineListener(), this.clearPendingReconnect(), yield this.cleanupPeerConnections(), yield this.cleanupClient();
      } finally {
        u2();
      }
    });
  }
  cleanupPeerConnections() {
    var u2;
    return __awaiter(this, void 0, void 0, function* () {
      yield (u2 = this.pcManager) === null || u2 === void 0 ? void 0 : u2.close(), this.pcManager = void 0;
      const c = (l2) => {
        l2 && (l2.close(), l2.onbufferedamountlow = null, l2.onclose = null, l2.onclosing = null, l2.onerror = null, l2.onmessage = null, l2.onopen = null);
      };
      c(this.lossyDC), c(this.lossyDCSub), c(this.reliableDC), c(this.reliableDCSub), this.lossyDC = void 0, this.lossyDCSub = void 0, this.reliableDC = void 0, this.reliableDCSub = void 0;
    });
  }
  cleanupClient() {
    return __awaiter(this, void 0, void 0, function* () {
      yield this.client.close(), this.client.resetCallbacks();
    });
  }
  addTrack(u2) {
    if (this.pendingTrackResolvers[u2.cid])
      throw new TrackInvalidError("a track with the same ID has already been published");
    return new Promise((c, l2) => {
      const v2 = setTimeout(() => {
        delete this.pendingTrackResolvers[u2.cid], l2(new ConnectionError("publication of local track timed out, no response from server"));
      }, 1e4);
      this.pendingTrackResolvers[u2.cid] = { resolve: (S2) => {
        clearTimeout(v2), c(S2);
      }, reject: () => {
        clearTimeout(v2), l2(new Error("Cancelled publication by calling unpublish"));
      } }, this.client.sendAddTrack(u2);
    });
  }
  /**
  * Removes sender from PeerConnection, returning true if it was removed successfully
  * and a negotiation is necessary
  * @param sender
  * @returns
  */
  removeTrack(u2) {
    if (u2.track && this.pendingTrackResolvers[u2.track.id]) {
      const { reject: c } = this.pendingTrackResolvers[u2.track.id];
      c && c(), delete this.pendingTrackResolvers[u2.track.id];
    }
    try {
      return this.pcManager.removeTrack(u2), true;
    } catch (c) {
      this.log.warn("failed to remove track", Object.assign(Object.assign({}, this.logContext), { error: c }));
    }
    return false;
  }
  updateMuteStatus(u2, c) {
    this.client.sendMuteTrack(u2, c);
  }
  get dataSubscriberReadyState() {
    var u2;
    return (u2 = this.reliableDCSub) === null || u2 === void 0 ? void 0 : u2.readyState;
  }
  getConnectedServerAddress() {
    var u2;
    return __awaiter(this, void 0, void 0, function* () {
      return (u2 = this.pcManager) === null || u2 === void 0 ? void 0 : u2.getConnectedAddress();
    });
  }
  /* @internal */
  setRegionUrlProvider(u2) {
    this.regionUrlProvider = u2;
  }
  configure(u2) {
    var c;
    return __awaiter(this, void 0, void 0, function* () {
      if (this.pcManager && this.pcManager.currentState !== PCTransportState.NEW)
        return;
      this.participantSid = (c = u2.participant) === null || c === void 0 ? void 0 : c.sid;
      const l2 = this.makeRTCConfiguration(u2);
      this.pcManager = new PCTransportManager(l2, u2.subscriberPrimary, this.loggerOptions), this.emit(EngineEvent.TransportsCreated, this.pcManager.publisher, this.pcManager.subscriber), this.pcManager.onIceCandidate = (v2, S2) => {
        this.client.sendIceCandidate(v2, S2);
      }, this.pcManager.onPublisherOffer = (v2) => {
        this.client.sendOffer(v2);
      }, this.pcManager.onDataChannel = this.handleDataChannel, this.pcManager.onStateChange = (v2, S2, g2) => __awaiter(this, void 0, void 0, function* () {
        if (this.log.debug("primary PC state changed ".concat(v2), this.logContext), v2 === PCTransportState.CONNECTED) {
          const E2 = this.pcState === PCState.New;
          this.pcState = PCState.Connected, E2 && this.emit(EngineEvent.Connected, u2);
        } else
          v2 === PCTransportState.FAILED && this.pcState === PCState.Connected && (this.pcState = PCState.Disconnected, this.handleDisconnect("peerconnection failed", g2 === "failed" ? ReconnectReason.RR_SUBSCRIBER_FAILED : ReconnectReason.RR_PUBLISHER_FAILED));
      }), this.pcManager.onTrack = (v2) => {
        this.emit(EngineEvent.MediaTrackAdded, v2.track, v2.streams[0], v2.receiver);
      }, this.createDataChannels();
    });
  }
  setupSignalClientCallbacks() {
    this.client.onAnswer = (u2) => __awaiter(this, void 0, void 0, function* () {
      this.pcManager && (this.log.debug("received server answer", Object.assign(Object.assign({}, this.logContext), { RTCSdpType: u2.type })), yield this.pcManager.setPublisherAnswer(u2));
    }), this.client.onTrickle = (u2, c) => {
      this.pcManager && (this.log.trace("got ICE candidate from peer", Object.assign(Object.assign({}, this.logContext), { candidate: u2, target: c })), this.pcManager.addIceCandidate(u2, c));
    }, this.client.onOffer = (u2) => __awaiter(this, void 0, void 0, function* () {
      if (!this.pcManager)
        return;
      const c = yield this.pcManager.createSubscriberAnswerFromOffer(u2);
      this.client.sendAnswer(c);
    }), this.client.onLocalTrackPublished = (u2) => {
      var c;
      if (this.log.debug("received trackPublishedResponse", Object.assign(Object.assign({}, this.logContext), { cid: u2.cid, track: (c = u2.track) === null || c === void 0 ? void 0 : c.sid })), !this.pendingTrackResolvers[u2.cid]) {
        this.log.error("missing track resolver for ".concat(u2.cid), Object.assign(Object.assign({}, this.logContext), { cid: u2.cid }));
        return;
      }
      const { resolve: l2 } = this.pendingTrackResolvers[u2.cid];
      delete this.pendingTrackResolvers[u2.cid], l2(u2.track);
    }, this.client.onLocalTrackUnpublished = (u2) => {
      this.emit(EngineEvent.LocalTrackUnpublished, u2);
    }, this.client.onTokenRefresh = (u2) => {
      this.token = u2;
    }, this.client.onRemoteMuteChanged = (u2, c) => {
      this.emit(EngineEvent.RemoteMute, u2, c);
    }, this.client.onSubscribedQualityUpdate = (u2) => {
      this.emit(EngineEvent.SubscribedQualityUpdate, u2);
    }, this.client.onClose = () => {
      this.handleDisconnect("signal", ReconnectReason.RR_SIGNAL_DISCONNECTED);
    }, this.client.onLeave = (u2) => {
      u2 != null && u2.canReconnect ? (this.fullReconnectOnNext = true, this.handleDisconnect(leaveReconnect)) : (this.emit(EngineEvent.Disconnected, u2 == null ? void 0 : u2.reason), this.close()), this.log.debug("client leave request", Object.assign(Object.assign({}, this.logContext), { reason: u2 == null ? void 0 : u2.reason }));
    };
  }
  makeRTCConfiguration(u2) {
    var c;
    const l2 = Object.assign({}, this.rtcConfig);
    if (!((c = this.signalOpts) === null || c === void 0) && c.e2eeEnabled && (this.log.debug("E2EE - setting up transports with insertable streams", this.logContext), l2.encodedInsertableStreams = true), u2.iceServers && !l2.iceServers) {
      const v2 = [];
      u2.iceServers.forEach((S2) => {
        const g2 = { urls: S2.urls };
        S2.username && (g2.username = S2.username), S2.credential && (g2.credential = S2.credential), v2.push(g2);
      }), l2.iceServers = v2;
    }
    return u2.clientConfiguration && u2.clientConfiguration.forceRelay === ClientConfigSetting.ENABLED && (l2.iceTransportPolicy = "relay"), l2.sdpSemantics = "unified-plan", l2.continualGatheringPolicy = "gather_continually", l2;
  }
  createDataChannels() {
    this.pcManager && (this.lossyDC && (this.lossyDC.onmessage = null, this.lossyDC.onerror = null), this.reliableDC && (this.reliableDC.onmessage = null, this.reliableDC.onerror = null), this.lossyDC = this.pcManager.createPublisherDataChannel(lossyDataChannel, {
      // will drop older packets that arrive
      ordered: true,
      maxRetransmits: 0
    }), this.reliableDC = this.pcManager.createPublisherDataChannel(reliableDataChannel, { ordered: true }), this.lossyDC.onmessage = this.handleDataMessage, this.reliableDC.onmessage = this.handleDataMessage, this.lossyDC.onerror = this.handleDataError, this.reliableDC.onerror = this.handleDataError, this.lossyDC.bufferedAmountLowThreshold = 65535, this.reliableDC.bufferedAmountLowThreshold = 65535, this.lossyDC.onbufferedamountlow = this.handleBufferedAmountLow, this.reliableDC.onbufferedamountlow = this.handleBufferedAmountLow);
  }
  setPreferredCodec(u2, c, l2) {
    if (!("getCapabilities" in RTCRtpSender))
      return;
    const v2 = RTCRtpSender.getCapabilities(c);
    if (!v2)
      return;
    this.log.debug("get sender capabilities", Object.assign(Object.assign({}, this.logContext), { cap: v2 }));
    const S2 = [], g2 = [], E2 = [];
    v2.codecs.forEach((_) => {
      const k = _.mimeType.toLowerCase();
      if (k === "audio/opus") {
        S2.push(_);
        return;
      }
      if (!(k === "video/".concat(l2))) {
        E2.push(_);
        return;
      }
      if (l2 === "h264") {
        _.sdpFmtpLine && _.sdpFmtpLine.includes("profile-level-id=42e01f") ? S2.push(_) : g2.push(_);
        return;
      }
      S2.push(_);
    }), supportsSetCodecPreferences(u2) && u2.setCodecPreferences(S2.concat(g2, E2));
  }
  createSender(u2, c, l2) {
    return __awaiter(this, void 0, void 0, function* () {
      if (supportsTransceiver())
        return yield this.createTransceiverRTCRtpSender(u2, c, l2);
      if (supportsAddTrack())
        return this.log.warn("using add-track fallback", this.logContext), yield this.createRTCRtpSender(u2.mediaStreamTrack);
      throw new UnexpectedConnectionState("Required webRTC APIs not supported on this device");
    });
  }
  createSimulcastSender(u2, c, l2, v2) {
    return __awaiter(this, void 0, void 0, function* () {
      if (supportsTransceiver())
        return this.createSimulcastTransceiverSender(u2, c, l2, v2);
      if (supportsAddTrack())
        return this.log.debug("using add-track fallback", this.logContext), this.createRTCRtpSender(u2.mediaStreamTrack);
      throw new UnexpectedConnectionState("Cannot stream on this device");
    });
  }
  createTransceiverRTCRtpSender(u2, c, l2) {
    return __awaiter(this, void 0, void 0, function* () {
      if (!this.pcManager)
        throw new UnexpectedConnectionState("publisher is closed");
      const v2 = [];
      u2.mediaStream && v2.push(u2.mediaStream);
      const S2 = { direction: "sendonly", streams: v2 };
      l2 && (S2.sendEncodings = l2);
      const g2 = yield this.pcManager.addPublisherTransceiver(u2.mediaStreamTrack, S2);
      return u2.kind === Track.Kind.Video && c.videoCodec && (this.setPreferredCodec(g2, u2.kind, c.videoCodec), u2.codec = c.videoCodec), g2.sender;
    });
  }
  createSimulcastTransceiverSender(u2, c, l2, v2) {
    return __awaiter(this, void 0, void 0, function* () {
      if (!this.pcManager)
        throw new UnexpectedConnectionState("publisher is closed");
      const S2 = { direction: "sendonly" };
      v2 && (S2.sendEncodings = v2);
      const g2 = yield this.pcManager.addPublisherTransceiver(c.mediaStreamTrack, S2);
      if (l2.videoCodec)
        return this.setPreferredCodec(g2, u2.kind, l2.videoCodec), u2.setSimulcastTrackSender(l2.videoCodec, g2.sender), g2.sender;
    });
  }
  createRTCRtpSender(u2) {
    return __awaiter(this, void 0, void 0, function* () {
      if (!this.pcManager)
        throw new UnexpectedConnectionState("publisher is closed");
      return this.pcManager.addPublisherTrack(u2);
    });
  }
  attemptReconnect(u2) {
    var c, l2, v2;
    return __awaiter(this, void 0, void 0, function* () {
      if (!this._isClosed) {
        if (this.attemptingReconnect) {
          livekitLogger.warn("already attempting reconnect, returning early", this.logContext);
          return;
        }
        (((c = this.clientConfiguration) === null || c === void 0 ? void 0 : c.resumeConnection) === ClientConfigSetting.DISABLED || // signaling state could change to closed due to hardware sleep
        // those connections cannot be resumed
        ((v2 = (l2 = this.pcManager) === null || l2 === void 0 ? void 0 : l2.currentState) !== null && v2 !== void 0 ? v2 : PCTransportState.NEW) === PCTransportState.NEW) && (this.fullReconnectOnNext = true);
        try {
          this.attemptingReconnect = true, this.fullReconnectOnNext ? yield this.restartConnection() : yield this.resumeConnection(u2), this.clearPendingReconnect(), this.fullReconnectOnNext = false;
        } catch (S2) {
          this.reconnectAttempts += 1;
          let g2 = true;
          S2 instanceof UnexpectedConnectionState ? (this.log.debug("received unrecoverable error", Object.assign(Object.assign({}, this.logContext), { error: S2 })), g2 = false) : S2 instanceof SignalReconnectError || (this.fullReconnectOnNext = true), g2 ? this.handleDisconnect("reconnect", ReconnectReason.RR_UNKNOWN) : (this.log.info("could not recover connection after ".concat(this.reconnectAttempts, " attempts, ").concat(Date.now() - this.reconnectStart, "ms. giving up"), this.logContext), this.emit(EngineEvent.Disconnected), yield this.close());
        } finally {
          this.attemptingReconnect = false;
        }
      }
    });
  }
  getNextRetryDelay(u2) {
    try {
      return this.reconnectPolicy.nextRetryDelayInMs(u2);
    } catch (c) {
      this.log.warn("encountered error in reconnect policy", Object.assign(Object.assign({}, this.logContext), { error: c }));
    }
    return null;
  }
  restartConnection(u2) {
    var c, l2, v2;
    return __awaiter(this, void 0, void 0, function* () {
      try {
        if (!this.url || !this.token)
          throw new UnexpectedConnectionState("could not reconnect, url or token not saved");
        this.log.info("reconnecting, attempt: ".concat(this.reconnectAttempts), this.logContext), this.emit(EngineEvent.Restarting), this.client.isDisconnected || (yield this.client.sendLeave()), yield this.cleanupPeerConnections(), yield this.cleanupClient();
        let S2;
        try {
          if (!this.signalOpts)
            throw this.log.warn("attempted connection restart, without signal options present", this.logContext), new SignalReconnectError();
          S2 = yield this.join(u2 ?? this.url, this.token, this.signalOpts);
        } catch (g2) {
          throw g2 instanceof ConnectionError && g2.reason === 0 ? new UnexpectedConnectionState("could not reconnect, token might be expired") : new SignalReconnectError();
        }
        if (this.shouldFailNext)
          throw this.shouldFailNext = false, new Error("simulated failure");
        if (this.client.setReconnected(), this.emit(EngineEvent.SignalRestarted, S2), yield this.waitForPCReconnected(), this.client.currentState !== SignalConnectionState.CONNECTED)
          throw new SignalReconnectError("Signal connection got severed during reconnect");
        (c = this.regionUrlProvider) === null || c === void 0 || c.resetAttempts(), this.emit(EngineEvent.Restarted);
      } catch (S2) {
        const g2 = yield (l2 = this.regionUrlProvider) === null || l2 === void 0 ? void 0 : l2.getNextBestRegionUrl();
        if (g2) {
          yield this.restartConnection(g2);
          return;
        } else
          throw (v2 = this.regionUrlProvider) === null || v2 === void 0 || v2.resetAttempts(), S2;
      }
    });
  }
  resumeConnection(u2) {
    var c;
    return __awaiter(this, void 0, void 0, function* () {
      if (!this.url || !this.token)
        throw new UnexpectedConnectionState("could not reconnect, url or token not saved");
      if (!this.pcManager)
        throw new UnexpectedConnectionState("publisher and subscriber connections unset");
      this.log.info("resuming signal connection, attempt ".concat(this.reconnectAttempts), this.logContext), this.emit(EngineEvent.Resuming);
      try {
        this.setupSignalClientCallbacks();
        const l2 = yield this.client.reconnect(this.url, this.token, this.participantSid, u2);
        if (l2) {
          const v2 = this.makeRTCConfiguration(l2);
          this.pcManager.updateConfiguration(v2);
        }
      } catch (l2) {
        let v2 = "";
        throw l2 instanceof Error && (v2 = l2.message, this.log.error(l2.message, Object.assign(Object.assign({}, this.logContext), { error: l2 }))), l2 instanceof ConnectionError && l2.reason === 0 ? new UnexpectedConnectionState("could not reconnect, token might be expired") : l2 instanceof ConnectionError && l2.reason === 4 ? l2 : new SignalReconnectError(v2);
      }
      if (this.emit(EngineEvent.SignalResumed), this.shouldFailNext)
        throw this.shouldFailNext = false, new Error("simulated failure");
      if (yield this.pcManager.triggerIceRestart(), yield this.waitForPCReconnected(), this.client.currentState !== SignalConnectionState.CONNECTED)
        throw new SignalReconnectError("Signal connection got severed during reconnect");
      this.client.setReconnected(), ((c = this.reliableDC) === null || c === void 0 ? void 0 : c.readyState) === "open" && this.reliableDC.id === null && this.createDataChannels(), this.emit(EngineEvent.Resumed);
    });
  }
  waitForPCInitialConnection(u2, c) {
    return __awaiter(this, void 0, void 0, function* () {
      if (!this.pcManager)
        throw new UnexpectedConnectionState("PC manager is closed");
      yield this.pcManager.ensurePCTransportConnection(c, u2);
    });
  }
  waitForPCReconnected() {
    return __awaiter(this, void 0, void 0, function* () {
      this.pcState = PCState.Reconnecting, this.log.debug("waiting for peer connection to reconnect", this.logContext);
      try {
        if (yield sleep(minReconnectWait), !this.pcManager)
          throw new UnexpectedConnectionState("PC manager is closed");
        yield this.pcManager.ensurePCTransportConnection(void 0, this.peerConnectionTimeout), this.pcState = PCState.Connected;
      } catch (u2) {
        throw this.pcState = PCState.Disconnected, new ConnectionError("could not establish PC connection, ".concat(u2.message));
      }
    });
  }
  /* @internal */
  sendDataPacket(u2, c) {
    return __awaiter(this, void 0, void 0, function* () {
      const l2 = u2.toBinary();
      yield this.ensurePublisherConnected(c);
      const v2 = this.dataChannelForKind(c);
      v2 && v2.send(l2), this.updateAndEmitDCBufferStatus(c);
    });
  }
  /**
  * @internal
  */
  ensureDataTransportConnected(u2) {
    let c = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.subscriberPrimary;
    var l2;
    return __awaiter(this, void 0, void 0, function* () {
      if (!this.pcManager)
        throw new UnexpectedConnectionState("PC manager is closed");
      const v2 = c ? this.pcManager.subscriber : this.pcManager.publisher, S2 = c ? "Subscriber" : "Publisher";
      if (!v2)
        throw new ConnectionError("".concat(S2, " connection not set"));
      !c && !this.pcManager.publisher.isICEConnected && this.pcManager.publisher.getICEConnectionState() !== "checking" && this.negotiate();
      const g2 = this.dataChannelForKind(u2, c);
      if ((g2 == null ? void 0 : g2.readyState) === "open")
        return;
      const E2 = (/* @__PURE__ */ new Date()).getTime() + this.peerConnectionTimeout;
      for (; (/* @__PURE__ */ new Date()).getTime() < E2; ) {
        if (v2.isICEConnected && ((l2 = this.dataChannelForKind(u2, c)) === null || l2 === void 0 ? void 0 : l2.readyState) === "open")
          return;
        yield sleep(50);
      }
      throw new ConnectionError("could not establish ".concat(S2, " connection, state: ").concat(v2.getICEConnectionState()));
    });
  }
  ensurePublisherConnected(u2) {
    return __awaiter(this, void 0, void 0, function* () {
      yield this.ensureDataTransportConnected(u2, false);
    });
  }
  /* @internal */
  verifyTransport() {
    return !(!this.pcManager || this.pcManager.currentState !== PCTransportState.CONNECTED || !this.client.ws || this.client.ws.readyState === WebSocket.CLOSED);
  }
  /** @internal */
  negotiate() {
    return __awaiter(this, void 0, void 0, function* () {
      return new Promise((u2, c) => __awaiter(this, void 0, void 0, function* () {
        if (!this.pcManager) {
          c(new NegotiationError("PC manager is closed"));
          return;
        }
        this.pcManager.requirePublisher();
        const l2 = new AbortController(), v2 = () => {
          l2.abort(), this.log.debug("engine disconnected while negotiation was ongoing", this.logContext), u2();
        };
        this.isClosed && c("cannot negotiate on closed engine"), this.on(EngineEvent.Closing, v2), this.pcManager.publisher.once(PCEvents.RTPVideoPayloadTypes, (S2) => {
          const g2 = /* @__PURE__ */ new Map();
          S2.forEach((E2) => {
            const _ = E2.codec.toLowerCase();
            isVideoCodec(_) && g2.set(E2.payload, _);
          }), this.emit(EngineEvent.RTPVideoMapUpdate, g2);
        });
        try {
          yield this.pcManager.negotiate(l2), u2();
        } catch (S2) {
          S2 instanceof NegotiationError && (this.fullReconnectOnNext = true), this.handleDisconnect("negotiation", ReconnectReason.RR_UNKNOWN), c(S2);
        } finally {
          this.off(EngineEvent.Closing, v2);
        }
      }));
    });
  }
  dataChannelForKind(u2, c) {
    if (c) {
      if (u2 === DataPacket_Kind.LOSSY)
        return this.lossyDCSub;
      if (u2 === DataPacket_Kind.RELIABLE)
        return this.reliableDCSub;
    } else {
      if (u2 === DataPacket_Kind.LOSSY)
        return this.lossyDC;
      if (u2 === DataPacket_Kind.RELIABLE)
        return this.reliableDC;
    }
  }
  /** @internal */
  sendSyncState(u2, c) {
    var l2, v2;
    if (!this.pcManager) {
      this.log.warn("sync state cannot be sent without peer connection setup", this.logContext);
      return;
    }
    const S2 = this.pcManager.subscriber.getLocalDescription(), g2 = this.pcManager.subscriber.getRemoteDescription(), E2 = (v2 = (l2 = this.signalOpts) === null || l2 === void 0 ? void 0 : l2.autoSubscribe) !== null && v2 !== void 0 ? v2 : true, _ = new Array(), k = new Array();
    u2.forEach((L2) => {
      L2.isDesired !== E2 && _.push(L2.trackSid), L2.isEnabled || k.push(L2.trackSid);
    }), this.client.sendSyncState(new SyncState({ answer: S2 ? toProtoSessionDescription({ sdp: S2.sdp, type: S2.type }) : void 0, offer: g2 ? toProtoSessionDescription({ sdp: g2.sdp, type: g2.type }) : void 0, subscription: new UpdateSubscription({ trackSids: _, subscribe: !E2, participantTracks: [] }), publishTracks: getTrackPublicationInfo(c), dataChannels: this.dataChannelsInfo(), trackSidsDisabled: k }));
  }
  /* @internal */
  failNext() {
    this.shouldFailNext = true;
  }
  dataChannelsInfo() {
    const u2 = [], c = (l2, v2) => {
      (l2 == null ? void 0 : l2.id) !== void 0 && l2.id !== null && u2.push(new DataChannelInfo({ label: l2.label, id: l2.id, target: v2 }));
    };
    return c(this.dataChannelForKind(DataPacket_Kind.LOSSY), SignalTarget.PUBLISHER), c(this.dataChannelForKind(DataPacket_Kind.RELIABLE), SignalTarget.PUBLISHER), c(this.dataChannelForKind(DataPacket_Kind.LOSSY, true), SignalTarget.SUBSCRIBER), c(this.dataChannelForKind(DataPacket_Kind.RELIABLE, true), SignalTarget.SUBSCRIBER), u2;
  }
  clearReconnectTimeout() {
    this.reconnectTimeout && CriticalTimers.clearTimeout(this.reconnectTimeout);
  }
  clearPendingReconnect() {
    this.clearReconnectTimeout(), this.reconnectAttempts = 0;
  }
  registerOnLineListener() {
    isWeb() && window.addEventListener("online", this.handleBrowserOnLine);
  }
  deregisterOnLineListener() {
    isWeb() && window.removeEventListener("online", this.handleBrowserOnLine);
  }
}
class SignalReconnectError extends Error {
}
class RegionUrlProvider {
  constructor(u2, c) {
    this.lastUpdateAt = 0, this.settingsCacheTime = 3e3, this.attemptedRegions = [], this.serverUrl = new URL(u2), this.token = c;
  }
  updateToken(u2) {
    this.token = u2;
  }
  isCloud() {
    return isCloud(this.serverUrl);
  }
  getServerUrl() {
    return this.serverUrl;
  }
  getNextBestRegionUrl(u2) {
    return __awaiter(this, void 0, void 0, function* () {
      if (!this.isCloud())
        throw Error("region availability is only supported for LiveKit Cloud domains");
      (!this.regionSettings || Date.now() - this.lastUpdateAt > this.settingsCacheTime) && (this.regionSettings = yield this.fetchRegionSettings(u2));
      const c = this.regionSettings.regions.filter((l2) => !this.attemptedRegions.find((v2) => v2.url === l2.url));
      if (c.length > 0) {
        const l2 = c[0];
        return this.attemptedRegions.push(l2), livekitLogger.debug("next region: ".concat(l2.region)), l2.url;
      } else
        return null;
    });
  }
  resetAttempts() {
    this.attemptedRegions = [];
  }
  /* @internal */
  fetchRegionSettings(u2) {
    return __awaiter(this, void 0, void 0, function* () {
      const c = yield fetch("".concat(getCloudConfigUrl(this.serverUrl), "/regions"), { headers: { authorization: "Bearer ".concat(this.token) }, signal: u2 });
      if (c.ok) {
        const l2 = yield c.json();
        return this.lastUpdateAt = Date.now(), l2;
      } else
        throw new ConnectionError("Could not fetch region settings: ".concat(c.statusText), c.status === 401 ? 0 : void 0, c.status);
    });
  }
}
function getCloudConfigUrl(a92) {
  return "".concat(a92.protocol.replace("ws", "http"), "//").concat(a92.host, "/settings");
}
const monitorFrequency = 2e3;
function computeBitrate(a92, u2) {
  if (!u2)
    return 0;
  let c, l2;
  return "bytesReceived" in a92 ? (c = a92.bytesReceived, l2 = u2.bytesReceived) : "bytesSent" in a92 && (c = a92.bytesSent, l2 = u2.bytesSent), c === void 0 || l2 === void 0 || a92.timestamp === void 0 || u2.timestamp === void 0 ? 0 : (c - l2) * 8 * 1e3 / (a92.timestamp - u2.timestamp);
}
class LocalAudioTrack extends LocalTrack {
  /**
  *
  * @param mediaTrack
  * @param constraints MediaTrackConstraints that are being used when restarting or reacquiring tracks
  * @param userProvidedTrack Signals to the SDK whether or not the mediaTrack should be managed (i.e. released and reacquired) internally by the SDK
  */
  constructor(u2, c) {
    let l2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true, v2 = arguments.length > 3 ? arguments[3] : void 0, S2 = arguments.length > 4 ? arguments[4] : void 0;
    super(u2, Track.Kind.Audio, c, l2, S2), this.stopOnMute = false, this.monitorSender = () => __awaiter(this, void 0, void 0, function* () {
      if (!this.sender) {
        this._currentBitrate = 0;
        return;
      }
      let g2;
      try {
        g2 = yield this.getSenderStats();
      } catch (E2) {
        this.log.error("could not get audio sender stats", Object.assign(Object.assign({}, this.logContext), { error: E2 }));
        return;
      }
      g2 && this.prevStats && (this._currentBitrate = computeBitrate(g2, this.prevStats)), this.prevStats = g2;
    }), this.audioContext = v2, this.checkForSilence();
  }
  setDeviceId(u2) {
    return __awaiter(this, void 0, void 0, function* () {
      return this._constraints.deviceId === u2 ? true : (this._constraints.deviceId = u2, this.isMuted || (yield this.restartTrack()), this.isMuted || unwrapConstraint(u2) === this.mediaStreamTrack.getSettings().deviceId);
    });
  }
  mute() {
    const u2 = Object.create(null, { mute: { get: () => super.mute } });
    return __awaiter(this, void 0, void 0, function* () {
      const c = yield this.muteLock.lock();
      try {
        return this.source === Track.Source.Microphone && this.stopOnMute && !this.isUserProvided && (this.log.debug("stopping mic track", this.logContext), this._mediaStreamTrack.stop()), yield u2.mute.call(this), this;
      } finally {
        c();
      }
    });
  }
  unmute() {
    const u2 = Object.create(null, { unmute: { get: () => super.unmute } });
    return __awaiter(this, void 0, void 0, function* () {
      const c = yield this.muteLock.lock();
      try {
        const l2 = this._constraints.deviceId && this._mediaStreamTrack.getSettings().deviceId !== unwrapConstraint(this._constraints.deviceId);
        return this.source === Track.Source.Microphone && (this.stopOnMute || this._mediaStreamTrack.readyState === "ended" || l2) && !this.isUserProvided && (this.log.debug("reacquiring mic track", this.logContext), yield this.restartTrack()), yield u2.unmute.call(this), this;
      } finally {
        c();
      }
    });
  }
  restartTrack(u2) {
    return __awaiter(this, void 0, void 0, function* () {
      let c;
      if (u2) {
        const l2 = constraintsForOptions({ audio: u2 });
        typeof l2.audio != "boolean" && (c = l2.audio);
      }
      yield this.restart(c);
    });
  }
  restart(u2) {
    const c = Object.create(null, { restart: { get: () => super.restart } });
    return __awaiter(this, void 0, void 0, function* () {
      const l2 = yield c.restart.call(this, u2);
      return this.checkForSilence(), l2;
    });
  }
  /* @internal */
  startMonitor() {
    isWeb() && (this.monitorInterval || (this.monitorInterval = setInterval(() => {
      this.monitorSender();
    }, monitorFrequency)));
  }
  setProcessor(u2) {
    var c;
    return __awaiter(this, void 0, void 0, function* () {
      const l2 = yield this.processorLock.lock();
      try {
        if (!this.audioContext)
          throw Error("Audio context needs to be set on LocalAudioTrack in order to enable processors");
        if (this.processor && (yield this.stopProcessor()), this.kind === "unknown")
          throw TypeError("cannot set processor on track of unknown kind");
        const v2 = { kind: this.kind, track: this._mediaStreamTrack, audioContext: this.audioContext };
        this.log.debug("setting up audio processor ".concat(u2.name), this.logContext), yield u2.init(v2), this.processor = u2, this.processor.processedTrack && (yield (c = this.sender) === null || c === void 0 ? void 0 : c.replaceTrack(this.processor.processedTrack));
      } finally {
        l2();
      }
    });
  }
  /**
  * @internal
  * @experimental
  */
  setAudioContext(u2) {
    this.audioContext = u2;
  }
  getSenderStats() {
    var u2;
    return __awaiter(this, void 0, void 0, function* () {
      if (!(!((u2 = this.sender) === null || u2 === void 0) && u2.getStats))
        return;
      const c = yield this.sender.getStats();
      let l2;
      return c.forEach((v2) => {
        v2.type === "outbound-rtp" && (l2 = { type: "audio", streamId: v2.id, packetsSent: v2.packetsSent, packetsLost: v2.packetsLost, bytesSent: v2.bytesSent, timestamp: v2.timestamp, roundTripTime: v2.roundTripTime, jitter: v2.jitter });
      }), l2;
    });
  }
  checkForSilence() {
    return __awaiter(this, void 0, void 0, function* () {
      const u2 = yield detectSilence(this);
      return u2 && (this.isMuted || this.log.warn("silence detected on local audio track", this.logContext), this.emit(TrackEvent.AudioSilenceDetected)), u2;
    });
  }
}
function mediaTrackToLocalTrack(a92, u2, c) {
  switch (a92.kind) {
    case "audio":
      return new LocalAudioTrack(a92, u2, false, void 0, c);
    case "video":
      return new LocalVideoTrack(a92, u2, false, c);
    default:
      throw new TrackInvalidError("unsupported track type: ".concat(a92.kind));
  }
}
const presets169 = Object.values(VideoPresets), presets43 = Object.values(VideoPresets43), presetsScreenShare = Object.values(ScreenSharePresets), defaultSimulcastPresets169 = [VideoPresets.h180, VideoPresets.h360], defaultSimulcastPresets43 = [VideoPresets43.h180, VideoPresets43.h360], computeDefaultScreenShareSimulcastPresets = (a92) => [{ scaleResolutionDownBy: 2, fps: a92.encoding.maxFramerate }].map((c) => {
  var l2, v2;
  return new VideoPreset(Math.floor(a92.width / c.scaleResolutionDownBy), Math.floor(a92.height / c.scaleResolutionDownBy), Math.max(15e4, Math.floor(a92.encoding.maxBitrate / (Math.pow(c.scaleResolutionDownBy, 2) * (((l2 = a92.encoding.maxFramerate) !== null && l2 !== void 0 ? l2 : 30) / ((v2 = c.fps) !== null && v2 !== void 0 ? v2 : 30))))), c.fps, a92.encoding.priority);
}), videoRids = ["q", "h", "f"];
function computeVideoEncodings(a92, u2, c, l2) {
  var v2, S2;
  let g2 = l2 == null ? void 0 : l2.videoEncoding;
  a92 && (g2 = l2 == null ? void 0 : l2.screenShareEncoding);
  const E2 = l2 == null ? void 0 : l2.simulcast, _ = l2 == null ? void 0 : l2.scalabilityMode, k = l2 == null ? void 0 : l2.videoCodec;
  if (!g2 && !E2 && !_ || !u2 || !c)
    return [{}];
  g2 || (g2 = determineAppropriateEncoding(a92, u2, c, k), livekitLogger.debug("using video encoding", g2));
  const L2 = new VideoPreset(u2, c, g2.maxBitrate, g2.maxFramerate, g2.priority);
  if (_ && isSVCCodec(k)) {
    livekitLogger.debug("using svc with scalabilityMode ".concat(_));
    const J2 = new ScalabilityMode(_), V2 = [];
    if (J2.spatial > 3)
      throw new Error("unsupported scalabilityMode: ".concat(_));
    for (let q2 = 0; q2 < J2.spatial; q2 += 1)
      V2.push({
        rid: videoRids[2 - q2],
        maxBitrate: g2.maxBitrate / Math.pow(3, q2),
        /* @ts-ignore */
        maxFramerate: L2.encoding.maxFramerate
      });
    return V2[0].scalabilityMode = _, livekitLogger.debug("encodings", V2), V2;
  }
  if (!E2)
    return [g2];
  let M2 = [];
  a92 ? M2 = (v2 = sortPresets(l2 == null ? void 0 : l2.screenShareSimulcastLayers)) !== null && v2 !== void 0 ? v2 : defaultSimulcastLayers(a92, L2) : M2 = (S2 = sortPresets(l2 == null ? void 0 : l2.videoSimulcastLayers)) !== null && S2 !== void 0 ? S2 : defaultSimulcastLayers(a92, L2);
  let $;
  if (M2.length > 0) {
    const J2 = M2[0];
    M2.length > 1 && ([, $] = M2);
    const V2 = Math.max(u2, c);
    if (V2 >= 960 && $)
      return encodingsFromPresets(u2, c, [J2, $, L2]);
    if (V2 >= 480)
      return encodingsFromPresets(u2, c, [J2, L2]);
  }
  return encodingsFromPresets(u2, c, [L2]);
}
function computeTrackBackupEncodings(a92, u2, c) {
  var l2, v2, S2, g2;
  if (!c.backupCodec || c.backupCodec === true || c.backupCodec.codec === c.videoCodec)
    return;
  u2 !== c.backupCodec.codec && livekitLogger.warn("requested a different codec than specified as backup", { serverRequested: u2, backup: c.backupCodec.codec }), c.videoCodec = u2, c.videoEncoding = c.backupCodec.encoding;
  const E2 = a92.mediaStreamTrack.getSettings(), _ = (l2 = E2.width) !== null && l2 !== void 0 ? l2 : (v2 = a92.dimensions) === null || v2 === void 0 ? void 0 : v2.width, k = (S2 = E2.height) !== null && S2 !== void 0 ? S2 : (g2 = a92.dimensions) === null || g2 === void 0 ? void 0 : g2.height;
  return computeVideoEncodings(a92.source === Track.Source.ScreenShare, _, k, c);
}
function determineAppropriateEncoding(a92, u2, c, l2) {
  const v2 = presetsForResolution(a92, u2, c);
  let { encoding: S2 } = v2[0];
  const g2 = Math.max(u2, c);
  for (let E2 = 0; E2 < v2.length; E2 += 1) {
    const _ = v2[E2];
    if (S2 = _.encoding, _.width >= g2)
      break;
  }
  if (l2)
    switch (l2) {
      case "av1":
        S2 = Object.assign({}, S2), S2.maxBitrate = S2.maxBitrate * 0.7;
        break;
      case "vp9":
        S2 = Object.assign({}, S2), S2.maxBitrate = S2.maxBitrate * 0.85;
        break;
    }
  return S2;
}
function presetsForResolution(a92, u2, c) {
  if (a92)
    return presetsScreenShare;
  const l2 = u2 > c ? u2 / c : c / u2;
  return Math.abs(l2 - 16 / 9) < Math.abs(l2 - 4 / 3) ? presets169 : presets43;
}
function defaultSimulcastLayers(a92, u2) {
  if (a92)
    return computeDefaultScreenShareSimulcastPresets(u2);
  const { width: c, height: l2 } = u2, v2 = c > l2 ? c / l2 : l2 / c;
  return Math.abs(v2 - 16 / 9) < Math.abs(v2 - 4 / 3) ? defaultSimulcastPresets169 : defaultSimulcastPresets43;
}
function encodingsFromPresets(a92, u2, c) {
  const l2 = [];
  if (c.forEach((v2, S2) => {
    if (S2 >= videoRids.length)
      return;
    const g2 = Math.min(a92, u2), _ = { rid: videoRids[S2], scaleResolutionDownBy: Math.max(1, g2 / Math.min(v2.width, v2.height)), maxBitrate: v2.encoding.maxBitrate };
    v2.encoding.maxFramerate && (_.maxFramerate = v2.encoding.maxFramerate);
    const k = isFireFox() || S2 === 0;
    v2.encoding.priority && k && (_.priority = v2.encoding.priority, _.networkPriority = v2.encoding.priority), l2.push(_);
  }), isReactNative() && getReactNativeOs() === "ios") {
    let v2;
    l2.forEach((g2) => {
      v2 ? g2.maxFramerate && g2.maxFramerate > v2 && (v2 = g2.maxFramerate) : v2 = g2.maxFramerate;
    });
    let S2 = true;
    l2.forEach((g2) => {
      var E2;
      g2.maxFramerate != v2 && (S2 && (S2 = false, livekitLogger.info("Simulcast on iOS React-Native requires all encodings to share the same framerate.")), livekitLogger.info('Setting framerate of encoding "'.concat((E2 = g2.rid) !== null && E2 !== void 0 ? E2 : "", '" to ').concat(v2)), g2.maxFramerate = v2);
    });
  }
  return l2;
}
function sortPresets(a92) {
  if (a92)
    return a92.sort((u2, c) => {
      const { encoding: l2 } = u2, { encoding: v2 } = c;
      return l2.maxBitrate > v2.maxBitrate ? 1 : l2.maxBitrate < v2.maxBitrate ? -1 : l2.maxBitrate === v2.maxBitrate && l2.maxFramerate && v2.maxFramerate ? l2.maxFramerate > v2.maxFramerate ? 1 : -1 : 0;
    });
}
class ScalabilityMode {
  constructor(u2) {
    const c = u2.match(/^L(\d)T(\d)(h|_KEY|_KEY_SHIFT){0,1}$/);
    if (!c)
      throw new Error("invalid scalability mode");
    if (this.spatial = parseInt(c[1]), this.temporal = parseInt(c[2]), c.length > 3)
      switch (c[3]) {
        case "h":
        case "_KEY":
        case "_KEY_SHIFT":
          this.suffix = c[3];
      }
  }
  toString() {
    var u2;
    return "L".concat(this.spatial, "T").concat(this.temporal).concat((u2 = this.suffix) !== null && u2 !== void 0 ? u2 : "");
  }
}
const refreshSubscribedCodecAfterNewCodec = 5e3;
class LocalVideoTrack extends LocalTrack {
  /**
  *
  * @param mediaTrack
  * @param constraints MediaTrackConstraints that are being used when restarting or reacquiring tracks
  * @param userProvidedTrack Signals to the SDK whether or not the mediaTrack should be managed (i.e. released and reacquired) internally by the SDK
  */
  constructor(u2, c) {
    let l2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true, v2 = arguments.length > 3 ? arguments[3] : void 0;
    super(u2, Track.Kind.Video, c, l2, v2), this.simulcastCodecs = /* @__PURE__ */ new Map(), this.monitorSender = () => __awaiter(this, void 0, void 0, function* () {
      if (!this.sender) {
        this._currentBitrate = 0;
        return;
      }
      let S2;
      try {
        S2 = yield this.getSenderStats();
      } catch (E2) {
        this.log.error("could not get audio sender stats", Object.assign(Object.assign({}, this.logContext), { error: E2 }));
        return;
      }
      const g2 = new Map(S2.map((E2) => [E2.rid, E2]));
      if (this.prevStats) {
        let E2 = 0;
        g2.forEach((_, k) => {
          var L2;
          const M2 = (L2 = this.prevStats) === null || L2 === void 0 ? void 0 : L2.get(k);
          E2 += computeBitrate(_, M2);
        }), this._currentBitrate = E2;
      }
      this.prevStats = g2;
    }), this.senderLock = new Mutex();
  }
  get isSimulcast() {
    return !!(this.sender && this.sender.getParameters().encodings.length > 1);
  }
  /* @internal */
  startMonitor(u2) {
    var c;
    if (this.signalClient = u2, !isWeb())
      return;
    const l2 = (c = this.sender) === null || c === void 0 ? void 0 : c.getParameters();
    l2 && (this.encodings = l2.encodings), !this.monitorInterval && (this.monitorInterval = setInterval(() => {
      this.monitorSender();
    }, monitorFrequency));
  }
  stop() {
    this._mediaStreamTrack.getConstraints(), this.simulcastCodecs.forEach((u2) => {
      u2.mediaStreamTrack.stop();
    }), super.stop();
  }
  pauseUpstream() {
    const u2 = Object.create(null, { pauseUpstream: { get: () => super.pauseUpstream } });
    var c, l2, v2, S2, g2;
    return __awaiter(this, void 0, void 0, function* () {
      yield u2.pauseUpstream.call(this);
      try {
        for (var E2 = true, _ = __asyncValues(this.simulcastCodecs.values()), k; k = yield _.next(), c = k.done, !c; E2 = true)
          S2 = k.value, E2 = false, yield (g2 = S2.sender) === null || g2 === void 0 ? void 0 : g2.replaceTrack(null);
      } catch (L2) {
        l2 = { error: L2 };
      } finally {
        try {
          !E2 && !c && (v2 = _.return) && (yield v2.call(_));
        } finally {
          if (l2)
            throw l2.error;
        }
      }
    });
  }
  resumeUpstream() {
    const u2 = Object.create(null, { resumeUpstream: { get: () => super.resumeUpstream } });
    var c, l2, v2, S2, g2;
    return __awaiter(this, void 0, void 0, function* () {
      yield u2.resumeUpstream.call(this);
      try {
        for (var E2 = true, _ = __asyncValues(this.simulcastCodecs.values()), k; k = yield _.next(), c = k.done, !c; E2 = true) {
          S2 = k.value, E2 = false;
          const L2 = S2;
          yield (g2 = L2.sender) === null || g2 === void 0 ? void 0 : g2.replaceTrack(L2.mediaStreamTrack);
        }
      } catch (L2) {
        l2 = { error: L2 };
      } finally {
        try {
          !E2 && !c && (v2 = _.return) && (yield v2.call(_));
        } finally {
          if (l2)
            throw l2.error;
        }
      }
    });
  }
  mute() {
    const u2 = Object.create(null, { mute: { get: () => super.mute } });
    return __awaiter(this, void 0, void 0, function* () {
      const c = yield this.muteLock.lock();
      try {
        return this.source === Track.Source.Camera && !this.isUserProvided && (this.log.debug("stopping camera track", this.logContext), this._mediaStreamTrack.stop()), yield u2.mute.call(this), this;
      } finally {
        c();
      }
    });
  }
  unmute() {
    const u2 = Object.create(null, { unmute: { get: () => super.unmute } });
    return __awaiter(this, void 0, void 0, function* () {
      const c = yield this.muteLock.lock();
      try {
        return this.source === Track.Source.Camera && !this.isUserProvided && (this.log.debug("reacquiring camera track", this.logContext), yield this.restartTrack()), yield u2.unmute.call(this), this;
      } finally {
        c();
      }
    });
  }
  setTrackMuted(u2) {
    super.setTrackMuted(u2);
    for (const c of this.simulcastCodecs.values())
      c.mediaStreamTrack.enabled = !u2;
  }
  getSenderStats() {
    var u2;
    return __awaiter(this, void 0, void 0, function* () {
      if (!(!((u2 = this.sender) === null || u2 === void 0) && u2.getStats))
        return [];
      const c = [], l2 = yield this.sender.getStats();
      return l2.forEach((v2) => {
        var S2;
        if (v2.type === "outbound-rtp") {
          const g2 = { type: "video", streamId: v2.id, frameHeight: v2.frameHeight, frameWidth: v2.frameWidth, firCount: v2.firCount, pliCount: v2.pliCount, nackCount: v2.nackCount, packetsSent: v2.packetsSent, bytesSent: v2.bytesSent, framesSent: v2.framesSent, timestamp: v2.timestamp, rid: (S2 = v2.rid) !== null && S2 !== void 0 ? S2 : v2.id, retransmittedPacketsSent: v2.retransmittedPacketsSent, qualityLimitationReason: v2.qualityLimitationReason, qualityLimitationResolutionChanges: v2.qualityLimitationResolutionChanges }, E2 = l2.get(v2.remoteId);
          E2 && (g2.jitter = E2.jitter, g2.packetsLost = E2.packetsLost, g2.roundTripTime = E2.roundTripTime), c.push(g2);
        }
      }), c;
    });
  }
  setPublishingQuality(u2) {
    const c = [];
    for (let l2 = VideoQuality.LOW; l2 <= VideoQuality.HIGH; l2 += 1)
      c.push(new SubscribedQuality({ quality: l2, enabled: l2 <= u2 }));
    this.log.debug("setting publishing quality. max quality ".concat(u2), this.logContext), this.setPublishingLayers(c);
  }
  setDeviceId(u2) {
    return __awaiter(this, void 0, void 0, function* () {
      return this._constraints.deviceId === u2 && this._mediaStreamTrack.getSettings().deviceId === unwrapConstraint(u2) ? true : (this._constraints.deviceId = u2, this.isMuted || (yield this.restartTrack()), this.isMuted || unwrapConstraint(u2) === this._mediaStreamTrack.getSettings().deviceId);
    });
  }
  restartTrack(u2) {
    var c, l2, v2, S2;
    return __awaiter(this, void 0, void 0, function* () {
      let g2;
      if (u2) {
        const L2 = constraintsForOptions({ video: u2 });
        typeof L2.video != "boolean" && (g2 = L2.video);
      }
      yield this.restart(g2);
      try {
        for (var E2 = true, _ = __asyncValues(this.simulcastCodecs.values()), k; k = yield _.next(), c = k.done, !c; E2 = true) {
          S2 = k.value, E2 = false;
          const L2 = S2;
          L2.sender && (L2.mediaStreamTrack = this.mediaStreamTrack.clone(), yield L2.sender.replaceTrack(L2.mediaStreamTrack));
        }
      } catch (L2) {
        l2 = { error: L2 };
      } finally {
        try {
          !E2 && !c && (v2 = _.return) && (yield v2.call(_));
        } finally {
          if (l2)
            throw l2.error;
        }
      }
    });
  }
  setProcessor(u2) {
    let c = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    const l2 = Object.create(null, { setProcessor: { get: () => super.setProcessor } });
    var v2, S2, g2, E2, _, k;
    return __awaiter(this, void 0, void 0, function* () {
      if (yield l2.setProcessor.call(this, u2, c), !((_ = this.processor) === null || _ === void 0) && _.processedTrack)
        try {
          for (var L2 = true, M2 = __asyncValues(this.simulcastCodecs.values()), $; $ = yield M2.next(), v2 = $.done, !v2; L2 = true)
            E2 = $.value, L2 = false, yield (k = E2.sender) === null || k === void 0 ? void 0 : k.replaceTrack(this.processor.processedTrack);
        } catch (J2) {
          S2 = { error: J2 };
        } finally {
          try {
            !L2 && !v2 && (g2 = M2.return) && (yield g2.call(M2));
          } finally {
            if (S2)
              throw S2.error;
          }
        }
    });
  }
  addSimulcastTrack(u2, c) {
    if (this.simulcastCodecs.has(u2)) {
      this.log.error("".concat(u2, " already added, skipping adding simulcast codec"), this.logContext);
      return;
    }
    const l2 = { codec: u2, mediaStreamTrack: this.mediaStreamTrack.clone(), sender: void 0, encodings: c };
    return this.simulcastCodecs.set(u2, l2), l2;
  }
  setSimulcastTrackSender(u2, c) {
    const l2 = this.simulcastCodecs.get(u2);
    l2 && (l2.sender = c, setTimeout(() => {
      this.subscribedCodecs && this.setPublishingCodecs(this.subscribedCodecs);
    }, refreshSubscribedCodecAfterNewCodec));
  }
  /**
  * @internal
  * Sets codecs that should be publishing, returns new codecs that have not yet
  * been published
  */
  setPublishingCodecs(u2) {
    var c, l2, v2, S2, g2, E2, _;
    return __awaiter(this, void 0, void 0, function* () {
      if (this.log.debug("setting publishing codecs", Object.assign(Object.assign({}, this.logContext), { codecs: u2, currentCodec: this.codec })), !this.codec && u2.length > 0)
        return yield this.setPublishingLayers(u2[0].qualities), [];
      this.subscribedCodecs = u2;
      const k = [];
      try {
        for (c = true, l2 = __asyncValues(u2); v2 = yield l2.next(), S2 = v2.done, !S2; c = true) {
          _ = v2.value, c = false;
          const L2 = _;
          if (!this.codec || this.codec === L2.codec)
            yield this.setPublishingLayers(L2.qualities);
          else {
            const M2 = this.simulcastCodecs.get(L2.codec);
            if (this.log.debug("try setPublishingCodec for ".concat(L2.codec), Object.assign(Object.assign({}, this.logContext), { simulcastCodecInfo: M2 })), !M2 || !M2.sender) {
              for (const $ of L2.qualities)
                if ($.enabled) {
                  k.push(L2.codec);
                  break;
                }
            } else
              M2.encodings && (this.log.debug("try setPublishingLayersForSender ".concat(L2.codec), this.logContext), yield setPublishingLayersForSender(M2.sender, M2.encodings, L2.qualities, this.senderLock, this.log, this.logContext));
          }
        }
      } catch (L2) {
        g2 = { error: L2 };
      } finally {
        try {
          !c && !S2 && (E2 = l2.return) && (yield E2.call(l2));
        } finally {
          if (g2)
            throw g2.error;
        }
      }
      return k;
    });
  }
  /**
  * @internal
  * Sets layers that should be publishing
  */
  setPublishingLayers(u2) {
    return __awaiter(this, void 0, void 0, function* () {
      this.log.debug("setting publishing layers", Object.assign(Object.assign({}, this.logContext), { qualities: u2 })), !(!this.sender || !this.encodings) && (yield setPublishingLayersForSender(this.sender, this.encodings, u2, this.senderLock, this.log, this.logContext));
    });
  }
  handleAppVisibilityChanged() {
    const u2 = Object.create(null, { handleAppVisibilityChanged: { get: () => super.handleAppVisibilityChanged } });
    return __awaiter(this, void 0, void 0, function* () {
      yield u2.handleAppVisibilityChanged.call(this), isMobile() && this.isInBackground && this.source === Track.Source.Camera && (this._mediaStreamTrack.enabled = false);
    });
  }
}
function setPublishingLayersForSender(a92, u2, c, l2, v2, S2) {
  return __awaiter(this, void 0, void 0, function* () {
    const g2 = yield l2.lock();
    v2.debug("setPublishingLayersForSender", Object.assign(Object.assign({}, S2), { sender: a92, qualities: c, senderEncodings: u2 }));
    try {
      const E2 = a92.getParameters(), { encodings: _ } = E2;
      if (!_)
        return;
      if (_.length !== u2.length) {
        v2.warn("cannot set publishing layers, encodings mismatch");
        return;
      }
      let k = false;
      _.forEach((M2, $) => {
        var J2;
        let V2 = (J2 = M2.rid) !== null && J2 !== void 0 ? J2 : "";
        V2 === "" && (V2 = "q");
        const q2 = videoQualityForRid(V2), G2 = c.find((H2) => H2.quality === q2);
        G2 && M2.active !== G2.enabled && (k = true, M2.active = G2.enabled, v2.debug("setting layer ".concat(G2.quality, " to ").concat(M2.active ? "enabled" : "disabled"), S2), isFireFox() && (G2.enabled ? (M2.scaleResolutionDownBy = u2[$].scaleResolutionDownBy, M2.maxBitrate = u2[$].maxBitrate, M2.maxFrameRate = u2[$].maxFrameRate) : (M2.scaleResolutionDownBy = 4, M2.maxBitrate = 10, M2.maxFrameRate = 2)));
      }), k && (E2.encodings = _, v2.debug("setting encodings", Object.assign(Object.assign({}, S2), { encodings: E2.encodings })), yield a92.setParameters(E2));
    } finally {
      g2();
    }
  });
}
function videoQualityForRid(a92) {
  switch (a92) {
    case "f":
      return VideoQuality.HIGH;
    case "h":
      return VideoQuality.MEDIUM;
    case "q":
      return VideoQuality.LOW;
    default:
      return VideoQuality.HIGH;
  }
}
function videoLayersFromEncodings(a92, u2, c, l2) {
  if (!c)
    return [new VideoLayer({ quality: VideoQuality.HIGH, width: a92, height: u2, bitrate: 0, ssrc: 0 })];
  if (l2) {
    const v2 = c[0].scalabilityMode, S2 = new ScalabilityMode(v2), g2 = [];
    for (let E2 = 0; E2 < S2.spatial; E2 += 1)
      g2.push(new VideoLayer({ quality: VideoQuality.HIGH - E2, width: Math.ceil(a92 / Math.pow(2, E2)), height: Math.ceil(u2 / Math.pow(2, E2)), bitrate: c[0].maxBitrate ? Math.ceil(c[0].maxBitrate / Math.pow(3, E2)) : 0, ssrc: 0 }));
    return g2;
  }
  return c.map((v2) => {
    var S2, g2, E2;
    const _ = (S2 = v2.scaleResolutionDownBy) !== null && S2 !== void 0 ? S2 : 1;
    let k = videoQualityForRid((g2 = v2.rid) !== null && g2 !== void 0 ? g2 : "");
    return new VideoLayer({ quality: k, width: Math.ceil(a92 / _), height: Math.ceil(u2 / _), bitrate: (E2 = v2.maxBitrate) !== null && E2 !== void 0 ? E2 : 0, ssrc: 0 });
  });
}
class RemoteTrack extends Track {
  constructor(u2, c, l2, v2, S2) {
    super(u2, l2, S2), this.sid = c, this.receiver = v2;
  }
  /** @internal */
  setMuted(u2) {
    this.isMuted !== u2 && (this.isMuted = u2, this._mediaStreamTrack.enabled = !u2, this.emit(u2 ? TrackEvent.Muted : TrackEvent.Unmuted, this));
  }
  /** @internal */
  setMediaStream(u2) {
    this.mediaStream = u2;
    const c = (l2) => {
      l2.track === this._mediaStreamTrack && (u2.removeEventListener("removetrack", c), this.receiver = void 0, this._currentBitrate = 0, this.emit(TrackEvent.Ended, this));
    };
    u2.addEventListener("removetrack", c);
  }
  start() {
    this.startMonitor(), super.enable();
  }
  stop() {
    this.stopMonitor(), super.disable();
  }
  /**
  * Gets the RTCStatsReport for the RemoteTrack's underlying RTCRtpReceiver
  * See https://developer.mozilla.org/en-US/docs/Web/API/RTCStatsReport
  *
  * @returns Promise<RTCStatsReport> | undefined
  */
  getRTCStatsReport() {
    var u2;
    return __awaiter(this, void 0, void 0, function* () {
      return !((u2 = this.receiver) === null || u2 === void 0) && u2.getStats ? yield this.receiver.getStats() : void 0;
    });
  }
  /* @internal */
  startMonitor() {
    this.monitorInterval || (this.monitorInterval = setInterval(() => this.monitorReceiver(), monitorFrequency));
  }
}
class RemoteAudioTrack extends RemoteTrack {
  constructor(u2, c, l2, v2, S2, g2) {
    super(u2, c, Track.Kind.Audio, l2, g2), this.monitorReceiver = () => __awaiter(this, void 0, void 0, function* () {
      if (!this.receiver) {
        this._currentBitrate = 0;
        return;
      }
      const E2 = yield this.getReceiverStats();
      E2 && this.prevStats && this.receiver && (this._currentBitrate = computeBitrate(E2, this.prevStats)), this.prevStats = E2;
    }), this.audioContext = v2, this.webAudioPluginNodes = [], S2 && (this.sinkId = S2.deviceId);
  }
  /**
  * sets the volume for all attached audio elements
  */
  setVolume(u2) {
    var c;
    for (const l2 of this.attachedElements)
      this.audioContext ? (c = this.gainNode) === null || c === void 0 || c.gain.setTargetAtTime(u2, 0, 0.1) : l2.volume = u2;
    isReactNative() && this._mediaStreamTrack._setVolume(u2), this.elementVolume = u2;
  }
  /**
  * gets the volume of attached audio elements (loudest)
  */
  getVolume() {
    if (this.elementVolume)
      return this.elementVolume;
    if (isReactNative())
      return 1;
    let u2 = 0;
    return this.attachedElements.forEach((c) => {
      c.volume > u2 && (u2 = c.volume);
    }), u2;
  }
  /**
  * calls setSinkId on all attached elements, if supported
  * @param deviceId audio output device
  */
  setSinkId(u2) {
    return __awaiter(this, void 0, void 0, function* () {
      this.sinkId = u2, yield Promise.all(this.attachedElements.map((c) => {
        if (supportsSetSinkId(c))
          return c.setSinkId(u2);
      }));
    });
  }
  attach(u2) {
    const c = this.attachedElements.length === 0;
    return u2 ? super.attach(u2) : u2 = super.attach(), this.sinkId && supportsSetSinkId(u2) && u2.setSinkId(this.sinkId), this.audioContext && c && (this.log.debug("using audio context mapping", this.logContext), this.connectWebAudio(this.audioContext, u2), u2.volume = 0, u2.muted = true), this.elementVolume && this.setVolume(this.elementVolume), u2;
  }
  detach(u2) {
    let c;
    return u2 ? (c = super.detach(u2), this.audioContext && (this.attachedElements.length > 0 ? this.connectWebAudio(this.audioContext, this.attachedElements[0]) : this.disconnectWebAudio())) : (c = super.detach(), this.disconnectWebAudio()), c;
  }
  /**
  * @internal
  * @experimental
  */
  setAudioContext(u2) {
    this.audioContext = u2, u2 && this.attachedElements.length > 0 ? this.connectWebAudio(u2, this.attachedElements[0]) : u2 || this.disconnectWebAudio();
  }
  /**
  * @internal
  * @experimental
  * @param {AudioNode[]} nodes - An array of WebAudio nodes. These nodes should not be connected to each other when passed, as the sdk will take care of connecting them in the order of the array.
  */
  setWebAudioPlugins(u2) {
    this.webAudioPluginNodes = u2, this.attachedElements.length > 0 && this.audioContext && this.connectWebAudio(this.audioContext, this.attachedElements[0]);
  }
  connectWebAudio(u2, c) {
    this.disconnectWebAudio(), this.sourceNode = u2.createMediaStreamSource(c.srcObject);
    let l2 = this.sourceNode;
    this.webAudioPluginNodes.forEach((v2) => {
      l2.connect(v2), l2 = v2;
    }), this.gainNode = u2.createGain(), l2.connect(this.gainNode), this.gainNode.connect(u2.destination), this.elementVolume && this.gainNode.gain.setTargetAtTime(this.elementVolume, 0, 0.1), u2.state !== "running" && u2.resume().then(() => {
      u2.state !== "running" && this.emit(TrackEvent.AudioPlaybackFailed, new Error("Audio Context couldn't be started automatically"));
    }).catch((v2) => {
      this.emit(TrackEvent.AudioPlaybackFailed, v2);
    });
  }
  disconnectWebAudio() {
    var u2, c;
    (u2 = this.gainNode) === null || u2 === void 0 || u2.disconnect(), (c = this.sourceNode) === null || c === void 0 || c.disconnect(), this.gainNode = void 0, this.sourceNode = void 0;
  }
  getReceiverStats() {
    return __awaiter(this, void 0, void 0, function* () {
      if (!this.receiver || !this.receiver.getStats)
        return;
      const u2 = yield this.receiver.getStats();
      let c;
      return u2.forEach((l2) => {
        l2.type === "inbound-rtp" && (c = { type: "audio", timestamp: l2.timestamp, jitter: l2.jitter, bytesReceived: l2.bytesReceived, concealedSamples: l2.concealedSamples, concealmentEvents: l2.concealmentEvents, silentConcealedSamples: l2.silentConcealedSamples, silentConcealmentEvents: l2.silentConcealmentEvents, totalAudioEnergy: l2.totalAudioEnergy, totalSamplesDuration: l2.totalSamplesDuration });
      }), c;
    });
  }
}
const REACTION_DELAY = 100;
class RemoteVideoTrack extends RemoteTrack {
  constructor(u2, c, l2, v2, S2) {
    super(u2, c, Track.Kind.Video, l2, S2), this.elementInfos = [], this.monitorReceiver = () => __awaiter(this, void 0, void 0, function* () {
      if (!this.receiver) {
        this._currentBitrate = 0;
        return;
      }
      const g2 = yield this.getReceiverStats();
      g2 && this.prevStats && this.receiver && (this._currentBitrate = computeBitrate(g2, this.prevStats)), this.prevStats = g2;
    }), this.debouncedHandleResize = r(() => {
      this.updateDimensions();
    }, REACTION_DELAY), this.adaptiveStreamSettings = v2;
  }
  get isAdaptiveStream() {
    return this.adaptiveStreamSettings !== void 0;
  }
  /**
  * Note: When using adaptiveStream, you need to use remoteVideoTrack.attach() to add the track to a HTMLVideoElement, otherwise your video tracks might never start
  */
  get mediaStreamTrack() {
    return this._mediaStreamTrack;
  }
  /** @internal */
  setMuted(u2) {
    super.setMuted(u2), this.attachedElements.forEach((c) => {
      u2 ? detachTrack(this._mediaStreamTrack, c) : attachToElement(this._mediaStreamTrack, c);
    });
  }
  attach(u2) {
    if (u2 ? super.attach(u2) : u2 = super.attach(), this.adaptiveStreamSettings && this.elementInfos.find((c) => c.element === u2) === void 0) {
      const c = new HTMLElementInfo(u2);
      this.observeElementInfo(c);
    }
    return u2;
  }
  /**
  * Observe an ElementInfo for changes when adaptive streaming.
  * @param elementInfo
  * @internal
  */
  observeElementInfo(u2) {
    this.adaptiveStreamSettings && this.elementInfos.find((c) => c === u2) === void 0 ? (u2.handleResize = () => {
      this.debouncedHandleResize();
    }, u2.handleVisibilityChanged = () => {
      this.updateVisibility();
    }, this.elementInfos.push(u2), u2.observe(), this.debouncedHandleResize(), this.updateVisibility()) : this.log.warn("visibility resize observer not triggered", this.logContext);
  }
  /**
  * Stop observing an ElementInfo for changes.
  * @param elementInfo
  * @internal
  */
  stopObservingElementInfo(u2) {
    if (!this.isAdaptiveStream) {
      this.log.warn("stopObservingElementInfo ignored", this.logContext);
      return;
    }
    const c = this.elementInfos.filter((l2) => l2 === u2);
    for (const l2 of c)
      l2.stopObserving();
    this.elementInfos = this.elementInfos.filter((l2) => l2 !== u2), this.updateVisibility(), this.debouncedHandleResize();
  }
  detach(u2) {
    let c = [];
    if (u2)
      return this.stopObservingElement(u2), super.detach(u2);
    c = super.detach();
    for (const l2 of c)
      this.stopObservingElement(l2);
    return c;
  }
  /** @internal */
  getDecoderImplementation() {
    var u2;
    return (u2 = this.prevStats) === null || u2 === void 0 ? void 0 : u2.decoderImplementation;
  }
  getReceiverStats() {
    return __awaiter(this, void 0, void 0, function* () {
      if (!this.receiver || !this.receiver.getStats)
        return;
      const u2 = yield this.receiver.getStats();
      let c, l2 = "", v2 = /* @__PURE__ */ new Map();
      return u2.forEach((S2) => {
        S2.type === "inbound-rtp" ? (l2 = S2.codecId, c = { type: "video", framesDecoded: S2.framesDecoded, framesDropped: S2.framesDropped, framesReceived: S2.framesReceived, packetsReceived: S2.packetsReceived, packetsLost: S2.packetsLost, frameWidth: S2.frameWidth, frameHeight: S2.frameHeight, pliCount: S2.pliCount, firCount: S2.firCount, nackCount: S2.nackCount, jitter: S2.jitter, timestamp: S2.timestamp, bytesReceived: S2.bytesReceived, decoderImplementation: S2.decoderImplementation }) : S2.type === "codec" && v2.set(S2.id, S2);
      }), c && l2 !== "" && v2.get(l2) && (c.mimeType = v2.get(l2).mimeType), c;
    });
  }
  stopObservingElement(u2) {
    const c = this.elementInfos.filter((l2) => l2.element === u2);
    for (const l2 of c)
      this.stopObservingElementInfo(l2);
  }
  handleAppVisibilityChanged() {
    const u2 = Object.create(null, { handleAppVisibilityChanged: { get: () => super.handleAppVisibilityChanged } });
    return __awaiter(this, void 0, void 0, function* () {
      yield u2.handleAppVisibilityChanged.call(this), this.isAdaptiveStream && this.updateVisibility();
    });
  }
  updateVisibility() {
    var u2, c;
    const l2 = this.elementInfos.reduce((E2, _) => Math.max(E2, _.visibilityChangedAt || 0), 0), v2 = !((c = (u2 = this.adaptiveStreamSettings) === null || u2 === void 0 ? void 0 : u2.pauseVideoInBackground) !== null && c !== void 0) || c ? this.isInBackground : false, S2 = this.elementInfos.some((E2) => E2.pictureInPicture), g2 = this.elementInfos.some((E2) => E2.visible) && !v2 || S2;
    if (this.lastVisible !== g2) {
      if (!g2 && Date.now() - l2 < REACTION_DELAY) {
        CriticalTimers.setTimeout(() => {
          this.updateVisibility();
        }, REACTION_DELAY);
        return;
      }
      this.lastVisible = g2, this.emit(TrackEvent.VisibilityChanged, g2, this);
    }
  }
  updateDimensions() {
    var u2, c;
    let l2 = 0, v2 = 0;
    const S2 = this.getPixelDensity();
    for (const g2 of this.elementInfos) {
      const E2 = g2.width() * S2, _ = g2.height() * S2;
      E2 + _ > l2 + v2 && (l2 = E2, v2 = _);
    }
    ((u2 = this.lastDimensions) === null || u2 === void 0 ? void 0 : u2.width) === l2 && ((c = this.lastDimensions) === null || c === void 0 ? void 0 : c.height) === v2 || (this.lastDimensions = { width: l2, height: v2 }, this.emit(TrackEvent.VideoDimensionsChanged, this.lastDimensions, this));
  }
  getPixelDensity() {
    var u2;
    const c = (u2 = this.adaptiveStreamSettings) === null || u2 === void 0 ? void 0 : u2.pixelDensity;
    return c === "screen" ? getDevicePixelRatio() : c || (getDevicePixelRatio() > 2 ? 2 : 1);
  }
}
class HTMLElementInfo {
  get visible() {
    return this.isPiP || this.isIntersecting;
  }
  get pictureInPicture() {
    return this.isPiP;
  }
  constructor(u2, c) {
    this.onVisibilityChanged = (l2) => {
      var v2;
      const { target: S2, isIntersecting: g2 } = l2;
      S2 === this.element && (this.isIntersecting = g2, this.visibilityChangedAt = Date.now(), (v2 = this.handleVisibilityChanged) === null || v2 === void 0 || v2.call(this));
    }, this.onEnterPiP = () => {
      var l2;
      this.isPiP = true, (l2 = this.handleVisibilityChanged) === null || l2 === void 0 || l2.call(this);
    }, this.onLeavePiP = () => {
      var l2;
      this.isPiP = false, (l2 = this.handleVisibilityChanged) === null || l2 === void 0 || l2.call(this);
    }, this.element = u2, this.isIntersecting = c ?? isElementInViewport(u2), this.isPiP = isWeb() && document.pictureInPictureElement === u2, this.visibilityChangedAt = 0;
  }
  width() {
    return this.element.clientWidth;
  }
  height() {
    return this.element.clientHeight;
  }
  observe() {
    this.isIntersecting = isElementInViewport(this.element), this.isPiP = document.pictureInPictureElement === this.element, this.element.handleResize = () => {
      var u2;
      (u2 = this.handleResize) === null || u2 === void 0 || u2.call(this);
    }, this.element.handleVisibilityChanged = this.onVisibilityChanged, getIntersectionObserver().observe(this.element), getResizeObserver().observe(this.element), this.element.addEventListener("enterpictureinpicture", this.onEnterPiP), this.element.addEventListener("leavepictureinpicture", this.onLeavePiP);
  }
  stopObserving() {
    var u2, c;
    (u2 = getIntersectionObserver()) === null || u2 === void 0 || u2.unobserve(this.element), (c = getResizeObserver()) === null || c === void 0 || c.unobserve(this.element), this.element.removeEventListener("enterpictureinpicture", this.onEnterPiP), this.element.removeEventListener("leavepictureinpicture", this.onLeavePiP);
  }
}
function isElementInViewport(a92) {
  let u2 = a92.offsetTop, c = a92.offsetLeft;
  const l2 = a92.offsetWidth, v2 = a92.offsetHeight, { hidden: S2 } = a92, { opacity: g2, display: E2 } = getComputedStyle(a92);
  for (; a92.offsetParent; )
    a92 = a92.offsetParent, u2 += a92.offsetTop, c += a92.offsetLeft;
  return u2 < window.pageYOffset + window.innerHeight && c < window.pageXOffset + window.innerWidth && u2 + v2 > window.pageYOffset && c + l2 > window.pageXOffset && !S2 && (g2 !== "" ? parseFloat(g2) > 0 : true) && E2 !== "none";
}
class TrackPublication extends eventsExports.EventEmitter {
  constructor(u2, c, l2, v2) {
    var S2;
    super(), this.metadataMuted = false, this.encryption = Encryption_Type.NONE, this.log = livekitLogger, this.handleMuted = () => {
      this.emit(TrackEvent.Muted);
    }, this.handleUnmuted = () => {
      this.emit(TrackEvent.Unmuted);
    }, this.log = getLogger((S2 = v2 == null ? void 0 : v2.loggerName) !== null && S2 !== void 0 ? S2 : LoggerNames.Publication), this.loggerContextCb = this.loggerContextCb, this.setMaxListeners(100), this.kind = u2, this.trackSid = c, this.trackName = l2, this.source = Track.Source.Unknown;
  }
  /** @internal */
  setTrack(u2) {
    this.track && (this.track.off(TrackEvent.Muted, this.handleMuted), this.track.off(TrackEvent.Unmuted, this.handleUnmuted)), this.track = u2, u2 && (u2.on(TrackEvent.Muted, this.handleMuted), u2.on(TrackEvent.Unmuted, this.handleUnmuted));
  }
  get logContext() {
    var u2;
    return Object.assign(Object.assign({}, (u2 = this.loggerContextCb) === null || u2 === void 0 ? void 0 : u2.call(this)), getLogContextFromTrack(this));
  }
  get isMuted() {
    return this.metadataMuted;
  }
  get isEnabled() {
    return true;
  }
  get isSubscribed() {
    return this.track !== void 0;
  }
  get isEncrypted() {
    return this.encryption !== Encryption_Type.NONE;
  }
  /**
  * an [AudioTrack] if this publication holds an audio track
  */
  get audioTrack() {
    if (this.track instanceof LocalAudioTrack || this.track instanceof RemoteAudioTrack)
      return this.track;
  }
  /**
  * an [VideoTrack] if this publication holds a video track
  */
  get videoTrack() {
    if (this.track instanceof LocalVideoTrack || this.track instanceof RemoteVideoTrack)
      return this.track;
  }
  /** @internal */
  updateInfo(u2) {
    this.trackSid = u2.sid, this.trackName = u2.name, this.source = Track.sourceFromProto(u2.source), this.mimeType = u2.mimeType, this.kind === Track.Kind.Video && u2.width > 0 && (this.dimensions = { width: u2.width, height: u2.height }, this.simulcasted = u2.simulcast), this.encryption = u2.encryption, this.trackInfo = u2, this.log.debug("update publication info", Object.assign(Object.assign({}, this.logContext), { info: u2 }));
  }
}
(function(a92) {
  (function(u2) {
    u2.Desired = "desired", u2.Subscribed = "subscribed", u2.Unsubscribed = "unsubscribed";
  })(a92.SubscriptionStatus || (a92.SubscriptionStatus = {})), function(u2) {
    u2.Allowed = "allowed", u2.NotAllowed = "not_allowed";
  }(a92.PermissionStatus || (a92.PermissionStatus = {}));
})(TrackPublication || (TrackPublication = {}));
class LocalTrackPublication extends TrackPublication {
  get isUpstreamPaused() {
    var u2;
    return (u2 = this.track) === null || u2 === void 0 ? void 0 : u2.isUpstreamPaused;
  }
  constructor(u2, c, l2, v2) {
    super(u2, c.sid, c.name, v2), this.track = void 0, this.handleTrackEnded = () => {
      this.emit(TrackEvent.Ended);
    }, this.updateInfo(c), this.setTrack(l2);
  }
  setTrack(u2) {
    this.track && this.track.off(TrackEvent.Ended, this.handleTrackEnded), super.setTrack(u2), u2 && u2.on(TrackEvent.Ended, this.handleTrackEnded);
  }
  get isMuted() {
    return this.track ? this.track.isMuted : super.isMuted;
  }
  get audioTrack() {
    return super.audioTrack;
  }
  get videoTrack() {
    return super.videoTrack;
  }
  /**
  * Mute the track associated with this publication
  */
  mute() {
    var u2;
    return __awaiter(this, void 0, void 0, function* () {
      return (u2 = this.track) === null || u2 === void 0 ? void 0 : u2.mute();
    });
  }
  /**
  * Unmute track associated with this publication
  */
  unmute() {
    var u2;
    return __awaiter(this, void 0, void 0, function* () {
      return (u2 = this.track) === null || u2 === void 0 ? void 0 : u2.unmute();
    });
  }
  /**
  * Pauses the media stream track associated with this publication from being sent to the server
  * and signals "muted" event to other participants
  * Useful if you want to pause the stream without pausing the local media stream track
  */
  pauseUpstream() {
    var u2;
    return __awaiter(this, void 0, void 0, function* () {
      yield (u2 = this.track) === null || u2 === void 0 ? void 0 : u2.pauseUpstream();
    });
  }
  /**
  * Resumes sending the media stream track associated with this publication to the server after a call to [[pauseUpstream()]]
  * and signals "unmuted" event to other participants (unless the track is explicitly muted)
  */
  resumeUpstream() {
    var u2;
    return __awaiter(this, void 0, void 0, function* () {
      yield (u2 = this.track) === null || u2 === void 0 ? void 0 : u2.resumeUpstream();
    });
  }
}
var ConnectionQuality;
(function(a92) {
  a92.Excellent = "excellent", a92.Good = "good", a92.Poor = "poor", a92.Lost = "lost", a92.Unknown = "unknown";
})(ConnectionQuality || (ConnectionQuality = {}));
function qualityFromProto(a92) {
  switch (a92) {
    case ConnectionQuality$1.EXCELLENT:
      return ConnectionQuality.Excellent;
    case ConnectionQuality$1.GOOD:
      return ConnectionQuality.Good;
    case ConnectionQuality$1.POOR:
      return ConnectionQuality.Poor;
    case ConnectionQuality$1.LOST:
      return ConnectionQuality.Lost;
    default:
      return ConnectionQuality.Unknown;
  }
}
let Participant$1 = class Participant2 extends eventsExports.EventEmitter {
  get logContext() {
    var u2, c;
    return Object.assign(Object.assign({}, (c = (u2 = this.loggerOptions) === null || u2 === void 0 ? void 0 : u2.loggerContextCb) === null || c === void 0 ? void 0 : c.call(u2)), { participantSid: this.sid, participantId: this.identity });
  }
  get isEncrypted() {
    return this.trackPublications.size > 0 && Array.from(this.trackPublications.values()).every((u2) => u2.isEncrypted);
  }
  get isAgent() {
    var u2, c;
    return (c = (u2 = this.permissions) === null || u2 === void 0 ? void 0 : u2.agent) !== null && c !== void 0 ? c : false;
  }
  /** @internal */
  constructor(u2, c, l2, v2, S2) {
    var g2;
    super(), this.audioLevel = 0, this.isSpeaking = false, this._connectionQuality = ConnectionQuality.Unknown, this.log = livekitLogger, this.log = getLogger((g2 = S2 == null ? void 0 : S2.loggerName) !== null && g2 !== void 0 ? g2 : LoggerNames.Participant), this.loggerOptions = S2, this.setMaxListeners(100), this.sid = u2, this.identity = c, this.name = l2, this.metadata = v2, this.audioTrackPublications = /* @__PURE__ */ new Map(), this.videoTrackPublications = /* @__PURE__ */ new Map(), this.trackPublications = /* @__PURE__ */ new Map();
  }
  getTrackPublications() {
    return Array.from(this.trackPublications.values());
  }
  /**
  * Finds the first track that matches the source filter, for example, getting
  * the user's camera track with getTrackBySource(Track.Source.Camera).
  */
  getTrackPublication(u2) {
    for (const [, c] of this.trackPublications)
      if (c.source === u2)
        return c;
  }
  /**
  * Finds the first track that matches the track's name.
  */
  getTrackPublicationByName(u2) {
    for (const [, c] of this.trackPublications)
      if (c.trackName === u2)
        return c;
  }
  get connectionQuality() {
    return this._connectionQuality;
  }
  get isCameraEnabled() {
    var u2;
    const c = this.getTrackPublication(Track.Source.Camera);
    return !(!((u2 = c == null ? void 0 : c.isMuted) !== null && u2 !== void 0) || u2);
  }
  get isMicrophoneEnabled() {
    var u2;
    const c = this.getTrackPublication(Track.Source.Microphone);
    return !(!((u2 = c == null ? void 0 : c.isMuted) !== null && u2 !== void 0) || u2);
  }
  get isScreenShareEnabled() {
    return !!this.getTrackPublication(Track.Source.ScreenShare);
  }
  get isLocal() {
    return false;
  }
  /** when participant joined the room */
  get joinedAt() {
    return this.participantInfo ? new Date(Number.parseInt(this.participantInfo.joinedAt.toString()) * 1e3) : /* @__PURE__ */ new Date();
  }
  /** @internal */
  updateInfo(u2) {
    return this.participantInfo && this.participantInfo.sid === u2.sid && this.participantInfo.version > u2.version ? false : (this.identity = u2.identity, this.sid = u2.sid, this._setName(u2.name), this._setMetadata(u2.metadata), u2.permission && this.setPermissions(u2.permission), this.participantInfo = u2, this.log.trace("update participant info", Object.assign(Object.assign({}, this.logContext), { info: u2 })), true);
  }
  /**
  * Updates metadata from server
  **/
  _setMetadata(u2) {
    const c = this.metadata !== u2, l2 = this.metadata;
    this.metadata = u2, c && this.emit(ParticipantEvent.ParticipantMetadataChanged, l2);
  }
  _setName(u2) {
    const c = this.name !== u2;
    this.name = u2, c && this.emit(ParticipantEvent.ParticipantNameChanged, u2);
  }
  /** @internal */
  setPermissions(u2) {
    var c, l2, v2, S2, g2;
    const E2 = this.permissions, _ = u2.canPublish !== ((c = this.permissions) === null || c === void 0 ? void 0 : c.canPublish) || u2.canSubscribe !== ((l2 = this.permissions) === null || l2 === void 0 ? void 0 : l2.canSubscribe) || u2.canPublishData !== ((v2 = this.permissions) === null || v2 === void 0 ? void 0 : v2.canPublishData) || u2.hidden !== ((S2 = this.permissions) === null || S2 === void 0 ? void 0 : S2.hidden) || u2.recorder !== ((g2 = this.permissions) === null || g2 === void 0 ? void 0 : g2.recorder) || u2.canPublishSources.length !== this.permissions.canPublishSources.length || u2.canPublishSources.some((k, L2) => {
      var M2;
      return k !== ((M2 = this.permissions) === null || M2 === void 0 ? void 0 : M2.canPublishSources[L2]);
    });
    return this.permissions = u2, _ && this.emit(ParticipantEvent.ParticipantPermissionsChanged, E2), _;
  }
  /** @internal */
  setIsSpeaking(u2) {
    u2 !== this.isSpeaking && (this.isSpeaking = u2, u2 && (this.lastSpokeAt = /* @__PURE__ */ new Date()), this.emit(ParticipantEvent.IsSpeakingChanged, u2));
  }
  /** @internal */
  setConnectionQuality(u2) {
    const c = this._connectionQuality;
    this._connectionQuality = qualityFromProto(u2), c !== this._connectionQuality && this.emit(ParticipantEvent.ConnectionQualityChanged, this._connectionQuality);
  }
  /**
  * @internal
  */
  setAudioContext(u2) {
    this.audioContext = u2, this.audioTrackPublications.forEach((c) => (c.track instanceof RemoteAudioTrack || c.track instanceof LocalAudioTrack) && c.track.setAudioContext(u2));
  }
  addTrackPublication(u2) {
    u2.on(TrackEvent.Muted, () => {
      this.emit(ParticipantEvent.TrackMuted, u2);
    }), u2.on(TrackEvent.Unmuted, () => {
      this.emit(ParticipantEvent.TrackUnmuted, u2);
    });
    const c = u2;
    switch (c.track && (c.track.sid = u2.trackSid), this.trackPublications.set(u2.trackSid, u2), u2.kind) {
      case Track.Kind.Audio:
        this.audioTrackPublications.set(u2.trackSid, u2);
        break;
      case Track.Kind.Video:
        this.videoTrackPublications.set(u2.trackSid, u2);
        break;
    }
  }
};
function trackPermissionToProto(a92) {
  var u2, c, l2;
  if (!a92.participantSid && !a92.participantIdentity)
    throw new Error("Invalid track permission, must provide at least one of participantIdentity and participantSid");
  return new TrackPermission({ participantIdentity: (u2 = a92.participantIdentity) !== null && u2 !== void 0 ? u2 : "", participantSid: (c = a92.participantSid) !== null && c !== void 0 ? c : "", allTracks: (l2 = a92.allowAll) !== null && l2 !== void 0 ? l2 : false, trackSids: a92.allowedTrackSids || [] });
}
class LocalParticipant extends Participant$1 {
  /** @internal */
  constructor(u2, c, l2, v2) {
    super(u2, c, void 0, void 0, { loggerName: v2.loggerName, loggerContextCb: () => this.engine.logContext }), this.pendingPublishing = /* @__PURE__ */ new Set(), this.pendingPublishPromises = /* @__PURE__ */ new Map(), this.participantTrackPermissions = [], this.allParticipantsAllowedToSubscribe = true, this.encryptionType = Encryption_Type.NONE, this.handleReconnecting = () => {
      this.reconnectFuture || (this.reconnectFuture = new Future());
    }, this.handleReconnected = () => {
      var S2, g2;
      (g2 = (S2 = this.reconnectFuture) === null || S2 === void 0 ? void 0 : S2.resolve) === null || g2 === void 0 || g2.call(S2), this.reconnectFuture = void 0, this.updateTrackSubscriptionPermissions();
    }, this.handleDisconnected = () => {
      var S2, g2;
      this.reconnectFuture && (this.reconnectFuture.promise.catch((E2) => this.log.warn(E2.message, this.logContext)), (g2 = (S2 = this.reconnectFuture) === null || S2 === void 0 ? void 0 : S2.reject) === null || g2 === void 0 || g2.call(S2, "Got disconnected during reconnection attempt"), this.reconnectFuture = void 0);
    }, this.updateTrackSubscriptionPermissions = () => {
      this.log.debug("updating track subscription permissions", Object.assign(Object.assign({}, this.logContext), { allParticipantsAllowed: this.allParticipantsAllowedToSubscribe, participantTrackPermissions: this.participantTrackPermissions })), this.engine.client.sendUpdateSubscriptionPermissions(this.allParticipantsAllowedToSubscribe, this.participantTrackPermissions.map((S2) => trackPermissionToProto(S2)));
    }, this.onTrackUnmuted = (S2) => {
      this.onTrackMuted(S2, S2.isUpstreamPaused);
    }, this.onTrackMuted = (S2, g2) => {
      if (g2 === void 0 && (g2 = true), !S2.sid) {
        this.log.error("could not update mute status for unpublished track", Object.assign(Object.assign({}, this.logContext), getLogContextFromTrack(S2)));
        return;
      }
      this.engine.updateMuteStatus(S2.sid, g2);
    }, this.onTrackUpstreamPaused = (S2) => {
      this.log.debug("upstream paused", Object.assign(Object.assign({}, this.logContext), getLogContextFromTrack(S2))), this.onTrackMuted(S2, true);
    }, this.onTrackUpstreamResumed = (S2) => {
      this.log.debug("upstream resumed", Object.assign(Object.assign({}, this.logContext), getLogContextFromTrack(S2))), this.onTrackMuted(S2, S2.isMuted);
    }, this.handleSubscribedQualityUpdate = (S2) => __awaiter(this, void 0, void 0, function* () {
      var g2, E2, _, k, L2, M2;
      if (!(!((L2 = this.roomOptions) === null || L2 === void 0) && L2.dynacast))
        return;
      const $ = this.videoTrackPublications.get(S2.trackSid);
      if (!$) {
        this.log.warn("received subscribed quality update for unknown track", Object.assign(Object.assign({}, this.logContext), { trackSid: S2.trackSid }));
        return;
      }
      if (S2.subscribedCodecs.length > 0) {
        if (!$.videoTrack)
          return;
        const G2 = yield $.videoTrack.setPublishingCodecs(S2.subscribedCodecs);
        try {
          for (var J2 = true, V2 = __asyncValues(G2), q2; q2 = yield V2.next(), g2 = q2.done, !g2; J2 = true) {
            k = q2.value, J2 = false;
            const H2 = k;
            isBackupCodec(H2) && (this.log.debug("publish ".concat(H2, " for ").concat($.videoTrack.sid), Object.assign(Object.assign({}, this.logContext), getLogContextFromTrack($))), yield this.publishAdditionalCodecForTrack($.videoTrack, H2, $.options));
          }
        } catch (H2) {
          E2 = { error: H2 };
        } finally {
          try {
            !J2 && !g2 && (_ = V2.return) && (yield _.call(V2));
          } finally {
            if (E2)
              throw E2.error;
          }
        }
      } else
        S2.subscribedQualities.length > 0 && (yield (M2 = $.videoTrack) === null || M2 === void 0 ? void 0 : M2.setPublishingLayers(S2.subscribedQualities));
    }), this.handleLocalTrackUnpublished = (S2) => {
      const g2 = this.trackPublications.get(S2.trackSid);
      if (!g2) {
        this.log.warn("received unpublished event for unknown track", Object.assign(Object.assign({}, this.logContext), { trackSid: S2.trackSid }));
        return;
      }
      this.unpublishTrack(g2.track);
    }, this.handleTrackEnded = (S2) => __awaiter(this, void 0, void 0, function* () {
      if (S2.source === Track.Source.ScreenShare || S2.source === Track.Source.ScreenShareAudio)
        this.log.debug("unpublishing local track due to TrackEnded", Object.assign(Object.assign({}, this.logContext), getLogContextFromTrack(S2))), this.unpublishTrack(S2);
      else if (S2.isUserProvided)
        yield S2.mute();
      else if (S2 instanceof LocalAudioTrack || S2 instanceof LocalVideoTrack)
        try {
          if (isWeb())
            try {
              const g2 = yield navigator == null ? void 0 : navigator.permissions.query({
                // the permission query for camera and microphone currently not supported in Safari and Firefox
                // @ts-ignore
                name: S2.source === Track.Source.Camera ? "camera" : "microphone"
              });
              if (g2 && g2.state === "denied")
                throw this.log.warn("user has revoked access to ".concat(S2.source), Object.assign(Object.assign({}, this.logContext), getLogContextFromTrack(S2))), g2.onchange = () => {
                  g2.state !== "denied" && (S2.isMuted || S2.restartTrack(), g2.onchange = null);
                }, new Error("GetUserMedia Permission denied");
            } catch {
            }
          S2.isMuted || (this.log.debug("track ended, attempting to use a different device", Object.assign(Object.assign({}, this.logContext), getLogContextFromTrack(S2))), yield S2.restartTrack());
        } catch {
          this.log.warn("could not restart track, muting instead", Object.assign(Object.assign({}, this.logContext), getLogContextFromTrack(S2))), yield S2.mute();
        }
    }), this.audioTrackPublications = /* @__PURE__ */ new Map(), this.videoTrackPublications = /* @__PURE__ */ new Map(), this.trackPublications = /* @__PURE__ */ new Map(), this.engine = l2, this.roomOptions = v2, this.setupEngine(l2), this.activeDeviceMap = /* @__PURE__ */ new Map();
  }
  get lastCameraError() {
    return this.cameraError;
  }
  get lastMicrophoneError() {
    return this.microphoneError;
  }
  get isE2EEEnabled() {
    return this.encryptionType !== Encryption_Type.NONE;
  }
  getTrackPublication(u2) {
    const c = super.getTrackPublication(u2);
    if (c)
      return c;
  }
  getTrackPublicationByName(u2) {
    const c = super.getTrackPublicationByName(u2);
    if (c)
      return c;
  }
  /**
  * @internal
  */
  setupEngine(u2) {
    this.engine = u2, this.engine.on(EngineEvent.RemoteMute, (c, l2) => {
      const v2 = this.trackPublications.get(c);
      !v2 || !v2.track || (l2 ? v2.mute() : v2.unmute());
    }), this.engine.on(EngineEvent.Connected, this.handleReconnected).on(EngineEvent.SignalRestarted, this.handleReconnected).on(EngineEvent.SignalResumed, this.handleReconnected).on(EngineEvent.Restarting, this.handleReconnecting).on(EngineEvent.Resuming, this.handleReconnecting).on(EngineEvent.LocalTrackUnpublished, this.handleLocalTrackUnpublished).on(EngineEvent.SubscribedQualityUpdate, this.handleSubscribedQualityUpdate).on(EngineEvent.Disconnected, this.handleDisconnected);
  }
  /**
  * Sets and updates the metadata of the local participant.
  * The change does not take immediate effect.
  * If successful, a `ParticipantEvent.MetadataChanged` event will be emitted on the local participant.
  * Note: this requires `canUpdateOwnMetadata` permission.
  * @param metadata
  */
  setMetadata(u2) {
    var c;
    this.engine.client.sendUpdateLocalMetadata(u2, (c = this.name) !== null && c !== void 0 ? c : "");
  }
  /**
  * Sets and updates the name of the local participant.
  * The change does not take immediate effect.
  * If successful, a `ParticipantEvent.ParticipantNameChanged` event will be emitted on the local participant.
  * Note: this requires `canUpdateOwnMetadata` permission.
  * @param metadata
  */
  setName(u2) {
    var c;
    this.engine.client.sendUpdateLocalMetadata((c = this.metadata) !== null && c !== void 0 ? c : "", u2);
  }
  /**
  * Enable or disable a participant's camera track.
  *
  * If a track has already published, it'll mute or unmute the track.
  * Resolves with a `LocalTrackPublication` instance if successful and `undefined` otherwise
  */
  setCameraEnabled(u2, c, l2) {
    return this.setTrackEnabled(Track.Source.Camera, u2, c, l2);
  }
  /**
  * Enable or disable a participant's microphone track.
  *
  * If a track has already published, it'll mute or unmute the track.
  * Resolves with a `LocalTrackPublication` instance if successful and `undefined` otherwise
  */
  setMicrophoneEnabled(u2, c, l2) {
    return this.setTrackEnabled(Track.Source.Microphone, u2, c, l2);
  }
  /**
  * Start or stop sharing a participant's screen
  * Resolves with a `LocalTrackPublication` instance if successful and `undefined` otherwise
  */
  setScreenShareEnabled(u2, c, l2) {
    return this.setTrackEnabled(Track.Source.ScreenShare, u2, c, l2);
  }
  /** @internal */
  setPermissions(u2) {
    const c = this.permissions, l2 = super.setPermissions(u2);
    return l2 && c && this.emit(ParticipantEvent.ParticipantPermissionsChanged, c), l2;
  }
  /** @internal */
  setE2EEEnabled(u2) {
    return __awaiter(this, void 0, void 0, function* () {
      this.encryptionType = u2 ? Encryption_Type.GCM : Encryption_Type.NONE, yield this.republishAllTracks(void 0, false);
    });
  }
  setTrackEnabled(u2, c, l2, v2) {
    var S2, g2;
    return __awaiter(this, void 0, void 0, function* () {
      this.log.debug("setTrackEnabled", Object.assign(Object.assign({}, this.logContext), { source: u2, enabled: c }));
      let E2 = this.getTrackPublication(u2);
      if (c) {
        if (E2)
          yield E2.unmute();
        else {
          let _;
          if (this.pendingPublishing.has(u2)) {
            this.log.info("skipping duplicate published source", Object.assign(Object.assign({}, this.logContext), { source: u2 }));
            return;
          }
          this.pendingPublishing.add(u2);
          try {
            switch (u2) {
              case Track.Source.Camera:
                _ = yield this.createTracks({ video: (S2 = l2) !== null && S2 !== void 0 ? S2 : true });
                break;
              case Track.Source.Microphone:
                _ = yield this.createTracks({ audio: (g2 = l2) !== null && g2 !== void 0 ? g2 : true });
                break;
              case Track.Source.ScreenShare:
                _ = yield this.createScreenTracks(Object.assign({}, l2));
                break;
              default:
                throw new TrackInvalidError(u2);
            }
            const k = [];
            for (const M2 of _)
              this.log.info("publishing track", Object.assign(Object.assign({}, this.logContext), getLogContextFromTrack(M2))), k.push(this.publishTrack(M2, v2));
            [E2] = yield Promise.all(k);
          } catch (k) {
            throw _ == null || _.forEach((L2) => {
              L2.stop();
            }), k instanceof Error && !(k instanceof TrackInvalidError) && this.emit(ParticipantEvent.MediaDevicesError, k), k;
          } finally {
            this.pendingPublishing.delete(u2);
          }
        }
      } else if (E2 && E2.track)
        if (u2 === Track.Source.ScreenShare) {
          E2 = yield this.unpublishTrack(E2.track);
          const _ = this.getTrackPublication(Track.Source.ScreenShareAudio);
          _ && _.track && this.unpublishTrack(_.track);
        } else
          yield E2.mute();
      return E2;
    });
  }
  /**
  * Publish both camera and microphone at the same time. This is useful for
  * displaying a single Permission Dialog box to the end user.
  */
  enableCameraAndMicrophone() {
    return __awaiter(this, void 0, void 0, function* () {
      if (!(this.pendingPublishing.has(Track.Source.Camera) || this.pendingPublishing.has(Track.Source.Microphone))) {
        this.pendingPublishing.add(Track.Source.Camera), this.pendingPublishing.add(Track.Source.Microphone);
        try {
          const u2 = yield this.createTracks({ audio: true, video: true });
          yield Promise.all(u2.map((c) => this.publishTrack(c)));
        } finally {
          this.pendingPublishing.delete(Track.Source.Camera), this.pendingPublishing.delete(Track.Source.Microphone);
        }
      }
    });
  }
  /**
  * Create local camera and/or microphone tracks
  * @param options
  * @returns
  */
  createTracks(u2) {
    var c, l2;
    return __awaiter(this, void 0, void 0, function* () {
      const v2 = mergeDefaultOptions(u2, (c = this.roomOptions) === null || c === void 0 ? void 0 : c.audioCaptureDefaults, (l2 = this.roomOptions) === null || l2 === void 0 ? void 0 : l2.videoCaptureDefaults), S2 = constraintsForOptions(v2);
      let g2;
      try {
        g2 = yield navigator.mediaDevices.getUserMedia(S2);
      } catch (E2) {
        throw E2 instanceof Error && (S2.audio && (this.microphoneError = E2), S2.video && (this.cameraError = E2)), E2;
      }
      return S2.audio && (this.microphoneError = void 0, this.emit(ParticipantEvent.AudioStreamAcquired)), S2.video && (this.cameraError = void 0), g2.getTracks().map((E2) => {
        const _ = E2.kind === "audio";
        _ ? u2.audio : u2.video;
        let k;
        const L2 = _ ? S2.audio : S2.video;
        typeof L2 != "boolean" && (k = L2);
        const M2 = mediaTrackToLocalTrack(E2, k, { loggerName: this.roomOptions.loggerName, loggerContextCb: () => this.logContext });
        return M2.kind === Track.Kind.Video ? M2.source = Track.Source.Camera : M2.kind === Track.Kind.Audio && (M2.source = Track.Source.Microphone), M2.mediaStream = g2, M2;
      });
    });
  }
  /**
  * Creates a screen capture tracks with getDisplayMedia().
  * A LocalVideoTrack is always created and returned.
  * If { audio: true }, and the browser supports audio capture, a LocalAudioTrack is also created.
  */
  createScreenTracks(u2) {
    return __awaiter(this, void 0, void 0, function* () {
      if (u2 === void 0 && (u2 = {}), navigator.mediaDevices.getDisplayMedia === void 0)
        throw new DeviceUnsupportedError("getDisplayMedia not supported");
      u2.resolution === void 0 && !isSafari17() && (u2.resolution = ScreenSharePresets.h1080fps30.resolution);
      const c = screenCaptureToDisplayMediaStreamOptions(u2), l2 = yield navigator.mediaDevices.getDisplayMedia(c), v2 = l2.getVideoTracks();
      if (v2.length === 0)
        throw new TrackInvalidError("no video track found");
      const S2 = new LocalVideoTrack(v2[0], void 0, false, { loggerName: this.roomOptions.loggerName, loggerContextCb: () => this.logContext });
      S2.source = Track.Source.ScreenShare, u2.contentHint && (S2.mediaStreamTrack.contentHint = u2.contentHint);
      const g2 = [S2];
      if (l2.getAudioTracks().length > 0) {
        this.emit(ParticipantEvent.AudioStreamAcquired);
        const E2 = new LocalAudioTrack(l2.getAudioTracks()[0], void 0, false, this.audioContext, { loggerName: this.roomOptions.loggerName, loggerContextCb: () => this.logContext });
        E2.source = Track.Source.ScreenShareAudio, g2.push(E2);
      }
      return g2;
    });
  }
  /**
  * Publish a new track to the room
  * @param track
  * @param options
  */
  publishTrack(u2, c) {
    var l2, v2, S2, g2;
    return __awaiter(this, void 0, void 0, function* () {
      yield (l2 = this.reconnectFuture) === null || l2 === void 0 ? void 0 : l2.promise, u2 instanceof LocalTrack && this.pendingPublishPromises.has(u2) && (yield this.pendingPublishPromises.get(u2));
      let E2;
      if (u2 instanceof MediaStreamTrack)
        E2 = u2.getConstraints();
      else {
        E2 = u2.constraints;
        let J2;
        switch (u2.source) {
          case Track.Source.Microphone:
            J2 = "audioinput";
            break;
          case Track.Source.Camera:
            J2 = "videoinput";
        }
        J2 && this.activeDeviceMap.has(J2) && (E2 = Object.assign(Object.assign({}, E2), { deviceId: this.activeDeviceMap.get(J2) }));
      }
      if (u2 instanceof MediaStreamTrack)
        switch (u2.kind) {
          case "audio":
            u2 = new LocalAudioTrack(u2, E2, true, this.audioContext, { loggerName: this.roomOptions.loggerName, loggerContextCb: () => this.logContext });
            break;
          case "video":
            u2 = new LocalVideoTrack(u2, E2, true, { loggerName: this.roomOptions.loggerName, loggerContextCb: () => this.logContext });
            break;
          default:
            throw new TrackInvalidError("unsupported MediaStreamTrack kind ".concat(u2.kind));
        }
      else
        u2.updateLoggerOptions({ loggerName: this.roomOptions.loggerName, loggerContextCb: () => this.logContext });
      u2 instanceof LocalAudioTrack && u2.setAudioContext(this.audioContext);
      let _;
      if (this.trackPublications.forEach((J2) => {
        J2.track && J2.track === u2 && (_ = J2);
      }), _)
        return this.log.warn("track has already been published, skipping", Object.assign(Object.assign({}, this.logContext), getLogContextFromTrack(_))), _;
      const k = "channelCount" in u2.mediaStreamTrack.getSettings() && // @ts-ignore `channelCount` on getSettings() is currently only available for Safari, but is generally the best way to determine a stereo track https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/channelCount
      u2.mediaStreamTrack.getSettings().channelCount === 2 || u2.mediaStreamTrack.getConstraints().channelCount === 2, L2 = (v2 = c == null ? void 0 : c.forceStereo) !== null && v2 !== void 0 ? v2 : k;
      L2 && (c || (c = {}), c.dtx === void 0 && this.log.info("Opus DTX will be disabled for stereo tracks by default. Enable them explicitly to make it work.", Object.assign(Object.assign({}, this.logContext), getLogContextFromTrack(u2))), c.red === void 0 && this.log.info("Opus RED will be disabled for stereo tracks by default. Enable them explicitly to make it work."), (S2 = c.dtx) !== null && S2 !== void 0 || (c.dtx = false), (g2 = c.red) !== null && g2 !== void 0 || (c.red = false));
      const M2 = Object.assign(Object.assign({}, this.roomOptions.publishDefaults), c);
      isSafari() && this.roomOptions.e2ee && (this.log.info("End-to-end encryption is set up, simulcast publishing will be disabled on Safari", Object.assign({}, this.logContext)), M2.simulcast = false), M2.source && (u2.source = M2.source);
      const $ = this.publish(u2, M2, L2);
      this.pendingPublishPromises.set(u2, $);
      try {
        return yield $;
      } catch (J2) {
        throw J2;
      } finally {
        this.pendingPublishPromises.delete(u2);
      }
    });
  }
  publish(u2, c, l2) {
    var v2, S2, g2, E2, _, k, L2, M2, $, J2, V2, q2;
    return __awaiter(this, void 0, void 0, function* () {
      Array.from(this.trackPublications.values()).find((oe2) => u2 instanceof LocalTrack && oe2.source === u2.source) && u2.source !== Track.Source.Unknown && this.log.info("publishing a second track with the same source: ".concat(u2.source), Object.assign(Object.assign({}, this.logContext), getLogContextFromTrack(u2))), c.stopMicTrackOnMute && u2 instanceof LocalAudioTrack && (u2.stopOnMute = true), u2.source === Track.Source.ScreenShare && isFireFox() && (c.simulcast = false), c.videoCodec === "av1" && !supportsAV1() && (c.videoCodec = void 0), c.videoCodec === "vp9" && !supportsVP9() && (c.videoCodec = void 0), c.videoCodec === void 0 && (c.videoCodec = defaultVideoCodec);
      const H2 = c.videoCodec;
      u2.on(TrackEvent.Muted, this.onTrackMuted), u2.on(TrackEvent.Unmuted, this.onTrackUnmuted), u2.on(TrackEvent.Ended, this.handleTrackEnded), u2.on(TrackEvent.UpstreamPaused, this.onTrackUpstreamPaused), u2.on(TrackEvent.UpstreamResumed, this.onTrackUpstreamResumed);
      const B2 = new AddTrackRequest({
        // get local track id for use during publishing
        cid: u2.mediaStreamTrack.id,
        name: c.name,
        type: Track.kindToProto(u2.kind),
        muted: u2.isMuted,
        source: Track.sourceToProto(u2.source),
        disableDtx: !(!((v2 = c.dtx) !== null && v2 !== void 0) || v2),
        encryption: this.encryptionType,
        stereo: l2,
        disableRed: this.isE2EEEnabled || !(!((S2 = c.red) !== null && S2 !== void 0) || S2),
        stream: c == null ? void 0 : c.stream
      });
      let Y2;
      if (u2.kind === Track.Kind.Video) {
        let oe2 = { width: 0, height: 0 };
        try {
          oe2 = yield u2.waitForDimensions();
        } catch {
          const A2 = (E2 = (g2 = this.roomOptions.videoCaptureDefaults) === null || g2 === void 0 ? void 0 : g2.resolution) !== null && E2 !== void 0 ? E2 : VideoPresets.h720.resolution;
          oe2 = { width: A2.width, height: A2.height }, this.log.error("could not determine track dimensions, using defaults", Object.assign(Object.assign(Object.assign({}, this.logContext), getLogContextFromTrack(u2)), { dims: oe2 }));
        }
        B2.width = oe2.width, B2.height = oe2.height, u2 instanceof LocalVideoTrack && (isSVCCodec(H2) && (u2.source === Track.Source.ScreenShare && H2 === "vp9" && (c.scalabilityMode = "L1T3"), c.scalabilityMode = (_ = c.scalabilityMode) !== null && _ !== void 0 ? _ : "L3T3_KEY"), B2.simulcastCodecs = [new SimulcastCodec({ codec: H2, cid: u2.mediaStreamTrack.id })], c.backupCodec === true && (c.backupCodec = { codec: defaultVideoCodec }), c.backupCodec && H2 !== c.backupCodec.codec && // TODO remove this once e2ee is supported for backup codecs
        B2.encryption === Encryption_Type.NONE && (this.roomOptions.dynacast || (this.roomOptions.dynacast = true), B2.simulcastCodecs.push(new SimulcastCodec({ codec: c.backupCodec.codec, cid: "" })))), Y2 = computeVideoEncodings(u2.source === Track.Source.ScreenShare, B2.width, B2.height, c), B2.layers = videoLayersFromEncodings(B2.width, B2.height, Y2, isSVCCodec(c.videoCodec));
      } else
        u2.kind === Track.Kind.Audio && (Y2 = [{ maxBitrate: (k = c.audioPreset) === null || k === void 0 ? void 0 : k.maxBitrate, priority: (M2 = (L2 = c.audioPreset) === null || L2 === void 0 ? void 0 : L2.priority) !== null && M2 !== void 0 ? M2 : "high", networkPriority: (J2 = ($ = c.audioPreset) === null || $ === void 0 ? void 0 : $.priority) !== null && J2 !== void 0 ? J2 : "high" }]);
      if (!this.engine || this.engine.isClosed)
        throw new UnexpectedConnectionState("cannot publish track when not connected");
      const ne2 = yield this.engine.addTrack(B2);
      let Z2;
      if (ne2.codecs.forEach((oe2) => {
        Z2 === void 0 && (Z2 = oe2.mimeType);
      }), Z2 && u2.kind === Track.Kind.Video) {
        const oe2 = mimeTypeToVideoCodecString(Z2);
        oe2 !== H2 && (this.log.debug("falling back to server selected codec", Object.assign(Object.assign(Object.assign({}, this.logContext), getLogContextFromTrack(u2)), { codec: oe2 })), c.videoCodec = oe2, Y2 = computeVideoEncodings(u2.source === Track.Source.ScreenShare, B2.width, B2.height, c));
      }
      const re2 = new LocalTrackPublication(u2.kind, ne2, u2, { loggerName: this.roomOptions.loggerName, loggerContextCb: () => this.logContext });
      if (re2.options = c, u2.sid = ne2.sid, !this.engine.pcManager)
        throw new UnexpectedConnectionState("pcManager is not ready");
      if (this.log.debug("publishing ".concat(u2.kind, " with encodings"), Object.assign(Object.assign({}, this.logContext), { encodings: Y2, trackInfo: ne2 })), u2.sender = yield this.engine.createSender(u2, c, Y2), Y2)
        if (isFireFox() && u2.kind === Track.Kind.Audio) {
          let oe2;
          for (const de2 of this.engine.pcManager.publisher.getTransceivers())
            if (de2.sender === u2.sender) {
              oe2 = de2;
              break;
            }
          oe2 && this.engine.pcManager.publisher.setTrackCodecBitrate({ transceiver: oe2, codec: "opus", maxbr: !((V2 = Y2[0]) === null || V2 === void 0) && V2.maxBitrate ? Y2[0].maxBitrate / 1e3 : 0 });
        } else
          u2.codec && isSVCCodec(u2.codec) && !((q2 = Y2[0]) === null || q2 === void 0) && q2.maxBitrate && this.engine.pcManager.publisher.setTrackCodecBitrate({ cid: B2.cid, codec: u2.codec, maxbr: Y2[0].maxBitrate / 1e3 });
      return yield this.engine.negotiate(), u2 instanceof LocalVideoTrack ? u2.startMonitor(this.engine.client) : u2 instanceof LocalAudioTrack && u2.startMonitor(), this.addTrackPublication(re2), this.emit(ParticipantEvent.LocalTrackPublished, re2), re2;
    });
  }
  get isLocal() {
    return true;
  }
  /** @internal
  * publish additional codec to existing track
  */
  publishAdditionalCodecForTrack(u2, c, l2) {
    var v2;
    return __awaiter(this, void 0, void 0, function* () {
      if (this.encryptionType !== Encryption_Type.NONE)
        return;
      let S2;
      if (this.trackPublications.forEach((M2) => {
        M2.track && M2.track === u2 && (S2 = M2);
      }), !S2)
        throw new TrackInvalidError("track is not published");
      if (!(u2 instanceof LocalVideoTrack))
        throw new TrackInvalidError("track is not a video track");
      const g2 = Object.assign(Object.assign({}, (v2 = this.roomOptions) === null || v2 === void 0 ? void 0 : v2.publishDefaults), l2), E2 = computeTrackBackupEncodings(u2, c, g2);
      if (!E2) {
        this.log.info("backup codec has been disabled, ignoring request to add additional codec for track", Object.assign(Object.assign({}, this.logContext), getLogContextFromTrack(u2)));
        return;
      }
      const _ = u2.addSimulcastTrack(c, E2);
      if (!_)
        return;
      const k = new AddTrackRequest({ cid: _.mediaStreamTrack.id, type: Track.kindToProto(u2.kind), muted: u2.isMuted, source: Track.sourceToProto(u2.source), sid: u2.sid, simulcastCodecs: [{ codec: g2.videoCodec, cid: _.mediaStreamTrack.id }] });
      if (k.layers = videoLayersFromEncodings(k.width, k.height, E2), !this.engine || this.engine.isClosed)
        throw new UnexpectedConnectionState("cannot publish track when not connected");
      const L2 = yield this.engine.addTrack(k);
      yield this.engine.createSimulcastSender(u2, _, g2, E2), yield this.engine.negotiate(), this.log.debug("published ".concat(c, " for track ").concat(u2.sid), Object.assign(Object.assign({}, this.logContext), { encodings: E2, trackInfo: L2 }));
    });
  }
  unpublishTrack(u2, c) {
    var l2, v2;
    return __awaiter(this, void 0, void 0, function* () {
      const S2 = this.getPublicationForTrack(u2), g2 = S2 ? getLogContextFromTrack(S2) : void 0;
      if (this.log.debug("unpublishing track", Object.assign(Object.assign({}, this.logContext), g2)), !S2 || !S2.track) {
        this.log.warn("track was not unpublished because no publication was found", Object.assign(Object.assign({}, this.logContext), g2));
        return;
      }
      u2 = S2.track, u2.off(TrackEvent.Muted, this.onTrackMuted), u2.off(TrackEvent.Unmuted, this.onTrackUnmuted), u2.off(TrackEvent.Ended, this.handleTrackEnded), u2.off(TrackEvent.UpstreamPaused, this.onTrackUpstreamPaused), u2.off(TrackEvent.UpstreamResumed, this.onTrackUpstreamResumed), c === void 0 && (c = (v2 = (l2 = this.roomOptions) === null || l2 === void 0 ? void 0 : l2.stopLocalTrackOnUnpublish) !== null && v2 !== void 0 ? v2 : true), c && u2.stop();
      let E2 = false;
      const _ = u2.sender;
      if (u2.sender = void 0, this.engine.pcManager && this.engine.pcManager.currentState < PCTransportState.FAILED && _)
        try {
          for (const k of this.engine.pcManager.publisher.getTransceivers())
            k.sender === _ && (k.direction = "inactive", E2 = true);
          if (this.engine.removeTrack(_) && (E2 = true), u2 instanceof LocalVideoTrack) {
            for (const [, k] of u2.simulcastCodecs)
              k.sender && (this.engine.removeTrack(k.sender) && (E2 = true), k.sender = void 0);
            u2.simulcastCodecs.clear();
          }
        } catch (k) {
          this.log.warn("failed to unpublish track", Object.assign(Object.assign(Object.assign({}, this.logContext), g2), { error: k }));
        }
      switch (this.trackPublications.delete(S2.trackSid), S2.kind) {
        case Track.Kind.Audio:
          this.audioTrackPublications.delete(S2.trackSid);
          break;
        case Track.Kind.Video:
          this.videoTrackPublications.delete(S2.trackSid);
          break;
      }
      return this.emit(ParticipantEvent.LocalTrackUnpublished, S2), S2.setTrack(void 0), E2 && (yield this.engine.negotiate()), S2;
    });
  }
  unpublishTracks(u2) {
    return __awaiter(this, void 0, void 0, function* () {
      return (yield Promise.all(u2.map((l2) => this.unpublishTrack(l2)))).filter((l2) => l2 instanceof LocalTrackPublication);
    });
  }
  republishAllTracks(u2) {
    let c = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    return __awaiter(this, void 0, void 0, function* () {
      const l2 = [];
      this.trackPublications.forEach((v2) => {
        v2.track && (u2 && (v2.options = Object.assign(Object.assign({}, v2.options), u2)), l2.push(v2));
      }), yield Promise.all(l2.map((v2) => __awaiter(this, void 0, void 0, function* () {
        const S2 = v2.track;
        yield this.unpublishTrack(S2, false), c && !S2.isMuted && S2.source !== Track.Source.ScreenShare && S2.source !== Track.Source.ScreenShareAudio && (S2 instanceof LocalAudioTrack || S2 instanceof LocalVideoTrack) && !S2.isUserProvided && (this.log.debug("restarting existing track", Object.assign(Object.assign({}, this.logContext), { track: v2.trackSid })), yield S2.restartTrack()), yield this.publishTrack(S2, v2.options);
      })));
    });
  }
  /**
  * Publish a new data payload to the room. Data will be forwarded to each
  * participant in the room if the destination field in publishOptions is empty
  *
  * @param data Uint8Array of the payload. To send string data, use TextEncoder.encode
  * @param options optionally specify a `reliable`, `topic` and `destination`
  */
  publishData(u2) {
    let c = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    return __awaiter(this, void 0, void 0, function* () {
      const l2 = c.reliable ? DataPacket_Kind.RELIABLE : DataPacket_Kind.LOSSY, v2 = c.destinationIdentities, S2 = c.topic, g2 = new DataPacket({ kind: l2, value: { case: "user", value: new UserPacket({ participantIdentity: this.identity, payload: u2, destinationIdentities: v2, topic: S2 }) } });
      yield this.engine.sendDataPacket(g2, l2);
    });
  }
  /**
  * Control who can subscribe to LocalParticipant's published tracks.
  *
  * By default, all participants can subscribe. This allows fine-grained control over
  * who is able to subscribe at a participant and track level.
  *
  * Note: if access is given at a track-level (i.e. both [allParticipantsAllowed] and
  * [ParticipantTrackPermission.allTracksAllowed] are false), any newer published tracks
  * will not grant permissions to any participants and will require a subsequent
  * permissions update to allow subscription.
  *
  * @param allParticipantsAllowed Allows all participants to subscribe all tracks.
  *  Takes precedence over [[participantTrackPermissions]] if set to true.
  *  By default this is set to true.
  * @param participantTrackPermissions Full list of individual permissions per
  *  participant/track. Any omitted participants will not receive any permissions.
  */
  setTrackSubscriptionPermissions(u2) {
    let c = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    this.participantTrackPermissions = c, this.allParticipantsAllowedToSubscribe = u2, this.engine.client.isDisconnected || this.updateTrackSubscriptionPermissions();
  }
  /** @internal */
  updateInfo(u2) {
    return u2.sid !== this.sid || !super.updateInfo(u2) ? false : (u2.tracks.forEach((c) => {
      var l2, v2;
      const S2 = this.trackPublications.get(c.sid);
      if (S2) {
        const g2 = S2.isMuted || ((v2 = (l2 = S2.track) === null || l2 === void 0 ? void 0 : l2.isUpstreamPaused) !== null && v2 !== void 0 ? v2 : false);
        g2 !== c.muted && (this.log.debug("updating server mute state after reconcile", Object.assign(Object.assign(Object.assign({}, this.logContext), getLogContextFromTrack(S2)), { mutedOnServer: g2 })), this.engine.client.sendMuteTrack(c.sid, g2));
      }
    }), true);
  }
  getPublicationForTrack(u2) {
    let c;
    return this.trackPublications.forEach((l2) => {
      const v2 = l2.track;
      v2 && (u2 instanceof MediaStreamTrack ? (v2 instanceof LocalAudioTrack || v2 instanceof LocalVideoTrack) && v2.mediaStreamTrack === u2 && (c = l2) : u2 === v2 && (c = l2));
    }), c;
  }
}
class RemoteTrackPublication extends TrackPublication {
  constructor(u2, c, l2, v2) {
    super(u2, c.sid, c.name, v2), this.track = void 0, this.allowed = true, this.disabled = false, this.currentVideoQuality = VideoQuality.HIGH, this.handleEnded = (S2) => {
      this.setTrack(void 0), this.emit(TrackEvent.Ended, S2);
    }, this.handleVisibilityChange = (S2) => {
      this.log.debug("adaptivestream video visibility ".concat(this.trackSid, ", visible=").concat(S2), this.logContext), this.disabled = !S2, this.emitTrackUpdate();
    }, this.handleVideoDimensionsChange = (S2) => {
      this.log.debug("adaptivestream video dimensions ".concat(S2.width, "x").concat(S2.height), this.logContext), this.videoDimensions = S2, this.emitTrackUpdate();
    }, this.subscribed = l2, this.updateInfo(c);
  }
  /**
  * Subscribe or unsubscribe to this remote track
  * @param subscribed true to subscribe to a track, false to unsubscribe
  */
  setSubscribed(u2) {
    const c = this.subscriptionStatus, l2 = this.permissionStatus;
    this.subscribed = u2, u2 && (this.allowed = true);
    const v2 = new UpdateSubscription({ trackSids: [this.trackSid], subscribe: this.subscribed, participantTracks: [new ParticipantTracks({
      // sending an empty participant id since TrackPublication doesn't keep it
      // this is filled in by the participant that receives this message
      participantSid: "",
      trackSids: [this.trackSid]
    })] });
    this.emit(TrackEvent.UpdateSubscription, v2), this.emitSubscriptionUpdateIfChanged(c), this.emitPermissionUpdateIfChanged(l2);
  }
  get subscriptionStatus() {
    return this.subscribed === false ? TrackPublication.SubscriptionStatus.Unsubscribed : super.isSubscribed ? TrackPublication.SubscriptionStatus.Subscribed : TrackPublication.SubscriptionStatus.Desired;
  }
  get permissionStatus() {
    return this.allowed ? TrackPublication.PermissionStatus.Allowed : TrackPublication.PermissionStatus.NotAllowed;
  }
  /**
  * Returns true if track is subscribed, and ready for playback
  */
  get isSubscribed() {
    return this.subscribed === false ? false : super.isSubscribed;
  }
  // returns client's desire to subscribe to a track, also true if autoSubscribe is enabled
  get isDesired() {
    return this.subscribed !== false;
  }
  get isEnabled() {
    return !this.disabled;
  }
  /**
  * disable server from sending down data for this track. this is useful when
  * the participant is off screen, you may disable streaming down their video
  * to reduce bandwidth requirements
  * @param enabled
  */
  setEnabled(u2) {
    !this.isManualOperationAllowed() || this.disabled === !u2 || (this.disabled = !u2, this.emitTrackUpdate());
  }
  /**
  * for tracks that support simulcasting, adjust subscribed quality
  *
  * This indicates the highest quality the client can accept. if network
  * bandwidth does not allow, server will automatically reduce quality to
  * optimize for uninterrupted video
  */
  setVideoQuality(u2) {
    !this.isManualOperationAllowed() || this.currentVideoQuality === u2 || (this.currentVideoQuality = u2, this.videoDimensions = void 0, this.emitTrackUpdate());
  }
  setVideoDimensions(u2) {
    var c, l2;
    this.isManualOperationAllowed() && (((c = this.videoDimensions) === null || c === void 0 ? void 0 : c.width) === u2.width && ((l2 = this.videoDimensions) === null || l2 === void 0 ? void 0 : l2.height) === u2.height || (this.track instanceof RemoteVideoTrack && (this.videoDimensions = u2), this.currentVideoQuality = void 0, this.emitTrackUpdate()));
  }
  setVideoFPS(u2) {
    this.isManualOperationAllowed() && this.track instanceof RemoteVideoTrack && this.fps !== u2 && (this.fps = u2, this.emitTrackUpdate());
  }
  get videoQuality() {
    return this.currentVideoQuality;
  }
  /** @internal */
  setTrack(u2) {
    const c = this.subscriptionStatus, l2 = this.permissionStatus, v2 = this.track;
    v2 !== u2 && (v2 && (v2.off(TrackEvent.VideoDimensionsChanged, this.handleVideoDimensionsChange), v2.off(TrackEvent.VisibilityChanged, this.handleVisibilityChange), v2.off(TrackEvent.Ended, this.handleEnded), v2.detach(), v2.stopMonitor(), this.emit(TrackEvent.Unsubscribed, v2)), super.setTrack(u2), u2 && (u2.sid = this.trackSid, u2.on(TrackEvent.VideoDimensionsChanged, this.handleVideoDimensionsChange), u2.on(TrackEvent.VisibilityChanged, this.handleVisibilityChange), u2.on(TrackEvent.Ended, this.handleEnded), this.emit(TrackEvent.Subscribed, u2)), this.emitPermissionUpdateIfChanged(l2), this.emitSubscriptionUpdateIfChanged(c));
  }
  /** @internal */
  setAllowed(u2) {
    const c = this.subscriptionStatus, l2 = this.permissionStatus;
    this.allowed = u2, this.emitPermissionUpdateIfChanged(l2), this.emitSubscriptionUpdateIfChanged(c);
  }
  /** @internal */
  setSubscriptionError(u2) {
    this.emit(TrackEvent.SubscriptionFailed, u2);
  }
  /** @internal */
  updateInfo(u2) {
    super.updateInfo(u2);
    const c = this.metadataMuted;
    this.metadataMuted = u2.muted, this.track ? this.track.setMuted(u2.muted) : c !== u2.muted && this.emit(u2.muted ? TrackEvent.Muted : TrackEvent.Unmuted);
  }
  emitSubscriptionUpdateIfChanged(u2) {
    const c = this.subscriptionStatus;
    u2 !== c && this.emit(TrackEvent.SubscriptionStatusChanged, c, u2);
  }
  emitPermissionUpdateIfChanged(u2) {
    this.permissionStatus !== u2 && this.emit(TrackEvent.SubscriptionPermissionChanged, this.permissionStatus, u2);
  }
  isManualOperationAllowed() {
    return this.kind === Track.Kind.Video && this.isAdaptiveStream ? (this.log.warn("adaptive stream is enabled, cannot change video track settings", this.logContext), false) : this.isDesired ? true : (this.log.warn("cannot update track settings when not subscribed", this.logContext), false);
  }
  get isAdaptiveStream() {
    return this.track instanceof RemoteVideoTrack && this.track.isAdaptiveStream;
  }
  /* @internal */
  emitTrackUpdate() {
    const u2 = new UpdateTrackSettings({ trackSids: [this.trackSid], disabled: this.disabled, fps: this.fps });
    this.videoDimensions ? (u2.width = Math.ceil(this.videoDimensions.width), u2.height = Math.ceil(this.videoDimensions.height)) : this.currentVideoQuality !== void 0 ? u2.quality = this.currentVideoQuality : u2.quality = VideoQuality.HIGH, this.emit(TrackEvent.UpdateSettings, u2);
  }
}
class RemoteParticipant extends Participant$1 {
  /** @internal */
  static fromParticipantInfo(u2, c) {
    return new RemoteParticipant(u2, c.sid, c.identity, c.name, c.metadata);
  }
  /** @internal */
  constructor(u2, c, l2, v2, S2, g2) {
    super(c, l2 || "", v2, S2, g2), this.signalClient = u2, this.trackPublications = /* @__PURE__ */ new Map(), this.audioTrackPublications = /* @__PURE__ */ new Map(), this.videoTrackPublications = /* @__PURE__ */ new Map(), this.volumeMap = /* @__PURE__ */ new Map();
  }
  addTrackPublication(u2) {
    super.addTrackPublication(u2), u2.on(TrackEvent.UpdateSettings, (c) => {
      this.log.debug("send update settings", Object.assign(Object.assign({}, this.logContext), getLogContextFromTrack(u2))), this.signalClient.sendUpdateTrackSettings(c);
    }), u2.on(TrackEvent.UpdateSubscription, (c) => {
      c.participantTracks.forEach((l2) => {
        l2.participantSid = this.sid;
      }), this.signalClient.sendUpdateSubscription(c);
    }), u2.on(TrackEvent.SubscriptionPermissionChanged, (c) => {
      this.emit(ParticipantEvent.TrackSubscriptionPermissionChanged, u2, c);
    }), u2.on(TrackEvent.SubscriptionStatusChanged, (c) => {
      this.emit(ParticipantEvent.TrackSubscriptionStatusChanged, u2, c);
    }), u2.on(TrackEvent.Subscribed, (c) => {
      this.emit(ParticipantEvent.TrackSubscribed, c, u2);
    }), u2.on(TrackEvent.Unsubscribed, (c) => {
      this.emit(ParticipantEvent.TrackUnsubscribed, c, u2);
    }), u2.on(TrackEvent.SubscriptionFailed, (c) => {
      this.emit(ParticipantEvent.TrackSubscriptionFailed, u2.trackSid, c);
    });
  }
  getTrackPublication(u2) {
    const c = super.getTrackPublication(u2);
    if (c)
      return c;
  }
  getTrackPublicationByName(u2) {
    const c = super.getTrackPublicationByName(u2);
    if (c)
      return c;
  }
  /**
  * sets the volume on the participant's audio track
  * by default, this affects the microphone publication
  * a different source can be passed in as a second argument
  * if no track exists the volume will be applied when the microphone track is added
  */
  setVolume(u2) {
    let c = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Track.Source.Microphone;
    this.volumeMap.set(c, u2);
    const l2 = this.getTrackPublication(c);
    l2 && l2.track && l2.track.setVolume(u2);
  }
  /**
  * gets the volume on the participant's microphone track
  */
  getVolume() {
    let u2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : Track.Source.Microphone;
    const c = this.getTrackPublication(u2);
    return c && c.track ? c.track.getVolume() : this.volumeMap.get(u2);
  }
  /** @internal */
  addSubscribedMediaTrack(u2, c, l2, v2, S2, g2) {
    let E2 = this.getTrackPublicationBySid(c);
    if (E2 || c.startsWith("TR") || this.trackPublications.forEach((L2) => {
      !E2 && u2.kind === L2.kind.toString() && (E2 = L2);
    }), !E2) {
      if (g2 === 0) {
        this.log.error("could not find published track", Object.assign(Object.assign({}, this.logContext), { trackSid: c })), this.emit(ParticipantEvent.TrackSubscriptionFailed, c);
        return;
      }
      g2 === void 0 && (g2 = 20), setTimeout(() => {
        this.addSubscribedMediaTrack(u2, c, l2, v2, S2, g2 - 1);
      }, 150);
      return;
    }
    if (u2.readyState === "ended") {
      this.log.error("unable to subscribe because MediaStreamTrack is ended. Do not call MediaStreamTrack.stop()", Object.assign(Object.assign({}, this.logContext), getLogContextFromTrack(E2))), this.emit(ParticipantEvent.TrackSubscriptionFailed, c);
      return;
    }
    const _ = u2.kind === "video";
    let k;
    return _ ? k = new RemoteVideoTrack(u2, c, v2, S2) : k = new RemoteAudioTrack(u2, c, v2, this.audioContext, this.audioOutput), k.source = E2.source, k.isMuted = E2.isMuted, k.setMediaStream(l2), k.start(), E2.setTrack(k), this.volumeMap.has(E2.source) && k instanceof RemoteAudioTrack && k.setVolume(this.volumeMap.get(E2.source)), E2;
  }
  /** @internal */
  get hasMetadata() {
    return !!this.participantInfo;
  }
  /**
  * @internal
  */
  getTrackPublicationBySid(u2) {
    return this.trackPublications.get(u2);
  }
  /** @internal */
  updateInfo(u2) {
    if (!super.updateInfo(u2))
      return false;
    const c = /* @__PURE__ */ new Map(), l2 = /* @__PURE__ */ new Map();
    return u2.tracks.forEach((v2) => {
      var S2, g2;
      let E2 = this.getTrackPublicationBySid(v2.sid);
      if (E2)
        E2.updateInfo(v2);
      else {
        const _ = Track.kindFromProto(v2.type);
        if (!_)
          return;
        E2 = new RemoteTrackPublication(_, v2, (S2 = this.signalClient.connectOptions) === null || S2 === void 0 ? void 0 : S2.autoSubscribe, { loggerContextCb: () => this.logContext, loggerName: (g2 = this.loggerOptions) === null || g2 === void 0 ? void 0 : g2.loggerName }), E2.updateInfo(v2), l2.set(v2.sid, E2);
        const k = Array.from(this.trackPublications.values()).find((L2) => L2.source === (E2 == null ? void 0 : E2.source));
        k && E2.source !== Track.Source.Unknown && this.log.debug("received a second track publication for ".concat(this.identity, " with the same source: ").concat(E2.source), Object.assign(Object.assign({}, this.logContext), { oldTrack: getLogContextFromTrack(k), newTrack: getLogContextFromTrack(E2) })), this.addTrackPublication(E2);
      }
      c.set(v2.sid, E2);
    }), this.trackPublications.forEach((v2) => {
      c.has(v2.trackSid) || (this.log.trace("detected removed track on remote participant, unpublishing", Object.assign(Object.assign({}, this.logContext), getLogContextFromTrack(v2))), this.unpublishTrack(v2.trackSid, true));
    }), l2.forEach((v2) => {
      this.emit(ParticipantEvent.TrackPublished, v2);
    }), true;
  }
  /** @internal */
  unpublishTrack(u2, c) {
    const l2 = this.trackPublications.get(u2);
    if (!l2)
      return;
    const { track: v2 } = l2;
    switch (v2 && (v2.stop(), l2.setTrack(void 0)), this.trackPublications.delete(u2), l2.kind) {
      case Track.Kind.Audio:
        this.audioTrackPublications.delete(u2);
        break;
      case Track.Kind.Video:
        this.videoTrackPublications.delete(u2);
        break;
    }
    c && this.emit(ParticipantEvent.TrackUnpublished, l2);
  }
  /**
  * @internal
  */
  setAudioOutput(u2) {
    return __awaiter(this, void 0, void 0, function* () {
      this.audioOutput = u2;
      const c = [];
      this.audioTrackPublications.forEach((l2) => {
        var v2;
        l2.track instanceof RemoteAudioTrack && c.push(l2.track.setSinkId((v2 = u2.deviceId) !== null && v2 !== void 0 ? v2 : "default"));
      }), yield Promise.all(c);
    });
  }
  /** @internal */
  emit(u2) {
    for (var c = arguments.length, l2 = new Array(c > 1 ? c - 1 : 0), v2 = 1; v2 < c; v2++)
      l2[v2 - 1] = arguments[v2];
    return this.log.trace("participant event", Object.assign(Object.assign({}, this.logContext), { event: u2, args: l2 })), super.emit(u2, ...l2);
  }
}
var ConnectionState;
(function(a92) {
  a92.Disconnected = "disconnected", a92.Connecting = "connecting", a92.Connected = "connected", a92.Reconnecting = "reconnecting";
})(ConnectionState || (ConnectionState = {}));
const connectionReconcileFrequency = 2 * 1e3;
let Room$2 = class Room2 extends eventsExports.EventEmitter {
  /**
  * Creates a new Room, the primary construct for a LiveKit session.
  * @param options
  */
  constructor(u2) {
    var c, l2, v2;
    super(), c = this, this.state = ConnectionState.Disconnected, this.activeSpeakers = [], this.isE2EEEnabled = false, this.audioEnabled = true, this.isVideoPlaybackBlocked = false, this.log = livekitLogger, this.bufferedEvents = [], this.isResuming = false, this.connect = (S2, g2, E2) => __awaiter(this, void 0, void 0, function* () {
      var _;
      const k = yield this.disconnectLock.lock();
      if (this.state === ConnectionState.Connected)
        return this.log.info("already connected to room ".concat(this.name), this.logContext), k(), Promise.resolve();
      if (this.connectFuture)
        return k(), this.connectFuture.promise;
      this.setAndEmitConnectionState(ConnectionState.Connecting), ((_ = this.regionUrlProvider) === null || _ === void 0 ? void 0 : _.getServerUrl().toString()) !== S2 && (this.regionUrl = void 0, this.regionUrlProvider = void 0), isCloud(new URL(S2)) && (this.regionUrlProvider === void 0 ? this.regionUrlProvider = new RegionUrlProvider(S2, g2) : this.regionUrlProvider.updateToken(g2), this.regionUrlProvider.fetchRegionSettings().catch(($) => {
        this.log.warn("could not fetch region settings", Object.assign(Object.assign({}, this.logContext), { error: $ }));
      }));
      const L2 = ($, J2, V2) => __awaiter(this, void 0, void 0, function* () {
        var q2;
        this.abortController && this.abortController.abort();
        const G2 = new AbortController();
        this.abortController = G2, k == null || k();
        try {
          yield this.attemptConnection(V2 ?? S2, g2, E2, G2), this.abortController = void 0, $();
        } catch (H2) {
          if (this.regionUrlProvider && H2 instanceof ConnectionError && H2.reason !== 3 && H2.reason !== 0) {
            let B2 = null;
            try {
              B2 = yield this.regionUrlProvider.getNextBestRegionUrl((q2 = this.abortController) === null || q2 === void 0 ? void 0 : q2.signal);
            } catch (Y2) {
              if (Y2 instanceof ConnectionError && (Y2.status === 401 || Y2.reason === 3)) {
                this.handleDisconnect(this.options.stopLocalTrackOnUnpublish), J2(Y2);
                return;
              }
            }
            B2 ? (this.log.info("Initial connection failed with ConnectionError: ".concat(H2.message, ". Retrying with another region: ").concat(B2), this.logContext), yield L2($, J2, B2)) : (this.handleDisconnect(this.options.stopLocalTrackOnUnpublish), J2(H2));
          } else
            this.handleDisconnect(this.options.stopLocalTrackOnUnpublish), J2(H2);
        }
      }), M2 = this.regionUrl;
      return this.regionUrl = void 0, this.connectFuture = new Future(($, J2) => {
        L2($, J2, M2);
      }, () => {
        this.clearConnectionFutures();
      }), this.connectFuture.promise;
    }), this.connectSignal = (S2, g2, E2, _, k, L2) => __awaiter(this, void 0, void 0, function* () {
      var M2, $, J2;
      const V2 = yield E2.join(S2, g2, { autoSubscribe: _.autoSubscribe, adaptiveStream: typeof k.adaptiveStream == "object" ? true : k.adaptiveStream, maxRetries: _.maxRetries, e2eeEnabled: !!this.e2eeManager, websocketTimeout: _.websocketTimeout }, L2.signal);
      let q2 = V2.serverInfo;
      if (q2 || (q2 = { version: V2.serverVersion, region: V2.serverRegion }), this.log.debug("connected to Livekit Server ".concat(Object.entries(q2).map((G2) => {
        let [H2, B2] = G2;
        return "".concat(H2, ": ").concat(B2);
      }).join(", ")), { room: (M2 = V2.room) === null || M2 === void 0 ? void 0 : M2.name, roomSid: ($ = V2.room) === null || $ === void 0 ? void 0 : $.sid, identity: (J2 = V2.participant) === null || J2 === void 0 ? void 0 : J2.identity }), !V2.serverVersion)
        throw new UnsupportedServer("unknown server version");
      return V2.serverVersion === "0.15.1" && this.options.dynacast && (this.log.debug("disabling dynacast due to server version", this.logContext), k.dynacast = false), V2;
    }), this.applyJoinResponse = (S2) => {
      const g2 = S2.participant;
      this.localParticipant.sid = g2.sid, this.localParticipant.identity = g2.identity, this.handleParticipantUpdates([g2, ...S2.otherParticipants]), S2.room && this.handleRoomUpdate(S2.room), this.options.e2ee && this.e2eeManager && this.e2eeManager.setSifTrailer(S2.sifTrailer);
    }, this.attemptConnection = (S2, g2, E2, _) => __awaiter(this, void 0, void 0, function* () {
      var k, L2, M2;
      this.state === ConnectionState.Reconnecting || this.isResuming || !((k = this.engine) === null || k === void 0) && k.pendingReconnect ? (this.log.info("Reconnection attempt replaced by new connection attempt", this.logContext), this.recreateEngine()) : this.maybeCreateEngine(), !((L2 = this.regionUrlProvider) === null || L2 === void 0) && L2.isCloud() && this.engine.setRegionUrlProvider(this.regionUrlProvider), this.acquireAudioContext(), this.connOptions = Object.assign(Object.assign({}, roomConnectOptionDefaults), E2), this.connOptions.rtcConfig && (this.engine.rtcConfig = this.connOptions.rtcConfig), this.connOptions.peerConnectionTimeout && (this.engine.peerConnectionTimeout = this.connOptions.peerConnectionTimeout);
      try {
        const $ = yield this.connectSignal(S2, g2, this.engine, this.connOptions, this.options, _);
        this.applyJoinResponse($), this.setupLocalParticipantEvents(), this.emit(RoomEvent.SignalConnected);
      } catch ($) {
        yield this.engine.close(), this.recreateEngine();
        const J2 = new ConnectionError("could not establish signal connection");
        throw $ instanceof Error && (J2.message = "".concat(J2.message, ": ").concat($.message)), $ instanceof ConnectionError && (J2.reason = $.reason, J2.status = $.status), this.log.debug("error trying to establish signal connection", Object.assign(Object.assign({}, this.logContext), { error: $ })), J2;
      }
      if (_.signal.aborted)
        throw yield this.engine.close(), this.recreateEngine(), new ConnectionError("Connection attempt aborted");
      try {
        yield this.engine.waitForPCInitialConnection(this.connOptions.peerConnectionTimeout, _);
      } catch ($) {
        throw yield this.engine.close(), this.recreateEngine(), $;
      }
      isWeb() && this.options.disconnectOnPageLeave && (window.addEventListener("pagehide", this.onPageLeave), window.addEventListener("beforeunload", this.onPageLeave)), isWeb() && (document.addEventListener("freeze", this.onPageLeave), (M2 = navigator.mediaDevices) === null || M2 === void 0 || M2.addEventListener("devicechange", this.handleDeviceChange)), this.setAndEmitConnectionState(ConnectionState.Connected), this.emit(RoomEvent.Connected), this.registerConnectionReconcile();
    }), this.disconnect = function() {
      let S2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
      return __awaiter(c, void 0, void 0, function* () {
        var g2, E2, _, k;
        const L2 = yield this.disconnectLock.lock();
        try {
          if (this.state === ConnectionState.Disconnected) {
            this.log.debug("already disconnected", this.logContext);
            return;
          }
          this.log.info("disconnect from room", Object.assign({}, this.logContext)), (this.state === ConnectionState.Connecting || this.state === ConnectionState.Reconnecting || this.isResuming) && (this.log.warn("abort connection attempt", this.logContext), (g2 = this.abortController) === null || g2 === void 0 || g2.abort(), (_ = (E2 = this.connectFuture) === null || E2 === void 0 ? void 0 : E2.reject) === null || _ === void 0 || _.call(E2, new ConnectionError("Client initiated disconnect")), this.connectFuture = void 0), !((k = this.engine) === null || k === void 0) && k.client.isDisconnected || (yield this.engine.client.sendLeave()), this.engine && (yield this.engine.close()), this.handleDisconnect(S2, DisconnectReason.CLIENT_INITIATED), this.engine = void 0;
        } finally {
          L2();
        }
      });
    }, this.onPageLeave = () => __awaiter(this, void 0, void 0, function* () {
      yield this.disconnect();
    }), this.startAudio = () => __awaiter(this, void 0, void 0, function* () {
      const S2 = [], g2 = getBrowser();
      if (g2 && g2.os === "iOS") {
        const E2 = "livekit-dummy-audio-el";
        let _ = document.getElementById(E2);
        if (!_) {
          _ = document.createElement("audio"), _.id = E2, _.autoplay = true, _.hidden = true;
          const k = getEmptyAudioStreamTrack();
          k.enabled = true;
          const L2 = new MediaStream([k]);
          _.srcObject = L2, document.addEventListener("visibilitychange", () => {
            _ && (_.srcObject = document.hidden ? null : L2, document.hidden || (this.log.debug("page visible again, triggering startAudio to resume playback and update playback status", this.logContext), this.startAudio()));
          }), document.body.append(_), this.once(RoomEvent.Disconnected, () => {
            _ == null || _.remove(), _ = null;
          });
        }
        S2.push(_);
      }
      this.remoteParticipants.forEach((E2) => {
        E2.audioTrackPublications.forEach((_) => {
          _.track && _.track.attachedElements.forEach((k) => {
            S2.push(k);
          });
        });
      });
      try {
        yield Promise.all([this.acquireAudioContext(), ...S2.map((E2) => (E2.muted = false, E2.play()))]), this.handleAudioPlaybackStarted();
      } catch (E2) {
        throw this.handleAudioPlaybackFailed(E2), E2;
      }
    }), this.startVideo = () => __awaiter(this, void 0, void 0, function* () {
      const S2 = [];
      for (const g2 of this.remoteParticipants.values())
        g2.videoTrackPublications.forEach((E2) => {
          var _;
          (_ = E2.track) === null || _ === void 0 || _.attachedElements.forEach((k) => {
            S2.includes(k) || S2.push(k);
          });
        });
      yield Promise.all(S2.map((g2) => g2.play())).then(() => {
        this.handleVideoPlaybackStarted();
      }).catch((g2) => {
        g2.name === "NotAllowedError" ? this.handleVideoPlaybackFailed() : this.log.warn("Resuming video playback failed, make sure you call `startVideo` directly in a user gesture handler", this.logContext);
      });
    }), this.handleRestarting = () => {
      this.clearConnectionReconcile(), this.isResuming = false;
      for (const S2 of this.remoteParticipants.values())
        this.handleParticipantDisconnected(S2.identity, S2);
      this.setAndEmitConnectionState(ConnectionState.Reconnecting) && this.emit(RoomEvent.Reconnecting);
    }, this.handleSignalRestarted = (S2) => __awaiter(this, void 0, void 0, function* () {
      this.log.debug("signal reconnected to server, region ".concat(S2.serverRegion), Object.assign(Object.assign({}, this.logContext), { region: S2.serverRegion })), this.bufferedEvents = [], this.applyJoinResponse(S2);
      try {
        yield this.localParticipant.republishAllTracks(void 0, true);
      } catch (g2) {
        this.log.error("error trying to re-publish tracks after reconnection", Object.assign(Object.assign({}, this.logContext), { error: g2 }));
      }
      try {
        yield this.engine.waitForRestarted(), this.log.debug("fully reconnected to server", Object.assign(Object.assign({}, this.logContext), { region: S2.serverRegion }));
      } catch {
        return;
      }
      this.setAndEmitConnectionState(ConnectionState.Connected), this.emit(RoomEvent.Reconnected), this.registerConnectionReconcile(), this.emitBufferedEvents();
    }), this.handleParticipantUpdates = (S2) => {
      S2.forEach((g2) => {
        var E2;
        if (g2.identity === this.localParticipant.identity) {
          this.localParticipant.updateInfo(g2);
          return;
        }
        g2.identity === "" && (g2.identity = (E2 = this.sidToIdentity.get(g2.sid)) !== null && E2 !== void 0 ? E2 : "");
        let _ = this.remoteParticipants.get(g2.identity);
        g2.state === ParticipantInfo_State.DISCONNECTED ? this.handleParticipantDisconnected(g2.identity, _) : _ = this.getOrCreateParticipant(g2.identity, g2);
      });
    }, this.handleActiveSpeakersUpdate = (S2) => {
      const g2 = [], E2 = {};
      S2.forEach((_) => {
        if (E2[_.sid] = true, _.sid === this.localParticipant.sid)
          this.localParticipant.audioLevel = _.level, this.localParticipant.setIsSpeaking(true), g2.push(this.localParticipant);
        else {
          const k = this.getRemoteParticipantBySid(_.sid);
          k && (k.audioLevel = _.level, k.setIsSpeaking(true), g2.push(k));
        }
      }), E2[this.localParticipant.sid] || (this.localParticipant.audioLevel = 0, this.localParticipant.setIsSpeaking(false)), this.remoteParticipants.forEach((_) => {
        E2[_.sid] || (_.audioLevel = 0, _.setIsSpeaking(false));
      }), this.activeSpeakers = g2, this.emitWhenConnected(RoomEvent.ActiveSpeakersChanged, g2);
    }, this.handleSpeakersChanged = (S2) => {
      const g2 = /* @__PURE__ */ new Map();
      this.activeSpeakers.forEach((_) => {
        g2.set(_.sid, _);
      }), S2.forEach((_) => {
        let k = this.getRemoteParticipantBySid(_.sid);
        _.sid === this.localParticipant.sid && (k = this.localParticipant), k && (k.audioLevel = _.level, k.setIsSpeaking(_.active), _.active ? g2.set(_.sid, k) : g2.delete(_.sid));
      });
      const E2 = Array.from(g2.values());
      E2.sort((_, k) => k.audioLevel - _.audioLevel), this.activeSpeakers = E2, this.emitWhenConnected(RoomEvent.ActiveSpeakersChanged, E2);
    }, this.handleStreamStateUpdate = (S2) => {
      S2.streamStates.forEach((g2) => {
        const E2 = this.getRemoteParticipantBySid(g2.participantSid);
        if (!E2)
          return;
        const _ = E2.getTrackPublicationBySid(g2.trackSid);
        !_ || !_.track || (_.track.streamState = Track.streamStateFromProto(g2.state), E2.emit(ParticipantEvent.TrackStreamStateChanged, _, _.track.streamState), this.emitWhenConnected(RoomEvent.TrackStreamStateChanged, _, _.track.streamState, E2));
      });
    }, this.handleSubscriptionPermissionUpdate = (S2) => {
      const g2 = this.getRemoteParticipantBySid(S2.participantSid);
      if (!g2)
        return;
      const E2 = g2.getTrackPublicationBySid(S2.trackSid);
      E2 && E2.setAllowed(S2.allowed);
    }, this.handleSubscriptionError = (S2) => {
      const g2 = Array.from(this.remoteParticipants.values()).find((_) => _.trackPublications.has(S2.trackSid));
      if (!g2)
        return;
      const E2 = g2.getTrackPublicationBySid(S2.trackSid);
      E2 && E2.setSubscriptionError(S2.err);
    }, this.handleDataPacket = (S2, g2) => {
      const E2 = this.remoteParticipants.get(S2.participantIdentity);
      this.emit(RoomEvent.DataReceived, S2.payload, E2, g2, S2.topic), E2 == null || E2.emit(ParticipantEvent.DataReceived, S2.payload, g2);
    }, this.handleAudioPlaybackStarted = () => {
      this.canPlaybackAudio || (this.audioEnabled = true, this.emit(RoomEvent.AudioPlaybackStatusChanged, true));
    }, this.handleAudioPlaybackFailed = (S2) => {
      this.log.warn("could not playback audio", Object.assign(Object.assign({}, this.logContext), { error: S2 })), this.canPlaybackAudio && (this.audioEnabled = false, this.emit(RoomEvent.AudioPlaybackStatusChanged, false));
    }, this.handleVideoPlaybackStarted = () => {
      this.isVideoPlaybackBlocked && (this.isVideoPlaybackBlocked = false, this.emit(RoomEvent.VideoPlaybackStatusChanged, true));
    }, this.handleVideoPlaybackFailed = () => {
      this.isVideoPlaybackBlocked || (this.isVideoPlaybackBlocked = true, this.emit(RoomEvent.VideoPlaybackStatusChanged, false));
    }, this.handleDeviceChange = () => __awaiter(this, void 0, void 0, function* () {
      this.emit(RoomEvent.MediaDevicesChanged);
    }), this.handleRoomUpdate = (S2) => {
      const g2 = this.roomInfo;
      this.roomInfo = S2, g2 && g2.metadata !== S2.metadata && this.emitWhenConnected(RoomEvent.RoomMetadataChanged, S2.metadata), (g2 == null ? void 0 : g2.activeRecording) !== S2.activeRecording && this.emitWhenConnected(RoomEvent.RecordingStatusChanged, S2.activeRecording);
    }, this.handleConnectionQualityUpdate = (S2) => {
      S2.updates.forEach((g2) => {
        if (g2.participantSid === this.localParticipant.sid) {
          this.localParticipant.setConnectionQuality(g2.quality);
          return;
        }
        const E2 = this.getRemoteParticipantBySid(g2.participantSid);
        E2 && E2.setConnectionQuality(g2.quality);
      });
    }, this.onLocalParticipantMetadataChanged = (S2) => {
      this.emit(RoomEvent.ParticipantMetadataChanged, S2, this.localParticipant);
    }, this.onLocalParticipantNameChanged = (S2) => {
      this.emit(RoomEvent.ParticipantNameChanged, S2, this.localParticipant);
    }, this.onLocalTrackMuted = (S2) => {
      this.emit(RoomEvent.TrackMuted, S2, this.localParticipant);
    }, this.onLocalTrackUnmuted = (S2) => {
      this.emit(RoomEvent.TrackUnmuted, S2, this.localParticipant);
    }, this.onLocalTrackPublished = (S2) => __awaiter(this, void 0, void 0, function* () {
      var g2;
      this.emit(RoomEvent.LocalTrackPublished, S2, this.localParticipant), S2.track instanceof LocalAudioTrack && (yield S2.track.checkForSilence()) && this.emit(RoomEvent.LocalAudioSilenceDetected, S2);
      const E2 = yield (g2 = S2.track) === null || g2 === void 0 ? void 0 : g2.getDeviceId(), _ = sourceToKind(S2.source);
      _ && E2 && E2 !== this.localParticipant.activeDeviceMap.get(_) && (this.localParticipant.activeDeviceMap.set(_, E2), this.emit(RoomEvent.ActiveDeviceChanged, _, E2));
    }), this.onLocalTrackUnpublished = (S2) => {
      this.emit(RoomEvent.LocalTrackUnpublished, S2, this.localParticipant);
    }, this.onLocalConnectionQualityChanged = (S2) => {
      this.emit(RoomEvent.ConnectionQualityChanged, S2, this.localParticipant);
    }, this.onMediaDevicesError = (S2) => {
      this.emit(RoomEvent.MediaDevicesError, S2);
    }, this.onLocalParticipantPermissionsChanged = (S2) => {
      this.emit(RoomEvent.ParticipantPermissionsChanged, S2, this.localParticipant);
    }, this.setMaxListeners(100), this.remoteParticipants = /* @__PURE__ */ new Map(), this.sidToIdentity = /* @__PURE__ */ new Map(), this.options = Object.assign(Object.assign({}, roomOptionDefaults), u2), this.log = getLogger((l2 = this.options.loggerName) !== null && l2 !== void 0 ? l2 : LoggerNames.Room), this.options.audioCaptureDefaults = Object.assign(Object.assign({}, audioDefaults), u2 == null ? void 0 : u2.audioCaptureDefaults), this.options.videoCaptureDefaults = Object.assign(Object.assign({}, videoDefaults), u2 == null ? void 0 : u2.videoCaptureDefaults), this.options.publishDefaults = Object.assign(Object.assign({}, publishDefaults), u2 == null ? void 0 : u2.publishDefaults), this.maybeCreateEngine(), this.disconnectLock = new Mutex(), this.localParticipant = new LocalParticipant("", "", this.engine, this.options), this.options.videoCaptureDefaults.deviceId && this.localParticipant.activeDeviceMap.set("videoinput", unwrapConstraint(this.options.videoCaptureDefaults.deviceId)), this.options.audioCaptureDefaults.deviceId && this.localParticipant.activeDeviceMap.set("audioinput", unwrapConstraint(this.options.audioCaptureDefaults.deviceId)), !((v2 = this.options.audioOutput) === null || v2 === void 0) && v2.deviceId && this.switchActiveDevice("audiooutput", unwrapConstraint(this.options.audioOutput.deviceId)).catch((S2) => this.log.warn("Could not set audio output: ".concat(S2.message), this.logContext)), this.options.e2ee && this.setupE2EE();
  }
  /**
  * @experimental
  */
  setE2EEEnabled(u2) {
    return __awaiter(this, void 0, void 0, function* () {
      if (this.e2eeManager)
        yield Promise.all([this.localParticipant.setE2EEEnabled(u2)]), this.localParticipant.identity !== "" && this.e2eeManager.setParticipantCryptorEnabled(u2, this.localParticipant.identity);
      else
        throw Error("e2ee not configured, please set e2ee settings within the room options");
    });
  }
  setupE2EE() {
    var u2;
    this.options.e2ee && (this.e2eeManager = new E2EEManager(this.options.e2ee), this.e2eeManager.on(EncryptionEvent.ParticipantEncryptionStatusChanged, (c, l2) => {
      l2 instanceof LocalParticipant && (this.isE2EEEnabled = c), this.emit(RoomEvent.ParticipantEncryptionStatusChanged, c, l2);
    }), this.e2eeManager.on(EncryptionEvent.EncryptionError, (c) => this.emit(RoomEvent.EncryptionError, c)), (u2 = this.e2eeManager) === null || u2 === void 0 || u2.setup(this));
  }
  get logContext() {
    var u2;
    return { room: this.name, roomSid: (u2 = this.roomInfo) === null || u2 === void 0 ? void 0 : u2.sid, identity: this.localParticipant.identity };
  }
  /**
  * if the current room has a participant with `recorder: true` in its JWT grant
  **/
  get isRecording() {
    var u2, c;
    return (c = (u2 = this.roomInfo) === null || u2 === void 0 ? void 0 : u2.activeRecording) !== null && c !== void 0 ? c : false;
  }
  /**
  * server assigned unique room id.
  * returns once a sid has been issued by the server.
  */
  getSid() {
    return __awaiter(this, void 0, void 0, function* () {
      return this.state === ConnectionState.Disconnected ? "" : this.roomInfo && this.roomInfo.sid !== "" ? this.roomInfo.sid : new Promise((u2, c) => {
        const l2 = (v2) => {
          v2.sid !== "" && (this.engine.off(EngineEvent.RoomUpdate, l2), u2(v2.sid));
        };
        this.engine.on(EngineEvent.RoomUpdate, l2), this.once(RoomEvent.Disconnected, () => {
          this.engine.off(EngineEvent.RoomUpdate, l2), c("Room disconnected before room server id was available");
        });
      });
    });
  }
  /** user assigned name, derived from JWT token */
  get name() {
    var u2, c;
    return (c = (u2 = this.roomInfo) === null || u2 === void 0 ? void 0 : u2.name) !== null && c !== void 0 ? c : "";
  }
  /** room metadata */
  get metadata() {
    var u2;
    return (u2 = this.roomInfo) === null || u2 === void 0 ? void 0 : u2.metadata;
  }
  get numParticipants() {
    var u2, c;
    return (c = (u2 = this.roomInfo) === null || u2 === void 0 ? void 0 : u2.numParticipants) !== null && c !== void 0 ? c : 0;
  }
  get numPublishers() {
    var u2, c;
    return (c = (u2 = this.roomInfo) === null || u2 === void 0 ? void 0 : u2.numPublishers) !== null && c !== void 0 ? c : 0;
  }
  maybeCreateEngine() {
    this.engine && !this.engine.isClosed || (this.engine = new RTCEngine(this.options), this.engine.on(EngineEvent.ParticipantUpdate, this.handleParticipantUpdates).on(EngineEvent.RoomUpdate, this.handleRoomUpdate).on(EngineEvent.SpeakersChanged, this.handleSpeakersChanged).on(EngineEvent.StreamStateChanged, this.handleStreamStateUpdate).on(EngineEvent.ConnectionQualityUpdate, this.handleConnectionQualityUpdate).on(EngineEvent.SubscriptionError, this.handleSubscriptionError).on(EngineEvent.SubscriptionPermissionUpdate, this.handleSubscriptionPermissionUpdate).on(EngineEvent.MediaTrackAdded, (u2, c, l2) => {
      this.onTrackAdded(u2, c, l2);
    }).on(EngineEvent.Disconnected, (u2) => {
      this.handleDisconnect(this.options.stopLocalTrackOnUnpublish, u2);
    }).on(EngineEvent.ActiveSpeakersUpdate, this.handleActiveSpeakersUpdate).on(EngineEvent.DataPacketReceived, this.handleDataPacket).on(EngineEvent.Resuming, () => {
      this.clearConnectionReconcile(), this.isResuming = true, this.log.info("Resuming signal connection", this.logContext);
    }).on(EngineEvent.Resumed, () => {
      this.registerConnectionReconcile(), this.isResuming = false, this.log.info("Resumed signal connection", this.logContext), this.updateSubscriptions(), this.emitBufferedEvents();
    }).on(EngineEvent.SignalResumed, () => {
      this.bufferedEvents = [], (this.state === ConnectionState.Reconnecting || this.isResuming) && this.sendSyncState();
    }).on(EngineEvent.Restarting, this.handleRestarting).on(EngineEvent.SignalRestarted, this.handleSignalRestarted).on(EngineEvent.DCBufferStatusChanged, (u2, c) => {
      this.emit(RoomEvent.DCBufferStatusChanged, u2, c);
    }), this.localParticipant && this.localParticipant.setupEngine(this.engine), this.e2eeManager && this.e2eeManager.setupEngine(this.engine));
  }
  /**
  * getLocalDevices abstracts navigator.mediaDevices.enumerateDevices.
  * In particular, it handles Chrome's unique behavior of creating `default`
  * devices. When encountered, it'll be removed from the list of devices.
  * The actual default device will be placed at top.
  * @param kind
  * @returns a list of available local devices
  */
  static getLocalDevices(u2) {
    let c = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    return DeviceManager.getInstance().getDevices(u2, c);
  }
  /**
  * prepareConnection should be called as soon as the page is loaded, in order
  * to speed up the connection attempt. This function will
  * - perform DNS resolution and pre-warm the DNS cache
  * - establish TLS connection and cache TLS keys
  *
  * With LiveKit Cloud, it will also determine the best edge data center for
  * the current client to connect to if a token is provided.
  */
  prepareConnection(u2, c) {
    return __awaiter(this, void 0, void 0, function* () {
      if (this.state === ConnectionState.Disconnected) {
        this.log.debug("prepareConnection to ".concat(u2), this.logContext);
        try {
          if (isCloud(new URL(u2)) && c) {
            this.regionUrlProvider = new RegionUrlProvider(u2, c);
            const l2 = yield this.regionUrlProvider.getNextBestRegionUrl();
            l2 && this.state === ConnectionState.Disconnected && (this.regionUrl = l2, yield fetch(toHttpUrl(l2), { method: "HEAD" }), this.log.debug("prepared connection to ".concat(l2), this.logContext));
          } else
            yield fetch(toHttpUrl(u2), { method: "HEAD" });
        } catch (l2) {
          this.log.warn("could not prepare connection", Object.assign(Object.assign({}, this.logContext), { error: l2 }));
        }
      }
    });
  }
  /**
  * retrieves a participant by identity
  * @param identity
  * @returns
  */
  getParticipantByIdentity(u2) {
    return this.localParticipant.identity === u2 ? this.localParticipant : this.remoteParticipants.get(u2);
  }
  clearConnectionFutures() {
    this.connectFuture = void 0;
  }
  /**
  * @internal for testing
  */
  simulateScenario(u2, c) {
    return __awaiter(this, void 0, void 0, function* () {
      let l2 = () => {
      }, v2;
      switch (u2) {
        case "signal-reconnect":
          yield this.engine.client.handleOnClose("simulate disconnect");
          break;
        case "speaker":
          v2 = new SimulateScenario({ scenario: { case: "speakerUpdate", value: 3 } });
          break;
        case "node-failure":
          v2 = new SimulateScenario({ scenario: { case: "nodeFailure", value: true } });
          break;
        case "server-leave":
          v2 = new SimulateScenario({ scenario: { case: "serverLeave", value: true } });
          break;
        case "migration":
          v2 = new SimulateScenario({ scenario: { case: "migration", value: true } });
          break;
        case "resume-reconnect":
          this.engine.failNext(), yield this.engine.client.handleOnClose("simulate resume-disconnect");
          break;
        case "disconnect-signal-on-resume":
          l2 = () => __awaiter(this, void 0, void 0, function* () {
            yield this.engine.client.handleOnClose("simulate resume-disconnect");
          }), v2 = new SimulateScenario({ scenario: { case: "disconnectSignalOnResume", value: true } });
          break;
        case "disconnect-signal-on-resume-no-messages":
          l2 = () => __awaiter(this, void 0, void 0, function* () {
            yield this.engine.client.handleOnClose("simulate resume-disconnect");
          }), v2 = new SimulateScenario({ scenario: { case: "disconnectSignalOnResumeNoMessages", value: true } });
          break;
        case "full-reconnect":
          this.engine.fullReconnectOnNext = true, yield this.engine.client.handleOnClose("simulate full-reconnect");
          break;
        case "force-tcp":
        case "force-tls":
          v2 = new SimulateScenario({ scenario: { case: "switchCandidateProtocol", value: u2 === "force-tls" ? 2 : 1 } }), l2 = () => __awaiter(this, void 0, void 0, function* () {
            const S2 = this.engine.client.onLeave;
            S2 && S2(new LeaveRequest({ reason: DisconnectReason.CLIENT_INITIATED, canReconnect: true }));
          });
          break;
        case "subscriber-bandwidth":
          if (c === void 0 || typeof c != "number")
            throw new Error("subscriber-bandwidth requires a number as argument");
          v2 = new SimulateScenario({ scenario: { case: "subscriberBandwidth", value: BigInt(c) } });
          break;
      }
      v2 && (yield this.engine.client.sendSimulateScenario(v2), yield l2());
    });
  }
  /**
  * Returns true if audio playback is enabled
  */
  get canPlaybackAudio() {
    return this.audioEnabled;
  }
  /**
  * Returns true if video playback is enabled
  */
  get canPlaybackVideo() {
    return !this.isVideoPlaybackBlocked;
  }
  getActiveDevice(u2) {
    return this.localParticipant.activeDeviceMap.get(u2);
  }
  /**
  * Switches all active devices used in this room to the given device.
  *
  * Note: setting AudioOutput is not supported on some browsers. See [setSinkId](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/setSinkId#browser_compatibility)
  *
  * @param kind use `videoinput` for camera track,
  *  `audioinput` for microphone track,
  *  `audiooutput` to set speaker for all incoming audio tracks
  * @param deviceId
  */
  switchActiveDevice(u2, c) {
    let l2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
    var v2, S2, g2;
    return __awaiter(this, void 0, void 0, function* () {
      let E2 = false, _ = true;
      const k = l2 ? { exact: c } : c;
      if (u2 === "audioinput") {
        const L2 = this.options.audioCaptureDefaults.deviceId;
        this.options.audioCaptureDefaults.deviceId = k, E2 = L2 !== k;
        const M2 = Array.from(this.localParticipant.audioTrackPublications.values()).filter(($) => $.source === Track.Source.Microphone);
        try {
          _ = (yield Promise.all(M2.map(($) => {
            var J2;
            return (J2 = $.audioTrack) === null || J2 === void 0 ? void 0 : J2.setDeviceId(k);
          }))).every(($) => $ === true);
        } catch ($) {
          throw this.options.audioCaptureDefaults.deviceId = L2, $;
        }
      } else if (u2 === "videoinput") {
        const L2 = this.options.videoCaptureDefaults.deviceId;
        this.options.videoCaptureDefaults.deviceId = k, E2 = L2 !== k;
        const M2 = Array.from(this.localParticipant.videoTrackPublications.values()).filter(($) => $.source === Track.Source.Camera);
        try {
          _ = (yield Promise.all(M2.map(($) => {
            var J2;
            return (J2 = $.videoTrack) === null || J2 === void 0 ? void 0 : J2.setDeviceId(k);
          }))).every(($) => $ === true);
        } catch ($) {
          throw this.options.videoCaptureDefaults.deviceId = L2, $;
        }
      } else if (u2 === "audiooutput") {
        if (!supportsSetSinkId() && !this.options.webAudioMix || this.options.webAudioMix && this.audioContext && !("setSinkId" in this.audioContext))
          throw new Error("cannot switch audio output, setSinkId not supported");
        (v2 = (g2 = this.options).audioOutput) !== null && v2 !== void 0 || (g2.audioOutput = {});
        const L2 = this.options.audioOutput.deviceId;
        this.options.audioOutput.deviceId = c, E2 = L2 !== k;
        try {
          this.options.webAudioMix ? (S2 = this.audioContext) === null || S2 === void 0 || S2.setSinkId(c) : yield Promise.all(Array.from(this.remoteParticipants.values()).map((M2) => M2.setAudioOutput({ deviceId: c })));
        } catch (M2) {
          throw this.options.audioOutput.deviceId = L2, M2;
        }
      }
      return E2 && _ && (this.localParticipant.activeDeviceMap.set(u2, c), this.emit(RoomEvent.ActiveDeviceChanged, u2, c)), _;
    });
  }
  setupLocalParticipantEvents() {
    this.localParticipant.on(ParticipantEvent.ParticipantMetadataChanged, this.onLocalParticipantMetadataChanged).on(ParticipantEvent.ParticipantNameChanged, this.onLocalParticipantNameChanged).on(ParticipantEvent.TrackMuted, this.onLocalTrackMuted).on(ParticipantEvent.TrackUnmuted, this.onLocalTrackUnmuted).on(ParticipantEvent.LocalTrackPublished, this.onLocalTrackPublished).on(ParticipantEvent.LocalTrackUnpublished, this.onLocalTrackUnpublished).on(ParticipantEvent.ConnectionQualityChanged, this.onLocalConnectionQualityChanged).on(ParticipantEvent.MediaDevicesError, this.onMediaDevicesError).on(ParticipantEvent.AudioStreamAcquired, this.startAudio).on(ParticipantEvent.ParticipantPermissionsChanged, this.onLocalParticipantPermissionsChanged);
  }
  recreateEngine() {
    var u2;
    (u2 = this.engine) === null || u2 === void 0 || u2.close(), this.engine = void 0, this.isResuming = false, this.remoteParticipants.clear(), this.sidToIdentity.clear(), this.bufferedEvents = [], this.maybeCreateEngine();
  }
  onTrackAdded(u2, c, l2) {
    if (this.state === ConnectionState.Connecting || this.state === ConnectionState.Reconnecting) {
      const L2 = () => {
        this.onTrackAdded(u2, c, l2), M2();
      }, M2 = () => {
        this.off(RoomEvent.Reconnected, L2), this.off(RoomEvent.Connected, L2), this.off(RoomEvent.Disconnected, M2);
      };
      this.once(RoomEvent.Reconnected, L2), this.once(RoomEvent.Connected, L2), this.once(RoomEvent.Disconnected, M2);
      return;
    }
    if (this.state === ConnectionState.Disconnected) {
      this.log.warn("skipping incoming track after Room disconnected", this.logContext);
      return;
    }
    const v2 = unpackStreamId(c.id), S2 = v2[0];
    let g2 = v2[1], E2 = u2.id;
    if (g2 && g2.startsWith("TR") && (E2 = g2), S2 === this.localParticipant.sid) {
      this.log.warn("tried to create RemoteParticipant for local participant", this.logContext);
      return;
    }
    const _ = Array.from(this.remoteParticipants.values()).find((L2) => L2.sid === S2);
    if (!_) {
      this.log.error("Tried to add a track for a participant, that's not present. Sid: ".concat(S2), this.logContext);
      return;
    }
    let k;
    this.options.adaptiveStream && (typeof this.options.adaptiveStream == "object" ? k = this.options.adaptiveStream : k = {}), _.addSubscribedMediaTrack(u2, E2, c, l2, k);
  }
  handleDisconnect() {
    let u2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true, c = arguments.length > 1 ? arguments[1] : void 0;
    var l2;
    if (this.clearConnectionReconcile(), this.isResuming = false, this.bufferedEvents = [], this.state !== ConnectionState.Disconnected) {
      this.regionUrl = void 0;
      try {
        this.remoteParticipants.forEach((v2) => {
          v2.trackPublications.forEach((S2) => {
            v2.unpublishTrack(S2.trackSid);
          });
        }), this.localParticipant.trackPublications.forEach((v2) => {
          var S2, g2;
          v2.track && this.localParticipant.unpublishTrack(v2.track, u2), u2 && ((S2 = v2.track) === null || S2 === void 0 || S2.detach(), (g2 = v2.track) === null || g2 === void 0 || g2.stop());
        }), this.localParticipant.off(ParticipantEvent.ParticipantMetadataChanged, this.onLocalParticipantMetadataChanged).off(ParticipantEvent.ParticipantNameChanged, this.onLocalParticipantNameChanged).off(ParticipantEvent.TrackMuted, this.onLocalTrackMuted).off(ParticipantEvent.TrackUnmuted, this.onLocalTrackUnmuted).off(ParticipantEvent.LocalTrackPublished, this.onLocalTrackPublished).off(ParticipantEvent.LocalTrackUnpublished, this.onLocalTrackUnpublished).off(ParticipantEvent.ConnectionQualityChanged, this.onLocalConnectionQualityChanged).off(ParticipantEvent.MediaDevicesError, this.onMediaDevicesError).off(ParticipantEvent.AudioStreamAcquired, this.startAudio).off(ParticipantEvent.ParticipantPermissionsChanged, this.onLocalParticipantPermissionsChanged), this.localParticipant.trackPublications.clear(), this.localParticipant.videoTrackPublications.clear(), this.localParticipant.audioTrackPublications.clear(), this.remoteParticipants.clear(), this.sidToIdentity.clear(), this.activeSpeakers = [], this.audioContext && typeof this.options.webAudioMix == "boolean" && (this.audioContext.close(), this.audioContext = void 0), isWeb() && (window.removeEventListener("beforeunload", this.onPageLeave), window.removeEventListener("pagehide", this.onPageLeave), window.removeEventListener("freeze", this.onPageLeave), (l2 = navigator.mediaDevices) === null || l2 === void 0 || l2.removeEventListener("devicechange", this.handleDeviceChange));
      } finally {
        this.setAndEmitConnectionState(ConnectionState.Disconnected), this.emit(RoomEvent.Disconnected, c);
      }
    }
  }
  handleParticipantDisconnected(u2, c) {
    this.remoteParticipants.delete(u2), c && (c.trackPublications.forEach((l2) => {
      c.unpublishTrack(l2.trackSid, true);
    }), this.emit(RoomEvent.ParticipantDisconnected, c));
  }
  acquireAudioContext() {
    var u2, c;
    return __awaiter(this, void 0, void 0, function* () {
      if (typeof this.options.webAudioMix != "boolean" && this.options.webAudioMix.audioContext ? this.audioContext = this.options.webAudioMix.audioContext : (!this.audioContext || this.audioContext.state === "closed") && (this.audioContext = (u2 = getNewAudioContext()) !== null && u2 !== void 0 ? u2 : void 0), this.audioContext && this.audioContext.state === "suspended")
        try {
          yield this.audioContext.resume();
        } catch (v2) {
          this.log.warn("Could not resume audio context", Object.assign(Object.assign({}, this.logContext), { error: v2 }));
        }
      this.options.webAudioMix && this.remoteParticipants.forEach((v2) => v2.setAudioContext(this.audioContext)), this.localParticipant.setAudioContext(this.audioContext);
      const l2 = ((c = this.audioContext) === null || c === void 0 ? void 0 : c.state) === "running";
      l2 !== this.canPlaybackAudio && (this.audioEnabled = l2, this.emit(RoomEvent.AudioPlaybackStatusChanged, l2));
    });
  }
  createParticipant(u2, c) {
    var l2;
    let v2;
    return c ? v2 = RemoteParticipant.fromParticipantInfo(this.engine.client, c) : v2 = new RemoteParticipant(this.engine.client, "", u2, void 0, void 0, { loggerContextCb: () => this.logContext, loggerName: this.options.loggerName }), this.options.webAudioMix && v2.setAudioContext(this.audioContext), !((l2 = this.options.audioOutput) === null || l2 === void 0) && l2.deviceId && v2.setAudioOutput(this.options.audioOutput).catch((S2) => this.log.warn("Could not set audio output: ".concat(S2.message), this.logContext)), v2;
  }
  getOrCreateParticipant(u2, c) {
    if (this.remoteParticipants.has(u2)) {
      const v2 = this.remoteParticipants.get(u2);
      return c && v2.updateInfo(c) && this.sidToIdentity.set(c.sid, c.identity), v2;
    }
    const l2 = this.createParticipant(u2, c);
    return this.remoteParticipants.set(u2, l2), this.sidToIdentity.set(c.sid, c.identity), this.emitWhenConnected(RoomEvent.ParticipantConnected, l2), l2.on(ParticipantEvent.TrackPublished, (v2) => {
      this.emitWhenConnected(RoomEvent.TrackPublished, v2, l2);
    }).on(ParticipantEvent.TrackSubscribed, (v2, S2) => {
      v2.kind === Track.Kind.Audio ? (v2.on(TrackEvent.AudioPlaybackStarted, this.handleAudioPlaybackStarted), v2.on(TrackEvent.AudioPlaybackFailed, this.handleAudioPlaybackFailed)) : v2.kind === Track.Kind.Video && (v2.on(TrackEvent.VideoPlaybackFailed, this.handleVideoPlaybackFailed), v2.on(TrackEvent.VideoPlaybackStarted, this.handleVideoPlaybackStarted)), this.emit(RoomEvent.TrackSubscribed, v2, S2, l2);
    }).on(ParticipantEvent.TrackUnpublished, (v2) => {
      this.emit(RoomEvent.TrackUnpublished, v2, l2);
    }).on(ParticipantEvent.TrackUnsubscribed, (v2, S2) => {
      this.emit(RoomEvent.TrackUnsubscribed, v2, S2, l2);
    }).on(ParticipantEvent.TrackSubscriptionFailed, (v2) => {
      this.emit(RoomEvent.TrackSubscriptionFailed, v2, l2);
    }).on(ParticipantEvent.TrackMuted, (v2) => {
      this.emitWhenConnected(RoomEvent.TrackMuted, v2, l2);
    }).on(ParticipantEvent.TrackUnmuted, (v2) => {
      this.emitWhenConnected(RoomEvent.TrackUnmuted, v2, l2);
    }).on(ParticipantEvent.ParticipantMetadataChanged, (v2) => {
      this.emitWhenConnected(RoomEvent.ParticipantMetadataChanged, v2, l2);
    }).on(ParticipantEvent.ParticipantNameChanged, (v2) => {
      this.emitWhenConnected(RoomEvent.ParticipantNameChanged, v2, l2);
    }).on(ParticipantEvent.ConnectionQualityChanged, (v2) => {
      this.emitWhenConnected(RoomEvent.ConnectionQualityChanged, v2, l2);
    }).on(ParticipantEvent.ParticipantPermissionsChanged, (v2) => {
      this.emitWhenConnected(RoomEvent.ParticipantPermissionsChanged, v2, l2);
    }).on(ParticipantEvent.TrackSubscriptionStatusChanged, (v2, S2) => {
      this.emitWhenConnected(RoomEvent.TrackSubscriptionStatusChanged, v2, S2, l2);
    }).on(ParticipantEvent.TrackSubscriptionFailed, (v2, S2) => {
      this.emit(RoomEvent.TrackSubscriptionFailed, v2, l2, S2);
    }).on(ParticipantEvent.TrackSubscriptionPermissionChanged, (v2, S2) => {
      this.emitWhenConnected(RoomEvent.TrackSubscriptionPermissionChanged, v2, S2, l2);
    }), c && l2.updateInfo(c), l2;
  }
  sendSyncState() {
    const u2 = Array.from(this.remoteParticipants.values()).reduce((l2, v2) => (l2.push(...v2.getTrackPublications()), l2), []), c = this.localParticipant.getTrackPublications();
    this.engine.sendSyncState(u2, c);
  }
  /**
  * After resuming, we'll need to notify the server of the current
  * subscription settings.
  */
  updateSubscriptions() {
    for (const u2 of this.remoteParticipants.values())
      for (const c of u2.videoTrackPublications.values())
        c.isSubscribed && c instanceof RemoteTrackPublication && c.emitTrackUpdate();
  }
  getRemoteParticipantBySid(u2) {
    const c = this.sidToIdentity.get(u2);
    if (c)
      return this.remoteParticipants.get(c);
  }
  registerConnectionReconcile() {
    this.clearConnectionReconcile();
    let u2 = 0;
    this.connectionReconcileInterval = CriticalTimers.setInterval(() => {
      !this.engine || // engine detected close, but Room missed it
      this.engine.isClosed || // transports failed without notifying engine
      !this.engine.verifyTransport() ? (u2++, this.log.warn("detected connection state mismatch", Object.assign(Object.assign({}, this.logContext), { numFailures: u2, engine: { closed: this.engine.isClosed, transportsConnected: this.engine.verifyTransport() } })), u2 >= 3 && (this.recreateEngine(), this.handleDisconnect(this.options.stopLocalTrackOnUnpublish, DisconnectReason.STATE_MISMATCH))) : u2 = 0;
    }, connectionReconcileFrequency);
  }
  clearConnectionReconcile() {
    this.connectionReconcileInterval && CriticalTimers.clearInterval(this.connectionReconcileInterval);
  }
  setAndEmitConnectionState(u2) {
    return u2 === this.state ? false : (this.state = u2, this.emit(RoomEvent.ConnectionStateChanged, this.state), true);
  }
  emitBufferedEvents() {
    this.bufferedEvents.forEach((u2) => {
      let [c, l2] = u2;
      this.emit(c, ...l2);
    }), this.bufferedEvents = [];
  }
  emitWhenConnected(u2) {
    for (var c = arguments.length, l2 = new Array(c > 1 ? c - 1 : 0), v2 = 1; v2 < c; v2++)
      l2[v2 - 1] = arguments[v2];
    if (this.state === ConnectionState.Reconnecting || this.isResuming || !this.engine || this.engine.pendingReconnect)
      this.bufferedEvents.push([u2, l2]);
    else if (this.state === ConnectionState.Connected)
      return this.emit(u2, ...l2);
    return false;
  }
  /**
  * Allows to populate a room with simulated participants.
  * No actual connection to a server will be established, all state is
  * @experimental
  */
  simulateParticipants(u2) {
    var c, l2;
    return __awaiter(this, void 0, void 0, function* () {
      const v2 = Object.assign({ audio: true, video: true, useRealTracks: false }, u2.publish), S2 = Object.assign({ count: 9, audio: false, video: true, aspectRatios: [1.66, 1.7, 1.3] }, u2.participants);
      if (this.handleDisconnect(), this.roomInfo = new Room$1({ sid: "RM_SIMULATED", name: "simulated-room", emptyTimeout: 0, maxParticipants: 0, creationTime: protoInt64.parse((/* @__PURE__ */ new Date()).getTime()), metadata: "", numParticipants: 1, numPublishers: 1, turnPassword: "", enabledCodecs: [], activeRecording: false }), this.localParticipant.updateInfo(new ParticipantInfo({ identity: "simulated-local", name: "local-name" })), this.setupLocalParticipantEvents(), this.emit(RoomEvent.SignalConnected), this.emit(RoomEvent.Connected), this.setAndEmitConnectionState(ConnectionState.Connected), v2.video) {
        const g2 = new LocalTrackPublication(Track.Kind.Video, new TrackInfo({ source: TrackSource.CAMERA, sid: Math.floor(Math.random() * 1e4).toString(), type: TrackType.AUDIO, name: "video-dummy" }), new LocalVideoTrack(v2.useRealTracks ? (yield window.navigator.mediaDevices.getUserMedia({ video: true })).getVideoTracks()[0] : createDummyVideoStreamTrack(160 * ((c = S2.aspectRatios[0]) !== null && c !== void 0 ? c : 1), 160, true, true), void 0, false, { loggerName: this.options.loggerName, loggerContextCb: () => this.logContext }), { loggerName: this.options.loggerName, loggerContextCb: () => this.logContext });
        this.localParticipant.addTrackPublication(g2), this.localParticipant.emit(ParticipantEvent.LocalTrackPublished, g2);
      }
      if (v2.audio) {
        const g2 = new LocalTrackPublication(Track.Kind.Audio, new TrackInfo({ source: TrackSource.MICROPHONE, sid: Math.floor(Math.random() * 1e4).toString(), type: TrackType.AUDIO }), new LocalAudioTrack(v2.useRealTracks ? (yield navigator.mediaDevices.getUserMedia({ audio: true })).getAudioTracks()[0] : getEmptyAudioStreamTrack(), void 0, false, this.audioContext, { loggerName: this.options.loggerName, loggerContextCb: () => this.logContext }), { loggerName: this.options.loggerName, loggerContextCb: () => this.logContext });
        this.localParticipant.addTrackPublication(g2), this.localParticipant.emit(ParticipantEvent.LocalTrackPublished, g2);
      }
      for (let g2 = 0; g2 < S2.count - 1; g2 += 1) {
        let E2 = new ParticipantInfo({ sid: Math.floor(Math.random() * 1e4).toString(), identity: "simulated-".concat(g2), state: ParticipantInfo_State.ACTIVE, tracks: [], joinedAt: protoInt64.parse(Date.now()) });
        const _ = this.getOrCreateParticipant(E2.identity, E2);
        if (S2.video) {
          const k = createDummyVideoStreamTrack(160 * ((l2 = S2.aspectRatios[g2 % S2.aspectRatios.length]) !== null && l2 !== void 0 ? l2 : 1), 160, false, true), L2 = new TrackInfo({ source: TrackSource.CAMERA, sid: Math.floor(Math.random() * 1e4).toString(), type: TrackType.AUDIO });
          _.addSubscribedMediaTrack(k, L2.sid, new MediaStream([k])), E2.tracks = [...E2.tracks, L2];
        }
        if (S2.audio) {
          const k = getEmptyAudioStreamTrack(), L2 = new TrackInfo({ source: TrackSource.MICROPHONE, sid: Math.floor(Math.random() * 1e4).toString(), type: TrackType.AUDIO });
          _.addSubscribedMediaTrack(k, L2.sid, new MediaStream([k])), E2.tracks = [...E2.tracks, L2];
        }
        _.updateInfo(E2);
      }
    });
  }
  // /** @internal */
  emit(u2) {
    for (var c = arguments.length, l2 = new Array(c > 1 ? c - 1 : 0), v2 = 1; v2 < c; v2++)
      l2[v2 - 1] = arguments[v2];
    if (u2 !== RoomEvent.ActiveSpeakersChanged) {
      const S2 = mapArgs(l2).filter((g2) => g2 !== void 0);
      this.log.debug("room event ".concat(u2), Object.assign(Object.assign({}, this.logContext), { event: u2, args: S2 }));
    }
    return super.emit(u2, ...l2);
  }
};
function mapArgs(a92) {
  return a92.map((u2) => {
    if (u2)
      return Array.isArray(u2) ? mapArgs(u2) : typeof u2 == "object" ? "logContext" in u2 && u2.logContext : u2;
  });
}
var CheckStatus;
(function(a92) {
  a92[a92.IDLE = 0] = "IDLE", a92[a92.RUNNING = 1] = "RUNNING", a92[a92.SKIPPED = 2] = "SKIPPED", a92[a92.SUCCESS = 3] = "SUCCESS", a92[a92.FAILED = 4] = "FAILED";
})(CheckStatus || (CheckStatus = {}));
class Checker extends eventsExports.EventEmitter {
  constructor(u2, c) {
    let l2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    super(), this.status = CheckStatus.IDLE, this.logs = [], this.errorsAsWarnings = false, this.url = u2, this.token = c, this.name = this.constructor.name, this.room = new Room$2(l2.roomOptions), this.connectOptions = l2.connectOptions, l2.errorsAsWarnings && (this.errorsAsWarnings = l2.errorsAsWarnings);
  }
  run(u2) {
    return __awaiter(this, void 0, void 0, function* () {
      if (this.status !== CheckStatus.IDLE)
        throw Error("check is running already");
      this.setStatus(CheckStatus.RUNNING);
      try {
        yield this.perform();
      } catch (c) {
        c instanceof Error && (this.errorsAsWarnings ? this.appendWarning(c.message) : this.appendError(c.message));
      }
      return yield this.disconnect(), yield new Promise((c) => setTimeout(c, 500)), this.status !== CheckStatus.SKIPPED && this.setStatus(this.isSuccess() ? CheckStatus.SUCCESS : CheckStatus.FAILED), u2 && u2(), this.getInfo();
    });
  }
  isSuccess() {
    return !this.logs.some((u2) => u2.level === "error");
  }
  connect() {
    return __awaiter(this, void 0, void 0, function* () {
      return this.room.state === ConnectionState.Connected ? this.room : (yield this.room.connect(this.url, this.token), this.room);
    });
  }
  disconnect() {
    return __awaiter(this, void 0, void 0, function* () {
      this.room && this.room.state !== ConnectionState.Disconnected && (yield this.room.disconnect(), yield new Promise((u2) => setTimeout(u2, 500)));
    });
  }
  skip() {
    this.setStatus(CheckStatus.SKIPPED);
  }
  appendMessage(u2) {
    this.logs.push({ level: "info", message: u2 }), this.emit("update", this.getInfo());
  }
  appendWarning(u2) {
    this.logs.push({ level: "warning", message: u2 }), this.emit("update", this.getInfo());
  }
  appendError(u2) {
    this.logs.push({ level: "error", message: u2 }), this.emit("update", this.getInfo());
  }
  setStatus(u2) {
    this.status = u2, this.emit("update", this.getInfo());
  }
  get engine() {
    var u2;
    return (u2 = this.room) === null || u2 === void 0 ? void 0 : u2.engine;
  }
  getInfo() {
    return { logs: this.logs, name: this.name, status: this.status, description: this.description };
  }
}
function createLocalTracks(a92) {
  var u2, c;
  return __awaiter(this, void 0, void 0, function* () {
    a92 ?? (a92 = {}), (u2 = a92.audio) !== null && u2 !== void 0 || (a92.audio = true), (c = a92.video) !== null && c !== void 0 || (a92.video = true);
    const l2 = mergeDefaultOptions(a92, audioDefaults, videoDefaults), v2 = constraintsForOptions(l2), S2 = navigator.mediaDevices.getUserMedia(v2);
    a92.audio && (DeviceManager.userMediaPromiseMap.set("audioinput", S2), S2.catch(() => DeviceManager.userMediaPromiseMap.delete("audioinput"))), a92.video && (DeviceManager.userMediaPromiseMap.set("videoinput", S2), S2.catch(() => DeviceManager.userMediaPromiseMap.delete("videoinput")));
    const g2 = yield S2;
    return g2.getTracks().map((E2) => {
      const _ = E2.kind === "audio";
      _ ? a92.audio : a92.video;
      let k;
      const L2 = _ ? v2.audio : v2.video;
      typeof L2 != "boolean" && (k = L2), k ? k.deviceId = E2.getSettings().deviceId : k = { deviceId: E2.getSettings().deviceId };
      const M2 = mediaTrackToLocalTrack(E2, k);
      return M2.kind === Track.Kind.Video ? M2.source = Track.Source.Camera : M2.kind === Track.Kind.Audio && (M2.source = Track.Source.Microphone), M2.mediaStream = g2, M2;
    });
  });
}
function createLocalVideoTrack(a92) {
  return __awaiter(this, void 0, void 0, function* () {
    return (yield createLocalTracks({ audio: false, video: a92 }))[0];
  });
}
function createLocalAudioTrack(a92) {
  return __awaiter(this, void 0, void 0, function* () {
    return (yield createLocalTracks({ audio: a92, video: false }))[0];
  });
}
class PublishAudioCheck extends Checker {
  get description() {
    return "Can publish audio";
  }
  perform() {
    var u2;
    return __awaiter(this, void 0, void 0, function* () {
      const c = yield this.connect(), l2 = yield createLocalAudioTrack();
      c.localParticipant.publishTrack(l2), yield new Promise((g2) => setTimeout(g2, 3e3));
      const v2 = yield (u2 = l2.sender) === null || u2 === void 0 ? void 0 : u2.getStats();
      if (!v2)
        throw new Error("Could not get RTCStats");
      let S2 = 0;
      if (v2.forEach((g2) => {
        g2.type === "outbound-rtp" && g2.mediaType === "audio" && (S2 = g2.packetsSent);
      }), S2 === 0)
        throw new Error("Could not determine packets are sent");
      this.appendMessage("published ".concat(S2, " audio packets"));
    });
  }
}
class PublishVideoCheck extends Checker {
  get description() {
    return "Can publish video";
  }
  perform() {
    var u2;
    return __awaiter(this, void 0, void 0, function* () {
      const c = yield this.connect(), l2 = yield createLocalVideoTrack();
      c.localParticipant.publishTrack(l2), yield new Promise((g2) => setTimeout(g2, 3e3));
      const v2 = yield (u2 = l2.sender) === null || u2 === void 0 ? void 0 : u2.getStats();
      if (!v2)
        throw new Error("Could not get RTCStats");
      let S2 = 0;
      if (v2.forEach((g2) => {
        g2.type === "outbound-rtp" && g2.mediaType === "video" && (S2 = g2.packetsSent);
      }), S2 === 0)
        throw new Error("Could not determine packets are sent");
      this.appendMessage("published ".concat(S2, " video packets"));
    });
  }
}
class ReconnectCheck extends Checker {
  get description() {
    return "Resuming connection after interruption";
  }
  perform() {
    var u2;
    return __awaiter(this, void 0, void 0, function* () {
      const c = yield this.connect();
      let l2 = false, v2 = false, S2;
      const g2 = new Promise((_) => {
        setTimeout(_, 5e3), S2 = _;
      });
      c.on(RoomEvent.Reconnecting, () => {
        l2 = true;
      }).on(RoomEvent.Reconnected, () => {
        v2 = true, S2(true);
      }), (u2 = c.engine.client.ws) === null || u2 === void 0 || u2.close();
      const E2 = c.engine.client.onClose;
      if (E2 && E2(""), yield g2, l2) {
        if (!v2 || c.state !== ConnectionState.Connected)
          throw this.appendWarning("reconnection is only possible in Redis-based configurations"), new Error("Not able to reconnect");
      } else
        throw new Error("Did not attempt to reconnect");
    });
  }
}
class TURNCheck extends Checker {
  get description() {
    return "Can connect via TURN";
  }
  perform() {
    var u2, c;
    return __awaiter(this, void 0, void 0, function* () {
      const l2 = new SignalClient(), v2 = yield l2.join(this.url, this.token, { autoSubscribe: true, maxRetries: 0, e2eeEnabled: false, websocketTimeout: 15e3 });
      let S2 = false, g2 = false, E2 = false;
      for (let _ of v2.iceServers)
        for (let k of _.urls)
          k.startsWith("turn:") ? (g2 = true, E2 = true) : k.startsWith("turns:") && (g2 = true, E2 = true, S2 = true), k.startsWith("stun:") && (E2 = true);
      E2 ? g2 && !S2 && this.appendWarning("TURN is configured server side, but TURN/TLS is unavailable.") : this.appendWarning("No STUN servers configured on server side."), yield l2.close(), !((c = (u2 = this.connectOptions) === null || u2 === void 0 ? void 0 : u2.rtcConfig) === null || c === void 0) && c.iceServers || g2 ? yield this.room.connect(this.url, this.token, { rtcConfig: { iceTransportPolicy: "relay" } }) : (this.appendWarning("No TURN servers configured."), this.skip(), yield new Promise((_) => setTimeout(_, 0)));
    });
  }
}
class WebRTCCheck extends Checker {
  get description() {
    return "Establishing WebRTC connection";
  }
  perform() {
    return __awaiter(this, void 0, void 0, function* () {
      let u2 = false, c = false;
      this.room.on(RoomEvent.SignalConnected, () => {
        const l2 = this.room.engine.client.onTrickle;
        this.room.engine.client.onTrickle = (v2, S2) => {
          if (v2.candidate) {
            const g2 = new RTCIceCandidate(v2);
            let E2 = "".concat(g2.protocol, " ").concat(g2.address, ":").concat(g2.port, " ").concat(g2.type);
            g2.address && (isIPPrivate(g2.address) ? E2 += " (private)" : g2.protocol === "tcp" && g2.tcpType === "passive" ? (u2 = true, E2 += " (passive)") : g2.protocol === "udp" && (c = true)), this.appendMessage(E2);
          }
          l2 && l2(v2, S2);
        }, this.room.engine.pcManager && (this.room.engine.pcManager.subscriber.onIceCandidateError = (v2) => {
          v2 instanceof RTCPeerConnectionIceErrorEvent && this.appendWarning("error with ICE candidate: ".concat(v2.errorCode, " ").concat(v2.errorText, " ").concat(v2.url));
        });
      });
      try {
        yield this.connect(), livekitLogger.info("now the room is connected");
      } catch (l2) {
        throw this.appendWarning("ports need to be open on firewall in order to connect."), l2;
      }
      u2 || this.appendWarning("Server is not configured for ICE/TCP"), c || this.appendWarning("No public IPv4 UDP candidates were found. Your server is likely not configured correctly");
    });
  }
}
function isIPPrivate(a92) {
  const u2 = a92.split(".");
  if (u2.length === 4) {
    if (u2[0] === "10")
      return true;
    if (u2[0] === "192" && u2[1] === "168")
      return true;
    if (u2[0] === "172") {
      const c = parseInt(u2[1], 10);
      if (c >= 16 && c <= 31)
        return true;
    }
  }
  return false;
}
class WebSocketCheck extends Checker {
  get description() {
    return "Connecting to signal connection via WebSocket";
  }
  perform() {
    var u2, c, l2;
    return __awaiter(this, void 0, void 0, function* () {
      (this.url.startsWith("ws:") || this.url.startsWith("http:")) && this.appendWarning("Server is insecure, clients may block connections to it");
      let v2 = new SignalClient();
      const S2 = yield v2.join(this.url, this.token, { autoSubscribe: true, maxRetries: 0, e2eeEnabled: false, websocketTimeout: 15e3 });
      this.appendMessage("Connected to server, version ".concat(S2.serverVersion, ".")), ((u2 = S2.serverInfo) === null || u2 === void 0 ? void 0 : u2.edition) === ServerInfo_Edition.Cloud && !((c = S2.serverInfo) === null || c === void 0) && c.region && this.appendMessage("LiveKit Cloud: ".concat((l2 = S2.serverInfo) === null || l2 === void 0 ? void 0 : l2.region)), yield v2.close();
    });
  }
}
class ConnectionCheck extends eventsExports.EventEmitter {
  constructor(u2, c) {
    super(), this.checkResults = /* @__PURE__ */ new Map(), this.url = u2, this.token = c;
  }
  getNextCheckId() {
    const u2 = this.checkResults.size;
    return this.checkResults.set(u2, { logs: [], status: CheckStatus.IDLE, name: "", description: "" }), u2;
  }
  updateCheck(u2, c) {
    this.checkResults.set(u2, c), this.emit("checkUpdate", u2, c);
  }
  isSuccess() {
    return Array.from(this.checkResults.values()).every((u2) => u2.status !== CheckStatus.FAILED);
  }
  getResults() {
    return Array.from(this.checkResults.values());
  }
  createAndRunCheck(u2) {
    return __awaiter(this, void 0, void 0, function* () {
      const c = this.getNextCheckId(), l2 = new u2(this.url, this.token), v2 = (g2) => {
        this.updateCheck(c, g2);
      };
      l2.on("update", v2);
      const S2 = yield l2.run();
      return l2.off("update", v2), S2;
    });
  }
  checkWebsocket() {
    return __awaiter(this, void 0, void 0, function* () {
      return this.createAndRunCheck(WebSocketCheck);
    });
  }
  checkWebRTC() {
    return __awaiter(this, void 0, void 0, function* () {
      return this.createAndRunCheck(WebRTCCheck);
    });
  }
  checkTURN() {
    return __awaiter(this, void 0, void 0, function* () {
      return this.createAndRunCheck(TURNCheck);
    });
  }
  checkReconnect() {
    return __awaiter(this, void 0, void 0, function* () {
      return this.createAndRunCheck(ReconnectCheck);
    });
  }
  checkPublishAudio() {
    return __awaiter(this, void 0, void 0, function* () {
      return this.createAndRunCheck(PublishAudioCheck);
    });
  }
  checkPublishVideo() {
    return __awaiter(this, void 0, void 0, function* () {
      return this.createAndRunCheck(PublishVideoCheck);
    });
  }
}
lib$2.LiveApiModel.Rendering;
lib$2.LiveApiModel.VideoRendering;
lib$2.LiveApiModel.AudioRendering;
lib$2.LiveApiModel.RenderingQuality;
lib$2.LiveApiModel.Encoding;
lib$2.LiveApiModel.VideoEncoding;
lib$2.LiveApiModel.AudioEncoding;
const ProjectBroadcastPhase = lib$2.LiveApiModel.ProjectBroadcastPhase, Role = lib$2.LiveApiModel.Role;
lib$2.LiveApiModel.DestinationAddress;
lib$2.LiveApiModel.VideoCodec;
lib$2.LiveApiModel.AudioCodec;
lib$2.LiveApiModel.VideoCodecRateControl;
lib$2.LiveApiModel.VideoCodecProfile;
var Permission = /* @__PURE__ */ ((a92) => (a92[a92.ReadProject = 0] = "ReadProject", a92[a92.UpdateProject = 1] = "UpdateProject", a92[a92.JoinRoom = 2] = "JoinRoom", a92[a92.InviteGuests = 3] = "InviteGuests", a92[a92.ManageGuests = 4] = "ManageGuests", a92[a92.ManageBroadcast = 5] = "ManageBroadcast", a92[a92.ManageSelf = 6] = "ManageSelf", a92))(Permission || {});
const permissions = { [Role.ROLE_HOST]: [
  0,
  1,
  2,
  3,
  4,
  5
  /* ManageBroadcast */
], [Role.ROLE_COHOST]: [
  0,
  1,
  2,
  3,
  4,
  5
  /* ManageBroadcast */
], [Role.ROLE_CONTRIBUTOR]: [
  0,
  1,
  2,
  3
  /* InviteGuests */
], [Role.ROLE_GUEST]: [
  0,
  2,
  6
  /* ManageSelf */
], [Role.ROLE_VIEWER]: [
  0,
  2
  /* JoinRoom */
], [Role.ROLE_IMPERSONATE]: [
  0,
  1,
  3,
  4,
  5
  /* ManageBroadcast */
] }, hasPermission = (a92, u2) => {
  var c;
  return a92 ? !!((c = permissions[a92]) != null && c.find((l2) => l2 === u2)) : false;
};
var DataType = /* @__PURE__ */ ((a92) => (a92.ChatMessage = "ChatMessage", a92.ParticipantMetadataUpdate = "ParticipantMetadataUpdate", a92))(DataType || {}), SpecialEvent = /* @__PURE__ */ ((a92) => (a92.Chat = "Chat", a92))(SpecialEvent || {});
const decoder$1 = new TextDecoder(), encoder$1 = new TextEncoder();
class RoomsManager {
  constructor() {
    ht(this, "rooms");
    this.rooms = /* @__PURE__ */ new Map(), this.addRoom = this.addRoom.bind(this), this.ensureRoom = this.ensureRoom.bind(this), this.removeRoom = this.removeRoom.bind(this);
  }
  addRoom(u2, c, l2) {
    const v2 = new RoomContext(u2, c, l2, this);
    return this.rooms.set(c, v2), v2;
  }
  ensureRoom(u2, c, l2) {
    return this.rooms.get(c) ? (this.rooms.get(c).token = l2, this.rooms.get(c)) : this.addRoom(u2, c, l2);
  }
  async removeRoom(u2) {
    const c = this.rooms.get(u2);
    if (!Room$2)
      throw new Error("room not found!");
    if (c.isConnecting)
      throw new Error("Cannot remove room: Room is in connecting state");
    c.livekitRoom && await c.livekitRoom.disconnect(true), this.rooms.delete(u2);
  }
}
class RoomContext {
  /**
  * @param baseUrl base url for the webrtc server
  * @param token get
  */
  constructor(u2, c, l2, v2) {
    ht(this, "_baseUrl");
    ht(this, "_chatHistory");
    ht(this, "_connectListeners");
    ht(this, "_roomEventListenerRegistry");
    ht(this, "_localParticipantEventListenerRegistry");
    ht(this, "_specialEventListenerRegistry");
    ht(this, "_jwt");
    ht(this, "_manager");
    ht(this, "_apiClient");
    ht(this, "audioTracks");
    ht(this, "isConnecting");
    ht(this, "livekitRoom");
    ht(this, "participants");
    ht(this, "guestParticipantMetadata");
    ht(this, "roomName");
    ht(this, "_admin");
    let S2 = CoreContext.logLevel.toLowerCase();
    setLogLevel(S2), this.livekitRoom = new Room$2({
      // automatically manage subscribed video quality
      // adaptiveStream: true,
      // optimize publishing bandwidth and CPU for published tracks
      dynacast: true,
      // default capture settings
      videoCaptureDefaults: { resolution: VideoPresets.h720.resolution }
    }), this._baseUrl = u2, this._connectListeners = [], this._roomEventListenerRegistry = {}, this._jwt = l2, Object.values(RoomEvent).forEach((g2) => {
      this._roomEventListenerRegistry[g2] = /* @__PURE__ */ new Set();
    }), this._localParticipantEventListenerRegistry = {}, Object.values(ParticipantEvent).forEach((g2) => {
      this._localParticipantEventListenerRegistry[g2] = /* @__PURE__ */ new Set();
    }), this._specialEventListenerRegistry = {}, this._manager = v2, this._chatHistory = [], this.roomName = c, this.audioTracks = [], this.participants = [], this.guestParticipantMetadata = [], this.isConnecting = false, this.subscribeToRoomEvent(RoomEvent.DataReceived, (g2, E2) => {
      var L2;
      const _ = decoder$1.decode(g2);
      switch (JSON.parse(_).type) {
        case "ChatMessage":
          return this._appendChat(g2, E2);
        case "ParticipantMetadataUpdate": {
          const M2 = decoder$1.decode(g2), $ = JSON.parse(M2);
          hasPermission((L2 = $ == null ? void 0 : $.metadata) == null ? void 0 : L2.participantRole, Permission.ManageSelf) && this._updateGuestParticipantsStore($);
          return;
        }
        default:
          return;
      }
    }), this.connect = this.connect.bind(this), this.subscribeToRoomEvent = this.subscribeToRoomEvent.bind(this), this.subscribeToConnect = this.subscribeToConnect.bind(this), this.subscribeToLocalParticipantEvent = this.subscribeToLocalParticipantEvent.bind(this), this.subscribeToSpecialEvent = this.subscribeToSpecialEvent.bind(this), this.unsubscribeFromRoomEvent = this.unsubscribeFromRoomEvent.bind(this), this.unsubscribeFromSpecialEvent = this.unsubscribeFromSpecialEvent.bind(this), this.unsubscribeFromConnect = this.unsubscribeFromConnect.bind(this), this.unsubscribeFromLocalParticipantEvent = this.unsubscribeFromLocalParticipantEvent.bind(this), this.sendChatMessage = this.sendChatMessage.bind(this), this.kickParticipant = this.kickParticipant.bind(this), this.updateParticipant = this.updateParticipant.bind(this), this.muteTrackAsAdmin = this.muteTrackAsAdmin.bind(this), this._updateParticipants = this._updateParticipants.bind(this), this.subscribeToRoomEvent(RoomEvent.ParticipantConnected, this._updateParticipants), this.subscribeToRoomEvent(RoomEvent.ParticipantDisconnected, this._updateParticipants), this.subscribeToRoomEvent(RoomEvent.TrackSubscribed, this._updateParticipants), this.subscribeToRoomEvent(RoomEvent.TrackUnsubscribed, this._updateParticipants), this.subscribeToRoomEvent(RoomEvent.LocalTrackPublished, this._updateParticipants), this.subscribeToRoomEvent(RoomEvent.LocalTrackUnpublished, this._updateParticipants), this.subscribeToRoomEvent(RoomEvent.Disconnected, () => {
      this._updateParticipants();
    }), this.subscribeToRoomEvent(RoomEvent.ParticipantMetadataChanged, (g2, E2) => {
      if (g2 !== (E2 == null ? void 0 : E2.metadata)) {
        const _ = JSON.parse(E2 == null ? void 0 : E2.metadata);
        if (hasPermission(_ == null ? void 0 : _.participantRole, Permission.ManageSelf)) {
          if (_.hasOwnProperty("isMirrored")) {
            const k = {
              participantId: E2 == null ? void 0 : E2.identity,
              metadata: _,
              type: "ParticipantMetadataUpdate"
              /* ParticipantMetadataUpdate */
            };
            this._updateGuestParticipantsStore(k);
          }
          return;
        }
      }
    });
  }
  bindApiClient(u2) {
    this._apiClient = u2;
  }
  get isAdmin() {
    return jwtDecode(this._jwt).video.roomAdmin;
  }
  set isAdmin(u2) {
    log$1.warn("isAdmin cannot be set");
  }
  get token() {
    return this._jwt;
  }
  set token(u2) {
    this._jwt = u2;
  }
  get url() {
    return this._baseUrl;
  }
  set url(u2) {
  }
  get chatHistory() {
    return this._chatHistory;
  }
  set chatHistory(u2) {
    this._chatHistory = u2;
  }
  _updateGuestParticipantsStore(u2) {
    if (!this.guestParticipantMetadata.length)
      this.guestParticipantMetadata.push(u2);
    else {
      const c = this.guestParticipantMetadata.findIndex((l2) => l2.participantId === (u2 == null ? void 0 : u2.participantId));
      c > -1 ? this.guestParticipantMetadata[c] = u2 : this.guestParticipantMetadata.push(u2);
    }
  }
  _updateParticipants() {
    if (!this.livekitRoom || this.livekitRoom.state === ConnectionState.Disconnected) {
      this.participants = [];
      return;
    } else {
      const u2 = Array.from(this.livekitRoom.remoteParticipants.values()), c = [this.livekitRoom.localParticipant];
      c.push(...u2), this.guestParticipantMetadata = this.guestParticipantMetadata.filter((l2) => c.find((v2) => (v2 == null ? void 0 : v2.identity) === (l2 == null ? void 0 : l2.participantId))), this.participants = c;
    }
  }
  /**
  * @param identity Identity of the user that you wish to kick
  */
  async kickParticipant(u2) {
    if (this._admin)
      this._admin.removeParticipant(this.roomName, u2);
    else
      throw new Error("no admin permissions");
  }
  updateParticipant(u2, c) {
    if (this._admin) {
      const l2 = JSON.stringify(c);
      this._admin.updateParticipant(this.roomName, u2, l2);
    } else
      throw new Error("no admin permissions");
  }
  muteTrackAsAdmin(u2, c = true) {
    if (this._admin) {
      const l2 = this.participants.find((v2) => [...v2.audioTrackPublications.values(), ...v2.videoTrackPublications.values()].find((S2) => S2.trackSid === u2));
      if (!l2) {
        log$1.warn("Could not find participant for track:", { trackSid: u2 });
        return;
      }
      this._admin.mutePublishedTrack(this.roomName, l2 == null ? void 0 : l2.identity, u2, c);
    } else
      throw new Error("no admin permissions");
  }
  _appendChat(u2, c) {
    const l2 = decoder$1.decode(u2), v2 = JSON.parse(l2), S2 = c.identity, g2 = c.name, E2 = { ...v2, displayName: g2, sender: S2 };
    this.chatHistory = [...this.chatHistory, E2], this._triggerSpecialEvents("Chat", E2);
  }
  subscribeToConnect(u2) {
    return this._connectListeners.push(u2), () => this.unsubscribeFromConnect(u2);
  }
  unsubscribeFromConnect(u2) {
    this._connectListeners = this._connectListeners.filter((c) => c !== u2);
  }
  subscribeToSpecialEvent(u2, c) {
    return this._specialEventListenerRegistry[u2] || (this._specialEventListenerRegistry[u2] = /* @__PURE__ */ new Set()), this._specialEventListenerRegistry[u2].add(c), () => {
      this.unsubscribeFromSpecialEvent(u2, c);
    };
  }
  unsubscribeFromSpecialEvent(u2, c) {
    this._specialEventListenerRegistry[u2] || (this._specialEventListenerRegistry[u2] = /* @__PURE__ */ new Set()), this._specialEventListenerRegistry[u2].delete(c);
  }
  _triggerSpecialEvents(u2, ...c) {
    this._specialEventListenerRegistry[u2] || (this._specialEventListenerRegistry[u2] = /* @__PURE__ */ new Set()), this._specialEventListenerRegistry[u2].forEach((l2) => {
      l2(...c);
    });
  }
  /**
  * connect to livekit webrtc room
  * @param {string} identity unique user name to be displayed to other users
  */
  async connect(u2 = {}) {
    var c, l2;
    try {
      if (this.livekitRoom.state === "connected" || this.isConnecting)
        return;
      this.isConnecting = true, await this.livekitRoom.connect(`wss://${this._baseUrl}`, this._jwt, { ...u2 }), this.isConnecting = false, Object.values(RoomEvent).forEach((v2) => {
        this.livekitRoom.on(v2, (...S2) => {
          this._roomEventListenerRegistry[v2].forEach((g2) => {
            g2(...S2);
          });
        });
      }), Object.values(ParticipantEvent).forEach((v2) => {
        this.livekitRoom.localParticipant.on(v2, (...S2) => {
          this._localParticipantEventListenerRegistry[v2].forEach((g2) => {
            g2(...S2);
          });
        });
      }), this._updateParticipants(), this._connectListeners.forEach((v2) => v2(this.livekitRoom)), lib$2.LiveKitUtils.isRoomAdmin(this._jwt) ? (log$1.info("Room: Granting admin permissions"), log$1.debug("Livekit server: ", (c = this._apiClient) == null ? void 0 : c.getLiveKitServer(true)), this._admin = new dist.RoomServiceClient((l2 = this._apiClient) == null ? void 0 : l2.getLiveKitServer(true), void 0, void 0, this._jwt)) : log$1.debug("Room: Not an admin");
    } catch (v2) {
      this.isConnecting = false, log$1.error(v2);
    }
  }
  subscribeToLocalParticipantEvent(u2, c) {
    return this._localParticipantEventListenerRegistry[u2] || (this._localParticipantEventListenerRegistry[u2] = /* @__PURE__ */ new Set()), this._localParticipantEventListenerRegistry[u2].add(c), () => {
      this.unsubscribeFromLocalParticipantEvent(u2, c);
    };
  }
  unsubscribeFromLocalParticipantEvent(u2, c) {
    this._localParticipantEventListenerRegistry[u2] || (this._localParticipantEventListenerRegistry[u2] = /* @__PURE__ */ new Set()), this._localParticipantEventListenerRegistry[u2].delete(c);
  }
  subscribeToRoomEvent(u2, c) {
    return this._roomEventListenerRegistry[u2] || (this._roomEventListenerRegistry[u2] = /* @__PURE__ */ new Set()), this._roomEventListenerRegistry[u2].add(c), () => {
      this.unsubscribeFromRoomEvent(u2, c);
    };
  }
  unsubscribeFromRoomEvent(u2, c) {
    this._roomEventListenerRegistry[u2] || (this._roomEventListenerRegistry[u2] = /* @__PURE__ */ new Set()), this._roomEventListenerRegistry[u2].delete(c);
  }
  /**
  * Sends chat message to entire livekit room, or a private message (if specified) from local participant
  * @param {string[]} [recipients] The identities of the recipient participants. If undefined, will send message to all participants in the chat.
  * Only specify for private messages.
  * Do not include the local participant's identity in this.
  */
  sendChatMessage(u2) {
    const { message: c, recipients: l2, metadata: v2 } = u2;
    if (!this.livekitRoom || this.livekitRoom.state !== "connected")
      return;
    const S2 = { type: "ChatMessage", recipients: l2, metadata: v2, content: c, timestamp: Date.now() }, g2 = JSON.stringify(S2), E2 = encoder$1.encode(g2);
    if ({ ...S2, sender: this.livekitRoom.localParticipant.identity, displayName: this.livekitRoom.localParticipant.identity }, l2) {
      const _ = l2.map(this.livekitRoom.getParticipantByIdentity);
      return this.livekitRoom.localParticipant.publishData(E2, { reliable: true, destinationIdentities: _.map((k) => k.identity) }).then(() => {
        this._appendChat(E2, this.livekitRoom.localParticipant);
      });
    } else
      return this.livekitRoom.localParticipant.publishData(E2, { reliable: true }).then(() => {
        this._appendChat(E2, this.livekitRoom.localParticipant);
      });
  }
}
const webrtcManager = new RoomsManager(), encoder = new TextEncoder(), decoder = new TextDecoder(), simpleRooms = /* @__PURE__ */ new Map(), getRoom = (a92) => {
  if (!a92)
    return null;
  if (simpleRooms.get(a92))
    return simpleRooms.get(a92);
  const u2 = webrtcManager.rooms.get(a92);
  if (!u2)
    return null;
  const c = u2.livekitRoom, l2 = c == null ? void 0 : c.localParticipant;
  window.__StudioRoom = c, l2 || log$1.warn("No local participant!");
  const v2 = { useTracks: /* @__PURE__ */ new Set(), useTrack: /* @__PURE__ */ new Map(), useParticipants: /* @__PURE__ */ new Set(), useParticipant: /* @__PURE__ */ new Map(), useChatHistory: /* @__PURE__ */ new Set() };
  let S2 = { tracks: [], participants: [], result: { participants: [], tracks: [] }, chat: u2.chatHistory };
  const g2 = () => {
    const q2 = u2.participants, G2 = u2.guestParticipantMetadata, H2 = q2.flatMap((Y2) => Y2.getTrackPublications().map((ne2) => ({ ...ne2, participant: Y2 }))), B2 = { participants: q2.map((Y2) => {
      const ne2 = G2.find((re2) => re2.participantId === Y2.identity);
      if (ne2) {
        let re2 = JSON.parse(Y2.metadata);
        re2 = { ...re2, ...ne2.metadata }, Y2.metadata = JSON.stringify(re2);
      }
      const Z2 = JSON.parse(Y2.metadata);
      return { id: Y2.identity, isSelf: Y2 === l2, connectionQuality: Y2.connectionQuality, displayName: Z2.displayName || Y2.name, joinedAt: Y2.joinedAt, role: Z2.participantRole, meta: Z2, trackIds: H2.filter((re2) => re2.participant.sid === Y2.sid).map((re2) => re2.trackSid) };
    }), tracks: H2.map((Y2) => {
      var Z2, re2, oe2, de2;
      const ne2 = JSON.parse((Z2 = Y2 == null ? void 0 : Y2.participant) == null ? void 0 : Z2.metadata);
      return { mediaStreamTrack: (re2 = Y2.track) == null ? void 0 : re2.mediaStreamTrack, id: Y2.trackSid, participantId: (oe2 = Y2.participant) == null ? void 0 : oe2.identity, isMuted: (de2 = Y2.track) == null ? void 0 : de2.isMuted, type: Y2.source, isExternal: !!(ne2 != null && ne2[Y2.trackSid]) };
    }) };
    S2 = { tracks: H2, participants: q2, result: B2, chat: u2.chatHistory }, v2.useTracks.forEach((Y2) => Y2(B2.tracks)), v2.useTrack.forEach((Y2, ne2) => {
      ne2(k(Y2));
    }), v2.useParticipants.forEach((Y2) => Y2(B2.participants)), v2.useParticipant.forEach((Y2, ne2) => {
      ne2(L2(Y2));
    }), v2.useChatHistory.forEach((Y2) => {
      Y2(S2.chat);
    });
  }, E2 = [RoomEvent.ParticipantConnected, RoomEvent.ParticipantDisconnected, RoomEvent.ParticipantMetadataChanged, RoomEvent.Disconnected, RoomEvent.TrackSubscribed, RoomEvent.TrackUnsubscribed, RoomEvent.LocalTrackPublished, RoomEvent.LocalTrackUnpublished, RoomEvent.ConnectionQualityChanged, RoomEvent.TrackMuted, RoomEvent.TrackUnmuted, RoomEvent.TrackStreamStateChanged];
  u2.subscribeToRoomEvent(RoomEvent.DataReceived, (q2, G2, H2) => {
    const B2 = decoder.decode(q2);
    JSON.parse(B2).type === DataType.ParticipantMetadataUpdate && g2();
  }), E2.map((q2) => u2.subscribeToRoomEvent(q2, () => g2())).push(u2.subscribeToSpecialEvent(SpecialEvent.Chat, g2));
  const k = (q2) => S2.result.tracks.find((G2) => G2.id === q2), L2 = (q2) => S2.result.participants.find((G2) => G2.id === q2), M2 = (q2, G2) => {
    const H2 = l2.getTrackPublications().find((B2) => B2.trackSid === q2);
    H2 && (G2 ? H2.mute() : H2.unmute());
  };
  let $, J2;
  const V2 = {
    id: u2.roomName,
    participantId: l2.identity,
    setTrackEnabled: M2,
    setCameraEnabled: (q2 = true) => l2.setCameraEnabled(q2),
    setMicrophoneEnabled: (q2 = true) => l2.setMicrophoneEnabled(q2),
    setCamera: async (q2 = {}) => {
      var H2;
      if ($) {
        log$1.warn("Cannot set camera until previous has resolved");
        return;
      }
      $ = true;
      let G2;
      try {
        const Y2 = l2.getTrackPublications().filter((Z2) => (Z2 == null ? void 0 : Z2.source) === Track.Source.Camera).find((Z2) => !k(Z2 == null ? void 0 : Z2.trackSid).isExternal), ne2 = await l2.createTracks({ video: { deviceId: q2.deviceId, resolution: q2.resolution || { width: 1280, height: 720, frameRate: 30, aspectRatio: 16 / 9 } } });
        Y2 != null && Y2.isMuted && ne2.forEach((Z2) => {
          Z2.mute();
        }), G2 = await Promise.all(ne2.map((Z2) => l2.publishTrack(Z2))), Y2 && l2.unpublishTrack(Y2.track);
      } catch (B2) {
        throw B2;
      } finally {
        return $ = false, k((H2 = G2[0]) == null ? void 0 : H2.trackSid);
      }
    },
    setMicrophone: async (q2) => {
      var H2;
      if (J2) {
        log$1.warn("Cannot set microphone until previous has resolved");
        return;
      }
      J2 = true;
      let G2;
      try {
        const Y2 = l2.getTrackPublications().filter((Z2) => Z2.source === Track.Source.Microphone).find((Z2) => !k(Z2 == null ? void 0 : Z2.trackSid).isExternal), ne2 = await l2.createTracks({ audio: q2 || true });
        Y2 != null && Y2.isMuted && ne2.forEach((Z2) => {
          Z2.mute();
        }), G2 = await Promise.all(ne2.map((Z2) => l2.publishTrack(Z2))), Y2 && l2.unpublishTrack(Y2.track);
      } catch (B2) {
        throw B2;
      } finally {
        return J2 = false, k((H2 = G2[0]) == null ? void 0 : H2.trackSid);
      }
    },
    addMicrophone: async (q2) => {
      var ne2;
      if (J2) {
        log$1.warn("Cannot set microphone until previous has resolved");
        return;
      }
      J2 = true;
      const G2 = await l2.createTracks({ audio: q2 || true }), B2 = l2.getTrackPublications().filter((Z2) => Z2.source === Track.Source.Microphone).find((Z2) => {
        var oe2, de2;
        const re2 = k(Z2 == null ? void 0 : Z2.trackSid);
        ((de2 = (oe2 = re2 == null ? void 0 : re2.mediaStreamTrack) == null ? void 0 : oe2.getSettings()) == null ? void 0 : de2.deviceId) === q2.deviceId && (re2 == null || re2.isExternal);
      });
      B2 != null && B2.isMuted && G2.forEach((Z2) => {
        Z2.mute();
      });
      const Y2 = await Promise.all(G2.map((Z2) => l2.publishTrack(Z2)));
      return B2 && l2.unpublishTrack(B2.track), J2 = false, k((ne2 = Y2[0]) == null ? void 0 : ne2.trackSid);
    },
    addCamera: async (q2 = {}) => {
      var Y2;
      const G2 = await l2.createTracks({ video: { deviceId: q2.deviceId, resolution: q2.resolution || { width: 1280, height: 720, frameRate: 30, aspectRatio: 1.7777777777777777 } } }), H2 = l2.getTrackPublications().find((ne2) => {
        var Z2, re2, oe2;
        return (ne2 == null ? void 0 : ne2.source) === Track.Source.Camera && ((oe2 = (re2 = (Z2 = ne2 == null ? void 0 : ne2.track) == null ? void 0 : Z2.mediaStreamTrack) == null ? void 0 : re2.getSettings()) == null ? void 0 : oe2.deviceId) === q2.deviceId;
      });
      H2 != null && H2.isMuted && G2.forEach((ne2) => {
        ne2.mute();
      });
      const B2 = await Promise.all(G2.map((ne2) => l2.publishTrack(ne2)));
      return H2 && l2.unpublishTrack(H2.track), J2 = false, k((Y2 = B2[0]) == null ? void 0 : Y2.trackSid);
    },
    addScreen: async (q2 = { audio: false }) => {
      const G2 = await l2.createScreenTracks(q2), H2 = await Promise.all(G2.map((ne2) => l2.publishTrack(ne2))), B2 = H2.find((ne2) => ne2.kind === "video"), Y2 = H2.find((ne2) => ne2.kind === "audio");
      return { screen: k(B2 == null ? void 0 : B2.trackSid), audio: k(Y2 == null ? void 0 : Y2.trackSid) };
    },
    removeTrack: async (q2) => {
      const G2 = S2.tracks.find((H2) => H2.trackSid === q2);
      l2.unpublishTrack(G2.track);
    },
    /* Setting the local participant metadata. */
    setLocalParticipantMetadata: async (q2, G2) => {
      const H2 = JSON.stringify(G2), B2 = encoder.encode(JSON.stringify({ metadata: G2, type: DataType.ParticipantMetadataUpdate, participantId: q2 }));
      return l2.setMetadata(H2), await l2.publishData(B2, { reliable: true });
    },
    setParticipantMetadata: (q2, G2) => u2.updateParticipant(q2, G2),
    kickParticipant: u2.kickParticipant,
    muteTrackAsAdmin: u2.muteTrackAsAdmin,
    sendChatMessage: u2.sendChatMessage,
    // Callbacks
    getTracks: () => S2.result.tracks,
    useTracks: (q2) => (v2.useTracks.add(q2), q2(S2.result.tracks), () => {
      v2.useTracks.delete(q2);
    }),
    getTrack: k,
    useTrack: (q2, G2) => (v2.useTrack.set(G2, q2), G2(k(q2)), () => {
      v2.useTrack.delete(G2);
    }),
    getParticipant: L2,
    getParticipants: () => S2.result.participants,
    useParticipants: (q2) => (v2.useParticipants.add(q2), q2(S2.result.participants), () => {
      v2.useParticipants.delete(q2);
    }),
    useParticipant: (q2, G2) => (v2.useParticipant.set(G2, q2), G2(L2(q2)), () => {
      v2.useTrack.delete(G2);
    }),
    useChatHistory: (q2) => (v2.useChatHistory.add(q2), q2(S2.chat), () => {
      v2.useChatHistory.delete(q2);
    }),
    useActiveSpeakers: (q2) => {
      var H2, B2;
      const G2 = (Y2) => {
        q2(Y2.map((ne2) => ne2.identity));
      };
      return (H2 = u2.livekitRoom) == null || H2.on(RoomEvent.ActiveSpeakersChanged, G2), G2((B2 = u2.livekitRoom) == null ? void 0 : B2.activeSpeakers), () => {
        var Y2;
        (Y2 = u2.livekitRoom) == null || Y2.off(RoomEvent.ActiveSpeakersChanged, G2);
      };
    },
    sendData: (q2, G2 = []) => {
      const H2 = encoder.encode(JSON.stringify(q2)), B2 = G2 == null ? void 0 : G2.map((Y2) => {
        var ne2;
        return (ne2 = u2.livekitRoom) == null ? void 0 : ne2.getParticipantByIdentity(Y2);
      }).filter(Boolean);
      return l2.publishData(H2, { reliable: true, destinationIdentities: B2.map((Y2) => Y2.identity) });
    },
    onData: (q2) => {
      var H2;
      const G2 = (B2, Y2) => {
        const ne2 = JSON.parse(decoder.decode(B2));
        q2(ne2, Y2 == null ? void 0 : Y2.identity);
      };
      return (H2 = u2.livekitRoom) == null || H2.on(RoomEvent.DataReceived, G2), () => {
        var B2;
        (B2 = u2.livekitRoom) == null || B2.off(RoomEvent.DataReceived, G2);
      };
    },
    connect: () => u2.connect(),
    disconnect: () => {
      var q2;
      return (q2 = u2.livekitRoom) == null ? void 0 : q2.disconnect();
    },
    onDisconnected: (q2) => {
      var G2;
      return (G2 = u2.livekitRoom) == null || G2.on(RoomEvent.Disconnected, q2), () => {
        var H2;
        (H2 = u2.livekitRoom) == null || H2.off(RoomEvent.DataReceived, q2);
      };
    },
    setAudioOutput: (q2) => {
      var G2;
      return (G2 = u2.livekitRoom) == null ? void 0 : G2.switchActiveDevice("audiooutput", q2);
    }
  };
  return g2(), simpleRooms.set(a92, V2), V2;
}, { state: state$1 } = CoreContext, getAccessTokenData = () => {
  var a92;
  return ((a92 = CoreContext.clients.accessTokenClaims) == null ? void 0 : a92.user) || {};
}, getBaseUser = () => state$1.user ? { id: state$1.user.id, props: state$1.user.props, name: state$1.user.name, projects: state$1.projects.map(toBaseProject), sources: state$1.sources.map(toBaseSource) } : null, toBaseProject = (a92) => {
  const { compositor: u2, videoApi: c, props: l2 = {}, role: v2 } = a92, { destinations: S2, encoding: g2, rendering: E2, sources: _ } = c.project, k = { get: u2.get, getRoot: u2.getRoot, getParent: u2.getParent };
  Object.defineProperty(k, "nodes", { get() {
    return u2.nodes.filter(($) => !$._deleted);
  } });
  const L2 = a92.videoApi.phase, M2 = a92.videoApi.broadcastId || null;
  return { broadcastPhase: L2, role: v2, broadcastId: M2, isLive: [ProjectBroadcastPhase.PROJECT_BROADCAST_PHASE_RUNNING, ProjectBroadcastPhase.PROJECT_BROADCAST_PHASE_STOPPING].includes(L2), scene: k, joinRoom: async ($ = {}) => CoreContext.Command.joinRoom({ projectId: a92.id, ...$ }), subscribe: ($) => CoreContext.subscribe((J2, V2) => {
    V2.projectId && (V2 == null ? void 0 : V2.projectId) === a92.id && $(J2, V2);
  }), destinations: S2.map(toBaseDestination), sources: _.map(toBaseSource), encoding: g2, rendering: E2, id: a92.id, hostDisplayName: a92.props.hostDisplayName, props: l2 };
}, toBaseDestination = (a92) => {
  var u2;
  return {
    id: a92.destinationId,
    enabled: a92.enabled,
    address: a92.address,
    // For backward compatibility, fall back to "metadata" as props.
    //  All new projects have a dedicated "props" field
    props: ((u2 = a92.metadata) == null ? void 0 : u2.props) || (a92 == null ? void 0 : a92.metadata) || {}
  };
}, toBaseSource = (a92) => {
  var u2;
  return { id: a92.sourceId, address: a92.address, props: ((u2 = a92.metadata) == null ? void 0 : u2.props) || {} };
}, hydrateProject = async (a92, u2, c) => {
  const l2 = a92.metadata || {}, v2 = { collectionId: a92.collectionId, projectId: a92.projectId, updateMask: [] };
  hasPermission(u2, Permission.ManageBroadcast) && a92.composition.studioSdk.version !== CoreContext.rendererVersion && (v2.composition = { studioSdk: { version: CoreContext.rendererVersion } }, v2.updateMask.push("composition.studioSdk.version")), c && (v2.rendering = { video: { width: c.x, height: c.y, framerate: 30 } }, v2.updateMask.push("rendering")), v2.updateMask.length && await CoreContext.clients.LiveApi().project.updateProject(v2);
  const g2 = await layoutToProject(l2.layoutId, c);
  return {
    id: a92.projectId,
    compositor: g2,
    role: u2,
    videoApi: { project: a92, phase: ProjectBroadcastPhase.PROJECT_BROADCAST_PHASE_UNSPECIFIED },
    layoutApi: { layoutId: l2.layoutId },
    // For backward compatibility, fall back to "metadata" as props.
    //  All new projects have a dedicated "props" field
    props: (l2 == null ? void 0 : l2.props) || l2
  };
}, sceneNodeToLayer = (a92) => {
  const { id: u2, props: c = {}, children: l2 = [] } = a92;
  return { ...u2 ? { id: u2 } : {}, type: c.type, data: { ...c }, children: l2.map((v2) => v2.id) };
}, nodeToLayer = (a92) => ({ id: a92.id, type: a92.props.type, data: { ...a92.props }, children: a92.childIds.map((u2) => u2) }), layerToNode = (a92) => ({ id: String(a92.id), props: { type: a92.type, ...a92.data }, childIds: a92.children.map((u2) => String(u2)) }), layoutToProject = async (a92, u2) => {
  const { layers: c } = await CoreContext.clients.LayoutApi().layer.listLayers({ layoutId: a92 });
  if (u2 && c) {
    const { x: g2, y: E2 } = u2, _ = c == null ? void 0 : c.reduce((k, L2) => k ? k.data.isRoot ? k : L2.data.isRoot || !c.some((M2) => M2.children.includes(L2.id)) ? L2 : k : L2, null);
    if (_) {
      const k = await CoreContext.clients.LayoutApi().layer.updateLayer({ layoutId: _.layoutId, layerId: _.id, layer: { x: g2, y: E2, data: { ..._.data, size: { x: g2, y: E2 } } } }), L2 = c.findIndex((M2) => M2.id === k.id);
      c[L2] = k;
    }
  }
  const l2 = c.map(layerToNode), v2 = l2.reduce((g2, E2) => g2 ? g2.props.isRoot ? g2 : E2.props.isRoot || !l2.some((_) => _.childIds.includes(E2.id)) ? E2 : g2 : E2, null), S2 = v2 ? toSceneTree(l2, v2.id) : null;
  return CoreContext.compositor.loadProject(S2, a92);
}, getUser = () => {
  const a92 = state$1.user;
  if (!a92)
    throw new Error("User not loaded");
  return a92;
}, getProject = (a92) => state$1.projects.find((u2) => u2.id === a92), getProjectByLayoutId = (a92) => state$1.projects.find((u2) => u2.compositor.id === a92), getProjectRoom = (a92) => {
  var u2;
  return getRoom((u2 = getProject(a92)) == null ? void 0 : u2.roomId);
}, { connectionId } = CoreContext, latestUpdateVersion = {}, getNextNodeVersion = (a92) => (latestUpdateVersion[a92] || (latestUpdateVersion[a92] = 0), ++latestUpdateVersion[a92]), request = (a92, u2) => {
  const c = u2.map((l2) => {
    const [v2, S2] = l2;
    return { [v2]: S2 };
  });
  return log$1.debug("Batch request", c), CoreContext.clients.LayoutApi().layer.batch({ layoutId: a92, layers: c, requestMetadata: { connectionId, layoutId: a92, updateVersions: u2.filter(([l2]) => l2 === "update").map(([l2, v2]) => ({ [v2.id]: getNextNodeVersion(v2.id) })).reduce((l2, v2) => ({ ...v2, ...l2 }), {}) } });
}, compositorAdapter = (a92, u2) => ({
  async insert(c = {}, l2, v2) {
    const S2 = nodeToLayer({ id: null, props: c, childIds: [] });
    l2 ? S2.type = "child" : S2.type = "root", log$1.debug("Insert layer", S2);
    const g2 = await CoreContext.clients.LayoutApi().layer.createLayer({ layoutId: a92, layer: { ...S2, requestMetadata: { connectionId, layoutId: a92 } } });
    if (g2.code)
      throw new Error(g2.message);
    const E2 = await u2.get(l2);
    if (l2 && !E2)
      throw Error("Parent not found with ID");
    if (E2) {
      const _ = nodeToLayer(E2), k = insertAt$1(v2, g2.id, _.children), L2 = { layoutId: a92, layerId: _.id, layer: { children: k, requestMetadata: { connectionId, layoutId: a92, updateVersion: { [S2.id]: getNextNodeVersion(S2.id) } } } };
      await CoreContext.clients.LayoutApi().layer.updateLayer(L2);
    }
    return String(g2.id);
  },
  async update(c, l2 = {}) {
    const v2 = u2.get(c), S2 = nodeToLayer({ ...v2, props: { ...v2.props, ...l2 } }), g2 = { layoutId: a92, layerId: S2.id, layer: { ...S2, requestMetadata: { connectionId, layoutId: a92, updateVersions: { [S2.id]: getNextNodeVersion(S2.id) } } } };
    log$1.debug("Update layer", g2), await CoreContext.clients.LayoutApi().layer.updateLayer(g2);
  },
  async remove(c) {
    const l2 = await u2.getParent(c);
    if (l2) {
      const v2 = nodeToLayer(l2), S2 = v2.children.filter((E2) => E2 !== c), g2 = { layoutId: a92, layerId: v2.id, layer: { children: S2, requestMetadata: { connectionId, layoutId: a92, updateVersions: { [v2.id]: getNextNodeVersion(v2.id) } } } };
      await CoreContext.clients.LayoutApi().layer.updateLayer(g2);
    }
    await CoreContext.clients.LayoutApi().layer.deleteLayer({ layoutId: a92, layerId: c, payload: { requestMetadata: { connectionId, layoutId: a92 } } });
  },
  // @ts-ignore
  async reorder(c, l2) {
    const v2 = u2.get(c), S2 = nodeToLayer({ ...v2, childIds: l2 });
    log$1.debug("Reorder layer children", S2), await CoreContext.clients.LayoutApi().layer.updateLayer({ layoutId: a92, layerId: S2.id, layer: { children: S2.children, requestMetadata: { connectionId, layoutId: a92, updateVersions: { [S2.id]: getNextNodeVersion(S2.id) } } } });
  },
  // @ts-ignore
  async move(c, l2, v2) {
    const S2 = u2.get(c), g2 = u2.get(u2.getParent(c).id), E2 = nodeToLayer({ ...g2, childIds: pull$1(g2.childIds, S2.id) }), _ = u2.get(l2), k = nodeToLayer({ ..._, childIds: insertAt$1(v2, S2.id, _.childIds) });
    log$1.debug("Move layers"), await Promise.all([CoreContext.clients.LayoutApi().layer.updateLayer({ layoutId: a92, layerId: E2.id, layer: { children: E2.children, requestMetadata: { connectionId, layoutId: a92, updateVersions: { [E2.id]: getNextNodeVersion(E2.id) } } } }), CoreContext.clients.LayoutApi().layer.updateLayer({ layoutId: a92, layerId: k.id, layer: { children: k.children, requestMetadata: { connectionId, layoutId: a92, updateVersions: { [k.id]: getNextNodeVersion(k.id) } } } })]);
  },
  async batch(c) {
    const l2 = c.map(([S2, g2]) => [S2, sceneNodeToLayer(g2)]), v2 = await request(a92, l2);
    return log$1.debug("Batch response", v2), v2;
  }
}), config$1 = (a92) => ({ defaults: { previewTokenDuration: 1e3 * 60 * 60, guestTokenDuration: 1e3 * 60 * 60 * 12, transforms: { RoomParticipant: "LS-Room-Participant", Image: "LS-Image", Banner: "LS-Banner", Text: "LS-Text" } } }), RoomParticipant$1 = { name: "LS-Room-Participant", sourceType: "RoomParticipant", props: { isMuted: { type: Boolean, required: false, default: false }, volume: { type: Number, required: false, default: 1 } }, useSource(a92, u2) {
  return a92.find((c) => isMatch(c.props, u2.sourceProps));
}, create({ onUpdate: a92, onNewSource: u2, onRemove: c }, l2) {
  const v2 = document.createElement("div"), S2 = getProject(CoreContext.state.activeProjectId), g2 = getProjectRoom(CoreContext.state.activeProjectId);
  Object.assign(v2.style, { position: "relative" });
  let E2, _ = l2;
  const k = ($, J2) => {
    const V2 = $ / J2.width;
    return V2 >= 0.5 ? 3 : V2 > 0.25 ? 2 : V2 > 0.15 ? 1 : 0;
  }, L2 = ({ props: $, source: J2 }) => {
    var re2, oe2, de2;
    const V2 = reactExports.useRef(), { volume: q2 = 1, isHidden: G2 = false } = $ || {}, [H2, B2] = reactExports.useState(0), ne2 = (J2 == null ? void 0 : J2.id) === (g2 == null ? void 0 : g2.participantId) || ((re2 = J2 == null ? void 0 : J2.props) == null ? void 0 : re2.participantId) === (g2 == null ? void 0 : g2.participantId) || ($ == null ? void 0 : $.isMuted), Z2 = !($ != null && $.isHidden) && ((oe2 = J2 == null ? void 0 : J2.props) == null ? void 0 : oe2.videoEnabled);
    return reactExports.useEffect(() => {
      V2.current && (V2.current.play().catch((A2) => {
        document.addEventListener("click", () => {
          var N2;
          return (N2 = V2.current) == null ? void 0 : N2.play();
        }, { once: true });
      }), J2 != null && J2.value && (J2 == null ? void 0 : J2.value) !== V2.current.srcObject ? V2.current.srcObject = J2 == null ? void 0 : J2.value : J2 != null && J2.value || (V2.current.srcObject = null));
    }, [V2.current, J2 == null ? void 0 : J2.value]), reactExports.useEffect(() => {
      !$ && V2.current && (V2.current.srcObject = null, V2.current = null);
    }, [$]), reactExports.useLayoutEffect(() => {
      if (!V2.current)
        return;
      const A2 = () => {
        const D2 = V2.current;
        D2 && B2(k(D2.clientWidth, { width: S2.compositor.getRoot().props.size.x, height: S2.compositor.getRoot().props.size.y }));
      }, N2 = new ResizeObserver((D2) => {
        A2();
      });
      return A2(), N2 == null || N2.observe(V2.current), () => {
        V2.current && (N2 == null || N2.unobserve(V2.current), V2.current.srcObject = null);
      };
    }, [V2.current, S2]), reactExports.useEffect(() => {
      V2.current && (V2.current.volume = q2);
    }, [V2.current, q2]), /* @__PURE__ */ jsxs("div", { style: { position: "relative", display: "flex", height: "100%", width: "100%" }, children: [/* @__PURE__ */ jsx("div", { style: { background: "#222", position: "absolute", height: "100%", width: "100%", fontSize: "43px", color: "rgba(255,255,255,0.6)", display: "flex", alignItems: "center", justifyContent: "center", opacity: Z2 ? "0" : "1" }, children: (J2 == null ? void 0 : J2.props.displayName) && /* @__PURE__ */ jsx("div", { style: { borderRadius: "50%", background: "#555", width: "70px", height: "70px", textTransform: "uppercase", display: "flex", alignItems: "center", justifyContent: "center", lineHeight: "1em" }, children: (J2 == null ? void 0 : J2.props.displayName.slice(0, 1)) || "" }) }), /* @__PURE__ */ jsx("div", { style: { position: "relative", display: "flex", height: "100%", width: "100%", ...!!((de2 = J2 == null ? void 0 : J2.props) != null && de2.mirrored) && { transform: "scaleX(-1)" } }, children: /* @__PURE__ */ jsx("video", { ref: V2, autoPlay: true, muted: ne2, disablePictureInPicture: true, playsInline: true, style: { left: "50%", top: "50%", position: "relative", transform: "translate3d(-50%, -50%, 0)", height: "100%", opacity: Z2 ? "1" : "0", objectFit: (J2 == null ? void 0 : J2.props.type) === "screen" ? "contain" : "cover", background: "rgba(0,0,0,0.6)" } }) }), (J2 == null ? void 0 : J2.props.displayName) && /* @__PURE__ */ jsx("div", { className: "NameBannerContainer", style: { width: "100%", height: "100%", position: "absolute" }, children: /* @__PURE__ */ jsx("div", { className: "NameBanner", "data-size": H2, style: { padding: "12px 30px", width: "fit-content", height: "fit-content", top: "100%", transform: "translateY(-100%)", left: 0 }, children: /* @__PURE__ */ jsx("div", { className: "NameBanner-body", children: J2.props.displayName }) }) })] });
  }, M2 = () => ReactDOM.render(/* @__PURE__ */ jsx(L2, { source: E2, props: _ }), v2);
  return a92(($) => {
    _ = $, M2();
  }), u2(($) => {
    E2 = $, M2();
  }), c(($) => {
    _ = $, M2();
  }), { root: v2 };
} }, Square = { name: "LS-Square", props: { color: { default: "green" } }, create({ onUpdate: a92 }) {
  const u2 = document.createElement("div");
  return a92(({ color: c }) => {
    Object.assign(u2.style, { width: "100%", height: "100%", background: c || "red" });
  }), { root: u2 };
} }, Image$1 = { name: "LS-Image", props: { src: {}, fit: {} }, create({ onUpdate: a92 }) {
  const u2 = document.createElement("img");
  return a92(({ src: c, fit: l2 }) => {
    u2.setAttribute("src", c), Object.assign(u2.style, { width: "100%", height: "100%", objectFit: l2 });
  }), { root: u2 };
} }, Element$1 = { name: "Element", sourceType: "Element", create({ onUpdate: a92 }, { tagName: u2 }) {
  const c = document.createElement(u2);
  return a92(({ tagName: l2, attributes: v2 = {}, fields: S2 = {} }) => {
    l2 === "img" ? (c == null ? void 0 : c.src) !== v2.src && Object.keys(v2).forEach((g2) => {
      c.setAttribute(g2, v2[g2]);
    }) : Object.keys(v2).forEach((g2) => {
      c.setAttribute(g2, v2[g2]);
    }), Object.keys(S2).forEach((g2) => {
      Object.assign(c[g2], S2[g2]);
    });
  }), { root: c };
} }, Video = { name: "LS-Video", sourceType: "LS-Video", create({ onUpdate: a92, onEvent: u2, onRemove: c }) {
  c(() => {
    clearInterval(v2);
  });
  const l2 = document.createElement("video");
  let v2;
  return a92(({ attributes: S2 = {}, fields: g2 = {}, sourceProps: E2 = {}, id: _ }) => {
    (l2.src !== S2.src || l2.id !== S2.id && S2.id) && (v2 && clearInterval(v2), Object.keys(S2).forEach((k) => {
      l2.setAttribute(k, S2[k]);
    }), l2.onloadedmetadata = () => {
      S2.muted ? (l2.muted = true, l2.play()) : l2.muted = false;
    }, v2 = setInterval(() => {
      if (l2.duration) {
        const k = l2.duration - l2.currentTime;
        trigger$1("VideoTimeUpdate", { category: _, id: E2 == null ? void 0 : E2.id, time: Math.floor(k) });
      }
    }, 1e3), l2.loop = !!S2.loop, l2.onended = () => {
      v2 && clearInterval(v2), trigger$1("VideoEnded", { id: E2 == null ? void 0 : E2.id, category: _ });
    }, Object.keys(g2).forEach((k) => {
      Object.assign(l2[k], g2[k]);
    }));
  }), { root: l2 };
} }, Banner$1 = { name: "LS-Banner", sourceType: "Banner", props: { bannerId: { type: String, required: true } }, useSource(a92, u2) {
  return a92.find((c) => c.id === u2.bannerId);
}, create({ onUpdate: a92, onNewSource: u2 }, c) {
  const l2 = document.createElement("div");
  let v2, S2, g2;
  const E2 = ({ currentSource: k, latestSource: L2 }) => {
    const [M2, $] = reactExports.useState(false), { headerText: J2, bodyText: V2 } = (L2 == null ? void 0 : L2.value) || {};
    return reactExports.useEffect(() => {
      window.setTimeout(() => {
        $(!!k);
      }), k || $(false);
    }, [k]), /* @__PURE__ */ jsx("div", { className: "BannerContainer", style: { position: "absolute", top: 0, left: 0, width: "100%", height: "100%", display: "flex", flexDirection: "row", justifyContent: "flex-start", alignItems: "flex-end", transition: "200ms ease all", ...M2 ? { zIndex: 2, opacity: 1, transform: "translateX(0)" } : { zIndex: 1, opacity: 0, transform: "translateX(-200px)" } }, children: /* @__PURE__ */ jsxs("div", { className: "Banner", style: { padding: 10, background: "orange", width: "fit-content", height: "fit-content", maxWidth: "84%", position: "relative" }, children: [J2 && /* @__PURE__ */ jsx("div", { className: "Banner-header", style: { marginBottom: 6 }, children: J2 }), V2 && /* @__PURE__ */ jsx("div", { className: "Banner-body", children: V2 })] }) });
  }, _ = () => ReactDOM.render(/* @__PURE__ */ jsxs(Fragment, { children: [g2 && g2.id !== S2.id && /* @__PURE__ */ jsx(E2, { currentSource: null, latestSource: g2 }, g2 == null ? void 0 : g2.id), /* @__PURE__ */ jsx(E2, { currentSource: v2, latestSource: S2 }, S2 == null ? void 0 : S2.id)] }), l2);
  return a92(() => {
    _();
  }), u2((k) => {
    g2 = v2, v2 = k, v2 && (S2 = v2), _();
  }), { root: l2 };
} };
function _objectWithoutPropertiesLoose(a92, u2) {
  if (a92 == null)
    return {};
  var c = {}, l2 = Object.keys(a92), v2, S2;
  for (S2 = 0; S2 < l2.length; S2++)
    v2 = l2[S2], !(u2.indexOf(v2) >= 0) && (c[v2] = a92[v2]);
  return c;
}
function _setPrototypeOf(a92, u2) {
  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(l2, v2) {
    return l2.__proto__ = v2, l2;
  }, _setPrototypeOf(a92, u2);
}
function _inheritsLoose(a92, u2) {
  a92.prototype = Object.create(u2.prototype), a92.prototype.constructor = a92, _setPrototypeOf(a92, u2);
}
var ReactPropTypesSecret_1, hasRequiredReactPropTypesSecret;
function requireReactPropTypesSecret() {
  if (hasRequiredReactPropTypesSecret)
    return ReactPropTypesSecret_1;
  hasRequiredReactPropTypesSecret = 1;
  var a92 = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
  return ReactPropTypesSecret_1 = a92, ReactPropTypesSecret_1;
}
var factoryWithThrowingShims, hasRequiredFactoryWithThrowingShims;
function requireFactoryWithThrowingShims() {
  if (hasRequiredFactoryWithThrowingShims)
    return factoryWithThrowingShims;
  hasRequiredFactoryWithThrowingShims = 1;
  var a92 = requireReactPropTypesSecret();
  function u2() {
  }
  function c() {
  }
  return c.resetWarningCache = u2, factoryWithThrowingShims = function() {
    function l2(g2, E2, _, k, L2, M2) {
      if (M2 !== a92) {
        var $ = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");
        throw $.name = "Invariant Violation", $;
      }
    }
    l2.isRequired = l2;
    function v2() {
      return l2;
    }
    var S2 = { array: l2, bigint: l2, bool: l2, func: l2, number: l2, object: l2, string: l2, symbol: l2, any: l2, arrayOf: v2, element: l2, elementType: l2, instanceOf: v2, node: l2, objectOf: v2, oneOf: v2, oneOfType: v2, shape: v2, exact: v2, checkPropTypes: c, resetWarningCache: u2 };
    return S2.PropTypes = S2, S2;
  }, factoryWithThrowingShims;
}
requireFactoryWithThrowingShims()();
function hasClass(a92, u2) {
  return a92.classList ? !!u2 && a92.classList.contains(u2) : (" " + (a92.className.baseVal || a92.className) + " ").indexOf(" " + u2 + " ") !== -1;
}
function addClass(a92, u2) {
  a92.classList ? a92.classList.add(u2) : hasClass(a92, u2) || (typeof a92.className == "string" ? a92.className = a92.className + " " + u2 : a92.setAttribute("class", (a92.className && a92.className.baseVal || "") + " " + u2));
}
function replaceClassName(a92, u2) {
  return a92.replace(new RegExp("(^|\\s)" + u2 + "(?:\\s|$)", "g"), "$1").replace(/\s+/g, " ").replace(/^\s*|\s*$/g, "");
}
function removeClass$1(a92, u2) {
  a92.classList ? a92.classList.remove(u2) : typeof a92.className == "string" ? a92.className = replaceClassName(a92.className, u2) : a92.setAttribute("class", replaceClassName(a92.className && a92.className.baseVal || "", u2));
}
const config$3 = { disabled: false };
const TransitionGroupContext = React.createContext(null);
var forceReflow = function a87(u2) {
  return u2.scrollTop;
}, UNMOUNTED = "unmounted", EXITED = "exited", ENTERING = "entering", ENTERED = "entered", EXITING = "exiting", Transition = /* @__PURE__ */ function(a92) {
  _inheritsLoose(u2, a92);
  function u2(l2, v2) {
    var S2;
    S2 = a92.call(this, l2, v2) || this;
    var g2 = v2, E2 = g2 && !g2.isMounting ? l2.enter : l2.appear, _;
    return S2.appearStatus = null, l2.in ? E2 ? (_ = EXITED, S2.appearStatus = ENTERING) : _ = ENTERED : l2.unmountOnExit || l2.mountOnEnter ? _ = UNMOUNTED : _ = EXITED, S2.state = { status: _ }, S2.nextCallback = null, S2;
  }
  u2.getDerivedStateFromProps = function(v2, S2) {
    var g2 = v2.in;
    return g2 && S2.status === UNMOUNTED ? { status: EXITED } : null;
  };
  var c = u2.prototype;
  return c.componentDidMount = function() {
    this.updateStatus(true, this.appearStatus);
  }, c.componentDidUpdate = function(v2) {
    var S2 = null;
    if (v2 !== this.props) {
      var g2 = this.state.status;
      this.props.in ? g2 !== ENTERING && g2 !== ENTERED && (S2 = ENTERING) : (g2 === ENTERING || g2 === ENTERED) && (S2 = EXITING);
    }
    this.updateStatus(false, S2);
  }, c.componentWillUnmount = function() {
    this.cancelNextCallback();
  }, c.getTimeouts = function() {
    var v2 = this.props.timeout, S2, g2, E2;
    return S2 = g2 = E2 = v2, v2 != null && typeof v2 != "number" && (S2 = v2.exit, g2 = v2.enter, E2 = v2.appear !== void 0 ? v2.appear : g2), { exit: S2, enter: g2, appear: E2 };
  }, c.updateStatus = function(v2, S2) {
    if (v2 === void 0 && (v2 = false), S2 !== null) {
      if (this.cancelNextCallback(), S2 === ENTERING) {
        if (this.props.unmountOnExit || this.props.mountOnEnter) {
          var g2 = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this);
          g2 && forceReflow(g2);
        }
        this.performEnter(v2);
      } else
        this.performExit();
    } else
      this.props.unmountOnExit && this.state.status === EXITED && this.setState({ status: UNMOUNTED });
  }, c.performEnter = function(v2) {
    var S2 = this, g2 = this.props.enter, E2 = this.context ? this.context.isMounting : v2, _ = this.props.nodeRef ? [E2] : [ReactDOM.findDOMNode(this), E2], k = _[0], L2 = _[1], M2 = this.getTimeouts(), $ = E2 ? M2.appear : M2.enter;
    if (!v2 && !g2 || config$3.disabled) {
      this.safeSetState({ status: ENTERED }, function() {
        S2.props.onEntered(k);
      });
      return;
    }
    this.props.onEnter(k, L2), this.safeSetState({ status: ENTERING }, function() {
      S2.props.onEntering(k, L2), S2.onTransitionEnd($, function() {
        S2.safeSetState({ status: ENTERED }, function() {
          S2.props.onEntered(k, L2);
        });
      });
    });
  }, c.performExit = function() {
    var v2 = this, S2 = this.props.exit, g2 = this.getTimeouts(), E2 = this.props.nodeRef ? void 0 : ReactDOM.findDOMNode(this);
    if (!S2 || config$3.disabled) {
      this.safeSetState({ status: EXITED }, function() {
        v2.props.onExited(E2);
      });
      return;
    }
    this.props.onExit(E2), this.safeSetState({ status: EXITING }, function() {
      v2.props.onExiting(E2), v2.onTransitionEnd(g2.exit, function() {
        v2.safeSetState({ status: EXITED }, function() {
          v2.props.onExited(E2);
        });
      });
    });
  }, c.cancelNextCallback = function() {
    this.nextCallback !== null && (this.nextCallback.cancel(), this.nextCallback = null);
  }, c.safeSetState = function(v2, S2) {
    S2 = this.setNextCallback(S2), this.setState(v2, S2);
  }, c.setNextCallback = function(v2) {
    var S2 = this, g2 = true;
    return this.nextCallback = function(E2) {
      g2 && (g2 = false, S2.nextCallback = null, v2(E2));
    }, this.nextCallback.cancel = function() {
      g2 = false;
    }, this.nextCallback;
  }, c.onTransitionEnd = function(v2, S2) {
    this.setNextCallback(S2);
    var g2 = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this), E2 = v2 == null && !this.props.addEndListener;
    if (!g2 || E2) {
      setTimeout(this.nextCallback, 0);
      return;
    }
    if (this.props.addEndListener) {
      var _ = this.props.nodeRef ? [this.nextCallback] : [g2, this.nextCallback], k = _[0], L2 = _[1];
      this.props.addEndListener(k, L2);
    }
    v2 != null && setTimeout(this.nextCallback, v2);
  }, c.render = function() {
    var v2 = this.state.status;
    if (v2 === UNMOUNTED)
      return null;
    var S2 = this.props, g2 = S2.children;
    S2.in, S2.mountOnEnter, S2.unmountOnExit, S2.appear, S2.enter, S2.exit, S2.timeout, S2.addEndListener, S2.onEnter, S2.onEntering, S2.onEntered, S2.onExit, S2.onExiting, S2.onExited, S2.nodeRef;
    var E2 = _objectWithoutPropertiesLoose(S2, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
    return (
      // allows for nested Transitions
      /* @__PURE__ */ jsx(TransitionGroupContext.Provider, { value: null, children: typeof g2 == "function" ? g2(v2, E2) : React.cloneElement(React.Children.only(g2), E2) })
    );
  }, u2;
}(React.Component);
Transition.contextType = TransitionGroupContext;
Transition.propTypes = {};
function noop() {
}
Transition.defaultProps = { in: false, mountOnEnter: false, unmountOnExit: false, appear: false, enter: true, exit: true, onEnter: noop, onEntering: noop, onEntered: noop, onExit: noop, onExiting: noop, onExited: noop };
Transition.UNMOUNTED = UNMOUNTED;
Transition.EXITED = EXITED;
Transition.ENTERING = ENTERING;
Transition.ENTERED = ENTERED;
Transition.EXITING = EXITING;
const Transition$1 = Transition;
var _addClass = function a89(u2, c) {
  return u2 && c && c.split(" ").forEach(function(l2) {
    return addClass(u2, l2);
  });
}, removeClass = function a90(u2, c) {
  return u2 && c && c.split(" ").forEach(function(l2) {
    return removeClass$1(u2, l2);
  });
}, CSSTransition = /* @__PURE__ */ function(a92) {
  _inheritsLoose(u2, a92);
  function u2() {
    for (var l2, v2 = arguments.length, S2 = new Array(v2), g2 = 0; g2 < v2; g2++)
      S2[g2] = arguments[g2];
    return l2 = a92.call.apply(a92, [this].concat(S2)) || this, l2.appliedClasses = { appear: {}, enter: {}, exit: {} }, l2.onEnter = function(E2, _) {
      var k = l2.resolveArguments(E2, _), L2 = k[0], M2 = k[1];
      l2.removeClasses(L2, "exit"), l2.addClass(L2, M2 ? "appear" : "enter", "base"), l2.props.onEnter && l2.props.onEnter(E2, _);
    }, l2.onEntering = function(E2, _) {
      var k = l2.resolveArguments(E2, _), L2 = k[0], M2 = k[1], $ = M2 ? "appear" : "enter";
      l2.addClass(L2, $, "active"), l2.props.onEntering && l2.props.onEntering(E2, _);
    }, l2.onEntered = function(E2, _) {
      var k = l2.resolveArguments(E2, _), L2 = k[0], M2 = k[1], $ = M2 ? "appear" : "enter";
      l2.removeClasses(L2, $), l2.addClass(L2, $, "done"), l2.props.onEntered && l2.props.onEntered(E2, _);
    }, l2.onExit = function(E2) {
      var _ = l2.resolveArguments(E2), k = _[0];
      l2.removeClasses(k, "appear"), l2.removeClasses(k, "enter"), l2.addClass(k, "exit", "base"), l2.props.onExit && l2.props.onExit(E2);
    }, l2.onExiting = function(E2) {
      var _ = l2.resolveArguments(E2), k = _[0];
      l2.addClass(k, "exit", "active"), l2.props.onExiting && l2.props.onExiting(E2);
    }, l2.onExited = function(E2) {
      var _ = l2.resolveArguments(E2), k = _[0];
      l2.removeClasses(k, "exit"), l2.addClass(k, "exit", "done"), l2.props.onExited && l2.props.onExited(E2);
    }, l2.resolveArguments = function(E2, _) {
      return l2.props.nodeRef ? [l2.props.nodeRef.current, E2] : [E2, _];
    }, l2.getClassNames = function(E2) {
      var _ = l2.props.classNames, k = typeof _ == "string", L2 = k && _ ? _ + "-" : "", M2 = k ? "" + L2 + E2 : _[E2], $ = k ? M2 + "-active" : _[E2 + "Active"], J2 = k ? M2 + "-done" : _[E2 + "Done"];
      return { baseClassName: M2, activeClassName: $, doneClassName: J2 };
    }, l2;
  }
  var c = u2.prototype;
  return c.addClass = function(v2, S2, g2) {
    var E2 = this.getClassNames(S2)[g2 + "ClassName"], _ = this.getClassNames("enter"), k = _.doneClassName;
    S2 === "appear" && g2 === "done" && k && (E2 += " " + k), g2 === "active" && v2 && forceReflow(v2), E2 && (this.appliedClasses[S2][g2] = E2, _addClass(v2, E2));
  }, c.removeClasses = function(v2, S2) {
    var g2 = this.appliedClasses[S2], E2 = g2.base, _ = g2.active, k = g2.done;
    this.appliedClasses[S2] = {}, E2 && removeClass(v2, E2), _ && removeClass(v2, _), k && removeClass(v2, k);
  }, c.render = function() {
    var v2 = this.props;
    v2.classNames;
    var S2 = _objectWithoutPropertiesLoose(v2, ["classNames"]);
    return /* @__PURE__ */ jsx(Transition$1, { ...S2, onEnter: this.onEnter, onEntered: this.onEntered, onEntering: this.onEntering, onExit: this.onExit, onExiting: this.onExiting, onExited: this.onExited });
  }, u2;
}(React.Component);
CSSTransition.defaultProps = { classNames: "" };
CSSTransition.propTypes = {};
const CSSTransition$1 = CSSTransition;
var _leaveRenders, _enterRenders;
function areChildrenDifferent(a92, u2) {
  return !(a92 === u2 || React.isValidElement(a92) && React.isValidElement(u2) && a92.key != null && a92.key === u2.key);
}
var modes = { out: "out-in", in: "in-out" }, callHook = function a91(u2, c, l2) {
  return function() {
    var v2;
    u2.props[c] && (v2 = u2.props)[c].apply(v2, arguments), l2();
  };
}, leaveRenders = (_leaveRenders = {}, _leaveRenders[modes.out] = function(a92) {
  var u2 = a92.current, c = a92.changeState;
  return React.cloneElement(u2, { in: false, onExited: callHook(u2, "onExited", function() {
    c(ENTERING, null);
  }) });
}, _leaveRenders[modes.in] = function(a92) {
  var u2 = a92.current, c = a92.changeState, l2 = a92.children;
  return [u2, React.cloneElement(l2, { in: true, onEntered: callHook(l2, "onEntered", function() {
    c(ENTERING);
  }) })];
}, _leaveRenders), enterRenders = (_enterRenders = {}, _enterRenders[modes.out] = function(a92) {
  var u2 = a92.children, c = a92.changeState;
  return React.cloneElement(u2, { in: true, onEntered: callHook(u2, "onEntered", function() {
    c(ENTERED, React.cloneElement(u2, { in: true }));
  }) });
}, _enterRenders[modes.in] = function(a92) {
  var u2 = a92.current, c = a92.children, l2 = a92.changeState;
  return [React.cloneElement(u2, { in: false, onExited: callHook(u2, "onExited", function() {
    l2(ENTERED, React.cloneElement(c, { in: true }));
  }) }), React.cloneElement(c, { in: true })];
}, _enterRenders), SwitchTransition = /* @__PURE__ */ function(a92) {
  _inheritsLoose(u2, a92);
  function u2() {
    for (var l2, v2 = arguments.length, S2 = new Array(v2), g2 = 0; g2 < v2; g2++)
      S2[g2] = arguments[g2];
    return l2 = a92.call.apply(a92, [this].concat(S2)) || this, l2.state = { status: ENTERED, current: null }, l2.appeared = false, l2.changeState = function(E2, _) {
      _ === void 0 && (_ = l2.state.current), l2.setState({ status: E2, current: _ });
    }, l2;
  }
  var c = u2.prototype;
  return c.componentDidMount = function() {
    this.appeared = true;
  }, u2.getDerivedStateFromProps = function(v2, S2) {
    return v2.children == null ? { current: null } : S2.status === ENTERING && v2.mode === modes.in ? { status: ENTERING } : S2.current && areChildrenDifferent(S2.current, v2.children) ? { status: EXITING } : { current: React.cloneElement(v2.children, { in: true }) };
  }, c.render = function() {
    var v2 = this.props, S2 = v2.children, g2 = v2.mode, E2 = this.state, _ = E2.status, k = E2.current, L2 = { children: S2, current: k, changeState: this.changeState, status: _ }, M2;
    switch (_) {
      case ENTERING:
        M2 = enterRenders[g2](L2);
        break;
      case EXITING:
        M2 = leaveRenders[g2](L2);
        break;
      case ENTERED:
        M2 = k;
    }
    return /* @__PURE__ */ jsx(TransitionGroupContext.Provider, { value: { isMounting: !this.appeared }, children: M2 });
  }, u2;
}(React.Component);
SwitchTransition.propTypes = {};
SwitchTransition.defaultProps = { mode: modes.out };
const SwitchTransition$1 = SwitchTransition, Animations = { "fade-in": ".fade-in{-webkit-animation:fade-in;animation:fade-in}@-webkit-keyframes fade-in{0%{opacity:0}100%{opacity:1}}@keyframes fade-in{0%{opacity:0}100%{opacity:1}}", "fade-out": ".fade-out{-webkit-animation:fade-out;animation:fade-out}@-webkit-keyframes fade-out{0%{opacity:1}100%{opacity:0}}@keyframes fade-out{0%{opacity:1}100%{opacity:0}}", "slide-in-blurred-top": ".slide-in-blurred-top{-webkit-animation:slide-in-blurred-top .6s cubic-bezier(.23,1.000,.32,1.000) both;animation:slide-in-blurred-top .6s cubic-bezier(.23,1.000,.32,1.000) both}@-webkit-keyframes slide-in-blurred-top{0%{-webkit-transform:translateY(-1000px) scaleY(2.5) scaleX(.2);transform:translateY(-1000px) scaleY(2.5) scaleX(.2);-webkit-transform-origin:50% 0;transform-origin:50% 0;-webkit-filter:blur(40px);filter:blur(40px);opacity:0}100%{-webkit-transform:translateY(0) scaleY(1) scaleX(1);transform:translateY(0) scaleY(1) scaleX(1);-webkit-transform-origin:50% 50%;transform-origin:50% 50%;-webkit-filter:blur(0);filter:blur(0);opacity:1}}@keyframes slide-in-blurred-top{0%{-webkit-transform:translateY(-1000px) scaleY(2.5) scaleX(.2);transform:translateY(-1000px) scaleY(2.5) scaleX(.2);-webkit-transform-origin:50% 0;transform-origin:50% 0;-webkit-filter:blur(40px);filter:blur(40px);opacity:0}100%{-webkit-transform:translateY(0) scaleY(1) scaleX(1);transform:translateY(0) scaleY(1) scaleX(1);-webkit-transform-origin:50% 50%;transform-origin:50% 50%;-webkit-filter:blur(0);filter:blur(0);opacity:1}}", "slide-in-left": ".slide-in-left{-webkit-animation:slide-in-left .5s cubic-bezier(.25,.46,.45,.94) both;animation:slide-in-left .5s cubic-bezier(.25,.46,.45,.94) both}@-webkit-keyframes slide-in-left{0%{-webkit-transform:translateX(-1000px);transform:translateX(-1000px);opacity:0}100%{-webkit-transform:translateX(0);transform:translateX(0);opacity:1}}@keyframes slide-in-left{0%{-webkit-transform:translateX(-1000px);transform:translateX(-1000px);opacity:0}100%{-webkit-transform:translateX(0);transform:translateX(0);opacity:1}}", "slide-out-left": ".slide-out-left{-webkit-animation:slide-out-left .5s cubic-bezier(.55,.085,.68,.53) both;animation:slide-out-left .5s cubic-bezier(.55,.085,.68,.53) both}@-webkit-keyframes slide-out-left{0%{-webkit-transform:translateX(0);transform:translateX(0);opacity:1}100%{-webkit-transform:translateX(-1000px);transform:translateX(-1000px);opacity:0}}@keyframes slide-out-left{0%{-webkit-transform:translateX(0);transform:translateX(0);opacity:1}100%{-webkit-transform:translateX(-1000px);transform:translateX(-1000px);opacity:0}}" }, APIKitAnimation = (a92) => {
  const { enter: u2, exit: c, children: l2, tag: v2 = "div", direction: S2 = "normal", duration: g2 = 500, id: E2, type: _ } = a92, k = E2 ? `${_}-${E2}` : `${_}-api-kit-animation`;
  return /* @__PURE__ */ jsxs("div", { style: { height: "100%", width: "100%" }, children: [/* @__PURE__ */ jsx("style", { dangerouslySetInnerHTML: { __html: renderStyle(_, u2, c, g2, S2) } }), /* @__PURE__ */ jsx(SwitchTransition$1, { mode: "out-in", children: /* @__PURE__ */ jsx(CSSTransition$1, { addEndListener: (L2, M2) => {
    L2.addEventListener("transitionend", M2, false);
  }, classNames: { enter: `${_}-default-enter`, enterActive: u2, exit: `${_}-default-leave`, exitActive: c }, timeout: g2, children: /* @__PURE__ */ jsx("div", { style: { height: "100%", width: "100%" }, children: l2 }) }, k) })] });
}, renderStyle = (a92, u2, c, l2, v2) => `
        body {
          margin: 0;
          padding: 0;
        }
        
        ${Animations[u2]}
        
        ${Animations[c]}

        .${a92}-transition {
          transition: opacity ${l2}ms ease-out};
        }

        .${a92}-default-enter {
          opacity: 0;
        }

        .${a92}-default-enter.${u2} {
          animation-direction: ${v2};
          animation-duration: ${l2 / 1e3}s;
          animation-fill-mode: both;
          animation-timing-function: ease-out;
        }

        .${a92}-default-leave {
          opacity: 1;
        }

        .${a92}-default-leave.${c} {
          animation-direction: ${v2};
          animation-duration: ${l2 / 1e3}s;
          animation-timing-function: ease-out;
          animation-fill-mode: both;
        }
        `, APIKitAnimation$1 = APIKitAnimation;
var APIKitAnimationTypes = /* @__PURE__ */ ((a92) => (a92.FADE_IN = "fade-in", a92.FADE_OUT = "fade-out", a92.SLIDE_IN_BLURRED_TOP = "slide-in-blurred-top", a92.SLIDE_IN_LEFT = "slide-in-left", a92.SLIDE_OUT_LEFT = "slide-out-left", a92))(APIKitAnimationTypes || {});
const Logo$1 = { name: "LS-Logo", sourceType: "Logo", create({ onUpdate: a92 }, { sourceProps: u2 }) {
  const c = document.createElement("div"), v2 = getProject(CoreContext.state.activeProjectId).compositor.getRoot(), { x: S2 } = v2.props.size, g2 = (S2 ?? 1280) / 1920, E2 = (L2) => L2 * g2 + "px", _ = ({ source: L2 }) => {
    var ne2;
    const { src: M2, meta: $ } = (L2 == null ? void 0 : L2.sourceProps) || {}, { id: J2 } = L2 || {}, [V2, q2] = React.useState(false);
    reactExports.useEffect(() => {
      q2(false);
    }, [J2]);
    const { offsetX: G2 = 40, offsetY: H2 = 40, height: B2 = 135, width: Y2 = 240 } = ($ == null ? void 0 : $.style) || {};
    return /* @__PURE__ */ jsx(APIKitAnimation$1, { type: "logo", id: J2, enter: APIKitAnimationTypes.FADE_IN, exit: APIKitAnimationTypes.FADE_OUT, duration: 400, children: /* @__PURE__ */ jsx("div", { style: { opacity: V2 ? 1 : 0, width: "100%", height: "100%" }, className: "logo-transition", children: M2 && /* @__PURE__ */ jsx("div", { className: "logo wrapper", style: { padding: `${E2(H2)} ${E2(G2)}` }, children: /* @__PURE__ */ jsx("img", { style: { height: "100%", width: "100%", maxHeight: B2 ? E2(B2) : "none", maxWidth: Y2 ? E2(Y2) : "none", ...(ne2 = u2 == null ? void 0 : u2.meta) == null ? void 0 : ne2.style, ...$ == null ? void 0 : $.style }, src: M2, onLoad: () => q2(true) }) }) }) });
  }, k = (L2) => ReactDOM.render(/* @__PURE__ */ jsx(_, { source: L2 }), c);
  return a92((L2) => {
    k({ ...L2 });
  }), { root: c };
} }, Overlay = { name: "LS-Overlay", sourceType: "Overlay", create({ onUpdate: a92, onRemove: u2 }, { sourceProps: c }) {
  u2(() => {
    clearInterval(S2);
  });
  const l2 = document.createElement("div");
  getProject(CoreContext.state.activeProjectId).role;
  let S2;
  const L2 = (M2) => ReactDOM.render(/* @__PURE__ */ jsx(Fragment, { children: /* @__PURE__ */ jsx("k", { source: M2 }) }), l2);
  return a92((M2) => {
    L2({ ...M2 });
  }), { root: l2 };
} };
var functionExpression = /[\s]*([a-z-]+)[\s]*\([\s]*([^\)]+)[\s]*\)[\s]*/i, floatExpression = /^(\-?\d+\.?\d{0,5})/, toFloat = parseFloat;
function ensurePercent(a92) {
  return typeof a92 == "number" ? a92 : toFloat(a92) * 0.01;
}
function formatPercent(a92) {
  return formatFloat(a92 * 100) + "%";
}
function formatFloat(a92) {
  return floatExpression.exec(a92.toString())[1];
}
function parseCSSFunction(a92) {
  var u2 = functionExpression.exec(a92);
  if (!(!u2 || !u2.length))
    return [u2[1]].concat(u2[2].split(","));
}
function cssFunction(a92, u2) {
  var c = Array.prototype.join.call(u2, ", ");
  return a92 + "(" + c + ")";
}
var math = Math, round = math.round;
function roundFloat(a92, u2) {
  return round(a92 * u2) / u2;
}
var _a, RGB = "rgb", HSL = "hsl", converters = (_a = {}, _a[RGB + HSL] = RGBtoHSL, _a[HSL + RGB] = HSLtoRGB, _a), maxChannelValues = { r: 255, g: 255, b: 255, h: 360, s: 1, l: 1, a: 1 };
function color(a92) {
  return parseHexCode(a92) || parseColorFunction(a92) || rgb(255, 0, 0);
}
function rgb(a92, u2, c, l2) {
  return new ColorHelper(
    RGB,
    a92,
    u2,
    c,
    l2 === void 0 ? 1 : ensurePercent(l2),
    l2 !== void 0
    /* hasAlpha*/
  );
}
function convertHelper(a92, u2, c) {
  var l2 = u2.f, v2 = u2.r, S2 = u2.g, g2 = u2.b, E2 = u2.a, _ = c === void 0 ? u2.o : c;
  return l2 !== a92 ? converters[l2 + a92](v2, S2, g2, E2, _) : c === void 0 ? u2 : new ColorHelper(l2, v2, S2, g2, E2, _);
}
var ColorHelper = (
  /** @class */
  function() {
    function a92(u2, c, l2, v2, S2, g2) {
      var E2 = this;
      E2.f = u2, E2.o = g2;
      var _ = u2 === HSL;
      E2.r = clampColor(_ ? "h" : "r", c), E2.g = clampColor(_ ? "s" : "g", l2), E2.b = clampColor(_ ? "l" : "b", v2), E2.a = clampColor("a", S2);
    }
    return a92.prototype.toString = function() {
      var u2 = this, c = u2.o, l2 = u2.f, v2 = u2.r, S2 = u2.g, g2 = u2.b, E2 = u2.a, _, k;
      if (l2 === RGB)
        _ = c ? "rgba" : RGB, k = [round(v2), round(S2), round(g2)];
      else if (l2 === HSL)
        _ = c ? "hsla" : HSL, k = [round(v2), formatPercent(roundFloat(S2, 100)), formatPercent(roundFloat(g2, 100))];
      else
        throw new Error("Invalid color format");
      return c && k.push(formatFloat(roundFloat(E2, 1e5))), cssFunction(_, k);
    }, a92.prototype.toHexString = function() {
      var u2 = convertHelper(RGB, this);
      return "#" + (toHex(u2.r) + toHex(u2.g) + toHex(u2.b)).toUpperCase();
    }, a92.prototype.toHSL = function() {
      return convertHelper(HSL, this, false);
    }, a92.prototype.toHSLA = function() {
      return convertHelper(HSL, this, true);
    }, a92.prototype.toRGB = function() {
      return convertHelper(RGB, this, false);
    }, a92.prototype.toRGBA = function() {
      return convertHelper(RGB, this, true);
    }, a92.prototype.red = function() {
      var u2 = this;
      return (u2.f === RGB ? u2 : u2.toRGB()).r;
    }, a92.prototype.green = function() {
      var u2 = this;
      return (u2.f === RGB ? u2 : u2.toRGB()).g;
    }, a92.prototype.blue = function() {
      var u2 = this;
      return (u2.f === RGB ? u2 : u2.toRGB()).b;
    }, a92.prototype.hue = function() {
      var u2 = this;
      return (u2.f === HSL ? u2 : u2.toHSL()).r;
    }, a92.prototype.saturation = function() {
      var u2 = this;
      return (u2.f === HSL ? u2 : u2.toHSL()).g;
    }, a92.prototype.lightness = function() {
      var u2 = this;
      return (u2.f === HSL ? u2 : u2.toHSL()).b;
    }, a92.prototype.alpha = function() {
      return this.a;
    }, a92.prototype.opacity = function() {
      return this.a;
    }, a92.prototype.invert = function() {
      var u2 = this, c = convertHelper(RGB, u2);
      return convertHelper(u2.f, new a92(RGB, 255 - c.r, 255 - c.g, 255 - c.b, u2.a, u2.o));
    }, a92.prototype.lighten = function(u2, c) {
      var l2 = this, v2 = convertHelper(HSL, l2), S2 = maxChannelValues.l, g2 = v2.b + (c ? S2 - v2.b : S2) * ensurePercent(u2);
      return convertHelper(l2.f, new a92(HSL, v2.r, v2.g, g2, l2.a, l2.o));
    }, a92.prototype.darken = function(u2, c) {
      var l2 = this, v2 = convertHelper(HSL, l2), S2 = v2.b - (c ? v2.b : maxChannelValues.l) * ensurePercent(u2);
      return convertHelper(l2.f, new a92(HSL, v2.r, v2.g, S2, l2.a, l2.o));
    }, a92.prototype.saturate = function(u2, c) {
      var l2 = this, v2 = convertHelper(HSL, l2), S2 = maxChannelValues.s, g2 = v2.g + (c ? S2 - v2.g : S2) * ensurePercent(u2);
      return convertHelper(l2.f, new a92(HSL, v2.r, g2, v2.b, l2.a, l2.o));
    }, a92.prototype.desaturate = function(u2, c) {
      var l2 = this, v2 = convertHelper(HSL, l2), S2 = maxChannelValues.s, g2 = v2.g - (c ? v2.g : S2) * ensurePercent(u2);
      return convertHelper(l2.f, new a92(HSL, v2.r, g2, v2.b, l2.a, l2.o));
    }, a92.prototype.grayscale = function() {
      return this.desaturate(1);
    }, a92.prototype.fade = function(u2) {
      var c = this, l2 = clampColor("a", ensurePercent(u2));
      return convertHelper(c.f, new a92(c.f, c.r, c.g, c.b, l2, true));
    }, a92.prototype.fadeOut = function(u2, c) {
      var l2 = this, v2 = 1, S2 = clampColor("a", l2.a - (c ? l2.a : v2) * ensurePercent(u2));
      return convertHelper(l2.f, new a92(l2.f, l2.r, l2.g, l2.b, S2, true));
    }, a92.prototype.fadeIn = function(u2, c) {
      var l2 = this, v2 = 1, S2 = clampColor("a", l2.a + (c ? l2.a : v2) * ensurePercent(u2));
      return convertHelper(l2.f, new a92(l2.f, l2.r, l2.g, l2.b, S2, true));
    }, a92.prototype.mix = function(u2, c) {
      var l2 = this, v2 = ensureColor(u2), S2 = convertHelper(RGB, l2), g2 = convertHelper(RGB, v2), E2 = c === void 0 ? 0.5 : c, _ = 2 * E2 - 1, k = Math.abs(S2.a - g2.a), L2 = ((_ * k === -1 ? _ : (_ + k) / (1 + _ * k)) + 1) / 2, M2 = 1 - L2, $ = new a92(RGB, round(S2.r * L2 + g2.r * M2), round(S2.g * L2 + g2.g * M2), round(S2.b * L2 + g2.b * M2), S2.a * E2 + g2.a * (1 - E2), l2.o || v2.o);
      return convertHelper(this.f, $);
    }, a92.prototype.tint = function(u2) {
      return rgb(255, 255, 255).mix(this, u2);
    }, a92.prototype.shade = function(u2) {
      return rgb(0, 0, 0).mix(this, u2);
    }, a92.prototype.spin = function(u2) {
      var c = this, l2 = convertHelper(HSL, c);
      return convertHelper(c.f, new a92(HSL, modDegrees(l2.r + u2), l2.g, l2.b, c.a, c.o));
    }, a92;
  }()
);
function toHex(a92) {
  var u2 = round(a92);
  return (u2 < 16 ? "0" : "") + u2.toString(16);
}
function modDegrees(a92) {
  return ((a92 < 0 ? 360 : 0) + a92 % 360) % 360;
}
function RGBtoHSL(a92, u2, c, l2, v2) {
  var S2 = a92 / 255, g2 = u2 / 255, E2 = c / 255, _ = Math.min(S2, g2, E2), k = Math.max(S2, g2, E2), L2 = (_ + k) / 2, M2 = k - _, $;
  k === _ ? $ = 0 : S2 === k ? $ = (g2 - E2) / M2 : g2 === k ? $ = 2 + (E2 - S2) / M2 : E2 === k ? $ = 4 + (S2 - g2) / M2 : $ = 0, $ = Math.min($ * 60, 360), $ < 0 && ($ += 360);
  var J2;
  return k === _ ? J2 = 0 : L2 <= 0.5 ? J2 = M2 / (k + _) : J2 = M2 / (2 - k - _), new ColorHelper(HSL, $, J2, L2, l2, v2);
}
function HSLtoRGB(a92, u2, c, l2, v2) {
  var S2 = a92 / 360, g2 = u2, E2 = c;
  if (g2 === 0) {
    var _ = E2 * 255;
    return new ColorHelper(RGB, _, _, _, l2, v2);
  }
  for (var k = E2 < 0.5 ? E2 * (1 + g2) : E2 + g2 - E2 * g2, L2 = 2 * E2 - k, M2 = 0, $ = 0, J2 = 0, V2 = 0; V2 < 3; V2++) {
    var q2 = S2 + 0.3333333333333333 * -(V2 - 1);
    q2 < 0 && q2++, q2 > 1 && q2--;
    var _ = void 0;
    6 * q2 < 1 ? _ = L2 + (k - L2) * 6 * q2 : 2 * q2 < 1 ? _ = k : 3 * q2 < 2 ? _ = L2 + (k - L2) * (2 / 3 - q2) * 6 : _ = L2, _ *= 255, V2 === 0 ? M2 = _ : V2 === 1 ? $ = _ : J2 = _;
  }
  return new ColorHelper(RGB, M2, $, J2, l2, v2);
}
function clampColor(a92, u2) {
  var c = 0, l2 = maxChannelValues[a92];
  return u2 < c ? c : u2 > l2 ? l2 : u2;
}
function ensureColor(a92) {
  return a92 instanceof ColorHelper ? a92 : color(a92);
}
function parseHexCode(a92) {
  var u2 = a92.match(/#(([a-f0-9]{6})|([a-f0-9]{3}))$/i);
  if (u2) {
    var c = u2[1], l2 = parseInt(c.length === 3 ? c[0] + c[0] + c[1] + c[1] + c[2] + c[2] : c, 16), v2 = l2 >> 16 & 255, S2 = l2 >> 8 & 255, g2 = l2 & 255;
    return new ColorHelper(RGB, v2, S2, g2, 1, false);
  }
}
function parseColorFunction(a92) {
  var u2 = parseCSSFunction(a92);
  if (!(!u2 || !(u2.length === 4 || u2.length === 5))) {
    var c = u2[0], l2 = c === "rgba", v2 = c === "hsla", S2 = c === RGB, g2 = c === HSL, E2 = v2 || l2, _;
    if (S2 || l2)
      _ = RGB;
    else if (g2 || v2)
      _ = HSL;
    else
      throw new Error("unsupported color string");
    var k = toFloat(u2[1]), L2 = S2 || l2 ? toFloat(u2[2]) : ensurePercent(u2[2]), M2 = S2 || l2 ? toFloat(u2[3]) : ensurePercent(u2[3]), $ = E2 ? toFloat(u2[4]) : 1;
    return new ColorHelper(_, k, L2, M2, $, E2);
  }
}
const of = color, transparent = color("rgba(0,0,0,0)"), white = color("#ffffff"), black = color("#000000"), weights = { primary: { 50: "#EAFAF5", 100: "#D5F6EB", 200: "#ABEDD7", 300: "#82E3C3", 400: "#58DAAF", 500: "#26AD80", 600: "#25A77C", 700: "#1C7D5D", 800: "#12543E" }, secondary: { 50: "#FBEAEA", 100: "#F7D4D4", 200: "#EFA9A9", 300: "#E77E7E", 400: "#FF6F64", 500: "#E9554A", 600: "#CB362B", 700: "#811818", 800: "#561010" }, neutral: { 0: "#ffffff", 10: "#f5f5f5", 200: "#d9d9d9", 300: "#bababa", 350: "#999999", 400: "#9e9e9e", 500: "#808080", 600: "#666666", 700: "#4d4d4d", 800: "#303030", 900: "#141414", 1e3: "#000000" }, warning: { 400: "#FFC28A", 500: "#FFAE64", 600: "#F29540" } }, types = Object.keys(weights), weight = (a92) => (u2) => {
  const c = weights[a92];
  if (c[u2])
    return c[u2];
  const l2 = Object.keys(weights.primary).map(Number), v2 = l2.find((S2) => u2 <= S2);
  return v2 ? c[v2] : c[l2.slice(l2.length - 1)[0]];
}, primary = weight("primary"), neutral = weight("neutral"), secondary = weight("secondary"), warning = weight("warning"), lightstream = color("#26ad80"), twitch = color("#9156ff"), linkedin = color("#2867b2"), youtube = color("#ff0000"), facebook = color("#1877f2"), twitter = color("#1da1f2"), Color = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({ __proto__: null, black, color, facebook, lightstream, linkedin, neutral, of, primary, secondary, transparent, twitch, twitter, types, warning, white, youtube }, Symbol.toStringTag, { value: "Module" })), YouTube = /* @__PURE__ */ jsx("svg", { style: { flex: "0 0 100%" }, viewBox: "0 0 24 24", children: /* @__PURE__ */ jsx("path", { d: "M19.6465 8.53711C19.4707 7.83398 18.9141 7.27734 18.2402 7.10156C16.9805 6.75 12 6.75 12 6.75C12 6.75 6.99023 6.75 5.73047 7.10156C5.05664 7.27734 4.5 7.83398 4.32422 8.53711C3.97266 9.76758 3.97266 12.4043 3.97266 12.4043C3.97266 12.4043 3.97266 15.0117 4.32422 16.2715C4.5 16.9746 5.05664 17.502 5.73047 17.6777C6.99023 18 12 18 12 18C12 18 16.9805 18 18.2402 17.6777C18.9141 17.502 19.4707 16.9746 19.6465 16.2715C19.998 15.0117 19.998 12.4043 19.998 12.4043C19.998 12.4043 19.998 9.76758 19.6465 8.53711ZM10.3594 14.7773V10.0312L14.5195 12.4043L10.3594 14.7773Z" }) }), YouTubeDuo = /* @__PURE__ */ jsxs("svg", { style: { flex: "0 0 100%" }, viewBox: "0 0 24 24", children: [/* @__PURE__ */ jsx("rect", { x: "8", y: "9", width: "9", height: "7", fill: neutral(0) }), /* @__PURE__ */ jsx("path", { d: "M19.6465 8.53711C19.4707 7.83398 18.9141 7.27734 18.2402 7.10156C16.9805 6.75 12 6.75 12 6.75C12 6.75 6.99023 6.75 5.73047 7.10156C5.05664 7.27734 4.5 7.83398 4.32422 8.53711C3.97266 9.76758 3.97266 12.4043 3.97266 12.4043C3.97266 12.4043 3.97266 15.0117 4.32422 16.2715C4.5 16.9746 5.05664 17.502 5.73047 17.6777C6.99023 18 12 18 12 18C12 18 16.9805 18 18.2402 17.6777C18.9141 17.502 19.4707 16.9746 19.6465 16.2715C19.998 15.0117 19.998 12.4043 19.998 12.4043C19.998 12.4043 19.998 9.76758 19.6465 8.53711ZM10.3594 14.7773V10.0312L14.5195 12.4043L10.3594 14.7773Z" })] }), Facebook = /* @__PURE__ */ jsx("svg", { style: { flex: "0 0 100%" }, viewBox: "0 0 24 24", children: /* @__PURE__ */ jsx("path", { d: "M15.4863 13.3125L15.8965 10.6172H13.2891V8.85938C13.2891 8.09766 13.6406 7.39453 14.8125 7.39453H16.0137V5.08008C16.0137 5.08008 14.9297 4.875 13.9043 4.875C11.7656 4.875 10.3594 6.19336 10.3594 8.53711V10.6172H7.95703V13.3125H10.3594V19.875H13.2891V13.3125H15.4863Z" }) }), FacebookCircle = /* @__PURE__ */ jsx("svg", { style: { flex: "0 0 100%" }, viewBox: "0 0 24 24", children: /* @__PURE__ */ jsx("path", { d: "M19.2656 12.375C19.2656 8.36133 16.0137 5.10938 12 5.10938C7.98633 5.10938 4.73438 8.36133 4.73438 12.375C4.73438 16.0078 7.37109 19.0254 10.8574 19.5527V14.4844H9.01172V12.375H10.8574V10.793C10.8574 8.97656 11.9414 7.95117 13.582 7.95117C14.4023 7.95117 15.2227 8.09766 15.2227 8.09766V9.88477H14.3145C13.4062 9.88477 13.1133 10.4414 13.1133 11.0273V12.375H15.1348L14.8125 14.4844H13.1133V19.5527C16.5996 19.0254 19.2656 16.0078 19.2656 12.375Z" }) }), Twitch = /* @__PURE__ */ jsx("svg", { style: { flex: "0 0 100%" }, viewBox: "0 0 24 24", children: /* @__PURE__ */ jsx("path", { d: "M16.9551 8.92188H15.8125V12.1445H16.9551V8.92188ZM13.8496 8.89258H12.707V12.1152H13.8496V8.89258ZM9.01562 5.875L6.20312 8.57031V18.209H9.60156V20.875L12.4141 18.209H14.6699L19.7676 13.375V5.875H9.01562ZM18.6543 12.8477L16.3691 14.9863H14.1133L12.1504 16.8613V14.9863H9.60156V6.95898H18.6543V12.8477Z" }) }), TwitchDuo = /* @__PURE__ */ jsxs("svg", { style: { flex: "0 0 100%" }, viewBox: "0 0 24 24", children: [/* @__PURE__ */ jsx("path", { d: "M19 6.5H9L8.8125 17.5H13.5L19 13V6.5Z", fill: neutral(0) }), /* @__PURE__ */ jsx("path", { d: "M16.9551 8.92188H15.8125V12.1445H16.9551V8.92188ZM13.8496 8.89258H12.707V12.1152H13.8496V8.89258ZM9.01562 5.875L6.20312 8.57031V18.209H9.60156V20.875L12.4141 18.209H14.6699L19.7676 13.375V5.875H9.01562ZM18.6543 12.8477L16.3691 14.9863H14.1133L12.1504 16.8613V14.9863H9.60156V6.95898H18.6543V12.8477Z" })] }), Twitter = /* @__PURE__ */ jsx("svg", { style: { flex: "0 0 100%" }, viewBox: "0 0 24 24", children: /* @__PURE__ */ jsx("path", { d: "M20.6681 7.98749C20.6806 8.16248 20.6806 8.33751 20.6806 8.5125C20.6806 13.85 16.6197 20 9.1976 20C6.91098 20 4.78681 19.3375 3 18.1875C3.32489 18.225 3.63723 18.2375 3.97462 18.2375C5.86136 18.2375 7.59821 17.6 8.98518 16.5125C7.21086 16.475 5.72393 15.3125 5.21162 13.7125C5.46155 13.75 5.71143 13.775 5.97386 13.775C6.33621 13.775 6.69859 13.725 7.03594 13.6375C5.18666 13.2625 3.79966 11.6375 3.79966 9.67499V9.62501C4.33693 9.92501 4.96174 10.1125 5.62393 10.1375C4.53685 9.41247 3.82466 8.17498 3.82466 6.77497C3.82466 6.02499 4.02454 5.33749 4.37443 4.73748C6.36117 7.18748 9.34753 8.78745 12.6962 8.96248C12.6337 8.66248 12.5962 8.35001 12.5962 8.03751C12.5962 5.81248 14.3955 4 16.6322 4C17.7942 4 18.8438 4.4875 19.581 5.275C20.4931 5.10001 21.3678 4.76249 22.1425 4.3C21.8426 5.23752 21.2054 6.02502 20.3682 6.52499C21.1804 6.43753 21.9676 6.21248 22.6923 5.90001C22.1426 6.69998 21.4553 7.41245 20.6681 7.98749Z" }) }), LinkedIn = /* @__PURE__ */ jsx("svg", { style: { flex: "0 0 100%" }, viewBox: "0 0 24 24", children: /* @__PURE__ */ jsx("path", { d: "M19.2 3H4.8C3.81 3 3.009 3.81 3.009 4.8L3 19.2C3 20.19 3.81 21 4.8 21H19.2C20.19 21 21 20.19 21 19.2V4.8C21 3.81 20.19 3 19.2 3ZM8.4 18.3H5.7V10.2H8.4V18.3ZM7.05 8.679C6.15 8.679 5.421 7.95 5.421 7.05C5.421 6.15 6.15 5.421 7.05 5.421C7.95 5.421 8.679 6.15 8.679 7.05C8.679 7.95 7.95 8.679 7.05 8.679ZM18.3 18.3H15.6V13.53C15.6 12.783 14.997 12.18 14.25 12.18C13.503 12.18 12.9 12.783 12.9 13.53V18.3H10.2V10.2H12.9V11.28C13.368 10.524 14.331 10.02 15.15 10.02C16.887 10.02 18.3 11.433 18.3 13.17V18.3Z" }) }), Lightstream = /* @__PURE__ */ jsxs("svg", { style: { flex: "0 0 100%" }, viewBox: "0.144 0 27.712 24", children: [/* @__PURE__ */ jsx("path", { d: "M16.0369 12.1232L14 15.6518L11.5642 11.4335L6.27356 10.6176L14 24L20.4627 12.805L16.0369 12.1232Z" }), /* @__PURE__ */ jsx("path", { d: "M9.74033 8.27418L7.37317 4.17409H20.6268L19.0921 6.83194L24.3827 6.01602L27.8558 0H0.144165L5.31453 8.95665L9.74033 8.27418Z" })] }), LightstreamWithText = /* @__PURE__ */ jsxs("svg", { style: { flex: "0 0 100%" }, viewBox: "0 0 3000 524", children: [/* @__PURE__ */ jsx("polygon", { points: "330.56 263.5 299.73 316.91 262.86 253.06 182.78 240.71 299.73 443.27 397.55 273.82 330.56 263.5" }), /* @__PURE__ */ jsx("polygon", { points: "235.25 205.24 199.42 143.18 400.03 143.18 376.8 183.41 456.88 171.06 509.45 80 90 80 168.26 215.57 235.25 205.24" }), /* @__PURE__ */ jsx("path", { d: "M646.32,345.72h94.91v13.73H630V167.26h16.36Z" }), /* @__PURE__ */ jsx("path", { d: "M846.24,359.45H830V167.26h16.23Z" }), /* @__PURE__ */ jsx("path", { d: "M1091.16,336.61q-8.45,12-26.46,18.74t-40.33,6.73q-22.57,0-40.13-10.82t-27.19-30.62q-9.64-19.8-9.77-45.41V250.95q0-40,20.2-63.16t54.25-23.17q29.69,0,47.78,15.11T1091,221.38h-16.24q-3.56-21.18-17.23-32.11t-35.7-10.92q-26.92,0-42.64,19.15t-15.71,54v22.72q0,21.93,7.46,38.77t21.38,26.09q13.92,9.25,32,9.25,21,0,36-6.6,9.76-4.36,14.52-10.16V282h-51.61V268.24h67.85Z" }), /* @__PURE__ */ jsx("path", { d: "M1333.71,359.45h-16.37V278.11H1207.53v81.33h-16.23V167.26h16.23v97.12h109.81V167.26h16.37Z" }), /* @__PURE__ */ jsx("path", { d: "M1563.2,181h-65.87V359.45H1481.1V181h-65.73V167.26H1563.2Z" }), /* @__PURE__ */ jsx("path", { d: "M1990.75,181h-65.87V359.45h-16.23V181h-65.73V167.26h147.83Z" }), /* @__PURE__ */ jsx("path", { d: "M2147.65,279.33h-55.84v80.12h-16.36V167.26h62.43q30.75,0,48,14.9t17.29,41.66a52,52,0,0,1-10.83,32.56q-10.82,14.11-29,19.51l48,81.83v1.72h-17.29Zm-55.84-13.73h49.76q20.45,0,32.86-11.63t12.41-30.14q0-20.36-12.93-31.59T2137.61,181h-45.8Z" }), /* @__PURE__ */ jsx("path", { d: "M2407.62,278.11h-89.88v67.61h103.35v13.73H2301.5V167.26h118.92V181H2317.73v83.39h89.88Z" }), /* @__PURE__ */ jsx("polygon", { points: "2892.79 183.67 2892.79 183.67 2816.23 326.97 2724.06 154.45 2724.06 189.54 2724.06 359.75 2739.67 359.75 2739.67 218.3 2816.26 359.42 2892.79 218.32 2892.79 359.75 2908.4 359.75 2908.4 189.54 2908.4 154.45 2892.79 183.67" }), /* @__PURE__ */ jsx("polygon", { points: "2649.77 359.45 2569.47 154.54 2569.47 154.53 2569.46 154.53 2569.46 154.53 2569.46 154.54 2489.16 359.45 2506.19 359.45 2569.46 194.32 2632.74 359.45 2649.77 359.45" }), /* @__PURE__ */ jsx("path", { d: "M1764.57,287q-6.73-10.56-20.06-18.15a131.55,131.55,0,0,0-21.47-9.18l-7.64,13.49q19.65,6.61,28.32,13.77,11.22,9.3,11.22,25.28,0,16.37-13.6,26.26t-36,9.9c-11.35,0-21.05-1.94-29.35-5.51l-7,12.33a94,94,0,0,0,36.33,6.91q29.7,0,47.85-13.73t18.15-36.43Q1771.3,297.55,1764.57,287Z" }), /* @__PURE__ */ jsx("path", { d: "M1659.11,250.93c7.28,5.25,18,10.18,32.13,14.79l7.72-13.38q-21-6.41-31.29-14.49Q1655.95,228.61,1656,214q0-15.83,13-25.66t35-9.83c13.12,0,23.78,3.19,32.26,9.21l7.23-12.51c-1.71-1-3.43-2.1-5.3-3q-15.09-7.38-34.18-7.38-28.19,0-46.31,13.76t-18.11,35.77Q1639.62,237,1659.11,250.93Z" }), /* @__PURE__ */ jsx("path", { d: "M1744.34,268.78a129.23,129.23,0,0,0-21.68-9.32l-7.79,13.49c13.28,4.44,22.87,9.06,28.68,13.88q11.2,9.29,11.2,25.23,0,16.33-13.57,26.21t-36,9.88c-11.8,0-21.85-2-30.34-5.91l-7.08,12.26.2.1a93.63,93.63,0,0,0,37.22,7.25q29.64,0,47.75-13.7t18.11-36.36q0-14.36-6.72-24.9T1744.34,268.78Z" })] }), IconMap = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({ __proto__: null, Facebook, FacebookCircle, Lightstream, LightstreamWithText, LinkedIn, Twitch, TwitchDuo, Twitter, YouTube, YouTubeDuo }, Symbol.toStringTag, { value: "Module" })), nudge = (a92) => {
  if (a92.nudgeUp || a92.nudgeDown || a92.nudgeRight || a92.nudgeLeft)
    return { position: "relative", top: a92.nudgeDown, left: a92.nudgeRight, right: a92.nudgeLeft, bottom: a92.nudgeUp };
}, SVGWrapper = ({ children: a92, width: u2, height: c, color: l2, colorWeight: v2 = 0, marginLeft: S2, marginTop: g2, marginRight: E2, marginBottom: _, className: k, ...L2 }) => (l2 && Color[l2](v2), /* @__PURE__ */ jsx("div", { className: k, style: { ...nudge(L2), display: "flex", justifyContent: "center", flexBasis: u2 || "auto", flexShrink: 0, width: u2, height: c || u2 && "fit-content", marginLeft: S2, marginTop: g2, marginBottom: _, marginRight: E2 }, children: a92 })), Icon = ({ name: a92, ...u2 }) => /* @__PURE__ */ jsx(SVGWrapper, { ...u2, children: IconMap[a92] }), Icon$1 = Icon, dragImageSvg = `
  <svg height="75" width="120" viewBox="0 0 120 75" xmlns="http://www.w3.org/2000/svg" style="">
    <rect width="120" height="75" rx="3" style="
      opacity: 0.4;
      stroke: white;
      stroke-width: 3px;
      stroke-opacity: 0.7;
    "/>
  </svg>`;
let dragImage;
const loadDragImage = () => dragImage || (dragImage = new Image(), dragImage.src = URL.createObjectURL(new Blob([dragImageSvg], { type: "image/svg+xml" })), dragImage);
class ErrorBoundary extends React.Component {
  constructor(u2) {
    super(u2), this.state = { error: null };
  }
  componentDidCatch(u2, c) {
    log$1.warn(u2, c);
  }
  static getDerivedStateFromError() {
    return { error: true };
  }
  render() {
    return this.state.error ? null : this.props.children;
  }
}
const onDrop = async (a92, u2) => {
  u2.preventDefault(), u2.stopPropagation();
  const { dropNodeId: c, dropType: l2, project: v2 } = a92, S2 = u2.dataTransfer.getData("text/plain");
  if (log$1.debug("Compositor: Dropping", { dropType: l2, dragNodeId: S2, dropNodeId: c }), c === S2)
    return;
  const [g2, E2, _, k] = await Promise.all([v2.compositor.get(S2), v2.compositor.get(c), v2.compositor.getParent(S2), v2.compositor.getParent(c)]);
  if (l2 === "layout")
    return _.id === c ? void 0 : CoreContext.Command.moveNode({ projectId: v2.id, nodeId: g2.id, parentId: E2.id });
  if (_.id !== (k == null ? void 0 : k.id))
    return CoreContext.Command.swapNodes({ projectId: v2.id, nodeAId: g2.id, nodeBId: E2.id });
  const L2 = _.children.map((M2) => M2.id);
  return CoreContext.Command.reorderNodes({ projectId: v2.id, parentId: _.id, childIds: swapItems(g2.id, E2.id, L2) });
};
let foundDropTarget = false;
const ElementTree = (a92) => {
  var Y2, ne2;
  const u2 = reactExports.useRef(false), c = reactExports.useRef(), l2 = reactExports.useRef(), v2 = reactExports.useRef(), { project: S2, interactive: g2 = true, onElementDoubleClick: E2, checkIsDragTarget: _, checkIsDropTarget: k } = reactExports.useContext(CompositorContext), { nodeId: L2 } = a92, M2 = S2.compositor.get(L2);
  if (!M2)
    return null;
  const $ = CoreContext.compositor.getElement(M2), J2 = M2.props.layout || "Row", V2 = g2 && _(M2), q2 = g2 && k(M2);
  let G2 = q2 ? { onDrop: (Z2) => (foundDropTarget = true, onDrop({ dropType: "layout", dropNodeId: M2.id, project: S2 }, Z2)), onDragOver: (Z2) => {
    var re2;
    Z2.preventDefault(), Z2.stopPropagation(), (re2 = v2.current) == null || re2.toggleAttribute("data-layout-drop-target-active", true);
  }, onDragLeave: (Z2) => {
    var re2;
    Z2.preventDefault(), Z2.stopPropagation(), (re2 = v2.current) == null || re2.toggleAttribute("data-layout-drop-target-active", false);
  } } : {}, H2 = V2 ? {
    draggable: true,
    // If a target is draggable, it will also be treated as
    //  a drop target (swap element positions)
    ondrop: (Z2) => (foundDropTarget = true, onDrop(
      { dropType: "transform", dropNodeId: M2.id, project: S2 },
      // @ts-ignore TODO: Convert all to native drag events
      Z2
    )),
    ondragstart: (Z2) => {
      var re2;
      u2.current = true, wrapperEl.toggleAttribute("data-dragging", true), log$1.debug("Compositor: Dragging", M2.id), foundDropTarget = false, Z2.dataTransfer.setData("text/plain", M2.id), Z2.dataTransfer.dropEffect = "move", Z2.dataTransfer.setDragImage(dragImage, 10, 10), (re2 = v2.current) == null || re2.toggleAttribute("data-drag-target-active", true), window.__dragging = true;
    },
    ondragend: (Z2) => {
      var re2;
      u2.current = false, foundDropTarget || (log$1.info("Compositor: No drop target - deleting node", M2), CoreContext.Command.deleteNode({ nodeId: M2.id })), wrapperEl.toggleAttribute("data-dragging", true), log$1.debug("Compositor: DragEnd", Z2), (re2 = v2.current) == null || re2.toggleAttribute("data-drag-target-active", false), wrapperEl.querySelectorAll("[data-item]").forEach((oe2) => {
        oe2.toggleAttribute("data-drag-target-active", false), oe2.toggleAttribute("data-layout-drop-target-active", false), oe2.toggleAttribute("data-transform-drop-target-active", false);
      }), window.__dragging = false;
    },
    ondragover: (Z2) => {
      var re2;
      Z2.preventDefault(), Z2.stopPropagation(), !u2.current && ((re2 = v2.current) == null || re2.toggleAttribute("data-transform-drop-target-active", true));
    },
    ondragleave: (Z2) => {
      var re2;
      Z2.preventDefault(), Z2.stopPropagation(), (re2 = v2.current) == null || re2.toggleAttribute("data-transform-drop-target-active", false);
    }
  } : {};
  reactExports.useEffect(() => {
    l2.current && $ && (l2.current.appendChild($.root), Object.assign(l2.current.style, { width: "100%", height: "100%", position: "relative", overflow: "hidden" }), Object.assign($.root.style, { pointerEvents: V2 ? "all" : "none", width: "100%", height: "100%", position: "relative", ...M2.props.style || {} }));
  }, [l2.current, $]), reactExports.useEffect(() => {
    const Z2 = V2 ? () => E2(M2) : () => {
    };
    return c.current && (Object.assign(c.current, H2), Object.assign(c.current.style, { pointerEvents: V2 ? "all" : "none" }), c.current.addEventListener("dblclick", Z2)), () => {
      var re2;
      (re2 = c.current) == null || re2.removeEventListener("dblclick", Z2);
    };
  }, [c.current]);
  const B2 = { layout: J2, ...M2.props.layoutProps ?? {} };
  return /* @__PURE__ */ jsxs("div", { ref: v2, "data-id": M2.id + "-x", "data-item": true, ...V2 && { "data-drag-target": true }, ...q2 && { "data-drop-target": true }, ...G2, style: { position: "relative", width: ((Y2 = M2.props.size) == null ? void 0 : Y2.x) || "100%", height: ((ne2 = M2.props.size) == null ? void 0 : ne2.y) || "100%", pointerEvents: "none" }, children: [/* @__PURE__ */ jsx("div", { className: "interactive-overlay", ref: c, style: { height: "100%", width: "100%", position: "absolute", zIndex: 2 } }), /* @__PURE__ */ jsxs("div", { className: "item-element", style: { display: "flex", flex: "0 0 auto", justifyContent: "center", width: "100%", height: "100%" }, children: [/* @__PURE__ */ jsx("div", { ref: l2 }), /* @__PURE__ */ jsx(ErrorBoundary, { children: /* @__PURE__ */ jsx("ls-layout", { "data-id": M2.id + "-x", props: JSON.stringify(B2), layout: J2, children: M2.children.map((Z2) => /* @__PURE__ */ jsx(ElementTree, { nodeId: Z2.id }, Z2.id)) }) })] })] });
}, Root = (a92) => {
  const { project: u2 } = reactExports.useContext(CompositorContext), [c, l2] = reactExports.useState(null);
  return reactExports.useEffect(() => (l2(u2.compositor.renderTree()), CoreContext.onInternal("NodeChanged", () => {
    l2(u2.compositor.renderTree());
  })), []), reactExports.useEffect(() => {
    const v2 = u2.compositor.getRoot(), { x: S2 } = v2.props.size, g2 = () => {
      var J2, V2, q2;
      const { bannerStyle: E2 = "default", primaryColor: _ = "#ABABAB", showNameBanners: k } = u2.props ?? {}, L2 = ((J2 = u2.props) == null ? void 0 : J2.logoPosition) ?? ((q2 = (V2 = u2.props) == null ? void 0 : V2.logo) == null ? void 0 : q2.logoPosition) ?? "top-right";
      if (!E2 || !_ || !L2)
        return;
      const M2 = themes[E2](_, k, S2 / 1920), $ = themes[L2](S2 / 1920);
      a92.setStyle(`${M2} ${$}` || "");
    };
    return g2(), CoreContext.onInternal("ProjectChanged", g2);
  }, [u2]), c ? /* @__PURE__ */ jsx("div", { onDrop: (v2) => {
    foundDropTarget = true, v2.preventDefault();
  }, onDragOver: (v2) => {
    v2.preventDefault();
  }, onDragLeave: (v2) => {
    v2.preventDefault();
  }, style: { userSelect: "none", width: `${c.props.size.x + PADDING * 2}px`, height: `${c.props.size.y + PADDING * 2}px`, margin: PADDING + "px" }, children: /* @__PURE__ */ jsx("div", { style: { width: "100%", height: "100%", overflow: "hidden" }, children: /* @__PURE__ */ jsx(ElementTree, { nodeId: c.id }) }) }) : null;
};
let wrapperEl, customStyleEl;
const PADDING = 0, render$1 = (a92) => {
  const { containerEl: u2, projectId: c, dragAndDrop: l2 = false, checkDragTarget: v2 = scenelessProjectDragCheck, checkDropTarget: S2 = scenelessProjectDropCheck } = a92, g2 = getProject(c);
  CoreContext.clients.LayoutApi().subscribeToLayout(g2.layoutApi.layoutId), loadDragImage();
  const E2 = a92.onElementDoubleClick ?? (() => {
  });
  if (!u2 || !g2)
    return;
  if (!u2.shadowRoot) {
    u2.attachShadow({ mode: "open" }), customStyleEl = document.createElement("style");
    const J2 = document.createElement("style");
    J2.textContent = getStyle(), wrapperEl = document.createElement("div"), wrapperEl.id = "compositor-root", Object.assign(wrapperEl.style, { width: "100%", height: "100%", display: "flex", alignItems: "center", justifyContent: "center", transformOrigin: "center" }), u2.shadowRoot.appendChild(J2), u2.shadowRoot.appendChild(customStyleEl), u2.shadowRoot.appendChild(wrapperEl), new ResizeObserver((q2) => {
      M2();
    }).observe(u2);
  }
  const _ = g2.compositor.getRoot(), { x: k, y: L2 } = _.props.size, M2 = () => {
    let { width: J2, height: V2 } = u2.getBoundingClientRect();
    const q2 = J2 / V2, G2 = k / L2;
    let H2;
    J2 && V2 ? G2 > q2 ? H2 = J2 / (k + PADDING * 2) : H2 = V2 / (L2 + PADDING * 2) : H2 = 1, wrapperEl.style.willChange = "transform", wrapperEl.style.transform = `scale(${H2}) translateZ(0)`, window.__scale = H2, $();
  }, $ = () => {
    ReactDOM.render(/* @__PURE__ */ jsx(CompositorProvider, { project: g2, interactive: l2, onElementDoubleClick: E2, checkIsDropTarget: S2, checkIsDragTarget: v2, children: /* @__PURE__ */ jsx(Root, { setStyle: (J2) => {
      customStyleEl.textContent = J2;
    } }) }), wrapperEl);
  };
  M2();
}, scenelessProjectDragCheck = (a92) => a92.props.name === "Participant" || a92.props.sourceType === "RoomParticipant" || a92.props.sourceType === "RTMP", scenelessProjectDropCheck = (a92) => a92.props.name === "Content", CompositorContext = React.createContext({ interactive: false, project: null, checkIsDragTarget: () => false, checkIsDropTarget: () => false, onElementDoubleClick: () => {
} }), CompositorProvider = ({ children: a92, ...u2 }) => /* @__PURE__ */ jsx(CompositorContext.Provider, { value: { ...u2 }, children: a92 }), getStyle = () => `
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: 'Arial';
}

video {
  width: 100%;
  height: 100%;
  object-fit: contain;
}

.NameBanner {
  top: 100%;
  transform: translateY(-100%);
  left: 0;
  height: 30px;
  background: linear-gradient(90deg, rgba(0, 0, 0, 0.5) 50%, rgba(0, 0, 0, 0) 100%);
  padding: 0px 0px 0px 10px;
  color: rgba(255, 255, 255, 0.9);
  font-weight: bold;
  line-height: 30px;
  width: 100%;
  font-size: 28px;
  position: absolute;
}

ls-layout[layout="Presentation"][props*="\\"cover\\"\\:true"] > :first-child .NameBanner {
  top: 0% !important;
  transform: translateY(0%) !important;
}

[layout="Layered"] > [data-item] {
  transform: scale(1.003) !important;
}
[layout="Layered"] > [data-item]:nth-child(2) {
  transform: scale(1.0015) !important;
}
[layout="Layered"] > [data-item]:nth-child(1) {
  transform: scale(1) !important;
}

.logo {
  position: absolute !important;
}

#compositor-root[data-dragging] {}

[data-drag-target] {}
[data-drag-target]:hover > .interactive-overlay {
  box-shadow: 0 0 0 3px inset rgba(255, 255, 255, 0.5);
  cursor: grab;
}
[data-drop-target] {}
[data-drop-target]:hover {}
[data-drag-target][data-drag-target-active] > .interactive-overlay {
  box-shadow: 0 0 0 3px inset rgba(255, 255, 255, 0.2);
}
[data-drag-target][data-drag-target-active] > .item-element {
  opacity: 0.8;
}
[data-layout-drop-target-active] > .interactive-overlay {
  box-shadow: 0 0 0 3px inset yellow;
}
[data-transform-drop-target-active] > .interactive-overlay {
  box-shadow: 0 0 0 3px inset white;
}
`;
var BannerStyle = /* @__PURE__ */ ((a92) => (a92.DEFAULT = "default", a92.MINIMAL = "minimal", a92.BUBBLE = "bubble", a92))(BannerStyle || {});
const themes = { "top-left": (a92 = 1280 / 1920) => `
      .wrapper {
       top:0;
       left:0;
    }`, "top-right": (a92 = 1280 / 1920) => `
      .wrapper {
       top:0;
       right:0;
    }`, "bottom-left": (a92 = 1280 / 1920) => `
      .wrapper {
       bottom:0;
       left:0;
    }`, "bottom-right": (a92 = 1280 / 1920) => `
      .wrapper {
       bottom:0;
       right:0;
    }`, default: (a92 = "#ABABAB", u2 = true, c = 1280 / 1920) => {
  const l2 = color(a92).lightness() < 0.6 ? "#FFF" : "#000", v2 = color(a92).lightness() < 0.6 ? "#FFF" : "#000", S2 = color(a92).lightness() < 0.6 ? "#000" : "#FFF", g2 = (E2) => E2 * c + "px";
  return `
      .ChatOverlay {
        background: ${a92} !important;
        margin-bottom: ${g2(40)} !important;
        transition: 300ms ease all;
        left: 0;

        /* Default Size 4 */
        font-size: ${g2(44)} !important;
        padding: ${g2(40)} ${g2(100)} !important;
        border-radius: ${g2(20)} !important;
      }
      
      .ChatOverlay-badge-icon {
          width:${g2(32)};
          height: ${g2(32)};
          fill: currentcolor;
          color: ${S2};
      }

       .ChatOverlay-badge-container {
          background-color:${v2};
          display:flex;
          flex-direction:row;
          padding: ${g2(6)} ${g2(12)} ${g2(6)} ${g2(6)};
          border-radius: ${g2(10)};
          align-items: center;
          border-bottom-left-radius: 0px !important;
          position: relative;
          border: none;
          cursor: pointer;
       }
      
       .ChatOverlay-badge-username {
          color:${S2};
          padding:${g2(6)};
          font-size:${g2(18)};
          font-weight:700;
          text-transform: capitalize; 
       }
       
       .ChatOverlay-badge-container::before {
          content:"";
          width:15px;
          height:15px;
          background-color:${v2};
          position: absolute;
          bottom:-14px;
          left:0;
          clip-path:polygon(0 100%, 12% 87%, 26% 73%, 45% 53%, 59% 40%, 71% 28%, 85% 14%, 100% 0, 0 0);
        }
       

       .ChatOverlay-avatar {
          height: ${g2(120)};
          width: ${g2(120)};
          left:0;
          right:0;
          top:0;
          bottom:0;
          border-radius:50%;
       }

      .Banner, .NameBanner, .ChatOverlay {
        background: ${a92} !important;
        margin-bottom: ${g2(40)} !important;
        transition: 300ms ease all;
        left: 0;

        /* Default Size 4 */
        font-size: ${g2(44)} !important;
        padding: ${g2(40)} ${g2(100)} !important;
        border-top-right-radius: ${g2(20)} !important;
        border-bottom-right-radius: ${g2(20)} !important;
      }

      .Banner-body, .NameBanner-body, .ChatOverlay-body {
        color: ${l2} !important;
        font-family: 'Roboto' !important;
        font-style: normal !important;
        font-weight: 700 !important;
        line-height: 120% !important;
      }

      .NameBanner {
        transform-origin: 0 100%;
        margin: 0 !important;
        transform: translateX(-100%);
        opacity: 0 !important;
        white-space: nowrap;
        ${u2 && `
          opacity: 1 !important;
          transform: translateX(0);
        `}
      }

      .NameBanner[data-size="4"] {
        padding: ${g2(40)} ${g2(100)} !important;
        font-size: ${g2(44)} !important;
        border-top-right-radius: ${g2(20)} !important;
        border-bottom-right-radius: ${g2(20)} !important;
      }
      .NameBanner[data-size="3"] {
        padding: ${g2(12)} ${g2(30)} !important;
        font-size: ${g2(44)} !important;
        border-top-right-radius: ${g2(20)} !important;
        border-bottom-right-radius: ${g2(20)} !important;
      }
      .NameBanner[data-size="2"] {
        padding: ${g2(12)} ${g2(20)} !important;
        font-size: ${g2(28)} !important;
        border-top-right-radius: ${g2(16)} !important;
        border-bottom-right-radius: ${g2(16)} !important;
      }
      .NameBanner[data-size="1"], .NameBanner[data-size="0"] {
        padding: ${g2(8)} ${g2(8)} !important;
        font-size: ${g2(20)} !important;
        border-top-right-radius: ${g2(8)} !important;
        border-bottom-right-radius: ${g2(8)} !important;
      }
      .NameBanner[data-size="0"] {
        opacity: 0;
        transform: translateX(-100%);
      }
    `;
}, minimal: (a92 = "#ABABAB", u2 = true, c = 1280 / 1920) => {
  const l2 = "white", v2 = "#fff", S2 = "#000", g2 = (E2) => E2 * c + "px";
  return `

      .ChatOverlay-badge-icon {
          width:${g2(32)};
          height: ${g2(32)};
          fill: currentcolor;
          color: ${S2};
      }

       .ChatOverlay-badge-container {
          background-color:${v2};
          display:flex;
          flex-direction:row;
          padding: ${g2(6)} ${g2(12)} ${g2(6)} ${g2(6)};
          align-items: center;
          position: relative;
          border: none;
          cursor: pointer;
       }

       .ChatOverlay-badge-username {
          color:${S2};
          padding:${g2(6)};
          font-size:${g2(18)};
          font-weight:700;
          text-transform: capitalize; 
       }

       .ChatOverlay-avatar {
          height: ${g2(120)};
          width: ${g2(120)};
          left:0;
          right:0;
          top:0;
          bottom:0;
          border-radius:50%;
       }


    .Banner, .NameBanner, .ChatOverlay {
        background: ${color(a92).fade(color(a92).alpha() * 0.7).toString()} !important;
        padding: ${g2(40)} ${g2(40)} ${g2(40)} ${g2(60)} !important;
        position: relative !important;
        margin-bottom: ${g2(40)} !important;
        transition: 300ms ease all;
        font-size: ${g2(34)} !important;
        left: 0;
      }

      .Banner:before, .NameBanner:before, .ChatOverlay:before {
        z-index: 1;
        content: "";
        position: absolute;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.6);
        transition: 300ms ease all;
        opacity: ${color(a92).alpha()};
      }
      .Banner:after, .NameBanner:after, .ChatOverlay:after {
        z-index: 1;
        content: "";
        position: absolute;
        left: 0;
        top: 0;
        height: 100%;
        transition: 300ms ease all;
        width: ${g2(20)};
        background: ${color(a92)};
        opacity: ${color(a92).alpha()};
      }
      .Banner-body, .NameBanner-body, .ChatOverlay-body {
        color: ${l2} !important;
        font-family: 'Roboto' !important;
        font-style: normal !important;
        font-weight: 700 !important;
        line-height: 120% !important;
        position: relative;
        z-index: 2;
      }
      .Banner-header {
        font-size: ${g2(90)};
        position: relative;
        z-index: 2;
      }
      .NameBanner {
        transform-origin: 0 100%;
        margin: 0 !important;
        transform: translateX(-100%);
        opacity: 0 !important;
        white-space: nowrap;
        ${u2 && `
          opacity: 1 !important;
          transform: translateX(0);
        `}
      }

      .NameBanner[data-size="4"] {
        padding: ${g2(40)} ${g2(40)} ${g2(40)} ${g2(60)} !important;
        font-size: ${g2(34)} !important;
      }
      .NameBanner[data-size="3"] {
        padding: ${g2(16)} ${g2(40)} ${g2(16)} ${g2(60)} !important;
        font-size: ${g2(34)} !important;
      }
      .NameBanner[data-size="2"] {
        padding: ${g2(12)} ${g2(24)} ${g2(12)} ${g2(44)} !important;
        font-size: ${g2(24)} !important;
      }
      .NameBanner[data-size="1"], .NameBanner[data-size="0"] {
        padding: ${g2(12)} ${g2(16)} ${g2(12)} ${g2(36)} !important;
        font-size: ${g2(18)} !important;
      }
      .NameBanner[data-size="0"] {
        opacity: 0 !important;
        transform: translateX(-100%);
      }
    `;
}, bubble: (a92 = "#ABABAB", u2 = true, c = 1280 / 1920) => {
  const l2 = color(a92).lightness() < 0.6 ? "#FFF" : "#000", v2 = color(a92).lightness() < 0.6 ? "#FFF" : "#000", S2 = color(a92).lightness() < 0.6 ? "#000" : "#FFF", g2 = (E2) => E2 * c + "px";
  return `
      .ChatOverlay-badge-icon {
          width:${g2(32)};
          height: ${g2(32)};
          fill: currentcolor;
          color: ${S2};
      }


       .ChatOverlay-badge-container {
          background-color:${v2};
          display:flex;
          flex-direction:row;
          padding: ${g2(6)} ${g2(12)} ${g2(6)} ${g2(6)};
          align-items: center;
          z-index: 1;
          border: none;
          cursor: pointer;
          top: 0;
          margin-bottom: 2px;
          margin-left: -${g2(30)};
          border-radius: 30px;
       }

       .ChatOverlay-badge-username {
          color:${S2};
          padding:${g2(6)};
          font-size:${g2(18)};
          font-weight:700;
          text-transform: capitalize; 
       }

       .ChatOverlayAvatar-container {
          height: ${g2(120)};
          width: ${g2(120)};
          top: 0;
       }
       .ChatOverlay-avatar {
          height: ${g2(120)};
          width: ${g2(120)};
          left:0;
          right:0;
          top:0;
          bottom:0;
          border-radius:50%;
       }


      .Banner, .ChatOverlay {
        transform: translateX(-50%);
        left: 50%;
        margin-bottom: ${g2(40)} !important;
      }

      .Banner, .NameBanner, .ChatOverlay {
        background: ${color(a92)} !important;
        color: ${l2} !important;
        border-radius: 500px !important;
        transition: 300ms ease all;

        /* Default Style */
        border: 4px solid ${l2} !important;
        padding: ${g2(40)} ${g2(80)} !important;
        font-size: ${g2(40)} !important;
      }
      .Banner-body, .NameBanner-body, .ChatOverlay-body {
        color: ${l2} !important;
        text-align: center !important;
        font-family: 'Roboto' !important;
        font-style: normal !important;
        font-weight: 700 !important;
        line-height: 120% !important;
      }
      .NameBanner {
        transform-origin: 0% 100%;
        transform: translateX(-100%);
        opacity: 0 !important;
        white-space: nowrap;
        ${u2 && `
          opacity: 1 !important;
          transform: translateX(0);
        `}
      }

      ls-layout[layout="Presentation"][props*="\\"cover\\"\\:true"] > :first-child .NameBanner {
        top: 0% !important;
        transform: translateY(0%) !important;
        margin: ${g2(20)} ${g2(20)};
      }


      .NameBanner[data-size="4"] {
        padding: ${g2(40)} ${g2(80)} ${g2(40)} ${g2(80)} !important;
        font-size: ${g2(40)} !important;
      }
      .NameBanner[data-size="3"] {
        padding: ${g2(12)} ${g2(30)} ${g2(12)} ${g2(30)} !important;
        font-size: ${g2(40)} !important;
        margin: -${g2(20)} ${g2(20)};
      }
      .NameBanner[data-size="2"] {
        padding: ${g2(12)} ${g2(30)} ${g2(12)} ${g2(30)} !important;
        font-size: ${g2(26)} !important;
        margin: -${g2(8)} ${g2(8)};
      }
      .NameBanner[data-size="1"], .NameBanner[data-size="0"] {
        padding: ${g2(8)} ${g2(16)} ${g2(8)} ${g2(16)} !important;
        font-size: ${g2(18)} !important;
        border-width: ${g2(2)} !important;
        margin: -${g2(16)} ${g2(8)};
      }
      .NameBanner[data-size="0"] {
        opacity: 0 !important;
        transform: translateX(-100%);
      }
    `;
} }, iconStyles = { twitch: { icon: "Twitch" }, youtube: { icon: "YouTube" }, facebook: { icon: "Facebook" } }, fixLink = (a92) => !a92.startsWith("http:") && !a92.startsWith("https:") ? `https://${a92}` : a92, ChatOverlay = { name: "LS-ChatOverlay", sourceType: "ChatOverlay", create({ onUpdate: a92, onEvent: u2 }, c) {
  const l2 = document.createElement("div"), v2 = getProject(CoreContext.state.activeProjectId), S2 = v2.compositor.getRoot(), { x: g2 } = S2.props.size, E2 = (g2 ?? 1280) / 1920, _ = (q2) => q2 * E2 + "px";
  let k;
  const L2 = (q2, G2) => {
    const H2 = q2.width / G2.width;
    return q2.height / G2.height >= 0.25 && H2 >= 0.75 ? 4 : H2 >= 0.75 ? 1 : H2 >= 0.5 ? -2 : H2 > 0.25 ? -3 : -4;
  };
  CoreContext.onInternal("ProjectChanged", () => {
    const { bannerStyle: q2 } = v2.props ?? {};
    q2 && V2({ ...k, metadata: { ...k.metadata, bannerStyle: q2 } });
  });
  const M2 = React.memo((q2) => {
    var G2, H2, B2;
    return (q2 == null ? void 0 : q2.type) === "emoticon" && ((G2 = q2 == null ? void 0 : q2.data) == null ? void 0 : G2.type) === "direct" ? /* @__PURE__ */ jsx("img", { src: (H2 = q2 == null ? void 0 : q2.data) == null ? void 0 : H2.url, style: { height: _(36) }, alt: q2 == null ? void 0 : q2.text }) : (q2 == null ? void 0 : q2.type) === "link" ? /* @__PURE__ */ jsx("a", { style: { color: "#FFF", wordBreak: "break-all" }, target: "_blank", rel: "noreferrer", href: fixLink((B2 = q2 == null ? void 0 : q2.data) == null ? void 0 : B2.url), children: q2 == null ? void 0 : q2.text }) : /* @__PURE__ */ jsx("span", { children: q2 == null ? void 0 : q2.text });
  }), $ = (q2) => {
    const G2 = { height: `${q2.height}`, width: `${q2.width}`, background: q2.background || "transparent", display: "inline-block", verticalAlign: "middle", borderRadius: "50%", fontSize: `${q2.fontSize}` };
    return /* @__PURE__ */ jsx("div", { style: { ...G2, position: "relative", marginRight: q2 == null ? void 0 : q2.marginRight }, children: /* @__PURE__ */ jsx("div", { style: { left: "50%", position: "absolute", top: "50%", transform: "translate(-50%, -50%)" }, children: q2.username.substring(0, 2).toUpperCase() }) });
  }, J2 = (q2) => {
    const { message: G2, id: H2, username: B2, metadata: Y2 } = q2 || {}, [ne2, Z2] = reactExports.useState(0), { index: re2, platform: oe2, avatar: de2, bannerStyle: A2 } = Y2 || {}, N2 = reactExports.useMemo(() => iconStyles[oe2], [oe2]), D2 = reactExports.useRef();
    return reactExports.useLayoutEffect(() => {
      if (!D2.current)
        return;
      const W2 = () => {
        const ae2 = D2.current;
        ae2 && Z2(L2({ width: ae2.clientWidth, height: ae2.clientHeight }, { width: v2.compositor.getRoot().props.size.x, height: v2.compositor.getRoot().props.size.y }));
      }, ee2 = new ResizeObserver((ae2) => {
        W2();
      });
      return W2(), ee2.observe(D2.current), () => {
        D2 != null && D2.current && ee2.unobserve(D2 == null ? void 0 : D2.current);
      };
    }, [D2.current, v2]), /* @__PURE__ */ jsx(APIKitAnimation$1, { id: `${H2}_${re2}`, type: "chatoverlay", enter: APIKitAnimationTypes.SLIDE_IN_LEFT, exit: APIKitAnimationTypes.SLIDE_OUT_LEFT, duration: 200, children: /* @__PURE__ */ jsx("div", { className: "ChatOverlayContainer", style: { position: "absolute", top: 0, left: 0, width: "100%", height: "100%", display: "flex", flexDirection: "row", justifyContent: "flex-start", alignItems: "flex-end", marginLeft: A2 !== BannerStyle.BUBBLE ? "5%" : "0px" }, children: A2 !== BannerStyle.BUBBLE ? (
      /* It's a ternary operator. If the style is not equal to BannerStyle.BUBBLE.toString(), then it will
      render the first div. Otherwise, it will render the second div. */
      /* @__PURE__ */ jsxs("div", { style: { width: "100%", display: "flex" }, children: [de2 ? /* @__PURE__ */ jsx("span", { style: { marginRight: "20px" }, children: /* @__PURE__ */ jsx("img", { src: de2, className: "ChatOverlay-avatar" }) }) : /* @__PURE__ */ jsx($, { height: _(110), width: _(120), background: primary(500), username: B2, marginRight: 20, fontSize: _(30) }), /* @__PURE__ */ jsxs("div", { style: { width: "100%" }, children: [B2 && /* @__PURE__ */ jsxs("button", { className: "ChatOverlay-badge-container", children: [(N2 == null ? void 0 : N2.icon) && /* @__PURE__ */ jsx(Icon$1, { className: "ChatOverlay-badge-icon", name: N2 == null ? void 0 : N2.icon }), /* @__PURE__ */ jsx("div", { className: "ChatOverlay-badge-username", children: B2 })] }), /* @__PURE__ */ jsx("div", { className: "ChatOverlay", style: { padding: 10, background: "orange", width: "fit-content", height: "fit-content", maxWidth: "84%", position: "relative" }, children: G2 && /* @__PURE__ */ jsx("div", { className: "ChatOverlay-body", style: { gap: 10, display: "flex", alignItems: "center", flexWrap: "wrap", verticalAlign: "middle" }, children: G2.map((W2, ee2) => /* @__PURE__ */ jsx(M2, { ...W2 }, ee2)) }) })] })] })
    ) : (
      /* It's a ternary operator. If the style is not equal to BannerStyle.BUBBLE.toString(), then it will
      render the first div. Otherwise, it will render the second div. */
      /* @__PURE__ */ jsx("div", { style: { width: "100%", display: "flex" }, children: /* @__PURE__ */ jsxs("div", { className: "ChatOverlay", style: { padding: 10, background: "orange", width: "fit-content", height: "fit-content", maxWidth: "84%", position: "relative" }, children: [/* @__PURE__ */ jsxs("div", { style: { display: "flex", marginTop: `-${_(160)}`, alignItems: "flex-end", padding: `${_(14)} ${_(0)} ${_(14)} ${_(0)}`, marginLeft: `${ne2 * 10}px` }, children: [de2 ? /* @__PURE__ */ jsx("div", { className: "ChatOverlayAvatar-container", children: /* @__PURE__ */ jsx("img", { src: de2, className: "ChatOverlay-avatar" }) }) : /* @__PURE__ */ jsx("div", { className: "ChatOverlayAvatar-container", children: /* @__PURE__ */ jsx($, { height: _(120), width: _(120), background: primary(500), username: B2, fontSize: _(30) }) }), B2 && /* @__PURE__ */ jsxs("button", { className: "ChatOverlay-badge-container", children: [(N2 == null ? void 0 : N2.icon) && /* @__PURE__ */ jsx(Icon$1, { className: "ChatOverlay-badge-icon", name: N2 == null ? void 0 : N2.icon }), /* @__PURE__ */ jsx("div", { className: "ChatOverlay-badge-username", children: B2 })] })] }), G2 && /* @__PURE__ */ jsx("div", { ref: D2, className: "ChatOverlay-body", style: { gap: 10, alignItems: "center", flexWrap: "wrap", verticalAlign: "middle" }, children: G2.map((W2, ee2) => /* @__PURE__ */ jsx(M2, { ...W2 }, ee2)) })] }) })
    ) }) });
  }, V2 = (q2) => ReactDOM.render(/* @__PURE__ */ jsx(J2, { ...q2 }), l2);
  return a92((q2) => {
    const { bannerStyle: G2 = BannerStyle.DEFAULT } = v2.props ?? {};
    k = { ...q2, metadata: { ...q2.metadata, bannerStyle: G2 } }, V2(k);
  }), { root: l2 };
} }, Background$1 = { name: "LS-Background", sourceType: "Background", create({ onUpdate: a92, onRemove: u2 }, { sourceProps: c }) {
  u2(() => {
    clearInterval(S2);
  });
  const l2 = document.createElement("div");
  getProject(CoreContext.state.activeProjectId).role;
  let S2;
  const E2 = ({ source: L2, setStartAnimation: M2 }) => {
    var G2;
    const { src: $, meta: J2, type: V2 } = (L2 == null ? void 0 : L2.sourceProps) || {};
    return /* @__PURE__ */ jsx(Fragment, { children: $ && /* @__PURE__ */ jsx("img", { style: { ...(G2 = c == null ? void 0 : c.meta) == null ? void 0 : G2.style, ...J2 == null ? void 0 : J2.style }, src: $, onLoad: () => M2(true) }) });
  }, _ = ({ source: L2 }) => {
    const { type: M2 } = L2.sourceProps, { id: $ } = L2 || {}, [J2, V2] = React.useState(false);
    return reactExports.useEffect(() => {
      V2(false);
    }, [$]), /* @__PURE__ */ jsx(APIKitAnimation$1, { id: $, type: "background", enter: APIKitAnimationTypes.FADE_IN, exit: APIKitAnimationTypes.FADE_OUT, duration: 400, children: /* @__PURE__ */ jsxs("div", { style: { opacity: J2 ? 1 : 0 }, className: "backgroundContainer background-transition", children: [$ && M2 === "image" && /* @__PURE__ */ jsx(E2, { source: L2, setStartAnimation: V2 }), $ && M2 === "video" && /* @__PURE__ */ jsx("g", { source: L2, setStartAnimation: V2 })] }) });
  }, k = (L2) => ReactDOM.render(/* @__PURE__ */ jsx(Fragment, { children: /* @__PURE__ */ jsx(_, { source: L2 }) }), l2);
  return a92((L2) => {
    k({ ...L2 });
  }), { root: l2 };
} }, Video2 = { name: "LS-Video-2", sourceType: "Video2", props: { id: { type: String, required: true } }, useSource(a92, u2) {
  return a92.find((c) => c.props.type === u2.id);
}, create({ onUpdate: a92, onNewSource: u2, onRemove: c }, l2) {
  c(() => {
    clearInterval(_);
  });
  const v2 = document.createElement("div");
  getProjectRoom(CoreContext.state.activeProjectId);
  getProject(CoreContext.state.activeProjectId).role;
  let E2, _;
  const L2 = () => ReactDOM.render(/* @__PURE__ */ jsx("k", { source: E2 }), v2);
  return a92(() => {
    L2();
  }), u2((M2) => {
    E2 = M2, L2();
  }), { root: v2 };
} }, Image2 = { name: "LS-Image-2", sourceType: "Image2", props: { id: { type: String, required: true } }, useSource(a92, u2) {
  return a92.find((c) => c.props.type === u2.id);
}, create({ onUpdate: a92, onNewSource: u2 }, c) {
  const l2 = document.createElement("div");
  let v2;
  const S2 = ({ source: E2 }) => {
    const { src: _, meta: k } = (E2 == null ? void 0 : E2.value) || {}, { id: L2 } = E2 || {}, [M2, $] = React.useState(false);
    return React.useEffect(() => {
      $(false);
    }, [L2]), /* @__PURE__ */ jsx(APIKitAnimation$1, { id: L2, type: "image", enter: APIKitAnimationTypes.FADE_IN, exit: APIKitAnimationTypes.FADE_OUT, duration: 400, children: /* @__PURE__ */ jsx("div", { style: { opacity: M2 ? 1 : 0, width: "100%", height: "100%" }, className: "image-transition", children: _ && /* @__PURE__ */ jsx("img", { style: { ...c == null ? void 0 : c.style, ...k == null ? void 0 : k.style }, src: _, onLoad: () => $(true) }) }) });
  }, g2 = () => ReactDOM.render(/* @__PURE__ */ jsx(S2, { source: v2 }), l2);
  return a92(() => {
    g2();
  }), u2((E2) => {
    v2 = E2, g2();
  }), { root: l2 };
} }, RTMPSource = { name: "LS-RTMP-Source", sourceType: "RTMP", props: {}, useSource(a92, u2) {
  return a92.find((c) => isMatch(c.props, u2.sourceProps));
}, create({ onUpdate: a92, onNewSource: u2, onRemove: c }, l2) {
  const v2 = document.createElement("div");
  getProject(CoreContext.state.activeProjectId);
  getProjectRoom(CoreContext.state.activeProjectId), Object.assign(v2.style, { position: "relative" });
  let g2, E2 = l2;
  const L2 = () => ReactDOM.render(/* @__PURE__ */ jsx("k", { source: g2, props: E2 }), v2);
  return a92((M2) => {
    E2 = M2, L2();
  }), u2((M2) => {
    g2 = M2, L2();
  }), c((M2) => {
    E2 = M2, L2();
  }), { root: v2 };
} }, Transforms = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({ __proto__: null, Background: Background$1, Banner: Banner$1, ChatOverlay, Element: Element$1, Image: Image$1, Image2, Logo: Logo$1, Overlay, RTMPSource, RoomParticipant: RoomParticipant$1, Square, Video, Video2 }, Symbol.toStringTag, { value: "Module" }));
/*! (c) Andrea Giammarchi - ISC */
var self$1 = {};
try {
  self$1.WeakMap = WeakMap;
} catch (a92) {
  self$1.WeakMap = function(u2, c) {
    var l2 = c.defineProperty, v2 = c.hasOwnProperty, S2 = g2.prototype;
    return S2.delete = function(_) {
      return this.has(_) && delete _[this._];
    }, S2.get = function(_) {
      return this.has(_) ? _[this._] : void 0;
    }, S2.has = function(_) {
      return v2.call(_, this._);
    }, S2.set = function(_, k) {
      return l2(_, this._, { configurable: true, value: k }), this;
    }, g2;
    function g2(_) {
      l2(this, "_", { value: "_@ungap/weakmap" + u2++ }), _ && _.forEach(E2, this);
    }
    function E2(_) {
      this.set(_[0], _[1]);
    }
  }(Math.random(), Object);
}
const WeakMap$1 = self$1.WeakMap;
/*! (c) Andrea Giammarchi - ISC */
var UID = "-" + Math.random().toFixed(6) + "%", UID_IE = false;
try {
  (function(a92, u2, c) {
    return u2 in a92 && (a92.innerHTML = "<p " + c + '="' + UID + '"></p>', a92[u2].childNodes[0].getAttribute(c) == UID);
  })(document.createElement("template"), "content", "tabindex") || (UID = "_dt: " + UID.slice(1, -1) + ";", UID_IE = true);
} catch (a92) {
}
var UIDC = "<!--" + UID + "-->", COMMENT_NODE = 8, ELEMENT_NODE$1 = 1, TEXT_NODE = 3, SHOULD_USE_TEXT_CONTENT = /^(?:plaintext|script|style|textarea|title|xmp)$/i, VOID_ELEMENTS = /^(?:area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)$/i;
/*! (c) Andrea Giammarchi - ISC */
function domsanitizer(a92) {
  return a92.join(UIDC).replace(selfClosing, fullClosing).replace(attrSeeker, attrReplacer);
}
var spaces = " \\f\\n\\r\\t", almostEverything = "[^" + spaces + `\\/>"'=]+`, attrName = "[" + spaces + "]+" + almostEverything, tagName = "<([A-Za-z]+[A-Za-z0-9:._-]*)((?:", attrPartials = `(?:\\s*=\\s*(?:'[^']*?'|"[^"]*?"|<[^>]*?>|` + almostEverything.replace("\\/", "") + "))?)", attrSeeker = new RegExp(tagName + attrName + attrPartials + "+)([" + spaces + "]*/?>)", "g"), selfClosing = new RegExp(tagName + attrName + attrPartials + "*)([" + spaces + "]*/>)", "g"), findAttributes = new RegExp("(" + attrName + `\\s*=\\s*)(['"]?)` + UIDC + "\\2", "gi");
function attrReplacer(a92, u2, c, l2) {
  return "<" + u2 + c.replace(findAttributes, replaceAttributes) + l2;
}
function replaceAttributes(a92, u2, c) {
  return u2 + (c || '"') + UID + (c || '"');
}
function fullClosing(a92, u2, c) {
  return VOID_ELEMENTS.test(u2) ? a92 : "<" + u2 + c + "></" + u2 + ">";
}
const { isArray } = Array, { indexOf, slice } = [], umap = (a92) => ({
  // About: get: _.get.bind(_)
  // It looks like WebKit/Safari didn't optimize bind at all,
  // so that using bind slows it down by 60%.
  // Firefox and Chrome are just fine in both cases,
  // so let's use the approach that works fast everywhere 👍
  get: (u2) => a92.get(u2),
  set: (u2, c) => (a92.set(u2, c), c)
}), ELEMENT_NODE = 1, nodeType = 111, remove = ({ firstChild: a92, lastChild: u2 }) => {
  const c = document.createRange();
  return c.setStartAfter(a92), c.setEndAfter(u2), c.deleteContents(), a92;
}, diffable = (a92, u2) => a92.nodeType === nodeType ? 1 / u2 < 0 ? u2 ? remove(a92) : a92.lastChild : u2 ? a92.valueOf() : a92.firstChild : a92, persistent = (a92) => {
  const { childNodes: u2 } = a92, { length: c } = u2;
  if (c < 2)
    return c ? u2[0] : a92;
  const l2 = slice.call(u2, 0), v2 = l2[0], S2 = l2[c - 1];
  return { ELEMENT_NODE, nodeType, firstChild: v2, lastChild: S2, valueOf() {
    if (u2.length !== c) {
      let g2 = 0;
      for (; g2 < c; )
        a92.appendChild(l2[g2++]);
    }
    return a92;
  } };
};
/*! (c) Andrea Giammarchi - ISC */
var createContent = function(a92) {
  var u2 = "fragment", c = "template", l2 = "content" in g2(c), v2 = l2 ? function(_) {
    var k = g2(c);
    return k.innerHTML = _, k.content;
  } : function(_) {
    var k = g2(u2), L2 = g2(c), M2 = null;
    if (/^[^\S]*?<(col(?:group)?|t(?:head|body|foot|r|d|h))/i.test(_)) {
      var $ = RegExp.$1;
      L2.innerHTML = "<table>" + _ + "</table>", M2 = L2.querySelectorAll($);
    } else
      L2.innerHTML = _, M2 = L2.childNodes;
    return S2(k, M2), k;
  };
  return function(k, L2) {
    return (L2 === "svg" ? E2 : v2)(k);
  };
  function S2(_, k) {
    for (var L2 = k.length; L2--; )
      _.appendChild(k[0]);
  }
  function g2(_) {
    return _ === u2 ? a92.createDocumentFragment() : a92.createElementNS("http://www.w3.org/1999/xhtml", _);
  }
  function E2(_) {
    var k = g2(u2), L2 = g2("div");
    return L2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg">' + _ + "</svg>", S2(k, L2.firstChild.childNodes), k;
  }
}(document);
const udomdiff = (a92, u2, c, l2, v2) => {
  const S2 = c.length;
  let g2 = u2.length, E2 = S2, _ = 0, k = 0, L2 = null;
  for (; _ < g2 || k < E2; )
    if (g2 === _) {
      const M2 = E2 < S2 ? k ? l2(c[k - 1], -0).nextSibling : l2(c[E2 - k], 0) : v2;
      for (; k < E2; )
        a92.insertBefore(l2(c[k++], 1), M2);
    } else if (E2 === k)
      for (; _ < g2; )
        (!L2 || !L2.has(u2[_])) && a92.removeChild(l2(u2[_], -1)), _++;
    else if (u2[_] === c[k])
      _++, k++;
    else if (u2[g2 - 1] === c[E2 - 1])
      g2--, E2--;
    else if (u2[_] === c[E2 - 1] && c[k] === u2[g2 - 1]) {
      const M2 = l2(u2[--g2], -1).nextSibling;
      a92.insertBefore(l2(c[k++], 1), l2(u2[_++], -1).nextSibling), a92.insertBefore(l2(c[--E2], 1), M2), u2[g2] = c[E2];
    } else {
      if (!L2) {
        L2 = /* @__PURE__ */ new Map();
        let M2 = k;
        for (; M2 < E2; )
          L2.set(c[M2], M2++);
      }
      if (L2.has(u2[_])) {
        const M2 = L2.get(u2[_]);
        if (k < M2 && M2 < E2) {
          let $ = _, J2 = 1;
          for (; ++$ < g2 && $ < E2 && L2.get(u2[$]) === M2 + J2; )
            J2++;
          if (J2 > M2 - k) {
            const V2 = l2(u2[_], 0);
            for (; k < M2; )
              a92.insertBefore(l2(c[k++], 1), V2);
          } else
            a92.replaceChild(l2(c[k++], 1), l2(u2[_++], -1));
        } else
          _++;
      } else
        a92.removeChild(l2(u2[_++], -1));
    }
  return c;
};
/*! (c) Andrea Giammarchi - ISC */
var importNode = function(a92, u2, c, l2, v2) {
  var S2 = v2 in a92, g2 = a92.createDocumentFragment();
  g2[u2](a92[l2]("g")), g2[u2](a92[l2](""));
  var E2 = S2 ? a92[v2](g2, true) : g2[c](true);
  return E2.childNodes.length < 2 ? function _(k, L2) {
    for (var M2 = k[c](), $ = k.childNodes || [], J2 = $.length, V2 = 0; L2 && V2 < J2; V2++)
      M2[u2](_($[V2], L2));
    return M2;
  } : (
    /* istanbul ignore next */
    S2 ? a92[v2] : function(_, k) {
      return _[c](!!k);
    }
  );
}(document, "appendChild", "cloneNode", "createTextNode", "importNode"), trim = "".trim || /* istanbul ignore next */
function() {
  return String(this).replace(/^\s+|\s+/g, "");
}, normalizeAttributes = UID_IE ? function(a92, u2) {
  var c = u2.join(" ");
  return u2.slice.call(a92, 0).sort(function(l2, v2) {
    return c.indexOf(l2.name) <= c.indexOf(v2.name) ? -1 : 1;
  });
} : function(a92, u2) {
  return u2.slice.call(a92, 0);
};
function find(a92, u2) {
  for (var c = u2.length, l2 = 0; l2 < c; )
    a92 = a92.childNodes[u2[l2++]];
  return a92;
}
function parse(a92, u2, c, l2) {
  for (var v2 = a92.childNodes, S2 = v2.length, g2 = 0; g2 < S2; ) {
    var E2 = v2[g2];
    switch (E2.nodeType) {
      case ELEMENT_NODE$1:
        var _ = l2.concat(g2);
        parseAttributes(E2, u2, c, _), parse(E2, u2, c, _);
        break;
      case COMMENT_NODE:
        var k = E2.textContent;
        if (k === UID)
          c.shift(), u2.push(
            // basicHTML or other non standard engines
            // might end up having comments in nodes
            // where they shouldn't, hence this check.
            SHOULD_USE_TEXT_CONTENT.test(a92.nodeName) ? Text(a92, l2) : Any(E2, l2.concat(g2))
          );
        else
          switch (k.slice(0, 2)) {
            case "/*":
              if (k.slice(-2) !== "*/")
                break;
            case "👻":
              a92.removeChild(E2), g2--, S2--;
          }
        break;
      case TEXT_NODE:
        SHOULD_USE_TEXT_CONTENT.test(a92.nodeName) && trim.call(E2.textContent) === UIDC && (c.shift(), u2.push(Text(a92, l2)));
        break;
    }
    g2++;
  }
}
function parseAttributes(a92, u2, c, l2) {
  for (var v2 = a92.attributes, S2 = [], g2 = [], E2 = normalizeAttributes(v2, c), _ = E2.length, k = 0; k < _; ) {
    var L2 = E2[k++], M2 = L2.value === UID, $;
    if (M2 || 1 < ($ = L2.value.split(UIDC)).length) {
      var J2 = L2.name;
      if (S2.indexOf(J2) < 0) {
        S2.push(J2);
        var V2 = c.shift().replace(M2 ? /^(?:|[\S\s]*?\s)(\S+?)\s*=\s*('|")?$/ : new RegExp("^(?:|[\\S\\s]*?\\s)(" + J2 + `)\\s*=\\s*('|")[\\S\\s]*`, "i"), "$1"), q2 = v2[V2] || // the following ignore is covered by browsers
        // while basicHTML is already case-sensitive
        /* istanbul ignore next */
        v2[V2.toLowerCase()];
        if (M2)
          u2.push(Attr(q2, l2, V2, null));
        else {
          for (var G2 = $.length - 2; G2--; )
            c.shift();
          u2.push(Attr(q2, l2, V2, $));
        }
      }
      g2.push(L2);
    }
  }
  _ = g2.length, k = 0;
  for (var H2 = 0 < _ && UID_IE && !("ownerSVGElement" in a92); k < _; ) {
    var B2 = g2[k++];
    H2 && (B2.value = ""), a92.removeAttribute(B2.name);
  }
  var Y2 = a92.nodeName;
  if (/^script$/i.test(Y2)) {
    var ne2 = document.createElement(Y2);
    for (_ = v2.length, k = 0; k < _; )
      ne2.setAttributeNode(v2[k++].cloneNode(true));
    ne2.textContent = a92.textContent, a92.parentNode.replaceChild(ne2, a92);
  }
}
function Any(a92, u2) {
  return { type: "any", node: a92, path: u2 };
}
function Attr(a92, u2, c, l2) {
  return { type: "attr", node: a92, path: u2, name: c, sparse: l2 };
}
function Text(a92, u2) {
  return { type: "text", node: a92, path: u2 };
}
var parsed = umap(new WeakMap$1());
function createInfo(a92, u2) {
  var c = (a92.convert || domsanitizer)(u2), l2 = a92.transform;
  l2 && (c = l2(c));
  var v2 = createContent(c, a92.type);
  cleanContent(v2);
  var S2 = [];
  return parse(v2, S2, u2.slice(0), []), { content: v2, updates: function(g2) {
    for (var E2 = [], _ = S2.length, k = 0, L2 = 0; k < _; ) {
      var M2 = S2[k++], $ = find(g2, M2.path);
      switch (M2.type) {
        case "any":
          E2.push({ fn: a92.any($, []), sparse: false });
          break;
        case "attr":
          var J2 = M2.sparse, V2 = a92.attribute($, M2.name, M2.node);
          J2 === null ? E2.push({ fn: V2, sparse: false }) : (L2 += J2.length - 2, E2.push({ fn: V2, sparse: true, values: J2 }));
          break;
        case "text":
          E2.push({ fn: a92.text($), sparse: false }), $.textContent = "";
          break;
      }
    }
    return _ += L2, function() {
      var q2 = arguments.length;
      if (_ !== q2 - 1)
        throw new Error(q2 - 1 + " values instead of " + _ + `
` + u2.join("${value}"));
      for (var G2 = 1, H2 = 1; G2 < q2; ) {
        var B2 = E2[G2 - H2];
        if (B2.sparse) {
          var Y2 = B2.values, ne2 = Y2[0], Z2 = 1, re2 = Y2.length;
          for (H2 += re2 - 2; Z2 < re2; )
            ne2 += arguments[G2++] + Y2[Z2++];
          B2.fn(ne2);
        } else
          B2.fn(arguments[G2++]);
      }
      return g2;
    };
  } };
}
function createDetails(a92, u2) {
  var c = parsed.get(u2) || parsed.set(u2, createInfo(a92, u2));
  return c.updates(importNode.call(document, c.content, true));
}
var empty = [];
function domtagger(a92) {
  var u2 = empty, c = cleanContent;
  return function(l2) {
    return u2 !== l2 && (c = createDetails(a92, u2 = l2)), c.apply(null, arguments);
  };
}
function cleanContent(a92) {
  for (var u2 = a92.childNodes, c = u2.length; c--; ) {
    var l2 = u2[c];
    l2.nodeType !== 1 && trim.call(l2.textContent).length === 0 && a92.removeChild(l2);
  }
}
/*! (c) Andrea Giammarchi - ISC */
var hyperStyle = /* @__PURE__ */ function() {
  var a92 = /acit|ex(?:s|g|n|p|$)|rph|ows|mnc|ntw|ine[ch]|zoo|^ord/i, u2 = /([^A-Z])([A-Z]+)/g;
  return function(E2, _) {
    return "ownerSVGElement" in E2 ? l2(E2, _) : S2(E2.style, false);
  };
  function c(g2, E2, _) {
    return E2 + "-" + _.toLowerCase();
  }
  function l2(g2, E2) {
    var _;
    return E2 ? _ = E2.cloneNode(true) : (g2.setAttribute("style", "--hyper:style;"), _ = g2.getAttributeNode("style")), _.value = "", g2.setAttributeNode(_), S2(_, true);
  }
  function v2(g2) {
    var E2, _ = [];
    for (E2 in g2)
      _.push(E2.replace(u2, c), ":", g2[E2], ";");
    return _.join("");
  }
  function S2(g2, E2) {
    var _, k;
    return function(L2) {
      var M2, $, J2, V2;
      switch (typeof L2) {
        case "object":
          if (L2) {
            if (_ === "object") {
              if (!E2 && k !== L2)
                for ($ in k)
                  $ in L2 || (g2[$] = "");
            } else
              E2 ? g2.value = "" : g2.cssText = "";
            M2 = E2 ? {} : g2;
            for ($ in L2)
              V2 = L2[$], J2 = typeof V2 == "number" && !a92.test($) ? V2 + "px" : V2, !E2 && /^--/.test($) ? M2.setProperty($, J2) : M2[$] = J2;
            _ = "object", E2 ? g2.value = v2(k = M2) : k = L2;
            break;
          }
        default:
          k != L2 && (_ = "string", k = L2, E2 ? g2.value = L2 || "" : g2.cssText = L2 || "");
          break;
      }
    };
  }
}();
const aria = (a92) => (u2) => {
  for (const c in u2) {
    const l2 = c === "role" ? c : `aria-${c}`, v2 = u2[c];
    v2 == null ? a92.removeAttribute(l2) : a92.setAttribute(l2, v2);
  }
}, attribute = (a92, u2) => {
  let c, l2 = true;
  const v2 = document.createAttributeNS(null, u2);
  return (S2) => {
    c !== S2 && (c = S2, c == null ? l2 || (a92.removeAttributeNode(v2), l2 = true) : (v2.value = S2, l2 && (a92.setAttributeNodeNS(v2), l2 = false)));
  };
}, boolean = (a92, u2, c) => (l2) => {
  c !== !!l2 && ((c = !!l2) ? a92.setAttribute(u2, "") : a92.removeAttribute(u2));
}, data = ({ dataset: a92 }) => (u2) => {
  for (const c in u2) {
    const l2 = u2[c];
    l2 == null ? delete a92[c] : a92[c] = l2;
  }
}, event = (a92, u2) => {
  let c, l2 = u2.slice(2);
  return !(u2 in a92) && u2.toLowerCase() in a92 && (l2 = l2.toLowerCase()), (v2) => {
    const S2 = isArray(v2) ? v2 : [v2, false];
    c !== S2[0] && (c && a92.removeEventListener(l2, c, S2[1]), (c = S2[0]) && a92.addEventListener(l2, c, S2[1]));
  };
}, ref = (a92) => (u2) => {
  typeof u2 == "function" ? u2(a92) : u2.current = a92;
}, setter = (a92, u2) => u2 === "dataset" ? data(a92) : (c) => {
  a92[u2] = c;
}, hyperProperty = (a92, u2) => {
  let c;
  return (l2) => {
    c !== l2 && (c = l2, a92[u2] !== l2 && (l2 == null ? (a92[u2] = "", a92.removeAttribute(u2)) : a92[u2] = l2));
  };
}, readOnly = /^(?:form|list)$/i, text = (a92, u2) => a92.ownerDocument.createTextNode(u2);
function Tagger(a92) {
  return this.type = a92, domtagger(this);
}
Tagger.prototype = {
  // there are four kind of attributes, and related behavior:
  //  * events, with a name starting with `on`, to add/remove event listeners
  //  * special, with a name present in their inherited prototype, accessed directly
  //  * regular, accessed through get/setAttribute standard DOM methods
  //  * style, the only regular attribute that also accepts an object as value
  //    so that you can style=${{width: 120}}. In this case, the behavior has been
  //    fully inspired by Preact library and its simplicity.
  attribute(a92, u2, c) {
    const l2 = this.type === "svg";
    switch (u2) {
      case "class":
        if (l2)
          return attribute(a92, u2);
        u2 = "className";
      case "props":
        return setter(a92, u2);
      case "aria":
        return aria(a92);
      case "style":
        return hyperStyle(a92, c, l2);
      case "ref":
        return ref(a92);
      case ".dataset":
        return data(a92);
      default:
        return u2.slice(0, 1) === "." ? setter(a92, u2.slice(1)) : u2.slice(0, 1) === "?" ? boolean(a92, u2.slice(1)) : u2.slice(0, 2) === "on" ? event(a92, u2) : u2 in a92 && !(l2 || readOnly.test(u2)) ? hyperProperty(a92, u2) : attribute(a92, u2);
    }
  },
  // in a hyper(node)`<div>${content}</div>` case
  // everything could happen:
  //  * it's a JS primitive, stored as text
  //  * it's null or undefined, the node should be cleaned
  //  * it's a promise, update the content once resolved
  //  * it's an explicit intent, perform the desired operation
  //  * it's an Array, resolve all values if Promises and/or
  //    update the node with the resulting list of content
  any(a92, u2) {
    const { type: c } = this;
    let l2 = false, v2;
    const S2 = (g2) => {
      switch (typeof g2) {
        case "string":
        case "number":
        case "boolean":
          l2 ? v2 !== g2 && (v2 = g2, u2[0].textContent = g2) : (l2 = true, v2 = g2, u2 = udomdiff(a92.parentNode, u2, [text(a92, g2)], diffable, a92));
          break;
        case "function":
          S2(g2(a92));
          break;
        case "object":
        case "undefined":
          if (g2 == null) {
            l2 = false, u2 = udomdiff(a92.parentNode, u2, [], diffable, a92);
            break;
          }
        default:
          if (l2 = false, v2 = g2, isArray(g2)) {
            if (g2.length === 0)
              u2.length && (u2 = udomdiff(a92.parentNode, u2, [], diffable, a92));
            else
              switch (typeof g2[0]) {
                case "string":
                case "number":
                case "boolean":
                  S2(String(g2));
                  break;
                case "function":
                  S2(g2.map(invoke, a92));
                  break;
                case "object":
                  isArray(g2[0]) && (g2 = g2.concat.apply([], g2));
                default:
                  u2 = udomdiff(a92.parentNode, u2, g2, diffable, a92);
                  break;
              }
          } else
            "ELEMENT_NODE" in g2 ? u2 = udomdiff(a92.parentNode, u2, g2.nodeType === 11 ? slice.call(g2.childNodes) : [g2], diffable, a92) : "text" in g2 ? S2(String(g2.text)) : "any" in g2 ? S2(g2.any) : "html" in g2 ? u2 = udomdiff(a92.parentNode, u2, slice.call(createContent([].concat(g2.html).join(""), c).childNodes), diffable, a92) : "length" in g2 && S2(slice.call(g2));
          break;
      }
    };
    return S2;
  },
  // style or textareas don't accept HTML as content
  // it's pointless to transform or analyze anything
  // different from text there but it's worth checking
  // for possible defined intents.
  text(a92) {
    let u2;
    const c = (l2) => {
      if (u2 !== l2) {
        u2 = l2;
        const v2 = typeof l2;
        v2 === "object" && l2 ? "text" in l2 ? c(String(l2.text)) : "any" in l2 ? c(l2.any) : "html" in l2 ? c([].concat(l2.html).join("")) : "length" in l2 && c(slice.call(l2).join("")) : v2 === "function" ? c(l2(a92)) : a92.textContent = l2 ?? "";
      }
    };
    return c;
  }
};
function invoke(a92) {
  return a92(this);
}
const { create: create$1, freeze, keys } = Object, cache = umap(new WeakMap$1()), createRender = (a92) => ({ html: outer("html", a92), svg: outer("svg", a92), render(u2, c) {
  const l2 = typeof c == "function" ? c() : c, v2 = cache.get(u2) || cache.set(u2, createCache()), S2 = l2 instanceof LighterHole ? unroll(a92, v2, l2) : l2;
  return S2 !== v2.wire && (v2.wire = S2, u2.textContent = "", u2.appendChild(S2.valueOf())), u2;
} }), createCache = () => ({ stack: [], entry: null, wire: null }), outer = (a92, u2) => {
  const c = umap(new WeakMap$1()), l2 = (S2) => function() {
    return unroll(u2, S2, v2.apply(null, arguments));
  };
  return v2.for = (S2, g2) => {
    const E2 = c.get(S2) || c.set(S2, create$1(null));
    return E2[g2] || (E2[g2] = l2(createCache()));
  }, v2.node = function() {
    return unroll(u2, createCache(), v2.apply(null, arguments)).valueOf();
  }, v2;
  function v2() {
    return new LighterHole(a92, tta.apply(null, arguments));
  }
}, unroll = (a92, u2, { type: c, template: l2, values: v2 }) => {
  const { length: S2 } = v2;
  unrollValues(a92, u2, v2, S2);
  let { entry: g2 } = u2;
  if (!g2 || g2.template !== l2 || g2.type !== c) {
    const E2 = new a92(c);
    u2.entry = g2 = { type: c, template: l2, tag: E2, wire: persistent(E2(l2, ...v2)) };
  } else
    g2.tag(l2, ...v2);
  return g2.wire;
}, unrollValues = (a92, { stack: u2 }, c, l2) => {
  for (let v2 = 0; v2 < l2; v2++) {
    const S2 = c[v2];
    S2 instanceof Hole ? c[v2] = unroll(a92, u2[v2] || (u2[v2] = createCache()), S2) : isArray(S2) ? unrollValues(a92, u2[v2] || (u2[v2] = createCache()), S2, S2.length) : u2[v2] = null;
  }
  l2 < u2.length && u2.splice(l2);
};
freeze(LighterHole);
function LighterHole(a92, u2) {
  this.type = a92, this.template = u2.shift(), this.values = u2;
}
const Hole = LighterHole, { render, html, svg } = createRender(Tagger);
function tta() {
  let a92 = [], u2 = 0, { length: c } = arguments;
  for (; u2 < c; )
    a92.push(arguments[u2++]);
  return a92;
}
const Free = { name: "Free", layout: ({ props: a92, children: u2, size: c }) => u2.reduce((l2, v2) => {
  const { size: S2 = { x: "100%", y: "100%" }, position: g2 = { x: 0, y: 0 }, opacity: E2 = 1 } = v2.props;
  return { ...l2, [v2.id]: { position: { x: g2.x, y: g2.y }, size: { x: S2.x, y: S2.y }, opacity: E2 } };
}, {}) }, Column = { name: "Column", layout: ({ props: a92 = {}, children: u2, size: c }) => {
  let { justify: l2 = "center", align: v2 = "center", cover: S2 = false, margin: g2 = {}, dimensions: E2 = 16 / 9, reverse: _ = false } = a92;
  const k = S2 ? 0 : Math.min(c.y / 6, 12);
  g2 = { left: k, right: k, top: k, bottom: k, between: k, ...g2 };
  const L2 = c.y - g2.top - g2.bottom, M2 = c.x - g2.left - g2.right, $ = g2.between * ((u2.length || 1) - 1), J2 = Math.min(M2, (L2 - $) / (u2.length || 1) * E2), V2 = J2 / E2;
  return html.node`
      <div style=${{ height: "100%", width: S2 ? c.x + "px" : "auto", display: "flex", flexDirection: _ ? "column-reverse" : "column", justifyContent: l2, alignItems: v2, paddingLeft: g2.left + "px", paddingTop: g2.top + "px", paddingBottom: g2.bottom + "px", paddingRight: g2.right + "px" }}>
      ${u2.map((q2, G2) => html.node`<div data-node-id=${q2.id} .data=${{ entryTransition: { delay: 400 + G2 * 100, offset: { x: 0, y: "100%" }, scale: { x: 0.8, y: 0.8 }, opacity: 0 }, exitTransition: { offset: { x: 0, y: 1e3 }, scale: { x: 0.8, y: 0.8 }, opacity: 0 }, borderRadius: S2 ? 0 : 5 }} style=${{ display: "flex", width: S2 ? "100%" : J2 + "px", height: S2 ? V2 + "px" : "auto", aspectRatio: E2, marginBottom: G2 === u2.length - 1 ? 0 : g2.between + "px", flexGrow: 0, flexShrink: 1, flexBasis: V2 + "px" }}></div>`)}
      </div>
    `;
} }, Row = { name: "Row", layout: ({ props: a92 = {}, children: u2, size: c }) => {
  let { justify: l2 = "center", align: v2 = "center", cover: S2 = false, margin: g2 = {}, dimensions: E2, maxWidth: _ = 1, reverse: k = false } = a92;
  const L2 = S2 ? 0 : Math.min(c.y / 6, 12);
  g2 = { left: L2, right: L2, top: L2, bottom: L2, between: L2, ...g2 };
  const M2 = c.y - g2.top - g2.bottom, $ = c.x - g2.left - g2.right, J2 = g2.between * ((u2.length || 1) - 1);
  let V2 = M2, q2 = Math.min(($ - J2) / (u2.length || 1), E2 ? M2 * E2 : $, _ * c.x);
  return E2 && (V2 = q2 / E2), html.node`
      <div style=${{ height: S2 ? c.y + "px" : "auto", width: "100%", display: "flex", flexDirection: k ? "row-reverse" : "row", justifyContent: l2, alignItems: v2, paddingLeft: g2.left + "px", paddingTop: g2.top + "px", paddingBottom: g2.bottom + "px", paddingRight: g2.right + "px" }}>
          ${u2.map((G2, H2) => html.node`<div data-node-id=${G2.id} .data=${{ entryTransition: { delay: 400 + H2 * 100, offset: { x: 0, y: "100%" }, scale: { x: 0.8, y: 0.8 }, opacity: 0 }, exitTransition: { offset: { x: 0, y: 1e3 }, scale: { x: 0.8, y: 0.8 }, opacity: 0 }, borderRadius: S2 ? 0 : 5 }} style=${{ display: "flex", height: S2 ? "100%" : V2 + "px", width: q2 + "px", marginRight: H2 === u2.length - 1 ? 0 : g2.between + "px", flexGrow: 0, flexShrink: 1, flexBasis: q2 + "px" }}></div>`)}
      </div>
    `;
} }, toMatrix = (a92, u2) => a92.reduce((c, l2, v2) => (v2 % u2 == 0 ? c.push([v2]) : c[c.length - 1].push(v2)) && c, []), Grid = { name: "Grid", layout: ({ props: a92 = {}, children: u2, size: c }) => {
  let { dimensions: l2, numPerRow: v2, margin: S2, cover: g2 = false, maxWidth: E2, between: _ } = a92;
  const k = u2.length === 0 || g2 ? 0 : _ || Math.min(c.y / u2.length / 10, 30);
  S2 = S2 ?? k;
  const L2 = c.x < c.y;
  _ = typeof _ == "number" ? _ : S2;
  let M2 = [];
  v2 ? M2 = toMatrix(u2, v2) : M2 = L2 ? getTallGrid(u2.length) : getWideGrid(u2.length);
  const $ = (c.y - (S2 * 2 + _ * (M2.length - 1))) / M2.length, J2 = c.x - S2 * 2;
  return html.node`
    <div style=${{ display: "flex", width: "100%", height: "100%", flexDirection: "column", justifyContent: "center", padding: S2 + "px", gap: _ + "px", flexGrow: 0 }}>${M2.map((V2, q2) => Row.layout({ props: { justify: "center", dimensions: l2, cover: g2, maxWidth: E2 || 1 / (M2[0].length || 1), margin: { top: 0, right: 0, left: 0, bottom: 0, between: _ } }, children: V2.map((G2) => u2[G2]), size: { y: $, x: J2 } }))}</div>`;
} }, Presentation = { name: "Presentation", layout: ({ props: a92 = {}, children: u2, size: c }) => {
  let { margin: l2, cover: v2 = false, barWidth: S2 = 0.2, barPosition: g2 = "side", presentationDimensions: E2 = 16 / 9, viewerDimensions: _ = 16 / 9, justifyViewers: k = "center", useGrid: L2 = false, reverse: M2 = false } = a92;
  const $ = g2 === "side" ? c.x * S2 : c.y * S2, J2 = u2[0], V2 = u2.filter((Z2) => Z2 !== J2), q2 = u2.length <= 1 ? 0 : Math.min(c.x / 80, 30);
  if (l2 = l2 ?? q2, !J2)
    return Grid.layout({ props: a92, children: u2, size: c });
  const G2 = u2[1], H2 = { ...c };
  G2 && (g2 === "side" ? (H2.x = c.x - $, H2.y = H2.x / E2) : (H2.y = c.y - $, H2.x = H2.y * E2));
  let B2, Y2 = {};
  L2 ? (B2 = Grid.layout, Y2 = { cover: v2, ...v2 ? { maxWidth: 1 } : { margin: l2 } }) : (B2 = g2 === "side" ? Column.layout : Row.layout, Y2 = { margin: { top: l2, left: l2, bottom: l2, right: l2, between: l2 }, dimensions: _, justify: k, align: "flex-end" });
  const ne2 = g2 === "side" ? M2 ? "left" : "right" : M2 ? "top" : "bottom";
  return html.node`
      <div style=${{ display: "flex", flexDirection: (g2 === "side" ? "row" : "column") + (M2 ? "-reverse" : ""), justifyContent: "space-around", alignItems: "center", position: "relative", padding: v2 ? 0 : l2, [`padding-${ne2}`]: 0 }}>
        ${u2[0] && html.node`<div style=${{
    // aspectRatio: String(presentationDimensions),
    width: H2.x,
    height: H2.y,
    display: "flex",
    flexGrow: 1
  }}>
            <div data-node-id=${J2.id} .data=${{ dimensions: E2, borderRadius: v2 ? 0 : 5, entryTransition: { delay: 0, offset: { x: 0, y: 1e3 }, scale: { x: 0.5, y: 0.5 }, opacity: 0 }, exitTransition: { offset: { x: 0, y: 1e3 }, scale: { x: 2, y: 2 }, opacity: 0 } }} style=${{ width: "100%", height: "100%", ...v2 ? { position: "absolute", top: 0, left: 0, width: L2 && G2 ? 100 - S2 * 100 + "%" : "100%", height: "100%" } : {} }} />
          </div>`}
        ${html.node`<div style=${{ ...g2 === "side" ? { maxWidth: S2 * 100 + "%", height: "100%" } : { maxHeight: S2 * 100 + "%", width: "100%" } }}>${G2 && B2({ props: Y2, children: V2, size: g2 === "side" ? { x: $, y: c.y } : { x: c.x, y: $ } })}</div>`}
      </div>
    `;
} }, Layered = { name: "Layered", layout: ({ props: a92 = {}, children: u2, size: c }) => html.node`<div style=${{ width: "100%", height: "100%", position: "relative" }}>
      ${u2.map((l2, v2) => html.node`<div data-node-id=${l2.id} .data=${{ zIndex: v2 + 1 }} style=${{ position: "absolute", inset: "0px" }}></div>`)}
    </div>` }, getWideGrid = (a92 = 0) => {
  switch (a92) {
    case 0:
      return [[]];
    case 1:
      return [[0]];
    case 2:
      return [[0, 1]];
    case 3:
      return [[0, 1], [2]];
    case 4:
      return [[0, 1], [2, 3]];
    case 5:
      return [[0, 1, 2], [3, 4]];
    case 6:
      return [[0, 1, 2], [3, 4, 5]];
    case 7:
      return [[0, 1, 2], [3, 4, 5], [6]];
    case 8:
      return [[0, 1, 2], [3, 4, 5], [6, 7]];
  }
  const u2 = Array(a92).fill(null).map((c, l2) => l2);
  return toMatrix(u2, Math.round(Math.sqrt(a92)));
}, getTallGrid = (a92 = 0) => {
  switch (a92) {
    case 0:
      return [[]];
    case 1:
      return [[0]];
    case 2:
      return [[0], [1]];
    case 3:
      return [[0, 1], [2]];
    case 4:
      return [[0, 1], [2, 3]];
    case 5:
      return [[0, 1], [2, 3], [4]];
    case 6:
      return [[0, 1], [2, 3], [4, 5]];
    case 7:
      return [[0, 1], [2, 3], [4, 5], [6]];
    case 8:
      return [[0, 1], [2, 3], [4, 5], [6, 7]];
  }
  const u2 = Array(a92).fill(null).map((c, l2) => l2);
  return toMatrix(u2, Math.ceil(Math.sqrt(u2.length)) - 1);
}, Layouts = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({ __proto__: null, Column, Free, Grid, Layered, Presentation, Row }, Symbol.toStringTag, { value: "Module" })), deviceWatchers = /* @__PURE__ */ new Set(), updateMediaStreamTracks = (a92, u2) => {
  const c = { audio: a92.getAudioTracks()[0], video: a92.getVideoTracks()[0] };
  c.audio !== u2.audio && (c.audio && a92.removeTrack(c.audio), u2.audio && a92.addTrack(u2.audio)), c.video !== u2.video && (c.video && a92.removeTrack(c.video), u2.video && a92.addTrack(u2.video));
}, getDevicePermissions = async () => {
  const a92 = { audio: true, video: true };
  return Promise.all([navigator.mediaDevices.getUserMedia({ video: true }).then((u2) => {
    u2.getTracks().forEach((c) => c.stop());
  }).catch((u2) => {
    u2.name === "NotAllowedError" && (a92.video = false);
  }), navigator.mediaDevices.getUserMedia({ audio: true }).then((u2) => {
    u2.getTracks().forEach((c) => c.stop());
  }).catch((u2) => {
    u2.name === "NotAllowedError" && (a92.audio = false);
  })]).then(() => a92);
}, ensureDevicePermissions = async () => getDevicePermissions(), watchDevices = (a92) => (deviceWatchers.size === 0 && navigator.mediaDevices.addEventListener("devicechange", reportDevices), deviceWatchers.add(a92), reportDevices().catch(() => {
}), () => {
  deviceWatchers.delete(a92), deviceWatchers.size === 0 && navigator.mediaDevices.removeEventListener("devicechange", reportDevices);
}), getUserMedia = async (...a92) => {
  const u2 = await navigator.mediaDevices.getUserMedia(...a92);
  return reportDevices(), u2;
}, deviceWithDefaultLabel = (a92, u2) => ({ deviceId: a92.deviceId, groupId: a92.groupId, kind: a92.kind, label: a92.label || u2 }), reportDevices = async () => {
  const a92 = await navigator.mediaDevices.enumerateDevices(), u2 = a92.filter((v2) => v2.kind === "videoinput").map((v2, S2) => deviceWithDefaultLabel(v2, "Camera " + (S2 + 1))), c = a92.filter((v2) => v2.kind === "audioinput").map((v2, S2) => deviceWithDefaultLabel(v2, "Microphone " + (S2 + 1))), l2 = a92.filter((v2) => v2.kind === "audiooutput").map((v2, S2) => deviceWithDefaultLabel(v2, "Speaker " + (S2 + 1)));
  deviceWatchers.forEach((v2) => v2({ webcams: u2, microphones: c, speakers: l2 }));
}, webrtc = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({ __proto__: null, ensureDevicePermissions, getDevicePermissions, getUserMedia, updateMediaStreamTracks, watchDevices }, Symbol.toStringTag, { value: "Module" })), RoomParticipant = { type: "RoomParticipant", valueType: MediaStream, props: {
  id: {},
  type: {},
  // 'screen' | 'camera'
  videoEnabled: {},
  audioEnabled: {}
}, init({ addSource: a92, removeSource: u2, updateSource: c, getSource: l2 }) {
  CoreContext.on("RoomJoined", ({ room: v2 }) => {
    let S2 = {}, g2 = [], E2 = [], _ = {};
    const k = () => {
      g2.filter((L2) => (L2 == null ? void 0 : L2.type) === "camera" && (L2 == null ? void 0 : L2.isExternal) === true).forEach((L2) => {
        var M2, $, J2;
        if (L2.type === "camera") {
          const V2 = _[L2.id], q2 = v2.getParticipant(L2.participantId), G2 = v2.getTrack(L2.id);
          if (l2(L2 == null ? void 0 : L2.id)) {
            const B2 = v2.getTrack((M2 = q2 == null ? void 0 : q2.meta[L2.id]) == null ? void 0 : M2.microphone);
            updateMediaStreamTracks(V2, { video: G2 == null ? void 0 : G2.mediaStreamTrack, audio: B2 == null ? void 0 : B2.mediaStreamTrack }), c(L2.id, { videoEnabled: !!(G2 && !G2.isMuted), audioEnabled: !!(B2 && !B2.isMuted), displayName: (($ = q2 == null ? void 0 : q2.meta[L2.id]) == null ? void 0 : $.displayName) || "External Track", mirrored: (J2 = q2 == null ? void 0 : q2.meta[L2.id]) == null ? void 0 : J2.isMirrored, microphone: B2, external: L2 == null ? void 0 : L2.isExternal });
          }
        }
      }), E2.forEach((L2) => {
        var Y2;
        const M2 = _[L2.id], $ = _[L2.id + "-screen"], J2 = L2.trackIds.find((ne2) => {
          const Z2 = v2.getTrack(ne2);
          return (Z2 == null ? void 0 : Z2.type) === "camera" && !(Z2 != null && Z2.isExternal);
        }), V2 = L2.trackIds.find((ne2) => {
          const Z2 = v2.getTrack(ne2);
          return (Z2 == null ? void 0 : Z2.type) === "microphone" && !(Z2 != null && Z2.isExternal);
        }), q2 = L2.trackIds.find((ne2) => {
          const Z2 = v2.getTrack(ne2);
          return (Z2 == null ? void 0 : Z2.type) === "screen_share";
        }), G2 = v2.getTrack(J2), H2 = v2.getTrack(V2), B2 = v2.getTrack(q2);
        updateMediaStreamTracks(M2, { video: G2 == null ? void 0 : G2.mediaStreamTrack, audio: H2 == null ? void 0 : H2.mediaStreamTrack }), updateMediaStreamTracks($, { video: B2 == null ? void 0 : B2.mediaStreamTrack }), c(L2.id, { videoEnabled: !!(G2 && !G2.isMuted), audioEnabled: !!(H2 && !H2.isMuted), displayName: L2.displayName, mirrored: (Y2 = L2 == null ? void 0 : L2.meta) == null ? void 0 : Y2.isMirrored, external: G2 == null ? void 0 : G2.isExternal }), c(L2.id + "-screen", { videoEnabled: !!(B2 && !B2.isMuted), displayName: L2.meta.screenDisplayName || `${L2.displayName}'s Screen` });
      });
    };
    v2.useTracks((L2) => {
      const M2 = L2.filter((J2) => !g2.some((V2) => V2.id === J2.id) && !!(J2 != null && J2.mediaStreamTrack)), $ = g2.filter((J2) => !L2.some((V2) => V2.id === J2.id));
      g2 = L2.filter((J2) => !!(J2 != null && J2.mediaStreamTrack)), M2.forEach((J2) => {
        const V2 = new MediaStream([]);
        _[J2.id] = V2;
        const { id: q2, participantId: G2, type: H2, mediaStreamTrack: B2 } = v2.getTrack(J2.id);
        B2 && a92({ id: q2, isActive: true, value: V2, props: { id: q2, trackId: q2, participantId: G2, isMuted: J2.isMuted, type: H2 } });
      }), $.forEach((J2) => {
        var V2;
        u2(J2.id), (V2 = S2[J2.id]) == null || V2.call(S2);
      }), k();
    }), v2.useParticipants((L2) => {
      const M2 = L2.filter((J2) => !E2.some((V2) => V2.id === J2.id)), $ = E2.filter((J2) => !L2.some((V2) => V2.id === J2.id));
      E2 = L2, M2.forEach((J2) => {
        var H2;
        const { id: V2 } = J2, q2 = new MediaStream([]), G2 = new MediaStream([]);
        _[V2] = q2, _[V2 + "-screen"] = G2, a92({ id: V2, isActive: true, value: q2, props: { id: V2, type: "camera", displayName: J2.displayName || J2.id, audioEnabled: false, videoEnabled: false, mirrored: (H2 = J2 == null ? void 0 : J2.meta) == null ? void 0 : H2.isMirrored } }), a92({ id: V2 + "-screen", isActive: true, value: G2, props: { id: V2, type: "screen", displayName: J2.displayName || J2.id, audioEnabled: false, videoEnabled: false } });
      }), k(), $.forEach((J2) => {
        var V2;
        u2(J2.id), (V2 = S2[J2.id]) == null || V2.call(S2);
      });
    });
  });
} }, Banner = { type: "Banner", valueType: Object, props: {}, init({ addSource: a92, removeSource: u2, updateSource: c, getSource: l2, modifySourceValue: v2 }) {
  let S2 = [];
  const g2 = (E2 = []) => {
    const _ = E2.filter((M2) => !S2.some(($) => $.id === M2.id)), k = S2.filter((M2) => !E2.some(($) => $.id === M2.id)), L2 = E2.filter((M2) => {
      const $ = S2.find((J2) => J2.id === M2.id);
      return !deepEqual(M2, $);
    });
    _.forEach((M2) => a92({
      id: M2.id,
      value: { headerText: M2.props.headerText, bodyText: M2.props.bodyText },
      // TODO: It feels odd to have "props" match "value" exactly.
      //  They probably shouldn't be necessary here.
      props: M2.props
    })), k.forEach((M2) => u2(M2.id)), L2.forEach((M2) => {
      c(M2.id, M2.props), v2(M2.id, ($) => {
        $.headerText = M2.props.headerText, $.bodyText = M2.props.bodyText;
      });
    }), S2 = E2;
  };
  CoreContext.on("ActiveProjectChanged", ({ projectId: E2 }) => {
    var k;
    if (S2 = [], !E2)
      return;
    const _ = getProject(E2);
    g2(((k = _.props) == null ? void 0 : k.banners) ?? []);
  }), CoreContext.on("ProjectChanged", ({ project: E2 }) => {
    var _;
    g2(((_ = E2.props) == null ? void 0 : _.banners) ?? []);
  });
} }, Overlays = { type: "Overlay", valueType: Object, props: {}, init({ addSource: a92, removeSource: u2, updateSource: c, getSource: l2, modifySourceValue: v2 }) {
  let S2 = [];
  const g2 = (E2 = []) => {
    const _ = E2.filter((M2) => !S2.some(($) => $.id === M2.id)), k = S2.filter((M2) => !E2.some(($) => $.id === M2.id)), L2 = E2.filter((M2) => {
      const $ = S2.find((J2) => J2.id === M2.id);
      return !deepEqual(M2, $);
    });
    _.forEach((M2) => a92({
      id: M2.id,
      value: { ...M2.props },
      // TODO: It feels odd to have "props" match "value" exactly.
      //  They probably shouldn't be necessary here.
      props: M2.props
    })), k.forEach((M2) => u2(M2.id)), L2.forEach((M2) => {
      c(M2.id, M2.props), v2(M2.id, ($) => {
        Object.keys(M2.props).forEach((J2) => {
          $[J2] = M2.props[J2];
        });
      });
    }), S2 = JSON.parse(JSON.stringify(E2));
  };
  CoreContext.on("ActiveProjectChanged", ({ projectId: E2 }) => {
    if (S2 = [], !E2)
      return;
    const _ = getProject(E2);
    g2(_.props.overlays);
  }), CoreContext.on("ProjectChanged", ({ project: E2 }) => {
    g2(E2.props.overlays);
  });
} }, Background = { type: "Background", valueType: Object, props: {}, init({ addSource: a92, removeSource: u2, updateSource: c, getSource: l2, modifySourceValue: v2 }) {
  let S2;
  const g2 = (E2) => {
    if (!E2)
      return;
    const _ = (S2 == null ? void 0 : S2.id) !== (E2 == null ? void 0 : E2.id) ? E2 : null, k = deepEqual(E2, S2) ? null : E2;
    _ && (a92({
      id: _ == null ? void 0 : _.id,
      value: { ..._ == null ? void 0 : _.props },
      // TODO: It feels odd to have "props" match "value" exactly.
      //  They probably shouldn't be necessary here.
      props: _ == null ? void 0 : _.props
    }), u2(S2 == null ? void 0 : S2.id)), k && (c(k == null ? void 0 : k.id, k == null ? void 0 : k.props), v2(k == null ? void 0 : k.id, (L2) => {
      Object.keys(k == null ? void 0 : k.props).forEach((M2) => {
        L2[M2] = k == null ? void 0 : k.props[M2];
      });
    })), S2 = JSON.parse(JSON.stringify(E2));
  };
  CoreContext.on("ActiveProjectChanged", ({ projectId: E2 }) => {
    if (S2 = null, !E2)
      return;
    const _ = getProject(E2);
    g2(_.props.background);
  }), CoreContext.on("ProjectChanged", ({ project: E2 }) => {
    g2(E2.props.background);
  });
} }, Logo = { type: "Logo", valueType: Object, props: {}, init({ addSource: a92, removeSource: u2, updateSource: c, getSource: l2, modifySourceValue: v2 }) {
  let S2;
  const g2 = (E2) => {
    if (!E2) {
      S2 && (u2(S2 == null ? void 0 : S2.id), S2 = null);
      return;
    }
    const _ = (S2 == null ? void 0 : S2.id) !== (E2 == null ? void 0 : E2.id) ? E2 : null, k = deepEqual(E2, S2) ? null : E2;
    _ && (a92({
      id: _ == null ? void 0 : _.id,
      value: { ..._ == null ? void 0 : _.props },
      // TODO: It feels odd to have "props" match "value" exactly.
      //  They probably shouldn't be necessary here.
      props: _ == null ? void 0 : _.props
    }), u2(S2 == null ? void 0 : S2.id)), k && (c(k == null ? void 0 : k.id, k == null ? void 0 : k.props), v2(k == null ? void 0 : k.id, (L2) => {
      Object.keys(k == null ? void 0 : k.props).forEach((M2) => {
        L2[M2] = k == null ? void 0 : k.props[M2];
      });
    })), S2 = JSON.parse(JSON.stringify(E2));
  };
  CoreContext.on("ActiveProjectChanged", ({ projectId: E2 }) => {
    if (S2 = null, !E2)
      return;
    const _ = getProject(E2);
    g2(_.props.logo);
  }), CoreContext.on("ProjectChanged", ({ project: E2 }) => {
    g2(E2.props.logo);
  });
} }, { state } = CoreContext, updateUserProps = async (a92) => {
  const u2 = getUser();
  if (!u2)
    return;
  const c = { ...u2.props, ...a92.props }, l2 = await CoreContext.clients.LiveApi().collection.updateCollection({ collectionId: u2.id, updateMask: ["metadata"], metadata: { ...u2.metadata, props: c } });
  await triggerInternal$1("UserChanged", l2.collection);
}, createSource = async (a92) => {
  const u2 = getUser().id, { source: c } = await CoreContext.clients.LiveApi().source.createSource({ metadata: {}, collectionId: u2, address: { rtmpPush: { enabled: true } }, preview: { webrtc: { enabled: true, displayName: a92.displayName || "RTMP Source" } } });
  await triggerInternal$1("SourceAdded", c);
  const l2 = await CoreContext.clients.LiveApi().source.addSourceToProject({ collectionId: u2, projectId: a92.projectId, sourceId: c.sourceId });
  return await triggerInternal$1("ProjectSourceAdded", { projectId: l2.project.projectId, source: c }), c;
}, updateSource = async (a92) => {
  const u2 = getUser().id;
  let c = [], l2 = {};
  a92.metadata && (c.push("metadata"), l2.metadata = a92.metadata), a92.displayName && (c.push("preview.webrtc.displayName"), l2 = { ...l2, preview: { webrtc: { displayName: a92.displayName } } });
  const { source: v2 } = await CoreContext.clients.LiveApi().source.updateSource({ collectionId: u2, updateMask: c, sourceId: a92.sourceId, ...l2 });
  return await triggerInternal$1("SourceChanged", v2), v2;
}, deleteSource = async (a92) => {
  const u2 = getUser().id;
  await CoreContext.clients.LiveApi().source.removeSourceFromProject({ collectionId: u2, projectId: a92.projectId, sourceId: a92.sourceId }), await triggerInternal$1("ProjectSourceRemoved", { projectId: a92.projectId, sourceId: a92.sourceId });
  const c = await CoreContext.clients.LiveApi().source.deleteSource({ sourceId: a92.sourceId, collectionId: u2 });
  return await triggerInternal$1("SourceRemoved", a92.sourceId), c;
}, createProject$1 = async (a92 = {}) => {
  const { props: u2 = {}, size: c, settings: l2 = {} } = a92, v2 = await CoreContext.Request.createProject({ settings: l2, props: u2, size: c });
  await triggerInternal$1("ProjectAdded", v2.project);
  const S2 = await hydrateProject(v2.project, "ROLE_HOST");
  return toBaseProject(S2);
}, recreateLayout = async (a92) => {
  const { projectId: u2, props: c = {} } = a92, l2 = getUser().id, v2 = await CoreContext.clients.LiveApi().project.getProject({ collectionId: l2, projectId: u2, status: true });
  if ([ProjectBroadcastPhase.PROJECT_BROADCAST_PHASE_RUNNING, ProjectBroadcastPhase.PROJECT_BROADCAST_PHASE_STARTING].includes(v2.status.phase))
    return;
  const S2 = v2.project.metadata || {}, { layoutId: g2 } = S2, { video: E2 } = v2.project.rendering, { type: _ } = v2.project.metadata.props || {}, k = await CoreContext.Request.createLayout({ collectionId: l2, projectId: u2, type: _ || "sceneless", settings: {}, size: { x: E2.width, y: E2.height } }), L2 = await CoreContext.clients.LiveApi().project.updateProject({ collectionId: l2, projectId: u2, updateMask: ["metadata"], metadata: { ...S2, layoutId: k.id } });
  CoreContext.log.debug("New layout assigned to project:", { layout: k }), await triggerInternal$1("ProjectChanged", { project: L2.project }), await CoreContext.clients.LayoutApi().layout.deleteLayout({ layoutId: g2 }), CoreContext.log.debug("Previous layout deleted:", { layoutId: g2 });
  const M2 = await hydrateProject(L2.project, "ROLE_HOST");
  return await M2.compositor.update(M2.compositor.getRoot().id, c), { project: toBaseProject(M2), internalProject: M2 };
}, deleteProject$1 = async (a92) => {
  const { projectId: u2 } = a92;
  await CoreContext.Request.deleteProject({ projectId: u2 }), await triggerInternal$1("ProjectRemoved", { projectId: u2 });
}, updateProjectProps = async (a92) => {
  const { projectId: u2 } = a92, c = getUser().id, l2 = getProject(u2), v2 = { ...l2.props, ...a92.props }, S2 = await CoreContext.clients.LiveApi().project.updateProject({ collectionId: c, projectId: u2, updateMask: ["metadata"], metadata: { ...l2.videoApi.project.metadata, props: v2 } });
  await triggerInternal$1("ProjectChanged", { project: S2.project });
}, updateProjectPropsWithoutTrigger = async (a92) => {
  const { projectId: u2 } = a92, c = getUser().id, l2 = getProject(u2), v2 = { ...l2.props, ...a92.props };
  await CoreContext.clients.LiveApi().project.updateProject({ collectionId: c, projectId: u2, updateMask: ["metadata"], metadata: { ...l2.videoApi.project.metadata, props: v2 } });
}, setActiveProject = async (a92) => {
  const u2 = state.projects.find((l2) => l2.id === a92.projectId);
  if (!u2) {
    state.activeProjectId = null, triggerInternal$1("ActiveProjectChanged", { projectId: null });
    return;
  }
  const c = state.projects.find((l2) => l2.id === state.activeProjectId);
  if (u2 !== c)
    return c && (Array.from(webrtcManager.rooms.keys()).map(webrtcManager.removeRoom), await CoreContext.clients.LayoutApi().unsubscribeFromLayout(c.layoutApi.layoutId), await CoreContext.clients.LiveApi().unsubscribeFromProject(c.videoApi.project.collectionId, c.videoApi.project.projectId)), await CoreContext.clients.LayoutApi().subscribeToLayout(u2.layoutApi.layoutId), await CoreContext.clients.LiveApi().subscribeToProject(u2.videoApi.project.collectionId, u2.videoApi.project.projectId), CoreContext.clients.LiveApi().project.getProject({ collectionId: u2.videoApi.project.collectionId, projectId: u2.videoApi.project.projectId, status: true }).then((l2) => {
      var v2, S2;
      triggerInternal$1("ProjectChanged", { project: l2.project, phase: (v2 = l2.status) == null ? void 0 : v2.phase, broadcastId: (S2 = l2.status) == null ? void 0 : S2.broadcastId });
    }), triggerInternal$1("ActiveProjectChanged", { projectId: u2.id }), toBaseProject(u2);
}, joinRoom = async (a92) => {
  const { projectId: u2, displayName: c = "Guest" } = a92, l2 = state.projects.find((M2) => M2.id === u2);
  let v2 = l2.sfuToken;
  if (!v2) {
    let { webrtcAccess: M2 } = await CoreContext.clients.LiveApi().authentication.createWebRtcAccessToken({ collectionId: l2.videoApi.project.collectionId, projectId: l2.videoApi.project.projectId, displayName: c });
    v2 = M2.accessToken;
  }
  const g2 = jwtDecode(v2).video.room, E2 = new URL(CoreContext.clients.getLiveKitServer()), _ = E2.host + E2.pathname, k = webrtcManager.ensureRoom(_, g2, v2);
  k.bindApiClient(CoreContext.clients), await k.connect(), l2.sfuToken = v2, l2.roomId = g2;
  const L2 = getRoom(g2);
  return trigger$1("RoomJoined", { projectId: l2.id, room: L2 }), L2;
}, createNode = async (a92) => {
  let { props: u2 = {}, parentId: c, index: l2, projectId: v2 = state.activeProjectId } = a92;
  const S2 = getProject(v2), g2 = await S2.compositor.insert(u2, c, l2);
  return triggerInternal$1("NodeAdded", { projectId: v2, nodeId: g2 }), triggerInternal$1("NodeChanged", { projectId: v2, nodeId: c }), S2.compositor.get(g2);
}, deleteNode = async (a92) => {
  var S2;
  let { nodeId: u2, projectId: c = state.activeProjectId } = a92;
  const l2 = getProject(c), v2 = (S2 = l2.compositor.getParent(u2)) == null ? void 0 : S2.id;
  l2.compositor.remove(u2), triggerInternal$1("NodeRemoved", { projectId: c, nodeId: u2 }), triggerInternal$1("NodeChanged", { projectId: c, nodeId: v2 });
}, updateNode = async (a92) => {
  let { nodeId: u2, props: c = {}, projectId: l2 = state.activeProjectId } = a92;
  const v2 = getProject(l2);
  return delete c.type, delete c.sourceType, v2.compositor.update(u2, c), triggerInternal$1("NodeChanged", { projectId: l2, nodeId: u2 }), v2.compositor.get(u2);
}, setNodeLayout = async (a92) => {
  let { nodeId: u2, layout: c, projectId: l2 = state.activeProjectId, layoutProps: v2 = {} } = a92;
  getProject(l2).compositor.update(u2, { layout: c, layoutProps: v2 }), triggerInternal$1("NodeChanged", { projectId: l2, nodeId: u2 });
}, moveNode = async (a92) => {
  const { nodeId: u2, parentId: c, projectId: l2 = state.activeProjectId, index: v2 } = a92;
  getProject(l2).compositor.move(u2, c, v2), triggerInternal$1("NodeChanged", { projectId: l2, nodeId: u2 });
}, swapNodes = async (a92) => {
  var E2, _;
  const { nodeAId: u2, nodeBId: c, projectId: l2 = state.activeProjectId } = a92, v2 = getProject(l2), S2 = (E2 = v2.compositor.getParent(u2)) == null ? void 0 : E2.id, g2 = (_ = v2.compositor.getParent(c)) == null ? void 0 : _.id;
  v2.compositor.swap(u2, c), triggerInternal$1("NodeChanged", { projectId: l2, nodeId: S2 }), triggerInternal$1("NodeChanged", { projectId: l2, nodeId: g2 });
}, reorderNodes = async (a92) => {
  const { parentId: u2, childIds: c, projectId: l2 = state.activeProjectId } = a92;
  getProject(l2).compositor.reorder(u2, c), triggerInternal$1("NodeChanged", { projectId: l2, nodeId: u2 });
}, startBroadcast = async (a92) => {
  const { projectId: u2 = state.activeProjectId } = a92, c = getProject(u2);
  await CoreContext.clients.LiveApi().project.startProjectBroadcast({ collectionId: c.videoApi.project.collectionId, projectId: c.videoApi.project.projectId });
}, stopBroadcast = async (a92) => {
  const { projectId: u2 = state.activeProjectId } = a92, c = getProject(u2);
  await CoreContext.clients.LiveApi().project.stopProjectBroadcast({ collectionId: c.videoApi.project.collectionId, projectId: c.videoApi.project.projectId });
}, addDestination = async (a92) => {
  var k;
  const { rtmpUrl: u2, rtmpKey: c, enabled: l2, projectId: v2 = state.activeProjectId, props: S2 = {} } = a92, g2 = getProject(v2), E2 = { rtmpPush: { key: c, url: u2 } }, _ = await ((k = CoreContext.clients.LiveApi().destination) == null ? void 0 : k.createDestination({ collectionId: g2.videoApi.project.collectionId, projectId: g2.videoApi.project.projectId, address: E2, enabled: l2, metadata: { props: S2 } }));
  return await triggerInternal$1("DestinationAdded", _.destination), toBaseDestination(_.destination);
}, removeDestination = async (a92) => {
  var v2;
  const { destinationId: u2, projectId: c = state.activeProjectId } = a92, l2 = getProject(c);
  await ((v2 = CoreContext.clients.LiveApi().destination) == null ? void 0 : v2.deleteDestination({ collectionId: l2.videoApi.project.collectionId, projectId: l2.videoApi.project.projectId, destinationId: u2 })), await triggerInternal$1("DestinationRemoved", { projectId: c, destinationId: u2 });
}, updateDestination = async (a92) => {
  var _;
  const { rtmpUrl: u2, rtmpKey: c, destinationId: l2, projectId: v2 = state.activeProjectId } = a92, S2 = getProject(v2), g2 = { key: c, url: u2 }, E2 = await ((_ = CoreContext.clients.LiveApi().destination) == null ? void 0 : _.updateDestination({ collectionId: S2.videoApi.project.collectionId, projectId: S2.videoApi.project.projectId, destinationId: l2, updateMask: ["address.rtmpPush"], address: { rtmpPush: g2 } }));
  await triggerInternal$1("DestinationChanged", E2.destination);
}, updateDestinationProps = async (a92) => {
  var E2, _;
  const { projectId: u2 = state.activeProjectId, destinationId: c, props: l2 = {} } = a92, v2 = getProject(u2), S2 = v2.videoApi.project.destinations.find((k) => k.destinationId === c);
  if (!S2)
    return;
  const g2 = await ((_ = CoreContext.clients.LiveApi().destination) == null ? void 0 : _.updateDestination({ collectionId: v2.videoApi.project.collectionId, projectId: v2.videoApi.project.projectId, destinationId: c, updateMask: ["metadata"], metadata: { ...S2.metadata || {}, props: { ...((E2 = S2.metadata) == null ? void 0 : E2.props) || {}, ...l2 } } }));
  await triggerInternal$1("DestinationChanged", g2.destination);
}, setDestinationEnabled = async (a92) => {
  var E2;
  const { enabled: u2, destinationId: c, projectId: l2 = state.activeProjectId } = a92, v2 = getProject(l2);
  if (v2.videoApi.project.destinations.find((_) => c === _.destinationId).enabled === u2)
    return;
  const g2 = await ((E2 = CoreContext.clients.LiveApi().destination) == null ? void 0 : E2.updateDestination({ collectionId: v2.videoApi.project.collectionId, projectId: v2.videoApi.project.projectId, destinationId: c, updateMask: ["enabled"], enabled: u2 }));
  await triggerInternal$1("DestinationChanged", g2.destination);
}, setDestination = async (a92) => {
  var E2, _;
  const { rtmpUrl: u2, rtmpKey: c, projectId: l2 = state.activeProjectId } = a92, v2 = getProject(l2), S2 = { key: c, url: u2 }, g2 = true;
  if (v2.videoApi.project.destinations.length > 0) {
    const k = await ((E2 = CoreContext.clients.LiveApi().destination) == null ? void 0 : E2.updateDestination({ collectionId: v2.videoApi.project.collectionId, projectId: v2.videoApi.project.projectId, destinationId: v2.videoApi.project.destinations[0].destinationId, updateMask: ["address.rtmpPush"], address: { rtmpPush: S2 } }));
    await triggerInternal$1("DestinationChanged", k.destination);
  } else {
    const k = await ((_ = CoreContext.clients.LiveApi().destination) == null ? void 0 : _.createDestination({ collectionId: v2.videoApi.project.collectionId, projectId: v2.videoApi.project.projectId, address: { rtmpPush: S2 }, enabled: g2 }));
    await triggerInternal$1("DestinationAdded", k.destination);
  }
}, commands$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({ __proto__: null, addDestination, createNode, createProject: createProject$1, createSource, deleteNode, deleteProject: deleteProject$1, deleteSource, joinRoom, moveNode, recreateLayout, removeDestination, reorderNodes, setActiveProject, setDestination, setDestinationEnabled, setNodeLayout, startBroadcast, stopBroadcast, swapNodes, updateDestination, updateDestinationProps, updateNode, updateProjectProps, updateProjectPropsWithoutTrigger, updateSource, updateUserProps }, Symbol.toStringTag, { value: "Module" })), useActiveProjectRoom$1 = () => {
  const [a92, u2] = reactExports.useState(null);
  return reactExports.useEffect(() => useActiveProjectRoom(u2), []), a92;
}, useDevices$1 = () => {
  const [a92, u2] = reactExports.useState({ webcams: [], microphones: [], speakers: [] });
  return reactExports.useEffect(() => watchDevices(u2), []), a92;
}, StudioContext$1 = React.createContext({ studio: null, project: null, room: null, webcamId: null, microphoneId: null, setStudio: () => {
}, setProject: () => {
}, setRoom: () => {
}, setWebcamId: () => {
}, setMicrophoneId: () => {
}, projectCommands: {} }), useStudio$2 = () => reactExports.useContext(StudioContext$1);
let stored = { webcamId: null, microphoneId: null };
try {
  stored.webcamId = localStorage == null ? void 0 : localStorage.getItem("__LS_webcam"), stored.microphoneId = localStorage == null ? void 0 : localStorage.getItem("__LS_microphone");
} catch {
}
const StudioProvider = ({ children: a92 }) => {
  const [u2, c] = reactExports.useState(), [l2, v2] = reactExports.useState(), [S2, g2] = reactExports.useState(), [E2, _] = reactExports.useState(stored.webcamId), [k, L2] = reactExports.useState(stored.microphoneId), M2 = reactExports.useMemo(() => l2 ? commands(l2) : null, [l2]);
  return reactExports.useEffect(() => {
  }, [l2]), reactExports.useEffect(() => {
    u2 && (E2 && u2.setCamera({ deviceId: E2 }).catch(($) => {
      console.warn($);
    }), k && u2.setMicrophone({ deviceId: k }).catch(($) => {
      console.warn($);
    }));
  }, [u2, E2, k]), /* @__PURE__ */ jsx(StudioContext$1.Provider, { value: { studio: S2, project: l2, room: u2, webcamId: E2, microphoneId: k, setStudio: g2, setProject: v2, setRoom: c, setWebcamId: ($) => {
    try {
      localStorage == null || localStorage.setItem("__LS_webcam", $);
    } catch {
    }
    _($);
  }, setMicrophoneId: ($) => {
    try {
      localStorage == null || localStorage.setItem("__LS_microphone", $);
    } catch {
    }
    L2($);
  }, projectCommands: M2 }, children: a92 });
}, react = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({ __proto__: null, StudioContext: StudioContext$1, StudioProvider, useActiveProjectRoom: useActiveProjectRoom$1, useDevices: useDevices$1, useStudio: useStudio$2 }, Symbol.toStringTag, { value: "Module" })), ForegroundLayers = [{ name: "ImageIframeOverlayContainer", id: "fg-image-iframe", layout: "Free" }, { name: "BannerContainer", id: "fg-banners", layout: "Column", layoutProps: { cover: true } }, { name: "VideoOverlayContainer", id: "fg-video", layout: "Free" }, { name: "LogoContainer", layout: "Free", id: "logo" }], defaultStyles = { custom: { display: "block" }, video: { height: "100%", width: "100%" }, image: { height: "100%", width: "100%" }, logo: { objectFit: "contain", position: "unset" } }, validateEachChildren = (a92, u2) => {
  let c = true;
  return a92.forEach((l2) => {
    var v2, S2;
    (v2 = l2.props) != null && v2.sourceType && !u2.includes((S2 = l2.props) == null ? void 0 : S2.sourceType) ? c = false : l2.children.length > 0 && (c = c && validateEachChildren(l2.children, u2));
  }), c;
}, addingCache = { camera: /* @__PURE__ */ new Set(), screen: /* @__PURE__ */ new Set(), rtmp: /* @__PURE__ */ new Set() }, commands = (a92) => {
  var H2, B2, Y2, ne2;
  const u2 = a92.id, c = a92.scene.getRoot(), { Command: l2 } = CoreContext, v2 = c.children.find((Z2) => Z2.props.id === "bg"), S2 = c.children.find((Z2) => Z2.props.id === "content"), g2 = c.children.find((Z2) => Z2.props.id === "foreground");
  let E2 = (H2 = g2 == null ? void 0 : g2.children) == null ? void 0 : H2.find((Z2) => Z2.props.id === "fg-image-iframe"), _ = (B2 = g2 == null ? void 0 : g2.children) == null ? void 0 : B2.find((Z2) => Z2.props.id === "logo"), k = (Y2 = g2 == null ? void 0 : g2.children) == null ? void 0 : Y2.find((Z2) => Z2.props.id === "fg-video");
  const L2 = getProject(a92.id);
  let M2 = (ne2 = g2 == null ? void 0 : g2.children) == null ? void 0 : ne2.find((Z2) => Z2.props.id === "fg-banners");
  const $ = async () => {
    var Z2, re2;
    ((Z2 = v2 == null ? void 0 : v2.props) == null ? void 0 : Z2.layout) !== "Layered" && await L2.compositor.update(v2.id, { name: "Background", id: "bg", layout: "Layered" }), ((re2 = g2 == null ? void 0 : g2.props) == null ? void 0 : re2.layout) !== "Layered" && await L2.compositor.update(g2.id, { id: "foreground", name: "Overlays", layout: "Layered" });
  }, J2 = async () => {
    validateEachChildren(v2.children, ["Background"]) || v2.children.forEach(async (Z2) => {
      await CoreContext.Command.deleteNode({ nodeId: Z2.id });
    });
  }, V2 = async () => {
    const Z2 = async () => {
      var A2;
      if (M2)
        return M2.id;
      {
        const N2 = await L2.compositor.insert({ name: "BannerContainer", id: "fg-banners", layout: "Column", layoutProps: { cover: true } }, g2.id);
        return M2 = (A2 = g2 == null ? void 0 : g2.children) == null ? void 0 : A2.find((D2) => D2.id === N2), N2;
      }
    }, re2 = async () => {
      var A2;
      if (E2)
        return E2.id;
      {
        const N2 = await L2.compositor.insert({ name: "ImageIframeOverlay", id: "fg-image-iframe", layout: "Free" }, g2.id);
        return E2 = (A2 = g2 == null ? void 0 : g2.children) == null ? void 0 : A2.find((D2) => D2.id === N2), N2;
      }
    }, oe2 = async () => {
      var A2;
      if (k)
        return k.id;
      {
        const N2 = await L2.compositor.insert({ name: "VideoOverlay", id: "fg-video", layout: "Free" }, g2.id);
        return k = (A2 = g2 == null ? void 0 : g2.children) == null ? void 0 : A2.find((D2) => D2.id === N2), N2;
      }
    }, de2 = async () => {
      var A2;
      if (_)
        return _.id;
      {
        const N2 = await L2.compositor.insert({ name: "Logo", layout: "Free", sourceType: "Logo", id: "logo", style: { width: "100%", height: "100%", objectFit: "contain", position: "unset" } }, g2.id);
        return _ = (A2 = g2 == null ? void 0 : g2.children) == null ? void 0 : A2.find((D2) => D2.id === N2), N2;
      }
    };
    try {
      const A2 = await Promise.all([Z2(), re2(), oe2(), de2()]);
      await L2.compositor.reorder(g2.id, A2);
    } catch {
    }
  }, q2 = {
    getBackground() {
      return v2;
    },
    getContent() {
      return S2;
    },
    getForeground() {
      return g2;
    },
    getLayout() {
      return S2.props.layout;
    },
    getBanners() {
      var Z2;
      return ((Z2 = getProject(a92.id).props) == null ? void 0 : Z2.banners) || [];
    },
    getOverlays() {
      return getProject(a92.id).props.overlays || [];
    },
    getParticipants() {
      return S2.children.filter((Z2) => Z2.props.sourceType === "RoomParticipant");
    },
    getLogo() {
      var Z2, re2;
      return (re2 = (Z2 = _ == null ? void 0 : _.children[0]) == null ? void 0 : Z2.props) == null ? void 0 : re2.id;
    },
    async removeLogo() {
      const [Z2, ...re2] = (_ == null ? void 0 : _.children) || [];
      re2.forEach((oe2) => {
        CoreContext.Command.deleteNode({ nodeId: oe2.id });
      }), Z2 && await CoreContext.Command.deleteNode({ nodeId: Z2.id });
    },
    getImageOverlay() {
      var re2, oe2;
      const Z2 = (re2 = E2 == null ? void 0 : E2.children) == null ? void 0 : re2.find((de2) => {
        var A2, N2;
        return ((N2 = (A2 = de2 == null ? void 0 : de2.props) == null ? void 0 : A2.sourceProps) == null ? void 0 : N2.type) === "image";
      });
      return (oe2 = Z2 == null ? void 0 : Z2.props) == null ? void 0 : oe2.id;
    },
    getVideoOverlay() {
      var re2, oe2;
      const Z2 = (re2 = k == null ? void 0 : k.children) == null ? void 0 : re2.find((de2) => {
        var A2, N2;
        return ((N2 = (A2 = de2 == null ? void 0 : de2.props) == null ? void 0 : A2.sourceProps) == null ? void 0 : N2.type) === "video";
      });
      return (oe2 = Z2 == null ? void 0 : Z2.props) == null ? void 0 : oe2.id;
    },
    autoPlayBackgroundVideo(Z2 = { muted: true, autoplay: true }) {
      const re2 = v2.children.find((oe2) => oe2.props.id === "bg-video");
      re2 && CoreContext.Command.updateNode({ nodeId: re2.id, props: { ...re2.props, attributes: { ...re2.props.attributes, ...Z2 } } });
    },
    autoPlayVideoOverlay(Z2, re2 = { muted: true, autoplay: true }) {
      var de2;
      const oe2 = (de2 = k == null ? void 0 : k.children) == null ? void 0 : de2.find((A2) => {
        var N2, D2;
        return ((D2 = (N2 = A2.props) == null ? void 0 : N2.sourceProps) == null ? void 0 : D2.id) === Z2;
      });
      oe2 && oe2.props.sourceProps.type === "video" && CoreContext.Command.updateNode({ nodeId: oe2.id, props: { ...oe2.props, attributes: { ...oe2.props.attributes, ...re2 } } });
    },
    getBackgroundMedia() {
      var re2, oe2;
      return (oe2 = (re2 = v2.children.filter((de2) => de2)[0]) == null ? void 0 : re2.props) == null ? void 0 : oe2.id;
    },
    getBackgroundImage() {
      var re2;
      const Z2 = v2.children.find((oe2) => {
        var de2, A2;
        return ((A2 = (de2 = oe2.props) == null ? void 0 : de2.sourceProps) == null ? void 0 : A2.type) === "image";
      });
      return (re2 = Z2 == null ? void 0 : Z2.props) == null ? void 0 : re2.id;
    },
    getBackgroundVideo() {
      var re2;
      const Z2 = v2.children.find((oe2) => {
        var de2, A2;
        return ((A2 = (de2 = oe2.props) == null ? void 0 : de2.sourceProps) == null ? void 0 : A2.type) === "video";
      });
      return (re2 = Z2 == null ? void 0 : Z2.props) == null ? void 0 : re2.id;
    },
    async addLogo(Z2, re2) {
      const [oe2, ...de2] = (_ == null ? void 0 : _.children) || [];
      de2.forEach((A2) => {
        CoreContext.Command.deleteNode({ nodeId: A2.id });
      }), oe2 ? await CoreContext.Command.updateNode({ nodeId: oe2.id, props: { sourceType: "Logo", id: Z2, sourceProps: { ...re2, meta: { style: { ...defaultStyles.logo }, ...re2.meta } } } }) : await CoreContext.Command.createNode({ parentId: _ == null ? void 0 : _.id, props: { sourceType: "Logo", id: Z2, sourceProps: { ...re2, meta: { style: { ...defaultStyles.logo }, ...re2.meta } } } });
    },
    addBanner(Z2 = {}) {
      var A2;
      const re2 = Z2.meta || {}, oe2 = { id: generateId(), props: { ...Z2, meta: re2 } }, de2 = ((A2 = getProject(u2).props) == null ? void 0 : A2.banners) || [];
      return l2.updateProjectProps({ projectId: u2, props: { banners: [...de2, oe2] } });
    },
    editBanner(Z2, re2 = {}) {
      const de2 = q2.getBanners().map((A2) => A2.id !== Z2 ? A2 : { ...A2, props: re2 });
      return l2.updateProjectProps({ projectId: u2, props: { banners: de2 } });
    },
    removeBanner(Z2) {
      var oe2;
      const re2 = q2.getBanners();
      return (oe2 = M2 == null ? void 0 : M2.children) == null || oe2.forEach((de2) => {
        de2.props.bannerId === Z2 && CoreContext.Command.deleteNode({ nodeId: de2.id });
      }), l2.updateProjectProps({ projectId: u2, props: { banners: re2.filter((de2) => de2.id !== Z2) } });
    },
    async setActiveBanner(Z2) {
      var A2, N2;
      const [re2, ...{}] = (M2 == null ? void 0 : M2.children) || [];
      ((N2 = (A2 = re2 == null ? void 0 : re2.props) == null ? void 0 : A2.sourceType) == null ? void 0 : N2.toLowerCase()) === "chatoverlay" && await CoreContext.Command.deleteNode({ nodeId: re2.id });
      const [oe2, ...de2] = (M2 == null ? void 0 : M2.children) || [];
      if (de2.forEach((D2) => {
        CoreContext.Command.deleteNode({ nodeId: D2.id });
      }), oe2)
        CoreContext.Command.updateNode({ nodeId: oe2.id, props: { sourceType: "Banner", bannerId: Z2 } });
      else
        return CoreContext.Command.createNode({ parentId: M2 == null ? void 0 : M2.id, props: { sourceType: "Banner", bannerId: Z2 } });
    },
    getActiveBanner() {
      var Z2, re2, oe2;
      return ((oe2 = (re2 = (Z2 = M2.children) == null ? void 0 : Z2[0]) == null ? void 0 : re2.props) == null ? void 0 : oe2.bannerId) ?? null;
    },
    async addChatOverlay(Z2, re2) {
      var N2, D2;
      const [oe2, ...{}] = (M2 == null ? void 0 : M2.children) || [];
      ((D2 = (N2 = oe2 == null ? void 0 : oe2.props) == null ? void 0 : N2.sourceType) == null ? void 0 : D2.toLowerCase()) === "banner" && await CoreContext.Command.deleteNode({ nodeId: oe2.id });
      const [de2, ...A2] = (M2 == null ? void 0 : M2.children) || [];
      A2.forEach((W2) => {
        CoreContext.Command.deleteNode({ nodeId: W2.id });
      }), de2 ? await CoreContext.Command.updateNode({ nodeId: de2.id, props: { sourceType: "ChatOverlay", chatOverlayId: Z2, id: Z2, ...re2 } }) : await CoreContext.Command.createNode({ parentId: M2 == null ? void 0 : M2.id, props: { sourceType: "ChatOverlay", chatOverlayId: Z2, id: Z2, ...re2 } });
    },
    async removeChatOverlay(Z2) {
      var re2;
      (re2 = M2 == null ? void 0 : M2.children) == null || re2.forEach(async (oe2) => {
        oe2.props.chatOverlayId === Z2 && await CoreContext.Command.deleteNode({ nodeId: oe2.id });
      });
    },
    getChatOverlay() {
      var Z2, re2, oe2, de2, A2;
      return (oe2 = (re2 = (Z2 = M2.children) == null ? void 0 : Z2[0]) == null ? void 0 : re2.props) != null && oe2.chatOverlayId && ((A2 = (de2 = M2.children) == null ? void 0 : de2[0]) == null ? void 0 : A2.props) || null;
    },
    getCustomOverlay() {
      var re2, oe2;
      const Z2 = (re2 = E2 == null ? void 0 : E2.children) == null ? void 0 : re2.find((de2) => {
        var A2, N2;
        return ((N2 = (A2 = de2 == null ? void 0 : de2.props) == null ? void 0 : A2.sourceProps) == null ? void 0 : N2.type) === "custom";
      });
      return (oe2 = Z2 == null ? void 0 : Z2.props) == null ? void 0 : oe2.id;
    },
    async addImageOverlay(Z2, re2) {
      const [oe2, ...de2] = (E2 == null ? void 0 : E2.children) || [];
      de2.forEach((N2) => {
        CoreContext.Command.deleteNode({ nodeId: N2.id });
      });
      const A2 = { ...defaultStyles.image, ...(k == null ? void 0 : k.children.length) && { opacity: 0 } };
      oe2 ? await CoreContext.Command.updateNode({ nodeId: oe2 == null ? void 0 : oe2.id, props: { sourceType: "Overlay", id: Z2, sourceProps: { ...re2, type: "image", meta: { style: { ...A2 } } } } }) : await CoreContext.Command.createNode({ parentId: E2 == null ? void 0 : E2.id, props: { sourceType: "Overlay", id: Z2, sourceProps: { ...re2, type: "image", meta: { style: { ...A2 } } } } });
    },
    async addVideoOverlay(Z2, re2) {
      const [oe2, ...de2] = (k == null ? void 0 : k.children) || [];
      de2.forEach((A2) => {
        CoreContext.Command.deleteNode({ nodeId: A2.id });
      }), E2.children.forEach(({ id: A2, props: N2 }) => {
        var D2, W2;
        if (((W2 = (D2 = N2.sourceProps.meta) == null ? void 0 : D2.style) == null ? void 0 : W2.opacity) !== 0) {
          const ee2 = N2.sourceProps.type, ae2 = { ...defaultStyles[ee2], opacity: 0 };
          CoreContext.Command.updateNode({ nodeId: A2, props: { ...N2, sourceProps: { ...N2.sourceProps, meta: { style: { ...ae2 } } } } });
        }
      }), oe2 ? await CoreContext.Command.updateNode({ nodeId: oe2 == null ? void 0 : oe2.id, props: { sourceType: "Overlay", id: Z2, sourceProps: { ...re2, type: "video", meta: { style: { ...defaultStyles.video }, ...re2.meta } } } }) : await CoreContext.Command.createNode({ parentId: k == null ? void 0 : k.id, props: { sourceType: "Overlay", id: Z2, sourceProps: { ...re2, type: "video", meta: { style: { ...defaultStyles.video }, ...re2.meta } } } });
    },
    async updateVideoOverlayProps(Z2, re2) {
      var de2, A2;
      const oe2 = ((de2 = k == null ? void 0 : k.children) == null ? void 0 : de2.find((N2) => {
        var D2;
        return ((D2 = N2 == null ? void 0 : N2.props) == null ? void 0 : D2.id) === Z2;
      })) || null;
      oe2 && await CoreContext.Command.updateNode({ nodeId: oe2 == null ? void 0 : oe2.id, props: { sourceType: "Overlay", id: Z2, sourceProps: { ...(A2 = oe2 == null ? void 0 : oe2.props) == null ? void 0 : A2.sourceProps, ...re2, meta: { style: { ...defaultStyles.video }, ...re2.meta } } } });
    },
    async addCustomOverlay(Z2, re2) {
      const [oe2, ...de2] = (E2 == null ? void 0 : E2.children) || [];
      de2.forEach((N2) => {
        CoreContext.Command.deleteNode({ nodeId: N2.id });
      });
      const A2 = { ...defaultStyles.custom, ...(k == null ? void 0 : k.children.length) && { opacity: 0 } };
      oe2 ? await CoreContext.Command.updateNode({ nodeId: oe2 == null ? void 0 : oe2.id, props: { sourceType: "Overlay", id: Z2, sourceProps: { ...re2, type: "custom", meta: { style: { ...A2 } } } } }) : await CoreContext.Command.createNode({ parentId: E2 == null ? void 0 : E2.id, props: { sourceType: "Overlay", id: Z2, sourceProps: { ...re2, type: "custom", meta: { style: { ...A2 } } } } });
    },
    async removeCustomOverlay() {
      var oe2, de2;
      const [Z2, ...re2] = (E2 == null ? void 0 : E2.children) || [];
      re2.forEach((A2) => {
        CoreContext.Command.deleteNode({ nodeId: A2.id });
      }), Z2 && ((de2 = (oe2 = Z2 == null ? void 0 : Z2.props) == null ? void 0 : oe2.sourceProps) == null ? void 0 : de2.type) === "custom" && await CoreContext.Command.deleteNode({ nodeId: Z2.id });
    },
    async removeImageOverlay() {
      var oe2, de2;
      const [Z2, ...re2] = (E2 == null ? void 0 : E2.children) || [];
      re2.forEach((A2) => {
        CoreContext.Command.deleteNode({ nodeId: A2.id });
      }), Z2 && ((de2 = (oe2 = Z2 == null ? void 0 : Z2.props) == null ? void 0 : oe2.sourceProps) == null ? void 0 : de2.type) === "image" && await CoreContext.Command.deleteNode({ nodeId: Z2.id });
    },
    async removeVideoOverlay() {
      const [Z2, ...re2] = (k == null ? void 0 : k.children) || [];
      re2.forEach((oe2) => {
        CoreContext.Command.deleteNode({ nodeId: oe2.id });
      }), Z2 && await CoreContext.Command.deleteNode({ nodeId: Z2.id }), E2 == null || E2.children.forEach(({ id: oe2, props: de2 }) => {
        var A2, N2;
        if (((N2 = (A2 = de2.sourceProps.meta) == null ? void 0 : A2.style) == null ? void 0 : N2.opacity) === 0) {
          const D2 = de2.sourceProps.type, W2 = { ...defaultStyles[D2], opacity: 1 };
          CoreContext.Command.updateNode({ nodeId: oe2, props: { ...de2, sourceProps: { ...de2.sourceProps, meta: { style: { ...W2 } } } } });
        }
      });
    },
    setLayout(Z2, re2 = {}) {
      const oe2 = S2.props.layoutProps.showcase;
      l2.setNodeLayout({ nodeId: S2.id, layout: Z2, layoutProps: { showcase: oe2, ...re2 } });
    },
    async setBackgroundImage(Z2, re2) {
      const [oe2, ...de2] = (v2 == null ? void 0 : v2.children) || [];
      de2.forEach((A2) => {
        CoreContext.Command.deleteNode({ nodeId: A2.id });
      }), oe2 ? await CoreContext.Command.updateNode({ nodeId: oe2.id, props: { id: Z2, sourceType: "Background", sourceProps: { ...re2, type: "image", meta: { style: { ...defaultStyles.image }, ...re2 == null ? void 0 : re2.meta } } } }) : await CoreContext.Command.createNode({ parentId: v2 == null ? void 0 : v2.id, props: { id: Z2, sourceType: "Background", sourceProps: { ...re2, type: "image", meta: { style: { ...defaultStyles.image }, ...re2 == null ? void 0 : re2.meta } } } });
    },
    async setBackgroundVideo(Z2, re2) {
      const [oe2, ...de2] = (v2 == null ? void 0 : v2.children) || [];
      de2.forEach((A2) => {
        CoreContext.Command.deleteNode({ nodeId: A2.id });
      }), oe2 ? await CoreContext.Command.updateNode({ nodeId: oe2.id, props: { id: Z2, sourceType: "Background", sourceProps: { ...re2, type: "video", meta: { style: { ...defaultStyles.video }, ...re2 == null ? void 0 : re2.meta } } } }) : await CoreContext.Command.createNode({ parentId: v2 == null ? void 0 : v2.id, props: { id: Z2, sourceType: "Background", sourceProps: { ...re2, type: "video", meta: { style: { ...defaultStyles.video }, ...re2 == null ? void 0 : re2.meta } } } });
    },
    async updateBackgroundVideoProps(Z2, re2) {
      var de2, A2;
      const oe2 = ((de2 = v2 == null ? void 0 : v2.children) == null ? void 0 : de2.find((N2) => {
        var D2;
        return ((D2 = N2 == null ? void 0 : N2.props) == null ? void 0 : D2.id) === Z2;
      })) || null;
      oe2 && await CoreContext.Command.updateNode({ nodeId: oe2 == null ? void 0 : oe2.id, props: { sourceType: "Background", id: Z2, sourceProps: { ...(A2 = oe2 == null ? void 0 : oe2.props) == null ? void 0 : A2.sourceProps, ...re2, meta: { style: { ...defaultStyles.video }, ...re2.meta } } } });
    },
    async removeBackgroundImage() {
      const [Z2, ...re2] = (v2 == null ? void 0 : v2.children) || [];
      re2.forEach((oe2) => {
        CoreContext.Command.deleteNode({ nodeId: oe2.id });
      }), Z2 && Z2.props.sourceProps.type === "image" && await CoreContext.Command.deleteNode({ nodeId: Z2.id });
    },
    async removeBackgroundVideo() {
      const [Z2, ...re2] = (v2 == null ? void 0 : v2.children) || [];
      re2.forEach((oe2) => {
        CoreContext.Command.deleteNode({ nodeId: oe2.id });
      }), Z2 && Z2.props.sourceProps.type === "video" && await CoreContext.Command.deleteNode({ nodeId: Z2.id });
    },
    /* A function that takes in a sourceType and a callback function. It then creates a shallow copy of
    the root node and finds all the nodes that have the same sourceType as the one passed in. It then
    creates a listener for when the node changes, is added, or is removed. When any of these events
    happen, it will call the callback function with the new state. */
    useLayerState(Z2, re2) {
      const oe2 = cloneDeep$1(c);
      let de2 = findAll(oe2, (ee2) => ee2.props.sourceType === Z2);
      const A2 = () => {
        re2((de2 == null ? void 0 : de2.map((ee2) => ee2.props)) || {});
      }, N2 = CoreContext.onInternal("NodeChanged", (ee2) => {
        const ae2 = de2 == null ? void 0 : de2.find((le2) => le2.id === ee2.nodeId);
        if (de2 != null && de2.length && !ae2)
          return;
        const ye2 = de2, he2 = cloneDeep$1(c);
        de2 = findAll(he2, (le2) => {
          var we2;
          return ((we2 = le2 == null ? void 0 : le2.props) == null ? void 0 : we2.sourceType) === Z2;
        }), deepEqual(ye2, de2) || A2();
      }), D2 = CoreContext.onInternal("NodeAdded", (ee2) => {
        var le2;
        if (de2 == null ? void 0 : de2.find((we2) => we2.id === ee2.nodeId))
          return;
        const ye2 = cloneDeep$1(c);
        de2 = findAll(ye2, (we2) => {
          var Be2;
          return ((Be2 = we2 == null ? void 0 : we2.props) == null ? void 0 : Be2.sourceType) === Z2;
        });
        const he2 = de2 == null ? void 0 : de2.find((we2) => we2.id === ee2.nodeId);
        ((le2 = he2 == null ? void 0 : he2.props) == null ? void 0 : le2.sourceType) === Z2 && A2();
      }), W2 = CoreContext.onInternal("NodeRemoved", (ee2) => {
        var ye2;
        const ae2 = de2 == null ? void 0 : de2.find((he2) => he2.id === ee2.nodeId);
        ae2 && (de2 = de2 == null ? void 0 : de2.filter((he2) => he2.id !== ee2.nodeId), ((ye2 = ae2 == null ? void 0 : ae2.props) == null ? void 0 : ye2.sourceType) === Z2 && A2());
      });
      return A2(), () => {
        N2(), D2(), W2();
      };
    },
    setShowcase(Z2, re2 = "camera") {
      const oe2 = q2.getParticipantNode(Z2, re2);
      return CoreContext.Command.updateNode({ nodeId: S2.id, props: { layoutProps: { ...S2.props.layoutProps, showcase: (oe2 == null ? void 0 : oe2.id) ?? null } } });
    },
    useShowcase(Z2) {
      const re2 = () => {
        const oe2 = S2.props.layoutProps.showcase, de2 = S2.children.find((N2) => N2.id === oe2);
        if (!de2)
          return Z2({ participantId: null, type: null });
        const { sourceProps: A2 } = de2.props;
        return Z2({ participantId: A2.id, type: A2.type });
      };
      return re2(), CoreContext.onInternal("NodeChanged", (oe2) => {
        oe2.nodeId === S2.id && re2();
      });
    },
    getRTMPNode(Z2) {
      return S2.children.find((re2) => {
        var oe2, de2;
        return ((oe2 = re2.props.sourceProps) == null ? void 0 : oe2.id) === Z2 && ((de2 = re2.props.sourceProps) == null ? void 0 : de2.type) === "rtmp";
      });
    },
    useRTMPNodes(Z2) {
      let re2 = [];
      const oe2 = () => {
        const N2 = S2.children.filter((D2) => {
          var W2, ee2;
          return ((ee2 = (W2 = D2.props) == null ? void 0 : W2.sourceProps) == null ? void 0 : ee2.type) === "rtmp";
        });
        return re2 = N2.map((D2) => D2.id), Z2(N2);
      };
      oe2();
      const de2 = CoreContext.onInternal("NodeAdded", (N2) => {
        var W2, ee2;
        const D2 = a92.scene.get(N2.nodeId);
        ((ee2 = (W2 = D2 == null ? void 0 : D2.props) == null ? void 0 : W2.sourceProps) == null ? void 0 : ee2.type) === "rtmp" && oe2();
      }), A2 = CoreContext.onInternal("NodeRemoved", (N2) => {
        re2.indexOf(N2.nodeId) !== -1 && oe2();
      });
      return () => {
        de2(), A2();
      };
    },
    async addRTMPSource(Z2, re2 = { isMuted: true, isHidden: false, volume: 0 }) {
      const oe2 = "rtmp";
      if (addingCache[oe2].has(Z2))
        return;
      const { isMuted: de2 = false, isHidden: A2 = false, volume: N2 = 1 } = re2;
      if (S2.children.find((ee2) => {
        var ae2, ye2;
        return ((ae2 = ee2.props.sourceProps) == null ? void 0 : ae2.id) === Z2 && ((ye2 = ee2.props.sourceProps) == null ? void 0 : ye2.type) === oe2;
      }))
        return;
      addingCache[oe2].add(Z2), S2.children[0];
      let W2 = S2.children.length;
      await CoreContext.Command.createNode({ props: { name: "RTMP", sourceType: "RTMP", sourceProps: { type: oe2, id: Z2 }, volume: N2, isMuted: de2, isHidden: A2 }, parentId: S2.id, index: W2 }).finally(() => {
        addingCache[oe2].delete(Z2);
      });
    },
    removeRTMPSource(Z2) {
      const re2 = "rtmp";
      S2.children.filter((oe2) => {
        var de2, A2;
        return ((de2 = oe2.props.sourceProps) == null ? void 0 : de2.id) === Z2 && ((A2 = oe2.props.sourceProps) == null ? void 0 : A2.type) === re2 && oe2.props.sourceType === "RTMP";
      }).forEach((oe2) => {
        CoreContext.Command.deleteNode({ nodeId: oe2.id });
      });
    },
    async addParticipantTrack(Z2, re2 = { isMuted: true, isHidden: false, volume: 0 }, oe2 = "camera") {
      if (addingCache[oe2].has(Z2))
        return;
      const { isMuted: de2 = false, isHidden: A2 = false, volume: N2 = 1 } = re2;
      if (S2.children.find((ae2) => {
        var ye2, he2;
        return ((ye2 = ae2.props.sourceProps) == null ? void 0 : ye2.id) === Z2 && ((he2 = ae2.props.sourceProps) == null ? void 0 : he2.type) === oe2;
      }))
        return;
      addingCache[oe2].add(Z2);
      const W2 = S2.children[0];
      let ee2 = S2.children.length;
      oe2 === "screen" && (W2 == null ? void 0 : W2.props.sourceProps.type) !== "screen" && (ee2 = 0), await CoreContext.Command.createNode({ props: { name: "Participant", sourceType: "RoomParticipant", sourceProps: { type: oe2, id: Z2 }, volume: N2, isMuted: de2, isHidden: A2 }, parentId: S2.id, index: ee2 }).finally(() => {
        addingCache[oe2].delete(Z2);
      });
    },
    removeParticipantTrack(Z2, re2 = "camera") {
      S2.children.filter((oe2) => {
        var de2, A2;
        return ((de2 = oe2.props.sourceProps) == null ? void 0 : de2.id) === Z2 && ((A2 = oe2.props.sourceProps) == null ? void 0 : A2.type) === re2 && oe2.props.sourceType === "RoomParticipant";
      }).forEach((oe2) => {
        CoreContext.Command.deleteNode({ nodeId: oe2.id });
      });
    },
    async addParticipant(Z2, re2 = {}, oe2 = "camera") {
      if (addingCache[oe2].has(Z2))
        return;
      const { isMuted: de2 = false, isHidden: A2 = false, volume: N2 = 1 } = re2;
      if (S2.children.find((ae2) => {
        var ye2, he2;
        return ((ye2 = ae2.props.sourceProps) == null ? void 0 : ye2.id) === Z2 && ((he2 = ae2.props.sourceProps) == null ? void 0 : he2.type) === oe2;
      }))
        return;
      addingCache[oe2].add(Z2);
      const W2 = S2.children[0];
      let ee2 = S2.children.length;
      oe2 === "screen" && (W2 == null ? void 0 : W2.props.sourceProps.type) !== "screen" && (ee2 = 0), await CoreContext.Command.createNode({ props: { name: "Participant", sourceType: "RoomParticipant", sourceProps: { type: oe2, id: Z2 }, volume: N2, isMuted: de2, isHidden: A2 }, parentId: S2.id, index: ee2 }).finally(() => {
        addingCache[oe2].delete(Z2);
      });
    },
    removeParticipant(Z2, re2 = "camera") {
      S2.children.filter((oe2) => {
        var de2, A2;
        return ((de2 = oe2.props.sourceProps) == null ? void 0 : de2.id) === Z2 && ((A2 = oe2.props.sourceProps) == null ? void 0 : A2.type) === re2 && oe2.props.sourceType === "RoomParticipant";
      }).forEach((oe2) => {
        CoreContext.Command.deleteNode({ nodeId: oe2.id });
      });
    },
    getParticipantNode(Z2, re2 = "camera") {
      return S2.children.find((oe2) => {
        var de2, A2;
        return ((de2 = oe2.props.sourceProps) == null ? void 0 : de2.id) === Z2 && ((A2 = oe2.props.sourceProps) == null ? void 0 : A2.type) === re2;
      });
    },
    getParticipantState(Z2, re2 = "camera") {
      var oe2;
      return (oe2 = q2.getParticipantNode(Z2, re2)) == null ? void 0 : oe2.props;
    },
    useParticipantState(Z2, re2, oe2 = "camera") {
      let de2 = q2.getParticipantNode(Z2, oe2);
      const A2 = () => {
        re2(de2 == null ? void 0 : de2.props);
      }, N2 = CoreContext.onInternal("NodeChanged", (W2) => {
        if (W2.nodeId !== S2.id)
          return;
        const ee2 = de2;
        de2 = q2.getParticipantNode(Z2, oe2), ee2 !== de2 && A2();
      }), D2 = CoreContext.onInternal("NodeChanged", (W2) => {
        !de2 || W2.nodeId !== de2.id || A2();
      });
      return A2(), () => {
        N2(), D2();
      };
    },
    setParticipantVolume(Z2, re2) {
      const oe2 = q2.getParticipantNode(Z2);
      oe2 && CoreContext.Command.updateNode({ nodeId: oe2.id, props: { volume: re2 } });
    },
    setParticipantMuted(Z2, re2) {
      const oe2 = q2.getParticipantNode(Z2);
      oe2 && CoreContext.Command.updateNode({ nodeId: oe2.id, props: { isMuted: re2 } });
    },
    setParticipantHidden(Z2, re2) {
      const oe2 = q2.getParticipantNode(Z2);
      oe2 && CoreContext.Command.updateNode({ nodeId: oe2.id, props: { isHidden: re2 } });
    },
    pruneParticipants() {
      const Z2 = getProjectRoom(u2);
      Z2 && S2.children.filter((re2) => {
        var W2, ee2, ae2;
        if (re2.props.sourceType !== "RoomParticipant")
          return false;
        const oe2 = (W2 = re2.props.sourceProps) == null ? void 0 : W2.type, de2 = Z2.getParticipant((ee2 = re2.props.sourceProps) == null ? void 0 : ee2.id), A2 = Z2.getTrack((ae2 = re2.props.sourceProps) == null ? void 0 : ae2.id);
        return !de2 && !A2 ? true : oe2 === "camera" ? false : !de2.trackIds.map((ye2) => Z2.getTrack(ye2)).filter(Boolean).some((ye2) => (ye2.type === Track.Source.Camera || ye2.type === Track.Source.Microphone ? "camera" : "screen") === oe2);
      }).forEach((re2) => {
        CoreContext.Command.deleteNode({ nodeId: re2.id });
      });
    },
    getProp(Z2) {
      return getProject(a92.id).props[Z2];
    },
    setProp(Z2, re2) {
      return l2.updateProjectProps({ projectId: u2, props: { [Z2]: re2 } });
    },
    useProp(Z2, re2) {
      return CoreContext.on("ProjectChanged", (oe2) => {
        u2 === oe2.project.id && re2(oe2.project.props[Z2]);
      });
    },
    createSource(Z2) {
      return CoreContext.Command.createSource(Z2);
    },
    deleteSource(Z2) {
      const re2 = "rtmp";
      return S2.children.filter((oe2) => {
        var de2, A2;
        return ((de2 = oe2.props.sourceProps) == null ? void 0 : de2.id) === Z2.sourceId && ((A2 = oe2.props.sourceProps) == null ? void 0 : A2.type) === re2 && oe2.props.sourceType === "RTMP";
      }).forEach((oe2) => {
        CoreContext.Command.deleteNode({ nodeId: oe2.id });
      }), CoreContext.Command.deleteSource(Z2);
    }
  };
  return (async () => {
    await $(), await J2(), await V2();
  })(), q2;
}, create = async (a92 = {}, u2 = {}, c) => CoreContext.Command.createProject({ settings: a92, props: u2, size: c }), createCompositor = async (a92, u2, c) => {
  const { layout: l2, layoutProps: v2 = {} } = c, S2 = await CoreContext.compositor.createProject({ props: { name: "Root", type: "sceneless-project", sourceType: "Element", layout: "Layered", size: u2, isRoot: true, tagName: "div", version: "beta", fields: { style: { background: "black" } } } }, a92), g2 = S2.getRoot(), E2 = await Promise.all([S2.insert({ name: "Background", id: "bg", layout: "Layered" }, g2.id), S2.insert({ id: "content", name: "Content", layout: l2, layoutProps: v2 }, g2.id), S2.insert({ id: "foreground", name: "Overlays", layout: "Layered" }, g2.id)]);
  await S2.reorder(g2.id, E2);
  const _ = g2.children.find((M2) => M2.props.id === "foreground"), k = ForegroundLayers.map((M2) => S2.insert(M2, _.id)), L2 = await Promise.all(k);
  return await S2.reorder(_.id, L2), S2;
}, scenelessProject = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({ __proto__: null, commands, create, createCompositor }, Symbol.toStringTag, { value: "Module" })), useActiveProjectRoom = (a92) => {
  const u2 = getProject(CoreContext.state.activeProjectId);
  return a92(u2 ? getRoom(u2.roomId) : null), CoreContext.on("RoomJoined", () => {
    const c = getProject(CoreContext.state.activeProjectId);
    a92(c ? getRoom(c.roomId) : null);
  });
}, callbacks = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({ __proto__: null, useActiveProjectRoom }, Symbol.toStringTag, { value: "Module" })), index$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({ __proto__: null, Callback: callbacks, React: react, Room: webrtc, ScenelessProject: scenelessProject }, Symbol.toStringTag, { value: "Module" })), runFilters = (a92, u2 = []) => u2.reduce((c, l2) => l2(c), a92), createDefault = () => ({ root: document.createElement("div") }), init$2 = (a92 = {}, u2, c) => {
  const l2 = {}, v2 = a92.defaultTransforms || {}, S2 = (G2) => {
    asArray(G2).forEach((H2) => {
      l2[H2.name] = H2;
    });
  }, g2 = {}, E2 = {}, _ = {}, k = (G2) => _[G2] || [], L2 = (G2) => E2[G2] || [], M2 = (G2) => g2[G2], $ = (G2) => l2[G2];
  u2.on("SourceChanged", (G2) => {
    L2(G2.id).forEach((B2) => {
      const Y2 = u2.getNode(B2.nodeId);
      B2._onUpdateHandlers.forEach((ne2) => ne2(Y2.props || {}));
    });
  }), u2.on("AvailableSourcesChanged", ({ type: G2, sources: H2 }) => {
    k(G2).forEach((Y2) => {
      J2(Y2.nodeId);
    });
  });
  const J2 = (G2) => {
    var A2, N2, D2;
    const H2 = M2(G2);
    if (!H2)
      return;
    const B2 = $(H2.transformName);
    if (!B2.useSource)
      return;
    const Y2 = u2.getNode(G2), ne2 = H2.proxySource ? H2.proxySource : H2.sourceType, Z2 = c.getSources(ne2), re2 = B2.useSource(Z2, Y2.props), oe2 = H2.sourceValue, de2 = re2 == null ? void 0 : re2.value;
    H2.source !== re2 && (E2[(A2 = H2.source) == null ? void 0 : A2.id] && (E2[(N2 = H2.source) == null ? void 0 : N2.id] = E2[(D2 = H2.source) == null ? void 0 : D2.id].filter((W2) => W2.nodeId !== G2)), E2[re2 == null ? void 0 : re2.id] = [...E2[re2 == null ? void 0 : re2.id] || [], H2]), H2.source = re2, H2.sourceValue = de2, Object.is(oe2, de2) || H2._onNewSourceHandlers.forEach((W2) => W2(re2));
  }, V2 = (G2) => {
    const H2 = q2(G2), Y2 = runFilters(G2, []);
    return J2(G2.id), H2 == null || H2._onUpdateHandlers.forEach((ne2) => ne2(G2.props || {})), { ...Y2, children: Y2.children.map(V2) };
  }, q2 = (G2) => {
    if (g2[G2.id])
      return g2[G2.id];
    const { props: H2 = {} } = G2, { sourceType: B2, proxySource: Y2 } = H2;
    if (!B2)
      return null;
    let ne2 = v2[B2], Z2;
    if (ne2 ? Z2 = l2[ne2] : Z2 = Object.values(l2).find((ae2) => ae2.sourceType === B2), !Z2)
      throw new Error("Could not find matching transform for sourceType: " + B2);
    const re2 = [], oe2 = [], de2 = [], A2 = [], D2 = { ...(Z2.create || createDefault)({ onEvent: (ae2, ye2, ...he2) => {
      const le2 = u2.on(ae2, ye2, ...he2);
      return A2.push(le2), le2;
    }, onNewSource: (ae2) => re2.push(ae2), onUpdate: (ae2) => oe2.push(ae2), onRemove: (ae2) => de2.push(ae2) }, G2.props), proxySource: Y2, sourceType: B2, nodeId: G2.id, transformName: Z2.name, _onNewSourceHandlers: re2, _onUpdateHandlers: oe2, _disposables: A2 };
    g2[G2.id] = D2;
    const W2 = Y2 || B2;
    _[W2] = [..._[W2] || [], D2], Z2.useSource && J2(G2.id);
    const ee2 = [
      // Dispose when node is removed
      u2.on("NodeRemoved", ({ nodeId: ae2 }) => {
        if (ae2 === G2.id) {
          const ye2 = u2.getNode(ae2), { sourceType: he2 = "Element" } = ye2.props;
          ee2.forEach((we2) => we2 == null ? void 0 : we2()), A2.forEach((we2) => we2 == null ? void 0 : we2()), de2.forEach((we2) => we2 == null ? void 0 : we2()), delete g2[ye2.id];
          const le2 = Y2 || he2;
          _[le2] = _[le2].filter((we2) => we2 !== g2[ye2.id]);
        }
      })
    ];
    return D2;
  };
  return { transforms: l2, nodeElementIndex: g2, elementSourceTypeIndex: _, registerTransform: S2, getElementsBySourceType: k, getElementByNodeId: M2, getTransformByName: $, updateSourceForNode: J2, renderTree: V2, getElement: q2 };
}, TRANSITION_DURATION = 300, findLayoutUp = (a92, u2, c = 0) => {
  const v2 = a92.parentElement;
  return v2 instanceof Layout && (c = 0, !u2 || u2(v2)) ? v2 : v2 ? c > 4 ? null : findLayoutUp(v2, u2, c + 1) : null;
}, TRANSITION_FIELDS = "opacity, transform, width, height, left, right, top, bottom, inset", layoutIndex = {}, parentIdIndex = {}, childIndex = {};
let rootLayout, _cid = 1;
const ignoredAttributes = ["style", "id", "className"];
let tickOps = {};
const tick = () => {
  if (nextTick = null, window.__dragging) {
    nextTick = nextTick || requestAnimationFrame(tick);
    return;
  }
  const a92 = /* @__PURE__ */ new Set(), u2 = /* @__PURE__ */ new Set(), c = /* @__PURE__ */ new Set();
  Object.entries(tickOps).forEach(([l2, v2]) => {
    v2.forEach(([S2, g2, E2]) => {
      switch (S2) {
        case "childInserted": {
          u2.has(E2) ? u2.delete(E2) : a92.add(E2);
          break;
        }
        case "childRemoved": {
          a92.has(E2) ? a92.delete(E2) : u2.add(E2);
          break;
        }
        case "childRemoveFinished": {
          c.add(E2);
          break;
        }
      }
    });
  });
  try {
    u2.forEach((v2) => {
      var E2, _, k;
      const S2 = childIndex[v2], g2 = Array.from(((E2 = S2.parentEl) == null ? void 0 : E2.children) || []);
      S2.nextSiblingEl && g2.includes(S2.nextSiblingEl) ? (_ = S2.parentEl) == null || _.insertBefore(S2, S2.nextSiblingEl) : (S2.nextSiblingEl = null, (k = S2.parentEl) == null || k.append(S2)), S2.runRemove();
    }), c.forEach((v2) => {
      const S2 = childIndex[v2];
      if (S2.removed) {
        S2.previousSiblingEl && (S2.previousSiblingEl.nextSiblingEl = S2.nextSiblingEl), S2.nextSiblingEl && (S2.nextSiblingEl.previousSiblingEl = S2.previousSiblingEl);
        return;
      }
    });
    const l2 = window.__scale;
    Object.entries(tickOps).forEach(([v2, S2]) => {
      const g2 = layoutIndex[v2], E2 = g2.getBoundingClientRect(), _ = { x: E2.width / l2, y: E2.height / l2 };
      g2.updatePositions({ size: _, inserted: a92, removed: u2 });
    });
  } catch (l2) {
    log$1.warn("Failed to run Layout ops", l2);
  }
  tickOps = {};
};
let nextTick;
const queueOp = (a92) => {
  const [u2, c] = a92, l2 = tickOps[c] || [];
  tickOps[c] = [...l2, a92], nextTick = nextTick || requestAnimationFrame(tick);
};
class Layout extends HTMLElement {
  constructor() {
    super();
    ht(this, "parentEl");
    ht(this, "slotEl");
    ht(this, "parentLayout");
    ht(this, "nodes");
    ht(this, "mutationObserver");
    ht(this, "latestSize");
    ht(this, "isFirst", true);
    ht(this, "isUpdating", false);
    ht(this, "cid");
    this.cid = ++_cid;
  }
  log(...c) {
    var l2;
    log$1.debug(...c, { id: this.dataset.id, parent: (l2 = this.parentLayout) == null ? void 0 : l2.dataset.id }, this);
  }
  connectedCallback() {
    var c;
    this.parentEl = this.parentElement, this.parentLayout = findLayoutUp(this), this.slotEl = this.closest("[data-layout-child]"), Array.from(this.children).forEach((l2) => this.initializeChild(l2)), rootLayout || (rootLayout = this), layoutIndex[this.dataset.id] = this, parentIdIndex[this.dataset.id] = (c = this.parentLayout) == null ? void 0 : c.id, Object.assign(this.style, { width: "100%", height: "100%", position: "absolute", top: "0px", left: "0px", pointerEvents: "none", boxSizing: "border-box" }), this.mutationObserver && this.mutationObserver.disconnect(), this.mutationObserver = new MutationObserver((l2) => {
      this.isConnected && l2.forEach((v2) => {
        v2.type === "attributes" && !ignoredAttributes.includes(v2.attributeName) ? queueOp(["attributesChanged", this.dataset.id]) : v2.type === "childList" && (v2.addedNodes.forEach((S2) => {
          const g2 = childIndex[S2.dataset.id];
          S2.removed || (g2 ? g2 !== S2 && (this.initializeChild(S2), S2.setAttribute("style", g2.getAttribute("style")), S2.data = g2.data) : this.initializeChild(S2), queueOp(["childInserted", this.dataset.id, S2.dataset.id]));
        }), v2.removedNodes.forEach((S2) => {
          S2.removed || queueOp(["childRemoved", this.dataset.id, S2.dataset.id]);
        }));
      });
    }), this.mutationObserver.observe(this, { childList: true, attributes: true }), this.latestSize || queueOp(["attributesChanged", this.dataset.id]);
  }
  disconnectedCallback() {
  }
  adoptedCallback() {
  }
  updatePositions(c) {
    if (this.isUpdating)
      return;
    this.isUpdating = true;
    const { size: l2, inserted: v2 = /* @__PURE__ */ new Set(), removed: S2 = /* @__PURE__ */ new Set() } = c;
    this.nodes = Array.from(this.children || []).filter((k) => !k.removed).map((k, L2) => {
      const M2 = getElementAttributes(k);
      return {
        // TODO: Does this work well enough? Think through keying
        id: k.dataset.id,
        props: M2,
        children: []
      };
    });
    const g2 = JSON.parse(this.getAttribute("props") || "{}");
    this.latestSize = l2;
    const E2 = { id: this.dataset.id, props: g2, children: this.nodes, size: l2 };
    let _ = layoutChildren(E2);
    Promise.all(Object.entries(_).map(async ([k, L2]) => {
      var ne2, Z2, re2, oe2;
      let M2 = childIndex[k] || this.querySelector(`[data-layout-child][data-id="${k}"]`);
      const $ = { ...M2.data, ...L2 };
      M2.data = $;
      const { size: J2, position: V2, zIndex: q2 = 1, opacity: G2 = 1, borderRadius: H2 = 0, entryTransition: B2 = {}, exitTransition: Y2 = {} } = $;
      if (M2) {
        if (M2.removed)
          return;
        Y2 && (M2.data.exitTransition = Y2), B2 && (M2.data.entryTransition = B2), M2.data.size = J2, M2.data.position = V2;
        const de2 = window.__scale, A2 = this.getBoundingClientRect(), N2 = A2.width / de2, D2 = N2 - sizeToNum(V2.x, N2) - sizeToNum(J2.x, N2), W2 = A2.height / de2, ee2 = W2 - sizeToNum(V2.y, W2) - sizeToNum(J2.y, W2);
        Object.assign(M2.style, { position: "absolute", transformOrigin: "50% 50%", transitionDuration: "0ms", transitionDelay: "0ms", transform: "translate3d(0, 0, 0) scaleX(1) scaleY(1)", visibility: "visible", boxSizing: "border-box", overflow: "hidden", borderRadius: H2 + "px", width: "auto", height: "auto" });
        let ae2 = "0ms", ye2 = this.isFirst ? asDuration(0) : asDuration(TRANSITION_DURATION);
        if (v2.has(k))
          Object.assign(M2.style, { transitionProperty: TRANSITION_FIELDS, transitionDuration: "0ms", transitionTimingFunction: B2.timingFn ?? "ease", transform: `translate3d(calc(${asSize(((ne2 = B2.offset) == null ? void 0 : ne2.x) ?? 0)}), calc(${asSize(((Z2 = B2.offset) == null ? void 0 : Z2.y) ?? 0)}), 0) scaleX(${((re2 = B2.scale) == null ? void 0 : re2.x) ?? 1}) scaleY(${((oe2 = B2.scale) == null ? void 0 : oe2.y) ?? 1})`, opacity: B2.opacity ?? G2, left: asSize(V2.x) || 0, right: asSize(D2) || 0, top: asSize(V2.y) || 0, bottom: asSize(ee2) || 0 }), ae2 = asDuration(B2.delay ?? 0);
        else if (M2.data.rootOffset) {
          const we2 = rootLayout.getBoundingClientRect(), Be2 = this.getBoundingClientRect(), Ne2 = { x: Be2.x / de2 - we2.x / de2, y: Be2.y / de2 - we2.y / de2 };
          Ne2.x + Be2.width / de2;
          M2.data.rootOffset.x + Number(M2.data.size.x);
          Ne2.y + Be2.height / de2;
          M2.data.rootOffset.y + Number(M2.data.size.y);
          M2.data.rootOffset.x - Ne2.x, M2.data.rootOffset.y - Ne2.y;
        }
        M2.addEventListener("transitionstart", () => {
          M2.style.zIndex = String(q2 + 1);
        }), await new Promise((we2) => window.setTimeout(we2)), Object.assign(M2.style, { transitionProperty: TRANSITION_FIELDS, transitionDuration: ye2, transitionDelay: ae2, transform: "translate3d(0, 0, 0) scaleX(1) scaleY(1)", opacity: G2, left: asSize(V2.x) || 0, top: asSize(V2.y) || 0, width: N2 ? "auto" : J2.x, right: N2 ? asSize(D2) || 0 : "auto", height: W2 ? "auto" : J2.y, bottom: W2 ? asSize(ee2) || 0 : "auto", zIndex: q2 });
        const le2 = () => {
          const we2 = rootLayout.getBoundingClientRect(), Be2 = M2.getBoundingClientRect();
          M2.data.rootOffset = { x: Be2.x / de2 - we2.x / de2, y: Be2.y / de2 - we2.y / de2 };
        };
        le2(), M2.addEventListener("transitionend", () => {
          M2.style.zIndex = String(q2), le2();
        });
      }
    })).then(() => {
      this.isUpdating = false;
    }), this.isFirst = false, Array.from(this.querySelectorAll("ls-layout")).forEach((k) => {
      if (!_[k.dataset.id])
        return;
      const L2 = _[k.dataset.id].size;
      k.updatePositions({ size: { x: sizeToNum(L2.x, l2.x), y: sizeToNum(L2.y, l2.y) } });
    });
  }
  initializeChild(c) {
    var v2;
    if (!((v2 = c.dataset) != null && v2.id))
      return log$1.warn("Layout: Child requires `data-id` at the time it is added to a Layout");
    c._remove = c.remove, c.remove = () => {
      this.removeChild(c);
    }, c.mutationObserver || (c.mutationObserver = new MutationObserver((S2) => {
      S2.forEach((g2) => {
        if (g2.type === "attributes") {
          if (g2.attributeName === "style")
            return;
          queueOp(["childAttributesChanged", this.dataset.id, c.dataset.id]);
        }
      });
    }), c.mutationObserver.observe(c, { childList: true, attributes: true }));
    const l2 = { entryTransition: { delay: 0, opacity: 0, scale: { x: 1, y: 1 }, offset: { x: 0, y: 0 } }, exitTransition: { delay: 0, opacity: 0, scale: { x: 1, y: 1 }, offset: { x: 0, y: 0 } }, position: { x: 0, y: 0 }, size: { x: 0, y: 0 }, opacity: 0, fit: "cover", borderRadius: 0, zIndex: 1 };
    c.data = l2, c.parentEl = c.parentElement, c.nextSiblingEl = c.nextSibling, c.previousSiblingEl = c.previousSibling, c.previousSiblingEl && (c.previousSiblingEl.nextSiblingEl = c), c.toggleAttribute("data-layout-child", true), childIndex[c.dataset.id] = c, c.runRemove = async () => {
      var g2, E2, _, k;
      c.removed = true;
      const S2 = TRANSITION_DURATION;
      return await new Promise((L2) => window.setTimeout(L2)), Object.assign(c.style, { zIndex: 0, transitionDelay: asDuration(0), transitionDuration: asDuration(S2), transitionProperty: TRANSITION_FIELDS, transitionTimingFunction: l2.exitTransition.timingFn ?? "ease", transform: `translate3d(calc(${asSize(((g2 = l2.exitTransition.offset) == null ? void 0 : g2.x) ?? 0)}), calc( ${asSize(((E2 = l2.exitTransition.offset) == null ? void 0 : E2.y) ?? 0)}), 0) scaleX(${((_ = l2.exitTransition.scale) == null ? void 0 : _.x) ?? 1}) scaleY(${((k = l2.exitTransition.scale) == null ? void 0 : k.y) ?? 1})`, opacity: l2.exitTransition.opacity ?? 0 }), c.removed = true, c.transition = new Promise((L2) => {
        const M2 = () => {
          c.transition = null, c._remove(), queueOp(["childRemoveFinished", this.dataset.id, c.dataset.id]), clearTimeout($), L2();
        }, $ = window.setTimeout(M2, parseInt(String(S2)) + 600);
        c.addEventListener("transitionend", M2, { once: true });
      }), c.transition;
    };
  }
}
const ensureLayoutContainer = (a92) => {
  const u2 = document.getElementById("__ls-layout-container");
  if (u2)
    return Object.assign(u2.style, { width: a92.x + "px", height: a92.y + "px" }), u2;
  const c = document.createElement("div");
  return c.id = "__ls-layout-container", Object.assign(c.style, {
    position: "fixed",
    // pointerEvents: 'none',
    visibility: "hidden",
    top: "0px",
    left: "0px",
    zIndex: -1,
    width: a92.x + "px",
    height: a92.y + "px"
  }), document.body.append(c), c;
}, layoutChildren = ({ id: a92, props: u2 = {}, children: c, size: l2 }) => {
  const v2 = { props: u2, children: c, size: l2 }, S2 = htmlLayouts[u2.layout] ? htmlLayouts[u2.layout].layout(v2) : htmlLayouts.Free.layout(v2);
  if (!(S2 instanceof HTMLElement))
    return S2;
  const g2 = Array.from(S2.querySelectorAll("[data-node-id]")), E2 = document.createElement("div");
  E2.style.height = S2.style.height = l2.y + "px", E2.style.width = S2.style.width = l2.x + "px", E2.style.position = "absolute", E2.style.top = "0px", E2.style.left = "0px", E2.style.boxSizing = "border-box", E2.setAttribute("data-wrapper-id", a92), E2.append(S2);
  const _ = ensureLayoutContainer(l2), k = _.querySelector(`[data-wrapper-id="${a92}"]`);
  k ? k.replaceWith(E2) : _.append(E2);
  const L2 = S2.getBoundingClientRect(), M2 = {};
  return g2.forEach(($) => {
    var H2, B2, Y2, ne2;
    const J2 = $.dataset.nodeId;
    if (!J2)
      return;
    const V2 = Number($.dataset.opacity ?? ($.style.opacity || 1)), q2 = $.getBoundingClientRect();
    let G2 = { position: { x: q2.x - L2.x + "px", y: q2.y - L2.y + "px" }, size: { x: q2.width + "px", y: q2.height + "px" }, opacity: V2, zIndex: (H2 = $.data) == null ? void 0 : H2.zIndex, entryTransition: ((B2 = $.data) == null ? void 0 : B2.entryTransition) ?? {}, exitTransition: ((Y2 = $.data) == null ? void 0 : Y2.exitTransition) ?? {}, borderRadius: ((ne2 = $.data) == null ? void 0 : ne2.borderRadius) ?? 0 };
    `${u2.showcase}-x` === J2 && (G2.position = { x: L2.x + "px", y: L2.y + "px" }, G2.size = { x: L2.width + "px", y: L2.height + "px" }, G2.zIndex = 10), M2[J2] = G2, positionIndex[$.dataset.nodeId] = G2;
  }), M2;
}, positionIndex = {}, htmlLayouts = {}, registerLayout = (a92) => {
  asArray(a92).forEach((u2) => {
    htmlLayouts[u2.name] = u2;
  });
}, sourceTypes = {}, init$1 = (a92 = {}, u2) => {
  const c = {}, l2 = {}, v2 = (_) => {
    u2.triggerEvent("SourceChanged", _);
  }, S2 = (_) => {
    u2.triggerEvent("AvailableSourcesChanged", { type: _, sources: l2[_] });
  }, E2 = {
    sourceIndex: c,
    sourceTypeIndex: l2,
    registerSource: (_) => {
      asArray(_).forEach((k) => {
        var M2;
        const L2 = ($) => {
          const J2 = c[$];
          if (J2 && J2.type !== k.type)
            throw new Error(`Attempted to modify source of type ${J2.type} from ${k.type}`);
        };
        (M2 = k.init) == null || M2.call(k, { getSource: ($) => E2.getSource($), removeSource: ($) => (L2($), E2.removeSource($)), setSourceActive: ($, J2) => (L2($), E2.setSourceActive($, J2)), updateSource: ($, J2) => (L2($), E2.updateSource($, J2)), modifySourceValue($, J2) {
          return L2($), E2.modifySourceValue($, J2);
        }, addSource: ($) => E2.addSource(k.type, $) }), sourceTypes[k.type] = k;
      });
    },
    getSource: (_) => c[_],
    getSources: (_) => l2[_] || [],
    useSource: (_, k) => (k(c[_]), u2.on("SourceChanged", (L2) => {
      L2.id === _ && k(L2);
    })),
    useSources: (_, k) => (k(l2[_] || []), u2.on("AvailableSourcesChanged", (L2) => {
      L2.type === _ && k(L2.sources);
    })),
    addSource: (_, k) => {
      if (!k.id)
        throw new Error('Cannot add source without field "id"');
      if (c[k.id])
        return;
      if (!k.value)
        throw new Error('Cannot add source with an empty field "value"');
      if (!sourceTypes[_])
        throw new Error("Could not find definition for source type: " + _);
      const { id: M2, value: $ = null, props: J2 = {}, isActive: V2 = true } = k;
      c[M2] = { id: M2, type: _, props: J2, value: $, isActive: V2 }, l2[_] = [...l2[_] || [], c[M2]], v2(c[M2]), S2(_);
    },
    removeSource: (_) => {
      const k = c[_];
      k && (delete c[_], l2[k.type] = l2[k.type].filter((L2) => L2.id !== _), S2(k.type));
    },
    updateSource: (_, k) => {
      const L2 = c[_];
      L2.props = { ...L2.props, ...k }, v2(L2), S2(L2.type);
    },
    /**
    * Imperatively update a Source's value.
    * Triggers an event to inform elements to re-render.
    */
    modifySourceValue: async (_, k) => {
      const L2 = c[_];
      await k(L2.value), v2(L2);
    },
    setSourceActive: (_, k = true) => {
      const L2 = c[_];
      L2.isActive = k, S2(L2.type);
    }
  };
  return E2;
}, { forEachDown, insertAt, toDataNode, pull, replaceItem } = Logic;
let compositor;
const start = (a92) => {
  if (compositor)
    return compositor;
  const { dbAdapter: u2, transformSettings: c = {}, sourceSettings: l2 = {} } = a92, v2 = {}, S2 = {};
  try {
    customElements.define("ls-layout", Layout);
  } catch (H2) {
    log$1.warn(H2);
  }
  const g2 = {}, E2 = {}, _ = {};
  let k = 0;
  const L2 = /* @__PURE__ */ new Map(), M2 = (H2, B2) => {
    if (typeof H2 != "function")
      return;
    const Y2 = ++k;
    return L2.set(Y2, H2), H2.nodeId = B2, () => {
      L2.delete(Y2);
    };
  }, $ = (H2, B2, Y2) => M2((ne2, Z2) => {
    ne2 === H2 && B2(Z2);
  }, Y2), J2 = (H2, B2) => {
    L2.forEach((Y2) => {
      Y2.nodeId ? B2 != null && B2.nodeId && (B2 == null ? void 0 : B2.nodeId) === Y2.nodeId && Y2(H2, B2) : Y2(H2, B2);
    });
  }, V2 = { projects: S2, subscribe: M2, on: $, triggerEvent: J2, getProject: (H2) => S2[H2], getNodeProject: (H2) => S2[g2[H2]], getNodeParent: (H2) => _[E2[H2]], getNode: (H2) => _[H2], createProject: async (H2 = {}, B2) => {
    const { id: Y2, props: ne2 = {}, children: Z2 = [] } = H2, re2 = await u2(B2, { get: () => null, getParent: () => null }).insert(ne2), oe2 = { id: re2, props: ne2, children: Z2 };
    return forEachDown(H2, (de2) => {
    }), _[re2] = oe2, compositor.loadProject(oe2, B2);
  }, loadProject: (H2, B2) => {
    if (!H2)
      return;
    if (B2 = B2 || H2.id, S2[B2])
      return S2[B2];
    forEachDown(H2, (re2, oe2) => {
      _[re2.id] = re2, E2[re2.id] = oe2 == null ? void 0 : oe2.id, g2[re2.id] = B2;
    });
    const Y2 = { insert: async (re2, oe2, de2 = 0) => {
      if (re2.id && _[re2.id])
        return _[re2.id];
      if (re2.children || (re2.children = []), re2.props || (re2.props = {}), oe2) {
        const A2 = _[oe2];
        if (!A2)
          throw "Parent node not found with ID";
        A2.children = insertAt(de2, re2, A2.children || []), E2[re2.id] = oe2;
      }
      return _[re2.id] = re2, g2[re2.id] = B2, re2.id;
    }, update: async (re2, oe2 = {}, de2) => {
      const A2 = _[re2];
      if (de2) {
        const N2 = de2.map((D2) => {
          const W2 = _[D2];
          return E2[W2.id] = re2, W2;
        });
        A2.children = N2;
      }
      A2.props = { ...A2.props, ...oe2 };
    }, remove: async (re2) => {
      const oe2 = _[E2[re2]];
      oe2 && (oe2.children = oe2.children.filter((A2) => A2.id !== re2));
      const de2 = _[re2];
      forEachDown(de2, (A2) => {
        _[A2.id] && (_[A2.id]._deleted = true), J2("NodeRemoved", { projectId: ne2.id, nodeId: A2.id });
      });
    } }, ne2 = { id: B2, getRoot: () => H2, get(re2) {
      return _[re2];
    }, getParent(re2) {
      return _[E2[re2]];
    }, renderTree() {
      return G2.renderTree(H2);
    }, local: Y2, insert: async (re2 = {}, oe2, de2 = 0) => {
      const N2 = { id: await Z2.insert(re2, oe2, de2), props: re2, children: [] };
      return Y2.insert(N2, oe2, de2);
    }, update: async (re2, oe2) => (await Y2.update(re2, oe2), Z2.update(re2, oe2)), remove: async (re2) => {
      await Y2.remove(re2);
      const oe2 = _[E2[re2]], de2 = oe2.children.filter((A2) => A2.id !== re2);
      return Z2.batch([["delete", { id: re2 }], ["update", { ...oe2, children: de2 }]]);
    }, reorder: async (re2, oe2) => {
      const de2 = _[re2];
      return de2.children = oe2.map((A2) => de2.children.find((N2) => N2.id === A2)), Z2.batch([["update", de2]]);
    }, move: async (re2, oe2, de2 = 0) => {
      const A2 = _[re2], N2 = _[E2[re2]], D2 = _[oe2];
      N2.children = pull(N2.children, A2), D2.children = insertAt(de2, A2, D2.children), Z2.batch([["update", D2], ["update", N2]]), E2[re2] = oe2;
    }, swap: async (re2, oe2) => {
      const de2 = _[re2], A2 = _[oe2], N2 = _[E2[re2]], D2 = _[E2[oe2]];
      N2.children = replaceItem((W2) => W2.id === re2, A2, N2.children), D2.children = replaceItem((W2) => W2.id === oe2, de2, D2.children), E2[re2] = D2.id, E2[oe2] = N2.id, Z2.batch([["update", N2], ["update", D2]]);
    } };
    Object.defineProperty(ne2, "nodes", { get() {
      return Object.values(_).filter((re2) => g2[re2.id] === ne2.id);
    } });
    const Z2 = v2[B2] || u2(B2, { get: (re2) => toDataNode(ne2.get(re2)), getParent: (re2) => toDataNode(ne2.getParent(re2)) });
    return v2[B2] = Z2, S2[B2] = ne2, ne2;
  } }, q2 = init$1(l2, V2), G2 = init$2(c, V2, q2);
  return compositor = { registerLayout, registerTransform: G2.registerTransform, registerSource: q2.registerSource, getElement: G2.getElement, getSource: q2.getSource, getSources: q2.getSources, useSource: q2.useSource, useSources: q2.useSources, ...V2 }, compositor;
}, createProject = async (a92) => {
  const u2 = getUser().id, c = a92.type || "sceneless", l2 = a92.size || { x: 1280, y: 720 }, v2 = a92.settings || {};
  let S2 = await CoreContext.clients.LiveApi().project.createProject({ collectionId: u2, rendering: { video: { width: l2.x, height: l2.y, framerate: 30 } }, composition: { studioSdk: { version: CoreContext.rendererVersion } }, metadata: {}, webrtc: { hosted: {} } });
  const g2 = await createLayout({ projectId: S2.project.projectId, collectionId: S2.project.collectionId, settings: v2, size: l2, type: c }), { displayName: E2 } = getAccessTokenData(), _ = { type: c, layoutId: g2.id, hostDisplayName: E2, props: a92.props || {} };
  let k = await CoreContext.clients.LiveApi().project.updateProject({ collectionId: u2, projectId: S2.project.projectId, updateMask: ["metadata"], metadata: _ });
  return S2.project = k.project, S2.project.metadata = _, S2;
}, deleteProject = async (a92) => {
  const { projectId: u2 } = a92, c = getProject(u2), l2 = getUser().id;
  await Promise.all([CoreContext.clients.LiveApi().project.deleteProject({ collectionId: l2, projectId: u2 }), CoreContext.clients.LayoutApi().layout.deleteLayout({ layoutId: c.layoutApi.layoutId })]);
}, loadUser = async (a92) => {
  var g2;
  const u2 = await loadCollections();
  let c;
  const { displayName: l2, serviceUserId: v2 } = getAccessTokenData();
  u2.length === 0 ? c = (await CoreContext.clients.LiveApi().collection.createCollection({ metadata: { serviceUserId: v2, displayName: l2, props: {} } })).collection : c = u2[0], await CoreContext.clients.LiveApi().subscribeToCollection(c.collectionId);
  const S2 = await Promise.all(c.projects.filter((E2) => {
    var _;
    return !!((_ = E2.metadata) != null && _.layoutId);
  }).map((E2) => hydrateProject(E2, "ROLE_HOST", a92)));
  return { user: { id: c.collectionId, metadata: c.metadata, props: ((g2 = c.metadata) == null ? void 0 : g2.props) || {}, name: l2 }, projects: S2, sources: c.sources };
}, loadCollections = async () => (await CoreContext.clients.LiveApi().collection.getCollections({})).collections, createLayout = async (a92) => {
  const { settings: u2, size: c, type: l2, projectId: v2, collectionId: S2 } = a92, g2 = await CoreContext.clients.LayoutApi().layout.createLayout({ layout: { projectId: v2, collectionId: S2 } });
  return l2 === "sceneless" ? await createCompositor(g2.id, c, u2) : await CoreContext.compositor.createProject({ props: { name: "Root", layout: "Free", ...u2, isRoot: true, size: c } }, g2.id), g2;
}, requests = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({ __proto__: null, createLayout, createProject, deleteProject, loadCollections, loadUser }, Symbol.toStringTag, { value: "Module" }));
class EngineWebsocket {
  constructor(u2, c) {
    ht(this, "ws", null);
    ht(this, "sources", /* @__PURE__ */ new Set());
    this.connectSource = u2, this.disconnectSource = c, this.connect = this.connect.bind(this), this.handleMessage = this.handleMessage.bind(this);
  }
  connect() {
    const u2 = this.handleMessage.bind(this);
    this.ws = new WebSocket("ws://127.0.0.1:8000"), this.ws.addEventListener("message", u2), this.ws.addEventListener("error", (c) => {
      console.error("Unable to connect to websocket", c);
    }), this.ws.addEventListener("close", () => {
      var c, l2;
      (c = this.ws) == null || c.removeEventListener("message", u2);
      try {
        (l2 = this.ws) == null || l2.close(), this.ws = null;
      } catch {
      }
      setTimeout(() => {
        this.connect();
      }, 1e3);
    });
  }
  handleMessage(u2) {
    try {
      const c = JSON.parse(u2.data);
      if (c.name === "state") {
        this.sources.clear(), console.info("[Engine]: state", c.payload);
        for (const l2 of c.payload.sources)
          l2.connected && (this.sources.has(l2.id) || (this.sources.add(l2.id), this.connectSource(l2.id)));
      } else
        c.name === "source.disconnect" ? (console.info("[Engine]: source disconnect", c.payload.id), this.sources.delete(c.payload.id), this.disconnectSource(c.payload.id)) : c.name === "source.connect" && (console.info("[Engine]: source connect", c.payload.id), this.sources.add(c.payload.id), this.connectSource(c.payload.id));
    } catch (c) {
      console.error("unable to handle message: ", c);
    }
  }
}
function setupEngineWebsocket(a92, u2) {
  return new EngineWebsocket(a92, u2);
}
const lookupDevice = (a92, u2) => {
  const c = a92.find((v2) => v2.label === u2 && v2.kind === "videoinput"), l2 = a92.find((v2) => v2.label === `Monitor of ${u2}` && v2.kind === "audioinput");
  if (c && l2)
    return { videoDevice: c, audioDevice: l2 };
  if (c) {
    if (c.label === "Logitech BRIO (046d:085e)") {
      const v2 = a92.find((S2) => (
        /*(device.groupId === videoDevice.groupId) &&*/
        S2.kind === "audioinput" && S2.label === "Loopback Audio 2 (Virtual)"
      ));
      return { videoDevice: c, audioDevice: v2 };
    }
    if (c.label === "OBS Virtual Camera (m-de:vice)") {
      const v2 = a92.find((S2) => (
        /*(device.groupId === videoDevice.groupId) &&*/
        S2.kind === "audioinput" && S2.label === "Loopback Audio (Virtual)"
      ));
      return { videoDevice: c, audioDevice: v2 };
    }
    return { videoDevice: c, audioDevice: null };
  }
  return null;
}, connectDevice = async (a92) => {
  new MediaStream([]);
  const u2 = await navigator.mediaDevices.enumerateDevices(), c = lookupDevice(u2, a92);
  if (c) {
    const l2 = { video: { width: 999999, height: 999999, deviceId: { exact: c.videoDevice.deviceId } } };
    c.audioDevice && (l2.audio = {
      autoGainControl: false,
      channelCount: 2,
      echoCancellation: false,
      // @ts-ignore: https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints/latency
      latency: 0,
      noiseSuppression: false,
      sampleRate: 128e3,
      sampleSize: 16,
      deviceId: { exact: c.audioDevice.deviceId }
    });
    const v2 = await navigator.mediaDevices.getUserMedia(l2);
    if (v2)
      return v2;
    console.warn(`No stream found for source ${a92}.`);
  } else
    console.warn(`No device found for source ${a92}.`);
}, RTMP = { type: "RTMP", valueType: MediaStream, props: { id: {}, type: {}, videoEnabled: {}, audioEnabled: {} }, init({ addSource: a92, removeSource: u2, updateSource: c, getSource: l2 }) {
  let v2, S2 = {}, g2 = [], E2 = [];
  const _ = (k) => {
    const L2 = k.filter(($) => !E2.some((J2) => J2.id === $.id)), M2 = E2.filter(($) => !k.some((J2) => J2.id === $.id));
    E2 = k, L2.forEach(async ($) => {
      const J2 = new MediaStream([]);
      S2[$.id] = J2;
      const V2 = J2.getVideoTracks();
      a92({ id: `rtmp-${$.id}`, isActive: true, value: J2, props: { id: $.id, isMuted: false, participantId: $.id, type: "rtmp", videoEnabled: !!V2.length, audioEnabled: true } });
    }), M2.forEach(($) => {
      u2(`rtmp-${$.id}`);
    });
  };
  CoreContext.on("ActiveProjectChanged", ({ projectId: k }) => {
    const L2 = toBaseProject(getProject(k));
    _(L2.sources), L2.role === Role.ROLE_RENDERER && (v2 || (v2 = setupEngineWebsocket(async function($) {
      const J2 = S2[$];
      toBaseProject(getProject(k));
      const V2 = await connectDevice($);
      if (l2(`rtmp-${$}`) && V2) {
        const G2 = V2.getAudioTracks()[0], H2 = V2.getVideoTracks()[0];
        updateMediaStreamTracks(J2, { video: H2, audio: G2 }), c(`rtmp-${$}`, { videoEnabled: !!H2, audioEnabled: !!G2, mirrored: false, external: true });
      }
    }, async function($) {
      toBaseProject(getProject(k)).sources.find((G2) => G2.id === $);
      const V2 = S2[$];
      (V2 == null ? void 0 : V2.getTracks()).forEach((G2) => {
        S2[$].removeTrack(G2);
      });
    }), v2.connect()));
  }), CoreContext.on("RoomJoined", ({ projectId: k, room: L2 }) => {
    if (toBaseProject(getProject(k)).role !== Role.ROLE_RENDERER) {
      const $ = () => {
        g2.filter((J2) => (J2 == null ? void 0 : J2.type) === "screen_share" && (J2 == null ? void 0 : J2.isExternal) === true).forEach((J2) => {
          var V2;
          if (J2.type === "screen_share") {
            const q2 = S2[J2.participantId], G2 = L2.getParticipant(J2.participantId);
            if (E2.some((H2) => H2.id === G2.id)) {
              const H2 = L2.getTrack(J2.id);
              if (l2(`rtmp-${G2 == null ? void 0 : G2.id}`)) {
                const Y2 = L2.getTracks().find((ne2) => ne2.participantId === G2.id && ne2.mediaStreamTrack.kind === "audio");
                updateMediaStreamTracks(q2, { video: H2 == null ? void 0 : H2.mediaStreamTrack, audio: Y2 == null ? void 0 : Y2.mediaStreamTrack }), c(`rtmp-${G2 == null ? void 0 : G2.id}`, { videoEnabled: !!(H2 != null && H2.mediaStreamTrack && !H2.isMuted), audioEnabled: !!(Y2 && !Y2.isMuted), mirrored: (V2 = G2 == null ? void 0 : G2.meta[J2.id]) == null ? void 0 : V2.isMirrored, external: J2 == null ? void 0 : J2.isExternal });
              }
            }
          }
        });
      };
      L2.useTracks((J2) => {
        const V2 = J2.filter((H2) => E2.some((B2) => B2.id === H2.participantId)).filter((H2) => ["screen_share"].includes(H2.type)), q2 = V2.filter((H2) => !g2.some((B2) => B2.id === H2.id) && !!(H2 != null && H2.mediaStreamTrack)), G2 = g2.filter((H2) => !V2.some((B2) => B2.id === H2.id));
        g2 = V2.filter((H2) => !!(H2 != null && H2.mediaStreamTrack)), G2.forEach((H2) => {
          const B2 = S2[H2.participantId];
          H2.mediaStreamTrack.kind === "video" && (updateMediaStreamTracks(B2, { video: null }), c(`rtmp-${H2.participantId}`, { videoEnabled: false })), H2.mediaStreamTrack.kind === "audio" && (updateMediaStreamTracks(B2, { audio: null }), c(`rtmp-${H2.participantId}`, { audioEnabled: false }));
        }), q2.forEach((H2) => {
          if (H2.type === "screen_share" && H2.mediaStreamTrack.kind === "video") {
            const B2 = S2[H2.participantId], Y2 = g2.find((ne2) => {
              var Z2;
              return ne2.participantId === H2.participantId && ((Z2 = ne2.mediaStreamTrack) == null ? void 0 : Z2.kind) === "audio";
            });
            updateMediaStreamTracks(B2, { video: H2 == null ? void 0 : H2.mediaStreamTrack, audio: Y2 == null ? void 0 : Y2.mediaStreamTrack }), c(`rtmp-${H2.participantId}`, { videoEnabled: !!(H2 && !(H2 != null && H2.isMuted)), audioEnabled: !!(Y2 && !(Y2 != null && Y2.isMuted)) });
          }
        }), $();
      });
    }
  }), CoreContext.on("ProjectSourceAdded", ({ source: k, projectId: L2 }) => {
    const M2 = toBaseProject(getProject(L2));
    _(M2 == null ? void 0 : M2.sources);
  }), CoreContext.on("ProjectSourceRemoved", ({ sourceId: k, projectId: L2 }) => {
    const M2 = toBaseProject(getProject(L2));
    _(M2 == null ? void 0 : M2.sources);
  });
} }, Sources = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({ __proto__: null, Background, Banner, Logo, Overlays, RTMP, RoomParticipant }, Symbol.toStringTag, { value: "Module" })), BroadcastPhase = lib$2.LiveApiModel.ProjectBroadcastPhase, { trigger, triggerInternal } = CoreContext, EventType = lib$2.LiveApiModel.EventType, EventSubType = lib$2.LiveApiModel.EventSubType, init = async (a92 = {}) => {
  const u2 = a92.env || "prod", c = a92.logLevel || "Warn";
  log$1.getLogger("livekit").setLevel(c), log$1.setLevel(c), log$1.info("Initializing Studio SDK...");
  const { layouts: v2 = [], transforms: S2 = [], sources: g2 = [], defaultTransforms: E2 = {}, useLatestRenderer: _ = false, guestToken: k, rendererVersion: L2 } = a92, M2 = new lib$2.ApiStream({ sdkVersion: CoreContext.version, env: u2, logLevel: c }), $ = config$1(), J2 = start({ dbAdapter: compositorAdapter, transformSettings: { defaultTransforms: { ...E2, ...$.defaults.transforms } } });
  CoreContext.config = $, CoreContext.clients = M2, CoreContext.compositor = J2, CoreContext.logLevel = c, CoreContext.Request = await Promise.resolve().then(() => requests), CoreContext.Command = await Promise.resolve().then(() => commands$1), CoreContext.rendererVersion = _ ? "latest-v2" : L2 || CoreContext.version, window.__StudioKit = { ...CoreContext }, J2 && (J2.registerSource([...Object.values(Sources), ...g2]), J2.registerTransform([...Object.values(Transforms), ...S2]), J2.registerLayout([...Object.values(Layouts), ...v2]));
  const V2 = await M2.load(k);
  let q2;
  V2 && await M2.LiveApi().project.getProject({ ...V2 }).then((H2) => hydrateProject(H2.project, V2.role)).then(async (H2) => {
    setAppState({
      // As a contributor, `user` refers to the collection
      //  that the project belongs to. This will be referenced
      //  when making requests requiring `collectionId`.
      user: { id: V2.collectionId, props: {}, name: null, metadata: {} },
      // TODO: Populate
      sources: [],
      projects: [H2],
      activeProjectId: null
    }), H2.isInitial = true, q2 = await CoreContext.Command.setActiveProject({ projectId: H2.id });
  }), M2.LiveApi().on(EventType.EVENT_TYPE_COLLECTION, (H2, B2) => {
    switch (log$1.info("Received: Collection event", B2, H2), B2) {
      case EventSubType.EVENT_SUB_TYPE_UPDATE: {
        triggerInternal("UserChanged", H2.update.collection);
        return;
      }
    }
  }), M2.LiveApi().on(EventType.EVENT_TYPE_DESTINATION, (H2, B2) => {
    switch (log$1.info("Received: Destination event", B2, H2), B2) {
      case EventSubType.EVENT_SUB_TYPE_CREATE: {
        const { destination: Y2 } = H2.create;
        triggerInternal("DestinationAdded", Y2);
        return;
      }
      case EventSubType.EVENT_SUB_TYPE_UPDATE: {
        const { destination: Y2 } = H2.update;
        triggerInternal("DestinationChanged", Y2);
        return;
      }
      case EventSubType.EVENT_SUB_TYPE_DELETE: {
        triggerInternal("DestinationRemoved", H2.delete);
        return;
      }
    }
  }), M2.LiveApi().on(EventType.EVENT_TYPE_SOURCE, (H2, B2) => {
    switch (log$1.info("Received: Source event", B2, H2), B2) {
      case EventSubType.EVENT_SUB_TYPE_CREATE: {
        triggerInternal("SourceAdded", H2.create.source);
        return;
      }
      case EventSubType.EVENT_SUB_TYPE_UPDATE: {
        triggerInternal("SourceChanged", H2.update.source);
        return;
      }
      case EventSubType.EVENT_SUB_TYPE_DELETE: {
        triggerInternal("SourceRemoved", H2.delete.sourceId);
        return;
      }
      case EventSubType.EVENT_SUB_TYPE_ADD: {
        triggerInternal("ProjectSourceAdded", { projectId: H2.add.projectId, source: H2.add.source });
        return;
      }
      case EventSubType.EVENT_SUB_TYPE_REMOVE: {
        triggerInternal("ProjectSourceRemoved", { projectId: H2.add.projectId, sourceId: H2.add.sourceId });
        return;
      }
    }
  }), M2.LiveApi().on(EventType.EVENT_TYPE_PROJECT, (H2, B2) => {
    var Y2;
    switch (log$1.info("Received: Project event", B2, H2), B2) {
      case EventSubType.EVENT_SUB_TYPE_CREATE: {
        const ne2 = H2.create.project;
        if (getProject(ne2.projectId))
          return;
        triggerInternal("ProjectAdded", ne2);
        return;
      }
      case EventSubType.EVENT_SUB_TYPE_UPDATE: {
        const { project: ne2 } = H2.update, Z2 = getProject(ne2.projectId);
        if (!Z2)
          return;
        triggerInternal("ProjectChanged", { project: ne2, phase: Z2.videoApi.phase });
        return;
      }
      case EventSubType.EVENT_SUB_TYPE_DELETE: {
        triggerInternal("ProjectRemoved", { projectId: H2.delete.projectId });
        return;
      }
      case EventSubType.EVENT_SUB_TYPE_STATE: {
        const ne2 = getProject((Y2 = H2.state) == null ? void 0 : Y2.projectId);
        if (!ne2)
          return;
        let Z2 = H2.state.broadcastId;
        if (H2.state.error && trigger("BroadcastError", { projectId: ne2.id, broadcastId: H2.state.broadcastId, error: H2.state.error }), H2.state.phase) {
          const re2 = H2.state.phase;
          re2 === BroadcastPhase.PROJECT_BROADCAST_PHASE_RUNNING ? trigger("BroadcastStarted", { projectId: ne2.id, broadcastId: H2.state.broadcastId }) : re2 === BroadcastPhase.PROJECT_BROADCAST_PHASE_STOPPED && (Z2 = null, trigger("BroadcastStopped", { projectId: ne2.id, broadcastId: H2.state.broadcastId }));
        }
        triggerInternal("ProjectChanged", { project: ne2.videoApi.project, phase: H2.state.phase, broadcastId: Z2 });
        return;
      }
    }
  }), M2.LayoutApi().on(lib$2.LayoutApiModel.EventType.EVENT_TYPE_LAYER, (H2, B2) => {
    var Y2;
    if (B2 === lib$2.LayoutApiModel.EventSubType.EVENT_SUB_TYPE_CREATE) {
      log$1.debug("Received: Node Insert", H2.create);
      const { connectionId: ne2, layoutId: Z2 } = H2.create.requestMetadata;
      if (CoreContext.connectionId === ne2)
        return;
      const re2 = layerToNode(H2.create), oe2 = getProjectByLayoutId(Z2), de2 = [re2, ...oe2.compositor.nodes.map(toDataNode$1)], A2 = toSceneTree(de2, re2.id);
      oe2.compositor.local.insert(A2), triggerInternal("NodeAdded", { projectId: oe2.id, nodeId: re2.id });
    } else if (B2 === lib$2.LayoutApiModel.EventSubType.EVENT_SUB_TYPE_UPDATE) {
      log$1.debug("Received: Node Update", H2.update);
      const { connectionId: ne2, layoutId: Z2, updateVersions: re2 = {} } = ((Y2 = H2.update) == null ? void 0 : Y2.requestMetadata) || {};
      if (CoreContext.connectionId === ne2)
        return;
      const oe2 = layerToNode(H2.update);
      if ((latestUpdateVersion[oe2.id] || 0) > re2[oe2.id])
        return log$1.info("Ignoring node update - updateID is less than latest.");
      latestUpdateVersion[oe2.id] = re2[oe2.id];
      const A2 = getProjectByLayoutId(Z2);
      A2.compositor.local.update(H2.update.id, oe2.props, oe2.childIds), triggerInternal("NodeChanged", { projectId: A2.id, nodeId: oe2.id });
    } else if (B2 === lib$2.LayoutApiModel.EventSubType.EVENT_SUB_TYPE_DELETE) {
      log$1.debug("Received: Node Delete", H2.delete);
      const { connectionId: ne2, layoutId: Z2 } = H2.delete.requestMetadata;
      if (CoreContext.connectionId === ne2)
        return;
      const re2 = getProjectByLayoutId(Z2);
      re2.compositor.local.remove(H2.delete.id), triggerInternal("NodeRemoved", { projectId: re2.id, nodeId: H2.delete.id });
    } else if (B2 === lib$2.LayoutApiModel.EventSubType.EVENT_SUB_TYPE_BATCH) {
      log$1.debug("Received: Node Batch Update", H2.batch);
      const { connectionId: ne2, layoutId: Z2, updateVersions: re2 = {} } = H2.batch.requestMetadata;
      if (CoreContext.connectionId === ne2)
        return;
      const oe2 = getProjectByLayoutId(Z2);
      H2.batch.layers.forEach((de2) => {
        try {
          const [A2, N2] = Object.entries(de2)[0];
          if (A2 === "create") {
            const D2 = layerToNode(N2);
            oe2.compositor.local.insert(D2), triggerInternal("NodeAdded", { projectId: oe2.id, nodeId: D2.id });
          } else if (A2 === "update") {
            const D2 = layerToNode(N2);
            if ((latestUpdateVersion[D2.id] || 0) > re2[D2.id])
              return log$1.info("Ignoring node update - updateID is less than latest.");
            latestUpdateVersion[D2.id] = re2[D2.id], oe2.compositor.local.update(D2.id, D2.props, D2.childIds), triggerInternal("NodeChanged", { projectId: oe2.id, nodeId: D2.id });
          } else
            A2 === "delete" && (oe2.compositor.local.remove(N2.id), triggerInternal("NodeRemoved", { projectId: oe2.id, nodeId: N2.id }));
        } catch (A2) {
          log$1.warn("Error handling batch item", A2, { item: de2 });
        }
      }), oe2 && triggerInternal("NodeChanged", { projectId: oe2.id, nodeId: oe2.compositor.getRoot().id });
    }
  });
  const G2 = (H2 = {}, B2) => {
    const { displayName: Y2, role: ne2, maxDuration: Z2 = CoreContext.config.defaults.guestTokenDuration, projectId: re2 = CoreContext.state.activeProjectId } = H2, oe2 = getProject(re2), de2 = Y2 ? { direct: { displayName: Y2 } } : { exchange: { maxDuration: Z2 } };
    return M2.LiveApi().authentication.createGuestAccessToken({ projectId: re2, token: de2, url: B2, collectionId: oe2.videoApi.project.collectionId, maxDuration: Z2, role: ne2 || lib$2.LiveApiModel.Role.ROLE_GUEST });
  };
  return { ...omit(CoreContext, ["clients", "config", "connectionId", "Request", "state", "trigger"]), createDemoToken: async () => (console.warn("createDemoToken() is currently unavailable."), ""), createPreviewLink: async (H2 = {}) => {
    const { maxDuration: B2, projectId: Y2 = CoreContext.state.activeProjectId } = H2, ne2 = getProject(Y2), Z2 = ne2.videoApi.project.composition.studioSdk.rendererUrl;
    return (await M2.LiveApi().authentication.createGuestAccessToken({ projectId: Y2, token: { direct: { displayName: "Preview" } }, url: Z2, collectionId: ne2.videoApi.project.collectionId, maxDuration: B2 || CoreContext.config.defaults.previewTokenDuration, role: lib$2.LiveApiModel.Role.ROLE_VIEWER })).url;
  }, createGuestLink: async (H2, B2 = {}) => (await G2(B2, H2)).url, createGuestToken: async (H2 = {}) => (await G2(H2)).accessToken, initialProject: q2, load, render: render$1 };
}, load = async (a92, u2) => {
  let c = getBaseUser();
  if (c)
    return log$1.info("Attempted to load user again - returning existing user"), c;
  if (!a92) {
    log$1.warn("Access token required for load()");
    return;
  }
  log$1.info("Loading user..."), await CoreContext.clients.load(a92);
  const v2 = await CoreContext.Request.loadUser(u2);
  return setAppState({ user: v2.user, sources: v2.sources, projects: v2.projects, activeProjectId: null }), c = getBaseUser(), trigger("UserLoaded", c), c;
};
const AppContext = React.createContext({
  isHost: false
});
const AppProvider = ({
  isHost,
  children
}) => {
  return /* @__PURE__ */ jsx(AppContext.Provider, {
    value: {
      isHost
    },
    children
  });
};
const column = "_column_xzlw3_5";
const row = "_row_xzlw3_11";
const Style$1 = {
  column,
  row
};
const {
  Room
} = index$1;
const {
  useStudio: useStudio$1
} = index$1.React;
const Participants = ({
  room,
  projectCommands,
  studio
}) => {
  const {
    isHost
  } = reactExports.useContext(AppContext);
  const {
    project
  } = useStudio$1();
  const [participants, setParticipants] = reactExports.useState([]);
  reactExports.useEffect(() => {
    if (!room)
      return;
    return room.useParticipants((participants2) => {
      const sourceIds = project.sources.map((s2) => s2.id);
      setParticipants(participants2.filter((p2) => sourceIds.some((id2) => id2 === p2.id)));
      if (isHost)
        projectCommands.pruneParticipants();
    });
  }, [room]);
  return /* @__PURE__ */ jsx("div", {
    className: Style$1.column,
    children: participants.map((x2) => /* @__PURE__ */ jsx("div", {
      style: {
        marginBottom: 10
      },
      children: /* @__PURE__ */ jsx(Participant, {
        participant: x2,
        room,
        projectCommands
      })
    }, x2.id))
  });
};
const ParticipantCamera = ({
  participant,
  webcam,
  microphone,
  projectCommands,
  room
}) => {
  const {
    isHost
  } = reactExports.useContext(AppContext);
  const {
    id: id2,
    displayName
  } = participant;
  const ref2 = reactExports.useRef();
  const [srcObject] = reactExports.useState(new MediaStream([]));
  const isEnabled = (webcam == null ? void 0 : webcam.mediaStreamTrack) && !(webcam == null ? void 0 : webcam.isMuted);
  reactExports.useEffect(() => {
    Room.updateMediaStreamTracks(srcObject, {
      video: webcam == null ? void 0 : webcam.mediaStreamTrack,
      audio: microphone == null ? void 0 : microphone.mediaStreamTrack
    });
  }, [webcam == null ? void 0 : webcam.mediaStreamTrack, microphone == null ? void 0 : microphone.mediaStreamTrack]);
  reactExports.useEffect(() => {
    if (ref2.current) {
      ref2.current.srcObject = srcObject;
    }
  }, [ref2 == null ? void 0 : ref2.current, srcObject, isEnabled]);
  return /* @__PURE__ */ jsxs("div", {
    className: Style$1.column,
    style: {
      padding: 6,
      borderRadius: 3,
      background: "#000000cc",
      border: "1px solid rgba(255, 255, 255, 0.2)"
    },
    children: [/* @__PURE__ */ jsx("div", {
      children: displayName
    }), /* @__PURE__ */ jsxs("div", {
      style: {
        height: 160,
        width: 160 * 16 / 9,
        position: "relative"
      },
      children: [/* @__PURE__ */ jsx("div", {
        // Background to show when webcam is not enabled
        style: {
          background: "#222",
          height: "100%",
          width: "100%",
          position: "absolute",
          zIndex: -1
        }
      }), isEnabled && /* @__PURE__ */ jsx("video", {
        // Mute because audio is only communicated through the compositor
        muted: true,
        autoPlay: true,
        ref: ref2,
        style: {
          background: "transparent",
          objectFit: "cover",
          height: "100%",
          width: "100%"
        }
      })]
    }), isHost && /* @__PURE__ */ jsx(HostControls, {
      participant,
      room,
      projectCommands,
      type: "camera"
    })]
  });
};
const ParticipantScreenshare = ({
  participant,
  screenshare
}) => {
  const {
    isHost
  } = reactExports.useContext(AppContext);
  useStudio$1();
  const {
    id: id2,
    displayName
  } = participant;
  const ref2 = reactExports.useRef();
  const [srcObject] = reactExports.useState(new MediaStream([]));
  reactExports.useEffect(() => {
    Room.updateMediaStreamTracks(srcObject, {
      video: screenshare == null ? void 0 : screenshare.mediaStreamTrack
    });
  }, [screenshare == null ? void 0 : screenshare.mediaStreamTrack]);
  reactExports.useEffect(() => {
    if (ref2.current) {
      ref2.current.srcObject = srcObject;
    }
  }, [ref2 == null ? void 0 : ref2.current, srcObject]);
  return /* @__PURE__ */ jsxs("div", {
    className: Style$1.column,
    style: {
      padding: 6,
      borderRadius: 3,
      background: "#000000cc",
      border: "1px solid rgba(255, 255, 255, 0.2)"
    },
    children: [/* @__PURE__ */ jsxs("div", {
      children: [displayName, " (Screen)"]
    }), /* @__PURE__ */ jsx("div", {
      style: {
        height: 160,
        width: 160 * 16 / 9,
        position: "relative"
      },
      children: /* @__PURE__ */ jsx("video", {
        // Mute because audio is only communicated through the compositor
        muted: true,
        autoPlay: true,
        ref: ref2,
        style: {
          background: "transparent",
          objectFit: "cover",
          height: "100%",
          width: "100%"
        }
      })
    }), isHost && /* @__PURE__ */ jsx(HostControls, {
      participant,
      type: "screen"
    })]
  });
};
const Participant = ({
  participant,
  room,
  projectCommands
}) => {
  const [tracks, setTracks] = reactExports.useState([]);
  const screenshare = tracks.find((x2) => x2.type === "screen_share");
  const webcam = tracks.find((x2) => x2.type === "camera");
  const microphone = tracks.find((x2) => x2.type === "microphone");
  reactExports.useEffect(() => {
    if (!room)
      return;
    setTracks(participant.trackIds.map(room.getTrack).filter(Boolean));
  }, [participant == null ? void 0 : participant.trackIds, room]);
  return /* @__PURE__ */ jsxs(Fragment, {
    children: [/* @__PURE__ */ jsx(ParticipantCamera, {
      projectCommands,
      participant,
      webcam,
      room,
      microphone
    }), screenshare && /* @__PURE__ */ jsx("div", {
      style: {
        marginTop: 10
      },
      children: /* @__PURE__ */ jsx(ParticipantScreenshare, {
        participant,
        screenshare
      })
    })]
  });
};
const HostControls = ({
  participant,
  type,
  projectCommands,
  room
}) => {
  const {
    project
  } = useStudio$1();
  const {
    id: id2
  } = participant;
  const projectParticipant = reactExports.useMemo(() => projectCommands == null ? void 0 : projectCommands.getParticipantState(id2, type), []);
  const [onStream, setOnStream] = reactExports.useState(Boolean(projectParticipant));
  const [isMuted, setIsMuted] = reactExports.useState((projectParticipant == null ? void 0 : projectParticipant.isMuted) ?? false);
  const [volume, setVolume] = reactExports.useState((projectParticipant == null ? void 0 : projectParticipant.volume) ?? 1);
  const [isShowcase, setIsShowcase] = reactExports.useState(false);
  reactExports.useEffect(() => {
    return projectCommands == null ? void 0 : projectCommands.useParticipantState(id2, (x2) => {
      setOnStream(Boolean(x2));
    }, type);
  }, []);
  reactExports.useEffect(() => projectCommands == null ? void 0 : projectCommands.useShowcase((showcase) => {
    setIsShowcase(showcase.participantId === id2 && showcase.type === type);
  }), []);
  return /* @__PURE__ */ jsxs("div", {
    style: {
      display: "flex",
      justifyContent: "space-between",
      alignItems: "center",
      width: "100%",
      marginTop: 4
    },
    children: [/* @__PURE__ */ jsxs("div", {
      style: {
        display: "flex",
        flexDirection: "column"
      },
      children: [/* @__PURE__ */ jsxs("label", {
        children: [/* @__PURE__ */ jsx("input", {
          type: "checkbox",
          checked: onStream,
          style: {
            marginTop: 0,
            marginBottom: 0
          },
          onChange: (e2) => {
            const checked = e2.target.checked;
            if (checked) {
              if (project.sources.some((source) => source.id === id2)) {
                projectCommands == null ? void 0 : projectCommands.addRTMPSource(id2, {});
              } else {
                projectCommands == null ? void 0 : projectCommands.addParticipant(id2, {
                  isMuted,
                  volume
                }, type);
              }
            } else {
              if (project.sources.some((source) => source.id === id2)) {
                projectCommands == null ? void 0 : projectCommands.removeRTMPSource(id2);
              } else {
                projectCommands == null ? void 0 : projectCommands.removeParticipant(id2, type);
              }
            }
            setOnStream(checked);
          }
        }), "On stream"]
      }), /* @__PURE__ */ jsxs("label", {
        children: [/* @__PURE__ */ jsx("input", {
          type: "checkbox",
          checked: onStream,
          style: {
            marginTop: 0,
            marginBottom: 0
          },
          onChange: (e2) => {
            const checked = e2.target.checked;
            if (checked) {
              room.setLocalParticipantMetadata(room == null ? void 0 : room.participantId, {
                ...participant.meta,
                isMirrored: true
              });
            } else {
              room.setLocalParticipantMetadata(room == null ? void 0 : room.participantId, {
                ...participant.meta,
                isMirrored: false
              });
            }
            setOnStream(checked);
          }
        }), "On Mirror"]
      }), /* @__PURE__ */ jsxs("label", {
        style: {
          opacity: onStream ? 1 : 0.5
        },
        children: [/* @__PURE__ */ jsx("input", {
          type: "checkbox",
          style: {
            marginTop: 0,
            marginBottom: 0
          },
          disabled: !onStream,
          checked: isShowcase,
          onChange: () => {
            if (isShowcase) {
              projectCommands == null ? void 0 : projectCommands.setShowcase(null);
            } else {
              projectCommands == null ? void 0 : projectCommands.setShowcase(id2, type);
            }
          }
        }), "Showcase"]
      })]
    }), /* @__PURE__ */ jsx("span", {
      children: type === "camera" && /* @__PURE__ */ jsxs(Fragment, {
        children: [/* @__PURE__ */ jsx("input", {
          type: "range",
          min: 0,
          max: 1,
          step: 0.01,
          value: volume,
          style: {
            opacity: isMuted ? 0.4 : 1
          },
          onChange: (e2) => {
            const value = Number(e2.target.value);
            projectCommands == null ? void 0 : projectCommands.setParticipantVolume(id2, value);
            setVolume(value);
            if (isMuted) {
              projectCommands == null ? void 0 : projectCommands.setParticipantMuted(id2, false);
              setIsMuted(false);
            }
          }
        }), /* @__PURE__ */ jsx("input", {
          type: "checkbox",
          checked: !isMuted,
          onChange: (e2) => {
            const checked = e2.target.checked;
            projectCommands == null ? void 0 : projectCommands.setParticipantMuted(id2, !checked);
            setIsMuted(!checked);
          }
        })]
      })
    })]
  });
};
const {
  useStudio,
  useDevices
} = index$1.React;
const DeviceSelection = () => {
  const {
    webcamId,
    microphoneId,
    setWebcamId,
    setMicrophoneId
  } = useStudio();
  const devices = useDevices();
  reactExports.useEffect(() => {
    var _a2;
    if (!webcamId)
      setWebcamId((_a2 = devices.webcams[0]) == null ? void 0 : _a2.deviceId);
  }, [webcamId, devices]);
  reactExports.useEffect(() => {
    var _a2;
    if (!microphoneId)
      setMicrophoneId((_a2 = devices.microphones[0]) == null ? void 0 : _a2.deviceId);
  }, [microphoneId, devices]);
  return /* @__PURE__ */ jsxs("div", {
    children: [/* @__PURE__ */ jsxs("div", {
      className: Style$1.column,
      children: [/* @__PURE__ */ jsx("label", {
        children: "Webcam"
      }), /* @__PURE__ */ jsx("select", {
        value: webcamId,
        onChange: (e2) => {
          setWebcamId(e2.target.value);
        },
        children: devices.webcams.map((x2) => /* @__PURE__ */ jsx("option", {
          value: x2.deviceId,
          children: x2.label
        }, x2.deviceId))
      })]
    }), /* @__PURE__ */ jsxs("div", {
      className: Style$1.column,
      children: [/* @__PURE__ */ jsx("label", {
        children: "Microphone"
      }), /* @__PURE__ */ jsx("select", {
        value: microphoneId,
        onChange: (e2) => {
          setMicrophoneId(e2.target.value);
        },
        children: devices.microphones.map((x2) => /* @__PURE__ */ jsx("option", {
          value: x2.deviceId,
          children: x2.label
        }, x2.deviceId))
      })]
    })]
  });
};
const ControlPanel = ({
  room,
  projectCommands
}) => {
  const [isSharingScreen, setIsSharingScreen] = reactExports.useState(false);
  const [participant, setParticipant] = reactExports.useState();
  reactExports.useEffect(() => {
    if (!room)
      return;
    return room.useParticipant(room.participantId, setParticipant);
  }, [room]);
  reactExports.useEffect(() => {
    if (!participant)
      return;
    const screenshare = participant.trackIds.find((x2) => {
      var _a2;
      return ((_a2 = room.getTrack(x2)) == null ? void 0 : _a2.type) === "screen_share";
    });
    if (!screenshare) {
      projectCommands.removeParticipant(room.participantId, "screen");
    }
    setIsSharingScreen(Boolean(screenshare));
  }, [participant == null ? void 0 : participant.trackIds]);
  return /* @__PURE__ */ jsxs("div", {
    children: [/* @__PURE__ */ jsxs("label", {
      children: [/* @__PURE__ */ jsx("input", {
        type: "checkbox",
        onChange: async (e2) => {
          const track = await room.addCamera({
            deviceId: "7360456cb5f177a56d708c3dc4981b540ecc5197ec79fb67ee5e573bf434a760"
          });
          setTimeout(() => {
            projectCommands.addParticipantTrack(track.id, {}, "camera");
          }, 5e3);
        }
      }), "Add Additional Camera"]
    }), /* @__PURE__ */ jsxs("label", {
      children: [/* @__PURE__ */ jsx("input", {
        type: "checkbox",
        onChange: (e2) => {
          const muted = e2.target.checked;
          room.setMicrophoneEnabled(!muted);
        }
      }), "Mute microphone"]
    }), /* @__PURE__ */ jsxs("label", {
      children: [/* @__PURE__ */ jsx("input", {
        type: "checkbox",
        onChange: (e2) => {
          const hidden = e2.target.checked;
          room.setCameraEnabled(!hidden);
        }
      }), "Hide webcam"]
    }), /* @__PURE__ */ jsxs("label", {
      children: [/* @__PURE__ */ jsx("input", {
        type: "checkbox",
        checked: isSharingScreen,
        onChange: (e2) => {
          const enabled = e2.target.checked;
          if (enabled) {
            room.addScreen();
          } else {
            room.getParticipant(room.participantId).trackIds.forEach((x2) => {
              if (room.getTrack(x2).type === "screen_share") {
                room.removeTrack(x2);
              }
            });
          }
        }
      }), "Screenshare"]
    })]
  });
};
const chatUsernameCell = "_chatUsernameCell_qtjny_5";
const chatTimeCell = "_chatTimeCell_qtjny_10";
const chatItem = "_chatItem_qtjny_16";
const chatTop = "_chatTop_qtjny_20";
const scrollbox = "_scrollbox_qtjny_25";
const textarea = "_textarea_qtjny_35";
const chatbox = "_chatbox_qtjny_45";
const emptyMessage = "_emptyMessage_qtjny_54";
const Style = {
  chatUsernameCell,
  chatTimeCell,
  chatItem,
  chatTop,
  scrollbox,
  textarea,
  chatbox,
  emptyMessage
};
const {
  StudioContext
} = index$1.React;
const displayTimeComponent = (component) => component < 10 ? `0${component}` : String(component);
const displayTime = (time) => `${time.getHours()}:${displayTimeComponent(time.getMinutes())}:${displayTimeComponent(time.getSeconds())}`;
const ChatMessage = ({
  message
}) => {
  const sent = new Date(message.timestamp);
  return /* @__PURE__ */ jsxs("div", {
    className: Style.chatItem,
    children: [/* @__PURE__ */ jsxs("div", {
      className: Style.chatTop,
      children: [/* @__PURE__ */ jsx("span", {
        className: Style.chatUsernameCell,
        children: message.displayName
      }), /* @__PURE__ */ jsx("span", {
        className: Style.chatTimeCell,
        children: displayTime(sent)
      })]
    }), /* @__PURE__ */ jsx("div", {
      className: Style.chatMessageContent,
      children: message.content
    })]
  });
};
const Chat = () => {
  const {
    room
  } = reactExports.useContext(StudioContext);
  const [chatHistory, setChatHistory] = reactExports.useState([]);
  const [draft, setDraft] = reactExports.useState("");
  const scrollbox2 = reactExports.useRef(null);
  const onSendMessage = () => {
    if (!draft.trim()) {
      return;
    }
    room.sendChatMessage({
      message: draft.trim()
    });
    setDraft("");
  };
  reactExports.useEffect(() => {
    if (!room)
      return;
    return room.useChatHistory((history) => {
      const scrollY = scrollbox2.current.scrollHeight - scrollbox2.current.clientHeight;
      setChatHistory(history);
      if (scrollbox2.current.scrollTop === scrollY) {
        scrollbox2.current.scrollTo({
          top: scrollbox2.current.scrollHeight - scrollbox2.current.clientHeight
        });
      }
    });
  }, [room]);
  return /* @__PURE__ */ jsxs("div", {
    className: Style.chatbox,
    children: [/* @__PURE__ */ jsxs("div", {
      ref: scrollbox2,
      className: Style.scrollbox,
      children: [chatHistory.length === 0 && /* @__PURE__ */ jsx("div", {
        className: Style.emptyMessage,
        children: "Private chat between host and guests."
      }), chatHistory.map((chat, i2) => {
        return /* @__PURE__ */ jsx(ChatMessage, {
          message: chat
        }, i2);
      })]
    }), /* @__PURE__ */ jsx("textarea", {
      placeholder: "Write a message...",
      className: Style.textarea,
      value: draft,
      onChange: (e2) => {
        setDraft(e2.target.value);
      }
    }), /* @__PURE__ */ jsx("button", {
      onClick: onSendMessage,
      children: "Send Message"
    })]
  });
};
const LOCAL_ENV = "stage";
const config = {
  env: location.hostname === "live.api.stream" ? "prod" : LOCAL_ENV,
  logLevel: "Debug",
  recaptchaKey: "6Lc0HIUfAAAAAIdsyq7vB_3c3skiVvltzdUTCUSx"
};
const url = "/studiokit/example/assets/logo-DYIKx3v7.png";
export {
  AppProvider as A,
  ControlPanel as C,
  DeviceSelection as D,
  Participants as P,
  React as R,
  Style$1 as S,
  init as a,
  jsxs as b,
  config as c,
  Chat as d,
  ReactDOM as e,
  Participant as f,
  getDefaultExportFromCjs$2 as g,
  index$1 as i,
  jsx as j,
  reactExports as r,
  url as u
};
//# sourceMappingURL=index-BcprsmUc.js.map
