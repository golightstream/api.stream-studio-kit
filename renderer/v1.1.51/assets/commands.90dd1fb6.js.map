{"version":3,"file":"commands.90dd1fb6.js","sources":["../../../../src/core/commands.ts"],"sourcesContent":["/* ---------------------------------------------------------------------------------------------\n * Copyright (c) Infiniscene, Inc. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * -------------------------------------------------------------------------------------------- */\n/**\n * Commands represent actions that can be taken by a user.\n *\n * Most commands accept a contextual parameter `projectId`.\n * If this parameter is excluded from a function call, the user's\n * active project will be used instead.\n *\n * Upon completion, a command may emit zero or more {@link EventMap Events}. Commands\n * return Promises that will attempt to resolve to the most pertinent value.\n * However, it is good practice to instead rely on events where possible, when\n * updating application state.\n *\n * For example, listening for the event `BroadcastStarted` will indicate\n * the following scenarios:\n *\n *   - The current user has initiated a broadcast\n *   - A collaborator (or host) has initiated a broadcast\n *   - Some external force has initiated a broadcast\n *\n * When depending on the Event rather than the command's return value, we can\n * be sure that our state is updating under all relevant circumstances.\n *\n * ----\n *\n * _Note: Commands marked `internal` are low-level commands that should only be\n * used with caution. Higher-level abstractions should be used to manipulate Nodes\n * (elements on the stream canvas)._\n *\n * @private This module is currently hidden from users of the Studio Kit.\n *  Favor the creation of helpers when supporting developers who require\n *  functionality contained in this module.\n *\n * @module Commands\n */\n\nimport {\n  getProject,\n  getUser,\n  hydrateProject,\n  toBaseDestination,\n  toBaseProject,\n} from './data'\nimport { CoreContext } from './context'\nimport decode from 'jwt-decode'\nimport { Props } from './types'\nimport { SDK } from './namespaces'\nimport { webrtcManager } from './webrtc'\nimport { getRoom } from './webrtc/simple-room'\nimport { trigger, triggerInternal } from './events'\n\nconst { state } = CoreContext\n\n/**\n * Update the current user's metadata with custom data opaque to the SDK.\n * Existing props are not affected unless explicitly overwritten.\n *\n * @category User\n */\nexport const updateUserProps = async (payload: {\n  /** Arbitrary metadata to associate with the user */\n  props?: Props\n}) => {\n  const collection = getUser()\n  if (!collection) return\n\n  const props = {\n    ...collection.props,\n    ...payload.props,\n  }\n  const response = await CoreContext.clients\n    .LiveApi()\n    .collection.updateCollection({\n      collectionId: collection.id,\n      updateMask: ['metadata'],\n      metadata: {\n        ...collection.metadata,\n        props,\n      },\n    })\n\n  // Trigger event to update state\n  await triggerInternal('UserChanged', response.collection)\n  return\n}\n\n/**\n * Create a project with optional metadata.\n *\n * ----\n * _Note: This is a low level function that necessitates careful management\n *  of the nodes within. Consider {@link ScenelessProject.create} instead._\n *\n * @category Project\n */\nexport const createProject = async (\n  payload: {\n    /** @private Settings associated with ScenelessProject (or other such wrapper) */\n    settings?: { [prop: string]: any }\n    /** Arbitrary metadata to associate with this project */\n    props?: Props\n    /** Pixel dimenions of the canvas (default: `{ x: 1280, y: 720 }`) */\n    size?: { x: number; y: number }\n  } = {},\n) => {\n  const { props = {}, size, settings = {} } = payload\n  const response = await CoreContext.Request.createProject({\n    settings,\n    props,\n    size,\n  })\n\n  // Trigger event to update state\n  await triggerInternal('ProjectAdded', response.project)\n\n  // Return the base project directly, for convenience\n  const internalProject = await hydrateProject(\n    response.project,\n    'ROLE_HOST' as SDK.Role,\n  )\n  return toBaseProject(internalProject)\n}\n\n/**\n * @private\n * Recreate a project's associated layout\n */\nexport const recreateLayout = async (payload: {\n  projectId: string\n  props?: Props\n}) => {\n  const { projectId, props = {} } = payload\n  const collectionId = getUser().id\n\n  // Get the Vapi project\n  const response = await CoreContext.clients.LiveApi().project.getProject({\n    collectionId,\n    projectId,\n    status: true,\n  })\n\n  // Return if the project is actively broadcasting\n  if (\n    [\n      SDK.ProjectBroadcastPhase.PROJECT_BROADCAST_PHASE_RUNNING,\n      SDK.ProjectBroadcastPhase.PROJECT_BROADCAST_PHASE_STARTING,\n    ].includes(response.status.phase)\n  ) {\n    return\n  }\n\n  const metadata = response.project.metadata || {}\n  const { layoutId } = metadata\n  const { video } = response.project.rendering\n  const { type } = response.project.metadata.props || {}\n\n  // Create the new layout\n  const layout = await CoreContext.Request.createLayout({\n    collectionId,\n    projectId,\n    type: type || 'sceneless',\n    settings: {},\n    size: {\n      x: video.width,\n      y: video.height,\n    },\n  })\n\n  // Set the new layout on the project\n  const updateResponse = await CoreContext.clients\n    .LiveApi()\n    .project.updateProject({\n      collectionId,\n      projectId,\n      updateMask: ['metadata'],\n      metadata: {\n        ...metadata,\n        layoutId: layout.id,\n      },\n    })\n\n  CoreContext.log.debug('New layout assigned to project:', { layout })\n    \n  // Trigger event to update state\n  await triggerInternal('ProjectChanged', { project: updateResponse.project })\n\n  // Delete the previous layout\n  await CoreContext.clients.LayoutApi().layout.deleteLayout({\n    layoutId,\n  })\n\n  CoreContext.log.debug('Previous layout deleted:', { layoutId })\n\n  // Return the base project directly, for convenience\n  const internalProject = await hydrateProject(\n    updateResponse.project,\n    'ROLE_HOST' as SDK.Role,\n  )\n\n  // Add props to the root node\n  await internalProject.compositor.update(\n    internalProject.compositor.getRoot().id,\n    props,\n  )\n  return toBaseProject(internalProject)\n}\n\n/**\n * Delete a project.\n *\n * @category Project\n */\nexport const deleteProject = async (payload: {\n  projectId: SDK.Project['id']\n}) => {\n  const { projectId } = payload\n  await CoreContext.Request.deleteProject({\n    projectId,\n  })\n\n  // Trigger event to update state\n  await triggerInternal('ProjectRemoved', { projectId })\n  return\n}\n\n/**\n * Update a project's metadata with custom data opaque to the SDK.\n * Existing props are not affected unless explicitly overwritten.\n *\n * @category Project\n */\nexport const updateProjectProps = async (payload: {\n  projectId: SDK.Project['id']\n  /** Arbitrary metadata to associate with this project */\n  props?: Props\n}) => {\n  const { projectId } = payload\n  const collectionId = getUser().id\n  const project = getProject(projectId)\n\n  const props = {\n    ...project.props,\n    ...payload.props,\n  }\n  const response = await CoreContext.clients.LiveApi().project.updateProject({\n    collectionId,\n    projectId,\n    updateMask: ['metadata'],\n    metadata: {\n      ...project.videoApi.project.metadata,\n      props,\n    },\n  })\n\n  // Trigger event to update state\n  await triggerInternal('ProjectChanged', { project: response.project })\n  return\n}\n/**\n * @deprecated Use updateProjectProps\n */\nexport const updateProjectMeta = (payload: {\n  projectId: SDK.Project['id']\n  /** Arbitrary metadata to associate with this project */\n  meta?: Props\n}) => updateProjectProps({ projectId: payload.projectId, props: payload.meta })\n\n/**\n * @private Use updateProjectProps without internaltriggers\n */\nexport const updateProjectPropsWithoutTrigger = async (payload: {\n  projectId: SDK.Project['id']\n  /** Arbitrary metadata to associate with this project */\n  props?: Props\n}) => {\n  const { projectId } = payload\n  const collectionId = getUser().id\n  const project = getProject(projectId)\n\n  const props = {\n    ...project.props,\n    ...payload.props,\n  }\n  const response = await CoreContext.clients.LiveApi().project.updateProject({\n    collectionId,\n    projectId,\n    updateMask: ['metadata'],\n    metadata: {\n      ...project.videoApi.project.metadata,\n      props,\n    },\n  })\n  return\n}\n\n/**\n * Set the active project for the user, setting up event handlers and\n *  disposing of event listeners for the previous active project.\n *\n * This project will be used as the default project\n *  for commands that do not specify `payload.projectId`\n *\n * @category Project\n */\nexport const setActiveProject = async (payload: {\n  projectId: SDK.Project['id']\n}): Promise<SDK.Project> => {\n  const project = state.projects.find((x) => x.id === payload.projectId)\n  if (!project) {\n    state.activeProjectId = null\n    triggerInternal('ActiveProjectChanged', { projectId: null })\n    return\n  }\n\n  const currentProject = state.projects.find(\n    (x) => x.id === state.activeProjectId,\n  )\n  if (project === currentProject) return\n  if (currentProject) {\n    // Perform any necessary cleanup\n    Array.from(webrtcManager.rooms.keys()).map(webrtcManager.removeRoom)\n    await CoreContext.clients\n      .LayoutApi()\n      .unsubscribeFromLayout(currentProject.layoutApi.layoutId)\n    await CoreContext.clients\n      .LiveApi()\n      .unsubscribeFromProject(\n        currentProject.videoApi.project.collectionId,\n        currentProject.videoApi.project.projectId,\n      )\n  }\n\n  await CoreContext.clients\n    .LayoutApi()\n    .subscribeToLayout(project.layoutApi.layoutId)\n  await CoreContext.clients\n    .LiveApi()\n    .subscribeToProject(\n      project.videoApi.project.collectionId,\n      project.videoApi.project.projectId,\n    )\n\n  // Asynchronously ensure latest project state\n  CoreContext.clients\n    .LiveApi()\n    .project.getProject({\n      collectionId: project.videoApi.project.collectionId,\n      projectId: project.videoApi.project.projectId,\n      status: true,\n    })\n    .then((response) => {\n      triggerInternal('ProjectChanged', {\n        project: response.project,\n        phase: response.status?.phase,\n        broadcastId: response.status?.broadcastId,\n      })\n    })\n\n  triggerInternal('ActiveProjectChanged', {\n    projectId: project.id,\n  })\n  return toBaseProject(project)\n}\n\n/**\n * Initiate WebRTC connection to the room associated with this project.\n *\n * @category Project\n */\nexport const joinRoom = async (payload: {\n  projectId: SDK.Project['id']\n  /** A public name for other guests will see associated with your {@link Participant} */\n  displayName?: string\n}) => {\n  const { projectId, displayName = 'Guest' } = payload\n  const project = state.projects.find((x) => x.id === projectId)\n\n  // Get the SFU token\n  let token = project.sfuToken\n  if (!token) {\n    let { webrtcAccess } = await CoreContext.clients\n      .LiveApi()\n      .authentication.createWebRtcAccessToken({\n        collectionId: project.videoApi.project.collectionId,\n        projectId: project.videoApi.project.projectId,\n        displayName,\n      })\n    token = webrtcAccess.accessToken\n  }\n  const tokenData = decode(token) as any\n  const roomName = tokenData.video.room\n  const url = new URL(CoreContext.clients.getLiveKitServer())\n  const baseUrl = url.host + url.pathname\n  const roomContext = webrtcManager.ensureRoom(baseUrl, roomName, token)\n  roomContext.bindApiClient(CoreContext.clients)\n  await roomContext.connect()\n\n  project.sfuToken = token\n  project.roomId = roomName\n  const room = getRoom(roomName)\n  trigger('RoomJoined', {\n    projectId: project.id,\n    room,\n  })\n  return room\n}\n\n/**\n * Create a node within the project's scene tree.\n * A node is functionally comparable to a DOM Node - it serves only as a vessel\n * of properties.\n *\n * A node is not inherently useful. It is up to the renderer to interpret the data it holds.\n * If a node is given data the renderer is not aware of, it will accomplish nothing.\n *\n * ----\n * _Note: This is a low level interface. Abstractions like {@link ScenelessProject}\n * prevent the need for node manipulations._\n *\n * @internal _Use with caution_\n * @category Node\n */\nexport const createNode = async (payload: {\n  projectId?: string\n  props?: { [prop: string]: any }\n  parentId: string\n  index?: number\n}) => {\n  let {\n    props = {},\n    parentId,\n    index,\n    projectId = state.activeProjectId,\n  } = payload\n  const project = getProject(projectId)\n\n  // Update state\n  const nodeId = await project.compositor.insert(props, parentId, index)\n  triggerInternal('NodeAdded', { projectId, nodeId })\n  triggerInternal('NodeChanged', { projectId, nodeId: parentId })\n  return project.compositor.get(nodeId)\n}\n\n/**\n * Remove a node from the project's scene tree.\n *\n * ----\n * _Note: This is a low level interface. Abstractions like {@link ScenelessProject}\n * prevent the need for node manipulations._\n *\n * @internal _Use with caution_\n * @category Node\n */\nexport const deleteNode = async (payload: {\n  projectId?: string\n  nodeId: string\n}) => {\n  let { nodeId, projectId = state.activeProjectId } = payload\n  const project = getProject(projectId)\n  const parentId = project.compositor.getParent(nodeId)?.id\n\n  // Update state\n  project.compositor.remove(nodeId)\n  triggerInternal('NodeRemoved', { projectId, nodeId })\n  triggerInternal('NodeChanged', { projectId, nodeId: parentId })\n}\n\n/**\n * Update the properties of a node.\n * `payload.props` will be shallowly merged onto its existing `props`.\n *\n * ----\n * _Note: This is a low level interface. Abstractions like {@link ScenelessProject}\n * prevent the need for node manipulations._\n *\n * @internal _Use with caution_\n * @category Node\n */\nexport const updateNode = async (payload: {\n  projectId?: string\n  nodeId: string\n  props: { [prop: string]: any }\n}) => {\n  let { nodeId, props = {}, projectId = state.activeProjectId } = payload\n  const project = getProject(projectId)\n\n  // Prune protected fields\n  delete props.type\n  delete props.sourceType\n\n  // Update state\n  project.compositor.update(nodeId, props)\n  triggerInternal('NodeChanged', { projectId, nodeId })\n  return project.compositor.get(nodeId)\n}\n\n/**\n * Update the layout of a node.\n *\n * ----\n * _Note: This is a low level interface. Abstractions like {@link ScenelessProject}\n * prevent the need for node manipulations._\n *\n * @internal _Use with caution_\n * @category Node\n */\nexport const setNodeLayout = async (payload: {\n  projectId?: string\n  nodeId: string\n  layout: string\n  layoutProps?: { [prop: string]: any }\n}) => {\n  let {\n    nodeId,\n    layout,\n    projectId = state.activeProjectId,\n    layoutProps = {},\n  } = payload\n  const project = getProject(projectId)\n\n  // Update state\n  project.compositor.update(nodeId, {\n    layout,\n    layoutProps,\n  })\n  triggerInternal('NodeChanged', { projectId, nodeId })\n}\n\n/**\n * Move a node to a different parent node.\n *\n * ----\n * _Note: This is a low level interface. Abstractions like {@link ScenelessProject}\n * prevent the need for node manipulations._\n *\n * @internal _Use with caution_\n * @category Node\n */\nexport const moveNode = async (payload: {\n  projectId?: string\n  nodeId: string\n  parentId: string\n  index?: number\n}) => {\n  const { nodeId, parentId, projectId = state.activeProjectId, index } = payload\n  const project = getProject(projectId)\n\n  // Update state\n  project.compositor.move(nodeId, parentId, index)\n  // TODO: Determine if this is necessary (likely need only the events from Event API)\n  triggerInternal('NodeChanged', { projectId, nodeId })\n}\n\n/**\n * Swap the positions of two nodes, changing parents if necessary.\n *\n * ----\n * _Note: This is a low level interface. Abstractions like {@link ScenelessProject}\n * prevent the need for node manipulations._\n *\n * @internal _Use with caution_\n * @category Node\n */\nexport const swapNodes = async (payload: {\n  projectId?: string\n  nodeAId: string\n  nodeBId: string\n}) => {\n  const { nodeAId, nodeBId, projectId = state.activeProjectId } = payload\n  const project = getProject(projectId)\n\n  const parentAId = project.compositor.getParent(nodeAId)?.id\n  const parentBId = project.compositor.getParent(nodeBId)?.id\n\n  // Update state\n  project.compositor.swap(nodeAId, nodeBId)\n  triggerInternal('NodeChanged', { projectId, nodeId: parentAId })\n  triggerInternal('NodeChanged', { projectId, nodeId: parentBId })\n}\n\n/**\n * Change the order of a node's children.\n *\n * ----\n * _Note: This is a low level interface. Abstractions like {@link ScenelessProject}\n * prevent the need for node manipulations._\n *\n * @internal _Use with caution_\n * @category Node\n */\nexport const reorderNodes = async (payload: {\n  projectId?: string\n  parentId: string\n  childIds: string[]\n}) => {\n  const { parentId, childIds, projectId = state.activeProjectId } = payload\n  const project = getProject(projectId)\n\n  // Update state\n  project.compositor.reorder(parentId, childIds)\n  triggerInternal('NodeChanged', { projectId, nodeId: parentId })\n}\n\n/**\n * Start broadcasting a project.\n *\n * ----\n * _Note: Destination, encoding, and rendering details will be read from the Project\n * at time of broadcast, so they should be updated ahead of time._\n *\n * @category Broadcast\n */\nexport const startBroadcast = async (payload: { projectId?: string }) => {\n  const { projectId = state.activeProjectId } = payload\n  const project = getProject(projectId)\n  await CoreContext.clients.LiveApi().project.startProjectBroadcast({\n    collectionId: project.videoApi.project.collectionId,\n    projectId: project.videoApi.project.projectId,\n  })\n  // Event is handled on receiving end of VideoAPI\n}\n\n/**\n * Stop broadcasting a project.\n *\n * @category Broadcast\n */\nexport const stopBroadcast = async (payload: { projectId?: string }) => {\n  const { projectId = state.activeProjectId } = payload\n  const project = getProject(projectId)\n  await CoreContext.clients.LiveApi().project.stopProjectBroadcast({\n    collectionId: project.videoApi.project.collectionId,\n    projectId: project.videoApi.project.projectId,\n  })\n  // Event is handled on receiving end of VideoAPI\n}\n\n/**\n * Add a {@link Destination} to a project.\n *\n * @category Destination\n */\nexport const addDestination = async (payload: {\n  projectId?: string\n  rtmpUrl: string\n  rtmpKey: string\n  enabled: boolean\n  props?: Props\n  /** @deprecated Use `props` */\n  metadata?: Props\n}) => {\n  const {\n    rtmpUrl,\n    rtmpKey,\n    enabled,\n    projectId = state.activeProjectId,\n    metadata = {},\n    props = {},\n  } = payload\n  const project = getProject(projectId)\n  const address = {\n    rtmpPush: {\n      key: rtmpKey,\n      url: rtmpUrl,\n    },\n  } as SDK.Destination['address']\n\n  const response = await CoreContext.clients\n    .LiveApi()\n    .destination?.createDestination({\n      collectionId: project.videoApi.project.collectionId,\n      projectId: project.videoApi.project.projectId,\n      address,\n      enabled,\n      metadata: {\n        props: {\n          ...metadata,\n          ...props,\n        },\n      },\n    })\n\n  // Trigger event to update state\n  await triggerInternal('DestinationAdded', response.destination)\n  return toBaseDestination(response.destination)\n}\n\n/**\n * Remove a {@link Destination} from the project.\n *\n * @category Destination\n */\nexport const removeDestination = async (payload: {\n  projectId?: string\n  destinationId: string\n}) => {\n  const { destinationId, projectId = state.activeProjectId } = payload\n  const project = getProject(projectId)\n\n  await CoreContext.clients.LiveApi().destination?.deleteDestination({\n    collectionId: project.videoApi.project.collectionId,\n    projectId: project.videoApi.project.projectId,\n    destinationId,\n  })\n\n  // Trigger event to update state\n  await triggerInternal('DestinationRemoved', { projectId, destinationId })\n  return\n}\n\n/**\n * Update an existing {@link Destination} on the project.\n *\n * @category Destination\n */\nexport const updateDestination = async (payload: {\n  projectId?: string\n  destinationId: string\n  rtmpUrl: string\n  rtmpKey: string\n}) => {\n  const {\n    rtmpUrl,\n    rtmpKey,\n    destinationId,\n    projectId = state.activeProjectId,\n  } = payload\n  const project = getProject(projectId)\n\n  const rtmpPush = {\n    key: rtmpKey,\n    url: rtmpUrl,\n  }\n\n  const response = await CoreContext.clients\n    .LiveApi()\n    .destination?.updateDestination({\n      collectionId: project.videoApi.project.collectionId,\n      projectId: project.videoApi.project.projectId,\n      destinationId,\n      updateMask: ['address.rtmpPush'],\n      address: {\n        rtmpPush,\n      },\n    })\n\n  // Trigger event to update state\n  await triggerInternal('DestinationChanged', response.destination)\n  return\n}\n\n/**\n * Update the metadata of an existing {@link Destination} on the project.\n *\n * @category Destination\n */\nexport const updateDestinationProps = async (payload: {\n  projectId: string\n  destinationId: string\n  props: Props\n}) => {\n  const {\n    projectId = state.activeProjectId,\n    destinationId,\n    props = {},\n  } = payload\n  const project = getProject(projectId)\n  const destination = project.videoApi.project.destinations.find(\n    (x) => x.destinationId === destinationId,\n  )\n  if (!destination) return\n\n  const response = await CoreContext.clients\n    .LiveApi()\n    .destination?.updateDestination({\n      collectionId: project.videoApi.project.collectionId,\n      projectId: project.videoApi.project.projectId,\n      destinationId,\n      updateMask: ['metadata'],\n      metadata: {\n        ...(destination.metadata || {}),\n        props: {\n          ...(destination.metadata?.props || {}),\n          ...props,\n        },\n      },\n    })\n\n  // Trigger event to update state\n  await triggerInternal('DestinationChanged', response.destination)\n  return\n}\n/**\n * @deprecated Use updateDestinationProps\n */\nexport const updateDestinationMeta = (payload: {\n  projectId: string\n  destinationId: string\n  metadata?: Props\n}) =>\n  updateDestinationProps({\n    projectId: payload.projectId,\n    destinationId: payload.destinationId,\n    props: payload.metadata,\n  })\n\n/**\n * Enable or disable an existing {@link Destination} on the project.\n *\n * @category Destination\n */\nexport const setDestinationEnabled = async (payload: {\n  projectId?: string\n  destinationId: string\n  enabled: boolean\n}) => {\n  const { enabled, destinationId, projectId = state.activeProjectId } = payload\n  const project = getProject(projectId)\n  const destination = project.videoApi.project.destinations.find(\n    (x) => destinationId === x.destinationId,\n  )\n  if (destination.enabled === enabled) return\n\n  const response = await CoreContext.clients\n    .LiveApi()\n    .destination?.updateDestination({\n      collectionId: project.videoApi.project.collectionId,\n      projectId: project.videoApi.project.projectId,\n      destinationId,\n      updateMask: ['enabled'],\n      enabled,\n    })\n\n  // Trigger event to update state\n  await triggerInternal('DestinationChanged', response.destination)\n\n  const event = enabled ? 'DestinationEnabled' : 'DestinationDisabled'\n  /** @deprecated Use DestinationChanged */\n  trigger(event, {\n    projectId,\n    destinationId,\n  })\n  return\n}\n\n/**\n * Overwrite project's first {@link Destination} with new configuration\n *  If no destination exists, one will be created instead.\n *\n * This is a helper to manage a single-destination project. For greater control,\n *  use {@link addDestination}, {@link removeDestination}, or {@link updateDestination}\n *\n * @category Destination\n */\nexport const setDestination = async (payload: {\n  projectId?: string\n  rtmpUrl: string\n  rtmpKey: string\n}) => {\n  const { rtmpUrl, rtmpKey, projectId = state.activeProjectId } = payload\n  const project = getProject(projectId)\n  const rtmpPush = {\n    key: rtmpKey,\n    url: rtmpUrl,\n  }\n  const enabled = true\n\n  if (project.videoApi.project.destinations.length > 0) {\n    // Update existing\n    const response = await CoreContext.clients\n      .LiveApi()\n      .destination?.updateDestination({\n        collectionId: project.videoApi.project.collectionId,\n        projectId: project.videoApi.project.projectId,\n        destinationId: project.videoApi.project.destinations[0].destinationId,\n        updateMask: ['address.rtmpPush'],\n        address: { rtmpPush },\n      })\n\n    // Trigger event to update state\n    await triggerInternal('DestinationChanged', response.destination)\n  } else {\n    // Create new\n    const response = await CoreContext.clients\n      .LiveApi()\n      .destination?.createDestination({\n        collectionId: project.videoApi.project.collectionId,\n        projectId: project.videoApi.project.projectId,\n        address: { rtmpPush },\n        enabled,\n      })\n\n    // Trigger event to update state\n    await triggerInternal('DestinationAdded', response.destination)\n  }\n\n  /** @deprecated */\n  trigger('DestinationSet', {\n    projectId,\n    rtmpUrl,\n    rtmpKey,\n  })\n  return\n}\n"],"names":["state","CoreContext","updateUserProps","payload","collection","getUser","props","response","clients","LiveApi","updateCollection","collectionId","id","updateMask","metadata","triggerInternal","createProject","size","settings","Request","project","internalProject","hydrateProject","toBaseProject","recreateLayout","projectId","getProject","status","SDK","PROJECT_BROADCAST_PHASE_RUNNING","PROJECT_BROADCAST_PHASE_STARTING","includes","phase","layoutId","video","rendering","type","layout","createLayout","x","width","y","height","updateResponse","updateProject","log","debug","LayoutApi","deleteLayout","compositor","update","getRoot","deleteProject","updateProjectProps","videoApi","updateProjectMeta","meta","updateProjectPropsWithoutTrigger","setActiveProject","projects","find","activeProjectId","currentProject","Array","from","webrtcManager","rooms","keys","map","removeRoom","unsubscribeFromLayout","layoutApi","unsubscribeFromProject","subscribeToLayout","subscribeToProject","then","broadcastId","joinRoom","displayName","token","sfuToken","webrtcAccess","authentication","createWebRtcAccessToken","accessToken","roomName","decode","room","url","URL","getLiveKitServer","baseUrl","host","pathname","roomContext","ensureRoom","bindApiClient","connect","roomId","getRoom","trigger","createNode","parentId","index","nodeId","insert","get","deleteNode","getParent","remove","updateNode","sourceType","setNodeLayout","layoutProps","moveNode","move","swapNodes","nodeAId","nodeBId","parentAId","parentBId","swap","reorderNodes","childIds","reorder","startBroadcast","startProjectBroadcast","stopBroadcast","stopProjectBroadcast","addDestination","rtmpUrl","rtmpKey","enabled","address","rtmpPush","key","destination","createDestination","toBaseDestination","removeDestination","destinationId","deleteDestination","updateDestination","updateDestinationProps","destinations","updateDestinationMeta","setDestinationEnabled","setDestination","length"],"mappings":"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"}