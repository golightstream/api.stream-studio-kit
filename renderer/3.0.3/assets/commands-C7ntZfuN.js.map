{"version":3,"file":"commands-C7ntZfuN.js","sources":["../../../../src/core/commands.ts"],"sourcesContent":["/* ---------------------------------------------------------------------------------------------\n * Copyright (c) Infiniscene, Inc. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * -------------------------------------------------------------------------------------------- */\n/**\n * Commands represent actions that can be taken by a user.\n *\n * Most commands accept a contextual parameter `projectId`.\n * If this parameter is excluded from a function call, the user's\n * active project will be used instead.\n *\n * Upon completion, a command may emit zero or more {@link EventMap Events}. Commands\n * return Promises that will attempt to resolve to the most pertinent value.\n * However, it is good practice to instead rely on events where possible, when\n * updating application state.\n *\n * For example, listening for the event `BroadcastStarted` will indicate\n * the following scenarios:\n *\n *   - The current user has initiated a broadcast\n *   - A collaborator (or host) has initiated a broadcast\n *   - Some external force has initiated a broadcast\n *\n * When depending on the Event rather than the command's return value, we can\n * be sure that our state is updating under all relevant circumstances.\n *\n * ----\n *\n * _Note: Commands marked `internal` are low-level commands that should only be\n * used with caution. Higher-level abstractions should be used to manipulate Nodes\n * (elements on the stream canvas)._\n *\n * @private This module is currently hidden from users of the Studio Kit.\n *  Favor the creation of helpers when supporting developers who require\n *  functionality contained in this module.\n *\n * @module Commands\n */\n\nimport {\n  getProject,\n  getUser,\n  hydrateProject,\n  toBaseDestination,\n  toBaseProject,\n} from './data'\nimport { CoreContext } from './context'\nimport { jwtDecode } from 'jwt-decode'\nimport { Props } from './types'\nimport { SDK } from './namespaces'\nimport { LiveApiModel } from '@api.stream/sdk'\nimport { webrtcManager } from './webrtc'\nimport { getRoom } from './webrtc/simple-room'\nimport { trigger, triggerInternal } from './events'\n\nconst { state } = CoreContext\n\n/**\n * Update the current user's metadata with custom data opaque to the SDK.\n * Existing props are not affected unless explicitly overwritten.\n *\n * @category User\n */\nexport const updateUserProps = async (payload: {\n  /** Arbitrary metadata to associate with the user */\n  props?: Props\n}) => {\n  const collection = getUser()\n  if (!collection) return\n\n  const props = {\n    ...collection.props,\n    ...payload.props,\n  }\n  const response = await CoreContext.clients\n    .LiveApi()\n    .collection.updateCollection({\n      collectionId: collection.id,\n      updateMask: ['metadata'],\n      metadata: {\n        ...collection.metadata,\n        props,\n      },\n    })\n\n  // Trigger event to update state\n  await triggerInternal('UserChanged', response.collection)\n  return\n}\n\n/**\n * Create a source\n *\n * @category Source\n */\nexport const createSource = async (payload: {\n  projectId: string\n  displayName?: string\n}) => {\n  const collectionId = getUser().id\n\n  const { source } = await CoreContext.clients.LiveApi().source.createSource({\n    metadata: {},\n    collectionId,\n    address: {\n      rtmpPush: {\n        enabled: true,\n      },\n    },\n    preview: {\n      webrtc: {\n        enabled: true,\n        displayName: payload.displayName || 'RTMP Source',\n      },\n    },\n  })\n\n  // Trigger event to update state\n  await triggerInternal('SourceAdded', source)\n\n  // Add source to project\n\n  const response = await CoreContext.clients\n    .LiveApi()\n    .source.addSourceToProject({\n      collectionId,\n      projectId: payload.projectId,\n      sourceId: source.sourceId,\n    })\n\n  await triggerInternal('ProjectSourceAdded', {\n    projectId: response.project.projectId,\n    source,\n  })\n\n  return source\n}\n\n/**\n * Get all sources in the collection\n *\n * @category Source\n */\nconst getSources = async () => {\n  const collectionId = getUser().id\n\n  const { sources } = await CoreContext.clients\n    .LiveApi()\n    .source.getSources({ collectionId })\n\n  return sources\n}\n\nconst getSource = async (payload: { sourceId: string }) => {\n  const collectionId = getUser().id\n\n  const { source } = await CoreContext.clients.LiveApi().source.getSource({\n    collectionId,\n    sourceId: payload.sourceId,\n  })\n\n  return source\n}\n\n/**\n * Update a source metadata and/or displayName\n *\n * @category Source\n */\nexport const updateSource = async (payload: {\n  sourceId: string\n  metadata?: any\n  displayName?: string\n}) => {\n  const collectionId = getUser().id\n  let updateMask: string[] = []\n  let updateProps: Partial<LiveApiModel.UpdateSourceRequest> = {}\n  if (payload.metadata) {\n    updateMask.push('metadata')\n    updateProps.metadata = payload.metadata\n  }\n  if (payload.displayName) {\n    updateMask.push('preview.webrtc.displayName')\n    updateProps = {\n      ...updateProps,\n      preview: {\n        webrtc: {\n          displayName: payload.displayName,\n        },\n      },\n    }\n  }\n  const { source } = await CoreContext.clients.LiveApi().source.updateSource({\n    collectionId,\n    updateMask,\n    sourceId: payload.sourceId,\n    ...updateProps,\n  })\n\n  // Trigger event to update state\n  await triggerInternal('SourceChanged', source)\n\n  return source\n}\n\n/**\n * Delete a source\n *\n * @category Source\n */\nexport const deleteSource = async (payload: {\n  projectId: string\n  sourceId: string\n  force?: boolean\n}) => {\n  const collectionId = getUser().id\n  const removeRes = await CoreContext.clients\n    .LiveApi()\n    .source.removeSourceFromProject({\n      collectionId,\n      projectId: payload.projectId,\n      sourceId: payload.sourceId,\n    })\n\n  await triggerInternal('ProjectSourceRemoved', {\n    projectId: payload.projectId,\n    sourceId: payload.sourceId,\n  })\n\n  const response = await CoreContext.clients\n    .LiveApi()\n    .source.deleteSource({ sourceId: payload.sourceId, collectionId })\n\n  await triggerInternal('SourceRemoved', payload.sourceId)\n  return response\n}\n\n/**\n * Create a project with optional metadata.\n *\n * ----\n * _Note: This is a low level function that necessitates careful management\n *  of the nodes within. Consider {@link ScenelessProject.create} instead._\n *\n * @category Project\n */\nexport const createProject = async (\n  payload: {\n    /** @private Settings associated with ScenelessProject (or other such wrapper) */\n    settings?: { [prop: string]: any }\n    /** Arbitrary metadata to associate with this project */\n    props?: Props\n    /** Pixel dimenions of the canvas (default: `{ x: 1280, y: 720 }`) */\n    size?: { x: number; y: number }\n  } = {},\n) => {\n  const { props = {}, size, settings = {} } = payload\n  const response = await CoreContext.Request.createProject({\n    settings,\n    props,\n    size,\n  })\n\n  // Trigger event to update state\n  await triggerInternal('ProjectAdded', response.project)\n\n  // Return the base project directly, for convenience\n  const internalProject = await hydrateProject(\n    response.project,\n    'ROLE_HOST' as SDK.Role,\n  )\n  return toBaseProject(internalProject)\n}\n\n/**\n * @private\n * Recreate a project's associated layout\n */\nexport const recreateLayout = async (payload: {\n  projectId: string\n  props?: Props\n}) => {\n  const { projectId, props = {} } = payload\n  const collectionId = getUser().id\n\n  // Get the Vapi project\n  const response = await CoreContext.clients.LiveApi().project.getProject({\n    collectionId,\n    projectId,\n    status: true,\n  })\n\n  // Return if the project is actively broadcasting\n  if (\n    [\n      SDK.ProjectBroadcastPhase.PROJECT_BROADCAST_PHASE_RUNNING,\n      SDK.ProjectBroadcastPhase.PROJECT_BROADCAST_PHASE_STARTING,\n    ].includes(response.status.phase)\n  ) {\n    return\n  }\n\n  const metadata = response.project.metadata || {}\n  const { layoutId } = metadata\n  const { video } = response.project.rendering\n  const { type } = response.project.metadata.props || {}\n\n  // Create the new layout\n  const layout = await CoreContext.Request.createLayout({\n    collectionId,\n    projectId,\n    type: type || 'sceneless',\n    settings: {},\n    size: {\n      x: video.width,\n      y: video.height,\n    },\n  })\n\n  // Set the new layout on the project\n  const updateResponse = await CoreContext.clients\n    .LiveApi()\n    .project.updateProject({\n      collectionId,\n      projectId,\n      updateMask: ['metadata'],\n      metadata: {\n        ...metadata,\n        layoutId: layout.id,\n      },\n    })\n\n  CoreContext.log.debug('New layout assigned to project:', { layout })\n\n  // Trigger event to update state\n  await triggerInternal('ProjectChanged', { project: updateResponse.project })\n\n  // Delete the previous layout\n  await CoreContext.clients.LayoutApi().layout.deleteLayout({\n    layoutId,\n  })\n\n  CoreContext.log.debug('Previous layout deleted:', { layoutId })\n\n  // Return the base project directly, for convenience\n  const internalProject = await hydrateProject(\n    updateResponse.project,\n    'ROLE_HOST' as SDK.Role,\n  )\n\n  // Add props to the root node\n  await internalProject.compositor.update(\n    internalProject.compositor.getRoot().id,\n    props,\n  )\n\n  /** return original project as well as internal project */\n  return { project: toBaseProject(internalProject), internalProject }\n}\n/**\n * Delete a project.\n *\n * @category Project\n */\nexport const deleteProject = async (payload: {\n  projectId: SDK.Project['id']\n}) => {\n  const { projectId } = payload\n  await CoreContext.Request.deleteProject({\n    projectId,\n  })\n\n  // Trigger event to update state\n  await triggerInternal('ProjectRemoved', { projectId })\n  return\n}\n\n/**\n * Update a project's metadata with custom data opaque to the SDK.\n * Existing props are not affected unless explicitly overwritten.\n *\n * @category Project\n */\nexport const updateProjectProps = async (payload: {\n  projectId: SDK.Project['id']\n  /** Arbitrary metadata to associate with this project */\n  props?: Props\n}) => {\n  const { projectId } = payload\n  const collectionId = getUser().id\n  const project = getProject(projectId)\n\n  const props = {\n    ...project.props,\n    ...payload.props,\n  }\n  const response = await CoreContext.clients.LiveApi().project.updateProject({\n    collectionId,\n    projectId,\n    updateMask: ['metadata'],\n    metadata: {\n      ...project.videoApi.project.metadata,\n      props,\n    },\n  })\n\n  // Trigger event to update state\n  await triggerInternal('ProjectChanged', { project: response.project })\n  return\n}\n\n/**\n * @private Use updateProjectProps without internaltriggers\n */\nexport const updateProjectPropsWithoutTrigger = async (payload: {\n  projectId: SDK.Project['id']\n  /** Arbitrary metadata to associate with this project */\n  props?: Props\n}) => {\n  const { projectId } = payload\n  const collectionId = getUser().id\n  const project = getProject(projectId)\n\n  const props = {\n    ...project.props,\n    ...payload.props,\n  }\n  const response = await CoreContext.clients.LiveApi().project.updateProject({\n    collectionId,\n    projectId,\n    updateMask: ['metadata'],\n    metadata: {\n      ...project.videoApi.project.metadata,\n      props,\n    },\n  })\n  return\n}\n\n/**\n * Set the active project for the user, setting up event handlers and\n *  disposing of event listeners for the previous active project.\n *\n * This project will be used as the default project\n *  for commands that do not specify `payload.projectId`\n *\n * @category Project\n */\nexport const setActiveProject = async (payload: {\n  projectId: SDK.Project['id']\n}): Promise<SDK.Project> => {\n  const project = state.projects.find((x) => x.id === payload.projectId)\n  if (!project) {\n    state.activeProjectId = null\n    triggerInternal('ActiveProjectChanged', { projectId: null })\n    return\n  }\n\n  const currentProject = state.projects.find(\n    (x) => x.id === state.activeProjectId,\n  )\n  if (project === currentProject) return\n  if (currentProject) {\n    // Perform any necessary cleanup\n    Array.from(webrtcManager.rooms.keys()).map(webrtcManager.removeRoom)\n    await CoreContext.clients\n      .LayoutApi()\n      .unsubscribeFromLayout(currentProject.layoutApi.layoutId)\n    await CoreContext.clients\n      .LiveApi()\n      .unsubscribeFromProject(\n        currentProject.videoApi.project.collectionId,\n        currentProject.videoApi.project.projectId,\n      )\n  }\n\n  await CoreContext.clients\n    .LayoutApi()\n    .subscribeToLayout(project.layoutApi.layoutId)\n  await CoreContext.clients\n    .LiveApi()\n    .subscribeToProject(\n      project.videoApi.project.collectionId,\n      project.videoApi.project.projectId,\n    )\n\n  // Asynchronously ensure latest project state\n  CoreContext.clients\n    .LiveApi()\n    .project.getProject({\n      collectionId: project.videoApi.project.collectionId,\n      projectId: project.videoApi.project.projectId,\n      status: true,\n    })\n    .then((response) => {\n      triggerInternal('ProjectChanged', {\n        project: response.project,\n        phase: response.status?.phase,\n        broadcastId: response.status?.broadcastId,\n      })\n    })\n\n  triggerInternal('ActiveProjectChanged', {\n    projectId: project.id,\n  })\n  return toBaseProject(project)\n}\n\n/**\n * Initiate WebRTC connection to the room associated with this project.\n *\n * @category Project\n */\nexport const joinRoom = async (payload: {\n  projectId: SDK.Project['id']\n  /** A public name for other guests will see associated with your {@link Participant} */\n  displayName?: string\n}) => {\n  const { projectId, displayName = 'Guest' } = payload\n  const project = state.projects.find((x) => x.id === projectId)\n\n  // Get the SFU token\n  let token = project.sfuToken\n  if (!token) {\n    let { webrtcAccess } = await CoreContext.clients\n      .LiveApi()\n      .authentication.createWebRtcAccessToken({\n        collectionId: project.videoApi.project.collectionId,\n        projectId: project.videoApi.project.projectId,\n        displayName,\n      })\n    token = webrtcAccess.accessToken\n  }\n  const tokenData = jwtDecode(token) as any\n  const roomName = tokenData.video.room\n  const url = new URL(CoreContext.clients.getLiveKitServer())\n  const baseUrl = url.host + url.pathname\n  const roomContext = webrtcManager.ensureRoom(baseUrl, roomName, token)\n  roomContext.bindApiClient(CoreContext.clients)\n  await roomContext.connect()\n\n  project.sfuToken = token\n  project.roomId = roomName\n  const room = getRoom(roomName)\n  trigger('RoomJoined', {\n    projectId: project.id,\n    room,\n  })\n  return room\n}\n\n/**\n * Create a node within the project's scene tree.\n * A node is functionally comparable to a DOM Node - it serves only as a vessel\n * of properties.\n *\n * A node is not inherently useful. It is up to the renderer to interpret the data it holds.\n * If a node is given data the renderer is not aware of, it will accomplish nothing.\n *\n * ----\n * _Note: This is a low level interface. Abstractions like {@link ScenelessProject}\n * prevent the need for node manipulations._\n *\n * @internal _Use with caution_\n * @category Node\n */\nexport const createNode = async (payload: {\n  projectId?: string\n  props?: { [prop: string]: any }\n  parentId: string\n  index?: number\n}) => {\n  let {\n    props = {},\n    parentId,\n    index,\n    projectId = state.activeProjectId,\n  } = payload\n  const project = getProject(projectId)\n\n  // Update state\n  const nodeId = await project.compositor.insert(props, parentId, index)\n  triggerInternal('NodeAdded', { projectId, nodeId })\n  triggerInternal('NodeChanged', { projectId, nodeId: parentId })\n  return project.compositor.get(nodeId)\n}\n\n/**\n * Remove a node from the project's scene tree.\n *\n * ----\n * _Note: This is a low level interface. Abstractions like {@link ScenelessProject}\n * prevent the need for node manipulations._\n *\n * @internal _Use with caution_\n * @category Node\n */\nexport const deleteNode = async (payload: {\n  projectId?: string\n  nodeId: string\n}) => {\n  let { nodeId, projectId = state.activeProjectId } = payload\n  const project = getProject(projectId)\n  const parentId = project.compositor.getParent(nodeId)?.id\n\n  // Update state\n  project.compositor.remove(nodeId)\n  triggerInternal('NodeRemoved', { projectId, nodeId })\n  triggerInternal('NodeChanged', { projectId, nodeId: parentId })\n}\n\n/**\n * Update the properties of a node.\n * `payload.props` will be shallowly merged onto its existing `props`.\n *\n * ----\n * _Note: This is a low level interface. Abstractions like {@link ScenelessProject}\n * prevent the need for node manipulations._\n *\n * @internal _Use with caution_\n * @category Node\n */\nexport const updateNode = async (payload: {\n  projectId?: string\n  nodeId: string\n  props: { [prop: string]: any }\n}) => {\n  let { nodeId, props = {}, projectId = state.activeProjectId } = payload\n  const project = getProject(projectId)\n\n  // Prune protected fields\n  delete props.type\n  delete props.sourceType\n\n  // Update state\n  project.compositor.update(nodeId, props)\n  triggerInternal('NodeChanged', { projectId, nodeId })\n  return project.compositor.get(nodeId)\n}\n\n/**\n * Update the layout of a node.\n *\n * ----\n * _Note: This is a low level interface. Abstractions like {@link ScenelessProject}\n * prevent the need for node manipulations._\n *\n * @internal _Use with caution_\n * @category Node\n */\nexport const setNodeLayout = async (payload: {\n  projectId?: string\n  nodeId: string\n  layout: string\n  layoutProps?: { [prop: string]: any }\n}) => {\n  let {\n    nodeId,\n    layout,\n    projectId = state.activeProjectId,\n    layoutProps = {},\n  } = payload\n  const project = getProject(projectId)\n\n  // Update state\n  project.compositor.update(nodeId, {\n    layout,\n    layoutProps,\n  })\n  triggerInternal('NodeChanged', { projectId, nodeId })\n}\n\n/**\n * Move a node to a different parent node.\n *\n * ----\n * _Note: This is a low level interface. Abstractions like {@link ScenelessProject}\n * prevent the need for node manipulations._\n *\n * @internal _Use with caution_\n * @category Node\n */\nexport const moveNode = async (payload: {\n  projectId?: string\n  nodeId: string\n  parentId: string\n  index?: number\n}) => {\n  const { nodeId, parentId, projectId = state.activeProjectId, index } = payload\n  const project = getProject(projectId)\n\n  // Update state\n  project.compositor.move(nodeId, parentId, index)\n  // TODO: Determine if this is necessary (likely need only the events from Event API)\n  triggerInternal('NodeChanged', { projectId, nodeId })\n}\n\n/**\n * Swap the positions of two nodes, changing parents if necessary.\n *\n * ----\n * _Note: This is a low level interface. Abstractions like {@link ScenelessProject}\n * prevent the need for node manipulations._\n *\n * @internal _Use with caution_\n * @category Node\n */\nexport const swapNodes = async (payload: {\n  projectId?: string\n  nodeAId: string\n  nodeBId: string\n}) => {\n  const { nodeAId, nodeBId, projectId = state.activeProjectId } = payload\n  const project = getProject(projectId)\n\n  const parentAId = project.compositor.getParent(nodeAId)?.id\n  const parentBId = project.compositor.getParent(nodeBId)?.id\n\n  // Update state\n  project.compositor.swap(nodeAId, nodeBId)\n  triggerInternal('NodeChanged', { projectId, nodeId: parentAId })\n  triggerInternal('NodeChanged', { projectId, nodeId: parentBId })\n}\n\n/**\n * Change the order of a node's children.\n *\n * ----\n * _Note: This is a low level interface. Abstractions like {@link ScenelessProject}\n * prevent the need for node manipulations._\n *\n * @internal _Use with caution_\n * @category Node\n */\nexport const reorderNodes = async (payload: {\n  projectId?: string\n  parentId: string\n  childIds: string[]\n}) => {\n  const { parentId, childIds, projectId = state.activeProjectId } = payload\n  const project = getProject(projectId)\n\n  // Update state\n  project.compositor.reorder(parentId, childIds)\n  triggerInternal('NodeChanged', { projectId, nodeId: parentId })\n}\n\n/**\n * Start broadcasting a project.\n *\n * ----\n * _Note: Destination, encoding, and rendering details will be read from the Project\n * at time of broadcast, so they should be updated ahead of time._\n *\n * @category Broadcast\n */\nexport const startBroadcast = async (payload: { projectId?: string }) => {\n  const { projectId = state.activeProjectId } = payload\n  const project = getProject(projectId)\n\n  await CoreContext.clients.LiveApi().project.startProjectBroadcast({\n    collectionId: project.videoApi.project.collectionId,\n    projectId: project.videoApi.project.projectId,\n  })\n  // Event is handled on receiving end of VideoAPI\n}\n\n/**\n * Stop broadcasting a project.\n *\n * @category Broadcast\n */\nexport const stopBroadcast = async (payload: { projectId?: string }) => {\n  const { projectId = state.activeProjectId } = payload\n  const project = getProject(projectId)\n  await CoreContext.clients.LiveApi().project.stopProjectBroadcast({\n    collectionId: project.videoApi.project.collectionId,\n    projectId: project.videoApi.project.projectId,\n  })\n  // Event is handled on receiving end of VideoAPI\n}\n\n/**\n * Add a {@link Destination} to a project.\n *\n * @category Destination\n */\nexport const addDestination = async (payload: {\n  projectId?: string\n  rtmpUrl: string\n  rtmpKey: string\n  enabled: boolean\n  props?: Props\n}) => {\n  const {\n    rtmpUrl,\n    rtmpKey,\n    enabled,\n    projectId = state.activeProjectId,\n    props = {},\n  } = payload\n  const project = getProject(projectId)\n  const address = {\n    rtmpPush: {\n      key: rtmpKey,\n      url: rtmpUrl,\n    },\n  } as SDK.Destination['address']\n\n  const response = await CoreContext.clients\n    .LiveApi()\n    .destination?.createDestination({\n      collectionId: project.videoApi.project.collectionId,\n      projectId: project.videoApi.project.projectId,\n      address,\n      enabled,\n      metadata: {\n        props,\n      },\n    })\n\n  // Trigger event to update state\n  await triggerInternal('DestinationAdded', response.destination)\n  return toBaseDestination(response.destination)\n}\n\n/**\n * Remove a {@link Destination} from the project.\n *\n * @category Destination\n */\nexport const removeDestination = async (payload: {\n  projectId?: string\n  destinationId: string\n}) => {\n  const { destinationId, projectId = state.activeProjectId } = payload\n  const project = getProject(projectId)\n\n  await CoreContext.clients.LiveApi().destination?.deleteDestination({\n    collectionId: project.videoApi.project.collectionId,\n    projectId: project.videoApi.project.projectId,\n    destinationId,\n  })\n\n  // Trigger event to update state\n  await triggerInternal('DestinationRemoved', { projectId, destinationId })\n  return\n}\n\n/**\n * Update an existing {@link Destination} on the project.\n *\n * @category Destination\n */\nexport const updateDestination = async (payload: {\n  projectId?: string\n  destinationId: string\n  rtmpUrl: string\n  rtmpKey: string\n}) => {\n  const {\n    rtmpUrl,\n    rtmpKey,\n    destinationId,\n    projectId = state.activeProjectId,\n  } = payload\n  const project = getProject(projectId)\n\n  const rtmpPush = {\n    key: rtmpKey,\n    url: rtmpUrl,\n  }\n\n  const response = await CoreContext.clients\n    .LiveApi()\n    .destination?.updateDestination({\n      collectionId: project.videoApi.project.collectionId,\n      projectId: project.videoApi.project.projectId,\n      destinationId,\n      updateMask: ['address.rtmpPush'],\n      address: {\n        rtmpPush,\n      },\n    })\n\n  // Trigger event to update state\n  await triggerInternal('DestinationChanged', response.destination)\n  return\n}\n\n/**\n * Update the metadata of an existing {@link Destination} on the project.\n *\n * @category Destination\n */\nexport const updateDestinationProps = async (payload: {\n  projectId: string\n  destinationId: string\n  props: Props\n}) => {\n  const {\n    projectId = state.activeProjectId,\n    destinationId,\n    props = {},\n  } = payload\n  const project = getProject(projectId)\n  const destination = project.videoApi.project.destinations.find(\n    (x) => x.destinationId === destinationId,\n  )\n  if (!destination) return\n\n  const response = await CoreContext.clients\n    .LiveApi()\n    .destination?.updateDestination({\n      collectionId: project.videoApi.project.collectionId,\n      projectId: project.videoApi.project.projectId,\n      destinationId,\n      updateMask: ['metadata'],\n      metadata: {\n        ...(destination.metadata || {}),\n        props: {\n          ...(destination.metadata?.props || {}),\n          ...props,\n        },\n      },\n    })\n\n  // Trigger event to update state\n  await triggerInternal('DestinationChanged', response.destination)\n  return\n}\n\n/**\n * Enable or disable an existing {@link Destination} on the project.\n *\n * @category Destination\n */\nexport const setDestinationEnabled = async (payload: {\n  projectId?: string\n  destinationId: string\n  enabled: boolean\n}) => {\n  const { enabled, destinationId, projectId = state.activeProjectId } = payload\n  const project = getProject(projectId)\n  const destination = project.videoApi.project.destinations.find(\n    (x) => destinationId === x.destinationId,\n  )\n  if (destination.enabled === enabled) return\n\n  const response = await CoreContext.clients\n    .LiveApi()\n    .destination?.updateDestination({\n      collectionId: project.videoApi.project.collectionId,\n      projectId: project.videoApi.project.projectId,\n      destinationId,\n      updateMask: ['enabled'],\n      enabled,\n    })\n\n  // Trigger event to update state\n  await triggerInternal('DestinationChanged', response.destination)\n}\n\n/**\n * Overwrite project's first {@link Destination} with new configuration\n *  If no destination exists, one will be created instead.\n *\n * This is a helper to manage a single-destination project. For greater control,\n *  use {@link addDestination}, {@link removeDestination}, or {@link updateDestination}\n *\n * @category Destination\n */\nexport const setDestination = async (payload: {\n  projectId?: string\n  rtmpUrl: string\n  rtmpKey: string\n}) => {\n  const { rtmpUrl, rtmpKey, projectId = state.activeProjectId } = payload\n  const project = getProject(projectId)\n  const rtmpPush = {\n    key: rtmpKey,\n    url: rtmpUrl,\n  }\n  const enabled = true\n\n  if (project.videoApi.project.destinations.length > 0) {\n    // Update existing\n    const response = await CoreContext.clients\n      .LiveApi()\n      .destination?.updateDestination({\n        collectionId: project.videoApi.project.collectionId,\n        projectId: project.videoApi.project.projectId,\n        destinationId: project.videoApi.project.destinations[0].destinationId,\n        updateMask: ['address.rtmpPush'],\n        address: { rtmpPush },\n      })\n\n    // Trigger event to update state\n    await triggerInternal('DestinationChanged', response.destination)\n  } else {\n    // Create new\n    const response = await CoreContext.clients\n      .LiveApi()\n      .destination?.createDestination({\n        collectionId: project.videoApi.project.collectionId,\n        projectId: project.videoApi.project.projectId,\n        address: { rtmpPush },\n        enabled,\n      })\n\n    // Trigger event to update state\n    await triggerInternal('DestinationAdded', response.destination)\n  }\n}\n"],"names":["state","CoreContext","updateUserProps","payload","collection","getUser","props","response","clients","LiveApi","updateCollection","collectionId","id","updateMask","metadata","triggerInternal","createSource","source","address","rtmpPush","enabled","preview","webrtc","displayName","addSourceToProject","projectId","sourceId","project","updateSource","updateProps","push","deleteSource","removeSourceFromProject","createProject","size","settings","Request","internalProject","hydrateProject","toBaseProject","recreateLayout","getProject","status","SDK","PROJECT_BROADCAST_PHASE_RUNNING","PROJECT_BROADCAST_PHASE_STARTING","includes","phase","layoutId","video","rendering","type","layout","createLayout","x","width","y","height","updateResponse","updateProject","log","debug","LayoutApi","deleteLayout","compositor","update","getRoot","deleteProject","updateProjectProps","videoApi","updateProjectPropsWithoutTrigger","setActiveProject","projects","find","activeProjectId","currentProject","Array","from","webrtcManager","rooms","keys","map","removeRoom","unsubscribeFromLayout","layoutApi","unsubscribeFromProject","subscribeToLayout","subscribeToProject","then","broadcastId","joinRoom","token","sfuToken","webrtcAccess","authentication","createWebRtcAccessToken","accessToken","roomName","jwtDecode","room","url","URL","getLiveKitServer","baseUrl","host","pathname","roomContext","ensureRoom","bindApiClient","connect","roomId","getRoom","trigger","createNode","parentId","index","nodeId","insert","get","deleteNode","getParent","remove","updateNode","sourceType","setNodeLayout","layoutProps","moveNode","move","swapNodes","nodeAId","nodeBId","parentAId","parentBId","swap","reorderNodes","childIds","reorder","startBroadcast","startProjectBroadcast","stopBroadcast","stopProjectBroadcast","addDestination","rtmpUrl","rtmpKey","key","destination","createDestination","toBaseDestination","removeDestination","destinationId","deleteDestination","updateDestination","updateDestinationProps","destinations","setDestinationEnabled","setDestination","length"],"mappings":"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"}