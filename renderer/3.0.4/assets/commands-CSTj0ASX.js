import{g as v,C as r,t as n,h as y,c as P,P as w,b as l,w as A,j as g,d as h,e as L,f as N}from"./compositor-C8Gcco0y.js";const{state:j}=r,C=async c=>{const t=v();if(!t)return;const e={...t.props,...c.props},o=await r.clients.LiveApi().collection.updateCollection({collectionId:t.id,updateMask:["metadata"],metadata:{...t.metadata,props:e}});await n("UserChanged",o.collection)},D=async c=>{const t=v().id,{source:e}=await r.clients.LiveApi().source.createSource({metadata:{},collectionId:t,address:{rtmpPush:{enabled:!0}},preview:{webrtc:{enabled:!0,displayName:c.displayName||"RTMP Source"}}});await n("SourceAdded",e);const o=await r.clients.LiveApi().source.addSourceToProject({collectionId:t,projectId:c.projectId,sourceId:e.sourceId});return await n("ProjectSourceAdded",{projectId:o.project.projectId,source:e}),e},R=async c=>{const t=v().id;let e=[],o={};c.metadata&&(e.push("metadata"),o.metadata=c.metadata),c.displayName&&(e.push("preview.webrtc.displayName"),o={...o,preview:{webrtc:{displayName:c.displayName}}});const{source:i}=await r.clients.LiveApi().source.updateSource({collectionId:t,updateMask:e,sourceId:c.sourceId,...o});return await n("SourceChanged",i),i},S=async c=>{const t=v().id;await r.clients.LiveApi().source.removeSourceFromProject({collectionId:t,projectId:c.projectId,sourceId:c.sourceId}),await n("ProjectSourceRemoved",{projectId:c.projectId,sourceId:c.sourceId});const e=await r.clients.LiveApi().source.deleteSource({sourceId:c.sourceId,collectionId:t});return await n("SourceRemoved",c.sourceId),e},f=async(c={})=>{const{props:t={},size:e,settings:o={}}=c,i=await r.Request.createProject({settings:o,props:t,size:e});await n("ProjectAdded",i.project);const a=await y(i.project,"ROLE_HOST");return P(a)},k=async c=>{const{projectId:t,props:e={}}=c,o=v().id,i=await r.clients.LiveApi().project.getProject({collectionId:o,projectId:t,status:!0});if([w.PROJECT_BROADCAST_PHASE_RUNNING,w.PROJECT_BROADCAST_PHASE_STARTING].includes(i.status.phase))return;const a=i.project.metadata||{},{layoutId:s}=a,{video:d}=i.project.rendering,{type:p}=i.project.metadata.props||{},I=await r.Request.createLayout({collectionId:o,projectId:t,type:p||"sceneless",settings:{},size:{x:d.width,y:d.height}}),m=await r.clients.LiveApi().project.updateProject({collectionId:o,projectId:t,updateMask:["metadata"],metadata:{...a,layoutId:I.id}});r.log.debug("New layout assigned to project:",{layout:I}),await n("ProjectChanged",{project:m.project}),await r.clients.LayoutApi().layout.deleteLayout({layoutId:s}),r.log.debug("Previous layout deleted:",{layoutId:s});const u=await y(m.project,"ROLE_HOST");return await u.compositor.update(u.compositor.getRoot().id,e),{project:P(u),internalProject:u}},T=async c=>{const{projectId:t}=c;await r.Request.deleteProject({projectId:t}),await n("ProjectRemoved",{projectId:t})},B=async c=>{const{projectId:t}=c,e=v().id,o=l(t),i={...o.props,...c.props},a=await r.clients.LiveApi().project.updateProject({collectionId:e,projectId:t,updateMask:["metadata"],metadata:{...o.videoApi.project.metadata,props:i}});await n("ProjectChanged",{project:a.project})},M=async c=>{const{projectId:t}=c,e=v().id,o=l(t),i={...o.props,...c.props};await r.clients.LiveApi().project.updateProject({collectionId:e,projectId:t,updateMask:["metadata"],metadata:{...o.videoApi.project.metadata,props:i}})},U=async c=>{const t=j.projects.find(o=>o.id===c.projectId);if(!t){j.activeProjectId=null,n("ActiveProjectChanged",{projectId:null});return}const e=j.projects.find(o=>o.id===j.activeProjectId);if(t!==e)return e&&(Array.from(A.rooms.keys()).map(A.removeRoom),await r.clients.LayoutApi().unsubscribeFromLayout(e.layoutApi.layoutId),await r.clients.LiveApi().unsubscribeFromProject(e.videoApi.project.collectionId,e.videoApi.project.projectId)),await r.clients.LayoutApi().subscribeToLayout(t.layoutApi.layoutId),await r.clients.LiveApi().subscribeToProject(t.videoApi.project.collectionId,t.videoApi.project.projectId),r.clients.LiveApi().project.getProject({collectionId:t.videoApi.project.collectionId,projectId:t.videoApi.project.projectId,status:!0}).then(o=>{var i,a;n("ProjectChanged",{project:o.project,phase:(i=o.status)==null?void 0:i.phase,broadcastId:(a=o.status)==null?void 0:a.broadcastId})}),n("ActiveProjectChanged",{projectId:t.id}),P(t)},O=async c=>{const{projectId:t,displayName:e="Guest"}=c,o=j.projects.find(u=>u.id===t);let i=o.sfuToken;if(!i){let{webrtcAccess:u}=await r.clients.LiveApi().authentication.createWebRtcAccessToken({collectionId:o.videoApi.project.collectionId,projectId:o.videoApi.project.projectId,displayName:e});i=u.accessToken}const s=g(i).video.room,d=new URL(r.clients.getLiveKitServer()),p=d.host+d.pathname,I=A.ensureRoom(p,s,i);I.bindApiClient(r.clients),await I.connect(),o.sfuToken=i,o.roomId=s;const m=h(s);return L("RoomJoined",{projectId:o.id,room:m}),m},_=async c=>{let{props:t={},parentId:e,index:o,projectId:i=j.activeProjectId}=c;const a=l(i),s=await a.compositor.insert(t,e,o);return n("NodeAdded",{projectId:i,nodeId:s}),n("NodeChanged",{projectId:i,nodeId:e}),a.compositor.get(s)},E=async c=>{var a;let{nodeId:t,projectId:e=j.activeProjectId}=c;const o=l(e),i=(a=o.compositor.getParent(t))==null?void 0:a.id;o.compositor.remove(t),n("NodeRemoved",{projectId:e,nodeId:t}),n("NodeChanged",{projectId:e,nodeId:i})},x=async c=>{let{nodeId:t,props:e={},projectId:o=j.activeProjectId}=c;const i=l(o);return delete e.type,delete e.sourceType,i.compositor.update(t,e),n("NodeChanged",{projectId:o,nodeId:t}),i.compositor.get(t)},H=async c=>{let{nodeId:t,layout:e,projectId:o=j.activeProjectId,layoutProps:i={}}=c;l(o).compositor.update(t,{layout:e,layoutProps:i}),n("NodeChanged",{projectId:o,nodeId:t})},K=async c=>{const{nodeId:t,parentId:e,projectId:o=j.activeProjectId,index:i}=c;l(o).compositor.move(t,e,i),n("NodeChanged",{projectId:o,nodeId:t})},q=async c=>{var d,p;const{nodeAId:t,nodeBId:e,projectId:o=j.activeProjectId}=c,i=l(o),a=(d=i.compositor.getParent(t))==null?void 0:d.id,s=(p=i.compositor.getParent(e))==null?void 0:p.id;i.compositor.swap(t,e),n("NodeChanged",{projectId:o,nodeId:a}),n("NodeChanged",{projectId:o,nodeId:s})},F=async c=>{const{parentId:t,childIds:e,projectId:o=j.activeProjectId}=c;l(o).compositor.reorder(t,e),n("NodeChanged",{projectId:o,nodeId:t})},G=async c=>{const{projectId:t=j.activeProjectId}=c,e=l(t);await r.clients.LiveApi().project.startProjectBroadcast({collectionId:e.videoApi.project.collectionId,projectId:e.videoApi.project.projectId})},J=async c=>{const{projectId:t=j.activeProjectId}=c,e=l(t);await r.clients.LiveApi().project.stopProjectBroadcast({collectionId:e.videoApi.project.collectionId,projectId:e.videoApi.project.projectId})},z=async c=>{var I;const{rtmpUrl:t,rtmpKey:e,enabled:o,projectId:i=j.activeProjectId,props:a={}}=c,s=l(i),d={rtmpPush:{key:e,url:t}},p=await((I=r.clients.LiveApi().destination)==null?void 0:I.createDestination({collectionId:s.videoApi.project.collectionId,projectId:s.videoApi.project.projectId,address:d,enabled:o,metadata:{props:a}}));return await n("DestinationAdded",p.destination),N(p.destination)},W=async c=>{var i;const{destinationId:t,projectId:e=j.activeProjectId}=c,o=l(e);await((i=r.clients.LiveApi().destination)==null?void 0:i.deleteDestination({collectionId:o.videoApi.project.collectionId,projectId:o.videoApi.project.projectId,destinationId:t})),await n("DestinationRemoved",{projectId:e,destinationId:t})},Q=async c=>{var p;const{rtmpUrl:t,rtmpKey:e,destinationId:o,projectId:i=j.activeProjectId}=c,a=l(i),s={key:e,url:t},d=await((p=r.clients.LiveApi().destination)==null?void 0:p.updateDestination({collectionId:a.videoApi.project.collectionId,projectId:a.videoApi.project.projectId,destinationId:o,updateMask:["address.rtmpPush"],address:{rtmpPush:s}}));await n("DestinationChanged",d.destination)},V=async c=>{var d,p;const{projectId:t=j.activeProjectId,destinationId:e,props:o={}}=c,i=l(t),a=i.videoApi.project.destinations.find(I=>I.destinationId===e);if(!a)return;const s=await((p=r.clients.LiveApi().destination)==null?void 0:p.updateDestination({collectionId:i.videoApi.project.collectionId,projectId:i.videoApi.project.projectId,destinationId:e,updateMask:["metadata"],metadata:{...a.metadata||{},props:{...((d=a.metadata)==null?void 0:d.props)||{},...o}}}));await n("DestinationChanged",s.destination)},X=async c=>{var d;const{enabled:t,destinationId:e,projectId:o=j.activeProjectId}=c,i=l(o);if(i.videoApi.project.destinations.find(p=>e===p.destinationId).enabled===t)return;const s=await((d=r.clients.LiveApi().destination)==null?void 0:d.updateDestination({collectionId:i.videoApi.project.collectionId,projectId:i.videoApi.project.projectId,destinationId:e,updateMask:["enabled"],enabled:t}));await n("DestinationChanged",s.destination)},Y=async c=>{var d,p;const{rtmpUrl:t,rtmpKey:e,projectId:o=j.activeProjectId}=c,i=l(o),a={key:e,url:t},s=!0;if(i.videoApi.project.destinations.length>0){const I=await((d=r.clients.LiveApi().destination)==null?void 0:d.updateDestination({collectionId:i.videoApi.project.collectionId,projectId:i.videoApi.project.projectId,destinationId:i.videoApi.project.destinations[0].destinationId,updateMask:["address.rtmpPush"],address:{rtmpPush:a}}));await n("DestinationChanged",I.destination)}else{const I=await((p=r.clients.LiveApi().destination)==null?void 0:p.createDestination({collectionId:i.videoApi.project.collectionId,projectId:i.videoApi.project.projectId,address:{rtmpPush:a},enabled:s}));await n("DestinationAdded",I.destination)}};export{z as addDestination,_ as createNode,f as createProject,D as createSource,E as deleteNode,T as deleteProject,S as deleteSource,O as joinRoom,K as moveNode,k as recreateLayout,W as removeDestination,F as reorderNodes,U as setActiveProject,Y as setDestination,X as setDestinationEnabled,H as setNodeLayout,G as startBroadcast,J as stopBroadcast,q as swapNodes,Q as updateDestination,V as updateDestinationProps,x as updateNode,B as updateProjectProps,M as updateProjectPropsWithoutTrigger,R as updateSource,C as updateUserProps};
//# sourceMappingURL=commands-CSTj0ASX.js.map
