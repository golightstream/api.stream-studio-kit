import{g as P,C as s,t as d,h as w,c as y,b as I,w as m,o as g,d as h,e as A,f as D}from"./compositor.4b08816b.js";const{state:r}=s,N=async n=>{const t=P();if(!t)return;const e={...t.props,...n.props},o=await s.clients.LiveApi().collection.updateCollection({collectionId:t.id,updateMask:["metadata"],metadata:{...t.metadata,props:e}});await d("UserChanged",o.collection)},f=async(n={})=>{const{props:t={},size:e,settings:o={}}=n,c=await s.Request.createProject({settings:o,props:t,size:e});await d("ProjectAdded",c.project);const i=await w(c.project,"ROLE_HOST");return y(i)},k=async n=>{const{projectId:t}=n;await s.Request.deleteProject({projectId:t}),await d("ProjectRemoved",{projectId:t})},C=async n=>{const{projectId:t}=n,e=P().id,o=I(t),c={...o.props,...n.props},i=await s.clients.LiveApi().project.updateProject({collectionId:e,projectId:t,updateMask:["metadata"],metadata:{...o.videoApi.project.metadata,props:c}});await d("ProjectChanged",{project:i.project})},R=n=>C({projectId:n.projectId,props:n.meta}),M=async n=>{const t=r.projects.find(o=>o.id===n.projectId);if(!t){r.activeProjectId=null,d("ActiveProjectChanged",{projectId:null});return}const e=r.projects.find(o=>o.id===r.activeProjectId);if(t!==e)return e&&(Array.from(m.rooms.keys()).map(m.removeRoom),await s.clients.LayoutApi().unsubscribeFromLayout(e.layoutApi.layoutId),await s.clients.LiveApi().unsubscribeFromProject(e.videoApi.project.collectionId,e.videoApi.project.projectId)),await s.clients.LayoutApi().subscribeToLayout(t.layoutApi.layoutId),await s.clients.LiveApi().subscribeToProject(t.videoApi.project.collectionId,t.videoApi.project.projectId),s.clients.LiveApi().project.getProject({collectionId:t.videoApi.project.collectionId,projectId:t.videoApi.project.projectId,status:!0}).then(o=>{var c;d("ProjectChanged",{project:o.project,phase:(c=o.status)==null?void 0:c.phase})}),d("ActiveProjectChanged",{projectId:t.id}),y(t)},B=async n=>{const{projectId:t,displayName:e="Guest"}=n,o=r.projects.find(v=>v.id===t);let c=o.sfuToken;if(!c){let{webrtcAccess:v}=await s.clients.LiveApi().authentication.createWebRtcAccessToken({collectionId:o.videoApi.project.collectionId,projectId:o.videoApi.project.projectId,displayName:e});c=v.accessToken}const a=g(c).video.room,j=new URL(s.clients.getLiveKitServer()),p=j.host+j.pathname,l=m.ensureRoom(p,a,c);l.bindApiClient(s.clients),await l.connect(),o.sfuToken=c,o.roomId=a;const u=h(a);return A("RoomJoined",{projectId:o.id,room:u}),u},T=async n=>{let{props:t={},parentId:e,index:o,projectId:c=r.activeProjectId}=n;const i=I(c);t={...t,layoutId:i.layoutApi.layoutId,type:"child"};const a=await i.compositor.insert(t,e,o);return d("NodeAdded",{projectId:c,nodeId:a}),d("NodeChanged",{projectId:c,nodeId:e}),i.compositor.get(a)},U=async n=>{var i;let{nodeId:t,projectId:e=r.activeProjectId}=n;const o=I(e),c=(i=o.compositor.getParent(t))==null?void 0:i.id;o.compositor.remove(t),d("NodeRemoved",{projectId:e,nodeId:t}),d("NodeChanged",{projectId:e,nodeId:c})},x=async n=>{let{nodeId:t,props:e={},projectId:o=r.activeProjectId}=n;const c=I(o);return delete e.type,delete e.sourceType,c.compositor.update(t,e),d("NodeChanged",{projectId:o,nodeId:t}),c.compositor.get(t)},K=async n=>{let{nodeId:t,layout:e,projectId:o=r.activeProjectId,layoutProps:c={}}=n;I(o).compositor.update(t,{layout:e,layoutProps:c}),d("NodeChanged",{projectId:o,nodeId:t})},E=async n=>{const{nodeId:t,parentId:e,projectId:o=r.activeProjectId,index:c}=n;I(o).compositor.move(t,e,c),d("NodeChanged",{projectId:o,nodeId:t})},S=async n=>{var j,p;const{nodeAId:t,nodeBId:e,projectId:o=r.activeProjectId}=n,c=I(o),i=(j=c.compositor.getParent(t))==null?void 0:j.id,a=(p=c.compositor.getParent(e))==null?void 0:p.id;c.compositor.swap(t,e),d("NodeChanged",{projectId:o,nodeId:i}),d("NodeChanged",{projectId:o,nodeId:a})},q=async n=>{const{parentId:t,childIds:e,projectId:o=r.activeProjectId}=n;I(o).compositor.reorder(t,e),d("NodeChanged",{projectId:o,nodeId:t})},F=async n=>{const{projectId:t=r.activeProjectId}=n,e=I(t);await s.clients.LiveApi().project.startProjectBroadcast({collectionId:e.videoApi.project.collectionId,projectId:e.videoApi.project.projectId})},O=async n=>{const{projectId:t=r.activeProjectId}=n,e=I(t);await s.clients.LiveApi().project.stopProjectBroadcast({collectionId:e.videoApi.project.collectionId,projectId:e.videoApi.project.projectId})},z=async n=>{var u;const{rtmpUrl:t,rtmpKey:e,enabled:o,projectId:c=r.activeProjectId,metadata:i={},props:a={}}=n,j=I(c),p={rtmpPush:{key:e,url:t}},l=await((u=s.clients.LiveApi().destination)==null?void 0:u.createDestination({collectionId:j.videoApi.project.collectionId,projectId:j.videoApi.project.projectId,address:p,enabled:o,metadata:{props:{...i,...a}}}));return await d("DestinationAdded",l.destination),D(l.destination)},G=async n=>{var c;const{destinationId:t,projectId:e=r.activeProjectId}=n,o=I(e);await((c=s.clients.LiveApi().destination)==null?void 0:c.deleteDestination({collectionId:o.videoApi.project.collectionId,projectId:o.videoApi.project.projectId,destinationId:t})),await d("DestinationRemoved",{projectId:e,destinationId:t})},H=async n=>{var p;const{rtmpUrl:t,rtmpKey:e,destinationId:o,projectId:c=r.activeProjectId}=n,i=I(c),a={key:e,url:t},j=await((p=s.clients.LiveApi().destination)==null?void 0:p.updateDestination({collectionId:i.videoApi.project.collectionId,projectId:i.videoApi.project.projectId,destinationId:o,updateMask:["address.rtmpPush"],address:{rtmpPush:a}}));await d("DestinationChanged",j.destination)},L=async n=>{var j,p;const{projectId:t=r.activeProjectId,destinationId:e,props:o={}}=n,c=I(t),i=c.videoApi.project.destinations.find(l=>l.destinationId===e);if(!i)return;const a=await((p=s.clients.LiveApi().destination)==null?void 0:p.updateDestination({collectionId:c.videoApi.project.collectionId,projectId:c.videoApi.project.projectId,destinationId:e,updateMask:["metadata"],metadata:{...i.metadata||{},props:{...((j=i.metadata)==null?void 0:j.props)||{},...o}}}));await d("DestinationChanged",a.destination)},J=n=>L({projectId:n.projectId,destinationId:n.destinationId,props:n.metadata}),W=async n=>{var p;const{enabled:t,destinationId:e,projectId:o=r.activeProjectId}=n,c=I(o);if(c.videoApi.project.destinations.find(l=>e===l.destinationId).enabled===t)return;const a=await((p=s.clients.LiveApi().destination)==null?void 0:p.updateDestination({collectionId:c.videoApi.project.collectionId,projectId:c.videoApi.project.projectId,destinationId:e,updateMask:["enabled"],enabled:t}));await d("DestinationChanged",a.destination),A(t?"DestinationEnabled":"DestinationDisabled",{projectId:o,destinationId:e})},_=async n=>{var j,p;const{rtmpUrl:t,rtmpKey:e,projectId:o=r.activeProjectId}=n,c=I(o),i={key:e,url:t},a=!0;if(c.videoApi.project.destinations.length>0){const l=await((j=s.clients.LiveApi().destination)==null?void 0:j.updateDestination({collectionId:c.videoApi.project.collectionId,projectId:c.videoApi.project.projectId,destinationId:c.videoApi.project.destinations[0].destinationId,updateMask:["address.rtmpPush"],address:{rtmpPush:i}}));await d("DestinationChanged",l.destination)}else{const l=await((p=s.clients.LiveApi().destination)==null?void 0:p.createDestination({collectionId:c.videoApi.project.collectionId,projectId:c.videoApi.project.projectId,address:{rtmpPush:i},enabled:a}));await d("DestinationAdded",l.destination)}A("DestinationSet",{projectId:o,rtmpUrl:t,rtmpKey:e})};export{z as addDestination,T as createNode,f as createProject,U as deleteNode,k as deleteProject,B as joinRoom,E as moveNode,G as removeDestination,q as reorderNodes,M as setActiveProject,_ as setDestination,W as setDestinationEnabled,K as setNodeLayout,F as startBroadcast,O as stopBroadcast,S as swapNodes,H as updateDestination,J as updateDestinationMeta,L as updateDestinationProps,x as updateNode,R as updateProjectMeta,C as updateProjectProps,N as updateUserProps};
//# sourceMappingURL=commands.9843dcdb.js.map
