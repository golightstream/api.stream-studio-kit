import{g as m,C as a,t as s,h as g,c as P,P as w,b as l,w as A,o as h,d as L,e as y,f as D}from"./compositor.552844b7.js";const{state:j}=a,N=async i=>{const t=m();if(!t)return;const o={...t.props,...i.props},e=await a.clients.LiveApi().collection.updateCollection({collectionId:t.id,updateMask:["metadata"],metadata:{...t.metadata,props:o}});await s("UserChanged",e.collection)},R=async(i={})=>{const{props:t={},size:o,settings:e={}}=i,c=await a.Request.createProject({settings:e,props:t,size:o});await s("ProjectAdded",c.project);const n=await g(c.project,"ROLE_HOST");return P(n)},f=async i=>{const{projectId:t,props:o={}}=i,e=m().id,c=await a.clients.LiveApi().project.getProject({collectionId:e,projectId:t,status:!0});if([w.PROJECT_BROADCAST_PHASE_RUNNING,w.PROJECT_BROADCAST_PHASE_STARTING].includes(c.status.phase))return;const n=c.project.metadata||{},{layoutId:r}=n,{video:d}=c.project.rendering,{type:p}=c.project.metadata.props||{},I=await a.Request.createLayout({collectionId:e,projectId:t,type:p||"sceneless",settings:{},size:{x:d.width,y:d.height}}),u=await a.clients.LiveApi().project.updateProject({collectionId:e,projectId:t,updateMask:["metadata"],metadata:{...n,layoutId:I.id}});a.log.debug("New layout assigned to project:",{layout:I}),await s("ProjectChanged",{project:u.project}),await a.clients.LayoutApi().layout.deleteLayout({layoutId:r}),a.log.debug("Previous layout deleted:",{layoutId:r});const v=await g(u.project,"ROLE_HOST");return await v.compositor.update(v.compositor.getRoot().id,o),P(v)},T=async i=>{const{projectId:t}=i;await a.Request.deleteProject({projectId:t}),await s("ProjectRemoved",{projectId:t})},C=async i=>{const{projectId:t}=i,o=m().id,e=l(t),c={...e.props,...i.props},n=await a.clients.LiveApi().project.updateProject({collectionId:o,projectId:t,updateMask:["metadata"],metadata:{...e.videoApi.project.metadata,props:c}});await s("ProjectChanged",{project:n.project})},S=i=>C({projectId:i.projectId,props:i.meta}),M=async i=>{const{projectId:t}=i,o=m().id,e=l(t),c={...e.props,...i.props};await a.clients.LiveApi().project.updateProject({collectionId:o,projectId:t,updateMask:["metadata"],metadata:{...e.videoApi.project.metadata,props:c}})},B=async i=>{const t=j.projects.find(e=>e.id===i.projectId);if(!t){j.activeProjectId=null,s("ActiveProjectChanged",{projectId:null});return}const o=j.projects.find(e=>e.id===j.activeProjectId);if(t!==o)return o&&(Array.from(A.rooms.keys()).map(A.removeRoom),await a.clients.LayoutApi().unsubscribeFromLayout(o.layoutApi.layoutId),await a.clients.LiveApi().unsubscribeFromProject(o.videoApi.project.collectionId,o.videoApi.project.projectId)),await a.clients.LayoutApi().subscribeToLayout(t.layoutApi.layoutId),await a.clients.LiveApi().subscribeToProject(t.videoApi.project.collectionId,t.videoApi.project.projectId),a.clients.LiveApi().project.getProject({collectionId:t.videoApi.project.collectionId,projectId:t.videoApi.project.projectId,status:!0}).then(e=>{var c,n;s("ProjectChanged",{project:e.project,phase:(c=e.status)==null?void 0:c.phase,broadcastId:(n=e.status)==null?void 0:n.broadcastId})}),s("ActiveProjectChanged",{projectId:t.id}),P(t)},U=async i=>{const{projectId:t,displayName:o="Guest"}=i,e=j.projects.find(v=>v.id===t);let c=e.sfuToken;if(!c){let{webrtcAccess:v}=await a.clients.LiveApi().authentication.createWebRtcAccessToken({collectionId:e.videoApi.project.collectionId,projectId:e.videoApi.project.projectId,displayName:o});c=v.accessToken}const r=h(c).video.room,d=new URL(a.clients.getLiveKitServer()),p=d.host+d.pathname,I=A.ensureRoom(p,r,c);I.bindApiClient(a.clients),await I.connect(),e.sfuToken=c,e.roomId=r;const u=L(r);return y("RoomJoined",{projectId:e.id,room:u}),u},E=async i=>{let{props:t={},parentId:o,index:e,projectId:c=j.activeProjectId}=i;const n=l(c),r=await n.compositor.insert(t,o,e);return s("NodeAdded",{projectId:c,nodeId:r}),s("NodeChanged",{projectId:c,nodeId:o}),n.compositor.get(r)},O=async i=>{var n;let{nodeId:t,projectId:o=j.activeProjectId}=i;const e=l(o),c=(n=e.compositor.getParent(t))==null?void 0:n.id;e.compositor.remove(t),s("NodeRemoved",{projectId:o,nodeId:t}),s("NodeChanged",{projectId:o,nodeId:c})},_=async i=>{let{nodeId:t,props:o={},projectId:e=j.activeProjectId}=i;const c=l(e);return delete o.type,delete o.sourceType,c.compositor.update(t,o),s("NodeChanged",{projectId:e,nodeId:t}),c.compositor.get(t)},x=async i=>{let{nodeId:t,layout:o,projectId:e=j.activeProjectId,layoutProps:c={}}=i;l(e).compositor.update(t,{layout:o,layoutProps:c}),s("NodeChanged",{projectId:e,nodeId:t})},H=async i=>{const{nodeId:t,parentId:o,projectId:e=j.activeProjectId,index:c}=i;l(e).compositor.move(t,o,c),s("NodeChanged",{projectId:e,nodeId:t})},K=async i=>{var d,p;const{nodeAId:t,nodeBId:o,projectId:e=j.activeProjectId}=i,c=l(e),n=(d=c.compositor.getParent(t))==null?void 0:d.id,r=(p=c.compositor.getParent(o))==null?void 0:p.id;c.compositor.swap(t,o),s("NodeChanged",{projectId:e,nodeId:n}),s("NodeChanged",{projectId:e,nodeId:r})},q=async i=>{const{parentId:t,childIds:o,projectId:e=j.activeProjectId}=i;l(e).compositor.reorder(t,o),s("NodeChanged",{projectId:e,nodeId:t})},G=async i=>{const{projectId:t=j.activeProjectId}=i,o=l(t);o.videoApi.project.composition.studioSdk.version!==a.rendererVersion&&await a.clients.LiveApi().project.updateProject({composition:{studioSdk:{rendererUrl:void 0,version:a.rendererVersion}},updateMask:["composition.studioSdk.version","composition.studioSdk.rendererUrl"]}),await a.clients.LiveApi().project.startProjectBroadcast({collectionId:o.videoApi.project.collectionId,projectId:o.videoApi.project.projectId})},J=async i=>{const{projectId:t=j.activeProjectId}=i,o=l(t);await a.clients.LiveApi().project.stopProjectBroadcast({collectionId:o.videoApi.project.collectionId,projectId:o.videoApi.project.projectId})},z=async i=>{var u;const{rtmpUrl:t,rtmpKey:o,enabled:e,projectId:c=j.activeProjectId,metadata:n={},props:r={}}=i,d=l(c),p={rtmpPush:{key:o,url:t}},I=await((u=a.clients.LiveApi().destination)==null?void 0:u.createDestination({collectionId:d.videoApi.project.collectionId,projectId:d.videoApi.project.projectId,address:p,enabled:e,metadata:{props:{...n,...r}}}));return await s("DestinationAdded",I.destination),D(I.destination)},F=async i=>{var c;const{destinationId:t,projectId:o=j.activeProjectId}=i,e=l(o);await((c=a.clients.LiveApi().destination)==null?void 0:c.deleteDestination({collectionId:e.videoApi.project.collectionId,projectId:e.videoApi.project.projectId,destinationId:t})),await s("DestinationRemoved",{projectId:o,destinationId:t})},V=async i=>{var p;const{rtmpUrl:t,rtmpKey:o,destinationId:e,projectId:c=j.activeProjectId}=i,n=l(c),r={key:o,url:t},d=await((p=a.clients.LiveApi().destination)==null?void 0:p.updateDestination({collectionId:n.videoApi.project.collectionId,projectId:n.videoApi.project.projectId,destinationId:e,updateMask:["address.rtmpPush"],address:{rtmpPush:r}}));await s("DestinationChanged",d.destination)},b=async i=>{var d,p;const{projectId:t=j.activeProjectId,destinationId:o,props:e={}}=i,c=l(t),n=c.videoApi.project.destinations.find(I=>I.destinationId===o);if(!n)return;const r=await((p=a.clients.LiveApi().destination)==null?void 0:p.updateDestination({collectionId:c.videoApi.project.collectionId,projectId:c.videoApi.project.projectId,destinationId:o,updateMask:["metadata"],metadata:{...n.metadata||{},props:{...((d=n.metadata)==null?void 0:d.props)||{},...e}}}));await s("DestinationChanged",r.destination)},W=i=>b({projectId:i.projectId,destinationId:i.destinationId,props:i.metadata}),Q=async i=>{var p;const{enabled:t,destinationId:o,projectId:e=j.activeProjectId}=i,c=l(e);if(c.videoApi.project.destinations.find(I=>o===I.destinationId).enabled===t)return;const r=await((p=a.clients.LiveApi().destination)==null?void 0:p.updateDestination({collectionId:c.videoApi.project.collectionId,projectId:c.videoApi.project.projectId,destinationId:o,updateMask:["enabled"],enabled:t}));await s("DestinationChanged",r.destination),y(t?"DestinationEnabled":"DestinationDisabled",{projectId:e,destinationId:o})},X=async i=>{var d,p;const{rtmpUrl:t,rtmpKey:o,projectId:e=j.activeProjectId}=i,c=l(e),n={key:o,url:t},r=!0;if(c.videoApi.project.destinations.length>0){const I=await((d=a.clients.LiveApi().destination)==null?void 0:d.updateDestination({collectionId:c.videoApi.project.collectionId,projectId:c.videoApi.project.projectId,destinationId:c.videoApi.project.destinations[0].destinationId,updateMask:["address.rtmpPush"],address:{rtmpPush:n}}));await s("DestinationChanged",I.destination)}else{const I=await((p=a.clients.LiveApi().destination)==null?void 0:p.createDestination({collectionId:c.videoApi.project.collectionId,projectId:c.videoApi.project.projectId,address:{rtmpPush:n},enabled:r}));await s("DestinationAdded",I.destination)}y("DestinationSet",{projectId:e,rtmpUrl:t,rtmpKey:o})};export{z as addDestination,E as createNode,R as createProject,O as deleteNode,T as deleteProject,U as joinRoom,H as moveNode,f as recreateLayout,F as removeDestination,q as reorderNodes,B as setActiveProject,X as setDestination,Q as setDestinationEnabled,x as setNodeLayout,G as startBroadcast,J as stopBroadcast,K as swapNodes,V as updateDestination,W as updateDestinationMeta,b as updateDestinationProps,_ as updateNode,S as updateProjectMeta,C as updateProjectProps,M as updateProjectPropsWithoutTrigger,N as updateUserProps};
//# sourceMappingURL=commands.c60b10ac.js.map
