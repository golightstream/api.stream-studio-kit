import{g as v,C as r,t as n,h as y,c as P,P as w,b as l,w as A,j as g,d as h,e as L,f as b}from"./compositor-aITe8hdL.js";const{state:j}=r,N=async c=>{const t=v();if(!t)return;const o={...t.props,...c.props},e=await r.clients.LiveApi().collection.updateCollection({collectionId:t.id,updateMask:["metadata"],metadata:{...t.metadata,props:o}});await n("UserChanged",e.collection)},D=async c=>{const t=v().id,{source:o}=await r.clients.LiveApi().source.createSource({metadata:{props:c.props||{}},collectionId:t,address:c.address,preview:{webrtc:{enabled:!0,displayName:c.displayName||"RTMP Source"}}});await n("SourceAdded",o);const e=await r.clients.LiveApi().source.addSourceToProject({collectionId:t,projectId:c.projectId,sourceId:o.sourceId});return await n("ProjectSourceAdded",{projectId:e.project.projectId,source:o}),o},R=async c=>{const t=v().id;let o=[],e={};c.metadata&&(o.push("metadata"),e.metadata=c.metadata),c.displayName&&(o.push("preview.webrtc.displayName"),e={...e,preview:{webrtc:{displayName:c.displayName}}});const{source:i}=await r.clients.LiveApi().source.updateSource({collectionId:t,updateMask:o,sourceId:c.sourceId,...e});return await n("SourceChanged",i),i},S=async c=>{const t=v().id;await r.clients.LiveApi().source.removeSourceFromProject({collectionId:t,projectId:c.projectId,sourceId:c.sourceId}),await n("ProjectSourceRemoved",{projectId:c.projectId,sourceId:c.sourceId});const o=await r.clients.LiveApi().source.deleteSource({sourceId:c.sourceId,collectionId:t});return await n("SourceRemoved",c.sourceId),o},f=async(c={})=>{const{props:t={},size:o,settings:e={}}=c,i=await r.Request.createProject({settings:e,props:t,size:o});await n("ProjectAdded",i.project);const s=await y(i.project,"ROLE_HOST");return P(s)},k=async c=>{const{projectId:t,props:o={}}=c,e=v().id,i=await r.clients.LiveApi().project.getProject({collectionId:e,projectId:t,status:!0});if([w.PROJECT_BROADCAST_PHASE_RUNNING,w.PROJECT_BROADCAST_PHASE_STARTING].includes(i.status.phase))return;const s=i.project.metadata||{},{layoutId:a}=s,{video:d}=i.project.rendering,{type:p}=i.project.metadata.props||{},I=await r.Request.createLayout({collectionId:e,projectId:t,type:p||"sceneless",settings:{},size:{x:d.width,y:d.height}}),m=await r.clients.LiveApi().project.updateProject({collectionId:e,projectId:t,updateMask:["metadata"],metadata:{...s,layoutId:I.id}});r.log.debug("New layout assigned to project:",{layout:I}),await n("ProjectChanged",{project:m.project}),await r.clients.LayoutApi().layout.deleteLayout({layoutId:a}),r.log.debug("Previous layout deleted:",{layoutId:a});const u=await y(m.project,"ROLE_HOST");return await u.compositor.update(u.compositor.getRoot().id,o),{project:P(u),internalProject:u}},T=async c=>{const{projectId:t}=c;await r.Request.deleteProject({projectId:t}),await n("ProjectRemoved",{projectId:t})},B=async c=>{const{projectId:t}=c,o=v().id,e=l(t),i={...e.props,...c.props},s=await r.clients.LiveApi().project.updateProject({collectionId:o,projectId:t,updateMask:["metadata"],metadata:{...e.videoApi.project.metadata,props:i}});await n("ProjectChanged",{project:s.project})},M=async c=>{const{projectId:t}=c,o=v().id,e=l(t),i={...e.props,...c.props};await r.clients.LiveApi().project.updateProject({collectionId:o,projectId:t,updateMask:["metadata"],metadata:{...e.videoApi.project.metadata,props:i}})},U=async c=>{const t=j.projects.find(e=>e.id===c.projectId);if(!t){j.activeProjectId=null,n("ActiveProjectChanged",{projectId:null});return}const o=j.projects.find(e=>e.id===j.activeProjectId);if(t!==o)return o&&(Array.from(A.rooms.keys()).map(A.removeRoom),await r.clients.LayoutApi().unsubscribeFromLayout(o.layoutApi.layoutId),await r.clients.LiveApi().unsubscribeFromProject(o.videoApi.project.collectionId,o.videoApi.project.projectId),await r.clients.LiveApi().unsubscribeFromCollection(o.videoApi.project.collectionId)),await r.clients.LayoutApi().subscribeToLayout(t.layoutApi.layoutId),await r.clients.LiveApi().subscribeToProject(t.videoApi.project.collectionId,t.videoApi.project.projectId),await r.clients.LiveApi().subscribeToCollection(t.videoApi.project.collectionId),r.clients.LiveApi().project.getProject({collectionId:t.videoApi.project.collectionId,projectId:t.videoApi.project.projectId,status:!0}).then(e=>{var i,s;n("ProjectChanged",{project:e.project,phase:(i=e.status)==null?void 0:i.phase,broadcastId:(s=e.status)==null?void 0:s.broadcastId})}),n("ActiveProjectChanged",{projectId:t.id}),P(t)},O=async c=>{const{projectId:t,displayName:o="Guest"}=c,e=j.projects.find(u=>u.id===t);let i=e.sfuToken;if(!i){let{webrtcAccess:u}=await r.clients.LiveApi().authentication.createWebRtcAccessToken({collectionId:e.videoApi.project.collectionId,projectId:e.videoApi.project.projectId,displayName:o});i=u.accessToken}const a=g(i).video.room,d=new URL(r.clients.getLiveKitServer()),p=d.host+d.pathname,I=A.ensureRoom(p,a,i);I.bindApiClient(r.clients),await I.connect(),e.sfuToken=i,e.roomId=a;const m=h(a);return L("RoomJoined",{projectId:e.id,room:m}),m},_=async c=>{let{props:t={},parentId:o,index:e,projectId:i=j.activeProjectId}=c;const s=l(i),a=await s.compositor.insert(t,o,e);return n("NodeAdded",{projectId:i,nodeId:a}),n("NodeChanged",{projectId:i,nodeId:o}),s.compositor.get(a)},E=async c=>{var s;let{nodeId:t,projectId:o=j.activeProjectId}=c;const e=l(o),i=(s=e.compositor.getParent(t))==null?void 0:s.id;e.compositor.remove(t),n("NodeRemoved",{projectId:o,nodeId:t}),n("NodeChanged",{projectId:o,nodeId:i})},x=async c=>{let{nodeId:t,props:o={},projectId:e=j.activeProjectId}=c;const i=l(e);return delete o.type,delete o.sourceType,i.compositor.update(t,o),n("NodeChanged",{projectId:e,nodeId:t}),i.compositor.get(t)},F=async c=>{let{nodeId:t,layout:o,projectId:e=j.activeProjectId,layoutProps:i={}}=c;l(e).compositor.update(t,{layout:o,layoutProps:i}),n("NodeChanged",{projectId:e,nodeId:t})},H=async c=>{const{nodeId:t,parentId:o,projectId:e=j.activeProjectId,index:i}=c;l(e).compositor.move(t,o,i),n("NodeChanged",{projectId:e,nodeId:t})},K=async c=>{var d,p;const{nodeAId:t,nodeBId:o,projectId:e=j.activeProjectId}=c,i=l(e),s=(d=i.compositor.getParent(t))==null?void 0:d.id,a=(p=i.compositor.getParent(o))==null?void 0:p.id;i.compositor.swap(t,o),n("NodeChanged",{projectId:e,nodeId:s}),n("NodeChanged",{projectId:e,nodeId:a})},q=async c=>{const{parentId:t,childIds:o,projectId:e=j.activeProjectId}=c;l(e).compositor.reorder(t,o),n("NodeChanged",{projectId:e,nodeId:t})},G=async c=>{const{projectId:t=j.activeProjectId,dynamicSources:o}=c,e=l(t);await r.clients.LiveApi().project.startProjectBroadcast({collectionId:e.videoApi.project.collectionId,projectId:e.videoApi.project.projectId,...o&&{dynamicSources:o}})},J=async c=>{const{projectId:t=j.activeProjectId}=c,o=l(t);await r.clients.LiveApi().project.stopProjectBroadcast({collectionId:o.videoApi.project.collectionId,projectId:o.videoApi.project.projectId})},z=async c=>{var I;const{rtmpUrl:t,rtmpKey:o,enabled:e,projectId:i=j.activeProjectId,props:s={}}=c,a=l(i),d={rtmpPush:{key:o,url:t}},p=await((I=r.clients.LiveApi().destination)==null?void 0:I.createDestination({collectionId:a.videoApi.project.collectionId,projectId:a.videoApi.project.projectId,address:d,enabled:e,metadata:{props:s}}));return await n("DestinationAdded",p.destination),b(p.destination)},W=async c=>{var i;const{destinationId:t,projectId:o=j.activeProjectId}=c,e=l(o);await((i=r.clients.LiveApi().destination)==null?void 0:i.deleteDestination({collectionId:e.videoApi.project.collectionId,projectId:e.videoApi.project.projectId,destinationId:t})),await n("DestinationRemoved",{projectId:o,destinationId:t})},Q=async c=>{var p;const{rtmpUrl:t,rtmpKey:o,destinationId:e,projectId:i=j.activeProjectId}=c,s=l(i),a={key:o,url:t},d=await((p=r.clients.LiveApi().destination)==null?void 0:p.updateDestination({collectionId:s.videoApi.project.collectionId,projectId:s.videoApi.project.projectId,destinationId:e,updateMask:["address.rtmpPush"],address:{rtmpPush:a}}));await n("DestinationChanged",d.destination)},V=async c=>{var d,p;const{projectId:t=j.activeProjectId,destinationId:o,props:e={}}=c,i=l(t),s=i.videoApi.project.destinations.find(I=>I.destinationId===o);if(!s)return;const a=await((p=r.clients.LiveApi().destination)==null?void 0:p.updateDestination({collectionId:i.videoApi.project.collectionId,projectId:i.videoApi.project.projectId,destinationId:o,updateMask:["metadata"],metadata:{...s.metadata||{},props:{...((d=s.metadata)==null?void 0:d.props)||{},...e}}}));await n("DestinationChanged",a.destination)},X=async c=>{var d;const{enabled:t,destinationId:o,projectId:e=j.activeProjectId}=c,i=l(e);if(i.videoApi.project.destinations.find(p=>o===p.destinationId).enabled===t)return;const a=await((d=r.clients.LiveApi().destination)==null?void 0:d.updateDestination({collectionId:i.videoApi.project.collectionId,projectId:i.videoApi.project.projectId,destinationId:o,updateMask:["enabled"],enabled:t}));await n("DestinationChanged",a.destination)},Y=async c=>{var d,p;const{rtmpUrl:t,rtmpKey:o,projectId:e=j.activeProjectId}=c,i=l(e),s={key:o,url:t},a=!0;if(i.videoApi.project.destinations.length>0){const I=await((d=r.clients.LiveApi().destination)==null?void 0:d.updateDestination({collectionId:i.videoApi.project.collectionId,projectId:i.videoApi.project.projectId,destinationId:i.videoApi.project.destinations[0].destinationId,updateMask:["address.rtmpPush"],address:{rtmpPush:s}}));await n("DestinationChanged",I.destination)}else{const I=await((p=r.clients.LiveApi().destination)==null?void 0:p.createDestination({collectionId:i.videoApi.project.collectionId,projectId:i.videoApi.project.projectId,address:{rtmpPush:s},enabled:a}));await n("DestinationAdded",I.destination)}};export{z as addDestination,_ as createNode,f as createProject,D as createSource,E as deleteNode,T as deleteProject,S as deleteSource,O as joinRoom,H as moveNode,k as recreateLayout,W as removeDestination,q as reorderNodes,U as setActiveProject,Y as setDestination,X as setDestinationEnabled,F as setNodeLayout,G as startBroadcast,J as stopBroadcast,K as swapNodes,Q as updateDestination,V as updateDestinationProps,x as updateNode,B as updateProjectProps,M as updateProjectPropsWithoutTrigger,R as updateSource,N as updateUserProps};
//# sourceMappingURL=commands-CaaOFqcQ.js.map
