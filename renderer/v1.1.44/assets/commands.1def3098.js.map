{"version":3,"file":"commands.1def3098.js","sources":["../../../../src/core/commands.ts"],"sourcesContent":["/* ---------------------------------------------------------------------------------------------\n * Copyright (c) Infiniscene, Inc. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * -------------------------------------------------------------------------------------------- */\n/**\n * Commands represent actions that can be taken by a user.\n *\n * Most commands accept a contextual parameter `projectId`.\n * If this parameter is excluded from a function call, the user's\n * active project will be used instead.\n *\n * Upon completion, a command may emit zero or more {@link EventMap Events}. Commands\n * return Promises that will attempt to resolve to the most pertinent value.\n * However, it is good practice to instead rely on events where possible, when\n * updating application state.\n *\n * For example, listening for the event `BroadcastStarted` will indicate\n * the following scenarios:\n *\n *   - The current user has initiated a broadcast\n *   - A collaborator (or host) has initiated a broadcast\n *   - Some external force has initiated a broadcast\n *\n * When depending on the Event rather than the command's return value, we can\n * be sure that our state is updating under all relevant circumstances.\n *\n * ----\n *\n * _Note: Commands marked `internal` are low-level commands that should only be\n * used with caution. Higher-level abstractions should be used to manipulate Nodes\n * (elements on the stream canvas)._\n *\n * @private This module is currently hidden from users of the Studio Kit.\n *  Favor the creation of helpers when supporting developers who require\n *  functionality contained in this module.\n *\n * @module Commands\n */\n\nimport {\n  getProject,\n  getUser,\n  hydrateProject,\n  toBaseDestination,\n  toBaseProject,\n} from './data'\nimport { CoreContext } from './context'\nimport decode from 'jwt-decode'\nimport { Props } from './types'\nimport { SDK } from './namespaces'\nimport { webrtcManager } from './webrtc'\nimport { getRoom } from './webrtc/simple-room'\nimport { trigger, triggerInternal } from './events'\n\nconst { state } = CoreContext\n\n/**\n * Update the current user's metadata with custom data opaque to the SDK.\n * Existing props are not affected unless explicitly overwritten.\n *\n * @category User\n */\nexport const updateUserProps = async (payload: {\n  /** Arbitrary metadata to associate with the user */\n  props?: Props\n}) => {\n  const collection = getUser()\n  if (!collection) return\n\n  const props = {\n    ...collection.props,\n    ...payload.props,\n  }\n  const response = await CoreContext.clients\n    .LiveApi()\n    .collection.updateCollection({\n      collectionId: collection.id,\n      updateMask: ['metadata'],\n      metadata: {\n        ...collection.metadata,\n        props,\n      },\n    })\n\n  // Trigger event to update state\n  await triggerInternal('UserChanged', response.collection)\n  return\n}\n\n/**\n * Create a project with optional metadata.\n *\n * ----\n * _Note: This is a low level function that necessitates careful management\n *  of the nodes within. Consider {@link ScenelessProject.create} instead._\n *\n * @category Project\n */\nexport const createProject = async (\n  payload: {\n    /** @private Settings associated with ScenelessProject (or other such wrapper) */\n    settings?: { [prop: string]: any }\n    /** Arbitrary metadata to associate with this project */\n    props?: Props\n    /** Pixel dimenions of the canvas (default: `{ x: 1280, y: 720 }`) */\n    size?: { x: number; y: number }\n  } = {},\n) => {\n  const { props = {}, size, settings = {} } = payload\n  const response = await CoreContext.Request.createProject({\n    settings,\n    props,\n    size,\n  })\n\n  // Trigger event to update state\n  await triggerInternal('ProjectAdded', response.project)\n\n  // Return the base project directly, for convenience\n  const internalProject = await hydrateProject(\n    response.project,\n    'ROLE_HOST' as SDK.Role,\n  )\n  return toBaseProject(internalProject)\n}\n\n/**\n * @private\n * Recreate a project's associated layout\n */\nexport const recreateLayout = async (payload: {\n  projectId: string\n  props?: Props\n}) => {\n  const { projectId, props = {} } = payload\n  const collectionId = getUser().id\n\n  // Get the Vapi project\n  const response = await CoreContext.clients.LiveApi().project.getProject({\n    collectionId,\n    projectId,\n    status: true,\n  })\n\n  // Return if the project is actively broadcasting\n  if (\n    [\n      SDK.ProjectBroadcastPhase.PROJECT_BROADCAST_PHASE_RUNNING,\n      SDK.ProjectBroadcastPhase.PROJECT_BROADCAST_PHASE_STARTING,\n    ].includes(response.status.phase)\n  ) {\n    return\n  }\n\n  const metadata = response.project.metadata || {}\n  const { layoutId } = metadata\n  const { video } = response.project.rendering\n  const { type } = response.project.metadata.props || {}\n\n  // Create the new layout\n  const layout = await CoreContext.Request.createLayout({\n    collectionId,\n    projectId,\n    type: type || 'sceneless',\n    settings: {},\n    size: {\n      x: video.width,\n      y: video.height,\n    },\n  })\n\n  // Set the new layout on the project\n  const updateResponse = await CoreContext.clients\n    .LiveApi()\n    .project.updateProject({\n      collectionId,\n      projectId,\n      updateMask: ['metadata'],\n      metadata: {\n        ...metadata,\n        layoutId: layout.id,\n      },\n    })\n\n  CoreContext.log.debug('New layout assigned to project:', { layout })\n    \n  // Trigger event to update state\n  await triggerInternal('ProjectChanged', { project: updateResponse.project })\n\n  // Delete the previous layout\n  await CoreContext.clients.LayoutApi().layout.deleteLayout({\n    layoutId,\n  })\n\n  CoreContext.log.debug('Previous layout deleted:', { layoutId })\n\n  // Return the base project directly, for convenience\n  const internalProject = await hydrateProject(\n    updateResponse.project,\n    'ROLE_HOST' as SDK.Role,\n  )\n\n  // Add props to the root node\n  await internalProject.compositor.update(\n    internalProject.compositor.getRoot().id,\n    props,\n  )\n  return toBaseProject(internalProject)\n}\n\n/**\n * Delete a project.\n *\n * @category Project\n */\nexport const deleteProject = async (payload: {\n  projectId: SDK.Project['id']\n}) => {\n  const { projectId } = payload\n  await CoreContext.Request.deleteProject({\n    projectId,\n  })\n\n  // Trigger event to update state\n  await triggerInternal('ProjectRemoved', { projectId })\n  return\n}\n\n/**\n * Update a project's metadata with custom data opaque to the SDK.\n * Existing props are not affected unless explicitly overwritten.\n *\n * @category Project\n */\nexport const updateProjectProps = async (payload: {\n  projectId: SDK.Project['id']\n  /** Arbitrary metadata to associate with this project */\n  props?: Props\n}) => {\n  const { projectId } = payload\n  const collectionId = getUser().id\n  const project = getProject(projectId)\n\n  const props = {\n    ...project.props,\n    ...payload.props,\n  }\n  const response = await CoreContext.clients.LiveApi().project.updateProject({\n    collectionId,\n    projectId,\n    updateMask: ['metadata'],\n    metadata: {\n      ...project.videoApi.project.metadata,\n      props,\n    },\n  })\n\n  // Trigger event to update state\n  await triggerInternal('ProjectChanged', { project: response.project })\n  return\n}\n/**\n * @deprecated Use updateProjectProps\n */\nexport const updateProjectMeta = (payload: {\n  projectId: SDK.Project['id']\n  /** Arbitrary metadata to associate with this project */\n  meta?: Props\n}) => updateProjectProps({ projectId: payload.projectId, props: payload.meta })\n\n/**\n * @private Use updateProjectProps without internaltriggers\n */\nexport const updateProjectPropsWithoutTrigger = async (payload: {\n  projectId: SDK.Project['id']\n  /** Arbitrary metadata to associate with this project */\n  props?: Props\n}) => {\n  const { projectId } = payload\n  const collectionId = getUser().id\n  const project = getProject(projectId)\n\n  const props = {\n    ...project.props,\n    ...payload.props,\n  }\n  const response = await CoreContext.clients.LiveApi().project.updateProject({\n    collectionId,\n    projectId,\n    updateMask: ['metadata'],\n    metadata: {\n      ...project.videoApi.project.metadata,\n      props,\n    },\n  })\n  return\n}\n\n/**\n * Set the active project for the user, setting up event handlers and\n *  disposing of event listeners for the previous active project.\n *\n * This project will be used as the default project\n *  for commands that do not specify `payload.projectId`\n *\n * @category Project\n */\nexport const setActiveProject = async (payload: {\n  projectId: SDK.Project['id']\n}): Promise<SDK.Project> => {\n  const project = state.projects.find((x) => x.id === payload.projectId)\n  if (!project) {\n    state.activeProjectId = null\n    triggerInternal('ActiveProjectChanged', { projectId: null })\n    return\n  }\n\n  const currentProject = state.projects.find(\n    (x) => x.id === state.activeProjectId,\n  )\n  if (project === currentProject) return\n  if (currentProject) {\n    // Perform any necessary cleanup\n    Array.from(webrtcManager.rooms.keys()).map(webrtcManager.removeRoom)\n    await CoreContext.clients\n      .LayoutApi()\n      .unsubscribeFromLayout(currentProject.layoutApi.layoutId)\n    await CoreContext.clients\n      .LiveApi()\n      .unsubscribeFromProject(\n        currentProject.videoApi.project.collectionId,\n        currentProject.videoApi.project.projectId,\n      )\n  }\n\n  await CoreContext.clients\n    .LayoutApi()\n    .subscribeToLayout(project.layoutApi.layoutId)\n  await CoreContext.clients\n    .LiveApi()\n    .subscribeToProject(\n      project.videoApi.project.collectionId,\n      project.videoApi.project.projectId,\n    )\n\n  // Asynchronously ensure latest project state\n  CoreContext.clients\n    .LiveApi()\n    .project.getProject({\n      collectionId: project.videoApi.project.collectionId,\n      projectId: project.videoApi.project.projectId,\n      status: true,\n    })\n    .then((response) => {\n      triggerInternal('ProjectChanged', {\n        project: response.project,\n        phase: response.status?.phase,\n        broadcastId: response.status?.broadcastId,\n      })\n    })\n\n  triggerInternal('ActiveProjectChanged', {\n    projectId: project.id,\n  })\n  return toBaseProject(project)\n}\n\n/**\n * Initiate WebRTC connection to the room associated with this project.\n *\n * @category Project\n */\nexport const joinRoom = async (payload: {\n  projectId: SDK.Project['id']\n  /** A public name for other guests will see associated with your {@link Participant} */\n  displayName?: string\n}) => {\n  const { projectId, displayName = 'Guest' } = payload\n  const project = state.projects.find((x) => x.id === projectId)\n\n  // Get the SFU token\n  let token = project.sfuToken\n  if (!token) {\n    let { webrtcAccess } = await CoreContext.clients\n      .LiveApi()\n      .authentication.createWebRtcAccessToken({\n        collectionId: project.videoApi.project.collectionId,\n        projectId: project.videoApi.project.projectId,\n        displayName,\n      })\n    token = webrtcAccess.accessToken\n  }\n  const tokenData = decode(token) as any\n  const roomName = tokenData.video.room\n  const url = new URL(CoreContext.clients.getLiveKitServer())\n  const baseUrl = url.host + url.pathname\n  const roomContext = webrtcManager.ensureRoom(baseUrl, roomName, token)\n  roomContext.bindApiClient(CoreContext.clients)\n  await roomContext.connect()\n\n  project.sfuToken = token\n  project.roomId = roomName\n  const room = getRoom(roomName)\n  trigger('RoomJoined', {\n    projectId: project.id,\n    room,\n  })\n  return room\n}\n\n/**\n * Create a node within the project's scene tree.\n * A node is functionally comparable to a DOM Node - it serves only as a vessel\n * of properties.\n *\n * A node is not inherently useful. It is up to the renderer to interpret the data it holds.\n * If a node is given data the renderer is not aware of, it will accomplish nothing.\n *\n * ----\n * _Note: This is a low level interface. Abstractions like {@link ScenelessProject}\n * prevent the need for node manipulations._\n *\n * @internal _Use with caution_\n * @category Node\n */\nexport const createNode = async (payload: {\n  projectId?: string\n  props?: { [prop: string]: any }\n  parentId: string\n  index?: number\n}) => {\n  let {\n    props = {},\n    parentId,\n    index,\n    projectId = state.activeProjectId,\n  } = payload\n  const project = getProject(projectId)\n\n  // Update state\n  const nodeId = await project.compositor.insert(props, parentId, index)\n  triggerInternal('NodeAdded', { projectId, nodeId })\n  triggerInternal('NodeChanged', { projectId, nodeId: parentId })\n  return project.compositor.get(nodeId)\n}\n\n/**\n * Remove a node from the project's scene tree.\n *\n * ----\n * _Note: This is a low level interface. Abstractions like {@link ScenelessProject}\n * prevent the need for node manipulations._\n *\n * @internal _Use with caution_\n * @category Node\n */\nexport const deleteNode = async (payload: {\n  projectId?: string\n  nodeId: string\n}) => {\n  let { nodeId, projectId = state.activeProjectId } = payload\n  const project = getProject(projectId)\n  const parentId = project.compositor.getParent(nodeId)?.id\n\n  // Update state\n  project.compositor.remove(nodeId)\n  triggerInternal('NodeRemoved', { projectId, nodeId })\n  triggerInternal('NodeChanged', { projectId, nodeId: parentId })\n}\n\n/**\n * Update the properties of a node.\n * `payload.props` will be shallowly merged onto its existing `props`.\n *\n * ----\n * _Note: This is a low level interface. Abstractions like {@link ScenelessProject}\n * prevent the need for node manipulations._\n *\n * @internal _Use with caution_\n * @category Node\n */\nexport const updateNode = async (payload: {\n  projectId?: string\n  nodeId: string\n  props: { [prop: string]: any }\n}) => {\n  let { nodeId, props = {}, projectId = state.activeProjectId } = payload\n  const project = getProject(projectId)\n\n  // Prune protected fields\n  delete props.type\n  delete props.sourceType\n\n  // Update state\n  project.compositor.update(nodeId, props)\n  triggerInternal('NodeChanged', { projectId, nodeId })\n  return project.compositor.get(nodeId)\n}\n\n/**\n * Update the layout of a node.\n *\n * ----\n * _Note: This is a low level interface. Abstractions like {@link ScenelessProject}\n * prevent the need for node manipulations._\n *\n * @internal _Use with caution_\n * @category Node\n */\nexport const setNodeLayout = async (payload: {\n  projectId?: string\n  nodeId: string\n  layout: string\n  layoutProps?: { [prop: string]: any }\n}) => {\n  let {\n    nodeId,\n    layout,\n    projectId = state.activeProjectId,\n    layoutProps = {},\n  } = payload\n  const project = getProject(projectId)\n\n  // Update state\n  project.compositor.update(nodeId, {\n    layout,\n    layoutProps,\n  })\n  triggerInternal('NodeChanged', { projectId, nodeId })\n}\n\n/**\n * Move a node to a different parent node.\n *\n * ----\n * _Note: This is a low level interface. Abstractions like {@link ScenelessProject}\n * prevent the need for node manipulations._\n *\n * @internal _Use with caution_\n * @category Node\n */\nexport const moveNode = async (payload: {\n  projectId?: string\n  nodeId: string\n  parentId: string\n  index?: number\n}) => {\n  const { nodeId, parentId, projectId = state.activeProjectId, index } = payload\n  const project = getProject(projectId)\n\n  // Update state\n  project.compositor.move(nodeId, parentId, index)\n  // TODO: Determine if this is necessary (likely need only the events from Event API)\n  triggerInternal('NodeChanged', { projectId, nodeId })\n}\n\n/**\n * Swap the positions of two nodes, changing parents if necessary.\n *\n * ----\n * _Note: This is a low level interface. Abstractions like {@link ScenelessProject}\n * prevent the need for node manipulations._\n *\n * @internal _Use with caution_\n * @category Node\n */\nexport const swapNodes = async (payload: {\n  projectId?: string\n  nodeAId: string\n  nodeBId: string\n}) => {\n  const { nodeAId, nodeBId, projectId = state.activeProjectId } = payload\n  const project = getProject(projectId)\n\n  const parentAId = project.compositor.getParent(nodeAId)?.id\n  const parentBId = project.compositor.getParent(nodeBId)?.id\n\n  // Update state\n  project.compositor.swap(nodeAId, nodeBId)\n  triggerInternal('NodeChanged', { projectId, nodeId: parentAId })\n  triggerInternal('NodeChanged', { projectId, nodeId: parentBId })\n}\n\n/**\n * Change the order of a node's children.\n *\n * ----\n * _Note: This is a low level interface. Abstractions like {@link ScenelessProject}\n * prevent the need for node manipulations._\n *\n * @internal _Use with caution_\n * @category Node\n */\nexport const reorderNodes = async (payload: {\n  projectId?: string\n  parentId: string\n  childIds: string[]\n}) => {\n  const { parentId, childIds, projectId = state.activeProjectId } = payload\n  const project = getProject(projectId)\n\n  // Update state\n  project.compositor.reorder(parentId, childIds)\n  triggerInternal('NodeChanged', { projectId, nodeId: parentId })\n}\n\n/**\n * Start broadcasting a project.\n *\n * ----\n * _Note: Destination, encoding, and rendering details will be read from the Project\n * at time of broadcast, so they should be updated ahead of time._\n *\n * @category Broadcast\n */\nexport const startBroadcast = async (payload: { projectId?: string }) => {\n  const { projectId = state.activeProjectId } = payload\n  const project = getProject(projectId)\n  await CoreContext.clients.LiveApi().project.startProjectBroadcast({\n    collectionId: project.videoApi.project.collectionId,\n    projectId: project.videoApi.project.projectId,\n  })\n  // Event is handled on receiving end of VideoAPI\n}\n\n/**\n * Stop broadcasting a project.\n *\n * @category Broadcast\n */\nexport const stopBroadcast = async (payload: { projectId?: string }) => {\n  const { projectId = state.activeProjectId } = payload\n  const project = getProject(projectId)\n  await CoreContext.clients.LiveApi().project.stopProjectBroadcast({\n    collectionId: project.videoApi.project.collectionId,\n    projectId: project.videoApi.project.projectId,\n  })\n  // Event is handled on receiving end of VideoAPI\n}\n\n/**\n * Add a {@link Destination} to a project.\n *\n * @category Destination\n */\nexport const addDestination = async (payload: {\n  projectId?: string\n  rtmpUrl: string\n  rtmpKey: string\n  enabled: boolean\n  props?: Props\n  /** @deprecated Use `props` */\n  metadata?: Props\n}) => {\n  const {\n    rtmpUrl,\n    rtmpKey,\n    enabled,\n    projectId = state.activeProjectId,\n    metadata = {},\n    props = {},\n  } = payload\n  const project = getProject(projectId)\n  const address = {\n    rtmpPush: {\n      key: rtmpKey,\n      url: rtmpUrl,\n    },\n  } as SDK.Destination['address']\n\n  const response = await CoreContext.clients\n    .LiveApi()\n    .destination?.createDestination({\n      collectionId: project.videoApi.project.collectionId,\n      projectId: project.videoApi.project.projectId,\n      address,\n      enabled,\n      metadata: {\n        props: {\n          ...metadata,\n          ...props,\n        },\n      },\n    })\n\n  // Trigger event to update state\n  await triggerInternal('DestinationAdded', response.destination)\n  return toBaseDestination(response.destination)\n}\n\n/**\n * Remove a {@link Destination} from the project.\n *\n * @category Destination\n */\nexport const removeDestination = async (payload: {\n  projectId?: string\n  destinationId: string\n}) => {\n  const { destinationId, projectId = state.activeProjectId } = payload\n  const project = getProject(projectId)\n\n  await CoreContext.clients.LiveApi().destination?.deleteDestination({\n    collectionId: project.videoApi.project.collectionId,\n    projectId: project.videoApi.project.projectId,\n    destinationId,\n  })\n\n  // Trigger event to update state\n  await triggerInternal('DestinationRemoved', { projectId, destinationId })\n  return\n}\n\n/**\n * Update an existing {@link Destination} on the project.\n *\n * @category Destination\n */\nexport const updateDestination = async (payload: {\n  projectId?: string\n  destinationId: string\n  rtmpUrl: string\n  rtmpKey: string\n}) => {\n  const {\n    rtmpUrl,\n    rtmpKey,\n    destinationId,\n    projectId = state.activeProjectId,\n  } = payload\n  const project = getProject(projectId)\n\n  const rtmpPush = {\n    key: rtmpKey,\n    url: rtmpUrl,\n  }\n\n  const response = await CoreContext.clients\n    .LiveApi()\n    .destination?.updateDestination({\n      collectionId: project.videoApi.project.collectionId,\n      projectId: project.videoApi.project.projectId,\n      destinationId,\n      updateMask: ['address.rtmpPush'],\n      address: {\n        rtmpPush,\n      },\n    })\n\n  // Trigger event to update state\n  await triggerInternal('DestinationChanged', response.destination)\n  return\n}\n\n/**\n * Update the metadata of an existing {@link Destination} on the project.\n *\n * @category Destination\n */\nexport const updateDestinationProps = async (payload: {\n  projectId: string\n  destinationId: string\n  props: Props\n}) => {\n  const {\n    projectId = state.activeProjectId,\n    destinationId,\n    props = {},\n  } = payload\n  const project = getProject(projectId)\n  const destination = project.videoApi.project.destinations.find(\n    (x) => x.destinationId === destinationId,\n  )\n  if (!destination) return\n\n  const response = await CoreContext.clients\n    .LiveApi()\n    .destination?.updateDestination({\n      collectionId: project.videoApi.project.collectionId,\n      projectId: project.videoApi.project.projectId,\n      destinationId,\n      updateMask: ['metadata'],\n      metadata: {\n        ...(destination.metadata || {}),\n        props: {\n          ...(destination.metadata?.props || {}),\n          ...props,\n        },\n      },\n    })\n\n  // Trigger event to update state\n  await triggerInternal('DestinationChanged', response.destination)\n  return\n}\n/**\n * @deprecated Use updateDestinationProps\n */\nexport const updateDestinationMeta = (payload: {\n  projectId: string\n  destinationId: string\n  metadata?: Props\n}) =>\n  updateDestinationProps({\n    projectId: payload.projectId,\n    destinationId: payload.destinationId,\n    props: payload.metadata,\n  })\n\n/**\n * Enable or disable an existing {@link Destination} on the project.\n *\n * @category Destination\n */\nexport const setDestinationEnabled = async (payload: {\n  projectId?: string\n  destinationId: string\n  enabled: boolean\n}) => {\n  const { enabled, destinationId, projectId = state.activeProjectId } = payload\n  const project = getProject(projectId)\n  const destination = project.videoApi.project.destinations.find(\n    (x) => destinationId === x.destinationId,\n  )\n  if (destination.enabled === enabled) return\n\n  const response = await CoreContext.clients\n    .LiveApi()\n    .destination?.updateDestination({\n      collectionId: project.videoApi.project.collectionId,\n      projectId: project.videoApi.project.projectId,\n      destinationId,\n      updateMask: ['enabled'],\n      enabled,\n    })\n\n  // Trigger event to update state\n  await triggerInternal('DestinationChanged', response.destination)\n\n  const event = enabled ? 'DestinationEnabled' : 'DestinationDisabled'\n  /** @deprecated Use DestinationChanged */\n  trigger(event, {\n    projectId,\n    destinationId,\n  })\n  return\n}\n\n/**\n * Overwrite project's first {@link Destination} with new configuration\n *  If no destination exists, one will be created instead.\n *\n * This is a helper to manage a single-destination project. For greater control,\n *  use {@link addDestination}, {@link removeDestination}, or {@link updateDestination}\n *\n * @category Destination\n */\nexport const setDestination = async (payload: {\n  projectId?: string\n  rtmpUrl: string\n  rtmpKey: string\n}) => {\n  const { rtmpUrl, rtmpKey, projectId = state.activeProjectId } = payload\n  const project = getProject(projectId)\n  const rtmpPush = {\n    key: rtmpKey,\n    url: rtmpUrl,\n  }\n  const enabled = true\n\n  if (project.videoApi.project.destinations.length > 0) {\n    // Update existing\n    const response = await CoreContext.clients\n      .LiveApi()\n      .destination?.updateDestination({\n        collectionId: project.videoApi.project.collectionId,\n        projectId: project.videoApi.project.projectId,\n        destinationId: project.videoApi.project.destinations[0].destinationId,\n        updateMask: ['address.rtmpPush'],\n        address: { rtmpPush },\n      })\n\n    // Trigger event to update state\n    await triggerInternal('DestinationChanged', response.destination)\n  } else {\n    // Create new\n    const response = await CoreContext.clients\n      .LiveApi()\n      .destination?.createDestination({\n        collectionId: project.videoApi.project.collectionId,\n        projectId: project.videoApi.project.projectId,\n        address: { rtmpPush },\n        enabled,\n      })\n\n    // Trigger event to update state\n    await triggerInternal('DestinationAdded', response.destination)\n  }\n\n  /** @deprecated */\n  trigger('DestinationSet', {\n    projectId,\n    rtmpUrl,\n    rtmpKey,\n  })\n  return\n}\n"],"names":["state","CoreContext","updateUserProps","payload","collection","getUser","props","response","clients","LiveApi","updateCollection","collectionId","id","updateMask","metadata","triggerInternal","createProject","size","settings","Request","project","internalProject","hydrateProject","toBaseProject","recreateLayout","projectId","getProject","status","SDK","PROJECT_BROADCAST_PHASE_RUNNING","PROJECT_BROADCAST_PHASE_STARTING","includes","phase","layoutId","video","rendering","type","layout","createLayout","x","width","y","height","updateResponse","updateProject","log","debug","LayoutApi","deleteLayout","compositor","update","getRoot","deleteProject","updateProjectProps","videoApi","updateProjectMeta","meta","updateProjectPropsWithoutTrigger","setActiveProject","projects","find","activeProjectId","currentProject","Array","from","webrtcManager","rooms","keys","map","removeRoom","unsubscribeFromLayout","layoutApi","unsubscribeFromProject","subscribeToLayout","subscribeToProject","then","broadcastId","joinRoom","displayName","token","sfuToken","webrtcAccess","authentication","createWebRtcAccessToken","accessToken","roomName","tokenData","decode","room","url","URL","getLiveKitServer","baseUrl","host","pathname","roomContext","ensureRoom","bindApiClient","connect","roomId","getRoom","trigger","createNode","parentId","index","nodeId","insert","get","deleteNode","getParent","remove","updateNode","sourceType","setNodeLayout","layoutProps","moveNode","move","swapNodes","nodeAId","nodeBId","parentAId","parentBId","swap","reorderNodes","childIds","reorder","startBroadcast","startProjectBroadcast","stopBroadcast","stopProjectBroadcast","addDestination","rtmpUrl","rtmpKey","enabled","address","rtmpPush","key","destination","createDestination","toBaseDestination","removeDestination","destinationId","deleteDestination","updateDestination","updateDestinationProps","destinations","updateDestinationMeta","setDestinationEnabled","setDestination","length"],"mappings":"0HAsDA,KAAM,CAAEA,SAAUC,EAQLC,EAAkB,KAAOC,IAGhC,CACJ,KAAMC,GAAaC,IACnB,GAAI,CAACD,EAAY,OAEjB,KAAME,GAAQ,CACZ,GAAGF,EAAWE,MACd,GAAGH,EAAQG,OAEPC,EAAW,KAAMN,GAAYO,QAChCC,QACAL,EAAAA,WAAWM,iBAAiB,CAC3BC,aAAcP,EAAWQ,GACzBC,WAAY,CAAC,UAAD,EACZC,SAAU,CACR,GAAGV,EAAWU,SACdR,OAFQ,CAHiB,CAFR,EAYjB,KAAAS,GAAgB,cAAeR,EAASH,UAAxC,CAER,EAWaY,EAAgB,MAC3Bb,EAOI,KACD,CACH,KAAM,CAAEG,QAAQ,CAAV,EAAcW,OAAMC,WAAW,CAAA,GAAOf,EACtCI,EAAW,KAAMN,GAAYkB,QAAQH,cAAc,CACvDE,WACAZ,QACAW,MAHuD,CAAlC,EAOjB,KAAAF,GAAgB,eAAgBR,EAASa,OAAzC,EAGN,KAAMC,GAAkB,KAAMC,GAC5Bf,EAASa,QACT,WADA,EAGF,MAAOG,GAAcF,EACvB,EAMaG,EAAiB,KAAOrB,IAG/B,CACJ,KAAM,CAAEsB,YAAWnB,QAAQ,CAAA,GAAOH,EAC5BQ,EAAeN,IAAUO,GAGzBL,EAAW,KAAMN,GAAYO,QAAQC,QAAUW,EAAAA,QAAQM,WAAW,CACtEf,eACAc,YACAE,OAAQ,EAH8D,CAAjD,EAQrB,GAAA,CACEC,EAA0BC,gCAC1BD,EAA0BE,gCAF5B,EAGEC,SAASxB,EAASoB,OAAOK,KAH3B,EAKA,OAGF,KAAMlB,GAAWP,EAASa,QAAQN,UAAY,CAAA,EACxC,CAAEmB,YAAanB,EACf,CAAEoB,SAAU3B,EAASa,QAAQe,UAC7B,CAAEC,QAAS7B,EAASa,QAAQN,SAASR,OAAS,CAAA,EAG9C+B,EAAS,KAAMpC,GAAYkB,QAAQmB,aAAa,CACpD3B,eACAc,YACAW,KAAMA,GAAQ,YACdlB,SAAU,CAJ0C,EAKpDD,KAAM,CACJsB,EAAGL,EAAMM,MACTC,EAAGP,EAAMQ,MAFL,CAL8C,CAAjC,EAYfC,EAAiB,KAAM1C,GAAYO,QACtCC,QACAW,EAAAA,QAAQwB,cAAc,CACrBjC,eACAc,YACAZ,WAAY,CAAC,UAAD,EACZC,SAAU,CACR,GAAGA,EACHmB,SAAUI,EAAOzB,EAFT,CAJW,CAFI,EAY7BX,EAAY4C,IAAIC,MAAM,kCAAmC,CAAET,SAA3D,EAGA,KAAMtB,GAAgB,iBAAkB,CAAEK,QAASuB,EAAevB,OAA1B,GAGxC,KAAMnB,GAAYO,QAAQuC,UAApB,EAAgCV,OAAOW,aAAa,CACxDf,UADwD,CAApD,EAINhC,EAAY4C,IAAIC,MAAM,2BAA4B,CAAEb,WAApD,EAGA,KAAMZ,GAAkB,KAAMC,GAC5BqB,EAAevB,QACf,WADA,EAKI,YAAAC,GAAgB4B,WAAWC,OAC/B7B,EAAgB4B,WAAWE,QAA3B,EAAqCvC,GACrCN,CAFI,EAICiB,EAAcF,EACvB,EAOa+B,EAAgB,KAAOjD,IAE9B,CACJ,KAAM,CAAEsB,aAActB,EAChB,KAAAF,GAAYkB,QAAQiC,cAAc,CACtC3B,WADsC,CAAlC,EAKN,KAAMV,GAAgB,iBAAkB,CAAEU,WAAF,CAAlB,CAExB,EAQa4B,EAAqB,KAAOlD,IAInC,CACJ,KAAM,CAAEsB,aAActB,EAChBQ,EAAeN,IAAUO,GACzBQ,EAAUM,EAAWD,GAErBnB,EAAQ,CACZ,GAAGc,EAAQd,MACX,GAAGH,EAAQG,OAEPC,EAAW,KAAMN,GAAYO,QAAQC,QAAUW,EAAAA,QAAQwB,cAAc,CACzEjC,eACAc,YACAZ,WAAY,CAAC,UAAD,EACZC,SAAU,CACR,GAAGM,EAAQkC,SAASlC,QAAQN,SAC5BR,OAFQ,CAJ+D,CAApD,EAWvB,KAAMS,GAAgB,iBAAkB,CAAEK,QAASb,EAASa,OAApB,EAE1C,EAIamC,EAAqBpD,GAI5BkD,EAAmB,CAAE5B,UAAWtB,EAAQsB,UAAWnB,MAAOH,EAAQqD,IAA/C,CAAA,EAKZC,EAAmC,KAAOtD,IAIjD,CACJ,KAAM,CAAEsB,aAActB,EAChBQ,EAAeN,IAAUO,GACzBQ,EAAUM,EAAWD,GAErBnB,EAAQ,CACZ,GAAGc,EAAQd,MACX,GAAGH,EAAQG,OAEI,KAAML,GAAYO,QAAQC,QAApB,EAA8BW,QAAQwB,cAAc,CACzEjC,eACAc,YACAZ,WAAY,CAAC,UAAD,EACZC,SAAU,CACR,GAAGM,EAAQkC,SAASlC,QAAQN,SAC5BR,OAFQ,CAJ+D,CAApD,CAUzB,EAWaoD,EAAmB,KAAOvD,IAEX,CACpB,KAAAiB,GAAUpB,EAAM2D,SAASC,KAAMrB,GAAMA,EAAE3B,KAAOT,EAAQsB,SAA5C,EAChB,GAAI,CAACL,EAAS,CACZpB,EAAM6D,gBAAkB,KACxB9C,EAAgB,uBAAwB,CAAEU,UAAW,IAAb,CAAxC,EACA,MACF,CAEM,KAAAqC,GAAiB9D,EAAM2D,SAASC,KACnCrB,GAAMA,EAAE3B,KAAOZ,EAAM6D,eADD,EAGvB,GAAIzC,IAAY0C,EAChB,MAAIA,IAEIC,OAAAC,KAAKC,EAAcC,MAAMC,KAAzB,CAAA,EAAiCC,IAAIH,EAAcI,UAAnD,EACN,KAAMpE,GAAYO,QACfuC,UADG,EAEHuB,sBAAsBR,EAAeS,UAAUtC,QAF5C,EAGN,KAAMhC,GAAYO,QACfC,QADG,EAEH+D,uBACCV,EAAeR,SAASlC,QAAQT,aAChCmD,EAAeR,SAASlC,QAAQK,SAJ9B,GAQR,KAAMxB,GAAYO,QACfuC,UADG,EAEH0B,kBAAkBrD,EAAQmD,UAAUtC,QAFjC,EAGN,KAAMhC,GAAYO,QACfC,QADG,EAEHiE,mBACCtD,EAAQkC,SAASlC,QAAQT,aACzBS,EAAQkC,SAASlC,QAAQK,SAJvB,EAQNxB,EAAYO,QACTC,UACAW,QAAQM,WAAW,CAClBf,aAAcS,EAAQkC,SAASlC,QAAQT,aACvCc,UAAWL,EAAQkC,SAASlC,QAAQK,UACpCE,OAAQ,EAHU,CAFtB,EAOGgD,KAAMpE,GAAa,SAClBQ,EAAgB,iBAAkB,CAChCK,QAASb,EAASa,QAClBY,MAAOzB,KAASoB,SAATpB,cAAiByB,MACxB4C,YAAarE,KAASoB,SAATpB,cAAiBqE,WAHE,CAAlC,EARJ,EAeA7D,EAAgB,uBAAwB,CACtCU,UAAWL,EAAQR,EADmB,CAAxC,EAGOW,EAAcH,EACvB,EAOayD,EAAW,KAAO1E,IAIzB,CACE,KAAA,CAAEsB,YAAWqD,cAAc,SAAY3E,EACvCiB,EAAUpB,EAAM2D,SAASC,KAAMrB,GAAMA,EAAE3B,KAAOa,CAApC,EAGhB,GAAIsD,GAAQ3D,EAAQ4D,SACpB,GAAI,CAACD,EAAO,CACN,GAAA,CAAEE,gBAAiB,KAAMhF,GAAYO,QACtCC,QAD0B,EAE1ByE,eAAeC,wBAAwB,CACtCxE,aAAcS,EAAQkC,SAASlC,QAAQT,aACvCc,UAAWL,EAAQkC,SAASlC,QAAQK,UACpCqD,aAHsC,CAFb,EAO7BC,EAAQE,EAAaG,WACvB,CAEM,KAAAC,GAAWC,AADCC,EAAOR,GACE7C,MAAMsD,KAC3BC,EAAM,GAAIC,KAAIzF,EAAYO,QAAQmF,iBAApB,CAAR,EACNC,EAAUH,EAAII,KAAOJ,EAAIK,SACzBC,EAAc9B,EAAc+B,WAAWJ,EAASP,EAAUN,CAA5C,EACRgB,EAAAE,cAAchG,EAAYO,OAA1B,EACZ,KAAMuF,GAAYG,UAElB9E,EAAQ4D,SAAWD,EACnB3D,EAAQ+E,OAASd,EACX,KAAAG,GAAOY,EAAQf,GACrBgB,SAAQ,aAAc,CACpB5E,UAAWL,EAAQR,GACnB4E,MAFoB,CAAtB,EAIOA,CACT,EAiBac,EAAa,KAAOnG,IAK3B,CACA,GAAA,CACFG,QAAQ,CADN,EAEFiG,WACAC,QACA/E,YAAYzB,EAAM6D,iBAChB1D,EACE,KAAAiB,GAAUM,EAAWD,GAGrBgF,EAAS,KAAMrF,GAAQ6B,WAAWyD,OAAOpG,EAAOiG,EAAUC,CAA3C,EACrBzF,SAAgB,YAAa,CAAEU,YAAWgF,QAAb,CAA7B,EACA1F,EAAgB,cAAe,CAAEU,YAAWgF,OAAQF,CAArB,CAA/B,EACOnF,EAAQ6B,WAAW0D,IAAIF,CAAvB,CACT,EAYaG,EAAa,KAAOzG,IAG3B,OACJ,GAAI,CAAEsG,SAAQhF,YAAYzB,EAAM6D,iBAAoB1D,EAC9C,KAAAiB,GAAUM,EAAWD,GACrB8E,EAAWnF,KAAQ6B,WAAW4D,UAAUJ,CAA7B,IAAArF,cAAsCR,GAG/CQ,EAAA6B,WAAW6D,OAAOL,CAAlB,EACR1F,EAAgB,cAAe,CAAEU,YAAWgF,QAAb,CAA/B,EACA1F,EAAgB,cAAe,CAAEU,YAAWgF,OAAQF,CAArB,CAA/B,CACF,EAaaQ,EAAa,KAAO5G,IAI3B,CACJ,GAAI,CAAEsG,SAAQnG,QAAQ,CAAlB,EAAsBmB,YAAYzB,EAAM6D,iBAAoB1D,EAC1D,KAAAiB,GAAUM,EAAWD,GAG3B,aAAOnB,GAAM8B,KACb,MAAO9B,GAAM0G,WAGL5F,EAAA6B,WAAWC,OAAOuD,EAAQnG,CAA1B,EACRS,EAAgB,cAAe,CAAEU,YAAWgF,QAAb,CAA/B,EACOrF,EAAQ6B,WAAW0D,IAAIF,CAAvB,CACT,EAYaQ,EAAgB,KAAO9G,IAK9B,CACA,GAAA,CACFsG,SACApE,SACAZ,YAAYzB,EAAM6D,gBAClBqD,cAAc,CAAA,GACZ/G,EAIIiB,AAHQM,EAAWD,GAGnBwB,WAAWC,OAAOuD,EAAQ,CAChCpE,SACA6E,cAFM,EAIRnG,EAAgB,cAAe,CAAEU,YAAWgF,QAAb,CAA/B,CACF,EAYaU,EAAW,KAAOhH,IAKzB,CACJ,KAAM,CAAEsG,SAAQF,WAAU9E,YAAYzB,EAAM6D,gBAAiB2C,SAAUrG,EAIvEiB,AAHgBM,EAAWD,GAGnBwB,WAAWmE,KAAKX,EAAQF,EAAUC,CAA1C,EAEAzF,EAAgB,cAAe,CAAEU,YAAWgF,QAAb,CAA/B,CACF,EAYaY,EAAY,KAAOlH,IAI1B,SACJ,KAAM,CAAEmH,UAASC,UAAS9F,YAAYzB,EAAM6D,iBAAoB1D,EAC1DiB,EAAUM,EAAWD,GAErB+F,EAAYpG,KAAQ6B,WAAW4D,UAAUS,CAA7B,IAAAlG,cAAuCR,GACnD6G,EAAYrG,KAAQ6B,WAAW4D,UAAUU,CAA7B,IAAAnG,cAAuCR,GAGjDQ,EAAA6B,WAAWyE,KAAKJ,EAASC,CAAzB,EACRxG,EAAgB,cAAe,CAAEU,YAAWgF,OAAQe,CAArB,CAA/B,EACAzG,EAAgB,cAAe,CAAEU,YAAWgF,OAAQgB,CAArB,CAA/B,CACF,EAYaE,EAAe,KAAOxH,IAI7B,CACJ,KAAM,CAAEoG,WAAUqB,WAAUnG,YAAYzB,EAAM6D,iBAAoB1D,EAI1DiB,AAHQM,EAAWD,GAGnBwB,WAAW4E,QAAQtB,EAAUqB,CAA7B,EACR7G,EAAgB,cAAe,CAAEU,YAAWgF,OAAQF,CAArB,CAA/B,CACF,EAWauB,EAAiB,KAAO3H,IAAoC,CACjE,KAAA,CAAEsB,YAAYzB,EAAM6D,iBAAoB1D,EACxCiB,EAAUM,EAAWD,GAC3B,KAAMxB,GAAYO,QAAQC,QAApB,EAA8BW,QAAQ2G,sBAAsB,CAChEpH,aAAcS,EAAQkC,SAASlC,QAAQT,aACvCc,UAAWL,EAAQkC,SAASlC,QAAQK,SAF4B,CAA5D,CAKR,EAOauG,EAAgB,KAAO7H,IAAoC,CAChE,KAAA,CAAEsB,YAAYzB,EAAM6D,iBAAoB1D,EACxCiB,EAAUM,EAAWD,GAC3B,KAAMxB,GAAYO,QAAQC,QAApB,EAA8BW,QAAQ6G,qBAAqB,CAC/DtH,aAAcS,EAAQkC,SAASlC,QAAQT,aACvCc,UAAWL,EAAQkC,SAASlC,QAAQK,SAF2B,CAA3D,CAKR,EAOayG,EAAiB,KAAO/H,IAQ/B,OACE,KAAA,CACJgI,UACAC,UACAC,UACA5G,YAAYzB,EAAM6D,gBAClB/C,WAAW,CALP,EAMJR,QAAQ,CAAA,GACNH,EACEiB,EAAUM,EAAWD,GACrB6G,EAAU,CACdC,SAAU,CACRC,IAAKJ,EACL3C,IAAK0C,CAFG,GAMN5H,EAAW,KAAMN,MAAYO,QAChCC,QACAgI,EAAAA,cAFoBxI,cAEPyI,kBAAkB,CAC9B/H,aAAcS,EAAQkC,SAASlC,QAAQT,aACvCc,UAAWL,EAAQkC,SAASlC,QAAQK,UACpC6G,UACAD,UACAvH,SAAU,CACRR,MAAO,CACL,GAAGQ,EACH,GAAGR,CAFE,CADC,CALoB,IAc5B,YAAAS,GAAgB,mBAAoBR,EAASkI,WAA7C,EACCE,EAAkBpI,EAASkI,WAA3B,CACT,EAOaG,EAAoB,KAAOzI,IAGlC,OACJ,KAAM,CAAE0I,gBAAepH,YAAYzB,EAAM6D,iBAAoB1D,EACvDiB,EAAUM,EAAWD,GAE3B,KAAMxB,MAAYO,QAAQC,QAApB,EAA8BgI,cAA9BxI,cAA2C6I,kBAAkB,CACjEnI,aAAcS,EAAQkC,SAASlC,QAAQT,aACvCc,UAAWL,EAAQkC,SAASlC,QAAQK,UACpCoH,eAHiE,IAOnE,KAAM9H,GAAgB,qBAAsB,CAAEU,YAAWoH,eAAb,CAAtB,CAExB,EAOaE,EAAoB,KAAO5I,IAKlC,OACE,KAAA,CACJgI,UACAC,UACAS,gBACApH,YAAYzB,EAAM6D,iBAChB1D,EACEiB,EAAUM,EAAWD,GAErB8G,EAAW,CACfC,IAAKJ,EACL3C,IAAK0C,GAGD5H,EAAW,KAAMN,MAAYO,QAChCC,QACAgI,EAAAA,cAFoBxI,cAEP8I,kBAAkB,CAC9BpI,aAAcS,EAAQkC,SAASlC,QAAQT,aACvCc,UAAWL,EAAQkC,SAASlC,QAAQK,UACpCoH,gBACAhI,WAAY,CAAC,kBAAD,EACZyH,QAAS,CACPC,UADO,CALqB,IAW5B,KAAAxH,GAAgB,qBAAsBR,EAASkI,WAA/C,CAER,EAOaO,EAAyB,KAAO7I,IAIvC,SACE,KAAA,CACJsB,YAAYzB,EAAM6D,gBAClBgF,gBACAvI,QAAQ,CAAA,GACNH,EACEiB,EAAUM,EAAWD,GACrBgH,EAAcrH,EAAQkC,SAASlC,QAAQ6H,aAAarF,KACvDrB,GAAMA,EAAEsG,gBAAkBA,CADT,EAGpB,GAAI,CAACJ,EAAa,OAElB,KAAMlI,GAAW,KAAMN,MAAYO,QAChCC,QACAgI,EAAAA,cAFoBxI,cAEP8I,kBAAkB,CAC9BpI,aAAcS,EAAQkC,SAASlC,QAAQT,aACvCc,UAAWL,EAAQkC,SAASlC,QAAQK,UACpCoH,gBACAhI,WAAY,CAAC,UAAD,EACZC,SAAU,CACR,GAAI2H,EAAY3H,UAAY,CAAA,EAC5BR,MAAO,CACL,GAAImI,MAAY3H,WAAZ2H,cAAsBnI,QAAS,CAAA,EACnC,GAAGA,CAFE,CAFC,CALoB,IAe5B,KAAAS,GAAgB,qBAAsBR,EAASkI,WAA/C,CAER,EAIaS,EAAyB/I,GAKpC6I,EAAuB,CACrBvH,UAAWtB,EAAQsB,UACnBoH,cAAe1I,EAAQ0I,cACvBvI,MAAOH,EAAQW,QAHM,CAAA,EAWZqI,EAAwB,KAAOhJ,IAItC,OACJ,KAAM,CAAEkI,UAASQ,gBAAepH,YAAYzB,EAAM6D,iBAAoB1D,EAChEiB,EAAUM,EAAWD,GAI3B,GAAIgH,AAHgBrH,EAAQkC,SAASlC,QAAQ6H,aAAarF,KACvDrB,GAAMsG,IAAkBtG,EAAEsG,aADT,EAGJR,UAAYA,EAAS,OAErC,KAAM9H,GAAW,KAAMN,MAAYO,QAChCC,QACAgI,EAAAA,cAFoBxI,cAEP8I,kBAAkB,CAC9BpI,aAAcS,EAAQkC,SAASlC,QAAQT,aACvCc,UAAWL,EAAQkC,SAASlC,QAAQK,UACpCoH,gBACAhI,WAAY,CAAC,SAAD,EACZwH,SAL8B,IAS5B,KAAAtH,GAAgB,qBAAsBR,EAASkI,WAA/C,EAINpC,EAFcgC,EAAU,qBAAuB,sBAEhC,CACb5G,YACAoH,eAFa,CAAf,CAKF,EAWaO,EAAiB,KAAOjJ,IAI/B,SACJ,KAAM,CAAEgI,UAASC,UAAS3G,YAAYzB,EAAM6D,iBAAoB1D,EAC1DiB,EAAUM,EAAWD,GACrB8G,EAAW,CACfC,IAAKJ,EACL3C,IAAK0C,GAEDE,EAAU,GAEhB,GAAIjH,EAAQkC,SAASlC,QAAQ6H,aAAaI,OAAS,EAAG,CAEpD,KAAM9I,GAAW,KAAMN,MAAYO,QAChCC,QACAgI,EAAAA,cAFoBxI,cAEP8I,kBAAkB,CAC9BpI,aAAcS,EAAQkC,SAASlC,QAAQT,aACvCc,UAAWL,EAAQkC,SAASlC,QAAQK,UACpCoH,cAAezH,EAAQkC,SAASlC,QAAQ6H,aAAa,GAAGJ,cACxDhI,WAAY,CAAC,kBAAD,EACZyH,QAAS,CAAEC,UAAF,CALqB,IAS5B,KAAAxH,GAAgB,qBAAsBR,EAASkI,WAA/C,CACD,KAAA,CAEL,KAAMlI,GAAW,KAAMN,MAAYO,QAChCC,QACAgI,EAAAA,cAFoBxI,cAEPyI,kBAAkB,CAC9B/H,aAAcS,EAAQkC,SAASlC,QAAQT,aACvCc,UAAWL,EAAQkC,SAASlC,QAAQK,UACpC6G,QAAS,CAAEC,UAHmB,EAI9BF,SAJ8B,IAQ5B,KAAAtH,GAAgB,mBAAoBR,EAASkI,WAA7C,CACR,CAGApC,EAAQ,iBAAkB,CACxB5E,YACA0G,UACAC,SAHwB,CAA1B,CAMF"}